--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name tokio_stream --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="time" -C metadata=699f13d53147c236 -C extra-filename=-699f13d53147c236 --out-dir /usr/home/liquid/tmp/.tmpSWXQRk/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpSWXQRk/target/debug/deps --extern futures_core=/usr/home/liquid/tmp/.tmpSWXQRk/target/debug/deps/libfutures_core-bd3f11407a39088c.rmeta --extern pin_project_lite=/usr/home/liquid/tmp/.tmpSWXQRk/target/debug/deps/libpin_project_lite-2b266d11d47dd760.rmeta --extern tokio=/usr/home/liquid/tmp/.tmpSWXQRk/target/debug/deps/libtokio-ac8767bf8cf6beb6.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-tokio-stream-0.1.8-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,448,279,122 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
54,716,883 ( 3.78%)  ./malloc/malloc.c:_int_free
43,752,133 ( 3.02%)  ./malloc/malloc.c:_int_malloc
32,015,472 ( 2.21%)  ./malloc/malloc.c:malloc
19,674,864 ( 1.36%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
19,557,731 ( 1.35%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
16,388,811 ( 1.13%)  ./malloc/malloc.c:free
13,837,316 ( 0.96%)  ./elf/dl-lookup.c:do_lookup_x
11,431,647 ( 0.79%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 8,308,821 ( 0.57%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 7,442,933 ( 0.51%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::parse_tt
 6,953,397 ( 0.48%)  ./malloc/malloc.c:malloc_consolidate
 6,161,069 ( 0.43%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 6,088,537 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 5,740,396 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 5,506,051 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 5,312,594 ( 0.37%)  ./malloc/malloc.c:realloc
 5,080,312 ( 0.35%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,630,449 ( 0.32%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 4,529,175 ( 0.31%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 4,454,342 ( 0.31%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
 4,251,008 ( 0.29%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
 4,249,946 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 4,126,967 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
 4,095,061 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:rustc_expand::mbe::macro_parser::parse_tt
 4,084,236 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 3,868,807 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 3,821,191 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 3,719,672 ( 0.26%)  ./malloc/malloc.c:_int_realloc
 3,702,855 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 3,568,496 ( 0.25%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
 3,501,217 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::count_names::{closure#0}
 3,490,352 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 3,367,028 ( 0.23%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
 3,309,486 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token as core::clone::Clone>::clone
 3,307,718 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 3,172,227 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 3,052,960 ( 0.21%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
 2,990,871 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,910,809 ( 0.20%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 2,886,446 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 2,876,791 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 2,792,458 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,686,030 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 2,665,396 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 2,638,949 ( 0.18%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 2,629,875 ( 0.18%)  ./malloc/malloc.c:calloc
 2,591,931 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::ident
 2,539,275 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 2,525,425 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 2,503,675 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump_with
 2,438,773 ( 0.17%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 2,427,262 ( 0.17%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 2,420,626 ( 0.17%)  ./elf/do-rel.h:_dl_relocate_object
 2,414,391 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
 2,411,420 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 2,211,405 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::cmp::PartialEq>::eq
 2,202,506 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 2,164,983 ( 0.15%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 2,156,261 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 2,138,405 ( 0.15%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 2,093,836 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
 2,054,441 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs:rustc_expand::mbe::transcribe::transcribe
 2,035,868 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place::<rustc_expand::mbe::macro_parser::MatcherPos>
 2,025,277 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword
 2,006,953 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 2,004,802 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 2,000,628 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,932,733 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,917,698 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<(rustc_span::hygiene::SyntaxContext, rustc_span::hygiene::ExpnId, rustc_span::hygiene::Transparency), rustc_span::hygiene::SyntaxContext, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 1,915,434 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_lint::context::LintStore>::check_lint_name
 1,889,590 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 1,870,606 ( 0.13%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
 1,834,208 ( 0.13%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
 1,723,236 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 1,648,164 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:core::ptr::drop_in_place::<rustc_expand::mbe::macro_parser::MatcherPos>
 1,634,289 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,602,352 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<alloc::vec::Vec<rustc_parse::parser::TokenType>>::truncate
 1,599,113 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 1,587,651 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 1,568,895 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
 1,547,782 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_expand::mbe::macro_parser::MatcherPosHandle; 1]> as core::ops::drop::Drop>::drop
 1,465,519 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
  562,452 ( 0.04%)                  if value < 0x80 {
        .                               unsafe {
  231,847 ( 0.02%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
  329,290 ( 0.02%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
  308,008 ( 0.02%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
  115,088 ( 0.01%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
3,267,032 ( 0.23%)              let byte = slice[*position];
1,633,516 ( 0.11%)              *position += 1;
1,633,516 ( 0.11%)              if (byte & 0x80) == 0 {
      428 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,588 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
1,085,727 ( 0.07%)                  let byte = slice[*position];
  712,570 ( 0.05%)                  *position += 1;
  723,818 ( 0.05%)                  if (byte & 0x80) == 0 {
  565,313 ( 0.04%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

1,260,369 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
      301 ( 0.00%)      pub ty: Ty<'tcx>,
    1,505 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
   21,568 ( 0.00%)      pub scope: DefId,
   38,296 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
  168,090 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
       42 ( 0.00%)  #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
    6,941 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
      692 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
    1,540 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
   30,615 ( 0.00%)      pub var: BoundVar,
   24,931 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
4,934,701 ( 0.34%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
   26,225 ( 0.00%)  #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
        .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  553,408 ( 0.04%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
      379 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  466,561 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
   12,164 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
        6 ( 0.00%)      Generator(DefId, SubstsRef<'tcx>, hir::Movability),
        .           
        .               /// A type representing the types stored inside a generator.
        .               /// This should only appear in GeneratorInteriors.
        .               GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),
        .           
        .               /// The never type `!`.
        .               Never,
        .           
-- line 167 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
    1,550 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
       10 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
       20 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       40 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      222 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
    6,322 ( 0.00%)              [
    2,018 ( 0.00%)                  ref parent_substs @ ..,
    1,248 ( 0.00%)                  closure_kind_ty,
    1,001 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
    1,134 ( 0.00%)                  tupled_upvars_ty,
      888 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
      666 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        .               pub fn is_valid(self) -> bool {
        .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 383 ----------------------------------------
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
       54 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      128 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
       56 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
       36 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    1,024 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
       99 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
      198 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        3 ( 0.00%)      pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        6 ( 0.00%)      }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
        7 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        8 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       14 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
      100 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
      200 ( 0.00%)          match ty.kind() {
      400 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
      300 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 478 ----------------------------------------
        .                       ),
        .                   }
        .               }
        .           
        .               /// Divides the generator substs into their respective components.
        .               /// The ordering assumed here must match that used by `GeneratorSubsts::new` above.
        .               fn split(self) -> GeneratorSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
    1,079 ( 0.00%)              [ref parent_substs @ .., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {
        .                           GeneratorSubstsParts {
        .                               parent_substs,
        .                               resume_ty,
        .                               yield_ty,
        .                               return_ty,
        .                               witness,
        .                               tupled_upvars_ty,
        .                           }
-- line 494 ----------------------------------------
-- line 676 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       34 ( 0.00%)          let tupled_tys = match self {
       44 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
       71 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
       61 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       54 ( 0.00%)          match self {
       65 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
   10,653 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    9,826 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
      102 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
      395 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
      516 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
      474 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
    1,314 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
      730 ( 0.00%)          match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::Projection(p) => {
        .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::AutoTrait(did) => {
        .                           let trait_ref = self.rebind(ty::TraitRef {
        .                               def_id: did,
        .                               substs: tcx.mk_substs_trait(self_ty, &[]),
        .                           });
        .                           trait_ref.without_const().to_predicate(tcx)
        .                       }
        .                   }
    1,168 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        .               /// Returns the "principal `DefId`" of this set of existential predicates.
        .               ///
        .               /// A Rust trait object type consists (in addition to a lifetime bound)
        .               /// of a set of trait bounds, which are separated into any number
        .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
        .               /// are the set `{Sync}`.
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
       20 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
      524 ( 0.00%)          self[0]
      464 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
       80 ( 0.00%)              })
        .                       .transpose()
       60 ( 0.00%)      }
        .           
      146 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      292 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn projection_bounds<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
        .                   self.iter().filter_map(|predicate| {
        .                       predicate
       56 ( 0.00%)                  .map_bound(|pred| match pred {
        .                               ExistentialPredicate::Projection(projection) => Some(projection),
        .                               _ => None,
        .                           })
        .                           .transpose()
        .                   })
        .               }
        .           
        .               #[inline]
-- line 874 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
   18,163 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  555,685 ( 0.04%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
      555 ( 0.00%)      pub def_id: DefId,
  327,245 ( 0.02%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
    1,047 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
    4,188 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      828 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      368 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      552 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      736 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
      704 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
       88 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
      968 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
    4,248 ( 0.00%)          self.skip_binder().def_id
    1,416 ( 0.00%)      }
        .           
    1,453 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    2,906 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
    1,453 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
      196 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    4,898 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
      686 ( 0.00%)      pub def_id: DefId,
    5,614 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
       20 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
        .                   trait_ref.substs.type_at(0);
        .           
        .                   ty::ExistentialTraitRef {
        .                       def_id: trait_ref.def_id,
        .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
        .                   // otherwise the escaping vars would be captured by the binder
        .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 994 ----------------------------------------
        .               pub fn def_id(&self) -> DefId {
        .                   self.skip_binder().def_id
        .               }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
       21 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
       33 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
       28 ( 0.00%)      }
        .           }
        .           
   36,498 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      100 ( 0.00%)  #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
   12,631 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  148,500 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
   12,065 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   43,140 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  101,693 ( 0.01%)          Binder(value, ty::List::empty())
   11,984 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
   11,351 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
  538,166 ( 0.04%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      352 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    6,367 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
       80 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
   19,868 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
  117,683 ( 0.01%)          Binder(value, self.1)
       80 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
    6,711 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
    4,637 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   96,159 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
       75 ( 0.00%)      }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
        .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
      832 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   28,787 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
   17,594 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   22,026 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
   10,038 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    2,868 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   11,472 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
   10,164 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    4,356 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
    7,260 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
   13,068 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
   12,816 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    1,424 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    1,424 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   15,664 ( 0.00%)      }
        .           
    2,779 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    8,337 ( 0.00%)          self.substs.type_at(0)
    5,558 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   23,020 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   10,084 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
      718 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    9,709 ( 0.00%)      pub c_variadic: bool,
    1,552 ( 0.00%)      pub unsafety: hir::Unsafety,
   11,814 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
    7,709 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   34,898 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   15,418 ( 0.00%)      }
        .           
    5,178 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   39,998 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
   10,356 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    1,311 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    2,804 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      240 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    2,033 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      480 ( 0.00%)          self.skip_binder().c_variadic
      240 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
    1,026 ( 0.00%)          self.skip_binder().unsafety
      513 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
    9,144 ( 0.00%)          self.skip_binder().abi
    2,286 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
       88 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      138 ( 0.00%)  #[derive(HashStable)]
        .           pub struct ParamTy {
      444 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
      874 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
      437 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
      502 ( 0.00%)          ParamTy::new(def.index, def.name)
      251 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       96 ( 0.00%)      pub index: u32,
       96 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
1,641,774 ( 0.11%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
    4,688 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
   49,982 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
   16,936 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
    5,348 ( 0.00%)      pub def_id: DefId,
   13,122 ( 0.00%)      pub index: u32,
   24,954 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
      357 ( 0.00%)      pub index: u32,
       33 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
        .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
    1,550 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
   26,416 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1533 ----------------------------------------
        .                   BoundTy { var, kind: BoundTyKind::Anon }
        .               }
        .           }
        .           
        .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialProjection<'tcx> {
       24 ( 0.00%)      pub item_def_id: DefId,
       48 ( 0.00%)      pub substs: SubstsRef<'tcx>,
       12 ( 0.00%)      pub term: Term<'tcx>,
        .           }
        .           
        .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
        .           
        .           impl<'tcx> ExistentialProjection<'tcx> {
        .               /// Extracts the underlying existential trait reference from this projection.
        .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
        .               /// then this function would return an `exists T. T: Iterator` existential trait
-- line 1551 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
    1,703 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   42,303 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   65,249 ( 0.00%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
    3,259 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
    1,092 ( 0.00%)          match self.kind() {
      236 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
   10,735 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
   17,848 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   14,994 ( 0.00%)          match self.kind() {
    1,514 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
       30 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
-- line 1770 ----------------------------------------
-- line 1775 ----------------------------------------
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
      217 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
       30 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
-- line 1807 ----------------------------------------
-- line 1838 ----------------------------------------
        .                           }
        .                       }
        .                       _ => bug!("`simd_size_and_type` called on invalid type"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_region_ptr(&self) -> bool {
        7 ( 0.00%)          matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_mutable_ptr(&self) -> bool {
       21 ( 0.00%)          matches!(
       14 ( 0.00%)              self.kind(),
        .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
        .                           | Ref(_, _, hir::Mutability::Mut)
        .                   )
        .               }
        .           
        .               /// Get the mutability of the reference or `None` when not a reference
        .               #[inline]
        .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
    2,092 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
   16,240 ( 0.00%)          match self.kind() {
    2,541 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
       22 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
       22 ( 0.00%)          match self.kind() {
       55 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
        .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
        .                   }
       22 ( 0.00%)      }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
       96 ( 0.00%)          matches!(
      215 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
        .                   )
        .               }
        .           
        .               /// Returns `true` if this type is a floating point type.
        .               #[inline]
        .               pub fn is_floating_point(&self) -> bool {
       80 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_trait(&self) -> bool {
       12 ( 0.00%)          matches!(self.kind(), Dynamic(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
      384 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
    2,918 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
    1,018 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
    1,923 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
      933 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
    2,299 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
        .               pub fn is_numeric(&self) -> bool {
        .                   self.is_integral() || self.is_floating_point()
        .               }
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
       14 ( 0.00%)          matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
      291 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    2,996 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   20,222 ( 0.00%)          match self.kind() {
      576 ( 0.00%)              Adt(def, _) if def.is_box() => {
        .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
   11,826 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
       30 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    5,992 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
       16 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
        4 ( 0.00%)      }
        .           
   25,880 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
   12,940 ( 0.00%)          match self.kind() {
    9,651 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
       90 ( 0.00%)              FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
   29,115 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
      618 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
        .                   matches!(self.kind(), FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
       18 ( 0.00%)          matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    2,210 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
       70 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
      626 ( 0.00%)          match self.kind() {
      404 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
      140 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
       27 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       54 ( 0.00%)          match self.kind() {
       54 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       54 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// If the type contains variants, returns the variant for `variant_index`.
        .               /// Panics if `variant_index` is out of range.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
      500 ( 0.00%)      pub fn discriminant_for_variant(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Option<Discr<'tcx>> {
      570 ( 0.00%)          match self.kind() {
      230 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
        .                           // This can actually happen during CTFE, see
        .                           // https://github.com/rust-lang/rust/issues/89765.
        .                           None
        .                       }
      115 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
        .                           Some(adt.discriminant_for_variant(tcx, variant_index))
        .                       }
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
      400 ( 0.00%)      }
        .           
        .               /// Returns the type of the discriminant of this type.
    1,900 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      950 ( 0.00%)          match self.kind() {
    1,520 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
    1,520 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        .               pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
      256 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
      512 ( 0.00%)          match self.kind() {
      512 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
      256 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
   49,824 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   33,216 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
      654 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
    4,314 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
   49,824 ( 0.00%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
        .           /// When in doubt, use `VarianceDiagInfo::default()`
       45 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum VarianceDiagInfo<'tcx> {
        .               /// No additional information - this is the default.
        .               /// We will not add any additional information to error messages.
        .               #[default]
        .               None,
        .               /// We switched our variance because a generic argument occurs inside
        .               /// the invariant generic argument of another type.
        .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
   15,482 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   23,223 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    7,741 ( 0.00%)      }
        .           }

6,250,566 ( 0.43%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir                 

-- line 32 ----------------------------------------
        .           ///
        .           /// If the syntax extension is an MBE macro, it will attempt to match its
        .           /// LHS token tree against the provided token tree, and if it finds a
        .           /// match, will transcribe the RHS token tree, splicing in any captured
        .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
        .           ///
        .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
        .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
1,214,976 ( 0.08%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub enum TokenTree {
        .               /// A single token.
  381,200 ( 0.03%)      Token(Token),
        .               /// A delimited sequence of token trees.
   35,062 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           pub enum CanSynthesizeMissingTokens {
        .               Yes,
        .               No,
        .           }
        .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
        .                           delim == delim2 && tts.eq_unspanned(&tts2)
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Retrieves the `TokenTree`'s span.
        .               pub fn span(&self) -> Span {
    5,880 ( 0.00%)          match self {
    2,788 ( 0.00%)              TokenTree::Token(token) => token.span,
    3,112 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
        .                   }
    2,410 ( 0.00%)      }
        .           
        .               /// Modify the `TokenTree`'s span in-place.
        .               pub fn set_span(&mut self, span: Span) {
    5,880 ( 0.00%)          match self {
    2,410 ( 0.00%)              TokenTree::Token(token) => token.span = span,
    1,060 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
        .                   }
    2,940 ( 0.00%)      }
        .           
    3,460 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
  126,436 ( 0.01%)          TokenTree::Token(Token::new(kind, span))
    3,460 ( 0.00%)      }
        .           
        .               /// Returns the opening delimiter as a token tree.
   14,152 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   42,456 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
   14,152 ( 0.00%)      }
        .           
        .               /// Returns the closing delimiter as a token tree.
   13,997 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   41,991 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
   13,997 ( 0.00%)      }
        .           
   10,053 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    6,702 ( 0.00%)          match self {
   30,159 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
        .                       tt => tt,
        .                   }
   13,404 ( 0.00%)      }
        .           }
        .           
        .           impl<CTX> HashStable<CTX> for TokenStream
        .           where
        .               CTX: crate::HashStableContext,
        .           {
    5,184 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
   21,402 ( 0.00%)          for sub_tt in self.trees() {
        .                       sub_tt.hash_stable(hcx, hasher);
        .                   }
    4,608 ( 0.00%)      }
        .           }
        .           
        .           pub trait CreateTokenStream: sync::Send + sync::Sync {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
        .           }
        .           
        .           impl CreateTokenStream for AttrAnnotatedTokenStream {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 135 ----------------------------------------
        .           
        .           /// A lazy version of [`TokenStream`], which defers creation
        .           /// of an actual `TokenStream` until it is needed.
        .           /// `Box` is here only to reduce the structure size.
        .           #[derive(Clone)]
        .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
        .           
        .           impl LazyTokenStream {
      388 ( 0.00%)      pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
        .                   LazyTokenStream(Lrc::new(Box::new(inner)))
      388 ( 0.00%)      }
        .           
        .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
      165 ( 0.00%)          self.0.create_token_stream()
        .               }
        .           }
        .           
        .           impl fmt::Debug for LazyTokenStream {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "LazyTokenStream({:?})", self.create_token_stream())
        .               }
        .           }
-- line 156 ----------------------------------------
-- line 188 ----------------------------------------
        .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
        .               /// Stores the attributes for an attribute target,
        .               /// along with the tokens for that attribute target.
        .               /// See `AttributesData` for more information
        .               Attributes(AttributesData),
        .           }
        .           
        .           impl AttrAnnotatedTokenStream {
   13,554 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
   13,554 ( 0.00%)      }
        .           
        .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
        .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
        .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
        .               /// If there are inner attributes, they are inserted into the proper
        .               /// place in the attribute target tokens.
       39 ( 0.00%)      pub fn to_tokenstream(&self) -> TokenStream {
       42 ( 0.00%)          let trees: Vec<_> = self
        .                       .0
        .                       .iter()
      147 ( 0.00%)              .flat_map(|tree| match &tree.0 {
       88 ( 0.00%)                  AttrAnnotatedTokenTree::Token(inner) => {
      220 ( 0.00%)                      smallvec![(TokenTree::Token(inner.clone()), tree.1)].into_iter()
        .                           }
       60 ( 0.00%)                  AttrAnnotatedTokenTree::Delimited(span, delim, stream) => smallvec![(
        9 ( 0.00%)                      TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),
        3 ( 0.00%)                      tree.1,
        .                           )]
        .                           .into_iter(),
        .                           AttrAnnotatedTokenTree::Attributes(data) => {
        .                               let mut outer_attrs = Vec::new();
        .                               let mut inner_attrs = Vec::new();
        .                               for attr in &data.attrs {
        .                                   match attr.style {
        .                                       crate::AttrStyle::Outer => {
-- line 223 ----------------------------------------
-- line 279 ----------------------------------------
        .                                   flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());
        .                               }
        .                               flat.extend(target_tokens);
        .                               flat.into_iter()
        .                           }
        .                       })
        .                       .collect();
        .                   TokenStream::new(trees)
       78 ( 0.00%)      }
        .           }
        .           
        .           /// Stores the tokens for an attribute target, along
        .           /// with its attributes.
        .           ///
        .           /// This is constructed during parsing when we need to capture
        .           /// tokens.
        .           ///
-- line 295 ----------------------------------------
-- line 316 ----------------------------------------
        .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
        .           
        .           pub type TreeAndSpacing = (TokenTree, Spacing);
        .           
        .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenStream, 8);
        .           
  127,484 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
        .           pub enum Spacing {
        .               Alone,
        .               Joint,
        .           }
        .           
        .           impl TokenStream {
        .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
        .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
        .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
        .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TokenStream {
        .               fn from(tree: TokenTree) -> TokenStream {
    1,150 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TreeAndSpacing {
        .               fn from(tree: TokenTree) -> TreeAndSpacing {
   57,101 ( 0.00%)          (tree, Spacing::Alone)
        .               }
        .           }
        .           
        .           impl iter::FromIterator<TokenTree> for TokenStream {
        .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
       38 ( 0.00%)          TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
        .               }
        .           }
        .           
        .           impl Eq for TokenStream {}
        .           
        .           impl PartialEq<TokenStream> for TokenStream {
        .               fn eq(&self, other: &TokenStream) -> bool {
        .                   self.trees().eq(other.trees())
-- line 399 ----------------------------------------
-- line 401 ----------------------------------------
        .           }
        .           
        .           impl TokenStream {
        .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
        .                   TokenStream(Lrc::new(streams))
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
    1,415 ( 0.00%)          self.0.is_empty()
    1,415 ( 0.00%)      }
        .           
        .               pub fn len(&self) -> usize {
  143,123 ( 0.01%)          self.0.len()
      702 ( 0.00%)      }
        .           
        .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
        .                   match streams.len() {
        .                       0 => TokenStream::default(),
        .                       1 => streams.pop().unwrap(),
        .                       _ => {
        .                           // We are going to extend the first stream in `streams` with
        .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
        .           
        .                           // Create the final `TokenStream`.
        .                           TokenStream(first_stream_lrc)
        .                       }
        .                   }
        .               }
        .           
        .               pub fn trees(&self) -> Cursor {
    2,729 ( 0.00%)          self.clone().into_trees()
    5,458 ( 0.00%)      }
        .           
   16,287 ( 0.00%)      pub fn into_trees(self) -> Cursor {
        .                   Cursor::new(self)
   32,574 ( 0.00%)      }
        .           
        .               /// Compares two `TokenStream`s, checking equality without regarding span information.
        .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
        .                   let mut t1 = self.trees();
        .                   let mut t2 = other.trees();
        .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
        .                       if !t1.eq_unspanned(&t2) {
        .                           return false;
        .                       }
        .                   }
        .                   t1.next().is_none() && t2.next().is_none()
        .               }
        .           
        .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
      501 ( 0.00%)          TokenStream(Lrc::new(
        .                       self.0
        .                           .iter()
        .                           .enumerate()
   17,640 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
        .                           .collect(),
        .                   ))
        .               }
        .           }
        .           
        .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
        .           #[derive(Clone)]
        .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
        .           pub struct Cursor {
        .               pub stream: TokenStream,
        .               index: usize,
        .           }
        .           
        .           impl Iterator for Cursor {
        .               type Item = TokenTree;
        .           
   42,003 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
  110,099 ( 0.01%)          self.next_with_spacing().map(|(tree, _)| tree)
   56,004 ( 0.00%)      }
        .           }
        .           
        .           impl Cursor {
        .               fn new(stream: TokenStream) -> Self {
        .                   Cursor { stream, index: 0 }
        .               }
        .           
  638,590 ( 0.04%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
  425,157 ( 0.03%)          if self.index < self.stream.len() {
  209,022 ( 0.01%)              self.index += 1;
  654,318 ( 0.05%)              Some(self.stream.0[self.index - 1].clone())
        .                   } else {
   68,488 ( 0.00%)              None
        .                   }
  766,308 ( 0.05%)      }
        .           
        .               pub fn index(&self) -> usize {
        .                   self.index
        .               }
        .           
        .               pub fn append(&mut self, new_stream: TokenStream) {
        .                   if new_stream.is_empty() {
        .                       return;
        .                   }
        .                   let index = self.index;
        .                   let stream = mem::take(&mut self.stream);
        .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
        .                   self.index = index;
        .               }
        .           
   16,919 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
   33,838 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
   33,838 ( 0.00%)      }
        .           }
        .           
   91,293 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub struct DelimSpan {
        .               pub open: Span,
        .               pub close: Span,
        .           }
        .           
        .           impl DelimSpan {
       58 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
        .                   DelimSpan { open: sp, close: sp }
      116 ( 0.00%)      }
        .           
    2,806 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
        .                   DelimSpan { open, close }
    1,403 ( 0.00%)      }
        .           
        .               pub fn dummy() -> Self {
        .                   Self::from_single(DUMMY_SP)
    7,248 ( 0.00%)      }
        .           
   34,200 ( 0.00%)      pub fn entire(self) -> Span {
        .                   self.open.with_hi(self.close.hi())
   25,650 ( 0.00%)      }
        .           }

   33,096 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
 12,191 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  9,137 ( 0.00%)              self.file = file;
 11,962 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  4,846 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
 23,758 ( 0.00%)          self.line_number = line_index + 1;
 36,533 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 88,931 ( 0.01%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
  3,544 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
  1,772 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  8,860 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
 12,404 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  7,088 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
345,471 ( 0.02%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
197,412 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 49,353 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 49,353 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 80,762 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 79,156 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
237,468 ( 0.02%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 79,156 ( 0.01%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 39,578 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 39,578 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 39,578 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
158,312 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
 17,944 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 75,460 ( 0.01%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
 24,645 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
 29,574 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
 19,716 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
 14,538 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
 14,538 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 48,875 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
 23,292 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
  1,606 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
  2,409 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
  1,208 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
  2,416 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
  4,832 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
 19,550 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  9,775 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
 19,550 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  9,775 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 48,875 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
 29,325 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 29,325 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
 29,325 ( 0.00%)          Some((
  9,775 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  9,775 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
444,177 ( 0.03%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
521,340 ( 0.04%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 46,584 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
 25,306 ( 0.00%)              if idx != avoid_idx
 14,555 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
 24,645 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
  4,929 ( 0.00%)          if !self.source_map.files().is_empty() {
  9,858 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
 39,432 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
 24,645 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

748,065 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 357 ----------------------------------------
        .               ///
        .               /// ```
        .               /// use std::rc::Rc;
        .               ///
        .               /// let five = Rc::new(5);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    7,942 ( 0.00%)      pub fn new(value: T) -> Rc<T> {
        .                   // There is an implicit weak pointer owned by all the strong
        .                   // pointers, which ensures that the weak destructor never frees
        .                   // the allocation while the strong destructor is running, even
        .                   // if the weak pointer is stored inside the strong one.
        .                   unsafe {
        .                       Self::from_inner(
  525,112 ( 0.04%)                  Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),
        .                       )
        .                   }
    7,942 ( 0.00%)      }
        .           
        .               /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a
        .               /// weak reference to the constructing `Rc<T>`.
        .               ///
        .               /// Generally, a structure circularly referencing itself, either directly or
        .               /// indirectly, should not hold a strong reference to prevent a memory leak.
        .               /// In `data_fn`, initialization of `T` can make use of the weak reference
        .               /// by cloning and storing it inside `T` for use at a later time.
-- line 383 ----------------------------------------
-- line 637 ----------------------------------------
        .               ///
        .               /// let x = Rc::new(4);
        .               /// let _y = Rc::clone(&x);
        .               /// assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
        .               pub fn try_unwrap(this: Self) -> Result<T, Self> {
        2 ( 0.00%)          if Rc::strong_count(&this) == 1 {
        .                       unsafe {
        .                           let val = ptr::read(&*this); // copy the contained object
        .           
        .                           // Indicate to Weaks that they can't be promoted by decrementing
        .                           // the strong count, and then remove the implicit "strong weak"
        .                           // pointer while also handling drop logic by just crafting a
        .                           // fake Weak.
        .                           this.inner().dec_strong();
-- line 653 ----------------------------------------
-- line 931 ----------------------------------------
        .               /// let five = Rc::new(5);
        .               /// let _weak_five = Rc::downgrade(&five);
        .               ///
        .               /// assert_eq!(1, Rc::weak_count(&five));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_counts", since = "1.15.0")]
        .               pub fn weak_count(this: &Self) -> usize {
   25,989 ( 0.00%)          this.inner().weak() - 1
        .               }
        .           
        .               /// Gets the number of strong (`Rc`) pointers to this allocation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::rc::Rc;
-- line 947 ----------------------------------------
-- line 1023 ----------------------------------------
        .               pub unsafe fn decrement_strong_count(ptr: *const T) {
        .                   unsafe { mem::drop(Rc::from_raw(ptr)) };
        .               }
        .           
        .               /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to
        .               /// this allocation.
        .               #[inline]
        .               fn is_unique(this: &Self) -> bool {
      585 ( 0.00%)          Rc::weak_count(this) == 0 && Rc::strong_count(this) == 1
        .               }
        .           
        .               /// Returns a mutable reference into the given `Rc`, if there are
        .               /// no other `Rc` or [`Weak`] pointers to the same allocation.
        .               ///
        .               /// Returns [`None`] otherwise, because it is not safe to
        .               /// mutate a shared value.
        .               ///
-- line 1039 ----------------------------------------
-- line 1053 ----------------------------------------
        .               /// assert_eq!(*x, 4);
        .               ///
        .               /// let _y = Rc::clone(&x);
        .               /// assert!(Rc::get_mut(&mut x).is_none());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
        .               pub fn get_mut(this: &mut Self) -> Option<&mut T> {
      195 ( 0.00%)          if Rc::is_unique(this) { unsafe { Some(Rc::get_mut_unchecked(this)) } } else { None }
        .               }
        .           
        .               /// Returns a mutable reference into the given `Rc`,
        .               /// without any check.
        .               ///
        .               /// See also [`get_mut`], which is safe and does appropriate checks.
        .               ///
        .               /// [`get_mut`]: Rc::get_mut
-- line 1069 ----------------------------------------
-- line 1088 ----------------------------------------
        .               /// }
        .               /// assert_eq!(*x, "foo");
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "get_mut_unchecked", issue = "63292")]
        .               pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
        .                   // We are careful to *not* create a reference covering the "count" fields, as
        .                   // this would conflict with accesses to the reference counts (e.g. by `Weak`).
   76,127 ( 0.01%)          unsafe { &mut (*this.ptr.as_ptr()).value }
        .               }
        .           
        .               #[inline]
        .               #[stable(feature = "ptr_eq", since = "1.17.0")]
        .               /// Returns `true` if the two `Rc`s point to the same allocation
        .               /// (in a vein similar to [`ptr::eq`]).
        .               ///
        .               /// # Examples
-- line 1104 ----------------------------------------
-- line 1109 ----------------------------------------
        .               /// let five = Rc::new(5);
        .               /// let same_five = Rc::clone(&five);
        .               /// let other_five = Rc::new(5);
        .               ///
        .               /// assert!(Rc::ptr_eq(&five, &same_five));
        .               /// assert!(!Rc::ptr_eq(&five, &other_five));
        .               /// ```
        .               pub fn ptr_eq(this: &Self, other: &Self) -> bool {
    1,974 ( 0.00%)          this.ptr.as_ptr() == other.ptr.as_ptr()
        .               }
        .           }
        .           
        .           impl<T: Clone> Rc<T> {
        .               /// Makes a mutable reference into the given `Rc`.
        .               ///
        .               /// If there are other `Rc` pointers to the same allocation, then `make_mut` will
        .               /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also
-- line 1125 ----------------------------------------
-- line 1167 ----------------------------------------
        .               /// *Rc::make_mut(&mut data) += 1;
        .               ///
        .               /// assert!(76 == *data);
        .               /// assert!(weak.upgrade().is_none());
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
  122,008 ( 0.01%)      pub fn make_mut(this: &mut Self) -> &mut T {
   73,068 ( 0.01%)          if Rc::strong_count(this) != 1 {
        .                       // Gotta clone the data, there are other Rcs.
        .                       // Pre-allocate memory to allow writing the cloned value directly.
   16,055 ( 0.00%)              let mut rc = Self::new_uninit();
        .                       unsafe {
        .                           let data = Rc::get_mut_unchecked(&mut rc);
        .                           (**this).write_clone_into_raw(data.as_mut_ptr());
   32,110 ( 0.00%)                  *this = rc.assume_init();
        .                       }
   16,936 ( 0.00%)          } else if Rc::weak_count(this) != 0 {
        .                       // Can just steal the data, all that's left is Weaks
        .                       let mut rc = Self::new_uninit();
        .                       unsafe {
        .                           let data = Rc::get_mut_unchecked(&mut rc);
        .                           data.as_mut_ptr().copy_from_nonoverlapping(&**this, 1);
        .           
        .                           this.inner().dec_strong();
        .                           // Remove implicit strong-weak ref (no need to craft a fake
-- line 1193 ----------------------------------------
-- line 1196 ----------------------------------------
        .                           ptr::write(this, rc.assume_init());
        .                       }
        .                   }
        .                   // This unsafety is ok because we're guaranteed that the pointer
        .                   // returned is the *only* pointer that will ever be returned to T. Our
        .                   // reference count is guaranteed to be 1 at this point, and we required
        .                   // the `Rc<T>` itself to be `mut`, so we're returning the only possible
        .                   // reference to the allocation.
   24,523 ( 0.00%)          unsafe { &mut this.ptr.as_mut().value }
  146,364 ( 0.01%)      }
        .           }
        .           
        .           impl Rc<dyn Any> {
        .               #[inline]
        .               #[stable(feature = "rc_downcast", since = "1.29.0")]
        .               /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.
        .               ///
        .               /// # Examples
-- line 1213 ----------------------------------------
-- line 1344 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Copy elements from slice into newly allocated Rc<\[T\]>
        .               ///
        .               /// Unsafe because the caller must either take ownership or bind `T: Copy`
        .               #[cfg(not(no_global_oom_handling))]
    3,816 ( 0.00%)      unsafe fn copy_from_slice(v: &[T]) -> Rc<[T]> {
        .                   unsafe {
        .                       let ptr = Self::allocate_for_slice(v.len());
      810 ( 0.00%)              ptr::copy_nonoverlapping(v.as_ptr(), &mut (*ptr).value as *mut [T] as *mut T, v.len());
        .                       Self::from_ptr(ptr)
        .                   }
    4,914 ( 0.00%)      }
        .           
        .               /// Constructs an `Rc<[T]>` from an iterator known to be of a certain size.
        .               ///
        .               /// Behavior is undefined should the size be wrong.
        .               #[cfg(not(no_global_oom_handling))]
        .               unsafe fn from_iter_exact(iter: impl iter::Iterator<Item = T>, len: usize) -> Rc<[T]> {
        .                   // Panic guard while cloning T elements.
        .                   // In the event of a panic, elements that have been written
-- line 1366 ----------------------------------------
-- line 1419 ----------------------------------------
        .                   unsafe { Self::from_iter_exact(v.iter().cloned(), v.len()) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           impl<T: Copy> RcFromSlice<T> for Rc<[T]> {
        .               #[inline]
        .               fn from_slice(v: &[T]) -> Self {
       13 ( 0.00%)          unsafe { Rc::copy_from_slice(v) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Deref for Rc<T> {
        .               type Target = T;
        .           
        .               #[inline(always)]
        .               fn deref(&self) -> &T {
  161,400 ( 0.01%)          &self.inner().value
        .               }
        .           }
        .           
        .           #[unstable(feature = "receiver_trait", issue = "none")]
        .           impl<T: ?Sized> Receiver for Rc<T> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {
-- line 1445 ----------------------------------------
-- line 1463 ----------------------------------------
        .               /// }
        .               ///
        .               /// let foo  = Rc::new(Foo);
        .               /// let foo2 = Rc::clone(&foo);
        .               ///
        .               /// drop(foo);    // Doesn't print anything
        .               /// drop(foo2);   // Prints "dropped!"
        .               /// ```
  784,040 ( 0.05%)      fn drop(&mut self) {
        .                   unsafe {
  491,479 ( 0.03%)              self.inner().dec_strong();
1,163,921 ( 0.08%)              if self.inner().strong() == 0 {
        .                           // destroy the contained object
   36,622 ( 0.00%)                  ptr::drop_in_place(Self::get_mut_unchecked(self));
        .           
        .                           // remove the implicit "strong weak" pointer now that we've
        .                           // destroyed the contents.
        1 ( 0.00%)                  self.inner().dec_weak();
        .           
  185,342 ( 0.01%)                  if self.inner().weak() == 0 {
      556 ( 0.00%)                      Global.deallocate(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));
        .                           }
        .                       }
        .                   }
  859,368 ( 0.06%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Clone for Rc<T> {
        .               /// Makes a clone of the `Rc` pointer.
        .               ///
        .               /// This creates another pointer to the same allocation, increasing the
        .               /// strong reference count.
-- line 1495 ----------------------------------------
-- line 1562 ----------------------------------------
        .           /// cost to pay off more easily. It's also more likely to have two `Rc` clones, that point to
        .           /// the same value, than two `&T`s.
        .           ///
        .           /// We can only do this when `T: Eq` as a `PartialEq` might be deliberately irreflexive.
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized + MarkerEq> RcEqIdent<T> for Rc<T> {
        .               #[inline]
        .               fn eq(&self, other: &Rc<T>) -> bool {
    1,998 ( 0.00%)          Rc::ptr_eq(self, other) || **self == **other
        .               }
        .           
        .               #[inline]
        .               fn ne(&self, other: &Rc<T>) -> bool {
        .                   !Rc::ptr_eq(self, other) && **self != **other
        .               }
        .           }
        .           
-- line 1578 ----------------------------------------
-- line 1879 ----------------------------------------
        .               /// # use std::rc::Rc;
        .               /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);
        .               /// let shared: Rc<Vec<i32>> = Rc::from(original);
        .               /// assert_eq!(vec![1, 2, 3], *shared);
        .               /// ```
        .               #[inline]
        .               fn from(mut v: Vec<T>) -> Rc<[T]> {
        .                   unsafe {
    1,104 ( 0.00%)              let rc = Rc::copy_from_slice(&v);
        .           
        .                       // Allow the Vec to free its memory, but not destroy its contents
        .                       v.set_len(0);
        .           
        .                       rc
        .                   }
        .               }
        .           }
-- line 1895 ----------------------------------------
-- line 2080 ----------------------------------------
        .               #[must_use]
        .               pub fn new() -> Weak<T> {
        .                   Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect("MAX is not 0") }
        .               }
        .           }
        .           
        .           pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {
        .               let address = ptr as *mut () as usize;
      133 ( 0.00%)      address == usize::MAX
        .           }
        .           
        .           /// Helper type to allow accessing the reference counts without
        .           /// making any assertions about the data field.
        .           struct WeakInner<'a> {
        .               weak: &'a Cell<usize>,
        .               strong: &'a Cell<usize>,
        .           }
-- line 2096 ----------------------------------------
-- line 2299 ----------------------------------------
        .                       })
        .                       .unwrap_or(0)
        .               }
        .           
        .               /// Returns `None` when the pointer is dangling and there is no allocated `RcBox`,
        .               /// (i.e., when this `Weak` was created by `Weak::new`).
        .               #[inline]
        .               fn inner(&self) -> Option<WeakInner<'_>> {
        1 ( 0.00%)          if is_dangling(self.ptr.as_ptr()) {
        .                       None
        .                   } else {
        .                       // We are careful to *not* create a reference covering the "data" field, as
        .                       // the field may be mutated concurrently (for example, if the last `Rc`
        .                       // is dropped, the data field will be dropped in-place).
        .                       Some(unsafe {
        .                           let ptr = self.ptr.as_ptr();
        .                           WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }
-- line 2315 ----------------------------------------
-- line 2391 ----------------------------------------
        .               /// assert!(other_weak_foo.upgrade().is_none());
        .               /// ```
        .               fn drop(&mut self) {
        .                   let inner = if let Some(inner) = self.inner() { inner } else { return };
        .           
        .                   inner.dec_weak();
        .                   // the weak count starts at 1, and will only go to zero if all
        .                   // the strong pointers have disappeared.
        2 ( 0.00%)          if inner.weak() == 0 {
        .                       unsafe {
        .                           Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()));
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rc_weak", since = "1.4.0")]
-- line 2407 ----------------------------------------
-- line 2469 ----------------------------------------
        .           
        .               #[inline]
        .               fn strong(&self) -> usize {
        .                   self.strong_ref().get()
        .               }
        .           
        .               #[inline]
        .               fn inc_strong(&self) {
  487,352 ( 0.03%)          let strong = self.strong();
        .           
        .                   // We want to abort on overflow instead of dropping the value.
        .                   // The reference count will never be zero when this is called;
        .                   // nevertheless, we insert an abort here to hint LLVM at
        .                   // an otherwise missed optimization.
1,508,206 ( 0.10%)          if strong == 0 || strong == usize::MAX {
        .                       abort();
        .                   }
    3,805 ( 0.00%)          self.strong_ref().set(strong + 1);
        .               }
        .           
        .               #[inline]
        .               fn dec_strong(&self) {
1,861,916 ( 0.13%)          self.strong_ref().set(self.strong() - 1);
        .               }
        .           
        .               #[inline]
        .               fn weak(&self) -> usize {
        .                   self.weak_ref().get()
        .               }
        .           
        .               #[inline]
-- line 2499 ----------------------------------------
-- line 2507 ----------------------------------------
        .                   if weak == 0 || weak == usize::MAX {
        .                       abort();
        .                   }
        .                   self.weak_ref().set(weak + 1);
        .               }
        .           
        .               #[inline]
        .               fn dec_weak(&self) {
  278,249 ( 0.02%)          self.weak_ref().set(self.weak() - 1);
        .               }
        .           }
        .           
        .           impl<T: ?Sized> RcInnerPtr for RcBox<T> {
        .               #[inline(always)]
        .               fn weak_ref(&self) -> &Cell<usize> {
        .                   &self.weak
        .               }
-- line 2523 ----------------------------------------

  252,643 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      200 ( 0.00%)      fn clone(&self) -> Self {
   56,213 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
   11,353 ( 0.00%)              table: self.table.clone(),
        .                   }
      225 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
   61,441 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  190,074 ( 0.01%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  203,072 ( 0.01%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
        .               hash_builder.hash_one(val)
        4 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
  106,162 ( 0.01%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
      115 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
        .               /// map.insert("c", 3);
        .               ///
        .               /// for key in map.keys() {
        .               ///     println!("{}", key);
        .               /// }
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn keys(&self) -> Keys<'_, K, V> {
        6 ( 0.00%)          Keys { inner: self.iter() }
        .               }
        .           
        .               /// An iterator visiting all values in arbitrary order.
        .               /// The iterator element type is `&'a V`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
   11,228 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
   36,365 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,068 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       60 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
    1,275 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
    1,335 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  344,815 ( 0.02%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  544,013 ( 0.04%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  193,770 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
  255,362 ( 0.02%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      252 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    1,008 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
      504 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
      336 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      168 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
        .               /// mutable reference will be returned to any value. `None` will be returned if any of the
        .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
1,897,626 ( 0.13%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      631 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        2 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
  974,984 ( 0.07%)              self.table
  919,480 ( 0.06%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  108,279 ( 0.01%)              None
        .                   }
1,774,490 ( 0.12%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   27,542 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  516,387 ( 0.04%)          match self.remove_entry(k) {
   20,050 ( 0.00%)              Some((_, v)) => Some(v),
   26,716 ( 0.00%)              None => None,
        .                   }
   59,959 ( 0.00%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  159,062 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
1,151,432 ( 0.08%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
2,928,025 ( 0.20%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
3,169,634 ( 0.22%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  346,950 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
1,788,396 ( 0.12%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  208,748 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
  634,432 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  812,350 ( 0.06%)          self.from_hash(hash, equivalent(k))
1,180,583 ( 0.08%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
1,136,452 ( 0.08%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  340,707 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,172 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   24,186 ( 0.00%)          IntoIter {
   14,031 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
    3,516 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
   82,888 ( 0.01%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
      823 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       11 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
    3,094 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       32 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
       64 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn insert(self, value: V) -> &'a mut V
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
        .                   let table = &mut self.table.table;
       48 ( 0.00%)          let entry = table.insert_entry(
        .                       self.hash,
        .                       (self.key, value),
        .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
        .                   );
        .                   &mut entry.1
        .               }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   22,514 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
   20,216 ( 0.00%)          let iter = iter.into_iter();
    9,119 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
    1,053 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
   50,265 ( 0.00%)              self.insert(k, v);
        .                   });
   11,804 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

1,235,884 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
    25,052 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   219,787 ( 0.02%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
         .                               old
         .                           }
         .                       }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       360 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
         .                               self.end
         .                           }
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
    40,280 ( 0.00%)                  len!(self)
         .                       }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
         .                       fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
   150,701 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
    27,132 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
20,568,948 ( 1.42%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         1 ( 0.00%)                          Some(next_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
         .                       fn size_hint(&self) -> (usize, Option<usize>) {
   787,407 ( 0.05%)                  let exact = len!(self);
         .                           (exact, Some(exact))
         .                       }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    10,697 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
     1,950 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
     2,338 ( 0.00%)                  while let Some(x) = self.next() {
    16,219 ( 0.00%)                      if !f(x) {
         .                                   return false;
         .                               }
         .                           }
         .                           true
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   225,371 ( 0.02%)                  while let Some(x) = self.next() {
   231,560 ( 0.02%)                      if f(x) {
         .                                   return true;
         .                               }
         .                           }
         .                           false
         8 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
    12,414 ( 0.00%)                  while let Some(x) = self.next() {
    48,042 ( 0.00%)                      if predicate(&x) {
         .                                   return Some(x);
         .                               }
         .                           }
         .                           None
     7,420 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
    33,397 ( 0.00%)                  while let Some(x) = self.next() {
   137,047 ( 0.01%)                      if let Some(y) = f(x) {
    23,037 ( 0.00%)                          return Some(y);
         .                               }
         .                           }
         .                           None
     4,797 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
         .                           let n = len!(self);
         .                           let mut i = 0;
         .                           while let Some(x) = self.next() {
   112,651 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                               i += 1;
         .                           }
         .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
    24,002 ( 0.00%)                  while let Some(x) = self.next_back() {
   330,887 ( 0.02%)                      i -= 1;
   275,107 ( 0.02%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
    48,537 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
         .                       fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
       305 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
       343 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
   512,880 ( 0.04%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         .                                   Some(next_back_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
-- line 369 ----------------------------------------

 3,815,811 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
    4,478 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
  636,508 ( 0.04%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
   23,320 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
   22,684 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
   11,352 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
   34,026 ( 0.00%)      pub prev_token: Token,
   11,362 ( 0.00%)      pub capture_cfg: bool,
   22,734 ( 0.00%)      restrictions: Restrictions,
   22,704 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
   22,704 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
   22,704 ( 0.00%)      unmatched_angle_bracket_count: u32,
   34,056 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
   11,352 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
   11,352 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
   46,034 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
   45,408 ( 0.00%)      capturing: Capturing,
   11,352 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
   40,054 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
  259,106 ( 0.02%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
   58,776 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
   19,399 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
  117,901 ( 0.01%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
   22,548 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
   45,096 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    9,115 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   17,817 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
1,257,684 ( 0.09%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
  622,548 ( 0.04%)              let (tree, spacing) = if !self.frame.open_delim {
   14,152 ( 0.00%)                  self.frame.open_delim = true;
   70,760 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
1,212,472 ( 0.08%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
   60,592 ( 0.00%)              } else if !self.frame.close_delim {
   13,997 ( 0.00%)                  self.frame.close_delim = true;
   69,985 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   27,848 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  181,012 ( 0.01%)                  self.frame = frame;
        .                           continue;
        .                       } else {
   42,750 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  237,880 ( 0.02%)              match tree {
        .                           TokenTree::Token(token) => {
  838,456 ( 0.06%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
  838,456 ( 0.06%)      }
        .           
  478,980 ( 0.03%)      fn next_desugared(&mut self) -> (Token, Spacing) {
  143,732 ( 0.01%)          let (data, attr_style, sp) = match self.next() {
       57 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
  239,395 ( 0.02%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
    7,447 ( 0.00%)          for ch in data.as_str().chars() {
        .                       count = match ch {
        .                           '"' => 1,
        .                           '#' if count > 0 => count + 1,
        .                           _ => 0,
        .                       };
        .                       num_of_hashes = cmp::max(num_of_hashes, count);
        .                   }
        .           
       76 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
       95 ( 0.00%)          let body = TokenTree::Delimited(
        .                       delim_span,
        .                       token::Bracket,
      228 ( 0.00%)              [
      133 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
       76 ( 0.00%)                  TokenTree::token(token::Eq, sp),
      152 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
        .                       ]
        .                       .iter()
        .                       .cloned()
        .                       .collect::<TokenStream>(),
       19 ( 0.00%)          );
        .           
        .                   self.stack.push(mem::replace(
        .                       &mut self.frame,
        .                       TokenCursorFrame::new(
        .                           delim_span,
        .                           token::NoDelim,
       19 ( 0.00%)                  if attr_style == AttrStyle::Inner {
        .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           } else {
      228 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
       57 ( 0.00%)          self.next()
  431,082 ( 0.03%)      }
        .           }
        .           
   27,970 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
   22,376 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
       30 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    1,050 ( 0.00%)      Some(match token.kind {
    2,100 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    2,100 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    2,100 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
    3,675 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    1,050 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    3,675 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
    2,625 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
   25,522 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
    1,823 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    3,646 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
   56,513 ( 0.00%)          let mut parser = Parser {
        .                       sess,
    1,823 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
    1,823 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
   10,938 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
    3,646 ( 0.00%)          parser.bump();
        .           
        .                   parser
   16,407 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
  600,876 ( 0.04%)              let (mut next, spacing) = if self.desugar_doc_comments {
  191,592 ( 0.01%)                  self.token_cursor.next_desugared()
        .                       } else {
  156,744 ( 0.01%)                  self.token_cursor.next()
        .                       };
  400,584 ( 0.03%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  100,146 ( 0.01%)              self.token_cursor.break_last_token = false;
  400,584 ( 0.03%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    7,484 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
  342,492 ( 0.02%)              if matches!(
  200,292 ( 0.01%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
  400,432 ( 0.03%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
   30,024 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
    3,336 ( 0.00%)          if self.expected_tokens.is_empty() {
    5,838 ( 0.00%)              if self.token == *t {
    4,865 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
   28,356 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
   50,040 ( 0.00%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
   33,744 ( 0.00%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
    5,624 ( 0.00%)          if edible.contains(&self.token.kind) {
    7,548 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
   42,180 ( 0.00%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   29,093 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   23,367 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
   53,046 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
    7,578 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
   45,468 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   30,312 ( 0.00%)          self.bump();
        .                   Ok(ident)
   75,780 ( 0.01%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
  570,682 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
  253,296 ( 0.02%)          let is_present = self.token == *tok;
  170,534 ( 0.01%)          if !is_present {
  350,551 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
  570,682 ( 0.04%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
        4 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
  122,191 ( 0.01%)          let is_present = self.check(tok);
   80,565 ( 0.01%)          if is_present {
   17,110 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
        5 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
   36,645 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
    7,096 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
  222,253 ( 0.02%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
   49,865 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
   39,458 ( 0.00%)          if self.check_keyword(kw) {
    3,723 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
   49,865 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   11,322 ( 0.00%)          if self.token.is_keyword(kw) {
    1,992 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
    1,170 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
      936 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
   23,712 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   11,856 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
   26,676 ( 0.00%)      }
        .           
   49,458 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   17,766 ( 0.00%)          if ok {
        .                       true
        .                   } else {
   12,368 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
   49,458 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
    6,460 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   14,416 ( 0.00%)      fn check_path(&mut self) -> bool {
   32,677 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   18,020 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
    7,692 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
    6,432 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
    4,176 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    2,320 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
    4,176 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
    6,664 ( 0.00%)          self.check_or_expected(
    3,332 ( 0.00%)              self.token.is_like_plus(),
    3,332 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
   68,208 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   39,788 ( 0.00%)          if self.token.kind == expected {
    4,524 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   17,110 ( 0.00%)          match self.token.kind.break_two_token_op() {
      273 ( 0.00%)              Some((first, second)) if first == expected => {
      156 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
      195 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
      351 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
       39 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
      546 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   10,149 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
   64,688 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
      980 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
    2,076 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
       60 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
    4,174 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   13,532 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
    8,912 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    3,864 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    4,174 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
    4,174 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    5,778 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    2,889 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    1,926 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
    7,173 ( 0.00%)              TokenExpectType::Expect => self.check(k),
      150 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
    6,188 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
    4,467 ( 0.00%)              if let Some(ref t) = sep.sep {
    5,417 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
    2,240 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
    2,224 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
    1,802 ( 0.00%)              let t = f(self)?;
    1,809 ( 0.00%)              v.push(t);
        .                   }
        .           
    4,112 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
    4,364 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
    4,580 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
    2,536 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    1,536 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
    6,048 ( 0.00%)          Ok((val, trailing))
    3,664 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
    2,215 ( 0.00%)          self.expect(bra)?;
    3,664 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
      985 ( 0.00%)              &token::OpenDelim(delim),
    1,512 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
1,301,911 ( 0.09%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
  600,882 ( 0.04%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
  400,588 ( 0.03%)          self.prev_token = mem::replace(&mut self.token, next_token);
  100,147 ( 0.01%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  100,147 ( 0.01%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
  800,864 ( 0.06%)      pub fn bump(&mut self) {
  400,432 ( 0.03%)          let next_token = self.next_tok(self.token.span);
  600,648 ( 0.04%)          self.bump_with(next_token);
  800,864 ( 0.06%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
       16 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    2,688 ( 0.00%)          if dist == 0 {
      992 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   11,800 ( 0.00%)          let frame = &self.token_cursor.frame;
   12,734 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
   25,461 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
   33,382 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
   42,020 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
   14,507 ( 0.00%)                      Some(tree) => match tree {
    6,644 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
    5,611 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
    7,614 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
    4,509 ( 0.00%)          let mut token = Token::dummy();
    5,210 ( 0.00%)          while i < dist {
   34,635 ( 0.00%)              token = cursor.next().0;
   14,610 ( 0.00%)              if matches!(
    9,262 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
    2,720 ( 0.00%)              i += 1;
        .                   }
      481 ( 0.00%)          return looker(&token);
        .               }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
    9,540 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    2,759 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
    9,540 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
      880 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
       25 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
    3,520 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
   11,792 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
    4,000 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
      105 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
   20,636 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
        .                       id: DUMMY_NODE_ID,
        .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
        4 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
      702 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
        .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
      426 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
      639 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    1,787 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    1,647 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
   10,647 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
    9,464 ( 0.00%)          Ok(
    7,617 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    1,278 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    1,275 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
    4,564 ( 0.00%)                  match self.parse_token_tree() {
    5,705 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
    2,282 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
       84 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
       38 ( 0.00%)                      let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
       38 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
       38 ( 0.00%)                      let span = expr.span;
        .           
      190 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
      342 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
    8,281 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
    4,554 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
    2,392 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
   59,832 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
   41,549 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
  110,944 ( 0.01%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
   78,276 ( 0.01%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
    5,402 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    5,402 ( 0.00%)                  let span = frame.span;
    2,701 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
    5,402 ( 0.00%)                  self.bump();
   13,505 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
    9,556 ( 0.00%)                  self.bump();
   23,890 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
   52,353 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
    1,616 ( 0.00%)          let old = self.restrictions;
    2,038 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
    2,115 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
   15,384 ( 0.00%)      fn is_crate_vis(&self) -> bool {
    9,615 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   17,307 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
   23,010 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
   11,583 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
    1,617 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
    6,468 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
    1,488 ( 0.00%)              return Ok(Visibility {
    4,464 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
      129 ( 0.00%)          let lo = self.prev_token.span;
        .           
      645 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
      389 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
       90 ( 0.00%)                  self.bump(); // `(`
       60 ( 0.00%)                  self.bump(); // `crate`
       90 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
       30 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
        .                           return Ok(Visibility {
       90 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
      119 ( 0.00%)              } else if self.is_keyword_ahead(1, &[kw::In]) {
        .                           // Parse `pub(in path)`.
        .                           self.bump(); // `(`
        .                           self.bump(); // `in`
        .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
        .                           self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .                           let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
        .                           return Ok(Visibility {
        .                               span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
       68 ( 0.00%)              } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren))
       85 ( 0.00%)                  && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])
        .                       {
        .                           // Parse `pub(self)` or `pub(super)`.
       51 ( 0.00%)                  self.bump(); // `(`
       17 ( 0.00%)                  let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`
       51 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
      187 ( 0.00%)                  let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };
        .                           return Ok(Visibility {
       68 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
      246 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   20,709 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
      213 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
      550 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
      385 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
      550 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
   58,424 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   29,212 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
   22,779 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
   58,104 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
  105,400 ( 0.01%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   52,700 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   52,700 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
  105,400 ( 0.01%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

  549,789 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir               

-- line 10 ----------------------------------------
      .           pub fn move_path_children_matching<'tcx, F>(
      .               move_data: &MoveData<'tcx>,
      .               path: MovePathIndex,
      .               mut cond: F,
      .           ) -> Option<MovePathIndex>
      .           where
      .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
      .           {
    318 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
    854 ( 0.00%)      while let Some(child_index) = next_child {
      .                   let move_path_children = &move_data.move_paths[child_index];
    648 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
  1,088 ( 0.00%)              if cond(elem) {
      .                           return Some(child_index);
      .                       }
      .                   }
      .                   next_child = move_path_children.next_sibling;
      .               }
      .           
      .               None
      .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
      .           //
      .           // FIXME: we have to do something for moving slice patterns.
      .           fn place_contents_drop_state_cannot_differ<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               place: mir::Place<'tcx>,
      .           ) -> bool {
      .               let ty = place.ty(body, tcx).ty;
286,420 ( 0.02%)      match ty.kind() {
      .                   ty::Array(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
      .                           place, ty
      .                       );
      .                       false
      .                   }
      .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
161,307 ( 0.01%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
      .                   _ => false,
      .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               lookup_result: LookupResult,
      .               each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 10,854 ( 0.00%)      match lookup_result {
      .                   LookupResult::Parent(..) => {
      .                       // access to untracked value - do not touch children
      .                   }
      .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
      .               }
      .           }
      .           
      .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               move_path_index: MovePathIndex,
      .               mut each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
436,784 ( 0.03%)      fn is_terminal_path<'tcx>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   path: MovePathIndex,
      .               ) -> bool {
109,196 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
436,784 ( 0.03%)      }
      .           
518,649 ( 0.04%)      fn on_all_children_bits<'tcx, F>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   move_path_index: MovePathIndex,
      .                   each_child: &mut F,
      .               ) where
      .                   F: FnMut(MovePathIndex),
      .               {
 14,015 ( 0.00%)          each_child(move_path_index);
      .           
382,915 ( 0.03%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
      .                       return;
      .                   }
      .           
 33,908 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
 86,085 ( 0.01%)          while let Some(child_index) = next_child_index {
 26,562 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
  4,427 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
      .                   }
423,910 ( 0.03%)      }
292,183 ( 0.02%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
      .           }
      .           
      .           pub fn on_all_drop_children_bits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               path: MovePathIndex,
      .               mut each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 12,650 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
  7,984 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
  1,996 ( 0.00%)          let ty = place.ty(body, tcx).ty;
      .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
      .           
  1,216 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
 12,210 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
  1,990 ( 0.00%)              each_child(child);
      .                   } else {
      .                       debug!("on_all_drop_children_bits - skipping")
      .                   }
      .               })
      .           }
      .           
 17,532 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
  1,570 ( 0.00%)      for arg in body.args_iter() {
  4,332 ( 0.00%)          let place = mir::Place::from(arg);
  6,498 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
      .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
  2,214 ( 0.00%)              callback(mpi, DropFlagState::Present)
      .                   });
      .               }
 12,560 ( 0.00%)  }
      .           
566,001 ( 0.04%)  pub fn drop_flag_effects_for_location<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
      .               debug!("drop_flag_effects_for_location({:?})", loc);
      .           
      .               // first, move out of the RHS
 23,286 ( 0.00%)      for mi in &move_data.loc_map[loc] {
113,751 ( 0.01%)          let path = mi.move_path_index(move_data);
      .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
      .           
 31,932 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
      .               }
      .           
      .               debug!("drop_flag_effects: assignment for location({:?})", loc);
      .           
 14,015 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
441,016 ( 0.03%)  }
      .           
      .           pub fn for_location_inits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 23,286 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
 68,660 ( 0.00%)          let init = move_data.inits[*ii];
 41,442 ( 0.00%)          match init.kind {
      .                       InitKind::Deep => {
      .                           let path = init.path;
      .           
      .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
      .                       }
      .                       InitKind::Shallow => {
      .                           let mpi = init.path;
      .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
      .               }
      .           }
      .           
      .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
      .           /// `Downcast` to a variant besides the `active_variant`.
      .           ///
      .           /// NOTE: If there are no move paths corresponding to an inactive variant,
      .           /// `handle_inactive_variant` will not be called for that variant.
  6,552 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &mir::Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               enum_place: mir::Place<'tcx>,
      .               active_variant: VariantIdx,
      .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
      .           ) {
  2,730 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
      .                   LookupResult::Exact(mpi) => mpi,
      .                   LookupResult::Parent(_) => return,
      .               };
      .           
      .               let enum_path = &move_data.move_paths[enum_mpi];
  2,999 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
      .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
      .                   // projection than `enum_place`. This additional projection must be a downcast since the
      .                   // base is an enum.
    385 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
  1,540 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
      .           
  1,155 ( 0.00%)          let variant_idx = match *downcast {
      .                       mir::ProjectionElem::Downcast(_, idx) => idx,
      .                       _ => unreachable!(),
      .                   };
      .           
    385 ( 0.00%)          if variant_idx != active_variant {
      .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
    406 ( 0.00%)                  handle_inactive_variant(mpi)
      .                       });
      .                   }
      .               }
  4,368 ( 0.00%)  }

382,881 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs
--------------------------------------------------------------------------------
Ir               

-- line 16 ----------------------------------------
      .           use std::mem;
      .           
      .           // A Marker adds the given mark to the syntax context.
      .           struct Marker(LocalExpnId, Transparency);
      .           
      .           impl MutVisitor for Marker {
      .               const VISIT_TOKENS: bool = true;
      .           
224,370 ( 0.02%)      fn visit_span(&mut self, span: &mut Span) {
149,580 ( 0.01%)          *span = span.apply_mark(self.0.to_expn_id(), self.1)
199,440 ( 0.01%)      }
      .           }
      .           
      .           /// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).
      .           enum Frame {
      .               Delimited { forest: Lrc<mbe::Delimited>, idx: usize, span: DelimSpan },
      .               Sequence { forest: Lrc<mbe::SequenceRepetition>, idx: usize, sep: Option<Token> },
      .           }
      .           
      .           impl Frame {
      .               /// Construct a new frame around the delimited set of tokens.
      .               fn new(tts: Vec<mbe::TokenTree>) -> Frame {
      .                   let forest = Lrc::new(mbe::Delimited { delim: token::NoDelim, tts });
  4,424 ( 0.00%)          Frame::Delimited { forest, idx: 0, span: DelimSpan::dummy() }
      .               }
      .           }
      .           
      .           impl Iterator for Frame {
      .               type Item = mbe::TokenTree;
      .           
      .               fn next(&mut self) -> Option<mbe::TokenTree> {
173,856 ( 0.01%)          match *self {
 48,058 ( 0.00%)              Frame::Delimited { ref forest, ref mut idx, .. } => {
 72,087 ( 0.00%)                  *idx += 1;
      .                           forest.tts.get(*idx - 1).cloned()
      .                       }
 58,305 ( 0.00%)              Frame::Sequence { ref forest, ref mut idx, .. } => {
 58,305 ( 0.00%)                  *idx += 1;
      .                           forest.tts.get(*idx - 1).cloned()
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           /// This can do Macro-By-Example transcription.
      .           /// - `interp` is a map of meta-variables to the tokens (non-terminals) they matched in the
-- line 61 ----------------------------------------
-- line 72 ----------------------------------------
      .           /// foo!(bar);
      .           /// ```
      .           ///
      .           /// `interp` would contain `$id => bar` and `src` would contain `println!("{}", stringify!($id));`.
      .           ///
      .           /// `transcribe` would return a `TokenStream` containing `println!("{}", stringify!(bar));`.
      .           ///
      .           /// Along the way, we do some additional error checking.
  6,260 ( 0.00%)  pub(super) fn transcribe<'a>(
      .               cx: &ExtCtxt<'a>,
      .               interp: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
      .               src: Vec<mbe::TokenTree>,
      .               transparency: Transparency,
      .           ) -> PResult<'a, TokenStream> {
      .               // Nothing for us to transcribe...
    626 ( 0.00%)      if src.is_empty() {
      .                   return Ok(TokenStream::default());
      .               }
      .           
      .               // We descend into the RHS (`src`), expanding things as we go. This stack contains the things
      .               // we have yet to expand/are still expanding. We start the stack off with the whole RHS.
  4,424 ( 0.00%)      let mut stack: SmallVec<[Frame; 1]> = smallvec![Frame::new(src)];
      .           
      .               // As we descend in the RHS, we will need to be able to match nested sequences of matchers.
      .               // `repeats` keeps track of where we are in matching at each level, with the last element being
      .               // the most deeply nested sequence. This is used as a stack.
      .               let mut repeats = Vec::new();
      .           
      .               // `result` contains resulting token stream from the TokenTree we just finished processing. At
      .               // the end, this will contain the full result of transcription, but at arbitrary points during
-- line 101 ----------------------------------------
-- line 105 ----------------------------------------
      .               // `result_stack` and clear `results`. We will then produce the results of transcribing the
      .               // TokenTree into `results`. Then, as we unwind back out of the `TokenTree`, we will pop the
      .               // `result_stack` and append `results` too it to produce the new `results` up to that point.
      .               //
      .               // Thus, if we try to pop the `result_stack` and it is empty, we have reached the top-level
      .               // again, and we are done transcribing.
      .               let mut result: Vec<TreeAndSpacing> = Vec::new();
      .               let mut result_stack = Vec::new();
  2,212 ( 0.00%)      let mut marker = Marker(cx.current_expansion.id, transparency);
      .           
      .               loop {
      .                   // Look at the last frame on the stack.
      .                   // If it still has a TokenTree we have not looked at yet, use that tree.
243,046 ( 0.02%)          let Some(tree) = stack.last_mut().unwrap().next() else {
      .                       // This else-case never produces a value for `tree` (it `continue`s or `return`s).
      .           
      .                       // Otherwise, if we have just reached the end of a sequence and we can keep repeating,
      .                       // go back to the beginning of the sequence.
 53,076 ( 0.00%)              if let Frame::Sequence { idx, sep, .. } = stack.last_mut().unwrap() {
      .                           let (repeat_idx, repeat_len) = repeats.last_mut().unwrap();
 32,024 ( 0.00%)                  *repeat_idx += 1;
  8,006 ( 0.00%)                  if repeat_idx < repeat_len {
  6,116 ( 0.00%)                      *idx = 0;
 12,232 ( 0.00%)                      if let Some(sep) = sep {
  2,807 ( 0.00%)                          result.push(TokenTree::Token(sep.clone()).into());
      .                               }
      .                               continue;
      .                           }
      .                       }
      .           
      .                       // We are done with the top of the stack. Pop it. Depending on what it was, we do
      .                       // different things. Note that the outermost item must be the delimited, wrapped RHS
      .                       // that was passed in originally to `transcribe`.
 14,306 ( 0.00%)              match stack.pop().unwrap() {
      .                           // Done with a sequence. Pop from repeats.
      .                           Frame::Sequence { .. } => {
      .                               repeats.pop();
      .                           }
      .           
      .                           // We are done processing a Delimited. If this is the top-level delimited, we are
      .                           // done. Otherwise, we unwind the result_stack to append what we have produced to
      .                           // any previous results.
 21,052 ( 0.00%)                  Frame::Delimited { forest, span, .. } => {
  5,263 ( 0.00%)                      if result_stack.is_empty() {
      .                                   // No results left to compute! We are back at the top-level.
  3,318 ( 0.00%)                          return Ok(TokenStream::new(result));
      .                               }
      .           
      .                               // Step back into the parent Delimited.
 61,230 ( 0.00%)                      let tree = TokenTree::Delimited(span, forest.delim, TokenStream::new(result));
 14,130 ( 0.00%)                      result = result_stack.pop().unwrap();
      .                               result.push(tree.into());
      .                           }
 10,526 ( 0.00%)              }
      .                       continue;
      .                   };
      .           
      .                   // At this point, we know we are in the middle of a TokenTree (the last one on `stack`).
      .                   // `tree` contains the next `TokenTree` to be processed.
181,170 ( 0.01%)          match tree {
      .                       // We are descending into a sequence. We first make sure that the matchers in the RHS
      .                       // and the matches in `interp` have the same shape. Otherwise, either the caller or the
      .                       // macro writer has made a mistake.
 12,896 ( 0.00%)              seq @ mbe::TokenTree::Sequence(..) => {
 22,568 ( 0.00%)                  match lockstep_iter_size(&seq, interp, &repeats) {
      .                               LockstepIterSize::Unconstrained => {
      .                                   return Err(cx.struct_span_err(
      .                                       seq.span(), /* blame macro writer */
      .                                       "attempted to repeat an expression containing no syntax variables \
      .                                        matched as repeating at this depth",
      .                                   ));
      .                               }
      .           
-- line 177 ----------------------------------------
-- line 181 ----------------------------------------
      .                                   // sequence, but they come from different sequence matchers and repeat
      .                                   // different amounts.
      .                                   return Err(cx.struct_span_err(seq.span(), &msg));
      .                               }
      .           
      .                               LockstepIterSize::Constraint(len, _) => {
      .                                   // We do this to avoid an extra clone above. We know that this is a
      .                                   // sequence already.
 22,568 ( 0.00%)                          let mbe::TokenTree::Sequence(sp, seq) = seq else {
      .                                       unreachable!()
      .                                   };
      .           
      .                                   // Is the repetition empty?
  6,448 ( 0.00%)                          if len == 0 {
  1,334 ( 0.00%)                              if seq.kleene.op == mbe::KleeneOp::OneOrMore {
      .                                           // FIXME: this really ought to be caught at macro definition
      .                                           // time... It happens when the Kleene operator in the matcher and
      .                                           // the body for the same meta-variable do not match.
      .                                           return Err(cx.struct_span_err(
      .                                               sp.entire(),
      .                                               "this must repeat at least once",
      .                                           ));
      .                                       }
-- line 203 ----------------------------------------
-- line 204 ----------------------------------------
      .                                   } else {
      .                                       // 0 is the initial counter (we have done 0 repretitions so far). `len`
      .                                       // is the total number of repetitions we should generate.
      .                                       repeats.push((0, len));
      .           
      .                                       // The first time we encounter the sequence we push it to the stack. It
      .                                       // then gets reused (see the beginning of the loop) until we are done
      .                                       // repeating.
 17,010 ( 0.00%)                              stack.push(Frame::Sequence {
      .                                           idx: 0,
      .                                           sep: seq.separator.clone(),
      .                                           forest: seq,
      .                                       });
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
      .                       // Replace the meta-var with the matched token tree from the invocation.
 60,810 ( 0.00%)              mbe::TokenTree::MetaVar(mut sp, mut orignal_ident) => {
      .                           // Find the matched nonterminal from the macro invocation, and use it to replace
      .                           // the meta-var.
 40,540 ( 0.00%)                  let ident = MacroRulesNormalizedIdent::new(orignal_ident);
 60,810 ( 0.00%)                  if let Some(cur_matched) = lookup_cur_matched(ident, interp, &repeats) {
 30,405 ( 0.00%)                      if let MatchedNonterminal(nt) = cur_matched {
 30,405 ( 0.00%)                          let token = if let NtTT(tt) = &**nt {
      .                                       // `tt`s are emitted into the output stream directly as "raw tokens",
      .                                       // without wrapping them into groups.
      .                                       tt.clone()
      .                                   } else {
      .                                       // Other variables are emitted into the output stream as groups with
      .                                       // `Delimiter::None` to maintain parsing priorities.
      .                                       // `Interpolated` is currenty used for such groups in rustc parser.
 10,152 ( 0.00%)                              marker.visit_span(&mut sp);
 20,304 ( 0.00%)                              TokenTree::token(token::Interpolated(nt.clone()), sp)
      .                                   };
      .                                   result.push(token.into());
      .                               } else {
      .                                   // We were unable to descend far enough. This is an error.
      .                                   return Err(cx.struct_span_err(
      .                                       sp, /* blame the macro writer */
      .                                       &format!("variable '{}' is still repeating at this depth", ident),
      .                                   ));
-- line 246 ----------------------------------------
-- line 255 ----------------------------------------
      .                           }
      .                       }
      .           
      .                       // If we are entering a new delimiter, we push its contents to the `stack` to be
      .                       // processed, and we push all of the currently produced results to the `result_stack`.
      .                       // We will produce all of the results of the inside of the `Delimited` and then we will
      .                       // jump back out of the Delimited, pop the result_stack and add the new results back to
      .                       // the previous results (from outside the Delimited).
 28,260 ( 0.00%)              mbe::TokenTree::Delimited(mut span, delimited) => {
      .                           mut_visit::visit_delim_span(&mut span, &mut marker);
 28,260 ( 0.00%)                  stack.push(Frame::Delimited { forest: delimited, idx: 0, span });
      .                           result_stack.push(mem::take(&mut result));
      .                       }
      .           
      .                       // Nothing much to do here. Just push the token to the result, being careful to
      .                       // preserve syntax context.
      .                       mbe::TokenTree::Token(token) => {
 72,756 ( 0.01%)                  let mut tt = TokenTree::Token(token);
 36,378 ( 0.00%)                  mut_visit::visit_tt(&mut tt, &mut marker);
      .                           result.push(tt.into());
      .                       }
      .           
      .                       // There should be no meta-var declarations in the invocation of a macro.
      .                       mbe::TokenTree::MetaVarDecl(..) => panic!("unexpected `TokenTree::MetaVarDecl"),
      .                   }
      .               }
  7,366 ( 0.00%)  }
      .           
      .           /// Lookup the meta-var named `ident` and return the matched token tree from the invocation using
      .           /// the set of matches `interpolations`.
      .           ///
      .           /// See the definition of `repeats` in the `transcribe` function. `repeats` is used to descend
      .           /// into the right place in nested matchers. If we attempt to descend too far, the macro writer has
      .           /// made a mistake, and we return `None`.
128,682 ( 0.01%)  fn lookup_cur_matched<'a>(
      .               ident: MacroRulesNormalizedIdent,
      .               interpolations: &'a FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
      .               repeats: &[(usize, usize)],
      .           ) -> Option<&'a NamedMatch> {
      .               interpolations.get(&ident).map(|matched| {
      .                   let mut matched = matched;
      .                   for &(idx, _) in repeats {
 59,884 ( 0.00%)              match matched {
      .                           MatchedNonterminal(_) => break,
 10,376 ( 0.00%)                  MatchedSeq(ref ads) => matched = ads.get(idx).unwrap(),
      .                       }
      .                   }
      .           
      .                   matched
      .               })
128,682 ( 0.01%)  }
      .           
      .           /// An accumulator over a TokenTree to be used with `fold`. During transcription, we need to make
      .           /// sure that the size of each sequence and all of its nested sequences are the same as the sizes
      .           /// of all the matched (nested) sequences in the macro invocation. If they don't match, somebody
      .           /// has made a mistake (either the macro writer or caller).
      .           #[derive(Clone)]
      .           enum LockstepIterSize {
      .               /// No constraints on length of matcher. This is true for any TokenTree variants except a
-- line 313 ----------------------------------------
-- line 322 ----------------------------------------
      .               Contradiction(String),
      .           }
      .           
      .           impl LockstepIterSize {
      .               /// Find incompatibilities in matcher/invocation sizes.
      .               /// - `Unconstrained` is compatible with everything.
      .               /// - `Contradiction` is incompatible with everything.
      .               /// - `Constraint(len)` is only compatible with other constraints of the same length.
 81,612 ( 0.01%)      fn with(self, other: LockstepIterSize) -> LockstepIterSize {
 30,306 ( 0.00%)          match self {
      .                       LockstepIterSize::Unconstrained => other,
      .                       LockstepIterSize::Contradiction(_) => self,
 12,663 ( 0.00%)              LockstepIterSize::Constraint(l_len, ref l_id) => match other {
      .                           LockstepIterSize::Unconstrained => self,
      .                           LockstepIterSize::Contradiction(_) => other,
  2,709 ( 0.00%)                  LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self,
      .                           LockstepIterSize::Constraint(r_len, r_id) => {
      .                               let msg = format!(
      .                                   "meta-variable `{}` repeats {} time{}, but `{}` repeats {} time{}",
      .                                   l_id,
      .                                   l_len,
      .                                   pluralize!(l_len),
      .                                   r_id,
      .                                   r_len,
      .                                   pluralize!(r_len),
      .                               );
      .                               LockstepIterSize::Contradiction(msg)
      .                           }
      .                       },
      .                   }
 66,578 ( 0.00%)      }
      .           }
      .           
      .           /// Given a `tree`, make sure that all sequences have the same length as the matches for the
      .           /// appropriate meta-vars in `interpolations`.
      .           ///
      .           /// Note that if `repeats` does not match the exact correct depth of a meta-var,
      .           /// `lookup_cur_matched` will return `None`, which is why this still works even in the presence of
      .           /// multiple nested matcher sequences.
122,920 ( 0.01%)  fn lockstep_iter_size(
      .               tree: &mbe::TokenTree,
      .               interpolations: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
      .               repeats: &[(usize, usize)],
      .           ) -> LockstepIterSize {
      .               use mbe::TokenTree;
 86,044 ( 0.01%)      match *tree {
      .                   TokenTree::Delimited(_, ref delimed) => {
    834 ( 0.00%)              delimed.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {
 20,732 ( 0.00%)                  size.with(lockstep_iter_size(tt, interpolations, repeats))
      .                       })
      .                   }
      .                   TokenTree::Sequence(_, ref seq) => {
  4,307 ( 0.00%)              seq.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {
122,857 ( 0.01%)                  size.with(lockstep_iter_size(tt, interpolations, repeats))
      .                       })
      .                   }
      .                   TokenTree::MetaVar(_, name) | TokenTree::MetaVarDecl(_, name, _) => {
  8,326 ( 0.00%)              let name = MacroRulesNormalizedIdent::new(name);
 37,467 ( 0.00%)              match lookup_cur_matched(name, interpolations, repeats) {
  8,326 ( 0.00%)                  Some(matched) => match matched {
      .                               MatchedNonterminal(_) => LockstepIterSize::Unconstrained,
 24,762 ( 0.00%)                      MatchedSeq(ref ads) => LockstepIterSize::Constraint(ads.len(), name),
      .                           },
      .                           _ => LockstepIterSize::Unconstrained,
      .                       }
      .                   }
      .                   TokenTree::Token(..) => LockstepIterSize::Unconstrained,
      .               }
 98,336 ( 0.01%)  }

507,443 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
2,428,538 ( 0.17%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
1,821,402 ( 0.13%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
   92,836 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  139,254 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
  630,333 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  215,852 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  431,704 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
        .               } else if #[cfg(target_os = "wasi")] {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
        .                   }
        .               } else {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        1 ( 0.00%)              let mut out = ptr::null_mut();
        .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
        .                       // Since these are all powers of 2, we can just use max.
        .                       let align = layout.align().max(crate::mem::size_of::<usize>());
        2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
        2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
        .                   }
        .               }
        .           }

        1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 180 ----------------------------------------
         .           /// assert_eq!(v, &[0.into()]);
         .           ///
         .           /// // Ensure that the last item was dropped.
         .           /// assert!(weak.upgrade().is_none());
         .           /// ```
         .           #[stable(feature = "drop_in_place", since = "1.8.0")]
         .           #[lang = "drop_in_place"]
         .           #[allow(unconditional_recursion)]
16,058,862 ( 1.11%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
         .               // Code here does not matter - this is replaced by the
         .               // real drop glue by the compiler.
         .           
         .               // SAFETY: see comment above
         .               unsafe { drop_in_place(to_drop) }
         .           }
         .           
         .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
         .                       return;
         .                   }
         .               }
         .           
         .               // Direct swapping, for the cases not going through the block optimization.
         .               // SAFETY: the caller must guarantee that `x` and `y` are valid
         .               // for writes, properly aligned, and non-overlapping.
         .               unsafe {
       291 ( 0.00%)          let z = read(x);
         .                   copy_nonoverlapping(y, x, 1);
         .                   write(y, z);
         .               }
         .           }
         .           
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .               // SAFETY: the caller must guarantee that `src` is valid for reads.
         .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
         .               // the stack as a separate allocated object.
         .               //
         .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
         .               // to be properly initialized.
         .               unsafe {
   658,670 ( 0.05%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 2,461,028 ( 0.17%)          tmp.assume_init()
         .               }
         .           }
         .           
         .           /// Reads the value from `src` without moving it. This leaves the
         .           /// memory in `src` unchanged.
         .           ///
         .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
         .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
         .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
         .               // `dst` cannot overlap `src` because the caller has mutable access
         .               // to `dst` while `src` is owned by this function.
         .               unsafe {
18,114,488 ( 1.25%)          copy_nonoverlapping(&src as *const T, dst, 1);
         .                   intrinsics::forget(src);
         .               }
         .           }
         .           
         .           /// Overwrites a memory location with the given value without reading or
         .           /// dropping the old value.
         .           ///
         .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
         .               if stride == 1 {
         .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
         .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
         .                   //
         .                   //    round_up_to_next_alignment(p, a) - p
         .                   //
         .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
         .                   // for LLVM to be able to utilize the various optimizations it knows about.
     7,295 ( 0.00%)          return wrapping_sub(
    18,992 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
         .                       p as usize,
         .                   );
         .               }
         .           
         .               let pmoda = p as usize & a_minus_one;
         .               if pmoda == 0 {
         .                   // Already aligned. Yay!
         .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
         .           /// assert!(std::ptr::eq(
         .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
         .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
         .           /// ));
         .           /// ```
         .           #[stable(feature = "ptr_eq", since = "1.17.0")]
         .           #[inline]
         .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   648,546 ( 0.04%)      a == b
         .           }
         .           
         .           /// Hash a raw pointer.
         .           ///
         .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
         .           /// by its address rather than the value it points to
         .           /// (which is what the `Hash for &T` implementation does).
         .           ///
-- line 1364 ----------------------------------------

 1,968,067 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   41,189 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   50,500 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
  108,113 ( 0.01%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   13,425 ( 0.00%)          i += 2
        .               }
        .           
   50,500 ( 0.00%)      if i < count {
   30,467 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  433,893 ( 0.03%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
2,930,452 ( 0.20%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
  906,366 ( 0.06%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  144,611 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   44,060 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   44,060 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  440,600 ( 0.03%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  352,480 ( 0.02%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  396,540 ( 0.03%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  207,296 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  176,240 ( 0.01%)          self.processed += BUFFER_SIZE;
   88,120 ( 0.01%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
   12,844 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  145,956 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   53,326 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   26,792 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   16,987 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   11,385 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    2,277 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    6,831 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    2,277 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    4,554 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   16,909 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   19,186 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   33,818 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    4,554 ( 0.00%)          let input_left = length - processed;
    2,718 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
    1,727 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    1,727 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
    1,727 ( 0.00%)              self.state.v0 ^= elem;
    3,454 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    2,277 ( 0.00%)          self.nbuf = extra_bytes_left;
   11,385 ( 0.00%)          self.processed += nbuf + processed;
   13,662 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   27,354 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   36,472 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   29,589 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   29,589 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   29,589 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
   18,236 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    7,406 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   25,532 ( 0.00%)          let length = self.processed + self.nbuf;
   18,008 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
    9,004 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
    9,004 ( 0.00%)          state.v0 ^= b;
        .           
    9,004 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   28,398 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
   10,388 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
   10,388 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
1,689,727 ( 0.12%)          compress!(state);
1,821,743 ( 0.13%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
   56,792 ( 0.00%)          compress!(state);
   56,792 ( 0.00%)          compress!(state);
   56,792 ( 0.00%)          compress!(state);
   47,789 ( 0.00%)          compress!(state);
        .               }
        .           }

  355,382 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
1,974,563 ( 0.14%)          Vec { buf: RawVec::NEW, len: 0 }
      103 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  914,113 ( 0.06%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   47,822 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
  259,929 ( 0.02%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
  211,613 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
   11,377 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
   91,503 ( 0.01%)          if self.capacity() > self.len {
    9,046 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
   32,172 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
  513,913 ( 0.04%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
  340,562 ( 0.02%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  188,786 ( 0.01%)              self.len = len;
    3,282 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  616,676 ( 0.04%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
2,451,189 ( 0.17%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
2,222,816 ( 0.15%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  526,282 ( 0.04%)          self.len = new_len;
    7,460 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
       11 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    3,059 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      496 ( 0.00%)          let len = self.len();
    1,094 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
    1,718 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    2,400 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
    1,718 ( 0.00%)              self.set_len(len + 1);
        .                   }
    2,622 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      173 ( 0.00%)          let len = self.len();
      629 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
    1,008 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      452 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      884 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  163,214 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    7,519 ( 0.00%)          self.retain_mut(|elem| f(elem));
  159,224 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
   20,819 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
   18,649 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
   14,334 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
  241,514 ( 0.02%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   68,927 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
   11,941 ( 0.00%)                      g.processed_len += 1;
    6,198 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        4 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
    9,309 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
    9,226 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
    4,214 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
    1,115 ( 0.00%)          let len = self.len();
    4,044 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
    6,572 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
    2,109 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
    3,176 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
    4,816 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      470 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
3,575,832 ( 0.25%)          if self.len == self.buf.capacity() {
  329,274 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
  149,420 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
4,561,023 ( 0.31%)              self.len += 1;
        .                   }
      376 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  640,934 ( 0.04%)          if self.len == 0 {
        6 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  469,424 ( 0.03%)                  self.len -= 1;
   83,427 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
    1,176 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
    1,008 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
   37,612 ( 0.00%)          let len = self.len();
       12 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
  291,966 ( 0.02%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    9,927 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
      544 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
  126,988 ( 0.01%)              Drain {
        .                           tail_start: end,
      400 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  907,893 ( 0.06%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
  270,934 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
    1,431 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
    1,065 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
   13,626 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
    1,854 ( 0.00%)          let len = self.len();
    3,708 ( 0.00%)          if new_len > len {
   18,834 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
   11,772 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        4 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
      139 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
   12,280 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
    1,228 ( 0.00%)          let len = self.len();
        .           
    3,684 ( 0.00%)          if new_len > len {
    6,348 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    2,220 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
      494 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
  277,683 ( 0.02%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    4,453 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
  221,379 ( 0.02%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
  200,783 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
      608 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
   28,069 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
  215,300 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   33,178 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
3,365,585 ( 0.23%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
      205 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  690,179 ( 0.05%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
  460,071 ( 0.03%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  563,578 ( 0.04%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   69,858 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
      272 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
1,069,714 ( 0.07%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  412,424 ( 0.03%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
  148,312 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,578 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
    4,840 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  433,138 ( 0.03%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
    4,840 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   88,540 ( 0.01%)          while let Some(element) = iterator.next() {
   13,329 ( 0.00%)              let len = self.len();
  151,881 ( 0.01%)              if len == self.capacity() {
      912 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
  125,085 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
    1,151 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
    1,705 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    2,123 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
    5,840 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
        .           /// [`copy_from_slice`]: slice::copy_from_slice
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "extend_ref", since = "1.2.0")]
        .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
    1,368 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
        .                   self.spec_extend(iter.into_iter())
    1,026 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, &item: &'a T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  646,820 ( 0.04%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
  281,215 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  759,014 ( 0.05%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  973,113 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
    251 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
    251 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
    502 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 50,635 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
344,318 ( 0.02%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
 30,381 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
 60,762 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
  4,809 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
132,795 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
      .                       &mut ut::UnificationStorage<ty::IntVid>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
  2,157 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn float_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    588 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 41,657 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
 52,416 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
 62,256 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
 76,878 ( 0.01%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
  3,484 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
  1,884 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
      .           
      .               /// The given region parameter was instantiated with a region
      .               /// that must outlive some other region.
      .               RelateRegionParamBound(Span),
      .           
      .               /// Creating a pointer `b` to contents of another reference
      .               Reborrow(Span),
      .           
      .               /// Creating a pointer `b` to contents of an upvar
      .               ReborrowUpvar(Span, ty::UpvarId),
      .           
      .               /// Data with type `Ty<'tcx>` was borrowed
    876 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
      .           
      .               /// (&'a &'b T) where a >= b
  1,224 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
      .           
      .               /// Comparing the signature and requirements of an impl method against
      .               /// the containing trait.
      .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
      .           
      .               /// Comparing the signature and requirements of an impl associated type
      .               /// against the containing trait
      .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
 10,127 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
 30,381 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
 10,127 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
  7,416 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
  9,064 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
  4,120 ( 0.00%)          self.with_opaque_type_inference(table_owner)
  5,768 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
    532 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    266 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
  2,180 ( 0.00%)          self
    798 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
 19,131 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
 28,470 ( 0.00%)              let (value, subst) =
  2,307 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
 41,489 ( 0.00%)              f(infcx, value, subst)
      .                   })
 20,598 ( 0.00%)      }
      .           
 49,411 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
 28,029 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
430,186 ( 0.03%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
 10,127 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
 10,127 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
 53,057 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
    686 ( 0.00%)          let InferOk { value, obligations } = self;
  2,810 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
  6,689 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
 26,756 ( 0.00%)          self.obligations
  6,689 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
 11,432 ( 0.00%)      }
      .           
 98,184 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
110,457 ( 0.01%)          t.fold_with(&mut self.freshener())
110,457 ( 0.01%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
     96 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    192 ( 0.00%)          match *ty.kind() {
     39 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    156 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
      9 ( 0.00%)              _ => None,
      .                   }
    192 ( 0.00%)      }
      .           
 12,273 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
 12,273 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
 43,752 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
 43,752 ( 0.00%)      }
      .           
  1,104 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    552 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    552 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
     77 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
     58 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
      9 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
  1,932 ( 0.00%)      }
      .           
 21,742 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 87,064 ( 0.01%)          CombineFields {
      .                       infcx: self,
217,660 ( 0.02%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
 21,742 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
  2,916 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      .               }
      .           
116,992 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
350,976 ( 0.02%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
 58,496 ( 0.00%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
233,984 ( 0.02%)      }
      .           
230,626 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 20,966 ( 0.00%)              undo_snapshot,
 20,966 ( 0.00%)              region_constraints_snapshot,
 20,966 ( 0.00%)              universe,
 20,966 ( 0.00%)              was_in_snapshot,
 41,932 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
 20,966 ( 0.00%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
562,950 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 37,530 ( 0.00%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
 37,530 ( 0.00%)              was_in_snapshot,
 75,060 ( 0.01%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
 32,724 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 40,733 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  3,703 ( 0.00%)          let snapshot = self.start_snapshot();
 13,325 ( 0.00%)          let r = f(&snapshot);
 25,921 ( 0.00%)          self.commit_from(snapshot);
 23,979 ( 0.00%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
277,724 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
341,045 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
 45,269 ( 0.00%)          let snapshot = self.start_snapshot();
157,547 ( 0.01%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 35,829 ( 0.00%)          match r {
      .                       Ok(_) => {
251,770 ( 0.02%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
 79,729 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
234,347 ( 0.02%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
 93,158 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
105,814 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
 25,747 ( 0.00%)          let snapshot = self.start_snapshot();
 39,496 ( 0.00%)          let r = f(&snapshot);
118,711 ( 0.01%)          self.rollback_to("probe", snapshot);
 11,761 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
    189 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
    252 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
     42 ( 0.00%)          let snapshot = self.start_snapshot();
     21 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
     42 ( 0.00%)          if should_skip {
      .                       self.skip_leak_check.set(true);
      .                   }
     84 ( 0.00%)          let r = f(&snapshot);
    189 ( 0.00%)          self.rollback_to("probe", snapshot);
      .                   self.skip_leak_check.set(was_skip_leak_check);
    252 ( 0.00%)          r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
 12,094 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
 24,188 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
 18,141 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
    108 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
     81 ( 0.00%)      }
      .           
  3,504 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
  2,628 ( 0.00%)      }
      .           
 22,220 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
 19,998 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
     55 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
      .                   definition_span: Span,
      .                   hidden_ty: Ty<'tcx>,
      .                   region: ty::Region<'tcx>,
      .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
      .               ) {
     55 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
      .                       opaque_type_def_id,
      .                       definition_span,
      .                       hidden_ty,
      .                       region,
      .                       in_regions,
      .                   );
      .               }
      .           
-- line 961 ----------------------------------------
-- line 969 ----------------------------------------
      .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
      .               /// actually requiring `a <: b`. This is of course a valid coercion,
      .               /// but it's not as flexible as `FnCtxt::coerce` would be.
      .               ///
      .               /// (We may refactor this in the future, but there are a number of
      .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
      .               /// records adjustments that are required on the HIR in order to perform
      .               /// the coercion, and we don't currently have a way to manage that.)
      3 ( 0.00%)      pub fn coerce_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolyCoercePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      2 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
      .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
      .                       a: p.a,
      .                       b: p.b,
      .                   });
      5 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
      4 ( 0.00%)      }
      .           
    756 ( 0.00%)      pub fn subtype_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolySubtypePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      .                   // Check for two unresolved inference variables, in which case we can
      .                   // make no progress. This is partly a micro-optimization, but it's
      .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
      .                   // earlier that they are sub-unified).
      .                   //
      .                   // Note that we can just skip the binders here because
      .                   // type variables can't (at present, at
      .                   // least) capture any of the things bound by this binder.
      .                   //
      .                   // Note that this sub here is not just for diagnostics - it has semantic
      .                   // effects as well.
     63 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     63 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    492 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    120 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
      .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    120 ( 0.00%)                  return None;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   Some(self.commit_if_ok(|_snapshot| {
      3 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
      6 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
    567 ( 0.00%)      }
      .           
  7,620 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
  6,350 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
  5,080 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
     25 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
     50 ( 0.00%)      }
      .           
  5,948 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 29,740 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  8,922 ( 0.00%)      }
      .           
  5,754 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
 20,721 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
  8,631 ( 0.00%)      }
      .           
  1,312 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
  7,216 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    656 ( 0.00%)          self.tcx.mk_ty_var(vid)
  1,968 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
      .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
      .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                       origin,
      .                       val: ConstVariableValue::Unknown { universe: self.universe() },
      .                   })
      .               }
      .           
      .               fn next_int_var_id(&self) -> IntVid {
     95 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
      .               }
      .           
     57 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_int_var(self.next_int_var_id())
     76 ( 0.00%)      }
      .           
      .               fn next_float_var_id(&self) -> FloatVid {
      .                   self.inner.borrow_mut().float_unification_table().new_key(None)
      .               }
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
  2,724 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 66,408 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
  5,448 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
 30,150 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
195,975 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 75,375 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
 45,225 ( 0.00%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
  6,056 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
  9,084 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
  2,108 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
  3,162 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
  5,301 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
 10,602 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
     17 ( 0.00%)      pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
    599 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
     34 ( 0.00%)      }
      .           
 72,768 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
 39,450 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
  3,015 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
 24,252 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
 30,315 ( 0.00%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
  6,063 ( 0.00%)                              param.name,
  6,063 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
  6,063 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
      .                           };
      .                           let const_var_id =
    198 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                                   origin,
      .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
      .                               });
     18 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
    144 ( 0.00%)      }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
 16,824 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 76,038 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
 11,216 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
    618 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
 24,597 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
    927 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 26,173 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
 71,041 ( 0.00%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
  3,739 ( 0.00%)              assert!(
 11,217 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
  3,739 ( 0.00%)          };
      .           
      .                   let region_rels =
  3,739 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
 33,651 ( 0.00%)          let (lexical_region_resolutions, errors) =
 89,736 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
 14,956 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
  3,739 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
 33,651 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 37,390 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
  7,478 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
 11,217 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
  7,478 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
 18,695 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
      .               /// region constraints as normal, but then we take them and
      .               /// translate them into the form that the NLL solver
      .               /// understands. See the NLL module for mode details.
     30 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
     10 ( 0.00%)          assert!(
      .                       self.inner.borrow().region_obligations.is_empty(),
      .                       "region_obligations not empty: {:#?}",
      .                       self.inner.borrow().region_obligations
      .                   );
      .           
     40 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
     50 ( 0.00%)      }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
  9,556 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
  1,305 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
  4,959 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
    261 ( 0.00%)              .into_infos_and_data();
    261 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
  2,088 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
  3,996 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
 11,988 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
 13,986 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 61,622 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
  3,032 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
  4,548 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
  1,616 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 66,409 ( 0.00%)          if !value.needs_infer() {
 91,090 ( 0.01%)              return value; // Avoid duplicated subst-folding.
      .                   }
 60,757 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 73,965 ( 0.01%)          value.fold_with(&mut r)
  1,873 ( 0.00%)      }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
      .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
  3,321 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
 26,741 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
134,534 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
  2,214 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
 13,136 ( 0.00%)      pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
      .               ) {
      .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
      .           
  4,926 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
 27,914 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
 11,494 ( 0.00%)      }
      .           
      .               /// Obtains the latest type of the given closure; this may be a
      .               /// closure in the current function, in which case its
      .               /// `ClosureKind` may not yet be known.
    198 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    396 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
      .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    297 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
      .               }
      .           
      .               /// Clears the selection, evaluation, and projection caches. This is useful when
      .               /// repeatedly attempting to select an `Obligation` while changing only
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
134,298 ( 0.01%)          self.universe.get()
 37,798 ( 0.00%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
     92 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
     92 ( 0.00%)          let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
     92 ( 0.00%)      }
      .           
      .               /// Resolves and evaluates a constant.
      .               ///
      .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
      .               /// substitutions and environment are used to resolve the constant. Alternatively if the
      .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
      .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
      .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   // variables, thus we don't need to substitute back the original values.
      .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      .               }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
626,648 ( 0.04%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
321,521 ( 0.02%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
153,904 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
  2,316 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
    627 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       ty::Infer(ty::FloatVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
704,979 ( 0.05%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
 40,663 ( 0.00%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
      .                           // `ty::Infer(_)`.
    610 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
      .                       }
      .           
      .                       TyOrConstInferVar::TyFloat(v) => {
      .                           // If `probe_value` returns a value it's always a
      .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
      .                           //
      .                           // Not `inlined_probe_value(v)` because this call site is colder.
      .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
  1,370 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
  1,370 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     72 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
 12,948 ( 0.00%)          match *ty.kind() {
  2,854 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
     30 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
     72 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
      .                       _ => None,
      .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
120,785 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
    132 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    132 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    165 ( 0.00%)              self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
     99 ( 0.00%)                  .probe_value(*vid)
      .                           .val
      .                           .known()
      .                           .unwrap_or(ct)
      .                   } else {
      .                       ct
      .                   }
    165 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeTrace<'tcx> {
      .               pub fn span(&self) -> Span {
      .                   self.cause.span
      .               }
      .           
      .               pub fn types(
-- line 1787 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
 12,636 ( 0.00%)          match *cause.code() {
  1,510 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
  7,550 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
      .                           span: cause.span,
      .                           impl_item_def_id,
-- line 1836 ----------------------------------------

493,664 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 1,340,586 ( 0.09%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
   116,701 ( 0.01%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
19,843,748 ( 1.37%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   170,838 ( 0.01%)          self.stride += Group::WIDTH;
   170,838 ( 0.01%)          self.pos += self.stride;
   144,505 ( 0.01%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
   103,406 ( 0.01%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   221,220 ( 0.02%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    44,754 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   276,152 ( 0.02%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    49,066 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   201,355 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   276,990 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
       988 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
    34,056 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
        90 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
     8,301 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    14,067 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    14,067 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    28,134 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
     3,930 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    24,204 ( 0.00%)          self.erase_no_drop(&item);
       389 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
   479,670 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     1,832 ( 0.00%)          match self.find(hash, eq) {
     3,974 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    82,570 ( 0.01%)              None => None,
         .                   }
   683,105 ( 0.05%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    11,840 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   289,778 ( 0.02%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   177,016 ( 0.01%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   410,087 ( 0.03%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   281,872 ( 0.02%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,859,128 ( 0.13%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     3,866 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 1,240,708 ( 0.09%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 1,369,960 ( 0.09%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
   489,424 ( 0.03%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       468 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   367,068 ( 0.03%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     1,456 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   335,848 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     6,517 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   683,932 ( 0.05%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   555,401 ( 0.04%)          self.table.items += 1;
         .                   bucket
     2,899 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
     5,770 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     2,833 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    20,562 ( 0.00%)              eq(self.bucket(index).as_ref())
       548 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
       153 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
     6,136 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    43,418 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
       588 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     3,547 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
       672 ( 0.00%)      }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
         .               ///
         .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
         .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
         .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
   526,260 ( 0.04%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         .                   let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    68,828 ( 0.00%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
     6,576 ( 0.00%)          let allocation = self.into_allocation();
     4,932 ( 0.00%)          RawIntoIter {
     8,220 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     2,816 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       662 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
   513,865 ( 0.04%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   344,639 ( 0.02%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
    86,196 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   193,200 ( 0.01%)          Ok(Self {
         .                       ctrl,
    83,921 ( 0.01%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   251,226 ( 0.02%)      }
         .           
         .               #[inline]
    26,375 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     6,782 ( 0.00%)          if capacity == 0 {
     3,704 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   156,838 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
    15,601 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    26,375 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
   115,256 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
   115,256 ( 0.01%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   230,512 ( 0.02%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
   874,145 ( 0.06%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 2,563,192 ( 0.18%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 1,163,228 ( 0.08%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
    47,444 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 2,327,656 ( 0.16%)              for bit in group.match_byte(h2_hash) {
 4,306,886 ( 0.30%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 2,963,756 ( 0.20%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
   781,148 ( 0.05%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 3,133,440 ( 0.22%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
14,183,152 ( 0.98%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 1,550,780 ( 0.11%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 1,240,040 ( 0.09%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 2,455,407 ( 0.17%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
   818,391 ( 0.06%)          *self.ctrl(index) = ctrl;
   818,959 ( 0.06%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
   229,492 ( 0.02%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
   182,908 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
   997,697 ( 0.07%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     3,759 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
   108,611 ( 0.01%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    50,355 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   100,711 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
   100,710 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   209,628 ( 0.01%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         .                       Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    50,355 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     9,234 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
   487,368 ( 0.03%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    50,355 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    33,294 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
     5,447 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
     7,501 ( 0.00%)          self.items = 0;
     5,459 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
    91,400 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   365,600 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   456,395 ( 0.03%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   365,600 ( 0.03%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    90,832 ( 0.01%)      fn clone(&self) -> Self {
    11,379 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
   102,186 ( 0.01%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
        36 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   679,850 ( 0.05%)      fn drop(&mut self) {
   420,532 ( 0.03%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
   736,568 ( 0.05%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     6,576 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
     8,220 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   313,696 ( 0.02%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    23,305 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    37,728 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   159,564 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
     4,583 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     2,613 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     9,086 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
     3,282 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    27,373 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   351,504 ( 0.02%)          if let Some(b) = self.iter.next() {
   477,490 ( 0.03%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
    54,746 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     3,408 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
    13,055 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       576 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,507 ( 0.00%)      fn next(&mut self) -> Option<T> {
     1,434 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     3,112 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
        18 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     5,016 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
       627 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
     5,016 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

 8,845,996 ( 0.61%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs
--------------------------------------------------------------------------------
Ir                 

-- line 90 ----------------------------------------
        .           use std::collections::hash_map::Entry::{Occupied, Vacant};
        .           use std::mem;
        .           use std::ops::{Deref, DerefMut};
        .           
        .           // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.
        .           
        .           /// Either a sequence of token trees or a single one. This is used as the representation of the
        .           /// sequence of tokens that make up a matcher.
  121,079 ( 0.01%)  #[derive(Clone)]
        .           enum TokenTreeOrTokenTreeSlice<'tt> {
        .               Tt(TokenTree),
   27,036 ( 0.00%)      TtSeq(&'tt [TokenTree]),
        .           }
        .           
        .           impl<'tt> TokenTreeOrTokenTreeSlice<'tt> {
        .               /// Returns the number of constituent top-level token trees of `self` (top-level in that it
        .               /// will not recursively descend into subtrees).
        .               fn len(&self) -> usize {
  429,164 ( 0.03%)          match *self {
   66,336 ( 0.00%)              TtSeq(ref v) => v.len(),
        .                       Tt(ref tt) => tt.len(),
        .                   }
        .               }
        .           
        .               /// The `index`-th token tree of `self`.
        .               fn get_tt(&self, index: usize) -> TokenTree {
   48,388 ( 0.00%)          match *self {
  127,616 ( 0.01%)              TtSeq(ref v) => v[index].clone(),
  141,931 ( 0.01%)              Tt(ref tt) => tt.get_tt(index),
        .                   }
        .               }
        .           }
        .           
        .           /// An unzipping of `TokenTree`s... see the `stack` field of `MatcherPos`.
        .           ///
        .           /// This is used by `inner_parse_loop` to keep track of delimited submatchers that we have
        .           /// descended into.
   16,294 ( 0.00%)  #[derive(Clone)]
        .           struct MatcherTtFrame<'tt> {
        .               /// The "parent" matcher that we are descending into.
        .               elts: TokenTreeOrTokenTreeSlice<'tt>,
        .               /// The position of the "dot" in `elts` at the time we descended.
    8,147 ( 0.00%)      idx: usize,
        .           }
        .           
        .           type NamedMatchVec = SmallVec<[NamedMatch; 4]>;
        .           
        .           /// Represents a single "position" (aka "matcher position", aka "item"), as
        .           /// described in the module documentation.
        .           ///
        .           /// Here:
-- line 140 ----------------------------------------
-- line 147 ----------------------------------------
        .           ///   position refers to.
        .           ///
        .           /// It is important to distinguish these two lifetimes because we have a
        .           /// `SmallVec<TokenTreeOrTokenTreeSlice<'tt>>` below, and the destructor of
        .           /// that is considered to possibly access the data from its elements (it lacks
        .           /// a `#[may_dangle]` attribute). As a result, the compiler needs to know that
        .           /// all the elements in that `SmallVec` strictly outlive the root stack slot
        .           /// lifetime. By separating `'tt` from `'root`, we can show that.
  553,472 ( 0.04%)  #[derive(Clone)]
        .           struct MatcherPos<'root, 'tt> {
        .               /// The token or sequence of tokens that make up the matcher
        .               top_elts: TokenTreeOrTokenTreeSlice<'tt>,
        .           
        .               /// The position of the "dot" in this matcher
   11,776 ( 0.00%)      idx: usize,
        .           
        .               /// For each named metavar in the matcher, we keep track of token trees matched against the
        .               /// metavar by the black box parser. In particular, there may be more than one match per
        .               /// metavar if we are in a repetition (each repetition matches each of the variables).
        .               /// Moreover, matchers and repetitions can be nested; the `matches` field is shared (hence the
        .               /// `Rc`) among all "nested" matchers. `match_lo`, `match_cur`, and `match_hi` keep track of
        .               /// the current position of the `self` matcher position in the shared `matches` list.
        .               ///
        .               /// Also, note that while we are descending into a sequence, matchers are given their own
        .               /// `matches` vector. Only once we reach the end of a full repetition of the sequence do we add
        .               /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`
        .               /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one
        .               /// wants the shared `matches`, one should use `up.matches`.
   47,104 ( 0.00%)      matches: Box<[Lrc<NamedMatchVec>]>,
        .               /// The position in `matches` corresponding to the first metavar in this matcher's sequence of
        .               /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds
        .               /// to `matches[match_lo]`.
   11,776 ( 0.00%)      match_lo: usize,
        .               /// The position in `matches` corresponding to the metavar we are currently trying to match
        .               /// against the source token stream. `match_lo <= match_cur <= match_hi`.
        .               match_cur: usize,
        .               /// Similar to `match_lo` except `match_hi` is the position in `matches` of the _last_ metavar
        .               /// in this matcher.
   11,776 ( 0.00%)      match_hi: usize,
        .           
        .               // The following fields are used if we are matching a repetition. If we aren't, they should be
        .               // `None`.
        .               /// The KleeneOp of this sequence if we are in a repetition.
   11,776 ( 0.00%)      seq_op: Option<mbe::KleeneOp>,
        .           
        .               /// The separator if we are in a repetition.
        .               sep: Option<Token>,
        .           
        .               /// The "parent" matcher position if we are in a repetition. That is, the matcher position just
        .               /// before we enter the sequence.
   23,552 ( 0.00%)      up: Option<MatcherPosHandle<'root, 'tt>>,
        .           
        .               /// Specifically used to "unzip" token trees. By "unzip", we mean to unwrap the delimiters from
        .               /// a delimited token tree (e.g., something wrapped in `(` `)`) or to get the contents of a doc
        .               /// comment...
        .               ///
        .               /// When matching against matchers with nested delimited submatchers (e.g., `pat ( pat ( .. )
        .               /// pat ) pat`), we need to keep track of the matchers we are descending into. This stack does
        .               /// that where the bottom of the stack is the outermost matcher.
        .               /// Also, throughout the comments, this "descent" is often referred to as "unzipping"...
        .               stack: SmallVec<[MatcherTtFrame<'tt>; 1]>,
        .           }
        .           
        .           impl<'root, 'tt> MatcherPos<'root, 'tt> {
        .               /// Adds `m` as a named match for the `idx`-th metavar.
        .               fn push_match(&mut self, idx: usize, m: NamedMatch) {
   84,712 ( 0.01%)          let matches = Lrc::make_mut(&mut self.matches[idx]);
        .                   matches.push(m);
        .               }
        .           }
        .           
        .           // Lots of MatcherPos instances are created at runtime. Allocating them on the
        .           // heap is slow. Furthermore, using SmallVec<MatcherPos> to allocate them all
        .           // on the stack is also slow, because MatcherPos is quite a large type and
        .           // instances get moved around a lot between vectors, which requires lots of
-- line 221 ----------------------------------------
-- line 226 ----------------------------------------
        .           // and this type is used to encapsulate both cases.
        .           enum MatcherPosHandle<'root, 'tt> {
        .               Ref(&'root mut MatcherPos<'root, 'tt>),
        .               Box(Box<MatcherPos<'root, 'tt>>),
        .           }
        .           
        .           impl<'root, 'tt> Clone for MatcherPosHandle<'root, 'tt> {
        .               // This always produces a new Box.
   47,104 ( 0.00%)      fn clone(&self) -> Self {
   23,552 ( 0.00%)          MatcherPosHandle::Box(match *self {
    6,297 ( 0.00%)              MatcherPosHandle::Ref(ref r) => Box::new((**r).clone()),
        .                       MatcherPosHandle::Box(ref b) => b.clone(),
        .                   })
   70,656 ( 0.00%)      }
        .           }
        .           
        .           impl<'root, 'tt> Deref for MatcherPosHandle<'root, 'tt> {
        .               type Target = MatcherPos<'root, 'tt>;
        .               fn deref(&self) -> &Self::Target {
        .                   match *self {
        .                       MatcherPosHandle::Ref(ref r) => r,
        .                       MatcherPosHandle::Box(ref b) => b,
-- line 247 ----------------------------------------
-- line 272 ----------------------------------------
        .           
        .           /// A `ParseResult` where the `Success` variant contains a mapping of
        .           /// `MacroRulesNormalizedIdent`s to `NamedMatch`es. This represents the mapping
        .           /// of metavars to the token trees they bind to.
        .           crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, NamedMatch>>;
        .           
        .           /// Count how many metavars are named in the given matcher `ms`.
        .           pub(super) fn count_names(ms: &[TokenTree]) -> usize {
  767,200 ( 0.05%)      ms.iter().fold(0, |count, elt| {
  383,600 ( 0.03%)          count
1,150,800 ( 0.08%)              + match *elt {
   97,144 ( 0.01%)                  TokenTree::Sequence(_, ref seq) => seq.num_captures,
   57,058 ( 0.00%)                  TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),
        .                           TokenTree::MetaVar(..) => 0,
        .                           TokenTree::MetaVarDecl(..) => 1,
        .                           TokenTree::Token(..) => 0,
        .                       }
  959,000 ( 0.07%)      })
        .           }
        .           
        .           /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.
        .           fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {
   48,946 ( 0.00%)      if len == 0 {
        .                   vec![]
        .               } else {
        .                   let empty_matches = Lrc::new(SmallVec::new());
        .                   vec![empty_matches; len]
        .               }
        .               .into_boxed_slice()
        .           }
        .           
        .           /// Generates the top-level matcher position in which the "dot" is before the first token of the
        .           /// matcher `ms`.
        .           fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 'tt> {
        .               let match_idx_hi = count_names(ms);
        .               let matches = create_matches(match_idx_hi);
  208,230 ( 0.01%)      MatcherPos {
        .                   // Start with the top level matcher given to us
        .                   top_elts: TtSeq(ms), // "elts" is an abbr. for "elements"
        .                   // The "dot" is before the first token of the matcher
        .                   idx: 0,
        .           
        .                   // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.
        .                   // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since
        .                   // we haven't actually matched anything yet.
-- line 316 ----------------------------------------
-- line 340 ----------------------------------------
        .           /// particular token tree.
        .           ///
        .           /// The width of each `MatchedSeq` in the `NamedMatch`, and the identity of
        .           /// the `MatchedNonterminal`s, will depend on the token tree it was applied
        .           /// to: each `MatchedSeq` corresponds to a single `TTSeq` in the originating
        .           /// token tree. The depth of the `NamedMatch` structure will therefore depend
        .           /// only on the nesting depth of `ast::TTSeq`s in the originating
        .           /// token tree it was derived from.
    2,816 ( 0.00%)  #[derive(Debug, Clone)]
        .           crate enum NamedMatch {
        .               MatchedSeq(Lrc<NamedMatchVec>),
        .               MatchedNonterminal(Lrc<Nonterminal>),
        .           }
        .           
        .           /// Takes a sequence of token trees `ms` representing a matcher which successfully matched input
        .           /// and an iterator of items that matched input and produces a `NamedParseResult`.
        .           fn nameize<I: Iterator<Item = NamedMatch>>(
-- line 356 ----------------------------------------
-- line 357 ----------------------------------------
        .               sess: &ParseSess,
        .               ms: &[TokenTree],
        .               mut res: I,
        .           ) -> NamedParseResult {
        .               // Recursively descend into each type of matcher (e.g., sequences, delimited, metavars) and make
        .               // sure that each metavar has _exactly one_ binding. If a metavar does not have exactly one
        .               // binding, then there is an error. If it does, then we insert the binding into the
        .               // `NamedParseResult`.
  112,772 ( 0.01%)      fn n_rec<I: Iterator<Item = NamedMatch>>(
        .                   sess: &ParseSess,
        .                   m: &TokenTree,
        .                   res: &mut I,
        .                   ret_val: &mut FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
        .               ) -> Result<(), (rustc_span::Span, String)> {
   57,464 ( 0.00%)          match *m {
        .                       TokenTree::Sequence(_, ref seq) => {
    2,286 ( 0.00%)                  for next_m in &seq.tts {
   21,096 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?
        .                           }
        .                       }
        .                       TokenTree::Delimited(_, ref delim) => {
    2,016 ( 0.00%)                  for next_m in &delim.tts {
   14,796 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?;
        .                           }
        .                       }
        .                       TokenTree::MetaVarDecl(span, _, None) => {
        .                           if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
        .                               return Err((span, "missing fragment specifier".to_string()));
        .                           }
        .                       }
   18,612 ( 0.00%)              TokenTree::MetaVarDecl(sp, bind_name, _) => match ret_val
   12,408 ( 0.00%)                  .entry(MacroRulesNormalizedIdent::new(bind_name))
        .                       {
        .                           Vacant(spot) => {
        .                               spot.insert(res.next().unwrap());
        .                           }
        .                           Occupied(..) => return Err((sp, format!("duplicated bind name: {}", bind_name))),
        .                       },
        .                       TokenTree::MetaVar(..) | TokenTree::Token(..) => (),
        .                   }
        .           
   10,252 ( 0.00%)          Ok(())
   82,016 ( 0.01%)      }
        .           
        .               let mut ret_val = FxHashMap::default();
        .               for m in ms {
   37,375 ( 0.00%)          match n_rec(sess, m, res.by_ref(), &mut ret_val) {
        .                       Ok(_) => {}
        .                       Err((sp, msg)) => return Error(sp, msg),
        .                   }
        .               }
        .           
    5,814 ( 0.00%)      Success(ret_val)
        .           }
        .           
        .           /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)
        .           fn token_name_eq(t1: &Token, t2: &Token) -> bool {
  226,814 ( 0.02%)      if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {
   12,223 ( 0.00%)          ident1.name == ident2.name && is_raw1 == is_raw2
  212,891 ( 0.01%)      } else if let (Some(ident1), Some(ident2)) = (t1.lifetime(), t2.lifetime()) {
        .                   ident1.name == ident2.name
        .               } else {
   90,844 ( 0.01%)          t1.kind == t2.kind
        .               }
        .           }
        .           
        .           /// Process the matcher positions of `cur_items` until it is empty. In the process, this will
        .           /// produce more items in `next_items`, `eof_items`, and `bb_items`.
        .           ///
        .           /// For more info about the how this happens, see the module-level doc comments and the inline
        .           /// comments of this function.
-- line 427 ----------------------------------------
-- line 443 ----------------------------------------
        .               sess: &ParseSess,
        .               cur_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
        .               next_items: &mut Vec<MatcherPosHandle<'root, 'tt>>,
        .               eof_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
        .               bb_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
        .               token: &Token,
        .           ) -> ParseResult<()> {
        .               // Pop items from `cur_items` until it is empty.
  279,580 ( 0.02%)      while let Some(mut item) = cur_items.pop() {
        .                   // When unzipped trees end, remove them. This corresponds to backtracking out of a
        .                   // delimited submatcher into which we already descended. In backtracking out again, we need
        .                   // to advance the "dot" past the delimiters in the outer matcher.
  875,094 ( 0.06%)          while item.idx >= item.top_elts.len() {
    7,166 ( 0.00%)              match item.stack.pop() {
        .                           Some(MatcherTtFrame { elts, idx }) => {
   32,247 ( 0.00%)                      item.top_elts = elts;
   14,332 ( 0.00%)                      item.idx = idx + 1;
        .                           }
        .                           None => break,
        .                       }
        .                   }
        .           
        .                   // Get the current position of the "dot" (`idx`) in `item` and the number of token trees in
        .                   // the matcher (`len`).
        .                   let idx = item.idx;
        .                   let len = item.top_elts.len();
        .           
        .                   // If `idx >= len`, then we are at or past the end of the matcher of `item`.
  178,026 ( 0.01%)          if idx >= len {
        .                       // We are repeating iff there is a parent. If the matcher is inside of a repetition,
        .                       // then we could be at the end of a sequence or at the beginning of the next
        .                       // repetition.
   10,010 ( 0.00%)              if item.up.is_some() {
        .                           // At this point, regardless of whether there is a separator, we should add all
        .                           // matches from the complete repetition of the sequence to the shared, top-level
        .                           // `matches` list (actually, `up.matches`, which could itself not be the top-level,
        .                           // but anyway...). Moreover, we add another item to `cur_items` in which the "dot"
        .                           // is at the end of the `up` matcher. This ensures that the "dot" in the `up`
        .                           // matcher is also advanced sufficiently.
        .                           //
        .                           // NOTE: removing the condition `idx == len` allows trailing separators.
   15,078 ( 0.00%)                  if idx == len {
        .                               // Get the `up` matcher
        .                               let mut new_pos = item.up.clone().unwrap();
        .           
        .                               // Add matches from this repetition to the `matches` of `up`
   14,500 ( 0.00%)                      for idx in item.match_lo..item.match_hi {
   40,535 ( 0.00%)                          let sub = item.matches[idx].clone();
   24,321 ( 0.00%)                          new_pos.push_match(idx, MatchedSeq(sub));
        .                               }
        .           
        .                               // Move the "dot" past the repetition in `up`
   14,263 ( 0.00%)                      new_pos.match_cur = item.match_hi;
   43,500 ( 0.00%)                      new_pos.idx += 1;
        .                               cur_items.push(new_pos);
        .                           }
        .           
        .                           // Check if we need a separator.
    7,250 ( 0.00%)                  if idx == len && item.sep.is_some() {
        .                               // We have a separator, and it is the current token. We can advance past the
        .                               // separator token.
      790 ( 0.00%)                      if item.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {
    2,023 ( 0.00%)                          item.idx += 1;
        .                                   next_items.push(item);
        .                               }
        .                           }
        .                           // We don't need a separator. Move the "dot" back to the beginning of the matcher
        .                           // and try to match again UNLESS we are only allowed to have _one_ repetition.
    7,144 ( 0.00%)                  else if item.seq_op != Some(mbe::KleeneOp::ZeroOrOne) {
   13,390 ( 0.00%)                      item.match_cur = item.match_lo;
   26,780 ( 0.00%)                      item.idx = 0;
        .                               cur_items.push(item);
        .                           }
        .                       }
        .                       // If we are not in a repetition, then being at the end of a matcher means that we have
        .                       // reached the potential end of the input.
        .                       else {
        .                           eof_items.push(item);
        .                       }
        .                   }
        .                   // We are in the middle of a matcher.
        .                   else {
        .                       // Look at what token in the matcher we are trying to match the current token (`token`)
        .                       // against. Depending on that, we may generate new items.
  349,150 ( 0.02%)              match item.top_elts.get_tt(idx) {
        .                           // Need to descend into a sequence
   17,878 ( 0.00%)                  TokenTree::Sequence(sp, seq) => {
        .                               // Examine the case where there are 0 matches of this sequence. We are
        .                               // implicitly disallowing OneOrMore from having 0 matches here. Thus, that will
        .                               // result in a "no rules expected token" error by virtue of this matcher not
        .                               // working.
    7,312 ( 0.00%)                      if seq.kleene.op == mbe::KleeneOp::ZeroOrMore
        .                                   || seq.kleene.op == mbe::KleeneOp::ZeroOrOne
        .                               {
    6,984 ( 0.00%)                          let mut new_item = item.clone();
   13,968 ( 0.00%)                          new_item.match_cur += seq.num_captures;
   17,460 ( 0.00%)                          new_item.idx += 1;
   20,952 ( 0.00%)                          for idx in item.match_cur..item.match_cur + seq.num_captures {
   10,413 ( 0.00%)                              new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![])));
        .                                   }
        .                                   cur_items.push(new_item);
        .                               }
        .           
    3,656 ( 0.00%)                      let matches = create_matches(item.matches.len());
   43,872 ( 0.00%)                      cur_items.push(MatcherPosHandle::Box(Box::new(MatcherPos {
    3,656 ( 0.00%)                          stack: smallvec![],
        .                                   sep: seq.separator.clone(),
    3,656 ( 0.00%)                          seq_op: Some(seq.kleene.op),
        .                                   idx: 0,
   18,280 ( 0.00%)                          matches,
    7,312 ( 0.00%)                          match_lo: item.match_cur,
        .                                   match_cur: item.match_cur,
    7,312 ( 0.00%)                          match_hi: item.match_cur + seq.num_captures,
        .                                   up: Some(item),
   25,592 ( 0.00%)                          top_elts: Tt(TokenTree::Sequence(sp, seq)),
        .                               })));
        .                           }
        .           
        .                           // We need to match a metavar (but the identifier is invalid)... this is an error
        .                           TokenTree::MetaVarDecl(span, _, None) => {
        .                               if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
        .                                   return Error(span, "missing fragment specifier".to_string());
        .                               }
-- line 565 ----------------------------------------
-- line 568 ----------------------------------------
        .                           // We need to match a metavar with a valid ident... call out to the black-box
        .                           // parser by adding an item to `bb_items`.
        .                           TokenTree::MetaVarDecl(_, _, Some(kind)) => {
        .                               // Built-in nonterminals never start with these tokens, so we can eliminate
        .                               // them from consideration.
        .                               //
        .                               // We use the span of the metavariable declaration to determine any
        .                               // edition-specific matching behavior for non-terminals.
   61,595 ( 0.00%)                      if Parser::nonterminal_may_begin_with(kind, token) {
        .                                   bb_items.push(item);
        .                               }
        .                           }
        .           
        .                           // We need to descend into a delimited submatcher or a doc comment. To do this, we
        .                           // push the current matcher onto a stack and push a new item containing the
        .                           // submatcher onto `cur_items`.
        .                           //
        .                           // At the beginning of the loop, if we reach the end of the delimited submatcher,
        .                           // we pop the stack to backtrack out of the descent.
   19,765 ( 0.00%)                  seq @ (TokenTree::Delimited(..)
        .                           | TokenTree::Token(Token { kind: DocComment(..), .. })) => {
        .                               let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));
    3,953 ( 0.00%)                      let idx = item.idx;
   27,671 ( 0.00%)                      item.stack.push(MatcherTtFrame { elts: lower_elts, idx });
   15,812 ( 0.00%)                      item.idx = 0;
        .                               cur_items.push(item);
        .                           }
        .           
        .                           // We just matched a normal token. We can just advance the parser.
  165,426 ( 0.01%)                  TokenTree::Token(t) if token_name_eq(&t, token) => {
  147,546 ( 0.01%)                      item.idx += 1;
        .                               next_items.push(item);
        .                           }
        .           
        .                           // There was another token that was not `token`... This means we can't add any
        .                           // rules. NOTE that this is not necessarily an error unless _all_ items in
        .                           // `cur_items` end up doing this. There may still be some other matchers that do
        .                           // end up working out.
        .                           TokenTree::Token(..) | TokenTree::MetaVar(..) => {}
        .                       }
  319,617 ( 0.02%)          }
  111,864 ( 0.01%)      }
        .           
        .               // Yay a successful parse (so far)!
        .               Success(())
        .           }
        .           
        .           /// Use the given sequence of token trees (`ms`) as a matcher. Match the token
        .           /// stream from the given `parser` against it and return the match.
  138,820 ( 0.01%)  pub(super) fn parse_tt(
        .               parser: &mut Cow<'_, Parser<'_>>,
        .               ms: &[TokenTree],
        .               macro_name: Ident,
        .           ) -> NamedParseResult {
        .               // A queue of possible matcher positions. We initialize it with the matcher position in which
        .               // the "dot" is before the first token of the first token tree in `ms`. `inner_parse_loop` then
        .               // processes all of these possible matcher positions and produces possible next positions into
        .               // `next_items`. After some post-processing, the contents of `next_items` replenish `cur_items`
        .               // and we start over again.
        .               //
        .               // This MatcherPos instance is allocated on the stack. All others -- and
        .               // there are frequently *no* others! -- are allocated on the heap.
        .               let mut initial = initial_matcher_pos(ms);
   69,410 ( 0.00%)      let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];
        .               let mut next_items = Vec::new();
        .           
        .               loop {
        .                   // Matcher positions black-box parsed by parser.rs (`parser`)
        .                   let mut bb_items = SmallVec::new();
        .           
        .                   // Matcher positions that would be valid if the macro invocation was over now
        .                   let mut eof_items = SmallVec::new();
   44,600 ( 0.00%)          assert!(next_items.is_empty());
        .           
        .                   // Process `cur_items` until either we have finished the input or we need to get some
        .                   // parsing from the black-box parser done. The result is that `next_items` will contain a
        .                   // bunch of possible next matcher positions in `next_items`.
        .                   match inner_parse_loop(
        .                       parser.sess,
        .                       &mut cur_items,
        .                       &mut next_items,
-- line 648 ----------------------------------------
-- line 652 ----------------------------------------
        .                   ) {
        .                       Success(_) => {}
        .                       Failure(token, msg) => return Failure(token, msg),
        .                       Error(sp, msg) => return Error(sp, msg),
        .                       ErrorReported => return ErrorReported,
        .                   }
        .           
        .                   // inner parse loop handled all cur_items, so it's empty
   44,600 ( 0.00%)          assert!(cur_items.is_empty());
        .           
        .                   // We need to do some post processing after the `inner_parser_loop`.
        .                   //
        .                   // Error messages here could be improved with links to original rules.
        .           
        .                   // If we reached the EOF, check that there is EXACTLY ONE possible matcher. Otherwise,
        .                   // either the parse is ambiguous (which should never happen) or there is a syntax error.
  223,000 ( 0.02%)          if parser.token == token::Eof {
    2,620 ( 0.00%)              if eof_items.len() == 1 {
        .                           let matches =
    4,394 ( 0.00%)                      eof_items[0].matches.iter_mut().map(|dv| Lrc::make_mut(dv).pop().unwrap());
    1,938 ( 0.00%)                  return nameize(parser.sess, ms, matches);
        .                       } else if eof_items.len() > 1 {
        .                           return Error(
        .                               parser.token.span,
        .                               "ambiguity: multiple successful parses".to_string(),
        .                           );
        .                       } else {
      162 ( 0.00%)                  return Failure(
       54 ( 0.00%)                      Token::new(
        .                                   token::Eof,
       72 ( 0.00%)                          if parser.token.span.is_dummy() {
        .                                       parser.token.span
        .                                   } else {
        .                                       parser.token.span.shrink_to_hi()
        .                                   },
        .                               ),
        .                               "missing tokens in macro arguments",
        .                           );
        .                       }
        .                   }
        .                   // Performance hack: eof_items may share matchers via Rc with other things that we want
        .                   // to modify. Dropping eof_items now may drop these refcounts to 1, preventing an
        .                   // unnecessary implicit clone later in Rc::make_mut.
  175,744 ( 0.01%)          drop(eof_items);
        .           
        .                   // If there are no possible next positions AND we aren't waiting for the black-box parser,
        .                   // then there is a syntax error.
  166,144 ( 0.01%)          if bb_items.is_empty() && next_items.is_empty() {
  171,834 ( 0.01%)              return Failure(parser.token.clone(), "no rules expected this token in macro call");
        .                   }
        .                   // Another possibility is that we need to call out to parse some rust nonterminal
        .                   // (black-box) parser. However, if there is not EXACTLY ONE of these, something is wrong.
   38,400 ( 0.00%)          else if (!bb_items.is_empty() && !next_items.is_empty()) || bb_items.len() > 1 {
        .                       let nts = bb_items
        .                           .iter()
        .                           .map(|item| match item.top_elts.get_tt(item.idx) {
        .                               TokenTree::MetaVarDecl(_, bind, Some(kind)) => format!("{} ('{}')", kind, bind),
        .                               _ => panic!(),
        .                           })
        .                           .collect::<Vec<String>>()
        .                           .join(" or ");
-- line 712 ----------------------------------------
-- line 721 ----------------------------------------
        .                                   n => format!("built-in NTs {} or {} other options.", nts, n),
        .                               }
        .                           ),
        .                       );
        .                   }
        .                   // Dump all possible `next_items` into `cur_items` for the next iteration.
        .                   else if !next_items.is_empty() {
        .                       // Now process the next token
   63,354 ( 0.00%)              cur_items.extend(next_items.drain(..));
   21,118 ( 0.00%)              parser.to_mut().bump();
        .                   }
        .                   // Finally, we have the case where we need to call the black-box parser to get some
        .                   // nonterminal.
        .                   else {
        .                       assert_eq!(bb_items.len(), 1);
        .           
   19,200 ( 0.00%)              let mut item = bb_items.pop().unwrap();
   73,179 ( 0.01%)              if let TokenTree::MetaVarDecl(span, _, Some(kind)) = item.top_elts.get_tt(item.idx) {
    9,600 ( 0.00%)                  let match_cur = item.match_cur;
        .                           // We use the span of the metavariable declaration to determine any
        .                           // edition-specific matching behavior for non-terminals.
   57,665 ( 0.00%)                  let nt = match parser.to_mut().parse_nonterminal(kind) {
        .                               Err(mut err) => {
        .                                   err.span_label(
        .                                       span,
        .                                       format!("while parsing argument for this `{}` macro fragment", kind),
        .                                   )
        .                                   .emit();
        .                                   return ErrorReported;
        .                               }
   57,600 ( 0.00%)                      Ok(nt) => nt,
        .                           };
   38,400 ( 0.00%)                  item.push_match(match_cur, MatchedNonterminal(Lrc::new(nt)));
   38,400 ( 0.00%)                  item.idx += 1;
   57,600 ( 0.00%)                  item.match_cur += 1;
        .                       } else {
        .                           unreachable!()
        .                       }
        .                       cur_items.push(item);
        .                   }
        .           
   61,436 ( 0.00%)          assert!(!cur_items.is_empty());
        .               }
  124,938 ( 0.01%)  }

1,107,569 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  184,269 ( 0.01%)      ptr: NonZeroUsize,
  487,351 ( 0.03%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
  160,804 ( 0.01%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
   41,141 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
   41,141 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
  115,273 ( 0.01%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
   41,141 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Ord for GenericArg<'tcx> {
      348 ( 0.00%)      fn cmp(&self, other: &GenericArg<'_>) -> Ordering {
      232 ( 0.00%)          self.unpack().cmp(&other.unpack())
      160 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   51,820 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
   51,820 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  221,995 ( 0.02%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  221,995 ( 0.02%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
       49 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
       49 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
3,136,858 ( 0.22%)              match ptr & TAG_MASK {
   48,420 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
  727,836 ( 0.05%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
       37 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
    7,970 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    6,648 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
  205,705 ( 0.01%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
  205,705 ( 0.01%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
      402 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
      402 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
   12,350 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    7,372 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
   11,115 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
   61,927 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   24,536 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   13,578 ( 0.00%)          tcx.intern_substs(&substs)
   62,154 ( 0.00%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
   95,277 ( 0.01%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   39,474 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
    6,334 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
   75,496 ( 0.01%)      }
        .           
      248 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
   62,040 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
      248 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  122,373 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
    5,859 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
    1,674 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    6,696 ( 0.00%)      }
        .           
       80 ( 0.00%)      pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
      160 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   51,947 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
  758,766 ( 0.05%)          match self.len() {
        .                       1 => {
  156,890 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  470,695 ( 0.03%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
   50,421 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
  122,885 ( 0.01%)                  let param1 = self[1].try_fold_with(folder)?;
  126,054 ( 0.01%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
   87,661 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
   23,543 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
    2,315 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
    4,816 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
   72,070 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  144,557 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  279,792 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   54,800 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   66,334 ( 0.00%)          self.binders_passed += 1;
   14,765 ( 0.00%)          let t = t.super_fold_with(self);
   66,334 ( 0.00%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
  111,168 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
   37,056 ( 0.00%)          match *r {
   28,172 ( 0.00%)              ty::ReEarlyBound(data) => {
   28,172 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
   14,086 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
  129,696 ( 0.01%)      }
        .           
  248,778 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   82,926 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
  139,634 ( 0.01%)          match *t.kind() {
  207,955 ( 0.01%)              ty::Param(p) => self.ty_for_param(p, t),
  169,356 ( 0.01%)              _ => t.super_fold_with(self),
        .                   }
  273,500 ( 0.02%)      }
        .           
    5,040 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    1,605 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
    6,183 ( 0.00%)              c.super_fold_with(self)
        .                   }
      264 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
   83,182 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
       66 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  146,118 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   34,097 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    2,814 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
    1,657 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
      498 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

1,181,893 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 294 ----------------------------------------
        .           #[allow(deprecated)]
        .           impl From<LayoutErr> for CollectionAllocErr {
        .               fn from(_: LayoutErr) -> Self {
        .                   CollectionAllocErr::CapacityOverflow
        .               }
        .           }
        .           
        .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  199,376 ( 0.01%)      match result {
        .                   Ok(x) => x,
        .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
        .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
        .               }
        .           }
        .           
        .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
        .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
        .           #[cfg(feature = "union")]
        .           impl<A: Array> SmallVecData<A> {
        .               #[inline]
        .               unsafe fn inline(&self) -> *const A::Item {
        .                   self.inline.as_ptr() as *const A::Item
        .               }
        .               #[inline]
        .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
   34,872 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
        .               }
        .               #[inline]
        .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
        .                   SmallVecData {
        .                       inline: core::mem::ManuallyDrop::new(inline),
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn into_inline(self) -> MaybeUninit<A> {
        .                   core::mem::ManuallyDrop::into_inner(self.inline)
        .               }
        .               #[inline]
        .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
   21,629 ( 0.00%)          self.heap
        .               }
        .               #[inline]
        .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
        .                   &mut self.heap
        .               }
        .               #[inline]
        .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
        .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
        .               #[inline]
        .               pub fn new() -> SmallVec<A> {
        .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
        .                   // this check should be optimized away entirely for valid ones.
        .                   assert!(
        .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
        .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
        .                   );
  309,855 ( 0.02%)          SmallVec {
        .                       capacity: 0,
        .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
        .                   }
        .               }
        .           
        .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
        .               /// elements.
        .               ///
-- line 573 ----------------------------------------
-- line 597 ----------------------------------------
        .               ///
        .               /// let vec = vec![1, 2, 3, 4, 5];
        .               /// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
      138 ( 0.00%)          if vec.capacity() <= Self::inline_capacity() {
        .                       unsafe {
        .                           let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());
        .                           let len = vec.len();
        .                           vec.set_len(0);
        .                           ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);
        .           
        .                           SmallVec {
        .                               capacity: len,
        .                               data,
        .                           }
        .                       }
        .                   } else {
        .                       let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
        .                       mem::forget(vec);
        .           
      228 ( 0.00%)              SmallVec {
        .                           capacity: cap,
        .                           data: SmallVecData::from_heap(ptr, len),
        .                       }
        .                   }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements.
-- line 629 ----------------------------------------
-- line 635 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf(buf: A) -> SmallVec<A> {
        .                   SmallVec {
        .                       capacity: A::size(),
    3,906 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
        .                   }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length, which must be less or
        .               /// equal to the size of `buf`.
        .               ///
        .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
        .               ///
        .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
    1,210 ( 0.00%)          assert!(len <= A::size());
    3,630 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length. The user is responsible
        .               /// for ensuring that `len <= A::size()`.
        .               ///
        .               /// ```rust
        .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = unsafe {
        .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
        .               /// };
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
      605 ( 0.00%)          SmallVec {
        .                       capacity: len,
        .                       data: SmallVecData::from_inline(buf),
        .                   }
        .               }
        .           
        .               /// Sets the length of a vector.
        .               ///
        .               /// This will explicitly set the size of the vector, without actually
        .               /// modifying its buffers, so it is up to the caller to ensure that the
        .               /// vector is actually the specified size.
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   let (_, len_ptr, _) = self.triple_mut();
   38,031 ( 0.00%)          *len_ptr = new_len;
        .               }
        .           
        .               /// The maximum number of elements this vector can hold inline
        .               #[inline]
        .               fn inline_capacity() -> usize {
        .                   if mem::size_of::<A::Item>() > 0 {
        .                       A::size()
        .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.triple().1
        .               }
        .           
        .               /// Returns `true` if the vector is empty
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  144,569 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// The number of items the vector can hold without reallocating
        .               #[inline]
        .               pub fn capacity(&self) -> usize {
        .                   self.triple().2
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len, capacity)
        .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
        .               #[inline]
        .               fn triple(&self) -> (*const A::Item, usize, usize) {
        .                   unsafe {
1,464,526 ( 0.10%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           (ptr, len, self.capacity)
        .                       } else {
        .                           (self.data.inline(), self.capacity, Self::inline_capacity())
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len ptr, capacity)
        .               #[inline]
        .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
        .                   unsafe {
4,238,563 ( 0.29%)              if self.spilled() {
      915 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
        .                           (ptr, len_ptr, self.capacity)
        .                       } else {
        .                           (
        .                               self.data.inline_mut(),
        .                               &mut self.capacity,
        .                               Self::inline_capacity(),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
        .               #[inline]
        .               pub fn spilled(&self) -> bool {
3,421,963 ( 0.24%)          self.capacity > Self::inline_capacity()
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// Note 1: The element range is removed even if the iterator is only
        .               /// partially consumed or not consumed at all.
        .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Append an item to the vector.
        .               #[inline]
   43,590 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
        .                   unsafe {
        .                       let (mut ptr, mut len, cap) = self.triple_mut();
  503,076 ( 0.03%)              if *len == cap {
    1,610 ( 0.00%)                  self.reserve(1);
    4,482 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
        .                           ptr = heap_ptr;
        .                           len = heap_len;
        .                       }
    7,368 ( 0.00%)              ptr::write(ptr.add(*len), value);
  767,066 ( 0.05%)              *len += 1;
        .                   }
   34,872 ( 0.00%)      }
        .           
        .               /// Remove an item from the end of the vector and return it, or None if empty.
        .               #[inline]
        .               pub fn pop(&mut self) -> Option<A::Item> {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
  382,664 ( 0.03%)              if *len_ptr == 0 {
        1 ( 0.00%)                  return None;
        .                       }
  113,333 ( 0.01%)              let last_index = *len_ptr - 1;
  122,933 ( 0.01%)              *len_ptr = last_index;
   28,991 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
        .               ///
        .               /// # Example
        .               ///
        .               /// ```
        .               /// # use smallvec::{SmallVec, smallvec};
        .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
        .               /// or if the capacity computation overflows `usize`.
        .               pub fn grow(&mut self, new_cap: usize) {
        .                   infallible(self.try_grow(new_cap))
        .               }
        .           
        .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
        .               ///
        .               /// Panics if `new_cap` is less than the vector's length
      693 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
        .                   unsafe {
       43 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
        .                       let unspilled = !self.spilled();
    9,778 ( 0.00%)              assert!(new_cap >= len);
    9,778 ( 0.00%)              if new_cap <= self.inline_size() {
        .                           if unspilled {
        .                               return Ok(());
        .                           }
        .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
        .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
        .                           self.capacity = len;
        .                           deallocate(ptr, cap);
    9,778 ( 0.00%)              } else if new_cap != cap {
    8,630 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
        .                           debug_assert!(layout.size() > 0);
        .                           let new_alloc;
    4,889 ( 0.00%)                  if unspilled {
        .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
        .                           } else {
        .                               // This should never fail since the same succeeded
        .                               // when previously allocating `ptr`.
    1,984 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
        .           
        .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
        .                               new_alloc = NonNull::new(new_ptr)
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                           }
    9,778 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
   12,842 ( 0.00%)                  self.capacity = new_cap;
        .                       }
        .                       Ok(())
        .                   }
      736 ( 0.00%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
        .               ///
        .               /// Panics if the capacity computation overflows `usize`.
        .               #[inline]
  104,841 ( 0.01%)      pub fn reserve(&mut self, additional: usize) {
  211,814 ( 0.01%)          infallible(self.try_reserve(additional))
  119,208 ( 0.01%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
  812,697 ( 0.06%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   // prefer triple_mut() even if triple() would work
        .                   // so that the optimizer removes duplicated calls to it
        .                   // from callers like insert()
    2,319 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
  709,530 ( 0.05%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .and_then(usize::checked_next_power_of_two)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
      184 ( 0.00%)          self.try_grow(new_cap)
  896,870 ( 0.06%)      }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               ///
        .               /// Panics if the new capacity overflows `usize`.
        .               pub fn reserve_exact(&mut self, additional: usize) {
        .                   infallible(self.try_reserve_exact(additional))
        .               }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   let (_, &mut len, cap) = self.triple_mut();
   37,324 ( 0.00%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
        .                   self.try_grow(new_cap)
        .               }
        .           
-- line 974 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// If `len` is greater than or equal to the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
        .               /// `shrink_to_fit` after truncating.
        .               pub fn truncate(&mut self, len: usize) {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
   15,410 ( 0.00%)              while len < *len_ptr {
        .                           let last_index = *len_ptr - 1;
        .                           *len_ptr = last_index;
        .                           ptr::drop_in_place(ptr.add(last_index));
        .                       }
        .                   }
        .               }
        .           
        .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1047 ----------------------------------------
        .           
        .               /// Remove and return the element at position `index`, shifting all elements after it to the
        .               /// left.
        .               ///
        .               /// Panics if `index` is out of bounds.
        .               pub fn remove(&mut self, index: usize) -> A::Item {
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
      608 ( 0.00%)              let len = *len_ptr;
    2,124 ( 0.00%)              assert!(index < len);
    6,074 ( 0.00%)              *len_ptr = len - 1;
        .                       ptr = ptr.add(index);
        .                       let item = ptr::read(ptr);
    1,416 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
        .                       item
        .                   }
        .               }
        .           
        .               /// Insert an element at position `index`, shifting all elements after it to the right.
        .               ///
        .               /// Panics if `index` is out of bounds.
   10,811 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
        .                   self.reserve(1);
        .           
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    1,323 ( 0.00%)              let len = *len_ptr;
    2,306 ( 0.00%)              assert!(index <= len);
    4,612 ( 0.00%)              *len_ptr = len + 1;
        .                       ptr = ptr.add(index);
    2,306 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
        .                       ptr::write(ptr, element);
        .                   }
    6,882 ( 0.00%)      }
        .           
        .               /// Insert multiple elements at position `index`, shifting all following elements toward the
        .               /// back.
        .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
        .                   let mut iter = iterable.into_iter();
        .                   if index == self.len() {
        .                       return self.extend(iter);
        .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place and preserves the order of the retained
        .               /// elements.
   33,507 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
        .                   let mut del = 0;
        .                   let len = self.len();
        .                   for i in 0..len {
   28,704 ( 0.00%)              if !f(&mut self[i]) {
        .                           del += 1;
    8,806 ( 0.00%)              } else if del > 0 {
        .                           self.swap(i - del, i);
        .                       }
        .                   }
    7,446 ( 0.00%)          self.truncate(len - del);
   29,784 ( 0.00%)      }
        .           
        .               /// Removes consecutive duplicate elements.
        .               pub fn dedup(&mut self)
        .               where
        .                   A::Item: PartialEq<A::Item>,
        .               {
        .                   self.dedup_by(|a, b| a == b);
        .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
        .                           capacity: len,
        .                           data: SmallVecData::from_inline(unsafe {
        .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
        .                               ptr::copy_nonoverlapping(
        .                                   slice.as_ptr(),
        .                                   data.as_mut_ptr() as *mut A::Item,
        .                                   len,
        .                               );
    1,350 ( 0.00%)                      data
        .                           }),
        .                       }
        .                   } else {
        .                       let mut b = slice.to_vec();
        .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
        .                       mem::forget(b);
        .                       SmallVec {
        .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Copy elements from a slice into the vector at position `index`, shifting any following
        .               /// elements toward the back.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `insert`.
  100,096 ( 0.01%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
        .                   self.reserve(slice.len());
        .           
        .                   let len = self.len();
   30,702 ( 0.00%)          assert!(index <= len);
        .           
        .                   unsafe {
        .                       let slice_ptr = slice.as_ptr();
        .                       let ptr = self.as_mut_ptr().add(index);
        .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
        .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
   20,468 ( 0.00%)              self.set_len(len + slice.len());
        .                   }
   81,872 ( 0.01%)      }
        .           
        .               /// Copy elements from a slice and append them to the vector.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `extend`.
        .               #[inline]
        .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
        .                   let len = self.len();
   25,693 ( 0.00%)          self.insert_from_slice(len, slice);
        .               }
        .           }
        .           
        .           impl<A: Array> SmallVec<A>
        .           where
        .               A::Item: Clone,
        .           {
        .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1489 ----------------------------------------
        .               /// Creates a `SmallVec` with `n` copies of `elem`.
        .               /// ```
        .               /// use smallvec::SmallVec;
        .               ///
        .               /// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
        .               /// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
        .               /// ```
        .               pub fn from_elem(elem: A::Item, n: usize) -> Self {
      406 ( 0.00%)          if n > Self::inline_capacity() {
        .                       vec![elem; n].into()
        .                   } else {
        .                       let mut v = SmallVec::<A>::new();
        .                       unsafe {
        .                           let (ptr, len_ptr, _) = v.triple_mut();
        .                           let mut local_len = SetLenOnDrop::new(len_ptr);
        .           
        .                           for i in 0..n {
        .                               ::core::ptr::write(ptr.add(i), elem.clone());
        .                               local_len.increment_len(1);
        .                           }
        .                       }
      588 ( 0.00%)              v
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> ops::Deref for SmallVec<A> {
        .               type Target = [A::Item];
        .               #[inline]
        .               fn deref(&self) -> &[A::Item] {
-- line 1518 ----------------------------------------
-- line 1522 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> ops::DerefMut for SmallVec<A> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut [A::Item] {
        .                   unsafe {
   47,746 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
        .                       slice::from_raw_parts_mut(ptr, len)
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
        .               #[inline]
        .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
        .                   SmallVec::extend_from_slice(self, other)
        .               }
        .           }
        .           
        .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
        .                   let mut v = SmallVec::new();
  318,687 ( 0.02%)          v.extend(iterable);
        .                   v
        .               }
        .           }
        .           
        .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
1,127,308 ( 0.08%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
  232,622 ( 0.02%)          let mut iter = iterable.into_iter();
        .                   let (lower_size_bound, _) = iter.size_hint();
   21,041 ( 0.00%)          self.reserve(lower_size_bound);
        .           
        .                   unsafe {
        .                       let (ptr, len_ptr, cap) = self.triple_mut();
        .                       let mut len = SetLenOnDrop::new(len_ptr);
  571,286 ( 0.04%)              while len.get() < cap {
  329,489 ( 0.02%)                  if let Some(out) = iter.next() {
        4 ( 0.00%)                      ptr::write(ptr.add(len.get()), out);
        .                               len.increment_len(1);
        .                           } else {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
  133,561 ( 0.01%)          for elem in iter {
    1,328 ( 0.00%)              self.push(elem);
        .                   }
  992,865 ( 0.07%)      }
        .           }
        .           
        .           impl<A: Array> fmt::Debug for SmallVec<A>
        .           where
        .               A::Item: fmt::Debug,
        .           {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
        .               #[inline]
        .               fn default() -> SmallVec<A> {
        .                   SmallVec::new()
        .               }
        .           }
        .           
        .           #[cfg(feature = "may_dangle")]
        .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
1,293,691 ( 0.09%)      fn drop(&mut self) {
        .                   unsafe {
  797,815 ( 0.06%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           Vec::from_raw_parts(ptr, len, self.capacity);
        .                       } else {
        .                           ptr::drop_in_place(&mut self[..]);
        .                       }
        .                   }
1,316,088 ( 0.09%)      }
        .           }
        .           
        .           #[cfg(not(feature = "may_dangle"))]
        .           impl<A: Array> Drop for SmallVec<A> {
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
        .               A::Item: Clone,
        .           {
        .               fn clone(&self) -> IntoIter<A> {
        .                   SmallVec::from(self.as_slice()).into_iter()
        .               }
        .           }
        .           
        .           impl<A: Array> Drop for IntoIter<A> {
    6,604 ( 0.00%)      fn drop(&mut self) {
   31,339 ( 0.00%)          for _ in self {}
    6,736 ( 0.00%)      }
        .           }
        .           
        .           impl<A: Array> Iterator for IntoIter<A> {
        .               type Item = A::Item;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<A::Item> {
  201,321 ( 0.01%)          if self.current == self.end {
      141 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
        .                           let current = self.current;
  107,689 ( 0.01%)                  self.current += 1;
    5,107 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
    7,492 ( 0.00%)          let size = self.end - self.current;
        .                   (size, Some(size))
        .               }
        .           }
        .           
        .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<A::Item> {
        .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
        .           impl<A: Array> IntoIterator for SmallVec<A> {
        .               type IntoIter = IntoIter<A>;
        .               type Item = A::Item;
        .               fn into_iter(mut self) -> Self::IntoIter {
        .                   unsafe {
        .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
        .                       let len = self.len();
        .                       self.set_len(0);
   11,877 ( 0.00%)              IntoIter {
  127,744 ( 0.01%)                  data: self,
        .                           current: 0,
        .                           end: len,
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
        .               len: &'a mut usize,
        .               local_len: usize,
        .           }
        .           
        .           impl<'a> SetLenOnDrop<'a> {
        .               #[inline]
        .               fn new(len: &'a mut usize) -> Self {
        .                   SetLenOnDrop {
  129,289 ( 0.01%)              local_len: *len,
        .                       len,
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn get(&self) -> usize {
        .                   self.local_len
        .               }
        .           
        .               #[inline]
        .               fn increment_len(&mut self, increment: usize) {
   98,798 ( 0.01%)          self.local_len += increment;
        .               }
        .           }
        .           
        .           impl<'a> Drop for SetLenOnDrop<'a> {
        .               #[inline]
        .               fn drop(&mut self) {
  160,942 ( 0.01%)          *self.len = self.local_len;
        .               }
        .           }
        .           
        .           #[cfg(feature = "const_new")]
        .           impl<T, const N: usize> SmallVec<[T; N]> {
        .               /// Construct an empty vector.
        .               ///
        .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

2,124,884 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
2,357,559 ( 0.16%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
        .                   let hash = make_insert_hash(&self.hash_builder, &key);
      414 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
  231,686 ( 0.02%)              RustcEntry::Occupied(RustcOccupiedEntry {
  366,441 ( 0.03%)                  key: Some(key),
        .                           elem,
        .                           table: &mut self.table,
        .                       })
        .                   } else {
        .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
        .                       // generic over the BuildHasher and adding a generic parameter would be
        .                       // a breaking change.
        .                       self.reserve(1);
        .           
  378,881 ( 0.03%)              RustcEntry::Vacant(RustcVacantEntry {
        .                           hash,
  110,267 ( 0.01%)                  key,
        .                           table: &mut self.table,
        .                       })
        .                   }
1,644,419 ( 0.11%)      }
        .           }
        .           
        .           /// A view into a single entry in a map, which may either be vacant or occupied.
        .           ///
        .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
        .           ///
        .           /// [`HashMap`]: struct.HashMap.html
        .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
        .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
        .               ///     *o.into_mut() += 10;
        .               /// }
        .               ///
        .               /// assert_eq!(map["poneyland"], 22);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn into_mut(self) -> &'a mut V {
   14,968 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
        .               }
        .           
        .               /// Sets the value of the entry, and returns the entry's old value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// let mut map: HashMap<&str, u32> = HashMap::new();
        .               ///
        .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
        .               ///     o.insert(37);
        .               /// }
        .               /// assert_eq!(map["poneyland"], 37);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    7,843 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
        .                   unsafe {
   76,200 ( 0.01%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    5,437 ( 0.00%)              &mut bucket.as_mut().1
        .                   }
   10,554 ( 0.00%)      }
        .           
        .               /// Sets the value of the entry with the RustcVacantEntry's key,
        .               /// and returns a RustcOccupiedEntry.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

  453,428 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
   27,076 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  742,588 ( 0.05%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
    5,698 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
    5,957 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  742,569 ( 0.05%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
   10,479 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       38 ( 0.00%)          self.position += bytes;
       38 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
    1,008 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    7,339 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   68,009 ( 0.00%)      fn read_u32(&mut self) -> u32 {
  321,248 ( 0.02%)          read_leb128!(self, read_u32_leb128)
  136,018 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  562,002 ( 0.04%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,286 ( 0.01%)          let value = u16::from_le_bytes(bytes);
  160,748 ( 0.01%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
2,472,571 ( 0.17%)          let value = self.data[self.position];
  499,857 ( 0.03%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  487,113 ( 0.03%)      fn read_usize(&mut self) -> usize {
  487,163 ( 0.03%)          read_leb128!(self, read_usize_leb128)
  974,226 ( 0.07%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   33,112 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   65,458 ( 0.00%)          let len = self.read_usize();
  339,450 ( 0.02%)          let sentinel = self.data[self.position + len];
   84,900 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  212,250 ( 0.01%)          self.position += len + 1;
   68,889 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      701 ( 0.00%)          let start = self.position;
    4,079 ( 0.00%)          self.position += s.len();
      701 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

1,347,775 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
297,322 ( 0.02%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
399,687 ( 0.03%)      if enough_space {
 26,814 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
266,458 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
266,458 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
532,916 ( 0.04%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
266,458 ( 0.02%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

164,765 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  749,435 ( 0.05%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       71 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,562 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    4,481 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       60 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
      240 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        4 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    4,340 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       31 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       30 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
      258 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
      585 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
      387 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    9,348 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    9,802 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        2 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
      210 ( 0.00%)      fn from(p: PathBuf) -> Self {
       60 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
      180 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
      210 ( 0.00%)      }
        .           }
        .           
       34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
    1,288 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
    1,932 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
    1,932 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
    1,610 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
       20 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
       15 ( 0.00%)          match self.inner {
        5 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
       20 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    2,178 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
      297 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
      594 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       30 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       60 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       10 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        4 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       10 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
      120 ( 0.00%)      pub lo: BytePos,
      120 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
      357 ( 0.00%)      pub ctxt: SyntaxContext,
      119 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  217,558 ( 0.02%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
    1,380 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   29,320 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   21,990 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   29,320 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   35,298 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   23,532 ( 0.00%)      }
        .               #[inline]
   13,404 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
   13,404 ( 0.00%)      }
        .               #[inline]
   33,849 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
   22,566 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
   10,180 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    6,108 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
       81 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
       54 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
-- line 574 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       69 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       46 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    4,140 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
    2,760 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 657 ----------------------------------------
        .               /// the macro callsite that expanded to it.
        .               pub fn source_callsite(self) -> Span {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }
        .               }
        .           
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
    1,510 ( 0.00%)      pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
      604 ( 0.00%)          if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
    3,624 ( 0.00%)      }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    1,410 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
    2,035 ( 0.00%)          while !outer.contains(self) {
    1,510 ( 0.00%)              self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    1,551 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   11,727 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    7,818 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    3,040 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      942 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
    1,137 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
       95 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       19 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
       76 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    4,221 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    3,618 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    3,015 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       60 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       72 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       48 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
      172 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
       43 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
      172 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  271,810 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   48,602 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      818 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      673 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  168,112 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  222,390 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    1,782 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
    1,134 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    1,296 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    1,903 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      346 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    1,211 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    1,557 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      352 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        4 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    2,136 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    1,246 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
  224,370 ( 0.02%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   54,450 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   36,300 ( 0.00%)          let mut span = self.data();
   29,992 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   54,450 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   60,242 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
        .               pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
       16 ( 0.00%)          let mut span = self.data();
       32 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
       64 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   39,192 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   34,293 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1047 ----------------------------------------
        .           }
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
       30 ( 0.00%)      pub fn from_span(primary_span: Span) -> MultiSpan {
    3,245 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
       30 ( 0.00%)      }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
      555 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
       72 ( 0.00%)      pub fn push_span_label(&mut self, span: Span, label: String) {
       24 ( 0.00%)          self.span_labels.push((span, label));
       60 ( 0.00%)      }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      656 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
      131 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    3,215 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    3,215 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
      555 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
      444 ( 0.00%)          MultiSpan::from_spans(spans)
      555 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       90 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      548 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,578 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
      180 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    3,156 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        2 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
      102 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        2 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
       37 ( 0.00%)          let len = self.hash_len();
       37 ( 0.00%)          &self.value[..len]
       37 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
      174 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
    1,740 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       30 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       30 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       30 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
      120 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       60 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       60 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       90 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      330 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    7,101 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      789 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
1,012,000 ( 0.07%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,578 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    8,679 ( 0.00%)              SourceFile {
    6,312 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    3,156 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    3,156 ( 0.00%)                  lines,
    3,156 ( 0.00%)                  multibyte_chars,
    3,156 ( 0.00%)                  non_narrow_chars,
    3,156 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    7,101 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      352 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       96 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       64 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       64 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       96 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      384 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       64 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      544 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      352 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
      128 ( 0.00%)              lines,
      128 ( 0.00%)              multibyte_chars,
      128 ( 0.00%)              non_narrow_chars,
      128 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      288 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
    3,200 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
    1,600 ( 0.00%)          self.lines[line_index]
    3,200 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    1,687 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      351 ( 0.00%)          if matches!(
      482 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        2 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        6 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
       10 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        2 ( 0.00%)                      if self.src_hash.matches(&src) {
        6 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
       16 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      239 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    2,169 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
    1,089 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   19,571 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   15,470 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   37,741 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   24,966 ( 0.00%)          assert!(line_index < self.lines.len());
   35,637 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      258 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   23,552 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
       24 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
       72 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
       12 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
       12 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
       10 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
      144 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
      120 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
       48 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
       84 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
       24 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        7 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
       12 ( 0.00%)                  let linebpos = self.lines[a];
       24 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
       12 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
       96 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
       96 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
       36 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
       24 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
       12 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
       60 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
       84 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      340 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      306 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       34 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       34 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   37,139 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    2,642 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   46,686 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,976,417 ( 0.14%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,510,080 ( 0.10%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  182,862 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  348,684 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   67,931 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  280,753 ( 0.02%)          let span = self.data_untracked();
   95,087 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
  149,436 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  100,083 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   98,706 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  197,412 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   98,706 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   49,353 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   49,353 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  398,496 ( 0.03%)      }
        .           }

2,150,220 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_data_structures::sync::Lrc;
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_span::symbol::{kw, sym};
        .           use rustc_span::symbol::{Ident, Symbol};
        .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
        .           use std::borrow::Cow;
        .           use std::{fmt, mem};
        .           
   18,318 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CommentKind {
        .               Line,
        .               Block,
        .           }
        .           
      858 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum BinOpToken {
        .               Plus,
        .               Minus,
        .               Star,
        .               Slash,
        .               Percent,
        .               Caret,
        .               And,
        .               Or,
        .               Shl,
        .               Shr,
        .           }
        .           
        .           /// A delimiter token.
   39,172 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum DelimToken {
        .               /// A round parenthesis (i.e., `(` or `)`).
        .               Paren,
        .               /// A square bracket (i.e., `[` or `]`).
        .               Bracket,
        .               /// A curly brace (i.e., `{` or `}`).
        .               Brace,
        .               /// An empty delimiter.
        .               NoDelim,
        .           }
        .           
    2,369 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum LitKind {
        .               Bool, // AST only, must never appear in a `Token`
        .               Byte,
        .               Char,
        .               Integer,
        .               Float,
        .               Str,
        .               StrRaw(u16), // raw string delimited by `n` hash symbols
        .               ByteStr,
        .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
        .               Err,
        .           }
        .           
        .           /// A literal token.
   10,233 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
        .               pub kind: LitKind,
        .               pub symbol: Symbol,
        .               pub suffix: Option<Symbol>,
        .           }
        .           
        .           impl fmt::Display for Lit {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 78 ----------------------------------------
-- line 130 ----------------------------------------
        .               crate fn may_have_suffix(self) -> bool {
        .                   matches!(self, Integer | Float | Err)
        .               }
        .           }
        .           
        .           impl Lit {
        .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
        .                   Lit { kind, symbol, suffix }
      565 ( 0.00%)      }
        .           }
        .           
      228 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
      399 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
      139 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [
        .                       kw::Async,
        .                       kw::Do,
        .                       kw::Box,
        .                       kw::Break,
        .                       kw::Const,
        .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
        .                       kw::True,
        .                       kw::Try,
        .                       kw::Unsafe,
        .                       kw::While,
        .                       kw::Yield,
        .                       kw::Static,
        .                   ]
        .                   .contains(&name)
      285 ( 0.00%)  }
        .           
        .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
    5,202 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
    1,848 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
        .                       .contains(&name)
        .           }
        .           
5,933,531 ( 0.41%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum TokenKind {
        .               /* Expression-operator symbols. */
        .               Eq,
        .               Lt,
        .               Le,
        .               EqEq,
        .               Ne,
        .               Ge,
        .               Gt,
        .               AndAnd,
        .               OrOr,
        .               Not,
        .               Tilde,
   26,799 ( 0.00%)      BinOp(BinOpToken),
       15 ( 0.00%)      BinOpEq(BinOpToken),
        .           
        .               /* Structural symbols */
        .               At,
        .               Dot,
        .               DotDot,
        .               DotDotDot,
        .               DotDotEq,
        .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
        .               LArrow,
        .               FatArrow,
        .               Pound,
        .               Dollar,
        .               Question,
        .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
        .               SingleQuote,
        .               /// An opening delimiter (e.g., `{`).
   55,020 ( 0.00%)      OpenDelim(DelimToken),
        .               /// A closing delimiter (e.g., `}`).
    9,801 ( 0.00%)      CloseDelim(DelimToken),
        .           
        .               /* Literals */
    7,813 ( 0.00%)      Literal(Lit),
        .           
        .               /// Identifier token.
        .               /// Do not forget about `NtIdent` when you want to match on identifiers.
        .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated identifiers in the same way.
   68,750 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
        .               /// Lifetime identifier token.
        .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
        .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated lifetime identifiers in the same way.
    4,698 ( 0.00%)      Lifetime(Symbol),
        .           
   20,622 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
        .           
        .               /// A doc comment token.
        .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
        .               /// similarly to symbols in string literal tokens.
    4,074 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
        .           
        .               Eof,
        .           }
        .           
        .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenKind, 16);
        .           
  821,888 ( 0.06%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Token {
   40,002 ( 0.00%)      pub kind: TokenKind,
      887 ( 0.00%)      pub span: Span,
        .           }
        .           
        .           impl TokenKind {
        .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
        .                   Literal(Lit::new(kind, symbol, suffix))
       95 ( 0.00%)      }
        .           
        .               // An approximation to proc-macro-style single-character operators used by rustc parser.
        .               // If the operator token can be broken into two tokens, the first of which is single-character,
        .               // then this function performs that operation, otherwise it returns `None`.
    3,422 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
   14,039 ( 0.00%)          Some(match *self {
        .                       Le => (Lt, Eq),
        .                       EqEq => (Eq, Eq),
        .                       Ne => (Not, Eq),
        .                       Ge => (Gt, Eq),
        .                       AndAnd => (BinOp(And), BinOp(And)),
        .                       OrOr => (BinOp(Or), BinOp(Or)),
        .                       BinOp(Shl) => (Lt, Lt),
        .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
        .                       BinOpEq(Shl) => (Lt, Le),
        .                       BinOpEq(Shr) => (Gt, Ge),
        .                       DotDot => (Dot, Dot),
        .                       DotDotDot => (Dot, DotDot),
        .                       ModSep => (Colon, Colon),
        .                       RArrow => (BinOp(Minus), Gt),
        .                       LArrow => (Lt, BinOp(Minus)),
        .                       FatArrow => (Eq, Gt),
    3,383 ( 0.00%)              _ => return None,
        .                   })
    3,422 ( 0.00%)      }
        .           
        .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
        .               /// Enables better error recovery when the wrong token is found.
        .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
        .                   match *self {
        .                       Comma => Some(vec![Dot, Lt, Semi]),
        .                       Semi => Some(vec![Colon, Comma]),
        .                       FatArrow => Some(vec![Eq, RArrow]),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               pub fn should_end_const_arg(&self) -> bool {
    2,858 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
      656 ( 0.00%)      }
        .           }
        .           
        .           impl Token {
   32,089 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
  124,470 ( 0.01%)          Token { kind, span }
   32,089 ( 0.00%)      }
        .           
        .               /// Some token that will be thrown away later.
    8,169 ( 0.00%)      pub fn dummy() -> Self {
        .                   Token::new(TokenKind::Question, DUMMY_SP)
    8,169 ( 0.00%)      }
        .           
        .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
        .               pub fn from_ast_ident(ident: Ident) -> Self {
      336 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
        .               }
        .           
        .               /// Return this token by value and leave a dummy token in its place.
   11,971 ( 0.00%)      pub fn take(&mut self) -> Self {
        .                   mem::replace(self, Token::dummy())
   11,971 ( 0.00%)      }
        .           
        .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
        .               /// token refers. For all other tokens this is just a regular span.
        .               /// It is particularly important to use this for identifiers and lifetimes
        .               /// for which spans affect name resolution and edition checks.
        .               /// Note that keywords are also identifiers, so they should use this
        .               /// if they keep spans or perform edition checks.
        .               pub fn uninterpolated_span(&self) -> Span {
      994 ( 0.00%)          match &self.kind {
      164 ( 0.00%)              Interpolated(nt) => nt.span(),
      415 ( 0.00%)              _ => self.span,
        .                   }
      415 ( 0.00%)      }
        .           
        .               pub fn is_op(&self) -> bool {
   35,913 ( 0.00%)          !matches!(
   11,971 ( 0.00%)              self.kind,
        .                       OpenDelim(..)
        .                           | CloseDelim(..)
        .                           | Literal(..)
        .                           | DocComment(..)
        .                           | Ident(..)
        .                           | Lifetime(..)
        .                           | Interpolated(..)
        .                           | Eof
        .                   )
   11,971 ( 0.00%)      }
        .           
        .               pub fn is_like_plus(&self) -> bool {
   19,852 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
    3,940 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of an expression.
       63 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
      315 ( 0.00%)          match self.uninterpolate().kind {
      513 ( 0.00%)              Ident(name, is_raw)              =>
      171 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
        .                       OpenDelim(..)                     | // tuple, array or block
        .                       Literal(..)                       | // literal
        .                       Not                               | // operator not
        .                       BinOp(Minus)                      | // unary minus
        .                       BinOp(Star)                       | // dereference
        .                       BinOp(Or) | OrOr                  | // closure
        .                       BinOp(And)                        | // reference
        .                       AndAnd                            | // double reference
        .                       // DotDotDot is no longer supported, but we need some way to display the error
        .                       DotDot | DotDotDot | DotDotEq     | // range notation
        .                       Lt | BinOp(Shl)                   | // associated path
        .                       ModSep                            | // global path
        .                       Lifetime(..)                      | // labeled loop
        .                       Pound                             => true, // expression attributes
        8 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
        .                           NtExpr(..)    |
        .                           NtBlock(..)   |
        .                           NtPath(..)),
        .                       _ => false,
        .                   }
      126 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a type.
    6,884 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
   10,385 ( 0.00%)          match self.uninterpolate().kind {
    7,803 ( 0.00%)              Ident(name, is_raw)        =>
      867 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
        .                       OpenDelim(Paren)            | // tuple
        .                       OpenDelim(Bracket)          | // array
        .                       Not                         | // never
        .                       BinOp(Star)                 | // raw pointer
        .                       BinOp(And)                  | // reference
        .                       AndAnd                      | // double reference
        .                       Question                    | // maybe bound in trait object
        .                       Lifetime(..)                | // lifetime bound in trait object
        .                       Lt | BinOp(Shl)             | // associated path
        .                       ModSep                      => true, // global path
    3,014 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
        .                       _ => false,
        .                   }
   10,326 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a const param.
        .               pub fn can_begin_const_arg(&self) -> bool {
    4,020 ( 0.00%)          match self.kind {
        .                       OpenDelim(Brace) => true,
    2,360 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
      509 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
        .                   }
      295 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a generic bound.
        .               pub fn can_begin_bound(&self) -> bool {
        .                   self.is_path_start()
        .                       || self.is_lifetime()
        .                       || self.is_keyword(kw::For)
        .                       || self == &Question
        .                       || self == &OpenDelim(Paren)
-- line 421 ----------------------------------------
-- line 427 ----------------------------------------
        .               }
        .           
        .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
        .               /// for example a '-42', or one of the boolean idents).
        .               ///
        .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
        .               ///
        .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
      509 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
    4,907 ( 0.00%)          match self.uninterpolate().kind {
        .                       Literal(..) | BinOp(Minus) => true,
    1,448 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
        .                       Interpolated(ref nt) => match &**nt {
        .                           NtLiteral(_) => true,
        .                           NtExpr(e) => match &e.kind {
        .                               ast::ExprKind::Lit(_) => true,
        .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
        .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
        .                               }
        .                               _ => false,
        .                           },
        .                           _ => false,
        .                       },
        .                       _ => false,
        .                   }
    1,018 ( 0.00%)      }
        .           
        .               // A convenience function for matching on identifiers during parsing.
        .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
        .               // into the regular identifier or lifetime token it refers to,
        .               // otherwise returns the original token.
    2,598 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
  615,581 ( 0.04%)          match &self.kind {
  124,024 ( 0.01%)              Interpolated(nt) => match **nt {
   36,792 ( 0.00%)                  NtIdent(ident, is_raw) => {
   92,067 ( 0.01%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
        .                           }
    1,272 ( 0.00%)                  NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
        .                           _ => Cow::Borrowed(self),
        .                       },
        .                       _ => Cow::Borrowed(self),
        .                   }
    2,598 ( 0.00%)      }
        .           
        .               /// Returns an identifier if this token is an identifier.
  108,125 ( 0.01%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
        .                   let token = self.uninterpolate();
  384,328 ( 0.03%)          match token.kind {
1,392,346 ( 0.10%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
        .                       _ => None,
        .                   }
  698,480 ( 0.05%)      }
        .           
        .               /// Returns a lifetime identifier if this token is a lifetime.
   61,453 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
        .                   let token = self.uninterpolate();
  128,526 ( 0.01%)          match token.kind {
    8,438 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
        .                       _ => None,
        .                   }
  430,171 ( 0.03%)      }
        .           
        .               /// Returns `true` if the token is an identifier.
        .               pub fn is_ident(&self) -> bool {
        .                   self.ident().is_some()
    2,380 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a lifetime.
    2,810 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
        .                   self.lifetime().is_some()
    5,620 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier whose name is the given
        .               /// string slice.
    1,044 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
        .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    2,088 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an interpolated path.
        .               fn is_path(&self) -> bool {
   18,316 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
    1,228 ( 0.00%)              if let NtPath(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
        .               /// That is, is this a pre-parsed expression dropped into the token stream
-- line 516 ----------------------------------------
-- line 522 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   false
        .               }
        .           
        .               // Is the token an interpolated block (`$b:block`)?
        .               pub fn is_whole_block(&self) -> bool {
      160 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtBlock(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
       80 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either the `mut` or `const` keyword.
        .               pub fn is_mutability(&self) -> bool {
        .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        .               }
        .           
      618 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    9,796 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
        9 ( 0.00%)      }
        .           
   18,356 ( 0.00%)      pub fn is_path_start(&self) -> bool {
   27,146 ( 0.00%)          self == &ModSep
        .                       || self.is_qpath_start()
        .                       || self.is_path()
        .                       || self.is_path_segment_keyword()
    2,763 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
   22,945 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a given keyword, `kw`.
   69,107 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
        .                   self.is_non_raw_ident_where(|id| id.name == kw)
  138,214 ( 0.01%)      }
        .           
      395 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
        .               }
        .           
        .               // Returns true for reserved identifiers used internally for elided lifetimes,
        .               // unnamed method parameters, crate root module, error recovery etc.
      525 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_special)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword used in the language.
      527 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword reserved for possible future use.
      525 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is either a special identifier or a keyword.
        .               pub fn is_reserved_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_reserved)
        .               }
        .           
        .               /// Returns `true` if the token is the identifier `true` or `false`.
      395 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
      790 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
        .               }
        .           
        .               pub fn is_numeric_lit(&self) -> bool {
        .                   matches!(
        .                       self.kind,
        .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
        .                   )
        .               }
        .           
        .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
      152 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
  454,363 ( 0.03%)          match self.ident() {
    2,888 ( 0.00%)              Some((id, false)) => pred(id),
        .                       _ => false,
        .                   }
      190 ( 0.00%)      }
        .           
   39,210 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
   19,605 ( 0.00%)          let kind = match self.kind {
      276 ( 0.00%)              Eq => match joint.kind {
        .                           Eq => EqEq,
        .                           Gt => FatArrow,
        .                           _ => return None,
        .                       },
      146 ( 0.00%)              Lt => match joint.kind {
        .                           Eq => Le,
        .                           Lt => BinOp(Shl),
        .                           Le => BinOpEq(Shl),
        .                           BinOp(Minus) => LArrow,
        .                           _ => return None,
        .                       },
      787 ( 0.00%)              Gt => match joint.kind {
        .                           Eq => Ge,
        .                           Gt => BinOp(Shr),
        .                           Ge => BinOpEq(Shr),
        .                           _ => return None,
        .                       },
        4 ( 0.00%)              Not => match joint.kind {
        .                           Eq => Ne,
        .                           _ => return None,
        .                       },
    1,102 ( 0.00%)              BinOp(op) => match joint.kind {
        .                           Eq => BinOpEq(op),
        2 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
        .                           BinOp(Or) if op == Or => OrOr,
      168 ( 0.00%)                  Gt if op == Minus => RArrow,
        .                           _ => return None,
        .                       },
       15 ( 0.00%)              Dot => match joint.kind {
        .                           Dot => DotDot,
        .                           DotDot => DotDotDot,
        .                           _ => return None,
        .                       },
        .                       DotDot => match joint.kind {
        .                           Dot => DotDotDot,
        .                           Eq => DotDotEq,
        .                           _ => return None,
        .                       },
    1,098 ( 0.00%)              Colon => match joint.kind {
        .                           Colon => ModSep,
        .                           _ => return None,
        .                       },
        .                       SingleQuote => match joint.kind {
        .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
        .                           _ => return None,
        .                       },
        .           
        .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
        .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
        .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
        .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
        .                   };
        .           
   10,829 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   35,289 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq<TokenKind> for Token {
        .               fn eq(&self, rhs: &TokenKind) -> bool {
  202,833 ( 0.01%)          self.kind == *rhs
        .               }
        .           }
        .           
      266 ( 0.00%)  #[derive(Clone, Encodable, Decodable)]
        .           /// For interpolation during macro expansion.
        .           pub enum Nonterminal {
        .               NtItem(P<ast::Item>),
        .               NtBlock(P<ast::Block>),
        .               NtStmt(ast::Stmt),
        .               NtPat(P<ast::Pat>),
       76 ( 0.00%)      NtExpr(P<ast::Expr>),
        .               NtTy(P<ast::Ty>),
        .               NtIdent(Ident, /* is_raw */ bool),
        .               NtLifetime(Ident),
        .               NtLiteral(P<ast::Expr>),
        .               /// Stuff inside brackets for attributes
        .               NtMeta(P<ast::AttrItem>),
        .               NtPath(ast::Path),
        .               NtVis(ast::Visibility),
-- line 686 ----------------------------------------
-- line 711 ----------------------------------------
        .               Path,
        .               Vis,
        .               TT,
        .           }
        .           
        .           impl NonterminalKind {
        .               /// The `edition` closure is used to get the edition for the given symbol. Doing
        .               /// `span.edition()` is expensive, so we do it lazily.
    1,344 ( 0.00%)      pub fn from_symbol(
        .                   symbol: Symbol,
        .                   edition: impl FnOnce() -> Edition,
        .               ) -> Option<NonterminalKind> {
    3,256 ( 0.00%)          Some(match symbol {
        .                       sym::item => NonterminalKind::Item,
        .                       sym::block => NonterminalKind::Block,
        .                       sym::stmt => NonterminalKind::Stmt,
        .                       sym::pat => match edition() {
        .                           Edition::Edition2015 | Edition::Edition2018 => {
        .                               NonterminalKind::PatParam { inferred: true }
        .                           }
        .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
        .                       sym::lifetime => NonterminalKind::Lifetime,
        .                       sym::literal => NonterminalKind::Literal,
        .                       sym::meta => NonterminalKind::Meta,
        .                       sym::path => NonterminalKind::Path,
        .                       sym::vis => NonterminalKind::Vis,
        .                       sym::tt => NonterminalKind::TT,
        .                       _ => return None,
        .                   })
    1,344 ( 0.00%)      }
        .               fn symbol(self) -> Symbol {
        .                   match self {
        .                       NonterminalKind::Item => sym::item,
        .                       NonterminalKind::Block => sym::block,
        .                       NonterminalKind::Stmt => sym::stmt,
        .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
        .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
        .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------
-- line 765 ----------------------------------------
        .           
        .           impl fmt::Display for NonterminalKind {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "{}", self.symbol())
        .               }
        .           }
        .           
        .           impl Nonterminal {
       82 ( 0.00%)      pub fn span(&self) -> Span {
      410 ( 0.00%)          match self {
        .                       NtItem(item) => item.span,
        .                       NtBlock(block) => block.span,
        .                       NtStmt(stmt) => stmt.span,
        .                       NtPat(pat) => pat.span,
        .                       NtExpr(expr) | NtLiteral(expr) => expr.span,
        .                       NtTy(ty) => ty.span,
       82 ( 0.00%)              NtIdent(ident, _) | NtLifetime(ident) => ident.span,
        .                       NtMeta(attr_item) => attr_item.span(),
        .                       NtPath(path) => path.span,
        .                       NtVis(vis) => vis.span,
        .                       NtTT(tt) => tt.span(),
        .                   }
      164 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq for Nonterminal {
        .               fn eq(&self, rhs: &Self) -> bool {
        .                   match (self, rhs) {
        .                       (NtIdent(ident_lhs, is_raw_lhs), NtIdent(ident_rhs, is_raw_rhs)) => {
        .                           ident_lhs == ident_rhs && is_raw_lhs == is_raw_rhs
        .                       }
-- line 795 ----------------------------------------

2,435,096 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 141 ----------------------------------------
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
        .               pub const fn is_empty(&self) -> bool {
  282,361 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
    3,100 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
      400 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
        .               ///     assert_eq!(first, &0);
        .               ///     assert_eq!(elements, &[1, 2]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
      259 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   13,328 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
  146,929 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn last_mut(&mut self) -> Option<&mut T> {
  343,809 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
        .               pub const fn as_ptr(&self) -> *const T {
  343,376 ( 0.02%)          self as *const [T] as *const T
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
        .               pub const fn as_mut_ptr(&mut self) -> *mut T {
       32 ( 0.00%)          self as *mut [T] as *mut T
        .               }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
    6,570 ( 0.00%)          let _ = &self[a];
   12,458 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
    3,275 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
      336 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   24,042 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_mut_unchecked(mid) }
        .               }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
        .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
        .                   let len = self.len();
        .                   let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
    3,950 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
        .               }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
      144 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let n = needle.len();
  314,196 ( 0.02%)          self.len() >= n && needle == &self[..n]
        .               }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let (m, n) = (self.len(), needle.len());
   17,762 ( 0.00%)          m >= n && needle == &self[m - n..]
        .               }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
  982,893 ( 0.07%)          while left < right {
1,421,000 ( 0.10%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
  228,502 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
  380,117 ( 0.03%)              if cmp == Less {
  765,794 ( 0.05%)                  left = mid + 1;
  190,975 ( 0.01%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
1,070,683 ( 0.07%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
   50,470 ( 0.00%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
        .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3380 ----------------------------------------
        .                       }
        .                       a << k
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        2 ( 0.00%)          let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
   14,590 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
   14,590 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
   14,592 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
        .               /// let v = [1, 2, 3, 3, 5, 6, 7];
        .               /// let i = v.partition_point(|&x| x < 5);
        .               ///
        .               /// assert_eq!(i, 4);
        .               /// assert!(v[..i].iter().all(|&x| x < 5));
        .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
        .               /// ```
        .               #[stable(feature = "partition_point", since = "1.52.0")]
      140 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
        .               where
        .                   P: FnMut(&T) -> bool,
        .               {
        .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
      280 ( 0.00%)      }
        .           
        .               /// Removes the subslice corresponding to the given range
        .               /// and returns a reference to it.
        .               ///
        .               /// Returns `None` and does not modify the slice if the given
        .               /// range is out of bounds.
        .               ///
        .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

  841,415 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  9,807 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  3,269 ( 0.00%)          let tcx = self.tcx();
486,785 ( 0.03%)          DecodeContext {
 51,728 ( 0.00%)              opaque: opaque::Decoder::new(self.blob(), pos),
  3,269 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
 18,124 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 46,056 ( 0.00%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  9,807 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 67,782 ( 0.00%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 40,089 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
142,981 ( 0.01%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 47,019 ( 0.00%)          T::decode(&mut dcx)
 86,588 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
    329 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
     94 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 76,428 ( 0.01%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
199,036 ( 0.01%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 59,362 ( 0.00%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 56,298 ( 0.00%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  9,711 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 19,422 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 16,299 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 30,288 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 59,362 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
267,500 ( 0.02%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
244,069 ( 0.02%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
 34,867 ( 0.00%)          let tcx = self.tcx();
      .           
 34,867 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
113,640 ( 0.01%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  6,457 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
313,803 ( 0.02%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 33,470 ( 0.00%)          self.opaque = old_opaque;
  6,694 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
119,652 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    504 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
208,218 ( 0.01%)          DefIndex::from_u32(d.read_u32())
  1,008 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
122,324 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 30,581 ( 0.00%)          let cdata = decoder.cdata();
 30,581 ( 0.00%)          let sess = decoder.sess.unwrap();
 61,162 ( 0.00%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
  1,548 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
152,905 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  9,534 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
  1,362 ( 0.00%)          let local_cdata = decoder.cdata();
  1,362 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    425 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
  2,125 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  2,125 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  4,250 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
 10,896 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
235,360 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 29,420 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 58,840 ( 0.00%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 88,245 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 64,873 ( 0.00%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
    325 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
    650 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
    325 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 88,245 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
117,430 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
 12,070 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  6,043 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  6,025 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
 12,086 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
117,660 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
264,780 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
 16,920 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 23,420 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 19,604 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    348 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
    116 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    580 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    232 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    464 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    348 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    580 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     75 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      6 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     38 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     79 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     74 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 43,967 ( 0.00%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 33,206 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
 20,181 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
    117 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 56,450 ( 0.00%)      }
      .           
    468 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  8,740 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    936 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
 17,162 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 68,648 ( 0.00%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 51,486 ( 0.00%)      }
      .           
 31,423 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
 21,601 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 17,956 ( 0.00%)      }
      .           
  4,212 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  7,664 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
  2,340 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    676 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    208 ( 0.00%)          match self.kind(item_id) {
     52 ( 0.00%)              EntryKind::Trait(data) => {
    312 ( 0.00%)                  let data = data.decode((self, sess));
    832 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
    104 ( 0.00%)                      data.unsafety,
    104 ( 0.00%)                      data.paren_sugar,
    104 ( 0.00%)                      data.has_auto_impl,
    104 ( 0.00%)                      data.is_marker,
     52 ( 0.00%)                      data.skip_array_during_method_dispatch,
     52 ( 0.00%)                      data.specialization_kind,
    208 ( 0.00%)                      self.def_path_hash(item_id),
     52 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    468 ( 0.00%)      }
      .           
  1,503 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    668 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    835 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    536 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
    334 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
  3,674 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    668 ( 0.00%)              data.discr,
  1,002 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
    199 ( 0.00%)                      did: self.local_def_id(index),
    398 ( 0.00%)                      name: self.item_ident(index, sess).name,
    398 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
    167 ( 0.00%)              data.is_non_exhaustive,
      .                   )
  1,503 ( 0.00%)      }
      .           
  1,680 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    448 ( 0.00%)          let kind = self.kind(item_id);
    224 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    538 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     60 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
  1,139 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    800 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
  1,628 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    784 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
  3,295 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
  3,295 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     20 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    195 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
     20 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
     16 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  8,520 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
 11,310 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    855 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
     40 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    875 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    216 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  9,701 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
    144 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 34,902 ( 0.00%)          match self.kind(id) {
 29,085 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
 16,575 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
    255 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
     28 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      9 ( 0.00%)          self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  6,535 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 69,691 ( 0.00%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,750 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
    114 ( 0.00%)          tcx.arena.alloc_from_iter(
     76 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     76 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
    342 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    312 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    624 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
  1,248 ( 0.00%)              for child_index in children.decode((self, sess)) {
 11,952 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  2,226 ( 0.00%)                      let kind = self.def_kind(child_index);
  1,484 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  2,804 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     66 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
    150 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
     50 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    764 ( 0.00%)          match self.kind(id) {
     78 ( 0.00%)              EntryKind::Mod(exports) => {
  2,042 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
    140 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
    192 ( 0.00%)          self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  3,360 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
    240 ( 0.00%)          self.root
      .                       .tables
      .                       .mir
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
    175 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1216 ----------------------------------------
      .                       .tables
      .                       .unused_generic_params
      .                       .get(self, id)
      .                       .map(|params| params.decode(self))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_promoted_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> IndexVec<Promoted, Body<'tcx>> {
      5 ( 0.00%)          self.root
      .                       .tables
      .                       .promoted_mir
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_promoted_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1232 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    675 ( 0.00%)          match self.kind(id) {
    540 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
  1,134 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    486 ( 0.00%)              tcx.arena.alloc_from_iter(
    162 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
 13,896 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  8,106 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  8,278 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
     60 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
  1,087 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  7,609 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
    112 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
 20,844 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
 10,422 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
    245 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
  3,054 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
  1,304 ( 0.00%)                  let vdata = data.decode(self);
    852 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
  1,700 ( 0.00%)      }
      .           
    348 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
  1,785 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    261 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
  1,410 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  4,680 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    230 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     72 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     96 ( 0.00%)          tcx.arena.alloc_from_iter(
    120 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
  1,203 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
 19,152 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
  2,128 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  3,310 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
  1,624 ( 0.00%)              tcx.arena.alloc_from_iter(
    812 ( 0.00%)                  impls
      .                               .decode(self)
 11,675 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
 17,024 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    600 ( 0.00%)          let def_key = self.def_key(id);
    750 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
  1,314 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     76 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    190 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
      .                   tcx.arena.alloc_from_iter(param_names.decode((self, tcx)))
      .               }
      .           
      .               fn exported_symbols(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {
    228 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))
      .               }
      .           
      .               fn get_rendered_const(self, id: DefIndex) -> String {
      .                   match self.kind(id) {
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     78 ( 0.00%)          match self.kind(id) {
     13 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
    180 ( 0.00%)          let constness = match self.kind(id) {
     36 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
-- line 1505 ----------------------------------------
-- line 1508 ----------------------------------------
      .                       EntryKind::Fn(data) => data.decode(self).asyncness,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.asyncness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).asyncness,
      .                       _ => bug!("asyncness: expected function kind"),
      .                   }
      .               }
      .           
      .               fn is_foreign_item(self, id: DefIndex) -> bool {
    836 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
    341 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    890 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
105,322 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
 30,184 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
 19,295 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
120,368 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
     68 ( 0.00%)          DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
 15,988 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
  3,505 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
 55,958 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
 63,952 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 58,830 ( 0.00%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 58,830 ( 0.00%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  3,945 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 58,505 ( 0.00%)          self.cdata.source_map_import_info.get_or_init(|| {
     39 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 16,569 ( 0.00%)                          mut name,
  4,734 ( 0.00%)                          src_hash,
    789 ( 0.00%)                          start_pos,
  1,578 ( 0.00%)                          end_pos,
  3,945 ( 0.00%)                          mut lines,
  3,945 ( 0.00%)                          mut multibyte_chars,
  4,734 ( 0.00%)                          mut non_narrow_chars,
  3,945 ( 0.00%)                          mut normalized_pos,
  4,734 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,578 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
853,182 ( 0.06%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,638 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
 14,202 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
 10,257 ( 0.00%)                          name,
  5,523 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,578 ( 0.00%)                          self.cnum,
  3,945 ( 0.00%)                          lines,
  4,734 ( 0.00%)                          multibyte_chars,
  3,945 ( 0.00%)                          non_narrow_chars,
  3,156 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  2,367 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    456 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
    114 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
    114 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     38 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    874 ( 0.00%)          CrateMetadata {
     38 ( 0.00%)              blob,
    114 ( 0.00%)              root,
    152 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
    152 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    266 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
    152 ( 0.00%)              cnum_map,
    190 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    456 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    342 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    200 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
  2,272 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    886 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
  3,974 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
 21,256 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  7,505 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

770,226 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
      138 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       69 ( 0.00%)              from_str_radix(src, radix)
      207 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
  106,365 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  371,682 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  311,501 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
7,818,717 ( 0.54%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
      183 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  685,914 ( 0.05%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   40,088 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
        .                       if unlikely!(rhs == 0) {
        .                           None
        .                       } else {
        .                           // SAFETY: div by zero has been checked above and unsigned types have no other
        .                           // failure modes for division
      520 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
        .                       }
        .                   }
        .           
        .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
        .                   /// if `rhs == 0`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  108,224 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    4,043 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
4,351,103 ( 0.30%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
1,443,232 ( 0.10%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
4,526,738 ( 0.31%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
        4 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        4 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  625,064 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        8 ( 0.00%)          }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
  155,714 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
1,301,465 ( 0.09%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      282 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
    9,828 ( 0.00%)              if self <= 1 { return 0; }
        .           
   16,810 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   50,206 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   16,970 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
   23,760 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   83,976 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
1,291,488 ( 0.09%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
  807,180 ( 0.06%)              .intern(kind, |kind| {
   43,218 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
   86,436 ( 0.01%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
1,452,924 ( 0.10%)      }
        .           
        .               #[inline(never)]
  323,984 ( 0.02%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
  283,486 ( 0.02%)              .intern(kind, |kind| {
   64,020 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
  364,482 ( 0.03%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
   92,775 ( 0.01%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
   71,475 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   14,375 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   14,375 ( 0.00%)          self.data.get(&id.local_id)
   57,340 ( 0.00%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
    1,440 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
      960 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    6,450 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   76,325 ( 0.01%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    6,450 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   16,587 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   11,058 ( 0.00%)          match *qpath {
   27,510 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
    5,664 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
   27,645 ( 0.00%)      }
        .           
      184 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
      802 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      184 ( 0.00%)      }
        .           
    1,788 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    3,491 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    3,576 ( 0.00%)      }
        .           
    3,036 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    3,036 ( 0.00%)      }
        .           
    5,823 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    5,823 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    5,823 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    1,994 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      436 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    2,964 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    1,482 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    2,556 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    1,278 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      740 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      370 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   13,206 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    6,603 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   22,250 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   11,125 ( 0.00%)      }
        .           
   90,786 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   15,131 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
   75,655 ( 0.01%)      }
        .           
   19,560 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   19,560 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
   39,120 ( 0.00%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    2,678 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    1,339 ( 0.00%)      }
        .           
    6,844 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    6,844 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   13,688 ( 0.00%)      }
        .           
    4,752 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    4,752 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
    9,504 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    2,300 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   16,863 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   16,436 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    8,630 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    4,315 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   13,754 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    6,877 ( 0.00%)      }
        .           
    7,383 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   14,766 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   14,766 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
    1,170 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      234 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      324 ( 0.00%)      }
        .           
       80 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
       16 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
       48 ( 0.00%)      }
        .           
      618 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
    1,236 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
    1,360 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    1,236 ( 0.00%)      }
        .           
    5,502 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
    7,336 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    4,706 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    1,436 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    2,440 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    1,220 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    5,926 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    2,963 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    1,984 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
      992 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    1,260 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    1,575 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      502 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      251 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    1,462 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      731 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
      960 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      480 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      502 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      251 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
       30 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       10 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
       20 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      251 ( 0.00%)          &self.coercion_casts
      251 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
       28 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
      193 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
      488 ( 0.00%)      pub fn is_identity(&self) -> bool {
      976 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
      488 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
      788 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      386 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
      120 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
      976 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
    1,158 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    6,116 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   10,880 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
    4,352 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
    8,704 ( 0.00%)      }
        .           
      783 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      261 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    1,044 ( 0.00%)      }
        .           
    5,220 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    1,044 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    7,308 ( 0.00%)      }
        .           
    1,044 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      261 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    1,305 ( 0.00%)      }
        .           
    1,755 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
    3,120 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      780 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        .                   let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        .               }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    7,352 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    3,676 ( 0.00%)          let attrs = self.get_attrs(def_id);
   15,623 ( 0.00%)          let get = |name| {
    3,676 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      152 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
       76 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
       38 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   18,380 ( 0.00%)          };
    5,514 ( 0.00%)          (
    5,514 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    2,757 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
    7,352 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
    5,390 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      770 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    5,799 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    6,160 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
  381,528 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
  490,536 ( 0.03%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      322 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      368 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
    6,517 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    7,448 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
    9,065 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   10,360 ( 0.00%)      }
        .           
    8,939 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
   11,493 ( 0.00%)      }
        .           
  152,859 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  174,696 ( 0.01%)      }
        .           
    4,070 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   30,873 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
   32,487 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
    1,484 ( 0.00%)      }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
       48 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
        .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
       72 ( 0.00%)          if let Some(id) = id.as_local() {
       21 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
        .                   } else {
       85 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
        .                   }
       72 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    3,419 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
      790 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   46,864 ( 0.00%)          &*self.untracked_resolutions.cstore
   23,432 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      778 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    3,135 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      502 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
      753 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
      251 ( 0.00%)          self.sess.opts.borrowck_mode
    1,004 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
        .                   let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
        .                   features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
       77 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
      133 ( 0.00%)              match crate_type {
        .                           CrateType::Executable
        .                           | CrateType::Staticlib
        .                           | CrateType::ProcMacro
        .                           | CrateType::Cdylib => false,
        .           
        .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
        .                           // We want to block export of generics from dylibs,
        .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
        .                       // FIXME(#42706) -- in some cases, we could do better here.
        .                       return true;
        .                   }
        .                   false
        .               }
        .           
        .               /// Determines whether identifiers in the assembly have strict naming rules.
        .               /// Currently, only NVPTX* targets need it.
      302 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
      302 ( 0.00%)          self.sess.target.arch.contains("nvptx")
      604 ( 0.00%)      }
        .           
        .               /// Returns `&'static core::panic::Location<'static>`.
       60 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
        .                   self.mk_imm_ref(
       10 ( 0.00%)              self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
       20 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
       60 ( 0.00%)      }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    3,124 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    2,272 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    5,112 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
    2,556 ( 0.00%)      }
        .           
    1,792 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
    2,048 ( 0.00%)      }
        .           
  151,165 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  172,760 ( 0.01%)      }
        .           
    4,088 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
    4,672 ( 0.00%)      }
        .           
      749 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
      856 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
        .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
        .           }
        .           
        .           macro_rules! nop_lift {
        .               ($set:ident; $ty:ty => $lifted:ty) => {
        .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
        .                       type Lifted = $lifted;
        .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
      384 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
        .                               Some(unsafe { mem::transmute(self) })
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                   }
        .               };
        .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
   74,496 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  296,292 ( 0.02%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
        .           
        .               /// Allows access to the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with_context<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
      143 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
        .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
        .               /// as the `TyCtxt` passed in.
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  144,751 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  143,336 ( 0.01%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  143,149 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   86,388 ( 0.01%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   30,999 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   14,332 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  144,046 ( 0.01%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   37,254 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
   44,267 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   14,867 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
  379,935 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  192,357 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    3,550 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
  425,502 ( 0.03%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
1,641,722 ( 0.11%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
1,469,250 ( 0.10%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
        .               /// unsafe.
        .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
        .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
        .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
        .               }
        .           
        .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
        .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
    1,260 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
        .                   self.super_traits_of(trait_def_id).any(|trait_did| {
        .                       self.associated_items(trait_did)
        .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
        .                           .is_some()
        .                   })
      945 ( 0.00%)      }
        .           
        .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
        .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
        .               /// to identify which traits may define a given associated type to help avoid cycle errors.
        .               /// Returns a `DefId` iterator.
        .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
        .                   let mut set = FxHashSet::default();
      210 ( 0.00%)          let mut stack = vec![trait_def_id];
        .           
        .                   set.insert(trait_def_id);
        .           
      945 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
      280 ( 0.00%)              let trait_did = stack.pop()?;
      140 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
        .           
        .                       for (predicate, _) in generic_predicates.predicates {
      105 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
       70 ( 0.00%)                      if set.insert(data.def_id()) {
        .                                   stack.push(data.def_id());
        .                               }
        .                           }
        .                       }
        .           
        .                       Some(trait_did)
        .                   })
        .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   57,428 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
1,125,696 ( 0.08%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
  430,707 ( 0.03%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
  620,032 ( 0.04%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
   55,003 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
  620,032 ( 0.04%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      105 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
      105 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      358 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
      358 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        .                   match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
      146 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
      230 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
      232 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      168 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      339 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    5,918 ( 0.00%)          iter.intern_with(|ts| {
    1,800 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    6,453 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    5,283 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      237 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        8 ( 0.00%)          if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
      384 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      108 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
   19,509 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   13,321 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
    1,842 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
    4,960 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
   19,509 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
      434 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      434 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
      868 ( 0.00%)      }
        .           
        .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Deref)
        .               }
        .           
      106 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
      106 ( 0.00%)          self.mk_place_elem(
        .                       place,
      212 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
      212 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
    5,751 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    6,390 ( 0.00%)      }
        .           
    2,450 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      350 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
      395 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
    1,400 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    2,800 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
    5,777 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
    3,105 ( 0.00%)              self._intern_predicates(preds)
        .                   }
    5,344 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   17,789 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
      530 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  277,717 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   13,148 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    5,761 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    3,166 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   13,640 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
      148 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
    7,758 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   10,658 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    1,733 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      354 ( 0.00%)              c_variadic,
      484 ( 0.00%)              unsafety,
      448 ( 0.00%)              abi,
      100 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
    1,333 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       18 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    6,156 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
       15 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  410,353 ( 0.03%)          iter.intern_with(|xs| self.intern_substs(xs))
       20 ( 0.00%)      }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   12,705 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
    7,686 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   15,372 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   39,095 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
   51,520 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
   51,520 ( 0.00%)          let hir = self.hir();
        .                   loop {
   94,899 ( 0.01%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  121,549 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
   72,819 ( 0.01%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
   73,600 ( 0.01%)      }
        .           
    6,896 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
   33,362 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
    2,366 ( 0.00%)              let next = self.hir().get_parent_node(id);
    7,098 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    6,896 ( 0.00%)      }
        .           
      266 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
      847 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
      259 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      152 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
    3,059 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
      874 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
      874 ( 0.00%)          Some(&*candidates)
    3,496 ( 0.00%)      }
        .           
   11,662 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   14,994 ( 0.00%)      }
        .           
    3,141 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
      221 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
    2,792 ( 0.00%)      }
        .           
   13,412 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
   17,244 ( 0.00%)      }
        .           
    9,936 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
    9,936 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      210 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       21 ( 0.00%)          if self.is_const_fn_raw(def_id) {
       24 ( 0.00%)              match self.lookup_const_stability(def_id) {
       16 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        6 ( 0.00%)                      self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      189 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
  225,856 ( 0.02%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
  709,036 ( 0.05%)          E::intern_with(self, f)
  217,854 ( 0.02%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
   98,866 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  205,686 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        6 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
        8 ( 0.00%)                  assert!(iter.next().is_none());
   23,947 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
      140 ( 0.00%)                  assert!(iter.next().is_none());
   26,081 ( 0.00%)                  f(&[t0, t1])
        .                       }
      856 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
   78,701 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
    5,714 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
       40 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    4,608 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  200,503 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  155,914 ( 0.01%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
      912 ( 0.00%)                  let t0 = iter.next().unwrap()?;
       18 ( 0.00%)                  assert!(iter.next().is_none());
   16,239 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
      162 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      162 ( 0.00%)                  let t1 = iter.next().unwrap()?;
      243 ( 0.00%)                  assert!(iter.next().is_none());
   11,600 ( 0.00%)                  f(&[t0, t1])
        .                       }
    4,585 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  225,622 ( 0.02%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  144,751 ( 0.01%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
        .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
   10,200 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

  654,612 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
434,743,988 (30.02%)  events annotated

