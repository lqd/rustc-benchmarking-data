--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name tinyvec --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" -C metadata=55843c3779cb02f1 -C extra-filename=-55843c3779cb02f1 --out-dir /usr/home/liquid/tmp/.tmpOZFOmy/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpOZFOmy/target/debug/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-tinyvec-1.5.1-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
4,316,564,375 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
391,873,471 ( 9.08%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
213,182,908 ( 4.94%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/scope.rs:<rustc_mir_build::build::Builder>::diverge_cleanup
192,014,869 ( 4.45%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
101,638,445 ( 2.35%)  ./malloc/malloc.c:_int_free
 91,789,315 ( 2.13%)  ./malloc/malloc.c:_int_malloc
 78,835,287 ( 1.83%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 78,373,120 ( 1.82%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs:<rustc_mir_build::build::Builder>::diverge_cleanup
 67,984,241 ( 1.57%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 67,397,834 ( 1.56%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_mir_build::build::Builder>::diverge_cleanup
 58,438,339 ( 1.35%)  ./malloc/malloc.c:malloc
 56,005,864 ( 1.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 55,980,515 ( 1.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 34,428,791 ( 0.80%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 33,782,748 ( 0.78%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 33,588,309 ( 0.78%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 26,597,327 ( 0.62%)  ./malloc/malloc.c:free
 22,447,153 ( 0.52%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/vec.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 22,392,206 ( 0.52%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 20,060,599 ( 0.46%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>::union::<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>
 16,849,504 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
 16,676,378 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::union::<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>
 16,061,533 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs:<rustc_middle::mir::terminator::TerminatorKind>::successors
 15,229,697 ( 0.35%)  ./malloc/malloc.c:malloc_consolidate
 14,505,437 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs:<rustc_mir_transform::simplify::CfgSimplifier>::simplify
 14,076,509 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 12,984,668 ( 0.30%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 11,360,253 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 11,196,103 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/scope.rs:<hashbrown::map::HashMap<(rustc_mir_build::build::scope::DropIdx, rustc_middle::mir::Local, rustc_mir_build::build::scope::DropKind), rustc_mir_build::build::scope::DropIdx, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 11,092,436 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs:<rustc_middle::mir::traversal::Preorder as core::iter::traits::iterator::Iterator>::next
 10,510,719 ( 0.24%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 10,503,801 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 10,308,916 ( 0.24%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
  9,140,077 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
  8,862,489 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
  8,201,636 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
  8,046,657 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::traits_in_scope
  7,771,723 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
  7,533,722 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_middle::mir::traversal::Preorder as core::iter::traits::iterator::Iterator>::next
  7,373,781 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>::union::<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>
  7,109,216 ( 0.16%)  ./malloc/malloc.c:realloc
  7,046,028 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
  7,030,124 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/chain.rs:<core::iter::adapters::chain::Chain<core::option::IntoIter<&rustc_middle::mir::BasicBlock>, core::slice::iter::Iter<rustc_middle::mir::BasicBlock>> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::adapters::map::map_fold<&rustc_middle::mir::BasicBlock, rustc_middle::mir::BasicBlock, (), <rustc_middle::mir::BasicBlock as core::clone::Clone>::clone, core::iter::traits::iterator::Iterator::for_each::call<rustc_middle::mir::BasicBlock, <alloc::vec::Vec<rustc_middle::mir::BasicBlock> as alloc::vec::spec_extend::SpecExtend<rustc_middle::mir::BasicBlock, core::iter::adapters::cloned::Cloned<core::iter::adapters::chain::Chain<core::option::IntoIter<&rustc_middle::mir::BasicBlock>, core::slice::iter::Iter<rustc_middle::mir::BasicBlock>>>>>::spec_extend::{closure#0}>::{closure#0}>::{closure#0}>
  6,714,754 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
  6,651,729 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
  6,465,125 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
  6,188,140 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::union::<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>
  5,958,221 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
  5,930,084 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  5,835,151 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
  5,826,367 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
  5,641,548 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
  5,571,401 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
  5,557,950 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::resolutions
  5,477,680 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::drop_flag_effects_for_location::<<rustc_mir_dataflow::impls::MaybeUninitializedPlaces as rustc_mir_dataflow::framework::GenKillAnalysis>::statement_effect<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::{closure#0}>
  5,389,878 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
  5,367,120 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/chain.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
  5,307,003 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::drop_flag_effects_for_location::<<rustc_mir_dataflow::impls::MaybeInitializedPlaces as rustc_mir_dataflow::framework::GenKillAnalysis>::statement_effect<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::{closure#0}>
  5,283,066 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
  5,216,103 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_middle::mir::traversal::Preorder as core::iter::traits::iterator::Iterator>::next
  5,150,808 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
  5,124,968 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
  5,080,475 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
  5,054,382 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
  5,035,599 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<alloc::vec::Vec<rustc_middle::mir::Statement>>::retain::<<rustc_mir_transform::simplify::CfgSimplifier>::strip_nops::{closure#0}>
  4,963,865 ( 0.11%)  ./malloc/malloc.c:_int_realloc
  4,853,512 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  4,846,206 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
  4,845,200 ( 0.11%)  ./elf/dl-lookup.c:do_lookup_x
  4,817,298 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
  4,766,796 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_resolve::Resolver>::traits_in_scope
  4,646,398 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
  4,425,723 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
  4,328,158 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
  4,319,951 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<alloc::vec::Vec<rustc_middle::mir::BasicBlock> as alloc::vec::spec_from_iter::SpecFromIter<rustc_middle::mir::BasicBlock, core::iter::adapters::map::Map<rustc_middle::mir::traversal::Postorder, <rustc_middle::mir::traversal::ReversePostorder>::new::{closure#0}>>>::from_iter

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           use std::convert::TryInto;
        .           
        .           pub struct SimplifyCfg {
        .               label: String,
        .           }
        .           
        .           impl SimplifyCfg {
        .               pub fn new(label: &str) -> Self {
   19,441 ( 0.00%)          SimplifyCfg { label: format!("SimplifyCfg-{}", label) }
        .               }
        .           }
        .           
   23,190 ( 0.00%)  pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
    9,276 ( 0.00%)      CfgSimplifier::new(body).simplify();
    6,957 ( 0.00%)      remove_dead_blocks(tcx, body);
        .           
        .               // FIXME: Should probably be moved into some kind of pass manager
        .               body.basic_blocks_mut().raw.shrink_to_fit();
    6,208 ( 0.00%)  }
        .           
        .           impl<'tcx> MirPass<'tcx> for SimplifyCfg {
    1,779 ( 0.00%)      fn name(&self) -> Cow<'_, str> {
    5,337 ( 0.00%)          Cow::Borrowed(&self.label)
    1,779 ( 0.00%)      }
        .           
    1,779 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
        .                   debug!("SimplifyCfg({:?}) - simplifying {:?}", self.label, body.source);
    4,638 ( 0.00%)          simplify_cfg(tcx, body);
        .               }
        .           }
        .           
        .           pub struct CfgSimplifier<'a, 'tcx> {
        .               basic_blocks: &'a mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,
        .               pred_count: IndexVec<BasicBlock, u32>,
        .           }
        .           
        .           impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {
   16,233 ( 0.00%)      pub fn new(body: &'a mut Body<'tcx>) -> Self {
    4,638 ( 0.00%)          let mut pred_count = IndexVec::from_elem(0u32, body.basic_blocks());
        .           
        .                   // we can't use mir.predecessors() here because that counts
        .                   // dead blocks, which we don't want to.
    6,957 ( 0.00%)          pred_count[START_BLOCK] = 1;
        .           
  657,992 ( 0.02%)          for (_, data) in traversal::preorder(body) {
  465,666 ( 0.01%)              if let Some(ref term) = data.terminator {
  701,107 ( 0.02%)                  for &tgt in term.successors() {
1,177,205 ( 0.03%)                      pred_count[tgt] += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   let basic_blocks = body.basic_blocks_mut();
        .           
    9,276 ( 0.00%)          CfgSimplifier { basic_blocks, pred_count }
   18,552 ( 0.00%)      }
        .           
   18,552 ( 0.00%)      pub fn simplify(mut self) {
    2,319 ( 0.00%)          self.strip_nops();
        .           
        .                   // Vec of the blocks that should be merged. We store the indices here, instead of the
        .                   // statements itself to avoid moving the (relatively) large statements twice.
        .                   // We do not push the statements directly into the target block (`bb`) as that is slower
        .                   // due to additional reallocations
        .                   let mut merged_blocks = Vec::new();
        .                   loop {
        .                       let mut changed = false;
        .           
    5,002 ( 0.00%)              for bb in self.basic_blocks.indices() {
  376,242 ( 0.01%)                  if self.pred_count[bb] == 0 {
        .                               continue;
        .                           }
        .           
        .                           debug!("simplifying {:?}", bb);
        .           
        .                           let mut terminator =
        .                               self.basic_blocks[bb].terminator.take().expect("invalid terminator state");
        .           
  500,100 ( 0.01%)                  for successor in terminator.successors_mut() {
        .                               self.collapse_goto_chain(successor, &mut changed);
        .                           }
        .           
        .                           let mut inner_changed = true;
        .                           merged_blocks.clear();
  518,480 ( 0.01%)                  while inner_changed {
        .                               inner_changed = false;
        .                               inner_changed |= self.simplify_branch(&mut terminator);
  175,890 ( 0.00%)                      inner_changed |= self.merge_successor(&mut merged_blocks, &mut terminator);
  527,670 ( 0.01%)                      changed |= inner_changed;
        .                           }
        .           
        .                           let statements_to_merge =
  185,066 ( 0.00%)                      merged_blocks.iter().map(|&i| self.basic_blocks[i].statements.len()).sum();
        .           
      914 ( 0.00%)                  if statements_to_merge > 0 {
        .                               let mut statements = std::mem::take(&mut self.basic_blocks[bb].statements);
        .                               statements.reserve(statements_to_merge);
    9,137 ( 0.00%)                      for &from in &merged_blocks {
   18,274 ( 0.00%)                          statements.append(&mut self.basic_blocks[from].statements);
        .                               }
    3,699 ( 0.00%)                      self.basic_blocks[bb].statements = statements;
        .                           }
        .           
5,167,700 ( 0.12%)                  self.basic_blocks[bb].terminator = Some(terminator);
        .                       }
        .           
    5,002 ( 0.00%)              if !changed {
        .                           break;
        .                       }
        .                   }
   18,552 ( 0.00%)      }
        .           
        .               /// This function will return `None` if
        .               /// * the block has statements
        .               /// * the block has a terminator other than `goto`
        .               /// * the block has no terminator (meaning some other part of the current optimization stole it)
        .               fn take_terminator_if_simple_goto(&mut self, bb: BasicBlock) -> Option<Terminator<'tcx>> {
1,806,252 ( 0.04%)          match self.basic_blocks[bb] {
        .                       BasicBlockData {
        .                           ref statements,
        .                           terminator:
        .                               ref mut terminator @ Some(Terminator { kind: TerminatorKind::Goto { .. }, .. }),
        .                           ..
    4,602 ( 0.00%)              } if statements.is_empty() => terminator.take(),
        .                       // if `terminator` is None, this means we are in a loop. In that
        .                       // case, let all the loop collapse to its entry.
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Collapse a goto chain starting from `start`
        .               fn collapse_goto_chain(&mut self, start: &mut BasicBlock, changed: &mut bool) {
        .                   // Using `SmallVec` here, because in some logs on libcore oli-obk saw many single-element
        .                   // goto chains. We should probably benchmark different sizes.
        .                   let mut terminators: SmallVec<[_; 1]> = Default::default();
  771,285 ( 0.02%)          let mut current = *start;
  789,164 ( 0.02%)          while let Some(terminator) = self.take_terminator_if_simple_goto(current) {
    1,882 ( 0.00%)              let target = match terminator {
      941 ( 0.00%)                  Terminator { kind: TerminatorKind::Goto { target }, .. } => target,
        .                           _ => unreachable!(),
        .                       };
   17,879 ( 0.00%)              terminators.push((current, terminator));
        .                       current = target;
        .                   }
        .                   let last = current;
  257,095 ( 0.01%)          *start = last;
   14,115 ( 0.00%)          while let Some((current, mut terminator)) = terminators.pop() {
    1,882 ( 0.00%)              let target = match terminator {
        .                           Terminator { kind: TerminatorKind::Goto { ref mut target }, .. } => target,
        .                           _ => unreachable!(),
        .                       };
    1,882 ( 0.00%)              *changed |= *target != last;
    1,882 ( 0.00%)              *target = last;
        .                       debug!("collapsing goto chain from {:?} to {:?}", current, target);
        .           
    1,882 ( 0.00%)              if self.pred_count[current] == 1 {
        .                           // This is the last reference to current, so the pred-count to
        .                           // to target is moved into the current block.
        .                           self.pred_count[current] = 0;
        .                       } else {
      748 ( 0.00%)                  self.pred_count[*target] += 1;
      561 ( 0.00%)                  self.pred_count[current] -= 1;
        .                       }
   31,053 ( 0.00%)              self.basic_blocks[current].terminator = Some(terminator);
        .                   }
        .               }
        .           
        .               // merge a block with 1 `goto` predecessor to its parent
        .               fn merge_successor(
        .                   &mut self,
        .                   merged_blocks: &mut Vec<BasicBlock>,
        .                   terminator: &mut Terminator<'tcx>,
        .               ) -> bool {
  368,221 ( 0.01%)          let target = match terminator.kind {
   48,644 ( 0.00%)              TerminatorKind::Goto { target } if self.pred_count[target] == 1 => target,
        .                       _ => return false,
        .                   };
        .           
        .                   debug!("merging block {:?} into {:?}", target, terminator);
  211,209 ( 0.00%)          *terminator = match self.basic_blocks[target].terminator.take() {
        .                       Some(terminator) => terminator,
        .                       None => {
        .                           // unreachable loop - this should not be possible, as we
        .                           // don't strand blocks, but handle it correctly.
        .                           return false;
        .                       }
        .                   };
        .           
        .                   merged_blocks.push(target);
   27,549 ( 0.00%)          self.pred_count[target] = 0;
        .           
        .                   true
        .               }
        .           
        .               // turn a branch with all successors identical to a goto
        .               fn simplify_branch(&mut self, terminator: &mut Terminator<'tcx>) -> bool {
  527,670 ( 0.01%)          match terminator.kind {
        .                       TerminatorKind::SwitchInt { .. } => {}
        .                       _ => return false,
        .                   };
        .           
        .                   let first_succ = {
   13,008 ( 0.00%)              if let Some(&first_succ) = terminator.successors().next() {
    6,504 ( 0.00%)                  if terminator.successors().all(|s| *s == first_succ) {
       84 ( 0.00%)                      let count = terminator.successors().count();
      168 ( 0.00%)                      self.pred_count[first_succ] -= (count - 1) as u32;
        .                               first_succ
        .                           } else {
        .                               return false;
        .                           }
        .                       } else {
        .                           return false;
        .                       }
        .                   };
        .           
        .                   debug!("simplifying branch {:?}", terminator);
      168 ( 0.00%)          terminator.kind = TerminatorKind::Goto { target: first_succ };
        .                   true
        .               }
        .           
        .               fn strip_nops(&mut self) {
        .                   for blk in self.basic_blocks.iter_mut() {
  464,003 ( 0.01%)              blk.statements.retain(|stmt| !matches!(stmt.kind, StatementKind::Nop))
        .                   }
        .               }
        .           }
        .           
   27,750 ( 0.00%)  pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
    2,775 ( 0.00%)      let reachable = traversal::reachable_as_bitset(body);
        .               let num_blocks = body.basic_blocks().len();
    5,550 ( 0.00%)      if num_blocks == reachable.count() {
        .                   return;
        .               }
        .           
        .               let basic_blocks = body.basic_blocks_mut();
        .               let mut replacements: Vec<_> = (0..num_blocks).map(BasicBlock::new).collect();
        .               let mut used_blocks = 0;
   28,250 ( 0.00%)      for alive_index in reachable.iter() {
        .                   let alive_index = alive_index.index();
   28,250 ( 0.00%)          replacements[alive_index] = BasicBlock::new(used_blocks);
   56,500 ( 0.00%)          if alive_index != used_blocks {
        .                       // Swap the next alive block data with the current available slot. Since
        .                       // alive_index is non-decreasing this is a valid operation.
        .                       basic_blocks.raw.swap(alive_index, used_blocks);
        .                   }
   28,250 ( 0.00%)          used_blocks += 1;
        .               }
        .           
    6,648 ( 0.00%)      if tcx.sess.instrument_coverage() {
        .                   save_unreachable_coverage(basic_blocks, used_blocks);
        .               }
        .           
        .               basic_blocks.raw.truncate(used_blocks);
        .           
        .               for block in basic_blocks {
   56,500 ( 0.00%)          for target in block.terminator_mut().successors_mut() {
  152,180 ( 0.00%)              *target = replacements[target.index()];
        .                   }
        .               }
   22,200 ( 0.00%)  }
        .           
        .           /// Some MIR transforms can determine at compile time that a sequences of
        .           /// statements will never be executed, so they can be dropped from the MIR.
        .           /// For example, an `if` or `else` block that is guaranteed to never be executed
        .           /// because its condition can be evaluated at compile time, such as by const
        .           /// evaluation: `if false { ... }`.
        .           ///
        .           /// Those statements are bypassed by redirecting paths in the CFG around the
-- line 305 ----------------------------------------
-- line 363 ----------------------------------------
        .                       })),
        .                   })
        .               }
        .           }
        .           
        .           pub struct SimplifyLocals;
        .           
        .           impl<'tcx> MirPass<'tcx> for SimplifyLocals {
      540 ( 0.00%)      fn is_enabled(&self, sess: &rustc_session::Session) -> bool {
      810 ( 0.00%)          sess.mir_opt_level() > 0
      540 ( 0.00%)      }
        .           
      270 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
        .                   trace!("running SimplifyLocals on {:?}", body.source);
      270 ( 0.00%)          simplify_locals(body, tcx);
        .               }
        .           }
        .           
    1,890 ( 0.00%)  pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {
        .               // First, we're going to get a count of *actual* uses for every `Local`.
        .               let mut used_locals = UsedLocals::new(body);
        .           
        .               // Next, we're going to remove any `Local` with zero actual uses. When we remove those
        .               // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`
        .               // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from
        .               // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a
        .               // fixedpoint where there are no more unused locals.
-- line 389 ----------------------------------------
-- line 390 ----------------------------------------
        .               remove_unused_definitions(&mut used_locals, body);
        .           
        .               // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.
        .               let map = make_local_map(&mut body.local_decls, &used_locals);
        .           
        .               // Only bother running the `LocalUpdater` if we actually found locals to remove.
        .               if map.iter().any(Option::is_none) {
        .                   // Update references to all vars and tmps now
      438 ( 0.00%)          let mut updater = LocalUpdater { map, tcx };
        .                   updater.visit_body(body);
        .           
        .                   body.local_decls.shrink_to_fit();
        .               }
    2,160 ( 0.00%)  }
        .           
        .           /// Construct the mapping while swapping out unused stuff out from the `vec`.
        .           fn make_local_map<V>(
        .               local_decls: &mut IndexVec<Local, V>,
        .               used_locals: &UsedLocals,
        .           ) -> IndexVec<Local, Option<Local>> {
      540 ( 0.00%)      let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*local_decls);
        .               let mut used = Local::new(0);
        .           
      270 ( 0.00%)      for alive_index in local_decls.indices() {
        .                   // `is_used` treats the `RETURN_PLACE` and arguments as used.
   13,115 ( 0.00%)          if !used_locals.is_used(alive_index) {
        .                       continue;
        .                   }
        .           
   13,013 ( 0.00%)          map[alive_index] = Some(used);
   13,013 ( 0.00%)          if alive_index != used {
        .                       local_decls.swap(alive_index, used);
        .                   }
        .                   used.increment_by(1);
        .               }
        .               local_decls.truncate(used.index());
        .               map
        .           }
        .           
-- line 428 ----------------------------------------
-- line 431 ----------------------------------------
        .               increment: bool,
        .               arg_count: u32,
        .               use_count: IndexVec<Local, u32>,
        .           }
        .           
        .           impl UsedLocals {
        .               /// Determines which locals are used & unused in the given body.
        .               fn new(body: &Body<'_>) -> Self {
    1,890 ( 0.00%)          let mut this = Self {
        .                       increment: true,
      270 ( 0.00%)              arg_count: body.arg_count.try_into().unwrap(),
      810 ( 0.00%)              use_count: IndexVec::from_elem(0, &body.local_decls),
        .                   };
        .                   this.visit_body(body);
        .                   this
        .               }
        .           
        .               /// Checks if local is used.
        .               ///
        .               /// Return place and arguments are always considered used.
        .               fn is_used(&self, local: Local) -> bool {
        .                   trace!("is_used({:?}): use_count: {:?}", local, self.use_count[local]);
   47,103 ( 0.00%)          local.as_u32() <= self.arg_count || self.use_count[local] != 0
        .               }
        .           
        .               /// Updates the use counts to reflect the removal of given statement.
        .               fn statement_removed(&mut self, statement: &Statement<'_>) {
       31 ( 0.00%)          self.increment = false;
        .           
        .                   // The location of the statement is irrelevant.
        .                   let location = Location { block: START_BLOCK, statement_index: 0 };
      155 ( 0.00%)          self.visit_statement(statement, location);
        .               }
        .           
        .               /// Visits a left-hand side of an assignment.
   15,605 ( 0.00%)      fn visit_lhs(&mut self, place: &Place<'_>, location: Location) {
   12,484 ( 0.00%)          if place.is_indirect() {
        .                       // A use, not a definition.
        .                       self.visit_place(place, PlaceContext::MutatingUse(MutatingUseContext::Store), location);
        .                   } else {
        .                       // A definition. The base local itself is not visited, so this occurrence is not counted
        .                       // toward its use count. There might be other locals still, used in an indexing
        .                       // projection.
        .                       self.super_projection(
        .                           place.as_ref(),
        .                           PlaceContext::MutatingUse(MutatingUseContext::Projection),
        .                           location,
        .                       );
        .                   }
   12,484 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for UsedLocals {
   15,605 ( 0.00%)      fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {
   15,605 ( 0.00%)          match statement.kind {
        .                       StatementKind::CopyNonOverlapping(..)
        .                       | StatementKind::Retag(..)
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::FakeRead(..)
        .                       | StatementKind::AscribeUserType(..) => {
        .                           self.super_statement(statement, location);
        .                       }
        .           
        .                       StatementKind::Nop => {}
        .           
        .                       StatementKind::StorageLive(_local) | StatementKind::StorageDead(_local) => {}
        .           
    3,091 ( 0.00%)              StatementKind::Assign(box (ref place, ref rvalue)) => {
    9,273 ( 0.00%)                  self.visit_lhs(place, location);
        .                           self.visit_rvalue(rvalue, location);
        .                       }
        .           
        .                       StatementKind::SetDiscriminant { ref place, variant_index: _ } => {
      210 ( 0.00%)                  self.visit_lhs(place, location);
        .                       }
        .                   }
    5,155 ( 0.00%)      }
        .           
        .               fn visit_local(&mut self, local: &Local, _ctx: PlaceContext, _location: Location) {
   77,318 ( 0.00%)          if self.increment {
   97,542 ( 0.00%)              self.use_count[*local] += 1;
        .                   } else {
       72 ( 0.00%)              assert_ne!(self.use_count[*local], 0);
       24 ( 0.00%)              self.use_count[*local] -= 1;
        .                   }
        .               }
        .           }
        .           
        .           /// Removes unused definitions. Updates the used locals to reflect the changes made.
        .           fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>) {
        .               // The use counts are updated as we remove the statements. A local might become unused
        .               // during the retain operation, leading to a temporary inconsistency (storage statements or
        .               // definitions referencing the local might remain). For correctness it is crucial that this
        .               // computation reaches a fixed point.
        .           
        .               let mut modified = true;
    4,094 ( 0.00%)      while modified {
      281 ( 0.00%)          modified = false;
        .           
        .                   for data in body.basic_blocks_mut() {
        .                       // Remove unnecessary StorageLive and StorageDead annotations.
   78,080 ( 0.00%)              data.statements.retain(|statement| {
   19,856 ( 0.00%)                  let keep = match &statement.kind {
        .                               StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {
        .                                   used_locals.is_used(*local)
        .                               }
    6,512 ( 0.00%)                      StatementKind::Assign(box (place, _)) => used_locals.is_used(place.local),
        .           
        .                               StatementKind::SetDiscriminant { ref place, .. } => {
       80 ( 0.00%)                          used_locals.is_used(place.local)
        .                               }
        .                               _ => true,
        .                           };
        .           
    3,010 ( 0.00%)                  if !keep {
        .                               trace!("removing statement {:?}", statement);
       31 ( 0.00%)                      modified = true;
        .                               used_locals.statement_removed(statement);
        .                           }
        .           
        .                           keep
        .                       });
        .                   }
        .               }
        .           }
-- line 555 ----------------------------------------
-- line 556 ----------------------------------------
        .           
        .           struct LocalUpdater<'tcx> {
        .               map: IndexVec<Local, Option<Local>>,
        .               tcx: TyCtxt<'tcx>,
        .           }
        .           
        .           impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
       13 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {
   22,614 ( 0.00%)          *l = self.map[*l].unwrap();
        .               }
        .           }

1,998,132 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           #[derive(Debug)]
        .           pub struct Token {
        .               pub kind: TokenKind,
        .               pub len: usize,
        .           }
        .           
        .           impl Token {
        .               fn new(kind: TokenKind, len: usize) -> Token {
  877,005 ( 0.02%)          Token { kind, len }
        .               }
        .           }
        .           
        .           /// Enum representing common lexeme types.
        .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
  243,200 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum TokenKind {
        .               // Multi-char tokens:
        .               /// "// comment"
        .               LineComment { doc_style: Option<DocStyle> },
        .               /// `/* block comment */`
        .               ///
        .               /// Block comments can be recursive, so the sequence like `/* /* */`
        .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
        .               /// Literal starts with "0x".
        .               Hexadecimal,
        .               /// Literal doesn't contain a prefix.
        .               Decimal,
        .           }
        .           
        .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
        .           /// but shebang isn't a part of rust syntax.
       49 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
        .               // Shebang must start with `#!` literally, without any preceding whitespace.
        .               // For simplicity we consider any line starting with `#!` a shebang,
        .               // regardless of restrictions put on shebangs by specific platforms.
        .               if let Some(input_tail) = input.strip_prefix("#!") {
        .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
        .                   // then it may be valid Rust code, so consider it Rust code.
        .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
        .                       !matches!(
        .                           tok,
        .                           TokenKind::Whitespace
        .                               | TokenKind::LineComment { doc_style: None }
        .                               | TokenKind::BlockComment { doc_style: None, .. }
        .                       )
        .                   });
        2 ( 0.00%)          if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
        .                       // No other choice than to consider this a shebang.
        .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
        .                   }
        .               }
        .               None
       56 ( 0.00%)  }
        .           
        .           /// Parses the first token from the provided input string.
  292,329 ( 0.01%)  pub fn first_token(input: &str) -> Token {
        .               debug_assert!(!input.is_empty());
   97,443 ( 0.00%)      Cursor::new(input).advance_token()
  389,772 ( 0.01%)  }
        .           
        .           /// Creates an iterator that produces tokens from the input string.
        .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
        .               let mut cursor = Cursor::new(input);
        .               std::iter::from_fn(move || {
        2 ( 0.00%)          if cursor.is_eof() {
        .                       None
        .                   } else {
        .                       cursor.reset_len_consumed();
       28 ( 0.00%)              Some(cursor.advance_token())
        .                   }
        .               })
        .           }
        .           
        .           /// True if `c` is considered a whitespace according to Rust language definition.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
        .           /// for definitions of these classes.
        .           pub fn is_whitespace(c: char) -> bool {
        .               // This is Pattern_White_Space.
        .               //
        .               // Note that this set is stable (ie, it doesn't change with different
        .               // Unicode versions), so it's ok to just hard-code the values.
        .           
  192,154 ( 0.00%)      matches!(
        .                   c,
        .                   // Usual ASCII suspects
        .                   '\u{0009}'   // \t
        .                   | '\u{000A}' // \n
        .                   | '\u{000B}' // vertical tab
        .                   | '\u{000C}' // form feed
        .                   | '\u{000D}' // \r
        .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 269 ----------------------------------------
        .                   | '\u{2028}' // LINE SEPARATOR
        .                   | '\u{2029}' // PARAGRAPH SEPARATOR
        .               )
        .           }
        .           
        .           /// True if `c` is valid as a first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
       52 ( 0.00%)  pub fn is_id_start(c: char) -> bool {
        .               // This is XID_Start OR '_' (which formally is not a XID_Start).
    1,128 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
       52 ( 0.00%)  }
        .           
        .           /// True if `c` is valid as a non-first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_continue(c: char) -> bool {
        .               unicode_xid::UnicodeXID::is_xid_continue(c)
        .           }
        .           
        .           /// The passed string is lexically an identifier.
       10 ( 0.00%)  pub fn is_ident(string: &str) -> bool {
        .               let mut chars = string.chars();
        .               if let Some(start) = chars.next() {
        .                   is_id_start(start) && chars.all(is_id_continue)
        .               } else {
        .                   false
        .               }
       14 ( 0.00%)  }
        .           
        .           impl Cursor<'_> {
        .               /// Parses a token from the input string.
  779,560 ( 0.02%)      fn advance_token(&mut self) -> Token {
        .                   let first_char = self.bump().unwrap();
  370,524 ( 0.01%)          let token_kind = match first_char {
        .                       // Slash, comment or block comment.
    3,788 ( 0.00%)              '/' => match self.first() {
        .                           '/' => self.line_comment(),
        .                           '*' => self.block_comment(),
        .                           _ => Slash,
        .                       },
        .           
        .                       // Whitespace sequence.
        .                       c if is_whitespace(c) => self.whitespace(),
        .           
        .                       // Raw identifier, raw string literal or identifier.
      452 ( 0.00%)              'r' => match (self.first(), self.second()) {
        .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
        .                           ('#', _) | ('"', _) => {
        .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
        .                               let suffix_start = self.len_consumed();
        .                               if err.is_none() {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = RawStr { n_hashes, err };
        .                               Literal { kind, suffix_start }
        .                           }
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Byte literal, byte string literal, raw byte string literal or identifier.
      360 ( 0.00%)              'b' => match (self.first(), self.second()) {
        .                           ('\'', _) => {
        .                               self.bump();
        .                               let terminated = self.single_quoted_string();
        .                               let suffix_start = self.len_consumed();
        .                               if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = Byte { terminated };
-- line 338 ----------------------------------------
-- line 361 ----------------------------------------
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Identifier (this should be checked after other variant that can
        .                       // start as identifier).
        .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
        .           
        .                       // Numeric literal.
  165,381 ( 0.00%)              c @ '0'..='9' => {
        .                           let literal_kind = self.number(c);
        .                           let suffix_start = self.len_consumed();
        .                           self.eat_literal_suffix();
      855 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
        .                       }
        .           
        .                       // One-symbol tokens.
      970 ( 0.00%)              ';' => Semi,
   18,704 ( 0.00%)              ',' => Comma,
    1,312 ( 0.00%)              '.' => Dot,
   19,762 ( 0.00%)              '(' => OpenParen,
   19,762 ( 0.00%)              ')' => CloseParen,
    1,324 ( 0.00%)              '{' => OpenBrace,
    1,324 ( 0.00%)              '}' => CloseBrace,
    1,436 ( 0.00%)              '[' => OpenBracket,
    1,432 ( 0.00%)              ']' => CloseBracket,
        .                       '@' => At,
      874 ( 0.00%)              '#' => Pound,
        .                       '~' => Tilde,
      194 ( 0.00%)              '?' => Question,
   36,932 ( 0.00%)              ':' => Colon,
       44 ( 0.00%)              '$' => Dollar,
      714 ( 0.00%)              '=' => Eq,
      254 ( 0.00%)              '!' => Bang,
      796 ( 0.00%)              '<' => Lt,
    1,410 ( 0.00%)              '>' => Gt,
      568 ( 0.00%)              '-' => Minus,
    1,102 ( 0.00%)              '&' => And,
       20 ( 0.00%)              '|' => Or,
       72 ( 0.00%)              '+' => Plus,
      226 ( 0.00%)              '*' => Star,
        .                       '^' => Caret,
        .                       '%' => Percent,
        .           
        .                       // Lifetime or character literal.
      480 ( 0.00%)              '\'' => self.lifetime_or_char(),
        .           
        .                       // String literal.
        .                       '"' => {
      540 ( 0.00%)                  let terminated = self.double_quoted_string();
        .                           let suffix_start = self.len_consumed();
      360 ( 0.00%)                  if terminated {
        .                               self.eat_literal_suffix();
        .                           }
        .                           let kind = Str { terminated };
      360 ( 0.00%)                  Literal { kind, suffix_start }
        .                       }
        .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
        .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
        .                       _ => Unknown,
        .                   };
        .                   Token::new(token_kind, self.len_consumed())
  877,005 ( 0.02%)      }
        .           
        .               fn line_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '/');
        .                   self.bump();
        .           
    2,112 ( 0.00%)          let doc_style = match self.first() {
        .                       // `//!` is an inner line doc comment.
        .                       '!' => Some(DocStyle::Inner),
        .                       // `////` (more than 3 slashes) is not considered a doc comment.
    2,496 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
        .                       _ => None,
        .                   };
        .           
   30,031 ( 0.00%)          self.eat_while(|c| c != '\n');
    2,832 ( 0.00%)          LineComment { doc_style }
        .               }
        .           
        .               fn block_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '*');
        .                   self.bump();
        .           
       24 ( 0.00%)          let doc_style = match self.first() {
        .                       // `/*!` is an inner block doc comment.
        .                       '!' => Some(DocStyle::Inner),
        .                       // `/***` (more than 2 stars) is not considered a doc comment.
        .                       // `/**/` is not considered a doc comment.
        .                       '*' if !matches!(self.second(), '*' | '/') => Some(DocStyle::Outer),
        .                       _ => None,
        .                   };
        .           
        .                   let mut depth = 1usize;
    1,776 ( 0.00%)          while let Some(c) = self.bump() {
        .                       match c {
        .                           '/' if self.first() == '*' => {
        .                               self.bump();
        .                               depth += 1;
        .                           }
       12 ( 0.00%)                  '*' if self.first() == '/' => {
        .                               self.bump();
       12 ( 0.00%)                      depth -= 1;
       12 ( 0.00%)                      if depth == 0 {
        .                                   // This block comment is closed, so for a construction like "/* */ */"
        .                                   // there will be a successfully parsed block comment "/* */"
        .                                   // and " */" will be processed separately.
        .                                   break;
        .                               }
        .                           }
        .                           _ => (),
        .                       }
        .                   }
        .           
       30 ( 0.00%)          BlockComment { doc_style, terminated: depth == 0 }
        .               }
        .           
        .               fn whitespace(&mut self) -> TokenKind {
        .                   debug_assert!(is_whitespace(self.prev()));
        .                   self.eat_while(is_whitespace);
   17,048 ( 0.00%)          Whitespace
        .               }
        .           
        .               fn raw_ident(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
        .                   // Eat "#" symbol.
        .                   self.bump();
        .                   // Eat the identifier part of RawIdent.
        .                   self.eat_identifier();
        .                   RawIdent
        .               }
        .           
  121,600 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   debug_assert!(is_id_start(self.prev()));
        .                   // Start is already eaten, eat the rest of identifier.
   48,640 ( 0.00%)          self.eat_while(is_id_continue);
        .                   // Known prefixes must have been handled earlier. So if
        .                   // we see a prefix here, it is definitely an unknown prefix.
   48,640 ( 0.00%)          match self.first() {
        .                       '#' | '"' | '\'' => UnknownPrefix,
   24,320 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
   24,320 ( 0.00%)              _ => Ident,
        .                   }
   97,280 ( 0.00%)      }
        .           
        .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   // Start is already eaten, eat the rest of identifier.
        .                   self.eat_while(|c| {
        .                       unicode_xid::UnicodeXID::is_xid_continue(c)
        .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
        .                           || c == '\u{200d}'
        .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
        .                       '#' | '"' | '\'' => UnknownPrefix,
        .                       _ => InvalidIdent,
        .                   }
        .               }
        .           
        .               fn number(&mut self, first_digit: char) -> LiteralKind {
        .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
        .                   let mut base = Base::Decimal;
      342 ( 0.00%)          if first_digit == '0' {
        .                       // Attempt to parse encoding base.
      247 ( 0.00%)              let has_digits = match self.first() {
        .                           'b' => {
        .                               base = Base::Binary;
        .                               self.bump();
        .                               self.eat_decimal_digits()
        .                           }
        .                           'o' => {
        .                               base = Base::Octal;
        .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
        .                               self.eat_decimal_digits()
        .                           }
        .                           'x' => {
        .                               base = Base::Hexadecimal;
        .                               self.bump();
        .                               self.eat_hexadecimal_digits()
        .                           }
        .                           // Not a base prefix.
      153 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
        .                               self.eat_decimal_digits();
        .                               true
        .                           }
        .                           // Just a 0.
        .                           _ => return Int { base, empty_int: false },
        .                       };
        .                       // Base prefix was provided, but there were no digits
        .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
        .                       if !has_digits {
        .                           return Int { base, empty_int: true };
        .                       }
        .                   } else {
        .                       // No base prefix, parse number in the usual way.
        .                       self.eat_decimal_digits();
        .                   };
        .           
      732 ( 0.00%)          match self.first() {
        .                       // Don't be greedy if this is actually an
        .                       // integer literal followed by field/method access or a range pattern
        .                       // (`0..2` and `12.foo()`)
       12 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
        .                           // might have stuff after the ., and if it does, it needs to start
        .                           // with a number
        .                           self.bump();
        .                           let mut empty_exponent = false;
        .                           if self.first().is_digit(10) {
        .                               self.eat_decimal_digits();
        .                               match self.first() {
        .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
        .                           self.bump();
        .                           let empty_exponent = !self.eat_float_exponent();
        .                           Float { base, empty_exponent }
        .                       }
        .                       _ => Int { base, empty_int: false },
        .                   }
        .               }
        .           
    1,120 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '\'');
        .           
      320 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
        .                       // It's surely not a lifetime.
        .                       false
        .                   } else {
        .                       // If the first symbol is valid for identifier, it can be a lifetime.
        .                       // Also check if it's a number for a better error reporting (so '0 will
        .                       // be reported as invalid lifetime and not as unterminated char literal).
        .                       is_id_start(self.first()) || self.first().is_digit(10)
        .                   };
-- line 604 ----------------------------------------
-- line 617 ----------------------------------------
        .                   // length greater than 1.
        .           
        .                   let starts_with_number = self.first().is_digit(10);
        .           
        .                   // Skip the literal contents.
        .                   // First symbol can be a number (which isn't a valid identifier start),
        .                   // so skip it without any checks.
        .                   self.bump();
      320 ( 0.00%)          self.eat_while(is_id_continue);
        .           
        .                   // Check if after skipping literal contents we've met a closing
        .                   // single quote (which means that user attempted to create a
        .                   // string with single quotes).
      320 ( 0.00%)          if self.first() == '\'' {
        .                       self.bump();
        .                       let kind = Char { terminated: true };
        .                       Literal { kind, suffix_start: self.len_consumed() }
        .                   } else {
      320 ( 0.00%)              Lifetime { starts_with_number }
        .                   }
      960 ( 0.00%)      }
        .           
        .               fn single_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '\'');
        .                   // Check if it's a one-symbol literal.
        .                   if self.second() == '\'' && self.first() != '\\' {
        .                       self.bump();
        .                       self.bump();
        .                       return true;
-- line 645 ----------------------------------------
-- line 677 ----------------------------------------
        .                   false
        .               }
        .           
        .               /// Eats double-quoted string and returns true
        .               /// if string is terminated.
        .               fn double_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '"');
        .                   while let Some(c) = self.bump() {
    7,942 ( 0.00%)              match c {
        .                           '"' => {
        .                               return true;
        .                           }
      216 ( 0.00%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
        .                               // Bump again to skip escaped character.
        .                               self.bump();
        .                           }
        .                           _ => (),
        .                       }
        .                   }
        .                   // End of file reached.
        .                   false
      180 ( 0.00%)      }
        .           
        .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
        .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
        .                   // Wrap the actual function to handle the error with too many hashes.
        .                   // This way, it eats the whole raw string.
        .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
        .                   // Only up to 65535 `#`s are allowed in raw strings
        .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
        .                           max_hashes = n_end_hashes;
        .                       }
        .                   }
        .               }
        .           
        .               fn eat_decimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
      412 ( 0.00%)              match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
      618 ( 0.00%)                  '0'..='9' => {
        .                               has_digits = true;
        .                               self.bump();
        .                           }
        .                           _ => break,
        .                       }
        .                   }
        .                   has_digits
      252 ( 0.00%)      }
        .           
        .               fn eat_hexadecimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
        .                       match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
-- line 801 ----------------------------------------
-- line 816 ----------------------------------------
        .                   if self.first() == '-' || self.first() == '+' {
        .                       self.bump();
        .                   }
        .                   self.eat_decimal_digits()
        .               }
        .           
        .               // Eats the suffix of the literal, e.g. "_u8".
        .               fn eat_literal_suffix(&mut self) {
      702 ( 0.00%)          self.eat_identifier();
        .               }
        .           
        .               // Eats the identifier.
    1,053 ( 0.00%)      fn eat_identifier(&mut self) {
        .                   if !is_id_start(self.first()) {
        .                       return;
        .                   }
        .                   self.bump();
        .           
        5 ( 0.00%)          self.eat_while(is_id_continue);
    1,400 ( 0.00%)      }
        .           }

1,268,896 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
   40,704 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
   18,752 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
      698 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
      538 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
      318 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
      807 ( 0.00%)      pub prev_token: Token,
      367 ( 0.00%)      pub capture_cfg: bool,
      783 ( 0.00%)      restrictions: Restrictions,
      636 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
      636 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
      636 ( 0.00%)      unmatched_angle_bracket_count: u32,
      954 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
      318 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
      318 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
    1,383 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
    1,272 ( 0.00%)      capturing: Capturing,
      318 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
    3,019 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
   54,965 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
   12,540 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
    3,998 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
   24,895 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
    6,712 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
   13,424 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    2,975 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   12,978 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
  929,820 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
  469,919 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   11,788 ( 0.00%)                  self.frame.open_delim = true;
   58,940 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
  901,954 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
   48,340 ( 0.00%)              } else if !self.frame.close_delim {
   11,779 ( 0.00%)                  self.frame.close_delim = true;
   58,895 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   23,554 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  153,101 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
   11,052 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  178,546 ( 0.00%)              match tree {
        .                           TokenTree::Token(token) => {
  619,880 ( 0.01%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
  619,880 ( 0.01%)      }
        .           
   13,930 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
    4,179 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
        .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
    6,965 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
        .                   for ch in data.as_str().chars() {
        .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
        .                   self.next()
   12,537 ( 0.00%)      }
        .           }
        .           
   15,060 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
   12,048 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
        9 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
      468 ( 0.00%)      Some(match token.kind {
      936 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
      936 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
      936 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
    1,638 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
      468 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    1,638 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
    1,170 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
    8,330 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
      595 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    1,190 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
   18,445 ( 0.00%)          let mut parser = Parser {
        .                       sess,
      595 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
      595 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
    3,570 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
    1,190 ( 0.00%)          parser.bump();
        .           
        .                   parser
    5,355 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
  453,252 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
    5,572 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  222,447 ( 0.01%)                  self.token_cursor.next()
        .                       };
  302,168 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
   75,542 ( 0.00%)              self.token_cursor.break_last_token = false;
  302,168 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    2,408 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
  261,945 ( 0.01%)              if matches!(
  151,084 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
  302,168 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  178,560 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   19,840 ( 0.00%)          if self.expected_tokens.is_empty() {
    1,980 ( 0.00%)              if self.token == *t {
    1,650 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  234,120 ( 0.01%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  297,600 ( 0.01%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  240,828 ( 0.01%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   40,138 ( 0.00%)          if edible.contains(&self.token.kind) {
   58,674 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  301,035 ( 0.01%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   88,434 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   66,636 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  155,330 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   22,190 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  133,140 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   88,760 ( 0.00%)          self.bump();
        .                   Ok(ident)
  221,900 ( 0.01%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
1,765,260 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
  769,309 ( 0.02%)          let is_present = self.token == *tok;
  525,842 ( 0.01%)          if !is_present {
1,046,590 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
1,765,260 ( 0.04%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
      276 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
  327,757 ( 0.01%)          let is_present = self.check(tok);
  218,050 ( 0.01%)          if is_present {
   47,920 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
      345 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
   19,320 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
    4,842 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
  128,406 ( 0.00%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
   26,805 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
   25,404 ( 0.00%)          if self.check_keyword(kw) {
    3,263 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
   26,805 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
    5,904 ( 0.00%)          if self.token.is_keyword(kw) {
    1,110 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
      730 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
      584 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
   20,872 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   10,436 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
   23,481 ( 0.00%)      }
        .           
   79,716 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   27,876 ( 0.00%)          if ok {
        .                       true
        .                   } else {
    5,880 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
   79,716 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
    4,102 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   43,908 ( 0.00%)      fn check_path(&mut self) -> bool {
   90,612 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   54,885 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
    2,606 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
    1,760 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
    3,024 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    1,680 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
    3,024 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
    3,988 ( 0.00%)          self.check_or_expected(
    1,994 ( 0.00%)              self.token.is_like_plus(),
    1,994 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  149,352 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   87,122 ( 0.00%)          if self.token.kind == expected {
    2,158 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   56,835 ( 0.00%)          match self.token.kind.break_two_token_op() {
      126 ( 0.00%)              Some((first, second)) if first == expected => {
       72 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
       90 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
      162 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
       18 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
      252 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   34,047 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  157,410 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
      824 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
    2,004 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
       18 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
    2,278 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   35,294 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   23,271 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    1,504 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    1,674 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
    2,278 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    2,238 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    1,119 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
      746 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
   57,111 ( 0.00%)              TokenExpectType::Expect => self.check(k),
       69 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
   47,979 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
   20,932 ( 0.00%)              if let Some(ref t) = sep.sep {
   48,090 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
   70,639 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
   19,016 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
   10,464 ( 0.00%)              let t = f(self)?;
    1,433 ( 0.00%)              v.push(t);
        .                   }
        .           
   38,688 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   39,413 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
   92,620 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   28,614 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   10,062 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
   84,837 ( 0.00%)          Ok((val, trailing))
   74,096 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
   28,220 ( 0.00%)          self.expect(bra)?;
   74,096 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
    9,622 ( 0.00%)              &token::OpenDelim(delim),
    9,982 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
  982,280 ( 0.02%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
  453,360 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
  302,240 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
   75,560 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
   75,560 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
  604,336 ( 0.01%)      pub fn bump(&mut self) {
  302,168 ( 0.01%)          let next_token = self.next_tok(self.token.span);
  453,252 ( 0.01%)          self.bump_with(next_token);
  604,336 ( 0.01%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
      416 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    2,426 ( 0.00%)          if dist == 0 {
      658 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   33,537 ( 0.00%)          let frame = &self.token_cursor.frame;
   42,816 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  115,830 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  147,671 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  197,698 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
   62,921 ( 0.00%)                      Some(tree) => match tree {
   31,073 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
    2,972 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   67,702 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
    1,810 ( 0.00%)          let mut token = Token::dummy();
    5,716 ( 0.00%)          while i < dist {
   15,763 ( 0.00%)              token = cursor.next().0;
    6,352 ( 0.00%)              if matches!(
    3,830 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
    2,940 ( 0.00%)              i += 1;
        .                   }
       83 ( 0.00%)          return looker(&token);
      468 ( 0.00%)      }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
    8,280 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    2,170 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
    8,280 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
      860 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
    3,440 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
    8,112 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
    2,321 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
      215 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
   14,196 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
        .               fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
      660 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
       24 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
       24 ( 0.00%)      }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
       50 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
       75 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
      554 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    1,329 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
    5,985 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
    5,320 ( 0.00%)          Ok(
    4,141 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
      612 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
      612 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
    1,848 ( 0.00%)                  match self.parse_token_tree() {
    2,310 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
      924 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
      406 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
        .                               let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
        .                               let expr = self.parse_expr_force_collect()?;
        .                               let span = expr.span;
        .           
        .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
        .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
    4,655 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
   32,607 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
   20,410 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
    7,560 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
    4,319 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
   10,876 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
    5,610 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
    1,148 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    1,148 ( 0.00%)                  let span = frame.span;
      574 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
    1,148 ( 0.00%)                  self.bump();
    2,870 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
      742 ( 0.00%)                  self.bump();
    1,855 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
    6,615 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
        .               }
        .           
      104 ( 0.00%)      pub fn parse_tokens(&mut self) -> TokenStream {
        .                   let mut result = Vec::new();
        .                   loop {
      506 ( 0.00%)              match self.token.kind {
        .                           token::Eof | token::CloseDelim(..) => break,
      249 ( 0.00%)                  _ => result.push(self.parse_token_tree().into()),
        .                       }
        .                   }
       78 ( 0.00%)          TokenStream::new(result)
      104 ( 0.00%)      }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   10,761 ( 0.00%)          let old = self.restrictions;
   11,432 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   11,757 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
    9,904 ( 0.00%)      fn is_crate_vis(&self) -> bool {
    6,190 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   11,142 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
    9,210 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    1,842 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
      921 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
    3,684 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
      838 ( 0.00%)              return Ok(Visibility {
    2,514 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
       83 ( 0.00%)          let lo = self.prev_token.span;
        .           
      415 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
       18 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
        6 ( 0.00%)                  self.bump(); // `(`
        4 ( 0.00%)                  self.bump(); // `crate`
        6 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
        2 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
        .                           return Ok(Visibility {
        6 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
        .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
        .                           // Parse `pub(in path)`.
        .                           self.bump(); // `(`
        .                           self.bump(); // `in`
        .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
      243 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
    8,289 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
      286 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
    1,240 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
      144 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
    1,240 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
  170,472 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   85,236 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
  145,492 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
  110,529 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
    7,304 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
    3,652 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
    3,652 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
    7,304 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

  503,587 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs
--------------------------------------------------------------------------------
Ir                  

-- line 44 ----------------------------------------
         .               }
         .               Some((start, end))
         .           }
         .           
         .           macro_rules! bit_relations_inherent_impls {
         .               () => {
         .                   /// Sets `self = self | other` and returns `true` if `self` changed
         .                   /// (i.e., if new bits were added).
 1,442,304 ( 0.03%)          pub fn union<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::union(self, other)
 1,098,684 ( 0.03%)          }
         .           
         .                   /// Sets `self = self - other` and returns `true` if `self` changed.
         .                   /// (i.e., if any bits were removed).
    84,780 ( 0.00%)          pub fn subtract<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::subtract(self, other)
    84,780 ( 0.00%)          }
         .           
         .                   /// Sets `self = self & other` and return `true` if `self` changed.
         .                   /// (i.e., if any bits were removed).
         .                   pub fn intersect<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::intersect(self, other)
-- line 74 ----------------------------------------
-- line 92 ----------------------------------------
         .               domain_size: usize,
         .               words: Vec<Word>,
         .               marker: PhantomData<T>,
         .           }
         .           
         .           impl<T> BitSet<T> {
         .               /// Gets the domain size.
         .               pub fn domain_size(&self) -> usize {
       590 ( 0.00%)          self.domain_size
         .               }
         .           }
         .           
         .           impl<T: Idx> BitSet<T> {
         .               /// Creates a new, empty bitset with a given `domain_size`.
         .               #[inline]
         .               pub fn new_empty(domain_size: usize) -> BitSet<T> {
         .                   let num_words = num_words(domain_size);
    88,795 ( 0.00%)          BitSet { domain_size, words: vec![0; num_words], marker: PhantomData }
         .               }
         .           
         .               /// Creates a new, filled bitset with a given `domain_size`.
         .               #[inline]
         .               pub fn new_filled(domain_size: usize) -> BitSet<T> {
         .                   let num_words = num_words(domain_size);
     3,330 ( 0.00%)          let mut result = BitSet { domain_size, words: vec![!0; num_words], marker: PhantomData };
         .                   result.clear_excess_bits();
         .                   result
         .               }
         .           
         .               /// Clear all elements.
         .               #[inline]
         .               pub fn clear(&mut self) {
         .                   for word in &mut self.words {
     1,476 ( 0.00%)              *word = 0;
         .                   }
         .               }
         .           
         .               /// Clear excess bits in the final word.
         .               fn clear_excess_bits(&mut self) {
       889 ( 0.00%)          let num_bits_in_final_word = self.domain_size % WORD_BITS;
     3,110 ( 0.00%)          if num_bits_in_final_word > 0 {
     2,221 ( 0.00%)              let mask = (1 << num_bits_in_final_word) - 1;
     5,331 ( 0.00%)              let final_word_idx = self.words.len() - 1;
     1,555 ( 0.00%)              self.words[final_word_idx] &= mask;
         .                   }
         .               }
         .           
         .               /// Count the number of set bits in the set.
         .               pub fn count(&self) -> usize {
         .                   self.words.iter().map(|e| e.count_ones() as usize).sum()
         .               }
         .           
         .               /// Returns `true` if `self` contains `elem`.
         .               #[inline]
         .               pub fn contains(&self, elem: T) -> bool {
   787,899 ( 0.02%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
   944,855 ( 0.02%)          (self.words[word_index] & mask) != 0
         .               }
         .           
         .               /// Is `self` is a (non-strict) superset of `other`?
         .               #[inline]
         .               pub fn superset(&self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
         .                   self.words.iter().zip(&other.words).all(|(a, b)| (a & b) == *b)
         .               }
         .           
         .               /// Is the set empty?
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
         5 ( 0.00%)          self.words.iter().all(|a| *a == 0)
         .               }
         .           
         .               /// Insert `elem`. Returns whether the set has changed.
         .               #[inline]
         .               pub fn insert(&mut self, elem: T) -> bool {
 4,387,188 ( 0.10%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
         .                   let word_ref = &mut self.words[word_index];
 1,858,595 ( 0.04%)          let word = *word_ref;
 3,717,190 ( 0.09%)          let new_word = word | mask;
 2,193,909 ( 0.05%)          *word_ref = new_word;
 1,983,764 ( 0.05%)          new_word != word
         .               }
         .           
         .               #[inline]
         .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
         .                   let Some((start, end)) = inclusive_start_end(elems, self.domain_size) else {
         .                       return;
         .                   };
         .           
-- line 182 ----------------------------------------
-- line 199 ----------------------------------------
         .                   } else {
         .                       self.words[start_word_index] |= end_mask | (end_mask - start_mask);
         .                   }
         .               }
         .           
         .               /// Sets all bits to true.
         .               pub fn insert_all(&mut self) {
         .                   for word in &mut self.words {
     1,778 ( 0.00%)              *word = !0;
         .                   }
         .                   self.clear_excess_bits();
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn remove(&mut self, elem: T) -> bool {
   985,386 ( 0.02%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
         .                   let word_ref = &mut self.words[word_index];
    26,234 ( 0.00%)          let word = *word_ref;
 1,162,977 ( 0.03%)          let new_word = word & !mask;
   575,833 ( 0.01%)          *word_ref = new_word;
    52,468 ( 0.00%)          new_word != word
         .               }
         .           
         .               /// Gets a slice of the underlying words.
         .               pub fn words(&self) -> &[Word] {
         .                   &self.words
         .               }
         .           
         .               /// Iterates over the indices of set bits in a sorted order.
-- line 229 ----------------------------------------
-- line 308 ----------------------------------------
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           // dense REL dense
         .           impl<T: Idx> BitRelations<BitSet<T>> for BitSet<T> {
         .               fn union(&mut self, other: &BitSet<T>) -> bool {
 1,030,860 ( 0.02%)          assert_eq!(self.domain_size, other.domain_size);
 5,753,513 ( 0.13%)          bitwise(&mut self.words, &other.words, |a, b| a | b)
         .               }
         .           
         .               fn subtract(&mut self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
     3,636 ( 0.00%)          bitwise(&mut self.words, &other.words, |a, b| a & !b)
         .               }
         .           
         .               fn intersect(&mut self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
         .                   bitwise(&mut self.words, &other.words, |a, b| a & b)
         .               }
         .           }
         .           
         .           // Applies a function to mutate a bitset, and returns true if any
         .           // of the applications return true
         .           fn sequential_update<T: Idx>(
         .               mut self_update: impl FnMut(T) -> bool,
         .               it: impl Iterator<Item = T>,
         .           ) -> bool {
         .               let mut changed = false;
    42,567 ( 0.00%)      for elem in it {
   127,701 ( 0.00%)          changed |= self_update(elem);
         .               }
         .               changed
    66,764 ( 0.00%)  }
         .           
         .           // Optimization of intersection for SparseBitSet that's generic
         .           // over the RHS
         .           fn sparse_intersect<T: Idx>(
         .               set: &mut SparseBitSet<T>,
         .               other_contains: impl Fn(&T) -> bool,
         .           ) -> bool {
         .               let size = set.elems.len();
-- line 350 ----------------------------------------
-- line 413 ----------------------------------------
         .                       HybridBitSet::Dense(dense) => dense.intersect(other),
         .                   }
         .               }
         .           }
         .           
         .           // dense REL hybrid
         .           impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {
         .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
    67,824 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size());
    33,912 ( 0.00%)          match other {
         .                       HybridBitSet::Sparse(sparse) => {
         .                           sequential_update(|elem| self.insert(elem), sparse.iter().cloned())
         .                       }
         .                       HybridBitSet::Dense(dense) => self.union(dense),
         .                   }
         .               }
         .           
         .               fn subtract(&mut self, other: &HybridBitSet<T>) -> bool {
    67,824 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size());
    33,912 ( 0.00%)          match other {
         .                       HybridBitSet::Sparse(sparse) => {
         .                           sequential_update(|elem| self.remove(elem), sparse.iter().cloned())
         .                       }
         .                       HybridBitSet::Dense(dense) => self.subtract(dense),
         .                   }
         .               }
         .           
         .               fn intersect(&mut self, other: &HybridBitSet<T>) -> bool {
-- line 440 ----------------------------------------
-- line 455 ----------------------------------------
         .                       HybridBitSet::Dense(dense) => self.intersect(dense),
         .                   }
         .               }
         .           }
         .           
         .           // hybrid REL hybrid
         .           impl<T: Idx> BitRelations<HybridBitSet<T>> for HybridBitSet<T> {
         .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
     4,602 ( 0.00%)          assert_eq!(self.domain_size(), other.domain_size());
     1,534 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(_) => {
     1,534 ( 0.00%)                  match other {
         .                               HybridBitSet::Sparse(other_sparse) => {
         .                                   // Both sets are sparse. Add the elements in
         .                                   // `other_sparse` to `self` one at a time. This
         .                                   // may or may not cause `self` to be densified.
         .                                   let mut changed = false;
         .                                   for elem in other_sparse.iter() {
     4,674 ( 0.00%)                              changed |= self.insert(*elem);
         .                                   }
         .                                   changed
         .                               }
         .           
         .                               HybridBitSet::Dense(other_dense) => self.union(other_dense),
         .                           }
         .                       }
         .           
-- line 481 ----------------------------------------
-- line 508 ----------------------------------------
         .                           HybridBitSet::Dense(other_dense) => self_dense.intersect(other_dense),
         .                       },
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for BitSet<T> {
         .               fn clone(&self) -> Self {
        60 ( 0.00%)          BitSet { domain_size: self.domain_size, words: self.words.clone(), marker: PhantomData }
         .               }
         .           
 2,137,212 ( 0.05%)      fn clone_from(&mut self, from: &Self) {
 1,261,821 ( 0.03%)          if self.domain_size != from.domain_size {
         .                       self.words.resize(from.domain_size, 0);
         .                       self.domain_size = from.domain_size;
         .                   }
         .           
         .                   self.words.copy_from_slice(&from.words);
         .               }
         .           }
         .           
-- line 528 ----------------------------------------
-- line 599 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, T: Idx> Iterator for BitIter<'a, T> {
         .               type Item = T;
         .               fn next(&mut self) -> Option<T> {
         .                   loop {
   278,952 ( 0.01%)              if self.word != 0 {
         .                           // Get the position of the next set bit in the current word,
         .                           // then clear the bit.
         .                           let bit_pos = self.word.trailing_zeros() as usize;
         .                           let bit = 1 << bit_pos;
         .                           self.word ^= bit;
   154,695 ( 0.00%)                  return Some(T::new(bit_pos + self.offset));
         .                       }
         .           
         .                       // Move onto the next word. `wrapping_add()` is needed to handle
         .                       // the degenerate initial value given to `offset` in `new()`.
         .                       let word = self.iter.next()?;
    14,895 ( 0.00%)              self.word = *word;
         .                       self.offset = self.offset.wrapping_add(WORD_BITS);
         .                   }
         .               }
         .           }
         .           
         .           #[inline]
         .           fn bitwise<Op>(out_vec: &mut [Word], in_vec: &[Word], op: Op) -> bool
         .           where
         .               Op: Fn(Word, Word) -> Word,
         .           {
 1,376,600 ( 0.03%)      assert_eq!(out_vec.len(), in_vec.len());
         .               let mut changed = 0;
   600,632 ( 0.01%)      for (out_elem, in_elem) in iter::zip(out_vec, in_vec) {
 6,073,506 ( 0.14%)          let old_val = *out_elem;
 5,412,820 ( 0.13%)          let new_val = op(old_val, *in_elem);
 5,754,725 ( 0.13%)          *out_elem = new_val;
         .                   // This is essentially equivalent to a != with changed being a bool, but
         .                   // in practice this code gets auto-vectorized by the compiler for most
         .                   // operators. Using != here causes us to generate quite poor code as the
         .                   // compiler tries to go back to a boolean on each loop iteration.
12,147,834 ( 0.28%)          changed |= old_val ^ new_val;
         .               }
         .               changed != 0
         .           }
         .           
         .           const SPARSE_MAX: usize = 8;
         .           
         .           /// A fixed-size bitset type with a sparse representation and a maximum of
         .           /// `SPARSE_MAX` elements. The elements are stored as a sorted `ArrayVec` with
         .           /// no duplicates.
         .           ///
         .           /// This type is used by `HybridBitSet`; do not use directly.
         .           #[derive(Clone, Debug)]
         .           pub struct SparseBitSet<T> {
    24,670 ( 0.00%)      domain_size: usize,
         .               elems: ArrayVec<T, SPARSE_MAX>,
         .           }
         .           
         .           impl<T: Idx> SparseBitSet<T> {
         .               fn new_empty(domain_size: usize) -> Self {
         .                   SparseBitSet { domain_size, elems: ArrayVec::new() }
         .               }
         .           
         .               fn len(&self) -> usize {
   100,146 ( 0.00%)          self.elems.len()
         .               }
         .           
         .               fn is_empty(&self) -> bool {
         .                   self.elems.len() == 0
         .               }
         .           
         .               fn contains(&self, elem: T) -> bool {
     1,149 ( 0.00%)          assert!(elem.index() < self.domain_size);
         .                   self.elems.contains(&elem)
         .               }
         .           
         .               fn insert(&mut self, elem: T) -> bool {
    99,416 ( 0.00%)          assert!(elem.index() < self.domain_size);
    49,852 ( 0.00%)          let changed = if let Some(i) = self.elems.iter().position(|&e| e.index() >= elem.index()) {
    24,479 ( 0.00%)              if self.elems[i] == elem {
         .                           // `elem` is already in the set.
         .                           false
         .                       } else {
         .                           // `elem` is smaller than one or more existing elements.
         .                           self.elems.insert(i, elem);
         .                           true
         .                       }
         .                   } else {
         .                       // `elem` is larger than all existing elements.
         .                       self.elems.push(elem);
         .                       true
         .                   };
    99,416 ( 0.00%)          assert!(self.len() <= SPARSE_MAX);
         .                   changed
         .               }
         .           
         .               fn remove(&mut self, elem: T) -> bool {
    82,770 ( 0.00%)          assert!(elem.index() < self.domain_size);
         .                   if let Some(i) = self.elems.iter().position(|&e| e == elem) {
    26,620 ( 0.00%)              self.elems.remove(i);
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               fn to_dense(&self) -> BitSet<T> {
         .                   let mut dense = BitSet::new_empty(self.domain_size);
         .                   for elem in self.elems.iter() {
     2,880 ( 0.00%)              dense.insert(*elem);
         .                   }
         .                   dense
         .               }
         .           
         .               fn iter(&self) -> slice::Iter<'_, T> {
     8,126 ( 0.00%)          self.elems.iter()
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           impl<T: Idx + Ord> SparseBitSet<T> {
         .               fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {
         .                   let mut last_leq = None;
-- line 723 ----------------------------------------
-- line 738 ----------------------------------------
         .           /// number of elements, but a large `domain_size`, and are cleared frequently.
         .           ///
         .           /// `T` is an index type, typically a newtyped `usize` wrapper, but it can also
         .           /// just be `usize`.
         .           ///
         .           /// All operations that involve an element will panic if the element is equal
         .           /// to or greater than the domain size. All operations that involve two bitsets
         .           /// will panic if the bitsets have differing domain sizes.
   226,666 ( 0.01%)  #[derive(Clone)]
         .           pub enum HybridBitSet<T> {
         .               Sparse(SparseBitSet<T>),
         .               Dense(BitSet<T>),
         .           }
         .           
         .           impl<T: Idx> fmt::Debug for HybridBitSet<T> {
         .               fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
-- line 754 ----------------------------------------
-- line 755 ----------------------------------------
         .                       Self::Sparse(b) => b.fmt(w),
         .                       Self::Dense(b) => b.fmt(w),
         .                   }
         .               }
         .           }
         .           
         .           impl<T: Idx> HybridBitSet<T> {
         .               pub fn new_empty(domain_size: usize) -> Self {
       968 ( 0.00%)          HybridBitSet::Sparse(SparseBitSet::new_empty(domain_size))
         .               }
         .           
         .               pub fn domain_size(&self) -> usize {
         .                   match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.domain_size,
         .                       HybridBitSet::Dense(dense) => dense.domain_size,
         .                   }
         .               }
         .           
         .               pub fn clear(&mut self) {
         .                   let domain_size = self.domain_size();
     4,448 ( 0.00%)          *self = HybridBitSet::new_empty(domain_size);
         .               }
         .           
         .               pub fn contains(&self, elem: T) -> bool {
       108 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.contains(elem),
         .                       HybridBitSet::Dense(dense) => dense.contains(elem),
         .                   }
         .               }
         .           
         .               pub fn superset(&self, other: &HybridBitSet<T>) -> bool {
         .                   match (self, other) {
         .                       (HybridBitSet::Dense(self_dense), HybridBitSet::Dense(other_dense)) => {
-- line 787 ----------------------------------------
-- line 799 ----------------------------------------
         .                       HybridBitSet::Sparse(sparse) => sparse.is_empty(),
         .                       HybridBitSet::Dense(dense) => dense.is_empty(),
         .                   }
         .               }
         .           
         .               /// Returns the previous element present in the bitset from `elem`,
         .               /// inclusively of elem. That is, will return `Some(elem)` if elem is in the
         .               /// bitset.
     8,126 ( 0.00%)      pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T>
         .               where
         .                   T: Ord,
         .               {
     8,126 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.last_set_in(range),
         .                       HybridBitSet::Dense(dense) => dense.last_set_in(range),
         .                   }
    12,189 ( 0.00%)      }
         .           
   529,551 ( 0.01%)      pub fn insert(&mut self, elem: T) -> bool {
         .                   // No need to check `elem` against `self.domain_size` here because all
         .                   // the match cases check it, one way or another.
   117,678 ( 0.00%)          match self {
   100,146 ( 0.00%)              HybridBitSet::Sparse(sparse) if sparse.len() < SPARSE_MAX => {
         .                           // The set is sparse and has space for `elem`.
         .                           sparse.insert(elem)
         .                       }
         .                       HybridBitSet::Sparse(sparse) if sparse.contains(elem) => {
         .                           // The set is sparse and does not have space for `elem`, but
         .                           // that doesn't matter because `elem` is already present.
         .                           false
         .                       }
         .                       HybridBitSet::Sparse(sparse) => {
         .                           // The set is sparse and full. Convert to a dense set.
         .                           let mut dense = sparse.to_dense();
         .                           let changed = dense.insert(elem);
       360 ( 0.00%)                  assert!(changed);
     2,160 ( 0.00%)                  *self = HybridBitSet::Dense(dense);
         .                           changed
         .                       }
         .                       HybridBitSet::Dense(dense) => dense.insert(elem),
         .                   }
   470,712 ( 0.01%)      }
         .           
         .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
         .                   // No need to check `elem` against `self.domain_size` here because all
         .                   // the match cases check it, one way or another.
         .                   let start = match elems.start_bound().cloned() {
         .                       Bound::Included(start) => start.index(),
         .                       Bound::Excluded(start) => start.index() + 1,
         .                       Bound::Unbounded => 0,
-- line 848 ----------------------------------------
-- line 879 ----------------------------------------
         .                   match self {
         .                       HybridBitSet::Sparse(_) => {
         .                           *self = HybridBitSet::Dense(BitSet::new_filled(domain_size));
         .                       }
         .                       HybridBitSet::Dense(dense) => dense.insert_all(),
         .                   }
         .               }
         .           
    41,110 ( 0.00%)      pub fn remove(&mut self, elem: T) -> bool {
         .                   // Note: we currently don't bother going from Dense back to Sparse.
    82,898 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.remove(elem),
         .                       HybridBitSet::Dense(dense) => dense.remove(elem),
         .                   }
    82,220 ( 0.00%)      }
         .           
         .               /// Converts to a dense set, consuming itself in the process.
         .               pub fn to_dense(self) -> BitSet<T> {
         .                   match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.to_dense(),
         .                       HybridBitSet::Dense(dense) => dense,
         .                   }
         .               }
         .           
         .               pub fn iter(&self) -> HybridIter<'_, T> {
     3,756 ( 0.00%)          match self {
     5,255 ( 0.00%)              HybridBitSet::Sparse(sparse) => HybridIter::Sparse(sparse.iter()),
         .                       HybridBitSet::Dense(dense) => HybridIter::Dense(dense.iter()),
         .                   }
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           pub enum HybridIter<'a, T: Idx> {
-- line 913 ----------------------------------------
-- line 935 ----------------------------------------
         .           /// to or greater than the domain size.
         .           #[derive(Clone, Debug, PartialEq)]
         .           pub struct GrowableBitSet<T: Idx> {
         .               bit_set: BitSet<T>,
         .           }
         .           
         .           impl<T: Idx> GrowableBitSet<T> {
         .               /// Ensure that the set can hold at least `min_domain_size` elements.
   525,098 ( 0.01%)      pub fn ensure(&mut self, min_domain_size: usize) {
   150,028 ( 0.00%)          if self.bit_set.domain_size < min_domain_size {
         6 ( 0.00%)              self.bit_set.domain_size = min_domain_size;
         .                   }
         .           
         .                   let min_num_words = num_words(min_domain_size);
   300,056 ( 0.01%)          if self.bit_set.words.len() < min_num_words {
         .                       self.bit_set.words.resize(min_num_words, 0)
         .                   }
   450,084 ( 0.01%)      }
         .           
         .               pub fn new_empty() -> GrowableBitSet<T> {
       156 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(0) }
         .               }
         .           
         .               pub fn with_capacity(capacity: usize) -> GrowableBitSet<T> {
         8 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(capacity) }
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn insert(&mut self, elem: T) -> bool {
   375,034 ( 0.01%)          self.ensure(elem.index() + 1);
         .                   self.bit_set.insert(elem)
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn remove(&mut self, elem: T) -> bool {
         3 ( 0.00%)          self.ensure(elem.index() + 1);
         .                   self.bit_set.remove(elem)
         .               }
         .           
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
         .                   self.bit_set.is_empty()
         .               }
         .           
         .               #[inline]
         .               pub fn contains(&self, elem: T) -> bool {
         .                   let (word_index, mask) = word_index_and_mask(elem);
       384 ( 0.00%)          self.bit_set.words.get(word_index).map_or(false, |word| (word & mask) != 0)
         .               }
         .           }
         .           
         .           /// A fixed-size 2D bit matrix type with a dense representation.
         .           ///
         .           /// `R` and `C` are index types used to identify rows and columns respectively;
         .           /// typically newtyped `usize` wrappers, but they can also just be `usize`.
         .           ///
-- line 992 ----------------------------------------
-- line 1001 ----------------------------------------
         .           }
         .           
         .           impl<R: Idx, C: Idx> BitMatrix<R, C> {
         .               /// Creates a new `rows x columns` matrix, initially empty.
         .               pub fn new(num_rows: usize, num_columns: usize) -> BitMatrix<R, C> {
         .                   // For every element, we need one bit for every other
         .                   // element. Round up to an even number of words.
         .                   let words_per_row = num_words(num_columns);
     3,815 ( 0.00%)          BitMatrix {
         .                       num_rows,
         .                       num_columns,
     2,445 ( 0.00%)              words: vec![0; num_rows * words_per_row],
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Creates a new matrix, with `row` used as the value for every row.
         .               pub fn from_row_n(row: &BitSet<C>, num_rows: usize) -> BitMatrix<R, C> {
         .                   let num_columns = row.domain_size();
         .                   let words_per_row = num_words(num_columns);
-- line 1020 ----------------------------------------
-- line 1029 ----------------------------------------
         .           
         .               pub fn rows(&self) -> impl Iterator<Item = R> {
         .                   (0..self.num_rows).map(R::new)
         .               }
         .           
         .               /// The range of bits for a given row.
         .               fn range(&self, row: R) -> (usize, usize) {
         .                   let words_per_row = num_words(self.num_columns);
    44,424 ( 0.00%)          let start = row.index() * words_per_row;
    37,486 ( 0.00%)          (start, start + words_per_row)
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to true. Put another way, insert
         .               /// `column` to the bitset for `row`.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn insert(&mut self, row: R, column: C) -> bool {
    23,266 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
         .                   let (start, _) = self.range(row);
         .                   let (word_index, mask) = word_index_and_mask(column);
         .                   let words = &mut self.words[..];
    23,610 ( 0.00%)          let word = words[start + word_index];
     9,444 ( 0.00%)          let new_word = word | mask;
     4,722 ( 0.00%)          words[start + word_index] = new_word;
     9,444 ( 0.00%)          word != new_word
         .               }
         .           
         .               /// Do the bits from `row` contain `column`? Put another way, is
         .               /// the matrix cell at `(row, column)` true?  Put yet another way,
         .               /// if the matrix represents (transitive) reachability, can
         .               /// `row` reach `column`?
     2,216 ( 0.00%)      pub fn contains(&self, row: R, column: C) -> bool {
    11,080 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
         .                   let (start, _) = self.range(row);
         .                   let (word_index, mask) = word_index_and_mask(column);
    11,080 ( 0.00%)          (self.words[start + word_index] & mask) != 0
     4,432 ( 0.00%)      }
         .           
         .               /// Returns those indices that are true in rows `a` and `b`. This
         .               /// is an *O*(*n*) operation where *n* is the number of elements
         .               /// (somewhat independent from the actual size of the
         .               /// intersection, in particular).
         .               pub fn intersect_rows(&self, row1: R, row2: R) -> Vec<C> {
         .                   assert!(row1.index() < self.num_rows && row2.index() < self.num_rows);
         .                   let (row1_start, row1_end) = self.range(row1);
-- line 1073 ----------------------------------------
-- line 1090 ----------------------------------------
         .           
         .               /// Adds the bits from row `read` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               ///
         .               /// This is used when computing transitive reachability because if
         .               /// you have an edge `write -> read`, because in that case
         .               /// `write` can reach everything that `read` can (and
         .               /// potentially more).
     4,378 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
    23,610 ( 0.00%)          assert!(read.index() < self.num_rows && write.index() < self.num_rows);
     4,722 ( 0.00%)          let (read_start, read_end) = self.range(read);
         .                   let (write_start, write_end) = self.range(write);
         .                   let words = &mut self.words[..];
         .                   let mut changed = false;
         .                   for (read_index, write_index) in iter::zip(read_start..read_end, write_start..write_end) {
    26,362 ( 0.00%)              let word = words[write_index];
    14,166 ( 0.00%)              let new_word = word | words[read_index];
     4,722 ( 0.00%)              words[write_index] = new_word;
    23,954 ( 0.00%)              changed |= word != new_word;
         .                   }
         .                   changed
    13,134 ( 0.00%)      }
         .           
         .               /// Adds the bits from `with` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               pub fn union_row_with(&mut self, with: &BitSet<C>, write: R) -> bool {
         .                   assert!(write.index() < self.num_rows);
         .                   assert_eq!(with.domain_size(), self.num_columns);
         .                   let (write_start, write_end) = self.range(write);
         .                   let mut changed = false;
-- line 1119 ----------------------------------------
-- line 1209 ----------------------------------------
         .               /// Creates a new empty sparse bit matrix with no rows or columns.
         .               pub fn new(num_columns: usize) -> Self {
         .                   Self { num_columns, rows: IndexVec::new() }
         .               }
         .           
         .               fn ensure_row(&mut self, row: R) -> &mut HybridBitSet<C> {
         .                   // Instantiate any missing rows up to and including row `row` with an empty HybridBitSet.
         .                   // Then replace row `row` with a full HybridBitSet if necessary.
     2,466 ( 0.00%)          self.rows.get_or_insert_with(row, || HybridBitSet::new_empty(self.num_columns))
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to true. Put another way, insert
         .               /// `column` to the bitset for `row`.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn insert(&mut self, row: R, column: C) -> bool {
     4,478 ( 0.00%)          self.ensure_row(row).insert(column)
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to false. Put another way, delete
         .               /// `column` from the bitset for `row`. Has no effect if `row` does not
         .               /// exist.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn remove(&mut self, row: R, column: C) -> bool {
-- line 1233 ----------------------------------------
-- line 1255 ----------------------------------------
         .           
         .               /// Adds the bits from row `read` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               ///
         .               /// This is used when computing transitive reachability because if
         .               /// you have an edge `write -> read`, because in that case
         .               /// `write` can reach everything that `read` can (and
         .               /// potentially more).
   184,436 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
    26,348 ( 0.00%)          if read == write || self.row(read).is_none() {
         .                       return false;
         .                   }
         .           
         .                   self.ensure_row(write);
     8,437 ( 0.00%)          if let (Some(read_row), Some(write_row)) = self.rows.pick2_mut(read, write) {
         .                       write_row.union(read_row)
         .                   } else {
         .                       unreachable!()
         .                   }
   237,132 ( 0.01%)      }
         .           
         .               /// Insert all bits in the given row.
         .               pub fn insert_all_into_row(&mut self, row: R) {
         .                   self.ensure_row(row).insert_all();
         .               }
         .           
         .               pub fn rows(&self) -> impl Iterator<Item = R> {
         .                   self.rows.indices()
-- line 1282 ----------------------------------------
-- line 1284 ----------------------------------------
         .           
         .               /// Iterates through all the columns set to true in a given row of
         .               /// the matrix.
         .               pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {
         .                   self.row(row).into_iter().flat_map(|r| r.iter())
         .               }
         .           
         .               pub fn row(&self, row: R) -> Option<&HybridBitSet<C>> {
    84,141 ( 0.00%)          if let Some(Some(row)) = self.rows.get(row) { Some(row) } else { None }
         .               }
         .           
         .               /// Interescts `row` with `set`. `set` can be either `BitSet` or
         .               /// `HybridBitSet`. Has no effect if `row` does not exist.
         .               ///
         .               /// Returns true if the row was changed.
         .               pub fn intersect_row<Set>(&mut self, row: R, set: &Set) -> bool
         .               where
-- line 1300 ----------------------------------------
-- line 1329 ----------------------------------------
         .                   HybridBitSet<C>: BitRelations<Set>,
         .               {
         .                   self.ensure_row(row).union(set)
         .               }
         .           }
         .           
         .           #[inline]
         .           fn num_words<T: Idx>(domain_size: T) -> usize {
   571,293 ( 0.01%)      (domain_size.index() + WORD_BITS - 1) / WORD_BITS
         .           }
         .           
         .           #[inline]
         .           fn word_index_and_mask<T: Idx>(elem: T) -> (usize, Word) {
         .               let elem = elem.index();
 5,834,748 ( 0.14%)      let word_index = elem / WORD_BITS;
 1,078,541 ( 0.02%)      let mask = 1 << (elem % WORD_BITS);
         .               (word_index, mask)
         .           }
         .           
         .           #[inline]
         .           fn max_bit(word: Word) -> usize {
         .               WORD_BITS - 1 - word.leading_zeros() as usize
         .           }
         .           
-- line 1352 ----------------------------------------

 2,521,280 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
       392 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       196 ( 0.00%)              from_str_radix(src, radix)
       588 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   489,150 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
   404,539 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
   373,386 ( 0.01%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
35,341,437 ( 0.82%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
       237 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 1,045,584 ( 0.02%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   199,935 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
        48 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   841,107 ( 0.02%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
     3,211 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
 7,629,991 ( 0.18%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 2,648,071 ( 0.06%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
42,060,037 ( 0.97%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         2 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
   828,801 ( 0.02%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         4 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   229,380 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 2,185,839 ( 0.05%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
        66 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
     7,020 ( 0.00%)              if self <= 1 { return 0; }
         .           
    15,070 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
    45,180 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    15,060 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
    23,100 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   152,382 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           pub struct UnmatchedBrace {
      .               pub expected_delim: token::DelimToken,
      .               pub found_delim: Option<token::DelimToken>,
      .               pub found_span: Span,
      .               pub unclosed_span: Option<Span>,
      .               pub candidate_span: Option<Span>,
      .           }
      .           
     98 ( 0.00%)  crate fn parse_token_trees<'a>(
      .               sess: &'a ParseSess,
      .               src: &'a str,
      .               start_pos: BytePos,
      .               override_span: Option<Span>,
      .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
      .                   .into_token_trees()
     63 ( 0.00%)  }
      .           
      .           struct StringReader<'a> {
      .               sess: &'a ParseSess,
      .               /// Initial position, read-only.
      .               start_pos: BytePos,
      .               /// The absolute offset within the source_map of the current character.
      .               pos: BytePos,
      .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
      .               end_src_index: usize,
      .               /// Source text to tokenize.
      .               src: &'a str,
      .               override_span: Option<Span>,
      .           }
      .           
      .           impl<'a> StringReader<'a> {
      .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
104,663 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
      .               }
      .           
      .               /// Returns the next token, and info about preceding whitespace, if any.
562,352 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
      .                   let mut spacing = Spacing::Joint;
      .           
      .                   // Skip `#!` at the start of the file
160,672 ( 0.00%)          let start_src_index = self.src_index(self.pos);
241,008 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
      .                   let is_beginning_of_file = self.pos == self.start_pos;
 80,336 ( 0.00%)          if is_beginning_of_file {
     28 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
      .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
      .                           spacing = Spacing::Alone;
      .                       }
      .                   }
      .           
      .                   // Skip trivial (whitespace & comments) tokens
      .                   loop {
114,564 ( 0.00%)              let start_src_index = self.src_index(self.pos);
292,350 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
      .           
 97,450 ( 0.00%)              if text.is_empty() {
      .                           let span = self.mk_sp(self.pos, self.pos);
     35 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
      .                       }
      .           
292,329 ( 0.01%)              let token = rustc_lexer::first_token(text);
      .           
194,886 ( 0.00%)              let start = self.pos;
 97,443 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
      .           
      .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
      .           
783,080 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
642,632 ( 0.01%)                  Some(kind) => {
      .                               let span = self.mk_sp(start, self.pos);
481,974 ( 0.01%)                      return (spacing, Token::new(kind, span));
      .                           }
      .                           None => spacing = Spacing::Alone,
      .                       }
      .                   }
723,024 ( 0.02%)      }
      .           
      .               /// Report a fatal lexical error with a given span.
      .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
      .                   self.sess.span_diagnostic.span_fatal(sp, m)
      .               }
      .           
      .               /// Report a lexical error with a given span.
      .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
      .               ) -> DiagnosticBuilder<'a> {
      .                   self.sess
      .                       .span_diagnostic
      .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
      .               }
      .           
      .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
      .               /// complain about it.
    462 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
      .                   // Opening delimiter of the length 2 is not included into the comment text.
      .                   let content_start = start + BytePos(2);
      .                   let content = self.str_from(content_start);
      .                   if contains_text_flow_control_chars(content) {
      .                       let span = self.mk_sp(start, self.pos);
      .                       self.sess.buffer_lint_with_diagnostic(
      .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
      .                           span,
      .                           ast::CRATE_NODE_ID,
      .                           "unicode codepoint changing visible direction of text present in comment",
      .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
      .                       );
      .                   }
    528 ( 0.00%)      }
      .           
      .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
      .               /// `rustc_ast::TokenKind`. This turns strings into interned
      .               /// symbols and runs additional validation.
      .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
487,215 ( 0.01%)          Some(match token {
    944 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
      .                           // Skip non-doc comments
  4,540 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 is not included into the symbol.
      .                           let content_start = start + BytePos(3);
      .                           let content = self.str_from(content_start);
  4,420 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
      .                       }
     12 ( 0.00%)              rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
      6 ( 0.00%)                  if !terminated {
      .                               let msg = match doc_style {
      .                                   Some(_) => "unterminated block doc-comment",
      .                                   None => "unterminated block comment",
      .                               };
      .                               let last_bpos = self.pos;
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, last_bpos),
      .                                   msg,
      .                                   error_code!(E0758),
      .                               );
      .                           }
      .           
      .                           // Skip non-doc comments
      6 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 and closing delimiter of the length 2
      .                           // are not included into the symbol.
-- line 196 ----------------------------------------
-- line 198 ----------------------------------------
      .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
      .                           let content = self.str_from_to(content_start, content_end);
      .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::Whitespace => return None,
      .                       rustc_lexer::TokenKind::Ident
      .                       | rustc_lexer::TokenKind::RawIdent
      .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 97,280 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
121,600 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
      .                           let mut ident_start = start;
 48,640 ( 0.00%)                  if is_raw_ident {
      .                               ident_start = ident_start + BytePos(2);
      .                           }
 72,960 ( 0.00%)                  if is_unknown_prefix {
      .                               self.report_unknown_prefix(start);
      .                           }
121,600 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
      .                           let span = self.mk_sp(start, self.pos);
 97,280 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
 48,640 ( 0.00%)                  if is_raw_ident {
      .                               if !sym.can_be_raw() {
      .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
      .                               }
      .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
      .                           }
170,240 ( 0.00%)                  token::Ident(sym, is_raw_ident)
      .                       }
      .                       rustc_lexer::TokenKind::InvalidIdent
      .                           // Do not recover an identifier with emoji if the codepoint is a confusable
      .                           // with a recoverable substitution token, like `➖`.
      .                           if UNICODE_ARRAY
      .                               .iter()
      .                               .find(|&&(c, _, _)| {
      .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
      .                               })
      .                               .is_none() =>
      .                       {
      .                           let sym = nfc_normalize(self.str_from(start));
      .                           let span = self.mk_sp(start, self.pos);
      .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
      .                           token::Ident(sym, false)
      .                       }
  5,616 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
      .                           let suffix_start = start + BytePos(suffix_start as u32);
      .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
  1,053 ( 0.00%)                  let suffix = if suffix_start < self.pos {
      .                               let string = self.str_from(suffix_start);
      .                               if string == "_" {
      .                                   self.sess
      .                                       .span_diagnostic
      .                                       .struct_span_warn(
      .                                           self.mk_sp(suffix_start, self.pos),
      .                                           "underscore literal suffix is not allowed",
      .                                       )
-- line 253 ----------------------------------------
-- line 259 ----------------------------------------
      .                                       .note(
      .                                           "see issue #42326 \
      .                                            <https://github.com/rust-lang/rust/issues/42326> \
      .                                            for more information",
      .                                       )
      .                                       .emit();
      .                                   None
      .                               } else {
      5 ( 0.00%)                          Some(Symbol::intern(string))
      .                               }
      .                           } else {
      .                               None
      .                           };
  2,808 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
      .                       }
    320 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
      .                           // Include the leading `'` in the real identifier, for macro
      .                           // expansion purposes. See #12512 for the gory details of why
      .                           // this is necessary.
      .                           let lifetime_name = self.str_from(start);
    160 ( 0.00%)                  if starts_with_number {
      .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
      .                           }
    480 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
    640 ( 0.00%)                  token::Lifetime(ident)
      .                       }
      .                       rustc_lexer::TokenKind::Semi => token::Semi,
      .                       rustc_lexer::TokenKind::Comma => token::Comma,
      .                       rustc_lexer::TokenKind::Dot => token::Dot,
      .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
      .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
      .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
      .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
      .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
      .                           }
      .                           err.emit();
      .                           token?
      .                       }
      .                   })
      .               }
      .           
 10,608 ( 0.00%)      fn cook_doc_comment(
      .                   &self,
      .                   content_start: BytePos,
      .                   content: &str,
      .                   comment_kind: CommentKind,
      .                   doc_style: DocStyle,
      .               ) -> TokenKind {
    884 ( 0.00%)          if content.contains('\r') {
      .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
      .                           self.err_span_(
      .                               content_start + BytePos(idx as u32),
      .                               content_start + BytePos(idx as u32 + 1),
      .                               match comment_kind {
      .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
      .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
      .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   let attr_style = match doc_style {
      .                       DocStyle::Outer => AttrStyle::Outer,
      .                       DocStyle::Inner => AttrStyle::Inner,
      .                   };
      .           
  2,652 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
 13,260 ( 0.00%)      }
      .           
      .               fn cook_lexer_literal(
      .                   &self,
      .                   start: BytePos,
      .                   suffix_start: BytePos,
      .                   kind: rustc_lexer::LiteralKind,
      .               ) -> (token::LitKind, Symbol) {
      .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated byte constant",
      .                                   error_code!(E0763),
      .                               )
      .                           }
      .                           (token::Byte, Mode::Byte, 2, 1) // b' '
      .                       }
    180 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    180 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated double quote string",
      .                                   error_code!(E0765),
      .                               )
      .                           }
      .                           (token::Str, Mode::Str, 1, 1) // " "
      .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
      .                           let n = u32::from(n_hashes);
      .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
      .                       }
      .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
      .                           self.report_raw_str_error(start, err);
      .                           let n = u32::from(n_hashes);
      .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
      .                       }
    342 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
    171 ( 0.00%)                  return if empty_int {
      .                               self.sess
      .                                   .span_diagnostic
      .                                   .struct_span_err_with_code(
      .                                       self.mk_sp(start, suffix_start),
      .                                       "no valid digits found for number",
      .                                       error_code!(E0768),
      .                                   )
      .                                   .emit();
      .                               (token::Integer, sym::integer(0))
      .                           } else {
      .                               self.validate_int_literal(base, start, suffix_start);
    513 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
      .                           };
      .                       }
      .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
      .                           if empty_exponent {
      .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
      .                           }
      .           
      .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
      .                           }
      .           
      .                           let id = self.symbol_from_to(start, suffix_start);
      .                           return (token::Float, id);
      .                       }
      .                   };
      .                   let content_start = start + BytePos(prefix_len);
      .                   let content_end = suffix_start - BytePos(postfix_len);
    540 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
      .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
      .                   (lit_kind, id)
      .               }
      .           
      .               #[inline]
      .               fn src_index(&self, pos: BytePos) -> usize {
      .                   (pos - self.start_pos).to_usize()
      .               }
      .           
      .               /// Slice of the source text from `start` up to but excluding `self.pos`,
      .               /// meaning the slice does not include the character `self.ch`.
      .               fn str_from(&self, start: BytePos) -> &str {
154,185 ( 0.00%)          self.str_from_to(start, self.pos)
      .               }
      .           
      .               /// As symbol_from, with an explicit endpoint.
      .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
      .                   debug!("taking an ident from {:?} to {:?}", start, end);
  3,357 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
      .               }
      .           
      .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 25,962 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
      .                   &self.src[self.src_index(start)..self.src_index(end)]
103,848 ( 0.00%)      }
      .           
      .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
      .                   match opt_err {
      .                       Some(RawStrError::InvalidStarter { bad_char }) => {
      .                           self.report_non_started_raw_string(start, bad_char)
      .                       }
      .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
      .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
      .               fn validate_literal_escape(
      .                   &self,
      .                   mode: Mode,
      .                   content_start: BytePos,
      .                   content_end: BytePos,
      .                   prefix_len: u32,
      .                   postfix_len: u32,
      .               ) {
  1,080 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
 18,080 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
      .                       // Here we only check for errors. The actual unescaping is done later.
  3,530 ( 0.00%)              if let Err(err) = result {
      .                           let span_with_quotes = self
      .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
      .                           let (start, end) = (range.start as u32, range.end as u32);
      .                           let lo = content_start + BytePos(start);
      .                           let hi = lo + BytePos(end - start);
      .                           let span = self.mk_sp(lo, hi);
      .                           emit_unescape_error(
      .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
      .                               lit_content,
      .                               span_with_quotes,
      .                               span,
      .                               mode,
      .                               range,
      .                               err,
      .                           );
      .                       }
 15,885 ( 0.00%)          });
      .               }
      .           
      .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
    684 ( 0.00%)          let base = match base {
      .                       Base::Binary => 2,
      .                       Base::Octal => 8,
      .                       _ => return,
      .                   };
      .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
      .                   for (idx, c) in s.char_indices() {
      .                       let idx = idx as u32;
      .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
      .                           let lo = content_start + BytePos(2 + idx);
      .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
      .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
      .                       }
      .                   }
      .               }
      .           }
      .           
218,880 ( 0.01%)  pub fn nfc_normalize(string: &str) -> Symbol {
      .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
 48,640 ( 0.00%)      match is_nfc_quick(string.chars()) {
243,200 ( 0.01%)          IsNormalized::Yes => Symbol::intern(string),
      .                   _ => {
      .                       let normalized_str: String = string.chars().nfc().collect();
      .                       Symbol::intern(&normalized_str)
      .                   }
      .               }
      .           }

333,806 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir                  

-- line 267 ----------------------------------------
         .           macro_rules! bitor_impl {
         .               ($($t:ty)*) => ($(
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const BitOr for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
     4,463 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
         .                   }
         .           
         .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
         .               )*)
         .           }
         .           
         .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
         .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
         .           macro_rules! bitxor_impl {
         .               ($($t:ty)*) => ($(
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const BitXor for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
25,941,709 ( 0.60%)              fn bitxor(self, other: $t) -> $t { self ^ other }
         .                   }
         .           
         .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
         .               )*)
         .           }
         .           
         .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
         .           
-- line 384 ----------------------------------------
-- line 468 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
         .                   impl const Shl<$f> for $t {
         .                       type Output = $t;
         .           
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn shl(self, other: $f) -> $t {
        12 ( 0.00%)                  self << other
         .                       }
         .                   }
         .           
         .                   forward_ref_binop! { impl const Shl, shl for $t, $f }
         .               };
         .           }
         .           
         .           macro_rules! shl_impl_all {
-- line 484 ----------------------------------------

 1,084,725 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir                   

-- line 26 ----------------------------------------
          .               /// }
          .               ///
          .               /// assert_eq!(letters[&'s'], 2);
          .               /// assert_eq!(letters[&'t'], 3);
          .               /// assert_eq!(letters[&'u'], 1);
          .               /// assert_eq!(letters.get(&'y'), None);
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
180,324,634 ( 4.18%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
          .                   let hash = make_insert_hash(&self.hash_builder, &key);
        733 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 22,484,779 ( 0.52%)              RustcEntry::Occupied(RustcOccupiedEntry {
 67,151,253 ( 1.56%)                  key: Some(key),
          .                           elem,
          .                           table: &mut self.table,
          .                       })
          .                   } else {
          .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
          .                       // generic over the BuildHasher and adding a generic parameter would be
          .                       // a breaking change.
          .                       self.reserve(1);
          .           
    283,508 ( 0.01%)              RustcEntry::Vacant(RustcVacantEntry {
          .                           hash,
    151,188 ( 0.00%)                  key,
          .                           table: &mut self.table,
          .                       })
          .                   }
101,739,852 ( 2.36%)      }
          .           }
          .           
          .           /// A view into a single entry in a map, which may either be vacant or occupied.
          .           ///
          .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
          .           ///
          .           /// [`HashMap`]: struct.HashMap.html
          .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
          .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
          .               ///     *o.into_mut() += 10;
          .               /// }
          .               ///
          .               /// assert_eq!(map["poneyland"], 22);
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn into_mut(self) -> &'a mut V {
      5,985 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
          .               }
          .           
          .               /// Sets the value of the entry, and returns the entry's old value.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
          .               /// let mut map: HashMap<&str, u32> = HashMap::new();
          .               ///
          .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
          .               ///     o.insert(37);
          .               /// }
          .               /// assert_eq!(map["poneyland"], 37);
          .               /// ```
          .               #[cfg_attr(feature = "inline-more", inline)]
     10,934 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
          .                   unsafe {
    125,272 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
      5,486 ( 0.00%)              &mut bucket.as_mut().1
          .                   }
     15,009 ( 0.00%)      }
          .           
          .               /// Sets the value of the entry with the RustcVacantEntry's key,
          .               /// and returns a RustcOccupiedEntry.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

 22,713,252 ( 0.53%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs
--------------------------------------------------------------------------------
Ir                  

-- line 188 ----------------------------------------
         .               /// // NEVER DO THAT!!! This is undefined behavior. ⚠️
         .               /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
         .               /// ```
         .               #[stable(feature = "nonnull", since = "1.25.0")]
         .               #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
         .               #[inline]
         .               pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
         .                   // SAFETY: the caller must guarantee that `ptr` is non-null.
37,059,264 ( 0.86%)          unsafe { NonNull { pointer: ptr as _ } }
         .               }
         .           
         .               /// Creates a new `NonNull` if `ptr` is non-null.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use std::ptr::NonNull;
-- line 204 ----------------------------------------
-- line 393 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "nonnull_cast", since = "1.27.0")]
         .               #[rustc_const_stable(feature = "const_nonnull_cast", since = "1.36.0")]
         .               #[must_use = "this returns the result of the operation, \
         .                             without modifying the original"]
         .               #[inline]
         .               pub const fn cast<U>(self) -> NonNull<U> {
         .                   // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
        88 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
         .               }
         .           }
         .           
         .           impl<T> NonNull<[T]> {
         .               /// Creates a non-null raw slice from a thin pointer and a length.
         .               ///
         .               /// The `len` argument is the number of **elements**, not the number of bytes.
         .               ///
-- line 409 ----------------------------------------
-- line 718 ----------------------------------------
         .           }
         .           
         .           #[stable(feature = "nonnull", since = "1.25.0")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T: ?Sized> const From<&mut T> for NonNull<T> {
         .               #[inline]
         .               fn from(reference: &mut T) -> Self {
         .                   // SAFETY: A mutable reference cannot be null.
    17,730 ( 0.00%)          unsafe { NonNull { pointer: reference as *mut T } }
         .               }
         .           }
         .           
         .           #[stable(feature = "nonnull", since = "1.25.0")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T: ?Sized> const From<&T> for NonNull<T> {
         .               #[inline]
         .               fn from(reference: &T) -> Self {
-- line 734 ----------------------------------------

       104 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
    105,506 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
    718,352 ( 0.02%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
          .                               old
          .                           }
          .                       }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
        340 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
          .                               self.end
          .                           }
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
    150,529 ( 0.00%)                  len!(self)
          .                       }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
          .                       fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
    288,432 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
    113,347 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
126,170,183 ( 2.92%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
          .                       fn size_hint(&self) -> (usize, Option<usize>) {
  3,155,850 ( 0.07%)                  let exact = len!(self);
          .                           (exact, Some(exact))
          .                       }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
     66,813 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
      3,390 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
      7,338 ( 0.00%)                  while let Some(x) = self.next() {
      9,542 ( 0.00%)                      if !f(x) {
          .                                   return false;
          .                               }
          .                           }
          .                           true
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
    623,048 ( 0.01%)                  while let Some(x) = self.next() {
    399,195 ( 0.01%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
          .                           false
          8 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
     98,911 ( 0.00%)                  while let Some(x) = self.next() {
    119,959 ( 0.00%)                      if predicate(&x) {
          .                                   return Some(x);
          .                               }
          .                           }
          .                           None
         48 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
     33,927 ( 0.00%)                  while let Some(x) = self.next() {
    199,437 ( 0.00%)                      if let Some(y) = f(x) {
     10,057 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
      3,186 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
    739,636 ( 0.02%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
     32,126 ( 0.00%)                  while let Some(x) = self.next_back() {
    428,208 ( 0.01%)                      i -= 1;
    345,577 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
     62,967 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
          .                       }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
          .                       fn next_back(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
         22 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
         26 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  1,279,556 ( 0.03%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_back_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
-- line 369 ----------------------------------------

 14,262,015 ( 0.33%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/scope.rs
--------------------------------------------------------------------------------
Ir                   

-- line 143 ----------------------------------------
          .           
          .               /// local to drop
          .               local: Local,
          .           
          .               /// Whether this is a value Drop or a StorageDead.
          .               kind: DropKind,
          .           }
          .           
 33,614,817 ( 0.78%)  #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
          .           pub(crate) enum DropKind {
          .               Value,
          .               Storage,
          .           }
          .           
          .           #[derive(Debug)]
          .           struct BreakableScope<'tcx> {
          .               /// Region scope of the loop
-- line 159 ----------------------------------------
-- line 218 ----------------------------------------
          .               ///  * clang doesn't emit llvm.lifetime.end for C++ unwinding
          .               ///  * LLVM's memory dependency analysis can't handle it atm
          .               ///  * polluting the cleanup MIR with StorageDead creates
          .               ///    landing pads even though there's no actual destructors
          .               ///  * freeing up stack space has no effect during unwinding
          .               /// Note that for generators we do emit StorageDeads, for the
          .               /// use of optimizations in the MIR generator transform.
          .               fn needs_cleanup(&self) -> bool {
      4,012 ( 0.00%)          self.drops.iter().any(|drop| match drop.kind {
          .                       DropKind::Value => true,
          .                       DropKind::Storage => false,
          .                   })
          .               }
          .           
          .               fn invalidate_cache(&mut self) {
     17,667 ( 0.00%)          self.cached_unwind_block = None;
          .                   self.cached_generator_drop_block = None;
          .               }
          .           }
          .           
          .           /// A trait that determined how [DropTree] creates its blocks and
          .           /// links to any entry nodes.
          .           trait DropTreeBuilder<'tcx> {
          .               /// Create a new block for the tree. This should call either
-- line 241 ----------------------------------------
-- line 243 ----------------------------------------
          .               fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock;
          .           
          .               /// Links a block outside the drop tree, `from`, to the block `to` inside
          .               /// the drop tree.
          .               fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock);
          .           }
          .           
          .           impl DropTree {
        920 ( 0.00%)      fn new() -> Self {
          .                   // The root node of the tree doesn't represent a drop, but instead
          .                   // represents the block in the tree that should be jumped to once all
          .                   // of the required drops have been performed.
          .                   let fake_source_info = SourceInfo::outermost(DUMMY_SP);
          .                   let fake_data =
          .                       DropData { source_info: fake_source_info, local: Local::MAX, kind: DropKind::Storage };
          .                   let drop_idx = DropIdx::MAX;
          .                   let drops = IndexVec::from_elem_n((fake_data, drop_idx), 1);
      1,840 ( 0.00%)          Self { drops, entry_points: Vec::new(), previous_drops: FxHashMap::default() }
      1,380 ( 0.00%)      }
          .           
        110 ( 0.00%)      fn add_drop(&mut self, drop: DropData, next: DropIdx) -> DropIdx {
          .                   let drops = &mut self.drops;
 67,175,400 ( 1.56%)          *self
          .                       .previous_drops
         22 ( 0.00%)              .entry((next, drop.local, drop.kind))
          .                       .or_insert_with(|| drops.push((drop, next)))
         88 ( 0.00%)      }
          .           
          .               fn add_entry(&mut self, from: BasicBlock, to: DropIdx) {
          .                   debug_assert!(to < self.drops.next_index());
          .                   self.entry_points.push((to, from));
          .               }
          .           
          .               /// Builds the MIR for a given drop tree.
          .               ///
          .               /// `blocks` should have the same length as `self.drops`, and may have its
          .               /// first value set to some already existing block.
      6,496 ( 0.00%)      fn build_mir<'tcx, T: DropTreeBuilder<'tcx>>(
          .                   &mut self,
          .                   cfg: &mut CFG<'tcx>,
          .                   blocks: &mut IndexVec<DropIdx, Option<BasicBlock>>,
          .               ) {
          .                   debug!("DropTree::build_mir(drops = {:#?})", self);
      3,248 ( 0.00%)          assert_eq!(blocks.len(), self.drops.len());
          .           
          .                   self.assign_blocks::<T>(cfg, blocks);
      8,932 ( 0.00%)          self.link_blocks(cfg, blocks)
          .               }
          .           
          .               /// Assign blocks for all of the drops in the drop tree that need them.
          .               fn assign_blocks<'tcx, T: DropTreeBuilder<'tcx>>(
          .                   &mut self,
          .                   cfg: &mut CFG<'tcx>,
          .                   blocks: &mut IndexVec<DropIdx, Option<BasicBlock>>,
          .               ) {
-- line 297 ----------------------------------------
-- line 307 ----------------------------------------
          .                       Shares(DropIdx),
          .                       // This drop has more than one way of being reached, or it is
          .                       // branched to from outside the tree, or its predecessor is a
          .                       // `Value` drop.
          .                       Own,
          .                   }
          .           
          .                   let mut needs_block = IndexVec::from_elem(Block::None, &self.drops);
        812 ( 0.00%)          if blocks[ROOT_NODE].is_some() {
          .                       // In some cases (such as drops for `continue`) the root node
          .                       // already has a block. In this case, make sure that we don't
          .                       // override it.
         36 ( 0.00%)              needs_block[ROOT_NODE] = Block::Own;
          .                   }
          .           
          .                   // Sort so that we only need to check the last value.
          .                   let entry_points = &mut self.entry_points;
          .                   entry_points.sort();
          .           
          .                   for (drop_idx, drop_data) in self.drops.iter_enumerated().rev() {
      9,961 ( 0.00%)              if entry_points.last().map_or(false, |entry_point| entry_point.0 == drop_idx) {
          .                           let block = *blocks[drop_idx].get_or_insert_with(|| T::make_block(cfg));
     18,414 ( 0.00%)                  needs_block[drop_idx] = Block::Own;
     36,544 ( 0.00%)                  while entry_points.last().map_or(false, |entry_point| entry_point.0 == drop_idx) {
          .                               let entry_block = entry_points.pop().unwrap().1;
          .                               T::add_entry(cfg, entry_block, block);
          .                           }
          .                       }
     95,126 ( 0.00%)              match needs_block[drop_idx] {
          .                           Block::None => continue,
          .                           Block::Own => {
          .                               blocks[drop_idx].get_or_insert_with(|| T::make_block(cfg));
          .                           }
          .                           Block::Shares(pred) => {
      2,673 ( 0.00%)                      blocks[drop_idx] = blocks[pred];
          .                           }
          .                       }
     20,380 ( 0.00%)              if let DropKind::Value = drop_data.0.kind {
      8,785 ( 0.00%)                  needs_block[drop_data.1] = Block::Own;
      1,405 ( 0.00%)              } else if drop_idx != ROOT_NODE {
      8,240 ( 0.00%)                  match &mut needs_block[drop_data.1] {
      1,866 ( 0.00%)                      pred @ Block::None => *pred = Block::Shares(drop_idx),
          .                               pred @ Block::Shares(_) => *pred = Block::Own,
          .                               Block::Own => (),
          .                           }
          .                       }
          .                   }
          .           
          .                   debug!("assign_blocks: blocks = {:#?}", blocks);
        812 ( 0.00%)          assert!(entry_points.is_empty());
          .               }
          .           
      5,684 ( 0.00%)      fn link_blocks<'tcx>(
          .                   &self,
          .                   cfg: &mut CFG<'tcx>,
          .                   blocks: &IndexVec<DropIdx, Option<BasicBlock>>,
          .               ) {
          .                   for (drop_idx, drop_data) in self.drops.iter_enumerated().rev() {
     42,712 ( 0.00%)              let Some(block) = blocks[drop_idx] else { continue };
     20,380 ( 0.00%)              match drop_data.0.kind {
          .                           DropKind::Value => {
          .                               let terminator = TerminatorKind::Drop {
     17,570 ( 0.00%)                          target: blocks[drop_data.1].unwrap(),
          .                                   // The caller will handle this if needed.
          .                                   unwind: None,
      8,785 ( 0.00%)                          place: drop_data.0.local.into(),
          .                               };
     26,355 ( 0.00%)                      cfg.terminate(block, drop_data.0.source_info, terminator);
          .                           }
          .                           // Root nodes don't correspond to a drop.
      1,405 ( 0.00%)                  DropKind::Storage if drop_idx == ROOT_NODE => {}
          .                           DropKind::Storage => {
          .                               let stmt = Statement {
          .                                   source_info: drop_data.0.source_info,
      1,007 ( 0.00%)                          kind: StatementKind::StorageDead(drop_data.0.local),
          .                               };
     11,077 ( 0.00%)                      cfg.push(block, stmt);
      2,014 ( 0.00%)                      let target = blocks[drop_data.1].unwrap();
      1,007 ( 0.00%)                      if target != block {
          .                                   // Diagnostics don't use this `Span` but debuginfo
          .                                   // might. Since we don't want breakpoints to be placed
          .                                   // here, especially when this is on an unwind path, we
          .                                   // use `DUMMY_SP`.
          .                                   let source_info = SourceInfo { span: DUMMY_SP, ..drop_data.0.source_info };
          .                                   let terminator = TerminatorKind::Goto { target };
        116 ( 0.00%)                          cfg.terminate(block, source_info, terminator);
          .                               }
          .                           }
          .                       }
          .                   }
      6,496 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> Scopes<'tcx> {
      1,408 ( 0.00%)      pub(crate) fn new() -> Self {
      6,688 ( 0.00%)          Self {
          .                       scopes: Vec::new(),
          .                       breakable_scopes: Vec::new(),
          .                       if_then_scope: None,
          .                       unwind_drops: DropTree::new(),
          .                       generator_drops: DropTree::new(),
          .                   }
      1,760 ( 0.00%)      }
          .           
        108 ( 0.00%)      fn push_scope(&mut self, region_scope: (region::Scope, SourceInfo), vis_scope: SourceScope) {
          .                   debug!("push_scope({:?})", region_scope);
    220,796 ( 0.01%)          self.scopes.push(Scope {
          .                       source_scope: vis_scope,
         36 ( 0.00%)              region_scope: region_scope.0,
          .                       drops: vec![],
          .                       moved_locals: vec![],
          .                       cached_unwind_block: None,
          .                       cached_generator_drop_block: None,
          .                   });
        108 ( 0.00%)      }
          .           
     77,916 ( 0.00%)      fn pop_scope(&mut self, region_scope: (region::Scope, SourceInfo)) -> Scope {
          .                   let scope = self.scopes.pop().unwrap();
     77,916 ( 0.00%)          assert_eq!(scope.region_scope, region_scope.0);
          .                   scope
    129,860 ( 0.00%)      }
          .           
          .               fn scope_index(&self, region_scope: region::Scope, span: Span) -> usize {
          .                   self.scopes
          .                       .iter()
          .                       .rposition(|scope| scope.region_scope == region_scope)
          .                       .unwrap_or_else(|| span_bug!(span, "region_scope {:?} does not enclose", region_scope))
          .               }
          .           
          .               /// Returns the topmost active scope, which is known to be alive until
          .               /// the next scope expression.
          .               fn topmost(&self) -> region::Scope {
     56,489 ( 0.00%)          self.scopes.last().expect("topmost_scope: no scopes present").region_scope
          .               }
          .           }
          .           
          .           impl<'a, 'tcx> Builder<'a, 'tcx> {
          .               // Adding and removing scopes
          .               // ==========================
          .               //  Start a breakable scope, which tracks where `continue`, `break` and
          .               //  `return` should branch to.
        288 ( 0.00%)      crate fn in_breakable_scope<F>(
          .                   &mut self,
          .                   loop_block: Option<BasicBlock>,
          .                   break_destination: Place<'tcx>,
          .                   span: Span,
          .                   f: F,
          .               ) -> BlockAnd<()>
          .               where
          .                   F: FnOnce(&mut Builder<'a, 'tcx>) -> Option<BlockAnd<()>>,
          .               {
          .                   let region_scope = self.scopes.topmost();
      3,060 ( 0.00%)          let scope = BreakableScope {
          .                       region_scope,
          .                       break_destination,
        342 ( 0.00%)              break_drops: DropTree::new(),
         36 ( 0.00%)              continue_drops: loop_block.map(|_| DropTree::new()),
          .                   };
      6,102 ( 0.00%)          self.scopes.breakable_scopes.push(scope);
        180 ( 0.00%)          let normal_exit_block = f(self);
          .                   let breakable_scope = self.scopes.breakable_scopes.pop().unwrap();
        378 ( 0.00%)          assert!(breakable_scope.region_scope == region_scope);
      4,590 ( 0.00%)          let break_block = self.build_exit_tree(breakable_scope.break_drops, None);
        612 ( 0.00%)          if let Some(drops) = breakable_scope.continue_drops {
        540 ( 0.00%)              self.build_exit_tree(drops, loop_block);
          .                   }
        648 ( 0.00%)          match (normal_exit_block, break_block) {
          .                       (Some(block), None) | (None, Some(block)) => block,
          .                       (None, None) => self.cfg.start_new_block().unit(),
          .                       (Some(normal_block), Some(exit_block)) => {
         54 ( 0.00%)                  let target = self.cfg.start_new_block();
          .                           let source_info = self.source_info(span);
          .                           self.cfg.terminate(
          .                               unpack!(normal_block),
          .                               source_info,
          .                               TerminatorKind::Goto { target },
          .                           );
          .                           self.cfg.terminate(
          .                               unpack!(exit_block),
          .                               source_info,
          .                               TerminatorKind::Goto { target },
          .                           );
          .                           target.unit()
          .                       }
          .                   }
        324 ( 0.00%)      }
          .           
          .               /// Start an if-then scope which tracks drop for `if` expressions and `if`
          .               /// guards.
          .               ///
          .               /// For an if-let chain:
          .               ///
          .               /// if let Some(x) = a && let Some(y) = b && let Some(z) = c { ... }
          .               ///
-- line 500 ----------------------------------------
-- line 510 ----------------------------------------
          .               crate fn in_if_then_scope<F>(
          .                   &mut self,
          .                   region_scope: region::Scope,
          .                   f: F,
          .               ) -> (BasicBlock, BasicBlock)
          .               where
          .                   F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<()>,
          .               {
        118 ( 0.00%)          let scope = IfThenScope { region_scope, else_drops: DropTree::new() };
          .                   let previous_scope = mem::replace(&mut self.scopes.if_then_scope, Some(scope));
          .           
          .                   let then_block = unpack!(f(self));
          .           
          .                   let if_then_scope = mem::replace(&mut self.scopes.if_then_scope, previous_scope).unwrap();
        118 ( 0.00%)          assert!(if_then_scope.region_scope == region_scope);
          .           
        472 ( 0.00%)          let else_block = self
      1,416 ( 0.00%)              .build_exit_tree(if_then_scope.else_drops, None)
        118 ( 0.00%)              .map_or_else(|| self.cfg.start_new_block(), |else_block_and| unpack!(else_block_and));
          .           
          .                   (then_block, else_block)
          .               }
          .           
          .               crate fn in_opt_scope<F, R>(
          .                   &mut self,
          .                   opt_scope: Option<(region::Scope, SourceInfo)>,
          .                   f: F,
          .               ) -> BlockAnd<R>
          .               where
          .                   F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>,
          .               {
          .                   debug!("in_opt_scope(opt_scope={:?})", opt_scope);
        501 ( 0.00%)          if let Some(region_scope) = opt_scope {
          .                       self.push_scope(region_scope);
          .                   }
          .                   let mut block;
          .                   let rv = unpack!(block = f(self));
        895 ( 0.00%)          if let Some(region_scope) = opt_scope {
      4,766 ( 0.00%)              unpack!(block = self.pop_scope(region_scope, block));
          .                   }
          .                   debug!("in_scope: exiting opt_scope={:?} block={:?}", opt_scope, block);
          .                   block.and(rv)
          .               }
          .           
          .               /// Convenience wrapper that pushes a scope and then executes `f`
          .               /// to build its contents, popping the scope afterwards.
     30,274 ( 0.00%)      crate fn in_scope<F, R>(
          .                   &mut self,
          .                   region_scope: (region::Scope, SourceInfo),
          .                   lint_level: LintLevel,
          .                   f: F,
          .               ) -> BlockAnd<R>
          .               where
          .                   F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>,
          .               {
          .                   debug!("in_scope(region_scope={:?})", region_scope);
      9,907 ( 0.00%)          let source_scope = self.source_scope;
          .                   let tcx = self.tcx;
     51,991 ( 0.00%)          if let LintLevel::Explicit(current_hir_id) = lint_level {
          .                       // Use `maybe_lint_level_root_bounded` with `root_lint_level` as a bound
          .                       // to avoid adding Hir dependences on our parents.
          .                       // We estimate the true lint roots here to avoid creating a lot of source scopes.
          .           
    137,252 ( 0.00%)              let parent_root = tcx.maybe_lint_level_root_bounded(
     24,952 ( 0.00%)                  self.source_scopes[source_scope].local_data.as_ref().assert_crate_local().lint_root,
     46,028 ( 0.00%)                  self.hir_id,
          .                       );
    142,339 ( 0.00%)              let current_root = tcx.maybe_lint_level_root_bounded(current_hir_id, self.hir_id);
          .           
     69,042 ( 0.00%)              if parent_root != current_root {
      1,104 ( 0.00%)                  self.source_scope = self.new_source_scope(
        184 ( 0.00%)                      region_scope.1.span,
          .                               LintLevel::Explicit(current_root),
          .                               None,
          .                           );
          .                       }
          .                   }
          .                   self.push_scope(region_scope);
          .                   let mut block;
    123,823 ( 0.00%)          let rv = unpack!(block = f(self));
    232,969 ( 0.01%)          unpack!(block = self.pop_scope(region_scope, block));
     28,083 ( 0.00%)          self.source_scope = source_scope;
          .                   debug!("in_scope: exiting region_scope={:?} block={:?}", region_scope, block);
      6,783 ( 0.00%)          block.and(rv)
     22,248 ( 0.00%)      }
          .           
          .               /// Push a scope onto the stack. You can then build code in this
          .               /// scope and call `pop_scope` afterwards. Note that these two
          .               /// calls must be paired; using `in_scope` as a convenience
          .               /// wrapper maybe preferable.
          .               crate fn push_scope(&mut self, region_scope: (region::Scope, SourceInfo)) {
      8,750 ( 0.00%)          self.scopes.push_scope(region_scope, self.source_scope);
          .               }
          .           
          .               /// Pops a scope, which should have region scope `region_scope`,
          .               /// adding any drops onto the end of `block` that are needed.
          .               /// This must match 1-to-1 with `push_scope`.
    155,832 ( 0.00%)      crate fn pop_scope(
          .                   &mut self,
          .                   region_scope: (region::Scope, SourceInfo),
          .                   mut block: BasicBlock,
          .               ) -> BlockAnd<()> {
          .                   debug!("pop_scope({:?}, {:?})", region_scope, block);
          .           
          .                   block = self.leave_top_scope(block);
          .           
    207,776 ( 0.00%)          self.scopes.pop_scope(region_scope);
          .           
          .                   block.unit()
    207,776 ( 0.00%)      }
          .           
          .               /// Sets up the drops for breaking from `block` to `target`.
      1,692 ( 0.00%)      crate fn break_scope(
          .                   &mut self,
          .                   mut block: BasicBlock,
          .                   value: Option<&Expr<'tcx>>,
          .                   target: BreakableTarget,
          .                   source_info: SourceInfo,
          .               ) -> BlockAnd<()> {
          .                   let span = source_info.span;
          .           
-- line 630 ----------------------------------------
-- line 631 ----------------------------------------
          .                   let get_scope_index = |scope: region::Scope| {
          .                       // find the loop-scope by its `region::Scope`.
          .                       self.scopes
          .                           .breakable_scopes
          .                           .iter()
          .                           .rposition(|breakable_scope| breakable_scope.region_scope == scope)
          .                           .unwrap_or_else(|| span_bug!(span, "no enclosing breakable scope found"))
          .                   };
      1,128 ( 0.00%)          let (break_index, destination) = match target {
          .                       BreakableTarget::Return => {
          .                           let scope = &self.scopes.breakable_scopes[0];
        420 ( 0.00%)                  if scope.break_destination != Place::return_place() {
          .                               span_bug!(span, "`return` in item with no return scope");
          .                           }
          .                           (0, Some(scope.break_destination))
          .                       }
          .                       BreakableTarget::Break(scope) => {
          .                           let break_index = get_scope_index(scope);
          .                           let scope = &self.scopes.breakable_scopes[break_index];
          .                           (break_index, Some(scope.break_destination))
-- line 650 ----------------------------------------
-- line 651 ----------------------------------------
          .                       }
          .                       BreakableTarget::Continue(scope) => {
          .                           let break_index = get_scope_index(scope);
          .                           (break_index, None)
          .                       }
          .                   };
          .           
          .                   if let Some(destination) = destination {
        282 ( 0.00%)              if let Some(value) = value {
          .                           debug!("stmt_expr Break val block_context.push(SubExpr)");
          .                           self.block_context.push(BlockFrame::SubExpr);
        714 ( 0.00%)                  unpack!(block = self.expr_into_dest(destination, block, value));
          .                           self.block_context.pop();
          .                       } else {
        351 ( 0.00%)                  self.cfg.push_assign_unit(block, source_info, destination, self.tcx)
          .                       }
          .                   } else {
          .                       assert!(value.is_none(), "`return` and `break` should have a destination");
          .                       if self.tcx.sess.instrument_coverage() {
          .                           // Unlike `break` and `return`, which push an `Assign` statement to MIR, from which
          .                           // a Coverage code region can be generated, `continue` needs no `Assign`; but
          .                           // without one, the `InstrumentCoverage` MIR pass cannot generate a code region for
          .                           // `continue`. Coverage will be missing unless we add a dummy `Assign` to MIR.
          .                           self.add_dummy_assignment(&span, block, source_info);
          .                       }
          .                   }
          .           
        705 ( 0.00%)          let region_scope = self.scopes.breakable_scopes[break_index].region_scope;
          .                   let scope_index = self.scopes.scope_index(region_scope, span);
        141 ( 0.00%)          let drops = if destination.is_some() {
        282 ( 0.00%)              &mut self.scopes.breakable_scopes[break_index].break_drops
          .                   } else {
          .                       self.scopes.breakable_scopes[break_index].continue_drops.as_mut().unwrap()
          .                   };
          .                   let mut drop_idx = ROOT_NODE;
        282 ( 0.00%)          for scope in &self.scopes.scopes[scope_index + 1..] {
          .                       for drop in &scope.drops {
     11,960 ( 0.00%)                  drop_idx = drops.add_drop(*drop, drop_idx);
          .                       }
          .                   }
          .                   drops.add_entry(block, drop_idx);
          .           
          .                   // `build_drop_tree` doesn't have access to our source_info, so we
          .                   // create a dummy terminator now. `TerminatorKind::Resume` is used
          .                   // because MIR type checking will panic if it hasn't been overwritten.
          .                   self.cfg.terminate(block, source_info, TerminatorKind::Resume);
          .           
      1,269 ( 0.00%)          self.cfg.start_new_block().unit()
          .               }
          .           
      1,416 ( 0.00%)      crate fn break_for_else(
          .                   &mut self,
          .                   block: BasicBlock,
          .                   target: region::Scope,
          .                   source_info: SourceInfo,
          .               ) {
          .                   let scope_index = self.scopes.scope_index(target, source_info.span);
          .                   let if_then_scope = self
          .                       .scopes
          .                       .if_then_scope
          .                       .as_mut()
          .                       .unwrap_or_else(|| span_bug!(source_info.span, "no if-then scope found"));
          .           
        354 ( 0.00%)          assert_eq!(if_then_scope.region_scope, target, "breaking to incorrect scope");
          .           
          .                   let mut drop_idx = ROOT_NODE;
          .                   let drops = &mut if_then_scope.else_drops;
        236 ( 0.00%)          for scope in &self.scopes.scopes[scope_index + 1..] {
          .                       for drop in &scope.drops {
          .                           drop_idx = drops.add_drop(*drop, drop_idx);
          .                       }
          .                   }
          .                   drops.add_entry(block, drop_idx);
          .           
          .                   // `build_drop_tree` doesn't have access to our source_info, so we
          .                   // create a dummy terminator now. `TerminatorKind::Resume` is used
          .                   // because MIR type checking will panic if it hasn't been overwritten.
          .                   self.cfg.terminate(block, source_info, TerminatorKind::Resume);
        944 ( 0.00%)      }
          .           
          .               // Add a dummy `Assign` statement to the CFG, with the span for the source code's `continue`
          .               // statement.
          .               fn add_dummy_assignment(&mut self, span: &Span, block: BasicBlock, source_info: SourceInfo) {
          .                   let local_decl = LocalDecl::new(self.tcx.mk_unit(), *span).internal();
          .                   let temp_place = Place::from(self.local_decls.push(local_decl));
          .                   self.cfg.push_assign_unit(block, source_info, temp_place, self.tcx);
          .               }
          .           
          .               fn leave_top_scope(&mut self, block: BasicBlock) -> BasicBlock {
          .                   // If we are emitting a `drop` statement, we need to have the cached
          .                   // diverge cleanup pads ready in case that drop panics.
          .                   let needs_cleanup = self.scopes.scopes.last().map_or(false, |scope| scope.needs_cleanup());
     51,753 ( 0.00%)          let is_generator = self.generator_kind.is_some();
        573 ( 0.00%)          let unwind_to = if needs_cleanup { self.diverge_cleanup() } else { DropIdx::MAX };
          .           
          .                   let scope = self.scopes.scopes.last().expect("leave_top_scope called with no scopes");
    155,832 ( 0.00%)          unpack!(build_scope_drops(
     25,972 ( 0.00%)              &mut self.cfg,
     25,972 ( 0.00%)              &mut self.scopes.unwind_drops,
          .                       scope,
          .                       block,
          .                       unwind_to,
     25,972 ( 0.00%)              is_generator && needs_cleanup,
     25,972 ( 0.00%)              self.arg_count,
          .                   ))
          .               }
          .           
          .               /// Creates a new source scope, nested in the current one.
      7,929 ( 0.00%)      crate fn new_source_scope(
          .                   &mut self,
          .                   span: Span,
          .                   lint_level: LintLevel,
          .                   safety: Option<Safety>,
          .               ) -> SourceScope {
        881 ( 0.00%)          let parent = self.source_scope;
          .                   debug!(
          .                       "new_source_scope({:?}, {:?}, {:?}) - parent({:?})={:?}",
          .                       span,
          .                       lint_level,
          .                       safety,
          .                       parent,
          .                       self.source_scopes.get(parent)
          .                   );
          .                   let scope_local_data = SourceScopeLocalData {
      1,762 ( 0.00%)              lint_root: if let LintLevel::Explicit(lint_root) = lint_level {
          .                           lint_root
          .                       } else {
        345 ( 0.00%)                  self.source_scopes[parent].local_data.as_ref().assert_crate_local().lint_root
          .                       },
        881 ( 0.00%)              safety: safety.unwrap_or_else(|| {
      1,587 ( 0.00%)                  self.source_scopes[parent].local_data.as_ref().assert_crate_local().safety
          .                       }),
          .                   };
          .                   self.source_scopes.push(SourceScopeData {
          .                       span,
          .                       parent_scope: Some(parent),
          .                       inlined: None,
          .                       inlined_parent_scope: None,
          .                       local_data: ClearCrossCrate::Set(scope_local_data),
          .                   })
      7,929 ( 0.00%)      }
          .           
          .               /// Given a span and the current source scope, make a SourceInfo.
          .               crate fn source_info(&self, span: Span) -> SourceInfo {
     75,168 ( 0.00%)          SourceInfo { span, scope: self.source_scope }
      2,812 ( 0.00%)      }
          .           
          .               // Finding scopes
          .               // ==============
          .               /// Returns the scope that we should use as the lifetime of an
          .               /// operand. Basically, an operand must live until it is consumed.
          .               /// This is similar to, but not quite the same as, the temporary
          .               /// scope (which can be larger or smaller).
          .               ///
-- line 804 ----------------------------------------
-- line 831 ----------------------------------------
          .                   self.schedule_drop(span, region_scope, local, DropKind::Storage);
          .                   self.schedule_drop(span, region_scope, local, DropKind::Value);
          .               }
          .           
          .               /// Indicates that `place` should be dropped on exit from `region_scope`.
          .               ///
          .               /// When called with `DropKind::Storage`, `place` shouldn't be the return
          .               /// place, or a function parameter.
    406,464 ( 0.01%)      crate fn schedule_drop(
          .                   &mut self,
          .                   span: Span,
          .                   region_scope: region::Scope,
          .                   local: Local,
          .                   drop_kind: DropKind,
          .               ) {
     50,808 ( 0.00%)          let needs_drop = match drop_kind {
          .                       DropKind::Value => {
    103,448 ( 0.00%)                  if !self.local_decls[local].ty.needs_drop(self.tcx, self.param_env) {
          .                               return;
          .                           }
          .                           true
          .                       }
          .                       DropKind::Storage => {
     24,946 ( 0.00%)                  if local.index() <= self.arg_count {
          .                               span_bug!(
          .                                   span,
          .                                   "`schedule_drop` called with local {:?} and arg_count {}",
          .                                   local,
          .                                   self.arg_count,
          .                               )
          .                           }
          .                           false
-- line 862 ----------------------------------------
-- line 906 ----------------------------------------
          .                   // cache of outer scope stays intact.
          .                   //
          .                   // Since we only cache drops for the unwind path and the generator drop
          .                   // path, we only need to invalidate the cache for drops that happen on
          .                   // the unwind or generator drop paths. This means that for
          .                   // non-generators we don't need to invalidate caches for `DropKind::Storage`.
          .                   let invalidate_caches = needs_drop || self.generator_kind.is_some();
          .                   for scope in self.scopes.scopes.iter_mut().rev() {
     42,628 ( 0.00%)              if invalidate_caches {
          .                           scope.invalidate_cache();
          .                       }
          .           
     39,299 ( 0.00%)              if scope.region_scope == region_scope {
    127,884 ( 0.00%)                  let region_scope_span = region_scope.span(self.tcx, &self.region_scope_tree);
          .                           // Attribute scope exit drops to scope's closing brace.
     85,256 ( 0.00%)                  let scope_end = self.tcx.sess.source_map().end_point(region_scope_span);
          .           
          .                           scope.drops.push(DropData {
     21,314 ( 0.00%)                      source_info: SourceInfo { span: scope_end, scope: scope.source_scope },
          .                               local,
          .                               kind: drop_kind,
          .                           });
          .           
          .                           return;
          .                       }
          .                   }
          .           
          .                   span_bug!(span, "region scope {:?} not in scope to drop {:?}", region_scope, local);
    203,232 ( 0.00%)      }
          .           
          .               /// Indicates that the "local operand" stored in `local` is
          .               /// *moved* at some point during execution (see `local_scope` for
          .               /// more information about what a "local operand" is -- in short,
          .               /// it's an intermediate operand created as part of preparing some
          .               /// MIR instruction). We use this information to suppress
          .               /// redundant drops on the non-unwind paths. This results in less
          .               /// MIR, but also avoids spurious borrow check errors
-- line 942 ----------------------------------------
-- line 965 ----------------------------------------
          .               /// However, `_X` is still registered to be dropped, and so if we
          .               /// do nothing else, we would generate a `DROP(_X)` that occurs
          .               /// after the call. This will later be optimized out by the
          .               /// drop-elaboation code, but in the meantime it can lead to
          .               /// spurious borrow-check errors -- the problem, ironically, is
          .               /// not the `DROP(_X)` itself, but the (spurious) unwind pathways
          .               /// that it creates. See #64391 for an example.
          .               crate fn record_operands_moved(&mut self, operands: &[Operand<'tcx>]) {
     19,316 ( 0.00%)          let local_scope = self.local_scope();
          .                   let scope = self.scopes.scopes.last_mut().unwrap();
          .           
     28,974 ( 0.00%)          assert_eq!(scope.region_scope, local_scope, "local scope is not the topmost scope!",);
          .           
          .                   // look for moves of a local variable, like `MOVE(_X)`
      2,734 ( 0.00%)          let locals_moved = operands.iter().flat_map(|operand| match operand {
          .                       Operand::Copy(_) | Operand::Constant(_) => None,
          .                       Operand::Move(place) => place.as_local(),
          .                   });
          .           
     48,290 ( 0.00%)          for local in locals_moved {
          .                       // check if we have a Drop for this operand and -- if so
          .                       // -- add it to the list of moved operands. Note that this
          .                       // local might not have been an operand created for this
          .                       // call, it could come from other places too.
          .                       if scope.drops.iter().any(|drop| drop.local == local && drop.kind == DropKind::Value) {
          .                           scope.moved_locals.push(local);
          .                       }
          .                   }
          .               }
          .           
          .               // Other
          .               // =====
          .               /// Returns the [DropIdx] for the innermost drop if the function unwound at
          .               /// this point. The `DropIdx` will be created if it doesn't already exist.
     79,656 ( 0.00%)      fn diverge_cleanup(&mut self) -> DropIdx {
      9,957 ( 0.00%)          let is_generator = self.generator_kind.is_some();
          .                   let (uncached_scope, mut cached_drop) = self
          .                       .scopes
          .                       .scopes
          .                       .iter()
          .                       .enumerate()
          .                       .rev()
          .                       .find_map(|(scope_idx, scope)| {
     51,332 ( 0.00%)                  scope.cached_unwind_block.map(|cached_block| (scope_idx + 1, cached_block))
          .                       })
          .                       .unwrap_or((0, ROOT_NODE));
          .           
          .                   for scope in &mut self.scopes.scopes[uncached_scope..] {
          .                       for drop in &scope.drops {
 22,474,804 ( 0.52%)                  if is_generator || drop.kind == DropKind::Value {
100,754,064 ( 2.33%)                      cached_drop = self.scopes.unwind_drops.add_drop(*drop, cached_drop);
          .                           }
          .                       }
     22,004 ( 0.00%)              scope.cached_unwind_block = Some(cached_drop);
          .                   }
          .           
          .                   cached_drop
     89,613 ( 0.00%)      }
          .           
          .               /// Prepares to create a path that performs all required cleanup for a
          .               /// terminator that can unwind at the given basic block.
          .               ///
          .               /// This path terminates in Resume. The path isn't created until after all
          .               /// of the non-unwind paths in this item have been lowered.
          .               crate fn diverge_from(&mut self, start: BasicBlock) {
          .                   debug_assert!(
-- line 1030 ----------------------------------------
-- line 1034 ----------------------------------------
          .                               | TerminatorKind::Call { .. }
          .                               | TerminatorKind::DropAndReplace { .. }
          .                               | TerminatorKind::FalseUnwind { .. }
          .                               | TerminatorKind::InlineAsm { .. }
          .                       ),
          .                       "diverge_from called on block with terminator that cannot unwind."
          .                   );
          .           
     29,265 ( 0.00%)          let next_drop = self.diverge_cleanup();
          .                   self.scopes.unwind_drops.add_entry(start, next_drop);
          .               }
          .           
          .               /// Sets up a path that performs all required cleanup for dropping a
          .               /// generator, starting from the given block that ends in
          .               /// [TerminatorKind::Yield].
          .               ///
          .               /// This path terminates in GeneratorDrop.
-- line 1050 ----------------------------------------
-- line 1081 ----------------------------------------
          .               crate fn build_drop_and_replace(
          .                   &mut self,
          .                   block: BasicBlock,
          .                   span: Span,
          .                   place: Place<'tcx>,
          .                   value: Operand<'tcx>,
          .               ) -> BlockAnd<()> {
          .                   let source_info = self.source_info(span);
          8 ( 0.00%)          let next_target = self.cfg.start_new_block();
          .           
          .                   self.cfg.terminate(
          .                       block,
          .                       source_info,
          .                       TerminatorKind::DropAndReplace { place, value, target: next_target, unwind: None },
          .                   );
          .                   self.diverge_from(block);
          .           
          .                   next_target.unit()
          .               }
          .           
          .               /// Creates an `Assert` terminator and return the success block.
          .               /// If the boolean condition operand is not the expected value,
          .               /// a runtime panic will be caused with the given message.
        741 ( 0.00%)      crate fn assert(
          .                   &mut self,
          .                   block: BasicBlock,
          .                   cond: Operand<'tcx>,
          .                   expected: bool,
          .                   msg: AssertMessage<'tcx>,
          .                   span: Span,
          .               ) -> BasicBlock {
          .                   let source_info = self.source_info(span);
        114 ( 0.00%)          let success_block = self.cfg.start_new_block();
          .           
          .                   self.cfg.terminate(
          .                       block,
          .                       source_info,
        228 ( 0.00%)              TerminatorKind::Assert { cond, expected, msg, target: success_block, cleanup: None },
          .                   );
          .                   self.diverge_from(block);
          .           
          .                   success_block
        456 ( 0.00%)      }
          .           
          .               /// Unschedules any drops in the top scope.
          .               ///
          .               /// This is only needed for `match` arm scopes, because they have one
          .               /// entrance per pattern, but only one exit.
          .               crate fn clear_top_scope(&mut self, region_scope: region::Scope) {
          .                   let top_scope = self.scopes.scopes.last_mut().unwrap();
          .           
-- line 1131 ----------------------------------------
-- line 1132 ----------------------------------------
          .                   assert_eq!(top_scope.region_scope, region_scope);
          .           
          .                   top_scope.drops.clear();
          .                   top_scope.invalidate_cache();
          .               }
          .           }
          .           
          .           /// Builds drops for `pop_scope` and `leave_top_scope`.
    285,692 ( 0.01%)  fn build_scope_drops<'tcx>(
          .               cfg: &mut CFG<'tcx>,
          .               unwind_drops: &mut DropTree,
          .               scope: &Scope,
          .               mut block: BasicBlock,
          .               mut unwind_to: DropIdx,
          .               storage_dead_on_unwind: bool,
          .               arg_count: usize,
          .           ) -> BlockAnd<()> {
-- line 1148 ----------------------------------------
-- line 1163 ----------------------------------------
          .               // another set of arrows).
          .               //
          .               // For generators, we unwind from a drop on a local to its StorageDead
          .               // statement. For other functions we don't worry about StorageDead. The
          .               // drops for the unwind path should have already been generated by
          .               // `diverge_cleanup_gen`.
          .           
          .               for drop_data in scope.drops.iter().rev() {
     51,358 ( 0.00%)          let source_info = drop_data.source_info;
     21,314 ( 0.00%)          let local = drop_data.local;
          .           
     42,628 ( 0.00%)          match drop_data.kind {
          .                       DropKind::Value => {
          .                           // `unwind_to` should drop the value that we're about to
          .                           // schedule. If dropping this value panics, then we continue
          .                           // with the *next* value on the unwind path.
          .                           debug_assert_eq!(unwind_drops.drops[unwind_to].0.local, drop_data.local);
          .                           debug_assert_eq!(unwind_drops.drops[unwind_to].0.kind, drop_data.kind);
     53,046 ( 0.00%)                  unwind_to = unwind_drops.drops[unwind_to].1;
          .           
          .                           // If the operand has been moved, and we are not on an unwind
          .                           // path, then don't generate the drop. (We only take this into
          .                           // account for non-unwind paths so as not to disturb the
          .                           // caching mechanism.)
          .                           if scope.moved_locals.iter().any(|&o| o == local) {
          .                               continue;
          .                           }
          .           
          .                           unwind_drops.add_entry(block, unwind_to);
          .           
     35,216 ( 0.00%)                  let next = cfg.start_new_block();
          .                           cfg.terminate(
          .                               block,
          .                               source_info,
          .                               TerminatorKind::Drop { place: local.into(), target: next, unwind: None },
          .                           );
          .                           block = next;
          .                       }
          .                       DropKind::Storage => {
     24,946 ( 0.00%)                  if storage_dead_on_unwind {
          .                               debug_assert_eq!(unwind_drops.drops[unwind_to].0.local, drop_data.local);
          .                               debug_assert_eq!(unwind_drops.drops[unwind_to].0.kind, drop_data.kind);
          .                               unwind_to = unwind_drops.drops[unwind_to].1;
          .                           }
          .                           // Only temps and vars need their storage dead.
     24,946 ( 0.00%)                  assert!(local.index() > arg_count);
    124,730 ( 0.00%)                  cfg.push(block, Statement { source_info, kind: StatementKind::StorageDead(local) });
          .                       }
          .                   }
          .               }
          .               block.unit()
    233,748 ( 0.01%)  }
          .           
          .           impl<'a, 'tcx: 'a> Builder<'a, 'tcx> {
          .               /// Build a drop tree for a breakable scope.
          .               ///
          .               /// If `continue_block` is `Some`, then the tree is for `continue` inside a
          .               /// loop. Otherwise this is for `break` or `return`.
      4,600 ( 0.00%)      fn build_exit_tree(
          .                   &mut self,
          .                   mut drops: DropTree,
          .                   continue_block: Option<BasicBlock>,
          .               ) -> Option<BlockAnd<()>> {
        920 ( 0.00%)          let mut blocks = IndexVec::from_elem(None, &drops.drops);
        460 ( 0.00%)          blocks[ROOT_NODE] = continue_block;
          .           
      1,840 ( 0.00%)          drops.build_mir::<ExitScopes>(&mut self.cfg, &mut blocks);
          .           
          .                   // Link the exit drop tree to unwind drop tree.
          .                   if drops.drops.iter().any(|(drop, _)| drop.kind == DropKind::Value) {
         22 ( 0.00%)              let unwind_target = self.diverge_cleanup();
          .                       let mut unwind_indices = IndexVec::from_elem_n(unwind_target, 1);
          .                       for (drop_idx, drop_data) in drops.drops.iter_enumerated().skip(1) {
         92 ( 0.00%)                  match drop_data.0.kind {
          .                               DropKind::Storage => {
         35 ( 0.00%)                          if self.generator_kind.is_some() {
          .                                       let unwind_drop = self
          .                                           .scopes
          .                                           .unwind_drops
          .                                           .add_drop(drop_data.0, unwind_indices[drop_data.1]);
          .                                       unwind_indices.push(unwind_drop);
          .                                   } else {
         35 ( 0.00%)                              unwind_indices.push(unwind_indices[drop_data.1]);
          .                                   }
          .                               }
          .                               DropKind::Value => {
         22 ( 0.00%)                          let unwind_drop = self
          .                                       .scopes
          .                                       .unwind_drops
         77 ( 0.00%)                              .add_drop(drop_data.0, unwind_indices[drop_data.1]);
          .                                   self.scopes
          .                                       .unwind_drops
         33 ( 0.00%)                              .add_entry(blocks[drop_idx].unwrap(), unwind_indices[drop_data.1]);
          .                                   unwind_indices.push(unwind_drop);
          .                               }
          .                           }
          .                       }
          .                   }
        460 ( 0.00%)          blocks[ROOT_NODE].map(BasicBlock::unit)
      5,060 ( 0.00%)      }
          .           
          .               /// Build the unwind and generator drop trees.
      2,816 ( 0.00%)      crate fn build_drop_trees(&mut self) {
        352 ( 0.00%)          if self.generator_kind.is_some() {
          .                       self.build_generator_drop_trees();
          .                   } else {
      1,056 ( 0.00%)              Self::build_unwind_tree(
        352 ( 0.00%)                  &mut self.cfg,
        352 ( 0.00%)                  &mut self.scopes.unwind_drops,
        352 ( 0.00%)                  self.fn_span,
        704 ( 0.00%)                  &mut None,
          .                       );
          .                   }
      2,816 ( 0.00%)      }
          .           
          .               fn build_generator_drop_trees(&mut self) {
          .                   // Build the drop tree for dropping the generator while it's suspended.
          .                   let drops = &mut self.scopes.generator_drops;
          .                   let cfg = &mut self.cfg;
          .                   let fn_span = self.fn_span;
          .                   let mut blocks = IndexVec::from_elem(None, &drops.drops);
          .                   drops.build_mir::<GeneratorDrop>(cfg, &mut blocks);
-- line 1284 ----------------------------------------
-- line 1306 ----------------------------------------
          .                       if let DropKind::Value = drop_data.0.kind {
          .                           debug_assert!(drop_data.1 < drops.drops.next_index());
          .                           drops.entry_points.push((drop_data.1, blocks[drop_idx].unwrap()));
          .                       }
          .                   }
          .                   Self::build_unwind_tree(cfg, drops, fn_span, resume_block);
          .               }
          .           
      3,520 ( 0.00%)      fn build_unwind_tree(
          .                   cfg: &mut CFG<'tcx>,
          .                   drops: &mut DropTree,
          .                   fn_span: Span,
          .                   resume_block: &mut Option<BasicBlock>,
          .               ) {
        704 ( 0.00%)          let mut blocks = IndexVec::from_elem(None, &drops.drops);
      1,056 ( 0.00%)          blocks[ROOT_NODE] = *resume_block;
      1,056 ( 0.00%)          drops.build_mir::<Unwind>(cfg, &mut blocks);
      1,408 ( 0.00%)          if let (None, Some(resume)) = (*resume_block, blocks[ROOT_NODE]) {
          .                       cfg.terminate(resume, SourceInfo::outermost(fn_span), TerminatorKind::Resume);
          .           
        362 ( 0.00%)              *resume_block = blocks[ROOT_NODE];
          .                   }
      2,464 ( 0.00%)      }
          .           }
          .           
          .           // DropTreeBuilder implementations.
          .           
          .           struct ExitScopes;
          .           
          .           impl<'tcx> DropTreeBuilder<'tcx> for ExitScopes {
          .               fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {
        616 ( 0.00%)          cfg.start_new_block()
          .               }
          .               fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {
      4,144 ( 0.00%)          cfg.block_data_mut(from).terminator_mut().kind = TerminatorKind::Goto { target: to };
          .               }
          .           }
          .           
          .           struct GeneratorDrop;
          .           
          .           impl<'tcx> DropTreeBuilder<'tcx> for GeneratorDrop {
          .               fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {
          .                   cfg.start_new_block()
-- line 1348 ----------------------------------------
-- line 1364 ----------------------------------------
          .           struct Unwind;
          .           
          .           impl<'tcx> DropTreeBuilder<'tcx> for Unwind {
          .               fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {
          .                   cfg.start_new_cleanup_block()
          .               }
          .               fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {
          .                   let term = &mut cfg.block_data_mut(from).terminator_mut();
     92,850 ( 0.00%)          match &mut term.kind {
          .                       TerminatorKind::Drop { unwind, .. }
          .                       | TerminatorKind::DropAndReplace { unwind, .. }
          .                       | TerminatorKind::FalseUnwind { unwind, .. }
     19,316 ( 0.00%)              | TerminatorKind::Call { cleanup: unwind, .. }
          .                       | TerminatorKind::Assert { cleanup: unwind, .. }
          .                       | TerminatorKind::InlineAsm { cleanup: unwind, .. } => {
     18,570 ( 0.00%)                  *unwind = Some(to);
          .                       }
          .                       TerminatorKind::Goto { .. }
          .                       | TerminatorKind::SwitchInt { .. }
          .                       | TerminatorKind::Resume
          .                       | TerminatorKind::Abort
          .                       | TerminatorKind::Return
          .                       | TerminatorKind::Unreachable
          .                       | TerminatorKind::Yield { .. }
-- line 1387 ----------------------------------------

    380,159 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/scope.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           pub fn move_path_children_matching<'tcx, F>(
        .               move_data: &MoveData<'tcx>,
        .               path: MovePathIndex,
        .               mut cond: F,
        .           ) -> Option<MovePathIndex>
        .           where
        .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
        .           {
       94 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
      252 ( 0.00%)      while let Some(child_index) = next_child {
        .                   let move_path_children = &move_data.move_paths[child_index];
      188 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
      314 ( 0.00%)              if cond(elem) {
        .                           return Some(child_index);
        .                       }
        .                   }
        .                   next_child = move_path_children.next_sibling;
        .               }
        .           
        .               None
        .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
2,897,908 ( 0.07%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
  164,610 ( 0.00%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  121,500 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
3,970,584 ( 0.09%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
  992,646 ( 0.02%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
3,970,584 ( 0.09%)      }
        .           
4,561,077 ( 0.11%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
   28,141 ( 0.00%)          each_child(move_path_index);
        .           
3,491,913 ( 0.08%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  456,109 ( 0.01%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  920,600 ( 0.02%)          while let Some(child_index) = next_child_index {
   13,050 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
    2,175 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
3,894,256 ( 0.09%)      }
2,921,064 ( 0.07%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  378,062 ( 0.01%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
  176,468 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
   44,117 ( 0.00%)          let ty = place.ty(body, tcx).ty;
        .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
        .           
      288 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
  273,443 ( 0.01%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
   44,117 ( 0.00%)              each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
   31,909 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
    2,852 ( 0.00%)      for arg in body.args_iter() {
    3,756 ( 0.00%)          let place = mir::Place::from(arg);
    5,634 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    1,902 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
   22,816 ( 0.00%)  }
        .           
4,422,417 ( 0.10%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  174,059 ( 0.00%)      for mi in &move_data.loc_map[loc] {
1,422,757 ( 0.03%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  362,651 ( 0.01%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
   28,141 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
3,466,880 ( 0.08%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  174,059 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
  379,852 ( 0.01%)          let init = move_data.inits[*ii];
  324,854 ( 0.01%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
   20,004 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
    8,335 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
    5,741 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
      185 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
      740 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
      555 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
      185 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
      181 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
   13,336 ( 0.00%)  }

2,981,028 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 21 ----------------------------------------
        .           use rustc_target::spec::abi;
        .           use std::borrow::Cow;
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       33 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
      356 ( 0.00%)      pub ty: Ty<'tcx>,
    1,780 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
   29,296 ( 0.00%)      pub scope: DefId,
   45,493 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
  234,264 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
       23 ( 0.00%)  #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
   10,740 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
      254 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
    1,072 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
   45,076 ( 0.00%)      pub var: BoundVar,
   38,750 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
7,153,001 ( 0.17%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
    2,259 ( 0.00%)  #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
        .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  627,010 ( 0.01%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
  139,195 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  655,479 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
      688 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
        .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
    1,251 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
        3 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
        6 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       12 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
       55 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
      466 ( 0.00%)              [
      131 ( 0.00%)                  ref parent_substs @ ..,
      130 ( 0.00%)                  closure_kind_ty,
       62 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
       96 ( 0.00%)                  tupled_upvars_ty,
      220 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
      165 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        .               pub fn is_valid(self) -> bool {
        .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 383 ----------------------------------------
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
       12 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       33 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
       14 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        8 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      250 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
       29 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
       58 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
        2 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        2 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        4 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
       24 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
       48 ( 0.00%)          match ty.kind() {
       96 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
       72 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       10 ( 0.00%)          let tupled_tys = match self {
       13 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
       21 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
       18 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       16 ( 0.00%)          match self {
       18 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
      693 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
      574 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
        6 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
       30 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
       32 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
       36 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
       81 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
       45 ( 0.00%)          match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::Projection(p) => {
        .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::AutoTrait(did) => {
        .                           let trait_ref = self.rebind(ty::TraitRef {
        .                               def_id: did,
        .                               substs: tcx.mk_substs_trait(self_ty, &[]),
        .                           });
        .                           trait_ref.without_const().to_predicate(tcx)
        .                       }
        .                   }
       72 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        .               /// Returns the "principal `DefId`" of this set of existential predicates.
        .               ///
        .               /// A Rust trait object type consists (in addition to a lifetime bound)
        .               /// of a set of trait bounds, which are separated into any number
        .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
        .               /// are the set `{Sync}`.
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
        4 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
       49 ( 0.00%)          self[0]
       37 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
       16 ( 0.00%)              })
        .                       .transpose()
       12 ( 0.00%)      }
        .           
        9 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
       18 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn projection_bounds<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
        .                   self.iter().filter_map(|predicate| {
        .                       predicate
        8 ( 0.00%)                  .map_bound(|pred| match pred {
        .                               ExistentialPredicate::Projection(projection) => Some(projection),
        .                               _ => None,
        .                           })
        .                           .transpose()
        .                   })
        .               }
        .           
        .               #[inline]
-- line 874 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
   10,046 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
1,232,833 ( 0.03%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
      980 ( 0.00%)      pub def_id: DefId,
  927,437 ( 0.02%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
   18,527 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
   74,108 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      504 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      224 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      336 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      448 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
    1,008 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
      126 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    1,386 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
   56,412 ( 0.00%)          self.skip_binder().def_id
   18,804 ( 0.00%)      }
        .           
    2,441 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    4,882 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
    2,441 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       36 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      279 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
       42 ( 0.00%)      pub def_id: DefId,
      326 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
       12 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
        .                   trait_ref.substs.type_at(0);
        .           
        .                   ty::ExistentialTraitRef {
        .                       def_id: trait_ref.def_id,
        .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
        .                   // otherwise the escaping vars would be captured by the binder
        .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 994 ----------------------------------------
        .               pub fn def_id(&self) -> DefId {
        .                   self.skip_binder().def_id
        .               }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        6 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
       10 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        8 ( 0.00%)      }
        .           }
        .           
   14,893 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       60 ( 0.00%)  #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    2,045 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  435,599 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
   14,240 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
  178,426 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  380,308 ( 0.01%)          Binder(value, ty::List::empty())
   14,236 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
   53,580 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
  845,878 ( 0.02%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
    9,479 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    6,314 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
       24 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
   21,184 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
  414,197 ( 0.01%)          Binder(value, self.1)
       24 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
    6,168 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
   31,684 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  117,887 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      285 ( 0.00%)      }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
        .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
    1,183 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   47,701 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
   37,566 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   47,264 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
   16,114 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    4,604 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   18,416 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
   14,077 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    6,033 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
   10,055 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
   18,099 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
   20,691 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    2,299 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    2,299 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   25,289 ( 0.00%)      }
        .           
    4,591 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
   13,773 ( 0.00%)          self.substs.type_at(0)
    9,182 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
  146,967 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   61,877 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
    1,652 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
   19,247 ( 0.00%)      pub c_variadic: bool,
    3,385 ( 0.00%)      pub unsafety: hir::Unsafety,
   21,283 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
   64,379 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
  262,172 ( 0.01%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
  128,758 ( 0.00%)      }
        .           
   42,475 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
  300,406 ( 0.01%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
   84,950 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
   19,118 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    3,838 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      270 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
   45,632 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      540 ( 0.00%)          self.skip_binder().c_variadic
      270 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
   19,628 ( 0.00%)          self.skip_binder().unsafety
    9,814 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
   82,004 ( 0.00%)          self.skip_binder().abi
   20,501 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
       68 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        8 ( 0.00%)  #[derive(HashStable)]
        .           pub struct ParamTy {
   35,058 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
      330 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
      165 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
      274 ( 0.00%)          ParamTy::new(def.index, def.name)
      137 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       82 ( 0.00%)      pub index: u32,
       82 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
2,263,990 ( 0.05%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       32 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
   76,662 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
    5,100 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
   10,254 ( 0.00%)      pub def_id: DefId,
    9,358 ( 0.00%)      pub index: u32,
   28,444 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
    9,366 ( 0.00%)      pub index: u32,
       49 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
        .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
    1,251 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
   21,351 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
    1,962 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   60,842 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   64,262 ( 0.00%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
    4,813 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
    1,812 ( 0.00%)          match self.kind() {
      597 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
   43,672 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
   69,970 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   75,672 ( 0.00%)          match self.kind() {
    3,512 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
        9 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
-- line 1770 ----------------------------------------
-- line 1775 ----------------------------------------
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
      223 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
      116 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
        .               }
        .           
      514 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    1,028 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => ty,
        .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
        .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
        .                   }
      514 ( 0.00%)      }
        .           
        .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
        .                   match self.kind() {
        .                       Adt(def, substs) => {
        .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
        .                           let variant = def.non_enum_variant();
        .                           let f0_ty = variant.fields[0].ty(tcx, substs);
        .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
        .                           }
        .                       }
        .                       _ => bug!("`simd_size_and_type` called on invalid type"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_region_ptr(&self) -> bool {
       34 ( 0.00%)          matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_mutable_ptr(&self) -> bool {
        .                   matches!(
        .                       self.kind(),
        .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
        .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
    2,487 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
   77,074 ( 0.00%)          match self.kind() {
    3,171 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
        .               pub fn boxed_ty(&self) -> Ty<'tcx> {
        .                   match self.kind() {
        .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
      319 ( 0.00%)          matches!(
      744 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1912 ----------------------------------------
        .               /// Returns `true` if this type is a floating point type.
        .               #[inline]
        .               pub fn is_floating_point(&self) -> bool {
        .                   matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_trait(&self) -> bool {
        3 ( 0.00%)          matches!(self.kind(), Dynamic(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
      852 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
    6,272 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
      550 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
    1,400 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
    2,480 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
    2,573 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
        .                   matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
      468 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    4,814 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   29,498 ( 0.00%)          match self.kind() {
      274 ( 0.00%)              Adt(def, _) if def.is_box() => {
        .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
   18,494 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
        .                       RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    9,628 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      363 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
       57 ( 0.00%)      }
        .           
  387,656 ( 0.01%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
  193,828 ( 0.00%)          match self.kind() {
  145,371 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
  436,113 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
      114 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
        .                   matches!(self.kind(), FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    1,213 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
       39 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
      810 ( 0.00%)          match self.kind() {
      511 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       78 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
        6 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       12 ( 0.00%)          match self.kind() {
       12 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// If the type contains variants, returns the variant for `variant_index`.
        .               /// Panics if `variant_index` is out of range.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
       20 ( 0.00%)      pub fn discriminant_for_variant(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Option<Discr<'tcx>> {
    1,332 ( 0.00%)          match self.kind() {
      536 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
        .                           // This can actually happen during CTFE, see
        .                           // https://github.com/rust-lang/rust/issues/89765.
        .                           None
        .                       }
      268 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
        .                           Some(adt.discriminant_for_variant(tcx, variant_index))
        .                       }
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Returns the type of the discriminant of this type.
    4,220 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    2,110 ( 0.00%)          match self.kind() {
    3,376 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
    3,376 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        .               pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
       74 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
      148 ( 0.00%)          match self.kind() {
      148 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
       74 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
  243,972 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
  162,648 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
    1,336 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
    4,029 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
  243,972 ( 0.01%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
   27,128 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   40,692 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
   13,564 ( 0.00%)      }
        .           }

9,950,376 ( 0.23%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs
--------------------------------------------------------------------------------
Ir                  

-- line 63 ----------------------------------------
         .           /// assert!(iter.next().is_none());
         .           /// ```
         .           #[stable(feature = "iter_zip", since = "1.59.0")]
         .           pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>
         .           where
         .               A: IntoIterator,
         .               B: IntoIterator,
         .           {
    59,012 ( 0.00%)      ZipImpl::new(a.into_iter(), b.into_iter())
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A, B> Iterator for Zip<A, B>
         .           where
         .               A: Iterator,
         .               B: Iterator,
         .           {
-- line 79 ----------------------------------------
-- line 147 ----------------------------------------
         .                           index: 0, // unused
         .                           len: 0,   // unused
         .                           a_len: 0, // unused
         .                       }
         .                   }
         .           
         .                   #[inline]
         .                   default fn next(&mut self) -> Option<(A::Item, B::Item)> {
    90,924 ( 0.00%)              let x = self.a.next()?;
    15,140 ( 0.00%)              let y = self.b.next()?;
     4,962 ( 0.00%)              Some((x, y))
    19,730 ( 0.00%)          }
         .           
         .                   #[inline]
         .                   default fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                       self.super_nth(n)
         .                   }
         .           
         .                   #[inline]
         .                   default fn next_back(&mut self) -> Option<(A::Item, B::Item)>
-- line 166 ----------------------------------------
-- line 204 ----------------------------------------
         .           {
         .               type Item = (A::Item, B::Item);
         .           
         .               zip_impl_general_defaults! {}
         .           
         .               #[inline]
         .               default fn size_hint(&self) -> (usize, Option<usize>) {
         .                   let (a_lower, a_upper) = self.a.size_hint();
         2 ( 0.00%)          let (b_lower, b_upper) = self.b.size_hint();
         .           
         .                   let lower = cmp::min(a_lower, b_lower);
         .           
         .                   let upper = match (a_upper, b_upper) {
         .                       (Some(x), Some(y)) => Some(cmp::min(x, y)),
         .                       (Some(x), None) => Some(x),
         .                       (None, Some(y)) => Some(y),
         .                       (None, None) => None,
-- line 220 ----------------------------------------
-- line 236 ----------------------------------------
         .           where
         .               A: TrustedRandomAccessNoCoerce + Iterator,
         .               B: TrustedRandomAccessNoCoerce + Iterator,
         .           {
         .               zip_impl_general_defaults! {}
         .           
         .               #[inline]
         .               default fn size_hint(&self) -> (usize, Option<usize>) {
        28 ( 0.00%)          let size = cmp::min(self.a.size(), self.b.size());
         .                   (size, Some(size))
         .               }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {
         4 ( 0.00%)          let idx = self.index + idx;
         .                   // SAFETY: the caller must uphold the contract for
         .                   // `Iterator::__iterator_get_unchecked`.
         .                   unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }
         .               }
         .           }
         .           
         .           #[doc(hidden)]
         .           impl<A, B> ZipImpl<A, B> for Zip<A, B>
         .           where
         .               A: TrustedRandomAccess + Iterator,
         .               B: TrustedRandomAccess + Iterator,
         .           {
         .               fn new(a: A, b: B) -> Self {
         .                   let a_len = a.size();
         .                   let len = cmp::min(a_len, b.size());
       343 ( 0.00%)          Zip { a, b, index: 0, len, a_len }
         .               }
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<(A::Item, B::Item)> {
12,086,466 ( 0.28%)          if self.index < self.len {
         .                       let i = self.index;
         .                       // since get_unchecked executes code which can panic we increment the counters beforehand
         .                       // so that the same index won't be accessed twice, as required by TrustedRandomAccess
 4,945,650 ( 0.11%)              self.index += 1;
         .                       // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`
         .                       unsafe {
        66 ( 0.00%)                  Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))
         .                       }
         8 ( 0.00%)          } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {
         .                       let i = self.index;
         .                       // as above, increment before executing code that may panic
         .                       self.index += 1;
         .                       self.len += 1;
         .                       // match the base implementation's potential side effects
         .                       // SAFETY: we just checked that `i` < `self.a.len()`
         .                       unsafe {
         .                           self.a.__iterator_get_unchecked(i);
-- line 288 ----------------------------------------
-- line 290 ----------------------------------------
         .                       None
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
   105,864 ( 0.00%)          let len = self.len - self.index;
       384 ( 0.00%)          (len, Some(len))
         .               }
         .           
         .               #[inline]
         .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
         .                   let delta = cmp::min(n, self.len - self.index);
         .                   let end = self.index + delta;
         .                   while self.index < end {
         .                       let i = self.index;
-- line 307 ----------------------------------------
-- line 535 ----------------------------------------
         .           #[unstable(feature = "trusted_random_access", issue = "none")]
         .           #[rustc_specialization_trait]
         .           pub unsafe trait TrustedRandomAccessNoCoerce: Sized {
         .               // Convenience method.
         .               fn size(&self) -> usize
         .               where
         .                   Self: Iterator,
         .               {
       532 ( 0.00%)          self.size_hint().0
         .               }
         .               /// `true` if getting an iterator element may have side effects.
         .               /// Remember to take inner iterators into account.
         .               const MAY_HAVE_SIDE_EFFECT: bool;
         .           }
         .           
         .           /// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to
         .           /// know that `U: TrustedRandomAccess`.
-- line 551 ----------------------------------------
-- line 555 ----------------------------------------
         .           /// Same requirements calling `get_unchecked` directly.
         .           #[doc(hidden)]
         .           pub(in crate::iter::adapters) unsafe fn try_get_unchecked<I>(it: &mut I, idx: usize) -> I::Item
         .           where
         .               I: Iterator,
         .           {
         .               // SAFETY: the caller must uphold the contract for
         .               // `Iterator::__iterator_get_unchecked`.
     3,322 ( 0.00%)      unsafe { it.try_get_unchecked(idx) }
         .           }
         .           
         .           unsafe trait SpecTrustedRandomAccess: Iterator {
         .               /// If `Self: TrustedRandomAccess`, it must be safe to call
         .               /// `Iterator::__iterator_get_unchecked(self, index)`.
         .               unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item;
         .           }
         .           
-- line 571 ----------------------------------------

   727,302 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
  1,932,917 ( 0.04%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
     91,749 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
 69,753,379 ( 1.62%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
    490,108 ( 0.01%)          self.stride += Group::WIDTH;
    490,108 ( 0.01%)          self.pos += self.stride;
    463,979 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    152,682 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
    345,280 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
     43,710 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
    377,982 ( 0.01%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
     70,500 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
    327,924 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
    426,212 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
        974 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
        954 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        210 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
      4,223 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
     18,483 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
     18,483 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
     36,966 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
      7,038 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
     29,928 ( 0.00%)          self.erase_no_drop(&item);
         38 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
    740,972 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
      1,212 ( 0.00%)          match self.find(hash, eq) {
     41,840 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    256,512 ( 0.01%)              None => None,
          .                   }
  1,086,366 ( 0.03%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     11,538 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    272,320 ( 0.01%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
    262,124 ( 0.01%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
    639,192 ( 0.01%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
    495,080 ( 0.01%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,401,262 ( 0.06%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
      3,169 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  1,904,837 ( 0.04%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
  1,782,917 ( 0.04%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
    333,488 ( 0.01%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
         50 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
    250,116 ( 0.01%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     10,837 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
    225,453 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
      6,638 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
    531,548 ( 0.01%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
    417,455 ( 0.01%)          self.table.items += 1;
          .                   bucket
     21,656 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
      3,222 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      4,796 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
     48,149 ( 0.00%)              eq(self.bucket(index).as_ref())
      1,584 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
        478 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
      3,240 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     35,974 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
         28 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     11,361 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
         32 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  1,819,025 ( 0.04%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
          .                   let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    233,490 ( 0.01%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
      4,600 ( 0.00%)          let allocation = self.into_allocation();
      3,450 ( 0.00%)          RawIntoIter {
      5,750 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      2,503 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
        289 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  1,027,318 ( 0.02%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
    638,694 ( 0.01%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    131,766 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
    350,892 ( 0.01%)          Ok(Self {
          .                       ctrl,
    134,865 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
    464,784 ( 0.01%)      }
          .           
          .               #[inline]
     14,393 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
      3,860 ( 0.00%)          if capacity == 0 {
      2,378 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
    290,182 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
      8,308 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
     14,393 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
     80,928 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
     80,928 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
    161,856 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  1,221,353 ( 0.03%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  3,614,169 ( 0.08%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
  1,677,667 ( 0.04%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    280,152 ( 0.01%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 16,708,546 ( 0.39%)              for bit in group.match_byte(h2_hash) {
 44,910,904 ( 1.04%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
  7,827,255 ( 0.18%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  1,435,300 ( 0.03%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
  4,659,136 ( 0.11%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
138,832,111 ( 3.22%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  2,380,580 ( 0.06%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
  1,904,428 ( 0.04%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
          .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
  3,450,760 ( 0.08%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  1,150,248 ( 0.03%)          *self.ctrl(index) = ctrl;
  1,150,592 ( 0.03%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
    567,137 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
    340,713 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
  1,832,980 ( 0.04%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
      2,361 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
    160,254 ( 0.00%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
     75,743 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    151,487 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    151,486 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
    314,257 ( 0.01%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          .                       Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
     75,743 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
      5,917 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
    731,357 ( 0.02%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
     75,743 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
     59,330 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
     27,811 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
     48,304 ( 0.00%)          self.items = 0;
     27,812 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
     88,809 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
    355,236 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
    433,675 ( 0.01%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
    355,236 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      2,560 ( 0.00%)      fn clone(&self) -> Self {
        364 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
      2,880 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
         84 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
    703,516 ( 0.02%)      fn drop(&mut self) {
    781,135 ( 0.02%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
    763,880 ( 0.02%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      4,600 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
      5,750 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
    387,469 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
     65,582 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    111,965 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
    397,237 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
      8,340 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     11,686 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     12,804 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
        813 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     83,748 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    189,008 ( 0.00%)          if let Some(b) = self.iter.next() {
    467,203 ( 0.01%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    167,496 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      1,244 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
     12,085 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
         66 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      1,485 ( 0.00%)      fn next(&mut self) -> Option<T> {
      1,884 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      2,977 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          4 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
        896 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
        112 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
        896 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 25,941,459 ( 0.60%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 97 ----------------------------------------
        .           
        .               /// If true, the capture is behind a reference.
        .               by_ref: bool,
        .           }
        .           
        .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
        .           
        .           pub fn provide(providers: &mut Providers) {
        4 ( 0.00%)      *providers = Providers {
        .                   mir_borrowck: |tcx, did| {
      352 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
        .                           tcx.mir_borrowck_const_arg(def)
        .                       } else {
    1,408 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
        .                       }
        .                   },
        .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
        .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
        .                   },
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
    3,520 ( 0.00%)  fn mir_borrowck<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               def: ty::WithOptConstParam<LocalDefId>,
        .           ) -> &'tcx BorrowCheckResult<'tcx> {
        .               let (input_body, promoted) = tcx.mir_promoted(def);
        .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
        .           
    4,576 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
        .                   let input_body: &Body<'_> = &input_body.borrow();
        .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
    4,928 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    1,408 ( 0.00%)      });
        .               debug!("mir_borrowck done");
        .           
      352 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
    2,816 ( 0.00%)  }
        .           
        .           /// Perform the actual borrow checking.
        .           ///
        .           /// If `return_body_with_facts` is true, then return the body with non-erased
        .           /// region ids on which the borrow checking was performed together with Polonius
        .           /// facts.
    7,744 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
        .           fn do_mir_borrowck<'a, 'tcx>(
        .               infcx: &InferCtxt<'a, 'tcx>,
        .               input_body: &Body<'tcx>,
        .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               return_body_with_facts: bool,
        .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
    3,520 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
        .           
        .               debug!(?def);
        .           
      704 ( 0.00%)      let tcx = infcx.tcx;
        .               let param_env = tcx.param_env(def.did);
      352 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
        .           
      704 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
        .               for var_debug_info in &input_body.var_debug_info {
    2,697 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
    1,344 ( 0.00%)              if let Some(local) = place.as_local() {
    2,013 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
        .                               if var_debug_info.name != prev_name {
        .                                   span_bug!(
        .                                       var_debug_info.source_info.span,
        .                                       "local {:?} has many names (`{}` vs `{}`)",
        .                                       local,
        .                                       prev_name,
        .                                       var_debug_info.name
        .                                   );
        .                               }
        .                           }
    2,013 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
        .                       }
        .                   }
        .               }
        .           
        .               // Gather the upvars of a closure, if any.
    1,408 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
      704 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
        .                   infcx.set_tainted_by_errors();
        .               }
    1,408 ( 0.00%)      let upvars: Vec<_> = tables
        .                   .closure_min_captures_flattened(def.did.to_def_id())
        .                   .map(|captured_place| {
        .                       let capture = captured_place.info.capture_kind;
        2 ( 0.00%)              let by_ref = match capture {
        .                           ty::UpvarCapture::ByValue => false,
        .                           ty::UpvarCapture::ByRef(..) => true,
        .                       };
        .                       Upvar { place: captured_place.clone(), by_ref }
        .                   })
        .                   .collect();
        .           
        .               // Replace all regions with fresh inference variables. This
        .               // requires first making our own copy of the MIR. This copy will
        .               // be modified (in place) to contain non-lexical lifetimes. It
        .               // will have a lifetime tied to the inference context.
      704 ( 0.00%)      let mut body_owned = input_body.clone();
        .               let mut promoted = input_promoted.clone();
        .               let free_regions =
    1,056 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
        .               let body = &body_owned; // no further changes
        .           
      352 ( 0.00%)      let location_table_owned = LocationTable::new(body);
        .               let location_table = &location_table_owned;
        .           
        .               let mut errors_buffer = Vec::new();
    1,056 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
    2,464 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
    2,112 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
        .                       Err((move_data, move_errors)) => (move_data, move_errors),
        .                   };
        .               let promoted_errors = promoted
        .                   .iter_enumerated()
    1,850 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
        .           
    2,112 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
        .           
    2,816 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
      352 ( 0.00%)          .into_engine(tcx, &body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint()
        .                   .into_results_cursor(&body);
        .           
    4,224 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
        .               let borrow_set =
    3,520 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
        .           
    1,760 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
        .           
        .               // Compute non-lexical lifetimes.
        .               let nll::NllOutput {
    1,056 ( 0.00%)          regioncx,
    1,408 ( 0.00%)          opaque_type_values,
      704 ( 0.00%)          polonius_input,
    1,056 ( 0.00%)          polonius_output,
    1,408 ( 0.00%)          opt_closure_req,
    3,520 ( 0.00%)          nll_errors,
    6,336 ( 0.00%)      } = nll::compute_regions(
        .                   infcx,
    5,632 ( 0.00%)          free_regions,
        .                   body,
        .                   &promoted,
        .                   location_table,
        .                   param_env,
        .                   &mut flow_inits,
        .                   &mdpe.move_data,
        .                   &borrow_set,
        .                   &upvars,
        .                   use_polonius,
        .               );
        .           
        .               // Dump MIR results into a file, if that is enabled. This let us
        .               // write unit-tests, as well as helping with debugging.
    1,056 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
        .           
        .               // We also have a `#[rustc_regions]` annotation that causes us to dump
        .               // information.
      704 ( 0.00%)      nll::dump_annotation(
        .                   infcx,
        .                   &body,
        .                   &regioncx,
        .                   &opt_closure_req,
        .                   &opaque_type_values,
        .                   &mut errors_buffer,
        .               );
        .           
        .               // The various `flow_*` structures can be large. We drop `flow_inits` here
        .               // so it doesn't overlap with the others below. This reduces peak memory
        .               // usage significantly on some benchmarks.
    5,632 ( 0.00%)      drop(flow_inits);
        .           
      352 ( 0.00%)      let regioncx = Rc::new(regioncx);
        .           
    2,112 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
      352 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
    2,112 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
      352 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
    2,112 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
      352 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
        .           
      716 ( 0.00%)      let movable_generator = !matches!(
    2,124 ( 0.00%)          tcx.hir().get(id),
        .                   Node::Expr(&hir::Expr {
        .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
        .                       ..
        .                   })
        .               );
        .           
    1,295 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
        .                   let promoted_body = &promoted[idx];
        .           
      370 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
        .                       let mut promoted_mbcx = MirBorrowckCtxt {
        .                           infcx,
        .                           param_env,
        .                           body: promoted_body,
        .                           move_data: &move_data,
        .                           location_table, // no need to create a real one for the promoted, it is not used
        .                           movable_generator,
        .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
        .                       };
        .                       promoted_mbcx.report_move_errors(move_errors);
        .                       errors_buffer = promoted_mbcx.errors_buffer;
        .                   };
        .               }
        .           
        .               let dominators = body.dominators();
        .           
   15,840 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
        .                   infcx,
        .                   param_env,
        .                   body,
        .                   move_data: &mdpe.move_data,
        .                   location_table,
        .                   movable_generator,
        .                   locals_are_invalidated_at_exit,
        .                   fn_self_span_reported: Default::default(),
        .                   access_place_error_reported: Default::default(),
        .                   reservation_error_reported: Default::default(),
        .                   reservation_warnings: Default::default(),
        .                   move_error_reported: BTreeMap::new(),
        .                   uninitialized_error_reported: Default::default(),
    1,408 ( 0.00%)          errors_buffer,
      352 ( 0.00%)          regioncx: Rc::clone(&regioncx),
        .                   used_mut: Default::default(),
        .                   used_mut_upvars: SmallVec::new(),
      352 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
    2,112 ( 0.00%)          dominators,
    1,408 ( 0.00%)          upvars,
    1,408 ( 0.00%)          local_names,
        .                   region_names: RefCell::default(),
        .                   next_region_name: RefCell::new(1),
        .                   polonius_output,
        .               };
        .           
        .               // Compute and report region errors, if any.
    1,056 ( 0.00%)      mbcx.report_region_errors(nll_errors);
        .           
        .               let results = BorrowckResults {
    2,112 ( 0.00%)          ever_inits: flow_ever_inits,
    2,816 ( 0.00%)          uninits: flow_uninits,
    3,872 ( 0.00%)          borrows: flow_borrows,
        .               };
        .           
    2,112 ( 0.00%)      mbcx.report_move_errors(move_errors);
        .           
      352 ( 0.00%)      rustc_mir_dataflow::visit_results(
        .                   body,
      352 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
        .                   &results,
        .                   &mut mbcx,
        .               );
        .           
        .               // Convert any reservation warnings into lints.
        .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
        .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
        .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
        .               // For each non-user used mutable variable, check if it's been assigned from
        .               // a user-declared local. If so, then put that local into the used_mut set.
        .               // Note that this set is expected to be small - only upvars from closures
        .               // would have a chance of erroneously adding non-user-defined mutable vars
        .               // to the set.
        .               let temporary_used_locals: FxHashSet<Local> = mbcx
        .                   .used_mut
        .                   .iter()
      352 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
        .                   .cloned()
        .                   .collect();
        .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
        .               // were never initialized. These locals may have been removed as unreachable code; or will be
        .               // linted as unused variables.
        .               let unused_mut_locals =
      352 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    1,408 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
        .           
        .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    1,408 ( 0.00%)      let used_mut = mbcx.used_mut;
      352 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
        3 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
       18 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
        .                       ClearCrossCrate::Set(data) => data.lint_root,
        .                       _ => continue,
        .                   };
        .           
        .                   // Skip over locals that begin with an underscore or have no name
        9 ( 0.00%)          match mbcx.local_names[local] {
        .                       Some(name) => {
        .                           if name.as_str().starts_with('_') {
        .                               continue;
        .                           }
        .                       }
        .                       None => continue,
        .                   }
        .           
-- line 442 ----------------------------------------
-- line 455 ----------------------------------------
        .                               String::new(),
        .                               Applicability::MachineApplicable,
        .                           )
        .                           .emit();
        .                   })
        .               }
        .           
        .               // Buffer any move errors that we collected and de-duplicated.
    3,168 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
        .                   diag.buffer(&mut mbcx.errors_buffer);
        .               }
        .           
      352 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
        .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
        .           
        .                   for diag in mbcx.errors_buffer.drain(..) {
        .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
        .                   }
        .               }
        .           
        .               let result = BorrowCheckResult {
    1,408 ( 0.00%)          concrete_opaque_types: opaque_type_values,
    1,760 ( 0.00%)          closure_requirements: opt_closure_req,
    2,112 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
        .               };
        .           
      704 ( 0.00%)      let body_with_facts = if return_body_with_facts {
        .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
        .                   Some(Box::new(BodyWithBorrowckFacts {
        .                       body: body_owned,
        .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
        .                       output_facts,
        .                       location_table: location_table_owned,
        .                   }))
        .               } else {
        .                   None
        .               };
        .           
        .               debug!("do_mir_borrowck: result = {:#?}", result);
        .           
    4,928 ( 0.00%)      (result, body_with_facts)
    4,224 ( 0.00%)  }
        .           
        .           /// A `Body` with information computed by the borrow checker. This struct is
        .           /// intended to be consumed by compiler consumers.
        .           ///
        .           /// We need to include the MIR body here because the region identifiers must
        .           /// match the ones in the Polonius facts.
        .           pub struct BodyWithBorrowckFacts<'tcx> {
        .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
        .           // Check that:
        .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
        .           // 2. loans made in overlapping scopes do not conflict
        .           // 3. assignments do not affect things loaned out as immutable
        .           // 4. moves do not affect things loaned out in any way
        .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
        .               type FlowState = Flows<'cx, 'tcx>;
        .           
  262,071 ( 0.01%)      fn visit_statement_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   stmt: &'cx Statement<'tcx>,
        .                   location: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
        .                   let span = stmt.source_info.span;
        .           
        .                   self.check_activations(location, span, flow_state);
        .           
  145,595 ( 0.00%)          match &stmt.kind {
    7,306 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
        .                           self.consume_rvalue(location, (rhs, span), flow_state);
        .           
   14,612 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
        .                       }
      245 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
        .                           // Read for match doesn't access any memory and is used to
        .                           // assert that a place is safe and live. So we don't have to
        .                           // do any checks here.
        .                           //
        .                           // FIXME: Remove check that the place is initialized. This is
        .                           // needed for now because matches don't have never patterns yet.
        .                           // So this is the only place we prevent
        .                           //      let x: !;
        .                           //      match x {};
        .                           // from compiling.
      980 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    2,205 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
        .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
        .                       }
        .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
        .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::AscribeUserType(..)
        .                       | StatementKind::Retag { .. }
        .                       | StatementKind::StorageLive(..) => {
        .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
        .                           // to borrow check.
        .                       }
        .                       StatementKind::StorageDead(local) => {
   77,562 ( 0.00%)                  self.access_place(
        .                               location,
  142,197 ( 0.00%)                      (Place::from(*local), span),
        .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                   }
  232,952 ( 0.01%)      }
        .           
  230,664 ( 0.01%)      fn visit_terminator_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
        .                   let span = term.source_info.span;
        .           
        .                   self.check_activations(loc, span, flow_state);
        .           
  144,165 ( 0.00%)          match term.kind {
    1,024 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
    1,024 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
        .                       }
   35,174 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
        .                           debug!(
        .                               "visit_terminator_drop \
        .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
        .                               loc, term, place, span
        .                           );
        .           
  105,522 ( 0.00%)                  self.access_place(
        .                               loc,
  158,283 ( 0.00%)                      (place, span),
        .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                       TerminatorKind::DropAndReplace {
        8 ( 0.00%)                  place: drop_place,
        4 ( 0.00%)                  value: ref new_value,
        .                           target: _,
        .                           unwind: _,
        .                       } => {
       64 ( 0.00%)                  self.mutate_place(loc, (drop_place, span), Deep, flow_state);
        .                           self.consume_operand(loc, (new_value, span), flow_state);
        .                       }
        .                       TerminatorKind::Call {
   28,974 ( 0.00%)                  ref func,
        .                           ref args,
        .                           ref destination,
        .                           cleanup: _,
        .                           from_hir_call: _,
        .                           fn_span: _,
        .                       } => {
   77,264 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
        .                           for arg in args {
    8,202 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
        .                           }
   38,610 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
  115,632 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
        .                           }
        .                       }
      342 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
       57 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
        .                           use rustc_middle::mir::AssertKind;
      150 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
      120 ( 0.00%)                      self.consume_operand(loc, (len, span), flow_state);
        .                               self.consume_operand(loc, (index, span), flow_state);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
        .                           self.consume_operand(loc, (value, span), flow_state);
        .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
        .                       }
-- line 749 ----------------------------------------
-- line 790 ----------------------------------------
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
        .                           // no data used, thus irrelevant to borrowck
        .                       }
        .                   }
  228,488 ( 0.01%)      }
        .           
  201,831 ( 0.00%)      fn visit_terminator_after_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
   28,833 ( 0.00%)          let span = term.source_info.span;
        .           
  115,332 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
        .                           if self.movable_generator {
        .                               // Look for any active borrows to locals
        .                               let borrow_set = self.borrow_set.clone();
        .                               for i in flow_state.borrows.iter() {
        .                                   let borrow = &borrow_set[i];
        .                                   self.check_for_local_borrow(borrow, span);
        .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
        .                           // Returning from the function implicitly kills storage for all locals and statics.
        .                           // Often, the storage will already have been killed by an explicit
        .                           // StorageDead, but we don't always emit those (notably on unwind paths),
        .                           // so this "extra check" serves as a kind of backup.
    1,066 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
        .                           for i in flow_state.borrows.iter() {
        .                               let borrow = &borrow_set[i];
        .                               self.check_for_invalidation_at_exit(loc, borrow, span);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Abort
        .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { .. }
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
        .                       | TerminatorKind::Goto { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::InlineAsm { .. } => {}
        .                   }
  230,664 ( 0.01%)      }
        .           }
        .           
        .           use self::AccessDepth::{Deep, Shallow};
        .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum ArtificialField {
        .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
        .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
        .           /// local place can be mutated.
        .           //
        .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
        .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
        .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
        .           //   `is_declared_mutable()`.
        .           // - Take flow state into consideration in `is_assignable()` for local variables.
   12,701 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum LocalMutationIsAllowed {
        .               Yes,
        .               /// We want use of immutable upvars to cause a "write to immutable upvar"
        .               /// error, not an "reassignment" error.
        .               ExceptUpvars,
        .               No,
        .           }
        .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
        .               }
        .           
        .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
        .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
        .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
        .               /// access.
        .               ///
        .               /// Returns `true` if an error is reported.
  902,016 ( 0.02%)      fn access_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: (AccessDepth, ReadOrWrite),
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let (sd, rw) = kind;
        .           
  225,504 ( 0.01%)          if let Activation(_, borrow_index) = rw {
      546 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
        .                           debug!(
        .                               "skipping access_place for activation of invalid reservation \
        .                                place: {:?} borrow_index: {:?}",
        .                               place_span.0, borrow_index
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Check is_empty() first because it's the common case, and doing that
        .                   // way we avoid the clone() call.
   56,376 ( 0.00%)          if !self.access_place_error_reported.is_empty()
        .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
        .                   {
        .                       debug!(
        .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
        .                           place_span, kind
        .                       );
        .                       return;
        .                   }
        .           
  338,256 ( 0.01%)          let mutability_error = self.check_access_permissions(
  225,504 ( 0.01%)              place_span,
        .                       rw,
        .                       is_local_mutation_allowed,
        .                       flow_state,
        .                       location,
        .                   );
        .                   let conflict_error =
  620,136 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
        .           
  169,128 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
        .                       // Suppress this warning when there's an error being emitted for the
        .                       // same borrow: fixing the error is likely to fix the warning.
        .                       self.reservation_warnings.remove(&borrow_idx);
        .                   }
        .           
  169,128 ( 0.00%)          if conflict_error || mutability_error {
        .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
        .           
        .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
        .                   }
  451,008 ( 0.01%)      }
        .           
        .               fn check_access_for_conflict(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   sd: AccessDepth,
        .                   rw: ReadOrWrite,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
        .                       location, place_span, sd, rw,
        .                   );
        .           
   56,376 ( 0.00%)          let mut error_reported = false;
  169,128 ( 0.00%)          let tcx = self.infcx.tcx;
        .                   let body = self.body;
  112,752 ( 0.00%)          let borrow_set = self.borrow_set.clone();
        .           
        .                   // Use polonius output if it has been enabled.
  112,752 ( 0.00%)          let polonius_output = self.polonius_output.clone();
        .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
        .                       let location = self.location_table.start_index(location);
        .                       Either::Left(polonius.errors_at(location).iter().copied())
        .                   } else {
        .                       Either::Right(flow_state.borrows.iter())
        .                   };
        .           
  732,888 ( 0.02%)          each_borrow_involving_path(
        .                       self,
        .                       tcx,
        .                       body,
        .                       location,
  338,256 ( 0.01%)              (sd, place_span.0),
        .                       &borrow_set,
  338,256 ( 0.01%)              borrows_in_scope,
  624,099 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
        .                           // Obviously an activation is compatible with its own
        .                           // reservation (or even prior activating uses of same
        .                           // borrow); so don't check if they interfere.
        .                           //
        .                           // NOTE: *reservations* do conflict with themselves;
        .                           // thus aren't injecting unsoundenss w/ this check.)
      273 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
        .                               debug!(
        .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
        .                                    skipping {:?} b/c activation of same borrow_index",
        .                                   place_span,
        .                                   sd,
        .                                   rw,
        .                                   (borrow_index, borrow),
        .                               );
-- line 1084 ----------------------------------------
-- line 1093 ----------------------------------------
        .           
        .                           (Write(WriteKind::Move), BorrowKind::Shallow) => {
        .                               // Handled by initialization checks.
        .                               Control::Continue
        .                           }
        .           
        .                           (Read(kind), BorrowKind::Unique | BorrowKind::Mut { .. }) => {
        .                               // Reading from mere reservations of mutable-borrows is OK.
       36 ( 0.00%)                      if !is_active(&this.dominators, borrow, location) {
       54 ( 0.00%)                          assert!(allow_two_phase_borrow(borrow.kind));
        .                                   return Control::Continue;
        .                               }
        .           
        .                               error_reported = true;
        .                               match kind {
        .                                   ReadKind::Copy => {
        .                                       this.report_use_while_mutably_borrowed(location, place_span, borrow)
        .                                           .buffer(&mut this.errors_buffer);
-- line 1110 ----------------------------------------
-- line 1179 ----------------------------------------
        .                                   }
        .                               }
        .                               Control::Break
        .                           }
        .                       },
        .                   );
        .           
        .                   error_reported
  169,128 ( 0.00%)      }
        .           
  132,930 ( 0.00%)      fn mutate_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: AccessDepth,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   // Write of P[i] or *P requires P init'd.
  119,637 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
        .           
        .                   // Special case: you can assign an immutable local variable
        .                   // (e.g., `x = ...`) so long as it has never been initialized
        .                   // before (at this point in the flow).
   13,293 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
   53,004 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
        .                           // check for reassignments to immutable local variables
        .                           self.check_if_reassignment_to_immutable_state(
        .                               location, local, place_span, flow_state,
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Otherwise, use the normal access permission rules.
  145,860 ( 0.00%)          self.access_place(
        .                       location,
   48,620 ( 0.00%)              place_span,
        .                       (kind, Write(WriteKind::Mutate)),
        .                       LocalMutationIsAllowed::No,
        .                       flow_state,
        .                   );
  106,344 ( 0.00%)      }
        .           
        .               fn consume_rvalue(
        .                   &mut self,
        .                   location: Location,
        .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   21,918 ( 0.00%)          match *rvalue {
    4,332 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
   16,236 ( 0.00%)                  let access_kind = match bk {
        .                               BorrowKind::Shallow => {
        .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
        .                               }
        .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
        .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
        .                                   let wk = WriteKind::MutableBorrow(bk);
    1,092 ( 0.00%)                          if allow_two_phase_borrow(bk) {
        .                                       (Deep, Reservation(wk))
        .                                   } else {
        .                                       (Deep, Write(wk))
        .                                   }
        .                               }
        .                           };
        .           
   30,324 ( 0.00%)                  self.access_place(
        .                               location,
    5,776 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           let action = if bk == BorrowKind::Shallow {
        .                               InitializationRequiringAction::MatchOn
        .                           } else {
        .                               InitializationRequiringAction::Borrow
        .                           };
        .           
   10,108 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               action,
   10,108 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::AddressOf(mutability, place) => {
        .                           let access_kind = match mutability {
        .                               Mutability::Mut => (
        .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
        .                       }
        .           
        .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
        .                           let af = match *rvalue {
        .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
        .                               Rvalue::Discriminant(..) => None,
        .                               _ => unreachable!(),
        .                           };
    2,432 ( 0.00%)                  self.access_place(
        .                               location,
      608 ( 0.00%)                      (place, span),
        .                               (Shallow(af), Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
    1,064 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    1,064 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
        .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
    1,100 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
      770 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
        .                       }
        .           
        .                       Rvalue::NullaryOp(_op, _ty) => {
        .                           // nullary ops take no dynamic input; no borrowck effect.
        .                       }
        .           
        .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
        .                           // We need to report back the list of mutable upvars that were
        .                           // moved into the closure and subsequently used by the closure,
        .                           // in order to populate our used_mut set.
      498 ( 0.00%)                  match **aggregate_kind {
        .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
        .                                   let BorrowCheckResult { used_mut_upvars, .. } =
       12 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
        .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
        .                                   for field in used_mut_upvars {
        .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
        .                                   }
        .                               }
        .                               AggregateKind::Adt(..)
        .                               | AggregateKind::Array(..)
        .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
        .                               }
        .                               _ => propagate_closure_used_mut_place(self, place),
        .                           }
        .                       }
        .                       Operand::Constant(..) => {}
        .                   }
        .               }
        .           
  160,404 ( 0.00%)      fn consume_operand(
        .                   &mut self,
        .                   location: Location,
        .                   (operand, span): (&'cx Operand<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  110,539 ( 0.00%)          match *operand {
    2,190 ( 0.00%)              Operand::Copy(place) => {
        .                           // copy of place: check if this is "copy of frozen path"
        .                           // (FIXME: see check_loans.rs)
    4,380 ( 0.00%)                  self.access_place(
        .                               location,
    3,650 ( 0.00%)                      (place, span),
        .                               (Deep, Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
        .                           self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
        .                               (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
   33,324 ( 0.00%)              Operand::Move(place) => {
        .                           // move of place: check if this is move of already borrowed path
  130,796 ( 0.00%)                  self.access_place(
        .                               location,
   55,540 ( 0.00%)                      (place, span),
        .                               (Deep, Write(WriteKind::Move)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
   70,720 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   53,040 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       Operand::Constant(_) => {}
        .                   }
  106,936 ( 0.00%)      }
        .           
        .               /// Checks whether a borrow of this place is invalidated when the function
        .               /// exits
        .               fn check_for_invalidation_at_exit(
        .                   &mut self,
        .                   location: Location,
        .                   borrow: &BorrowData<'tcx>,
        .                   span: Span,
        .               ) {
        .                   debug!("check_for_invalidation_at_exit({:?})", borrow);
       96 ( 0.00%)          let place = borrow.borrowed_place;
        .                   let mut root_place = PlaceRef { local: place.local, projection: &[] };
        .           
        .                   // FIXME(nll-rfc#40): do more precise destructor tracking here. For now
        .                   // we just know that all locals are dropped at function exit (otherwise
        .                   // we'll have a memory leak) and assume that all statics have a destructor.
        .                   //
        .                   // FIXME: allow thread-locals to borrow other thread locals?
        .           
        .                   let (might_be_alive, will_be_dropped) =
      672 ( 0.00%)              if self.body.local_decls[root_place.local].is_ref_to_thread_local() {
        .                           // Thread-locals might be dropped after the function exits
        .                           // We have to dereference the outer reference because
        .                           // borrows don't conflict behind shared references.
        .                           root_place.projection = DEREF_PROJECTION;
        .                           (true, true)
        .                       } else {
        .                           (false, self.locals_are_invalidated_at_exit)
        .                       };
        .           
      480 ( 0.00%)          if !will_be_dropped {
        .                       debug!("place_is_invalidated_at_exit({:?}) - won't be dropped", place);
        .                       return;
        .                   }
        .           
        .                   let sd = if might_be_alive { Deep } else { Shallow(None) };
        .           
    1,152 ( 0.00%)          if places_conflict::borrow_conflicts_with_place(
      192 ( 0.00%)              self.infcx.tcx,
        .                       &self.body,
        .                       place,
        .                       borrow.kind,
      384 ( 0.00%)              root_place,
        .                       sd,
        .                       places_conflict::PlaceConflictBias::Overlap,
        .                   ) {
        .                       debug!("check_for_invalidation_at_exit({:?}): INVALID", place);
        .                       // FIXME: should be talking about the region lifetime instead
        .                       // of just a span here.
        .                       let span = self.infcx.tcx.sess.source_map().end_point(span);
        .                       self.report_borrowed_value_does_not_live_long_enough(
-- line 1553 ----------------------------------------
-- line 1573 ----------------------------------------
        .                       err.buffer(&mut self.errors_buffer);
        .                   }
        .               }
        .           
        .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
        .                   // Two-phase borrow support: For each activation that is newly
        .                   // generated at this statement, check if it interferes with
        .                   // another borrow.
  115,904 ( 0.00%)          let borrow_set = self.borrow_set.clone();
  203,248 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
        .                       let borrow = &borrow_set[borrow_index];
        .           
        .                       // only mutable borrows should be 2-phase
    1,365 ( 0.00%)              assert!(match borrow.kind {
        .                           BorrowKind::Shared | BorrowKind::Shallow => false,
        .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
        .                       });
        .           
    3,276 ( 0.00%)              self.access_place(
        .                           location,
    1,638 ( 0.00%)                  (borrow.borrowed_place, span),
    2,457 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
        .                           LocalMutationIsAllowed::No,
        .                           flow_state,
        .                       );
        .                       // We do not need to call `check_if_path_or_subpath_is_moved`
        .                       // again, as we already called it when we made the
        .                       // initial reservation.
        .                   }
        .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   location: Location,
        .                   local: Local,
        .                   place_span: (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
        .           
        .                   // Check if any of the initializiations of `local` have happened yet:
    6,828 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
        .                       // And, if so, report an error.
        .                       let init = &self.move_data.inits[init_index];
        .                       let span = init.span(&self.body);
        .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
        .                   }
        .               }
        .           
  178,334 ( 0.00%)      fn check_if_full_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let maybe_uninits = &flow_state.uninits;
        .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
        .                   // Therefore, if we seek out the *closest* prefix for which we
        .                   // have a MovePath, that should capture the initialization
        .                   // state for the place scenario.
        .                   //
        .                   // This code covers scenarios 1, 2, and 3.
        .           
        .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
        .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   13,718 ( 0.00%)          if maybe_uninits.contains(mpi) {
        .                       self.report_use_of_moved_or_uninitialized(
        .                           location,
        .                           desired_action,
        .                           (prefix, place_span.0, place_span.1),
        .                           mpi,
        .                       );
        .                   } // Only query longest prefix with a MovePath, not further
        .                   // ancestors; dataflow recurs on children when parents
        .                   // move (to support partial (re)inits).
        .                   //
        .                   // (I.e., querying parents breaks scenario 7; but may want
        .                   // to do such a query based on partial-init feature-gate.)
  109,744 ( 0.00%)      }
        .           
        .               /// Subslices correspond to multiple move paths, so we iterate through the
        .               /// elements of the base array. For each element we check
        .               ///
        .               /// * Does this element overlap with our slice.
        .               /// * Is any part of it uninitialized.
        .               fn check_if_subslice_element_is_moved(
        .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
        .                                       return; // don't bother finding other problems.
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
  150,579 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   27,378 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
        .           
        .                   // Bad scenarios:
        .                   //
        .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
        .                   //    partial initialization support, one might have `a.x`
        .                   //    initialized but not `a.b`.
        .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
        .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
        .                   // OK scenarios:
        .                   //
        .                   // 3. Move of `a.b.c`, use of `a.b.d`
        .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
        .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
        .                   //    must have been initialized for the use to be sound.
        .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
        .           
   95,823 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
        .           
    7,148 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   13,689 ( 0.00%)              place_span.0.last_projection()
        .                   {
        .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
        .                       if let ty::Array(..) = place_ty.ty.kind() {
        .                           self.check_if_subslice_element_is_moved(
        .                               location,
        .                               desired_action,
        .                               (place_base, place_span.1),
        .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
        .                   //
        .                   // (Distinct from handling of scenarios 1+2+4 above because
        .                   // `place` does not interfere with suffixes of its prefixes,
        .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
        .                   //
        .                   // This code covers scenario 1.
        .           
        .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
   54,756 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
   48,060 ( 0.00%)              let uninit_mpi = self
        .                           .move_data
        .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
        .           
   24,030 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
        .                           self.report_use_of_moved_or_uninitialized(
        .                               location,
        .                               desired_action,
        .                               (place_span.0, place_span.0, place_span.1),
        .                               uninit_mpi,
        .                           );
        .                           return; // don't bother finding other problems.
        .                       }
        .                   }
  109,512 ( 0.00%)      }
        .           
        .               /// Currently MoveData does not store entries for all places in
        .               /// the input MIR. For example it will currently filter out
        .               /// places that are Copy; thus we do not track places of shared
        .               /// reference type. This routine will walk up a place along its
        .               /// prefixes, searching for a foundational place that *is*
        .               /// tracked in the MoveData.
        .               ///
        .               /// An Err result includes a tag indicated why the search failed.
        .               /// Currently this can only occur if the place is built off of a
        .               /// static variable, as we do not track those in the MoveData.
        .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
  178,334 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
        .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
        .                       }
        .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
        .                   }
        .               }
        .           
        .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
        .                   // If returns None, then there is no move path corresponding
        .                   // to a direct owner of `place` (which means there is nothing
        .                   // that borrowck tracks for its analysis).
        .           
  123,425 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(_) => None,
        .                       LookupResult::Exact(mpi) => Some(mpi),
        .                   }
        .               }
        .           
        .               fn check_if_assigned_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   (place, span): (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
        .           
        .                   // None case => assigning to `x` does not require `x` be initialized.
       42 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
      280 ( 0.00%)              match elem {
        .                           ProjectionElem::Index(_/*operand*/) |
        .                           ProjectionElem::ConstantIndex { .. } |
        .                           // assigning to P[i] requires P to be valid.
        .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
        .                           // assigning to (P->variant) is okay if assigning to `P` is okay
        .                           //
        .                           // FIXME: is this true even if P is an adt with a dtor?
        .                           { }
        .           
        .                           // assigning to (*P) requires P to be initialized
        .                           ProjectionElem::Deref => {
      203 ( 0.00%)                      self.check_if_full_path_is_moved(
        .                                   location, InitializationRequiringAction::Use,
      174 ( 0.00%)                          (place_base, span), flow_state);
        .                               // (base initialized; no need to
        .                               // recur further)
        .                               break;
        .                           }
        .           
        .                           ProjectionElem::Subslice { .. } => {
        .                               panic!("we don't allow assignments to subslices, location: {:?}",
        .                                      location);
        .                           }
        .           
        .                           ProjectionElem::Field(..) => {
        .                               // if type of `P` has a dtor, then
        .                               // assigning to `P.f` requires `P` itself
        .                               // be already initialized
        .                               let tcx = self.infcx.tcx;
       38 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
      114 ( 0.00%)                      match base_ty.kind() {
      228 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
       60 ( 0.00%)                              self.check_if_path_or_subpath_is_moved(
        .                                           location, InitializationRequiringAction::Assignment,
       60 ( 0.00%)                                  (place_base, span), flow_state);
        .           
        .                                       // (base initialized; no need to
        .                                       // recur further)
        .                                       break;
        .                                   }
        .           
        .                                   // Once `let s; s.x = V; read(s.x);`,
        .                                   // is allowed, remove this match arm.
-- line 1880 ----------------------------------------
-- line 1931 ----------------------------------------
        .           
        .                       // Shallow so that we'll stop at any dereference; we'll
        .                       // report errors about issues with such bases elsewhere.
        .                       let maybe_uninits = &flow_state.uninits;
        .           
        .                       // Find the shortest uninitialized prefix you can reach
        .                       // without going over a Deref.
        .                       let mut shortest_uninit_seen = None;
      619 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
       34 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
        .                               Some(mpi) => mpi,
        .                               None => continue,
        .                           };
        .           
        3 ( 0.00%)                  if maybe_uninits.contains(mpi) {
        .                               debug!(
        .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
        .                                   shortest_uninit_seen,
        .                                   Some((prefix, mpi))
        .                               );
        .                               shortest_uninit_seen = Some((prefix, mpi));
        .                           } else {
        .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
        .                           }
        .                       }
        .           
       84 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
        .                           // Check for a reassignment into an uninitialized field of a union (for example,
        .                           // after a move out). In this case, do not report an error here. There is an
        .                           // exception, if this is the first assignment into the union (that is, there is
        .                           // no move out from an earlier location) then this is an attempt at initialization
        .                           // of the union - we should error in that case.
        .                           let tcx = this.infcx.tcx;
        .                           if base.ty(this.body(), tcx).ty.is_union() {
        .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Checks the permissions for the given place and read or write kind
        .               ///
        .               /// Returns `true` if an error is reported.
        .               fn check_access_permissions(
        .                   &mut self,
  112,752 ( 0.00%)          (place, span): (Place<'tcx>, Span),
        .                   kind: ReadOrWrite,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   location: Location,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
        .                       place, kind, is_local_mutation_allowed
        .                   );
        .           
        .                   let error_access;
        .                   let the_place_err;
        .           
  940,046 ( 0.02%)          match kind {
        .                       Reservation(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       ))
        .                       | Write(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       )) => {
    5,460 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
        .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
        .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
        .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
        .                           };
    3,822 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::MutableBorrow;
        .                                   the_place_err = place_err;
        .                               }
        .                           }
        .                       }
        .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
   85,085 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::Mutate;
        .                                   the_place_err = place_err;
        .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       )
        .                       | Write(
        .                           WriteKind::Move
        .                           | WriteKind::StorageDeadOrDrop
        .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       ) => {
   83,244 ( 0.00%)                  if let (Err(_), true) = (
  291,354 ( 0.01%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
        .                               self.errors_buffer.is_empty(),
        .                           ) {
        .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
        .                               // unreachable, but we use `delay_span_bug` because we can hit this when
        .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
        .                               // enabled. We don't want to ICE for that case, as other errors will have
        .                               // been emitted (#52262).
        .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
        .                   if previously_initialized {
        .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
   66,540 ( 0.00%)      fn is_local_ever_initialized(
        .                   &self,
        .                   local: Local,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> Option<InitIndex> {
   39,924 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   13,308 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
   54,020 ( 0.00%)          for &index in ii {
   28,192 ( 0.00%)              if flow_state.ever_inits.contains(index) {
        .                           return Some(index);
        .                       }
        .                   }
        .                   None
   53,232 ( 0.00%)      }
        .           
        .               /// Adds the place into the used mutable variables set
   50,804 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
        .                   match root_place {
   38,103 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
        .                           // If the local may have been initialized, and it is now currently being
        .                           // mutated, then it is justified to be annotated with the `mut`
        .                           // keyword, since the mutation may be a possible reassignment.
   24,871 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
   36,510 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
        .                           {
        .                               self.used_mut.insert(local);
        .                           }
        .                       }
        .                       RootPlace {
        .                           place_local: _,
        .                           place_projection: _,
        .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
        .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
        .                               local: place_local,
        .                               projection: place_projection,
        .                           }) {
        .                               self.used_mut_upvars.push(field);
        .                           }
        .                       }
        .                   }
   49,980 ( 0.00%)      }
        .           
        .               /// Whether this value can be written or borrowed mutably.
        .               /// Returns the root place if the place passed in is a projection.
  606,045 ( 0.01%)      fn is_mutable(
        .                   &self,
        .                   place: PlaceRef<'tcx>,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
        .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
  166,829 ( 0.00%)          match place.last_projection() {
        .                       None => {
   54,323 ( 0.00%)                  let local = &self.body.local_decls[place.local];
  162,969 ( 0.00%)                  match local.mutability {
    3,802 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
   11,406 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                                   }),
        .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
        .                                   }),
        .                                   LocalMutationIsAllowed::No => Err(place),
        .                               },
  104,844 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
        .                                   place_local: place.local,
        .                                   place_projection: place.projection,
        .                                   is_local_mutation_allowed,
        .                               }),
        .                           }
        .                       }
        .                       Some((place_base, elem)) => {
    2,316 ( 0.00%)                  match elem {
        .                               ProjectionElem::Deref => {
    1,098 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
        .           
        .                                   // Check the kind of deref to decide
    3,294 ( 0.00%)                          match base_ty.kind() {
        .                                       ty::Ref(_, _, mutbl) => {
    1,098 ( 0.00%)                                  match mutbl {
        .                                               // Shared borrowed data is never mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // Mutably borrowed data is mutable, but only if we have a
        .                                               // unique path to the `&mut`
        .                                               hir::Mutability::Mut => {
    1,098 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
        .                                                       Some(field) if self.upvars[field.index()].by_ref => {
        .                                                           is_local_mutation_allowed
        .                                                       }
        .                                                       _ => LocalMutationIsAllowed::Yes,
        .                                                   };
        .           
    3,294 ( 0.00%)                                          self.is_mutable(place_base, mode)
        .                                               }
        .                                           }
        .                                       }
        .                                       ty::RawPtr(tnm) => {
        .                                           match tnm.mutbl {
        .                                               // `*const` raw pointers are not mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2228 ----------------------------------------
        .                               // All other projections are owned by their base path, so mutable if
        .                               // base path is mutable
        .                               ProjectionElem::Field(..)
        .                               | ProjectionElem::Index(..)
        .                               | ProjectionElem::ConstantIndex { .. }
        .                               | ProjectionElem::Subslice { .. }
        .                               | ProjectionElem::Downcast(..) => {
        .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
      446 ( 0.00%)                          if let Some(field) = upvar_field_projection {
        .                                       let upvar = &self.upvars[field.index()];
        .                                       debug!(
        .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
        .                                            place={:?}, place_base={:?}",
        .                                           upvar, is_local_mutation_allowed, place, place_base
        .                                       );
        .                                       match (upvar.place.mutability, is_local_mutation_allowed) {
        .                                           (
-- line 2244 ----------------------------------------
-- line 2285 ----------------------------------------
        .                                       }
        .                                   } else {
        .                                       self.is_mutable(place_base, is_local_mutation_allowed)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
  440,760 ( 0.01%)      }
        .           
        .               /// If `place` is a field projection, and the field is being projected from a closure type,
        .               /// then returns the index of the field being projected. Note that this closure will always
        .               /// be `self` in the current MIR, because that is the only time we directly access the fields
        .               /// of a closure type.
        .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
    6,948 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
        .               }
        .           }
        .           
        .           /// The degree of overlap between 2 places for borrow-checking.
        .           enum Overlap {
        .               /// The places might partially overlap - in this case, we give
        .               /// up and say that they might conflict. This occurs when
        .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

1,423,194 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 141 ----------------------------------------
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
        .               pub const fn is_empty(&self) -> bool {
  945,436 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
    1,563 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    1,136 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    8,744 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
  605,706 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn last_mut(&mut self) -> Option<&mut T> {
2,300,725 ( 0.05%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
        .               pub const fn as_ptr(&self) -> *const T {
1,091,016 ( 0.03%)          self as *const [T] as *const T
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
        .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        6 ( 0.00%)          self as *mut [T] as *mut T
        .               }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
   32,948 ( 0.00%)          let _ = &self[a];
   39,477 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
   13,600 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       90 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   33,926 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_mut_unchecked(mid) }
        .               }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
        .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
        .                   let len = self.len();
        .                   let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
    2,428 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
        .               }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
      780 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let n = needle.len();
   28,955 ( 0.00%)          self.len() >= n && needle == &self[..n]
        .               }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let (m, n) = (self.len(), needle.len());
      428 ( 0.00%)          m >= n && needle == &self[m - n..]
        .               }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
3,500,221 ( 0.08%)          while left < right {
4,841,171 ( 0.11%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
  535,201 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
1,326,048 ( 0.03%)              if cmp == Less {
2,161,641 ( 0.05%)                  left = mid + 1;
  655,410 ( 0.02%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
4,035,295 ( 0.09%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
  822,512 ( 0.02%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
        .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3246 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "copy_within", since = "1.37.0")]
        .               #[track_caller]
        .               pub fn copy_within<R: RangeBounds<usize>>(&mut self, src: R, dest: usize)
        .               where
        .                   T: Copy,
        .               {
        .                   let Range { start: src_start, end: src_end } = slice::range(src, ..self.len());
   38,286 ( 0.00%)          let count = src_end - src_start;
   25,524 ( 0.00%)          assert!(dest <= self.len() - count, "dest is out of bounds");
        .                   // SAFETY: the conditions for `ptr::copy` have all been checked above,
        .                   // as have those for `ptr::add`.
        .                   unsafe {
        .                       // Derive both `src_ptr` and `dest_ptr` from the same loan
        .                       let ptr = self.as_mut_ptr();
        .                       let src_ptr = ptr.add(src_start);
        .                       let dest_ptr = ptr.add(dest);
        .                       ptr::copy(src_ptr, dest_ptr, count);
-- line 3263 ----------------------------------------
-- line 3382 ----------------------------------------
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        .                   let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
   21,088 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
   21,088 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
   21,088 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
        .               /// let v = [1, 2, 3, 3, 5, 6, 7];
        .               /// let i = v.partition_point(|&x| x < 5);
        .               ///
        .               /// assert_eq!(i, 4);
        .               /// assert!(v[..i].iter().all(|&x| x < 5));
        .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
        .               /// ```
        .               #[stable(feature = "partition_point", since = "1.52.0")]
       88 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
        .               where
        .                   P: FnMut(&T) -> bool,
        .               {
        .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
      176 ( 0.00%)      }
        .           
        .               /// Removes the subslice corresponding to the given range
        .               /// and returns a reference to it.
        .               ///
        .               /// Returns `None` and does not modify the slice if the given
        .               /// range is out of bounds.
        .               ///
        .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

3,515,738 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                  

-- line 17 ----------------------------------------
         .           pub struct BitMask(pub BitMaskWord);
         .           
         .           #[allow(clippy::use_self)]
         .           impl BitMask {
         .               /// Returns a new `BitMask` with all bits inverted.
         .               #[inline]
         .               #[must_use]
         .               pub fn invert(self) -> Self {
   155,865 ( 0.00%)          BitMask(self.0 ^ BITMASK_MASK)
         .               }
         .           
         .               /// Flip the bit in the mask for the entry at the given index.
         .               ///
         .               /// Returns the bit's previous state.
         .               #[inline]
         .               #[allow(clippy::cast_ptr_alignment)]
         .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
         .                   // The bit was set if the bit is now 0.
         .                   self.0 & mask == 0
         .               }
         .           
         .               /// Returns a new `BitMask` with the lowest bit removed.
         .               #[inline]
         .               #[must_use]
         .               pub fn remove_lowest_bit(self) -> Self {
   142,491 ( 0.00%)          BitMask(self.0 & (self.0 - 1))
         .               }
         .               /// Returns whether the `BitMask` has at least one set bit.
         .               #[inline]
         .               pub fn any_bit_set(self) -> bool {
 1,534,826 ( 0.04%)          self.0 != 0
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one.
         .               #[inline]
         .               pub fn lowest_set_bit(self) -> Option<usize> {
54,623,376 ( 1.27%)          if self.0 == 0 {
         .                       None
         .                   } else {
         .                       Some(unsafe { self.lowest_set_bit_nonzero() })
         .                   }
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one. The
         .               /// bitmask must not be empty.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
    10,501 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
         .               }
         .               #[inline]
         .               #[cfg(not(feature = "nightly"))]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
         .                   self.trailing_zeros()
         .               }
         .           
         .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
         .           /// bits.
         .           pub struct BitMaskIter(BitMask);
         .           
         .           impl Iterator for BitMaskIter {
         .               type Item = usize;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<usize> {
37,598,444 ( 0.87%)          let bit = self.0.lowest_set_bit()?;
         .                   self.0 = self.0.remove_lowest_bit();
         .                   Some(bit)
         .               }
         .           }

   157,071 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .           /// Adds packed 32-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddd))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_add_epi32(a: __m128i, b: __m128i) -> __m128i {
        17 ( 0.00%)      transmute(simd_add(a.as_i32x4(), b.as_i32x4()))
         .           }
         .           
         .           /// Adds packed 64-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi64)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddq))]
-- line 110 ----------------------------------------
-- line 790 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmpeq_epi8(a: __m128i, b: __m128i) -> __m128i {
   330,250 ( 0.01%)      transmute::<i8x16, _>(simd_eq(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqw))]
-- line 806 ----------------------------------------
-- line 856 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmplt_epi8(a: __m128i, b: __m128i) -> __m128i {
    33,600 ( 0.00%)      transmute::<i8x16, _>(simd_lt(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 872 ----------------------------------------
-- line 1174 ----------------------------------------
         .           /// `mem_addr` must be aligned on a 16-byte boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_load_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movaps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_load_si128(mem_addr: *const __m128i) -> __m128i {
   159,918 ( 0.00%)      *mem_addr
         .           }
         .           
         .           /// Loads 128-bits of integer data from memory into a new vector.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_loadu_si128)
         .           #[inline]
-- line 1190 ----------------------------------------
-- line 1237 ----------------------------------------
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storeu_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movups))] // FIXME movdqu expected
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_storeu_si128(mem_addr: *mut __m128i, a: __m128i) {
        16 ( 0.00%)      storeudq(mem_addr as *mut i8, a);
         .           }
         .           
         .           /// Stores the lower 64-bit integer `a` to a memory location.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storel_epi64)
         .           #[inline]
-- line 1253 ----------------------------------------
-- line 1373 ----------------------------------------
         .           /// Returns a mask of the most significant bit of each element in `a`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_movemask_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pmovmskb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_movemask_epi8(a: __m128i) -> i32 {
58,892,805 ( 1.36%)      pmovmskb(a.as_i8x16())
         .           }
         .           
         .           /// Shuffles 32-bit integers in `a` using the control in `IMM8`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pshufd, IMM8 = 9))]
-- line 1389 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
2,014,176 ( 0.05%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
1,258,860 ( 0.03%)              .intern(kind, |kind| {
   29,304 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
   58,608 ( 0.00%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
2,265,948 ( 0.05%)      }
        .           
        .               #[inline(never)]
1,330,760 ( 0.03%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
1,164,415 ( 0.03%)              .intern(kind, |kind| {
   58,452 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
1,497,105 ( 0.03%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  610,969 ( 0.01%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
  423,275 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   81,275 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   81,275 ( 0.00%)          self.data.get(&id.local_id)
  342,270 ( 0.01%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
    1,620 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
    1,080 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    7,248 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   85,768 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    7,248 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  156,525 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  104,350 ( 0.00%)          match *qpath {
   32,940 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
  280,110 ( 0.01%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
  260,875 ( 0.01%)      }
        .           
    8,871 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
   18,751 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
    8,871 ( 0.00%)      }
        .           
   47,409 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
   95,376 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
   94,818 ( 0.00%)      }
        .           
    5,128 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    5,128 ( 0.00%)      }
        .           
   44,540 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   44,540 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   44,540 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    2,228 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      411 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    2,922 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    1,461 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
   21,480 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
   10,740 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      720 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      360 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   71,300 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   35,650 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  136,268 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   68,134 ( 0.00%)      }
        .           
  668,184 ( 0.02%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  111,364 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
  556,820 ( 0.01%)      }
        .           
  135,528 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  135,528 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
  271,056 ( 0.01%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
   38,508 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
   19,254 ( 0.00%)      }
        .           
   44,858 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   44,858 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   89,716 ( 0.00%)      }
        .           
   24,524 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   24,524 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
   49,048 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    4,500 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  133,696 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   95,539 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   48,296 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   24,148 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   57,814 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   28,907 ( 0.00%)      }
        .           
   46,926 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   93,852 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   93,852 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
    1,990 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      398 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      808 ( 0.00%)      }
        .           
      865 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      173 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      512 ( 0.00%)      }
        .           
    9,880 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
   19,760 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
   20,396 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
   19,760 ( 0.00%)      }
        .           
    6,036 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
    8,048 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    5,204 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    1,596 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    2,684 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    1,342 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    6,478 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    3,239 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    1,976 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
      988 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    1,472 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    1,840 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      698 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      349 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    1,778 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      889 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    1,080 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      540 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      698 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      349 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
      102 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       34 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
       68 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      349 ( 0.00%)          &self.coercion_casts
      349 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
       10 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
      187 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
      641 ( 0.00%)      pub fn is_identity(&self) -> bool {
    1,282 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
      641 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
    1,376 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      686 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
       26 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
    1,282 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
    1,122 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    7,493 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   14,080 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
    5,632 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
   11,264 ( 0.00%)      }
        .           
    1,056 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      352 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    1,408 ( 0.00%)      }
        .           
    7,040 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    1,408 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    9,856 ( 0.00%)      }
        .           
    1,408 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      352 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    1,760 ( 0.00%)      }
        .           
      306 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
      544 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      136 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        .                   let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        .               }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    2,680 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    1,340 ( 0.00%)          let attrs = self.get_attrs(def_id);
    5,695 ( 0.00%)          let get = |name| {
    1,340 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      208 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
      104 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
       52 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
    6,700 ( 0.00%)          };
    2,010 ( 0.00%)          (
    2,010 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    1,005 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
    2,680 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
   10,899 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
    1,557 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
   12,237 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
   12,456 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
  777,868 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
1,000,116 ( 0.02%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       49 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       56 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
  193,872 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  221,568 ( 0.01%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  197,022 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  225,168 ( 0.01%)      }
        .           
    4,956 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
    6,372 ( 0.00%)      }
        .           
  401,702 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  459,088 ( 0.01%)      }
        .           
      145 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
    8,938 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
    6,050 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
       34 ( 0.00%)      }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
        4 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
        .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
        6 ( 0.00%)          if let Some(id) = id.as_local() {
        3 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
        .                   } else {
        5 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
        .                   }
        6 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    2,733 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
      463 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   21,440 ( 0.00%)          &*self.untracked_resolutions.cstore
   10,720 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      136 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
      627 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      698 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
    1,047 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
      349 ( 0.00%)          self.sess.opts.borrowck_mode
    1,396 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
      207 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
      123 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
        8 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
       18 ( 0.00%)              match crate_type {
        .                           CrateType::Executable
        .                           | CrateType::Staticlib
        .                           | CrateType::ProcMacro
        .                           | CrateType::Cdylib => false,
        .           
        .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
        .                           // We want to block export of generics from dylibs,
        .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
        .                       // FIXME(#42706) -- in some cases, we could do better here.
        .                       return true;
        .                   }
        .                   false
        .               }
        .           
        .               /// Determines whether identifiers in the assembly have strict naming rules.
        .               /// Currently, only NVPTX* targets need it.
       16 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
       16 ( 0.00%)          self.sess.target.arch.contains("nvptx")
       32 ( 0.00%)      }
        .           
        .               /// Returns `&'static core::panic::Location<'static>`.
        .               pub fn caller_location_ty(self) -> Ty<'tcx> {
        .                   self.mk_imm_ref(
        .                       self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
        .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
        .               }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
      891 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
      648 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    1,458 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
      729 ( 0.00%)      }
        .           
       70 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
       80 ( 0.00%)      }
        .           
  180,775 ( 0.00%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  206,600 ( 0.00%)      }
        .           
      161 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
      184 ( 0.00%)      }
        .           
       42 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
       48 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
        .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
        .           }
        .           
        .           macro_rules! nop_lift {
        .               ($set:ident; $ty:ty => $lifted:ty) => {
        .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
        .                       type Lifted = $lifted;
        .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
       24 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
        .                               Some(unsafe { mem::transmute(self) })
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                   }
        .               };
        .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
   49,446 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  196,656 ( 0.00%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
        .           
        .               /// Allows access to the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with_context<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        7 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
        .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
        .               /// as the `TyCtxt` passed in.
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
   94,561 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   93,580 ( 0.00%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  240,660 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   86,028 ( 0.00%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  158,075 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   14,332 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  325,419 ( 0.01%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   22,197 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
   75,087 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   11,336 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
  617,426 ( 0.01%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  332,628 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    2,337 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
  692,964 ( 0.02%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
3,382,273 ( 0.08%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
3,032,361 ( 0.07%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
        .               /// unsafe.
        .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
        .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
        .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
        .               }
        .           
        .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
        .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
      888 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
        .                   self.super_traits_of(trait_def_id).any(|trait_did| {
        .                       self.associated_items(trait_did)
        .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
        .                           .is_some()
        .                   })
      666 ( 0.00%)      }
        .           
        .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
        .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
        .               /// to identify which traits may define a given associated type to help avoid cycle errors.
        .               /// Returns a `DefId` iterator.
        .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
        .                   let mut set = FxHashSet::default();
      148 ( 0.00%)          let mut stack = vec![trait_def_id];
        .           
        .                   set.insert(trait_def_id);
        .           
      666 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
      176 ( 0.00%)              let trait_did = stack.pop()?;
       88 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
        .           
        .                       for (predicate, _) in generic_predicates.predicates {
       45 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
       30 ( 0.00%)                      if set.insert(data.def_id()) {
        .                                   stack.push(data.def_id());
        .                               }
        .                           }
        .                       }
        .           
        .                       Some(trait_did)
        .                   })
        .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   89,464 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
1,761,829 ( 0.04%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
1,761,455 ( 0.04%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
1,322,640 ( 0.03%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
   84,652 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
1,322,640 ( 0.03%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
        .                   match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
        .               }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      305 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
      305 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        .                   match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
      348 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
    6,506 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    6,840 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      540 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    1,062 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    2,750 ( 0.00%)          iter.intern_with(|ts| {
      958 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   11,382 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    2,448 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      468 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    1,200 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      138 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
   18,389 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   12,209 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
    2,778 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
    4,328 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
   18,389 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
      239 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      239 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
      478 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
       30 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
       20 ( 0.00%)      }
        .           
       30 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
       30 ( 0.00%)          self.mk_place_elem(
        .                       place,
       60 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
       60 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
    2,781 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    3,090 ( 0.00%)      }
        .           
      168 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
       24 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
       30 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
       96 ( 0.00%)          self._intern_poly_existential_predicates(eps)
      192 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
    4,756 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
    4,175 ( 0.00%)              self._intern_predicates(preds)
        .                   }
    1,186 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  131,792 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
       84 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  484,558 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   10,538 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    7,049 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    4,154 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   21,071 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
      250 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
   32,146 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   61,488 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    1,948 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      308 ( 0.00%)              c_variadic,
      457 ( 0.00%)              unsafety,
      318 ( 0.00%)              abi,
       30 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       88 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
        6 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    2,561 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
        .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  194,551 ( 0.00%)          iter.intern_with(|xs| self.intern_substs(xs))
        .               }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
      403 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   20,625 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   41,250 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  186,527 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
  326,536 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  326,536 ( 0.01%)          let hir = self.hir();
        .                   loop {
  522,276 ( 0.01%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  643,108 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  382,332 ( 0.01%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
  466,480 ( 0.01%)      }
        .           
    2,664 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
   11,259 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
      733 ( 0.00%)              let next = self.hir().get_parent_node(id);
    2,199 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    2,664 ( 0.00%)      }
        .           
      280 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
      615 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
      189 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      160 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
   65,016 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
   18,576 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
   18,576 ( 0.00%)          Some(&*candidates)
   74,304 ( 0.00%)      }
        .           
    9,296 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   11,952 ( 0.00%)      }
        .           
    1,161 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
       64 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
    1,032 ( 0.00%)      }
        .           
    6,377 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
    8,199 ( 0.00%)      }
        .           
    8,091 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
    8,091 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      400 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       40 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        .                       match self.lookup_const_stability(def_id) {
        .                           Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        .                               self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      360 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
   35,488 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
  999,938 ( 0.02%)          E::intern_with(self, f)
   37,431 ( 0.00%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  314,777 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  219,168 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        3 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
       47 ( 0.00%)                  assert!(iter.next().is_none());
   26,528 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
      154 ( 0.00%)                  assert!(iter.next().is_none());
   11,895 ( 0.00%)                  f(&[t0, t1])
        .                       }
      624 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  171,214 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
    4,534 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
       12 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    3,638 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  279,642 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  209,414 ( 0.00%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
       42 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
   17,108 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
      236 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      236 ( 0.00%)                  let t1 = iter.next().unwrap()?;
      354 ( 0.00%)                  assert!(iter.next().is_none());
   16,190 ( 0.00%)                  f(&[t0, t1])
        .                       }
    2,435 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  316,198 ( 0.01%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   94,561 ( 0.00%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
        .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
    5,648 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

1,279,271 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 417 ----------------------------------------
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
         .               pub const fn new() -> Self {
 4,904,141 ( 0.11%)          Vec { buf: RawVec::NEW, len: 0 }
       403 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 1,849,854 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
         .               }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    72,303 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
         .               }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn capacity(&self) -> usize {
   760,539 ( 0.02%)          self.buf.capacity()
         .               }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve(&mut self, additional: usize) {
   860,399 ( 0.02%)          self.buf.reserve(self.len, additional);
         .               }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
     8,691 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
    70,289 ( 0.00%)          if self.capacity() > self.len {
    32,067 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
         .               }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
         .                       self.shrink_to_fit();
    39,555 ( 0.00%)              let me = ManuallyDrop::new(self);
         .                       let buf = ptr::read(&me.buf);
         .                       let len = me.len();
         .                       buf.into_box(len).assume_init()
         .                   }
         .               }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
   379,253 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
   280,465 ( 0.01%)              if len > self.len {
         .                           return;
         .                       }
         .                       let remaining_len = self.len - len;
         .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   556,132 ( 0.01%)              self.len = len;
     4,780 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
   455,100 ( 0.01%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
10,354,683 ( 0.24%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
 8,473,119 ( 0.20%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
 1,975,225 ( 0.05%)          self.len = new_len;
    97,753 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // We replace self[index] with the last element. Note that if the
         .                       // bounds check above succeeds there must be a last element (which
         .                       // can be self[index] itself).
         .                       let value = ptr::read(self.as_ptr().add(index));
         .                       let base_ptr = self.as_mut_ptr();
         4 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
         .                       self.set_len(len - 1);
         .                       value
         .                   }
         .               }
         .           
         .               /// Inserts an element at position `index` within the vector, shifting all
         .               /// elements after it to the right.
         .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     5,040 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
       725 ( 0.00%)          let len = self.len();
     1,818 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
     2,468 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
     3,687 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
     2,468 ( 0.00%)              self.set_len(len + 1);
         .                   }
     4,320 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
         .               pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
       130 ( 0.00%)          let len = self.len();
       497 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
         .                           let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
       368 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
       336 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
       199 ( 0.00%)              self.set_len(len - 1);
         .                       ret
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
 2,039,108 ( 0.05%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
   148,642 ( 0.00%)          self.retain_mut(|elem| f(elem));
 1,986,792 ( 0.05%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
   249,836 ( 0.01%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
   254,725 ( 0.01%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
   231,436 ( 0.01%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
 1,686,846 ( 0.04%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   353,496 ( 0.01%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    68,724 ( 0.00%)                      g.processed_len += 1;
    30,740 ( 0.00%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
     1,044 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
    19,599 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
    17,166 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
       203 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
     9,677 ( 0.00%)          let len = self.len();
    20,550 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
         .                   let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
     7,409 ( 0.00%)              while gap.read < len {
         .                           let read_ptr = ptr.add(gap.read);
         .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
       902 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
         .                               let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
         .                               ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
     4,223 ( 0.00%)                      gap.write += 1;
         .                               gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
         .                       gap.vec.set_len(gap.write);
         .                       mem::forget(gap);
         .                   }
       232 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       825 ( 0.00%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
 7,437,559 ( 0.17%)          if self.len == self.buf.capacity() {
   475,358 ( 0.01%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
   226,809 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
         .                       ptr::write(end, value);
10,740,053 ( 0.25%)              self.len += 1;
         .                   }
       660 ( 0.00%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn pop(&mut self) -> Option<T> {
 5,247,023 ( 0.12%)          if self.len == 0 {
       217 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
 3,243,104 ( 0.08%)                  self.len -= 1;
 1,195,131 ( 0.03%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
         .               }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
       952 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
         .                       self.append_elements(other.as_slice() as _);
         .                       other.set_len(0);
         .                   }
       816 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               unsafe fn append_elements(&mut self, other: *const [T]) {
         .                   let count = unsafe { (*other).len() };
         .                   self.reserve(count);
    13,690 ( 0.00%)          let len = self.len();
         4 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   248,658 ( 0.01%)          self.len += count;
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
    18,935 ( 0.00%)          let len = self.len();
         .                   let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
         .                       self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
       186 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
     1,173 ( 0.00%)              Drain {
         .                           tail_start: end,
       134 ( 0.00%)                  tail_len: len - end,
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
   680,693 ( 0.02%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn is_empty(&self) -> bool {
   859,622 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
     1,326 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
     1,068 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    25,251 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
     3,405 ( 0.00%)          let len = self.len();
     6,810 ( 0.00%)          if new_len > len {
    49,569 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    21,846 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
         .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
         .                       slice::from_raw_parts_mut(
         2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
        35 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
         .               }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
   199,090 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
    19,909 ( 0.00%)          let len = self.len();
         .           
    59,727 ( 0.00%)          if new_len > len {
     2,949 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    20,277 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
         .           trait ExtendWith<T> {
         .               fn next(&mut self) -> T;
         .               fn last(self) -> T;
         .           }
         .           
         .           struct ExtendElement<T>(T);
         .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
         .               fn next(&mut self) -> T {
       153 ( 0.00%)          self.0.clone()
         .               }
         .               fn last(self) -> T {
         .                   self.0
         .               }
         .           }
         .           
         .           struct ExtendFunc<F>(F);
         .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
 1,237,306 ( 0.03%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
         .                   self.reserve(n);
         .           
         .                   unsafe {
     4,755 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
         .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
         .                       for _ in 1..n {
         .                           ptr::write(ptr, value.next());
         .                           ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
         .                           local_len.increment_len(1);
         .                       }
         .           
   564,915 ( 0.01%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
         .                           ptr::write(ptr, value.last());
         .                           local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
         .                   }
   988,915 ( 0.02%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn dedup(&mut self) {
        30 ( 0.00%)          self.dedup_by(|a, b| a == b)
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
    47,250 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
 1,255,164 ( 0.03%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    61,249 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
         .               fn deref(&self) -> &[T] {
16,949,139 ( 0.39%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        96 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
         .               fn deref_mut(&mut self) -> &mut [T] {
 6,745,063 ( 0.16%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
   423,150 ( 0.01%)      fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
         2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   507,976 ( 0.01%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
         .               fn index(&self, index: I) -> &Self::Output {
   522,177 ( 0.01%)          Index::index(&**self, index)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
         .               #[inline]
         .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
     1,440 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 2,732,252 ( 0.06%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
         .               fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
 1,074,844 ( 0.02%)              let mut me = ManuallyDrop::new(self);
         .                       let alloc = ptr::read(me.allocator());
         .                       let begin = me.as_mut_ptr();
         .                       let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
         .                           begin.add(me.len()) as *const T
         .                       };
         .                       let cap = me.buf.capacity();
   222,751 ( 0.01%)              IntoIter {
         .                           buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
         .                           end,
         .                       }
         .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
         .               type Item = &'a T;
         .               type IntoIter = slice::Iter<'a, T>;
         .           
         .               fn into_iter(self) -> slice::Iter<'a, T> {
       442 ( 0.00%)          self.iter()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
         .               fn into_iter(self) -> slice::IterMut<'a, T> {
       626 ( 0.00%)          self.iter_mut()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
     8,640 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 1,685,211 ( 0.04%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
     8,640 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
         .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
   169,756 ( 0.00%)          while let Some(element) = iterator.next() {
    22,879 ( 0.00%)              let len = self.len();
 1,422,914 ( 0.03%)              if len == self.capacity() {
     1,090 ( 0.00%)                  let (lower, _) = iterator.size_hint();
         .                           self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
         .                           ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
   867,450 ( 0.02%)                  self.set_len(len + 1);
         .                       }
         .                   }
     2,075 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "vec_splice", since = "1.21.0")]
         .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
         .               where
         .                   R: RangeBounds<usize>,
         .                   I: IntoIterator<Item = T>,
         .               {
       572 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element should be removed.
         .               ///
         .               /// If the closure returns true, then the element is removed and yielded.
         .               /// If the closure returns false, the element will remain in the vector and will not be yielded
         .               /// by the iterator.
         .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
     1,906 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
     7,720 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
         .           /// [`copy_from_slice`]: slice::copy_from_slice
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "extend_ref", since = "1.2.0")]
         .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
       144 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
         .                   self.spec_extend(iter.into_iter())
       108 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, &item: &'a T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
         .               #[inline]
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   Ord::cmp(&**self, &**other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
 1,454,082 ( 0.03%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
   764,985 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
 1,725,004 ( 0.04%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

 3,927,215 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs
--------------------------------------------------------------------------------
Ir                  

-- line 10 ----------------------------------------
         .                       $(($idx:tt) -> $T:ident)+
         .                   }
         .               )+) => {
         .                   $(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {
         .                           #[inline]
         .                           fn eq(&self, other: &($($T,)+)) -> bool {
56,057,851 ( 1.30%)                      $(self.$idx == other.$idx)&&+
         .                           }
         .                           #[inline]
         8 ( 0.00%)                  fn ne(&self, other: &($($T,)+)) -> bool {
         8 ( 0.00%)                      $(self.$idx != other.$idx)||+
        12 ( 0.00%)                  }
         .                       }
         .           
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl<$($T:Eq),+> Eq for ($($T,)+) where last_type!($($T,)+): ?Sized {}
         .           
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)
         .                               where last_type!($($T,)+): ?Sized {
         .                           #[inline]
         .                           fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {
         .                               lexical_partial_cmp!($(self.$idx, other.$idx),+)
         .                           }
         .                           #[inline]
         .                           fn lt(&self, other: &($($T,)+)) -> bool {
   378,187 ( 0.01%)                      lexical_ord!(lt, $(self.$idx, other.$idx),+)
         .                           }
         .                           #[inline]
         .                           fn le(&self, other: &($($T,)+)) -> bool {
         .                               lexical_ord!(le, $(self.$idx, other.$idx),+)
         .                           }
         .                           #[inline]
         .                           fn ge(&self, other: &($($T,)+)) -> bool {
         1 ( 0.00%)                      lexical_ord!(ge, $(self.$idx, other.$idx),+)
         .                           }
         .                           #[inline]
         .                           fn gt(&self, other: &($($T,)+)) -> bool {
         .                               lexical_ord!(gt, $(self.$idx, other.$idx),+)
         .                           }
         .                       }
         .           
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {
         .                           #[inline]
         .                           fn cmp(&self, other: &($($T,)+)) -> Ordering {
     7,110 ( 0.00%)                      lexical_cmp!($(self.$idx, other.$idx),+)
         .                           }
         .                       }
         .           
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl<$($T:Default),+> Default for ($($T,)+) {
         .                           #[inline]
         .                           fn default() -> ($($T,)+) {
       847 ( 0.00%)                      ($({ let x: $T = Default::default(); x},)+)
         .                           }
         .                       }
         .                   )+
         .               }
         .           }
         .           
         .           // Constructs an expression that performs a lexical ordering using method $rel.
         .           // The values are interleaved, so the macro invocation for
-- line 74 ----------------------------------------

     1,237 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   60,110 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   64,846 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
  135,136 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   14,441 ( 0.00%)          i += 2
        .               }
        .           
   64,846 ( 0.00%)      if i < count {
   70,263 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  813,042 ( 0.02%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
5,240,658 ( 0.12%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
1,620,867 ( 0.04%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  245,407 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   76,640 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   76,640 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  766,400 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  613,120 ( 0.01%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  689,760 ( 0.02%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  359,144 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  306,560 ( 0.01%)          self.processed += BUFFER_SIZE;
  153,280 ( 0.00%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    8,011 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  170,187 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   63,084 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   31,745 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   17,970 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   11,200 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    2,240 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    6,720 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    2,240 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    4,480 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   17,530 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   19,770 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   35,060 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    4,480 ( 0.00%)          let input_left = length - processed;
    1,410 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
      584 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
      584 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
      584 ( 0.00%)              self.state.v0 ^= elem;
    1,168 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    2,240 ( 0.00%)          self.nbuf = extra_bytes_left;
   11,200 ( 0.00%)          self.processed += nbuf + processed;
   13,440 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   41,430 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   55,240 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   49,233 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   49,233 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   49,233 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
   27,620 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
   13,332 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   40,944 ( 0.00%)          let length = self.processed + self.nbuf;
   27,602 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
   13,801 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
   13,801 ( 0.00%)          state.v0 ^= b;
        .           
   13,801 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   51,346 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
   23,742 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
   23,742 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
2,860,432 ( 0.07%)          compress!(state);
3,059,582 ( 0.07%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
  102,688 ( 0.00%)          compress!(state);
  102,688 ( 0.00%)          compress!(state);
  102,688 ( 0.00%)          compress!(state);
   88,888 ( 0.00%)          compress!(state);
        .               }
        .           }

  745,060 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs
--------------------------------------------------------------------------------
Ir                  

-- line 2075 ----------------------------------------
         .               // SAFETY: As per our safety precondition, we may assume that the `abort` above is never reached.
         .               // Therefore, compiletime_check and runtime_check are observably equivalent.
         .               unsafe {
         .                   const_eval_select((src, dst, count), compiletime_check, runtime_check);
         .               }
         .           
         .               // SAFETY: the safety contract for `copy_nonoverlapping` must be
         .               // upheld by the caller.
28,554,546 ( 0.66%)      unsafe { copy_nonoverlapping(src, dst, count) }
         .           }
         .           
         .           /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source
         .           /// and destination may overlap.
         .           ///
         .           /// If the source and destination will *never* overlap,
         .           /// [`copy_nonoverlapping`] can be used instead.
         .           ///
-- line 2091 ----------------------------------------
-- line 2165 ----------------------------------------
         .               #[cfg(debug_assertions)]
         .               // SAFETY: As per our safety precondition, we may assume that the `abort` above is never reached.
         .               // Therefore, compiletime_check and runtime_check are observably equivalent.
         .               unsafe {
         .                   const_eval_select((src, dst), compiletime_check, runtime_check);
         .               }
         .           
         .               // SAFETY: the safety contract for `copy` must be upheld by the caller.
   743,957 ( 0.02%)      unsafe { copy(src, dst, count) }
         .           }
         .           
         .           /// Sets `count * size_of::<T>()` bytes of memory starting at `dst` to
         .           /// `val`.
         .           ///
         .           /// `write_bytes` is similar to C's [`memset`], but sets `count *
         .           /// size_of::<T>()` bytes to `val`.
         .           ///
-- line 2181 ----------------------------------------
-- line 2266 ----------------------------------------
         .               #[cfg(debug_assertions)]
         .               // SAFETY: runtime debug-assertions are a best-effort basis; it's fine to
         .               // not do them during compile time
         .               unsafe {
         .                   const_eval_select((dst,), compiletime_check, runtime_check);
         .               }
         .           
         .               // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.
   404,768 ( 0.01%)      unsafe { write_bytes(dst, val, count) }
         .           }
         .           
         .           /// Selects which function to call depending on the context.
         .           ///
         .           /// If this function is evaluated at compile-time, then a call to this
         .           /// intrinsic will be replaced with a call to `called_in_const`. It gets
         .           /// replaced with a call to `called_at_rt` otherwise.
         .           ///
-- line 2282 ----------------------------------------

   145,270 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
4,440,982 ( 0.10%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
3,330,735 ( 0.08%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
  138,544 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  207,816 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
1,144,871 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  300,844 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  601,688 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
        .               } else if #[cfg(target_os = "wasi")] {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
        .                   }
        .               } else {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        1 ( 0.00%)              let mut out = ptr::null_mut();
        .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
        .                       // Since these are all powers of 2, we can just use max.
        .                       let align = layout.align().max(crate::mem::size_of::<usize>());
        2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
        2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
        .                   }
        .               }
        .           }

        1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
      349 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
      349 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
      698 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
   56,680 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  385,424 ( 0.01%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   34,008 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
   68,016 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    9,801 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  308,524 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    1,545 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
   17,794 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   67,034 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
   74,486 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  101,800 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  107,261 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
    5,187 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
    1,636 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    1,486 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
    1,585 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   11,336 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   34,008 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   11,336 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
    7,731 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    9,449 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    4,295 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    6,013 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
      704 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
      352 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    2,422 ( 0.00%)          self
    1,056 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   21,598 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   34,868 ( 0.00%)              let (value, subst) =
    2,157 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   51,510 ( 0.00%)              f(infcx, value, subst)
        .                   })
   23,284 ( 0.00%)      }
        .           
   50,015 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   31,756 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  470,006 ( 0.01%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   11,336 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   11,336 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
   54,922 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
      303 ( 0.00%)          let InferOk { value, obligations } = self;
    1,338 ( 0.00%)          for obligation in obligations {
        .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   26,549 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  106,196 ( 0.00%)          self.obligations
   26,549 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   67,196 ( 0.00%)      }
        .           
  122,960 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  138,330 ( 0.00%)          t.fold_with(&mut self.freshener())
  138,330 ( 0.00%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      136 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      272 ( 0.00%)          match *ty.kind() {
       68 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      272 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        .                       _ => None,
        .                   }
      272 ( 0.00%)      }
        .           
   15,370 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   15,370 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
  111,865 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
  111,865 ( 0.00%)      }
        .           
    1,572 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
      786 ( 0.00%)          let mut inner = self.inner.borrow_mut();
      786 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      136 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      160 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
    2,751 ( 0.00%)      }
        .           
   48,871 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  198,944 ( 0.00%)          CombineFields {
        .                       infcx: self,
  497,360 ( 0.01%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   48,871 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
        .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
   56,916 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
        .               }
        .           
  305,146 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
  915,438 ( 0.02%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  152,573 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  610,292 ( 0.01%)      }
        .           
  728,101 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   66,191 ( 0.00%)              undo_snapshot,
   66,191 ( 0.00%)              region_constraints_snapshot,
   66,191 ( 0.00%)              universe,
   66,191 ( 0.00%)              was_in_snapshot,
  132,382 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   66,191 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
1,295,730 ( 0.03%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   86,382 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
   86,382 ( 0.00%)              was_in_snapshot,
  172,764 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   42,117 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   52,316 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    4,756 ( 0.00%)          let snapshot = self.start_snapshot();
   16,075 ( 0.00%)          let r = f(&snapshot);
   33,292 ( 0.00%)          self.commit_from(snapshot);
   32,197 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  550,888 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
  676,349 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
   99,611 ( 0.00%)          let snapshot = self.start_snapshot();
  311,459 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   70,318 ( 0.00%)          match r {
        .                       Ok(_) => {
  589,944 ( 0.01%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  121,312 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
  490,565 ( 0.01%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  351,971 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
  417,565 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   88,083 ( 0.00%)          let snapshot = self.start_snapshot();
  206,326 ( 0.00%)          let r = f(&snapshot);
  478,935 ( 0.01%)          self.rollback_to("probe", snapshot);
  217,895 ( 0.01%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
    7,587 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   10,116 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    1,686 ( 0.00%)          let snapshot = self.start_snapshot();
      843 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
    1,686 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
    3,372 ( 0.00%)          let r = f(&snapshot);
    7,587 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
   10,116 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   11,094 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   22,188 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   16,641 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
      456 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      342 ( 0.00%)      }
        .           
    5,004 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
    3,753 ( 0.00%)      }
        .           
   36,760 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
   33,084 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
       45 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
       30 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
       75 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       60 ( 0.00%)      }
        .           
    3,600 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
      300 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      300 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    2,304 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
      556 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
      556 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
       22 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
       44 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
    2,700 ( 0.00%)      }
        .           
   13,608 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
   11,340 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
    9,072 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
       44 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
       88 ( 0.00%)      }
        .           
   43,522 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  217,610 ( 0.01%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   65,283 ( 0.00%)      }
        .           
   42,144 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  151,638 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   63,216 ( 0.00%)      }
        .           
      530 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
    2,915 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      265 ( 0.00%)          self.tcx.mk_ty_var(vid)
      795 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
      225 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      135 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      180 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
    4,179 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  117,206 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
    8,358 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
   49,832 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  323,908 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  124,580 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
   74,748 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
    4,426 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    6,639 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
    2,822 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    4,233 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   10,711 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   21,422 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      217 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
    1,591 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      434 ( 0.00%)      }
        .           
  140,200 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   79,775 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
    3,925 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   54,308 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
   67,885 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   13,577 ( 0.00%)                              param.name,
   13,577 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   13,577 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
      253 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
       23 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
      184 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   35,394 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  156,793 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   23,596 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
      834 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   21,225 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    1,251 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   21,357 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
   57,969 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
    3,051 ( 0.00%)              assert!(
    9,153 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
    3,051 ( 0.00%)          };
        .           
        .                   let region_rels =
    3,051 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   27,459 ( 0.00%)          let (lexical_region_resolutions, errors) =
   73,224 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   12,204 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    3,051 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   27,459 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   30,510 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
    6,102 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
    9,153 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
    6,102 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   15,255 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
        .               }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
   12,512 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    1,760 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
    6,688 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
      352 ( 0.00%)              .into_infos_and_data();
      352 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
    2,816 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
    3,022 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
    9,066 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   10,577 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  186,040 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
    5,340 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
    8,010 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
   16,924 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  175,674 ( 0.00%)          if !value.needs_infer() {
  603,053 ( 0.01%)              return value; // Avoid duplicated subst-folding.
        .                   }
  103,473 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  129,441 ( 0.00%)          value.fold_with(&mut r)
   15,254 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   84,897 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
   40,896 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  413,922 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   56,598 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
   16,328 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
    6,123 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
   34,697 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
   14,287 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
       58 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
      116 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
       87 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  437,911 ( 0.01%)          self.universe.get()
  204,660 ( 0.00%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
      144 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
      388 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
      144 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   // variables, thus we don't need to substitute back the original values.
        .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
        .               }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
1,496,232 ( 0.03%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
  681,416 ( 0.02%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  308,544 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
    2,620 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
      768 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
1,683,261 ( 0.04%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
  190,496 ( 0.00%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    2,853 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
    2,853 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
      552 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   30,645 ( 0.00%)          match *ty.kind() {
    6,810 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
        .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
      552 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  302,631 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    4,816 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    2,458 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
      125 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
       75 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    6,020 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
       70 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
      175 ( 0.00%)          match *self {
       35 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   17,458 ( 0.00%)          match *cause.code() {
    2,121 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   10,605 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

1,058,136 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 71 ----------------------------------------
         .               fn default() -> FxHasher {
         .                   FxHasher { hash: 0 }
         .               }
         .           }
         .           
         .           impl FxHasher {
         .               #[inline]
         .               fn add_to_hash(&mut self, i: usize) {
 1,292,439 ( 0.03%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
         .               }
         .           }
         .           
         .           impl Hasher for FxHasher {
         .               #[inline]
    30,601 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
         .                   #[cfg(target_pointer_width = "32")]
         .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
         .                   #[cfg(target_pointer_width = "64")]
         .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
         .           
    82,951 ( 0.00%)          let mut hash = FxHasher { hash: self.hash };
         .                   assert!(size_of::<usize>() <= 8);
 1,095,998 ( 0.03%)          while bytes.len() >= size_of::<usize>() {
         .                       hash.add_to_hash(read_usize(bytes) as usize);
         .                       bytes = &bytes[size_of::<usize>()..];
         .                   }
   168,504 ( 0.00%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
         .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
         .                       bytes = &bytes[4..];
         .                   }
   168,504 ( 0.00%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
         .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
         .                       bytes = &bytes[2..];
         .                   }
   177,163 ( 0.00%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
    35,105 ( 0.00%)              hash.add_to_hash(bytes[0] as usize);
         .                   }
    31,168 ( 0.00%)          self.hash = hash.hash;
    30,601 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
       461 ( 0.00%)          self.add_to_hash(i as usize);
         .               }
         .           
         .               #[inline]
         .               fn write_u16(&mut self, i: u16) {
       388 ( 0.00%)          self.add_to_hash(i as usize);
         .               }
         .           
         .               #[inline]
         .               fn write_u32(&mut self, i: u32) {
37,247,878 ( 0.86%)          self.add_to_hash(i as usize);
         .               }
         .           
         .               #[cfg(target_pointer_width = "32")]
         .               #[inline]
         .               fn write_u64(&mut self, i: u64) {
         .                   self.add_to_hash(i as usize);
         .                   self.add_to_hash((i >> 32) as usize);
         .               }
-- line 131 ----------------------------------------

        99 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir               

-- line 8 ----------------------------------------
      .           };
      .           use rustc_ast_pretty::pprust::token_to_string;
      .           use rustc_data_structures::fx::FxHashMap;
      .           use rustc_errors::PResult;
      .           use rustc_span::Span;
      .           
      .           impl<'a> StringReader<'a> {
      .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
    133 ( 0.00%)          let mut tt_reader = TokenTreesReader {
      .                       string_reader: self,
      7 ( 0.00%)              token: Token::dummy(),
      .                       open_braces: Vec::new(),
      .                       unmatched_braces: Vec::new(),
      .                       matching_delim_spans: Vec::new(),
      .                       last_unclosed_found_span: None,
      .                       last_delim_empty_block_spans: FxHashMap::default(),
      .                       matching_block_spans: Vec::new(),
      .                   };
      7 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
     42 ( 0.00%)          (res, tt_reader.unmatched_braces)
      .               }
      .           }
      .           
      .           struct TokenTreesReader<'a> {
      .               string_reader: StringReader<'a>,
      .               token: Token,
      .               /// Stack of open delimiters and their spans. Used for error message.
      .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
      .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
      .               /// Collect the spans of braces (Open, Close). Used only
      .               /// for detecting if blocks are empty and only braces.
      .               matching_block_spans: Vec<(Span, Span)>,
      .           }
      .           
      .           impl<'a> TokenTreesReader<'a> {
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
     56 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
      .                   let mut buf = TokenStreamBuilder::default();
      .           
      .                   self.bump();
  5,584 ( 0.00%)          while self.token != token::Eof {
 22,280 ( 0.00%)              buf.push(self.parse_token_tree()?);
      .                   }
      .           
      .                   Ok(buf.into_token_stream())
     63 ( 0.00%)      }
      .           
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
      .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
      .                   let mut buf = TokenStreamBuilder::default();
      .                   loop {
155,088 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
      .                           return buf.into_token_stream();
      .                       }
      .           
331,425 ( 0.01%)              match self.parse_token_tree() {
596,565 ( 0.01%)                  Ok(tree) => buf.push(tree),
      .                           Err(mut e) => {
      .                               e.emit();
      .                               return buf.into_token_stream();
      .                           }
      .                       }
      .                   }
      .               }
      .           
621,630 ( 0.01%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
138,140 ( 0.00%)          let sm = self.string_reader.sess.source_map();
      .           
576,594 ( 0.01%)          match self.token.kind {
      .                       token::Eof => {
      .                           let msg = "this file contains an unclosed delimiter";
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
      .                           for &(_, sp) in &self.open_braces {
      .                               err.span_label(sp, "unclosed delimiter");
      .                               self.unmatched_braces.push(UnmatchedBrace {
      .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
      .                                   err.span_label(
      .                                       *close_sp,
      .                                       "...as it matches this but it has different indentation",
      .                                   );
      .                               }
      .                           }
      .                           Err(err)
      .                       }
 11,259 ( 0.00%)              token::OpenDelim(delim) => {
      .                           // The span for beginning of the delimited section
 11,259 ( 0.00%)                  let pre_span = self.token.span;
      .           
      .                           // Parse the open delimiter.
 78,813 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
      .                           self.bump();
      .           
      .                           // Parse the token trees within the delimiters.
      .                           // We stop at any delimiter so we can try to recover if the user
      .                           // uses an incorrect delimiter.
 11,259 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
      .           
      .                           // Expand to cover the entire delimited token tree
 56,295 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
      .           
 22,518 ( 0.00%)                  match self.token.kind {
      .                               // Correct delimiter.
 22,518 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
      .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
 22,518 ( 0.00%)                          let close_brace_span = self.token.span;
      .           
 33,777 ( 0.00%)                          if tts.is_empty() {
 27,105 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
 36,140 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
      .                                           // Only track if the block is in the form of `{}`, otherwise it is
      .                                           // likely that it was written on purpose.
      .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
      .                                       }
      .                                   }
      .           
      .                                   //only add braces
 45,036 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
      .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
      .                                   }
      .           
 11,259 ( 0.00%)                          if self.open_braces.is_empty() {
      .                                       // Clear up these spans to avoid suggesting them as we've found
      .                                       // properly matched delimiters so far for an entire block.
      .                                       self.matching_delim_spans.clear();
      .                                   } else {
      .                                       self.matching_delim_spans.push((
      .                                           open_brace,
      .                                           open_brace_span,
      .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
      .                               token::Eof => {
      .                                   // Silently recover, the EOF token will be seen again
      .                                   // and an error emitted then. Thus we don't pop from
      .                                   // self.open_braces here.
      .                               }
      .                               _ => {}
      .                           }
      .           
 78,813 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
      .                       }
      .                       token::CloseDelim(delim) => {
      .                           // An unexpected closing delimiter (i.e., there is no
      .                           // matching opening delimiter).
      .                           let token_str = token_to_string(&self.token);
      .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
      .                                   err.span_label(parent.1, "...matches this closing brace");
      .                               }
      .                           }
      .           
      .                           err.span_label(self.token.span, "unexpected closing delimiter");
      .                           Err(err)
      .                       }
      .                       _ => {
289,055 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
      .                           let mut spacing = self.bump();
115,622 ( 0.00%)                  if !self.token.is_op() {
      .                               spacing = Alone;
      .                           }
346,866 ( 0.01%)                  Ok((tt, spacing))
      .                       }
      .                   }
552,560 ( 0.01%)      }
      .           
      .               fn bump(&mut self) -> Spacing {
666,708 ( 0.02%)          let (spacing, token) = self.string_reader.next_token();
345,413 ( 0.01%)          self.token = token;
      .                   spacing
      .               }
      .           }
      .           
 11,259 ( 0.00%)  #[derive(Default)]
      .           struct TokenStreamBuilder {
      .               buf: Vec<TreeAndSpacing>,
      .           }
      .           
      .           impl TokenStreamBuilder {
897,910 ( 0.02%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
467,131 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
 42,520 ( 0.00%)              if let TokenTree::Token(token) = &tree {
101,520 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
      .                               self.buf.pop();
113,220 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
      .                               return;
      .                           }
      .                       }
      .                   }
298,175 ( 0.01%)          self.buf.push((tree, joint))
552,560 ( 0.01%)      }
      .           
      .               fn into_token_stream(self) -> TokenStream {
112,653 ( 0.00%)          TokenStream::new(self.buf)
      .               }
      .           }

243,429 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
1,566,000 ( 0.04%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       23 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
      620 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    1,670 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       12 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       48 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    1,366 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        7 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        6 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
       20 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
       41 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
       30 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    3,483 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    3,813 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        1 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       42 ( 0.00%)      fn from(p: PathBuf) -> Self {
       12 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       36 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       42 ( 0.00%)      }
        .           }
        .           
        8 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       84 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
      126 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
      126 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
      105 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
      668 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
       15 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
       30 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        6 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       12 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
        5 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        2 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
        5 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       11 ( 0.00%)      pub lo: BytePos,
       11 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       30 ( 0.00%)      pub ctxt: SyntaxContext,
       10 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  459,489 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      570 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   25,632 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   19,224 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   25,632 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  195,417 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
  130,278 ( 0.00%)      }
        .               #[inline]
    3,532 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    3,532 ( 0.00%)      }
        .               #[inline]
   11,313 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    7,542 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    3,040 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    1,824 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
       54 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
       36 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
-- line 574 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      243 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      162 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    1,710 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
    1,140 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    1,860 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      930 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    2,046 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   33,966 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   22,644 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    1,307 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
    1,334 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
   18,996 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
    2,155 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      431 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
    1,724 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
  129,052 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
  110,616 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
   92,180 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
      185 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
      222 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      148 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  777,260 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  140,966 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      352 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      259 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  492,394 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  635,940 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    1,496 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      952 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    1,088 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    1,199 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      218 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      763 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      981 ( 0.00%)      }
        .           
      572 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
      364 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    1,550 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       72 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    9,732 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    5,677 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   11,574 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  263,457 ( 0.01%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  175,638 ( 0.00%)          let mut span = self.data();
  145,753 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  263,457 ( 0.01%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
  292,118 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
    1,074 ( 0.00%)          let mut span = self.data();
    1,611 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
    4,296 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      207 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      694 ( 0.00%)          let mut span = self.data();
    1,227 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
    2,431 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
      230 ( 0.00%)      }
        .           
        .               #[inline]
  162,952 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  142,583 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    1,395 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
      100 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      234 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    1,395 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    1,395 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
      100 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       80 ( 0.00%)          MultiSpan::from_spans(spans)
      100 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      268 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      466 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      134 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      466 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      402 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
  178,584 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       18 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      705 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
      626 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       36 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    1,252 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       21 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1324 ----------------------------------------
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        .                   Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        3 ( 0.00%)          let len = self.hash_len();
        3 ( 0.00%)          &self.value[..len]
        3 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
       27 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      348 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        6 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        6 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        6 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       24 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       12 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       12 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       18 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       66 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    2,817 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      313 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  636,706 ( 0.01%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
      626 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    3,443 ( 0.00%)              SourceFile {
    2,504 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    1,252 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    1,252 ( 0.00%)                  lines,
    1,252 ( 0.00%)                  multibyte_chars,
    1,252 ( 0.00%)                  non_narrow_chars,
    1,252 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    2,817 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       77 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       21 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       14 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       14 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       21 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       84 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       14 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      119 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       77 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       28 ( 0.00%)              lines,
       28 ( 0.00%)              multibyte_chars,
       28 ( 0.00%)              non_narrow_chars,
       28 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       63 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
      132 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
       66 ( 0.00%)          self.lines[line_index]
      132 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    3,080 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      440 ( 0.00%)          if matches!(
      880 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      440 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    3,960 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      334 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   75,347 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   78,261 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   45,678 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   31,150 ( 0.00%)          assert!(line_index < self.lines.len());
   44,952 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       27 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   29,946 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       70 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
   38,286 ( 0.00%)          np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       63 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        7 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        7 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1817 ----------------------------------------
        .               let mut buf = std::mem::replace(src, String::new()).into_bytes();
        .               let mut gap_len = 0;
        .               let mut tail = buf.as_mut_slice();
        .               let mut cursor = 0;
        .               let original_gap = normalized_pos.last().map_or(0, |l| l.diff);
        .               loop {
        .                   let idx = match find_crlf(&tail[gap_len..]) {
        .                       None => tail.len(),
   25,512 ( 0.00%)              Some(idx) => idx + gap_len,
        .                   };
        .                   tail.copy_within(gap_len..idx, 0);
        .                   tail = &mut tail[idx - gap_len..];
   25,524 ( 0.00%)          if tail.len() == gap_len {
        .                       break;
        .                   }
   25,512 ( 0.00%)          cursor += idx - gap_len;
   25,512 ( 0.00%)          gap_len += 1;
        .                   normalized_pos.push(NormalizedPos {
   38,268 ( 0.00%)              pos: BytePos::from_usize(cursor + 1),
   25,512 ( 0.00%)              diff: original_gap + gap_len as u32,
        .                   });
        .               }
        .           
        .               // Account for removed `\r`.
        .               // After `set_len`, `buf` is guaranteed to contain utf-8 again.
       12 ( 0.00%)      let new_len = buf.len() - gap_len;
        .               unsafe {
        .                   buf.set_len(new_len);
       30 ( 0.00%)          *src = String::from_utf8_unchecked(buf);
        .               }
        .           
        .               fn find_crlf(src: &[u8]) -> Option<usize> {
        .                   let mut search_idx = 0;
        .                   while let Some(idx) = find_cr(&src[search_idx..]) {
   12,756 ( 0.00%)              if src[search_idx..].get(idx + 1) != Some(&b'\n') {
        .                           search_idx += idx + 1;
        .                           continue;
        .                       }
   25,512 ( 0.00%)              return Some(search_idx + idx);
        .                   }
        .                   None
        .               }
        .           
        .               fn find_cr(src: &[u8]) -> Option<usize> {
  281,592 ( 0.01%)          src.iter().position(|&b| b == b'\r')
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Pos, BytePos, CharPos
        .           //
        .           
        .           pub trait Pos {
-- line 1869 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
  160,102 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
   11,618 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
  216,501 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,309,489 ( 0.03%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
2,065,342 ( 0.05%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   82,838 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2037 ----------------------------------------
        .               pub source_len: usize,
        .               pub begin_pos: BytePos,
        .               pub end_pos: BytePos,
        .           }
        .           
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
       36 ( 0.00%)      pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
      494 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
      247 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  635,957 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  103,069 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  532,888 ( 0.01%)          let span = self.data_untracked();
  235,931 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
  272,553 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  183,213 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  178,680 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  357,360 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  178,680 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   89,340 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   89,340 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  726,808 ( 0.02%)      }
        .           }

2,426,913 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   16,622 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    4,300 ( 0.00%)              self.file = file;
    6,422 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   11,410 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   29,968 ( 0.00%)          self.line_number = line_index + 1;
   44,496 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  164,422 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
    3,078 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
    1,539 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
    7,695 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   10,773 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
    6,156 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
  625,380 ( 0.01%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
  357,360 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
   89,340 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
   89,340 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  150,456 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  150,164 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
  450,492 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  150,164 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
   75,082 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
   75,082 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
   75,082 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  300,328 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   28,224 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  113,836 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   14,240 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
   17,088 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
   11,392 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   34,230 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   34,230 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
   71,290 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   38,790 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      292 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
      438 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
    1,182 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    2,364 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    4,728 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   28,516 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   14,258 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   28,516 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   14,258 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
   71,290 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   42,774 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   42,774 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
   42,774 ( 0.00%)          Some((
   14,258 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   14,258 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
  804,060 ( 0.02%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
1,071,128 ( 0.02%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
   77,580 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   12,252 ( 0.00%)              if idx != avoid_idx
    6,085 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
   14,240 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
    2,848 ( 0.00%)          if !self.source_map.files().is_empty() {
    5,696 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
   22,784 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
   14,240 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

1,197,435 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  295,307 ( 0.01%)      ptr: NonZeroUsize,
  808,697 ( 0.02%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
   23,542 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
    5,793 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
    5,793 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
  117,227 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
    5,793 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Ord for GenericArg<'tcx> {
       21 ( 0.00%)      fn cmp(&self, other: &GenericArg<'_>) -> Ordering {
       14 ( 0.00%)          self.unpack().cmp(&other.unpack())
       16 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   82,491 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
   82,491 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  377,210 ( 0.01%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  377,210 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
       23 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
       23 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
6,111,810 ( 0.14%)              match ptr & TAG_MASK {
   70,967 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
1,475,068 ( 0.03%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
    1,359 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
    5,426 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    4,590 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   28,965 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   28,965 ( 0.00%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
      103 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
      103 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
   14,140 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    7,108 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
   12,726 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
  276,577 ( 0.01%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   97,011 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   61,630 ( 0.00%)          tcx.intern_substs(&substs)
  277,380 ( 0.01%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
  346,480 ( 0.01%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
  158,096 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
   11,442 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
  276,632 ( 0.01%)      }
        .           
      464 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
  194,057 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
      464 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  374,871 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
    8,946 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
    2,556 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
   10,224 ( 0.00%)      }
        .           
        4 ( 0.00%)      pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
        8 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   89,334 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
1,363,630 ( 0.03%)          match self.len() {
        .                       1 => {
  293,019 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  927,250 ( 0.02%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
   83,228 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
  191,422 ( 0.00%)                  let param1 = self[1].try_fold_with(folder)?;
  191,407 ( 0.00%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
  154,532 ( 0.00%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
    4,902 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
      466 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
    1,416 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
  120,546 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  200,234 ( 0.00%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  928,376 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  171,619 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
  342,822 ( 0.01%)          self.binders_passed += 1;
   56,623 ( 0.00%)          let t = t.super_fold_with(self);
  342,822 ( 0.01%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
  134,958 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
   44,986 ( 0.00%)          match *r {
   31,388 ( 0.00%)              ty::ReEarlyBound(data) => {
   31,388 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
   15,694 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
  157,451 ( 0.00%)      }
        .           
  681,375 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  227,125 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
  416,996 ( 0.01%)          match *t.kind() {
  801,730 ( 0.02%)              ty::Param(p) => self.ty_for_param(p, t),
  288,912 ( 0.01%)              _ => t.super_fold_with(self),
        .                   }
  894,865 ( 0.02%)      }
        .           
   52,150 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
   15,025 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
   66,825 ( 0.00%)              c.super_fold_with(self)
        .                   }
      200 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
  320,692 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
       50 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  598,953 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   39,004 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    2,997 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
      962 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
      495 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

2,371,534 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/chain.rs
--------------------------------------------------------------------------------
Ir                  

-- line 11 ----------------------------------------
         .           /// ```
         .           /// use std::iter::Chain;
         .           /// use std::slice::Iter;
         .           ///
         .           /// let a1 = [1, 2, 3];
         .           /// let a2 = [4, 5, 6];
         .           /// let iter: Chain<Iter<_>, Iter<_>> = a1.iter().chain(a2.iter());
         .           /// ```
        36 ( 0.00%)  #[derive(Clone, Debug)]
         .           #[must_use = "iterators are lazy and do nothing unless consumed"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub struct Chain<A, B> {
         .               // These are "fused" with `Option` so we don't need separate state to track which part is
         .               // already exhausted, and we may also get niche layout for `None`. We don't use the real `Fuse`
         .               // adapter because its specialization for `FusedIterator` unconditionally descends into the
         .               // iterator, and that could be expensive to keep revisiting stuff like nested chains. It also
         .               // hurts compiler performance to add more iterator layers to `Chain`.
-- line 27 ----------------------------------------
-- line 28 ----------------------------------------
         .               //
         .               // Only the "first" iterator is actually set `None` when exhausted, depending on whether you
         .               // iterate forward or backward. If you mix directions, then both sides may be `None`.
         .               a: Option<A>,
         .               b: Option<B>,
         .           }
         .           impl<A, B> Chain<A, B> {
         .               pub(in super::super) fn new(a: A, b: B) -> Chain<A, B> {
 4,360,715 ( 0.10%)          Chain { a: Some(a), b: Some(b) }
         .               }
         .           }
         .           
         .           /// Fuse the iterator if the expression is `None`.
         .           macro_rules! fuse {
         .               ($self:ident . $iter:ident . $($call:tt)+) => {
         .                   match $self.$iter {
         .                       Some(ref mut iter) => match iter.$($call)+ {
-- line 44 ----------------------------------------
-- line 68 ----------------------------------------
         .           impl<A, B> Iterator for Chain<A, B>
         .           where
         .               A: Iterator,
         .               B: Iterator<Item = A::Item>,
         .           {
         .               type Item = A::Item;
         .           
         .               #[inline]
    51,698 ( 0.00%)      fn next(&mut self) -> Option<A::Item> {
10,283,059 ( 0.24%)          match fuse!(self.a.next()) {
 3,962,792 ( 0.09%)              None => maybe!(self.b.next()),
   136,443 ( 0.00%)              item => item,
         .                   }
    45,134 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[rustc_inherit_overflow_checks]
         .               fn count(self) -> usize {
   106,686 ( 0.00%)          let a_count = match self.a {
         .                       Some(a) => a.count(),
         .                       None => 0,
         .                   };
   106,686 ( 0.00%)          let b_count = match self.b {
         .                       Some(b) => b.count(),
         .                       None => 0,
         .                   };
    35,534 ( 0.00%)          a_count + b_count
         .               }
         .           
    11,630 ( 0.00%)      fn try_fold<Acc, F, R>(&mut self, mut acc: Acc, mut f: F) -> R
         .               where
         .                   Self: Sized,
         .                   F: FnMut(Acc, Self::Item) -> R,
         .                   R: Try<Output = Acc>,
         .               {
    10,100 ( 0.00%)          if let Some(ref mut a) = self.a {
     3,432 ( 0.00%)              acc = a.try_fold(acc, &mut f)?;
     1,008 ( 0.00%)              self.a = None;
         .                   }
    10,382 ( 0.00%)          if let Some(ref mut b) = self.b {
     1,806 ( 0.00%)              acc = b.try_fold(acc, f)?;
         .                       // we don't fuse the second iterator
         .                   }
         .                   try { acc }
    12,106 ( 0.00%)      }
         .           
 1,549,595 ( 0.04%)      fn fold<Acc, F>(self, mut acc: Acc, mut f: F) -> Acc
         .               where
         .                   F: FnMut(Acc, Self::Item) -> Acc,
         .               {
 1,194,923 ( 0.03%)          if let Some(a) = self.a {
    21,711 ( 0.00%)              acc = a.fold(acc, &mut f);
         .                   }
 1,586,095 ( 0.04%)          if let Some(b) = self.b {
 1,384,209 ( 0.03%)              acc = b.fold(acc, f);
         .                   }
     1,280 ( 0.00%)          acc
 1,559,797 ( 0.04%)      }
         .           
         .               #[inline]
         .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         .                   let mut rem = n;
         .           
         .                   if let Some(ref mut a) = self.a {
         .                       match a.advance_by(rem) {
         .                           Ok(()) => return Ok(()),
-- line 133 ----------------------------------------
-- line 164 ----------------------------------------
         .                   maybe!(self.b.nth(n))
         .               }
         .           
         .               #[inline]
         .               fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .               where
         .                   P: FnMut(&Self::Item) -> bool,
         .               {
       524 ( 0.00%)          match fuse!(self.a.find(&mut predicate)) {
     1,748 ( 0.00%)              None => maybe!(self.b.find(predicate)),
        56 ( 0.00%)              item => item,
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn last(self) -> Option<A::Item> {
         .                   // Must exhaust a before b.
         .                   let a_last = match self.a {
         .                       Some(a) => a.last(),
-- line 182 ----------------------------------------
-- line 185 ----------------------------------------
         .                   let b_last = match self.b {
         .                       Some(b) => b.last(),
         .                       None => None,
         .                   };
         .                   b_last.or(a_last)
         .               }
         .           
         .               #[inline]
       215 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
 1,949,958 ( 0.05%)          match self {
         .                       Chain { a: Some(a), b: Some(b) } => {
         .                           let (a_lower, a_upper) = a.size_hint();
       611 ( 0.00%)                  let (b_lower, b_upper) = b.size_hint();
         .           
         .                           let lower = a_lower.saturating_add(b_lower);
         .           
    30,759 ( 0.00%)                  let upper = match (a_upper, b_upper) {
         .                               (Some(x), Some(y)) => x.checked_add(y),
         .                               _ => None,
         .                           };
         .           
       123 ( 0.00%)                  (lower, upper)
         .                       }
         .                       Chain { a: Some(a), b: None } => a.size_hint(),
         .                       Chain { a: None, b: Some(b) } => b.size_hint(),
         .                       Chain { a: None, b: None } => (0, Some(0)),
         .                   }
       258 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A, B> DoubleEndedIterator for Chain<A, B>
         .           where
         .               A: DoubleEndedIterator,
         .               B: DoubleEndedIterator<Item = A::Item>,
         .           {
-- line 220 ----------------------------------------

 6,252,294 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/chain.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      352 ( 0.00%)      fn clone(&self) -> Self {
    1,615 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
      319 ( 0.00%)              table: self.table.clone(),
        .                   }
      396 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
  190,227 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  687,982 ( 0.02%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  356,496 ( 0.01%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        4 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
        .               hash_builder.hash_one(val)
        8 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
  335,854 ( 0.01%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       13 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
        .               /// map.insert("c", 3);
        .               ///
        .               /// for key in map.keys() {
        .               ///     println!("{}", key);
        .               /// }
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn keys(&self) -> Keys<'_, K, V> {
        6 ( 0.00%)          Keys { inner: self.iter() }
        .               }
        .           
        .               /// An iterator visiting all values in arbitrary order.
        .               /// The iterator element type is `&'a V`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
   42,456 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
  184,134 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      148 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       10 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
      175 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
      185 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
1,408,176 ( 0.03%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
1,757,358 ( 0.04%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        2 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  711,734 ( 0.02%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
  939,384 ( 0.02%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      233 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      711 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
      466 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
      237 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        8 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
        .               /// mutable reference will be returned to any value. `None` will be returned if any of the
        .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
3,857,576 ( 0.09%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      398 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
       76 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
1,136,921 ( 0.03%)              self.table
1,038,458 ( 0.02%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  127,060 ( 0.00%)              None
        .                   }
3,685,923 ( 0.09%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  107,591 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  556,116 ( 0.01%)          match self.remove_entry(k) {
   51,797 ( 0.00%)              Some((_, v)) => Some(v),
   98,254 ( 0.00%)              None => None,
        .                   }
  269,558 ( 0.01%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  241,456 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
2,337,950 ( 0.05%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
5,928,253 ( 0.14%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
6,472,762 ( 0.15%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  744,560 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
4,109,714 ( 0.10%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  142,076 ( 0.00%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
1,967,476 ( 0.05%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
2,325,489 ( 0.05%)          self.from_hash(hash, equivalent(k))
3,569,044 ( 0.08%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
3,076,777 ( 0.07%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  234,797 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,353 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   23,617 ( 0.00%)          IntoIter {
   10,406 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
    4,059 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  267,596 ( 0.01%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
      752 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        2 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
    2,973 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       63 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
      126 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn insert(self, value: V) -> &'a mut V
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
        .                   let table = &mut self.table.table;
       20 ( 0.00%)          let entry = table.insert_entry(
        .                       self.hash,
        .                       (self.key, value),
        .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
        .                   );
        .                   &mut entry.1
        .               }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   24,503 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
   18,052 ( 0.00%)          let iter = iter.into_iter();
   38,064 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
      626 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
  115,353 ( 0.00%)              self.insert(k, v);
        .                   });
   16,214 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

2,571,226 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           mod late;
        .           mod macros;
        .           
        .           enum Weak {
        .               Yes,
        .               No,
        .           }
        .           
   27,318 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Debug)]
        .           pub enum Determinacy {
        .               Determined,
        .               Undetermined,
        .           }
        .           
        .           impl Determinacy {
        .               fn determined(determined: bool) -> Determinacy {
        .                   if determined { Determinacy::Determined } else { Determinacy::Undetermined }
   18,212 ( 0.00%)      }
        .           }
        .           
        .           /// A specific scope in which a name can be looked up.
        .           /// This enum is currently used only for early resolution (imports and macros),
        .           /// but not for late resolution yet.
        .           #[derive(Clone, Copy)]
        .           enum Scope<'a> {
        .               DeriveHelpers(LocalExpnId),
-- line 116 ----------------------------------------
-- line 157 ----------------------------------------
        .               macro_rules: MacroRulesScopeRef<'a>,
        .               derives: &'a [ast::Path],
        .           }
        .           
        .           impl<'a> ParentScope<'a> {
        .               /// Creates a parent scope with the passed argument used as the module scope component,
        .               /// and other scope components set to default empty values.
        .               pub fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {
        8 ( 0.00%)          ParentScope {
        .                       module,
        .                       expansion: LocalExpnId::ROOT,
      773 ( 0.00%)              macro_rules: resolver.arenas.alloc_macro_rules_scope(MacroRulesScope::Empty),
        .                       derives: &[],
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Copy, Debug, Clone)]
        .           enum ImplTraitContext {
        .               Existential,
-- line 176 ----------------------------------------
-- line 278 ----------------------------------------
        .               FailedToResolve(Span, String, Option<Suggestion>),
        .               ExpectedFound(Span, String, Res),
        .               Indeterminate(Span),
        .               ModuleOnly(Span),
        .           }
        .           
        .           /// A minimal representation of a path segment. We use this in resolve because we synthesize 'path
        .           /// segments' which don't have the rest of an AST or HIR `PathSegment`.
      210 ( 0.00%)  #[derive(Clone, Copy, Debug)]
        .           pub struct Segment {
        .               ident: Ident,
        .               id: Option<NodeId>,
        .               /// Signals whether this `PathSegment` has generic arguments. Used to avoid providing
        .               /// nonsensical suggestions.
        .               has_generic_args: bool,
        .           }
        .           
-- line 294 ----------------------------------------
-- line 303 ----------------------------------------
        .           
        .               fn names_to_string(segments: &[Segment]) -> String {
        .                   names_to_string(&segments.iter().map(|seg| seg.ident.name).collect::<Vec<_>>())
        .               }
        .           }
        .           
        .           impl<'a> From<&'a ast::PathSegment> for Segment {
        .               fn from(seg: &'a ast::PathSegment) -> Segment {
       70 ( 0.00%)          Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }
        .               }
        .           }
        .           
        .           struct UsePlacementFinder {
        .               target_module: NodeId,
        .               span: Option<Span>,
        .               found_use: bool,
        .           }
-- line 319 ----------------------------------------
-- line 391 ----------------------------------------
        .           #[derive(Debug)]
        .           enum LexicalScopeBinding<'a> {
        .               Item(&'a NameBinding<'a>),
        .               Res(Res),
        .           }
        .           
        .           impl<'a> LexicalScopeBinding<'a> {
        .               fn res(self) -> Res {
      852 ( 0.00%)          match self {
        .                       LexicalScopeBinding::Item(binding) => binding.res(),
    1,278 ( 0.00%)              LexicalScopeBinding::Res(res) => res,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug)]
        .           enum ModuleOrUniformRoot<'a> {
        .               /// Regular module.
        .               Module(Module<'a>),
-- line 409 ----------------------------------------
-- line 418 ----------------------------------------
        .               /// Virtual module that denotes resolution in current scope.
        .               /// Used only for resolving single-segment imports. The reason it exists is that import paths
        .               /// are always split into two parts, the first of which should be some kind of module.
        .               CurrentScope,
        .           }
        .           
        .           impl ModuleOrUniformRoot<'_> {
        .               fn same_def(lhs: Self, rhs: Self) -> bool {
      184 ( 0.00%)          match (lhs, rhs) {
        .                       (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) => {
        .                           ptr::eq(lhs, rhs)
        .                       }
        .                       (
        .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
        .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
        .                       )
        .                       | (ModuleOrUniformRoot::ExternPrelude, ModuleOrUniformRoot::ExternPrelude)
-- line 434 ----------------------------------------
-- line 491 ----------------------------------------
        .           /// A key that identifies a binding in a given `Module`.
        .           ///
        .           /// Multiple bindings in the same module can have the same key (in a valid
        .           /// program) if all but one of them come from glob imports.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
        .           struct BindingKey {
        .               /// The identifier for the binding, aways the `normalize_to_macros_2_0` version of the
        .               /// identifier.
  276,696 ( 0.01%)      ident: Ident,
   91,648 ( 0.00%)      ns: Namespace,
        .               /// 0 if ident is not `_`, otherwise a value that's unique to the specific
        .               /// `_` in the expanded AST that introduced this binding.
   68,298 ( 0.00%)      disambiguator: u32,
        .           }
        .           
        .           type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;
        .           
        .           /// One node in the tree of modules.
        .           ///
        .           /// Note that a "module" in resolve is broader than a `mod` that you declare in Rust code. It may be one of these:
        .           ///
-- line 511 ----------------------------------------
-- line 551 ----------------------------------------
        .           impl<'a> ModuleData<'a> {
        .               fn new(
        .                   parent: Option<Module<'a>>,
        .                   kind: ModuleKind,
        .                   expansion: ExpnId,
        .                   span: Span,
        .                   no_implicit_prelude: bool,
        .               ) -> Self {
    2,023 ( 0.00%)          let is_foreign = match kind {
        .                       ModuleKind::Def(_, def_id, _) => !def_id.is_local(),
        .                       ModuleKind::Block(_) => false,
        .                   };
    6,647 ( 0.00%)          ModuleData {
        .                       parent,
        .                       kind,
        .                       lazy_resolutions: Default::default(),
        .                       populate_on_access: Cell::new(is_foreign),
        .                       unexpanded_invocations: Default::default(),
        .                       no_implicit_prelude,
        .                       glob_importers: RefCell::new(Vec::new()),
        .                       globs: RefCell::new(Vec::new()),
        .                       traits: RefCell::new(None),
        .                       span,
        .                       expansion,
        .                   }
        .               }
        .           
      272 ( 0.00%)      fn for_each_child<R, F>(&'a self, resolver: &mut R, mut f: F)
        .               where
        .                   R: AsMut<Resolver<'a>>,
        .                   F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>),
        .               {
      146 ( 0.00%)          for (key, name_resolution) in resolver.as_mut().resolutions(self).borrow().iter() {
    3,736 ( 0.00%)              if let Some(binding) = name_resolution.borrow().binding {
      633 ( 0.00%)                  f(resolver, key.ident, key.ns, binding);
        .                       }
        .                   }
      216 ( 0.00%)      }
        .           
        .               /// This modifies `self` in place. The traits will be stored in `self.traits`.
        .               fn ensure_traits<R>(&'a self, resolver: &mut R)
        .               where
        .                   R: AsMut<Resolver<'a>>,
        .               {
        .                   let mut traits = self.traits.borrow_mut();
   19,096 ( 0.00%)          if traits.is_none() {
        .                       let mut collected_traits = Vec::new();
        .                       self.for_each_child(resolver, |_, name, ns, binding| {
      277 ( 0.00%)                  if ns != TypeNS {
        .                               return;
        .                           }
      880 ( 0.00%)                  if let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = binding.res() {
        .                               collected_traits.push((name, binding))
        .                           }
        .                       });
      138 ( 0.00%)              *traits = Some(collected_traits.into_boxed_slice());
        .                   }
        .               }
        .           
        .               fn res(&self) -> Option<Res> {
   41,328 ( 0.00%)          match self.kind {
   80,148 ( 0.00%)              ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               // Public for rustdoc.
        .               pub fn def_id(&self) -> DefId {
        .                   self.opt_def_id().expect("`ModuleData::def_id` is called on a block module")
        .               }
        .           
        .               fn opt_def_id(&self) -> Option<DefId> {
   19,192 ( 0.00%)          match self.kind {
        .                       ModuleKind::Def(_, def_id, _) => Some(def_id),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               // `self` resolves to the first module ancestor that `is_normal`.
        .               fn is_normal(&self) -> bool {
    3,129 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Mod, _, _))
        .               }
        .           
        .               fn is_trait(&self) -> bool {
        8 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Trait, _, _))
        .               }
        .           
        .               fn nearest_item_scope(&'a self) -> Module<'a> {
   81,536 ( 0.00%)          match self.kind {
        .                       ModuleKind::Def(DefKind::Enum | DefKind::Trait, ..) => {
        .                           self.parent.expect("enum or trait module without a parent")
        .                       }
        .                       _ => self,
        .                   }
        .               }
        .           
        .               /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).
        .               /// This may be the crate root.
    4,083 ( 0.00%)      fn nearest_parent_mod(&self) -> DefId {
   15,596 ( 0.00%)          match self.kind {
    7,430 ( 0.00%)              ModuleKind::Def(DefKind::Mod, def_id, _) => def_id,
      736 ( 0.00%)              _ => self.parent.expect("non-root module without parent").nearest_parent_mod(),
        .                   }
    8,166 ( 0.00%)      }
        .           
        .               fn is_ancestor_of(&self, mut other: &Self) -> bool {
        .                   while !ptr::eq(self, other) {
        .                       if let Some(parent) = other.parent {
        .                           other = parent;
        .                       } else {
        .                           return false;
        .                       }
-- line 662 ----------------------------------------
-- line 773 ----------------------------------------
        .               b1: &'a NameBinding<'a>,
        .               b2: &'a NameBinding<'a>,
        .               misc1: AmbiguityErrorMisc,
        .               misc2: AmbiguityErrorMisc,
        .           }
        .           
        .           impl<'a> NameBinding<'a> {
        .               fn module(&self) -> Option<Module<'a>> {
1,530,006 ( 0.04%)          match self.kind {
  259,952 ( 0.01%)              NameBindingKind::Module(module) => Some(module),
   54,101 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.module(),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               fn res(&self) -> Res {
  156,470 ( 0.00%)          match self.kind {
   15,967 ( 0.00%)              NameBindingKind::Res(res, _) => res,
   20,306 ( 0.00%)              NameBindingKind::Module(module) => module.res().unwrap(),
   11,911 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.res(),
        .                   }
        .               }
        .           
        .               fn is_ambiguity(&self) -> bool {
      499 ( 0.00%)          self.ambiguity.is_some()
      622 ( 0.00%)              || match self.kind {
      306 ( 0.00%)                  NameBindingKind::Import { binding, .. } => binding.is_ambiguity(),
        .                           _ => false,
        .                       }
        .               }
        .           
        .               fn is_possibly_imported_variant(&self) -> bool {
        .                   match self.kind {
        .                       NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),
        .                       NameBindingKind::Res(
-- line 807 ----------------------------------------
-- line 822 ----------------------------------------
        .                           kind: ModuleKind::Def(DefKind::Mod, def_id, _),
        .                           ..
        .                       }) => def_id.index == CRATE_DEF_INDEX,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               fn is_import(&self) -> bool {
      422 ( 0.00%)          matches!(self.kind, NameBindingKind::Import { .. })
        .               }
        .           
        .               fn is_glob_import(&self) -> bool {
    4,349 ( 0.00%)          match self.kind {
      468 ( 0.00%)              NameBindingKind::Import { import, .. } => import.is_glob(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               fn is_importable(&self) -> bool {
       98 ( 0.00%)          !matches!(
        .                       self.res(),
        .                       Res::Def(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy, _)
        .                   )
        .               }
        .           
        .               fn is_macro_def(&self) -> bool {
       25 ( 0.00%)          matches!(self.kind, NameBindingKind::Res(Res::Def(DefKind::Macro(..), _), _))
        .               }
        .           
        .               fn macro_kind(&self) -> Option<MacroKind> {
        .                   self.res().macro_kind()
        .               }
        .           
        .               // Suppose that we resolved macro invocation with `invoc_parent_expansion` to binding `binding`
        .               // at some expansion round `max(invoc, binding)` when they both emerged from macros.
-- line 856 ----------------------------------------
-- line 1065 ----------------------------------------
        .               /// they are declared in the static array generated by proc_macro_harness.
        .               proc_macros: Vec<NodeId>,
        .               confused_type_with_std_module: FxHashMap<Span, Span>,
        .           
        .               access_levels: AccessLevels,
        .           }
        .           
        .           /// Nothing really interesting here; it just provides memory for the rest of the crate.
        7 ( 0.00%)  #[derive(Default)]
        .           pub struct ResolverArenas<'a> {
        .               modules: TypedArena<ModuleData<'a>>,
        .               local_modules: RefCell<Vec<Module<'a>>>,
        .               imports: TypedArena<Import<'a>>,
        .               name_resolutions: TypedArena<RefCell<NameResolution<'a>>>,
        .               ast_paths: TypedArena<ast::Path>,
        .               dropless: DroplessArena,
        .           }
        .           
        .           impl<'a> ResolverArenas<'a> {
    3,757 ( 0.00%)      fn new_module(
        .                   &'a self,
        .                   parent: Option<Module<'a>>,
        .                   kind: ModuleKind,
        .                   expn_id: ExpnId,
        .                   span: Span,
        .                   no_implicit_prelude: bool,
        .                   module_map: &mut FxHashMap<DefId, Module<'a>>,
        .               ) -> Module<'a> {
        .                   let module =
        .                       self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));
        .                   let def_id = module.opt_def_id();
      867 ( 0.00%)          if def_id.map_or(true, |def_id| def_id.is_local()) {
        .                       self.local_modules.borrow_mut().push(module);
        .                   }
      289 ( 0.00%)          if let Some(def_id) = def_id {
        .                       module_map.insert(def_id, module);
        .                   }
        .                   module
    2,601 ( 0.00%)      }
        .               fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {
        .                   self.local_modules.borrow()
        .               }
        .               fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {
        .                   self.dropless.alloc(name_binding)
        .               }
       28 ( 0.00%)      fn alloc_import(&'a self, import: Import<'a>) -> &'a Import<'_> {
    1,212 ( 0.00%)          self.imports.alloc(import)
       28 ( 0.00%)      }
        .               fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {
    1,587 ( 0.00%)          self.name_resolutions.alloc(Default::default())
        .               }
        .               fn alloc_macro_rules_scope(&'a self, scope: MacroRulesScope<'a>) -> MacroRulesScopeRef<'a> {
        .                   PtrKey(self.dropless.alloc(Cell::new(scope)))
        .               }
        .               fn alloc_macro_rules_binding(
        .                   &'a self,
        .                   binding: MacroRulesBinding<'a>,
        .               ) -> &'a MacroRulesBinding<'a> {
-- line 1122 ----------------------------------------
-- line 1133 ----------------------------------------
        .           impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {
        .               fn as_mut(&mut self) -> &mut Resolver<'a> {
        .                   self
        .               }
        .           }
        .           
        .           impl<'a, 'b> DefIdTree for &'a Resolver<'b> {
        .               fn parent(self, id: DefId) -> Option<DefId> {
    1,124 ( 0.00%)          match id.as_local() {
        .                       Some(id) => self.definitions.def_key(id).parent,
        .                       None => self.cstore().def_key(id).parent,
        .                   }
        .                   .map(|index| DefId { index, ..id })
        .               }
        .           }
        .           
        .           /// This interface is used through the AST→HIR step, to embed full paths into the HIR. After that
        .           /// the resolver is no longer needed as all the relevant information is inline.
        .           impl ResolverAstLowering for Resolver<'_> {
       10 ( 0.00%)      fn def_key(&mut self, id: DefId) -> DefKey {
        2 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.definitions().def_key(id)
        .                   } else {
    5,184 ( 0.00%)              self.cstore().def_key(id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn def_span(&self, id: LocalDefId) -> Span {
        .                   self.definitions.def_span(id)
        .               }
        .           
    3,882 ( 0.00%)      fn item_generics_num_lifetimes(&self, def_id: DefId) -> usize {
    1,035 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      194 ( 0.00%)              self.item_generics_num_lifetimes[&def_id]
        .                   } else {
    3,624 ( 0.00%)              self.cstore().item_generics_num_lifetimes(def_id, self.session)
        .                   }
      776 ( 0.00%)      }
        .           
   17,896 ( 0.00%)      fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
    8,948 ( 0.00%)          self.legacy_const_generic_args(expr)
   26,844 ( 0.00%)      }
        .           
   33,612 ( 0.00%)      fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {
        .                   self.partial_res_map.get(&id).cloned()
  100,836 ( 0.00%)      }
        .           
      344 ( 0.00%)      fn get_import_res(&mut self, id: NodeId) -> PerNS<Option<Res>> {
       86 ( 0.00%)          self.import_res_map.get(&id).cloned().unwrap_or_default()
      430 ( 0.00%)      }
        .           
        .               fn get_label_res(&mut self, id: NodeId) -> Option<NodeId> {
        .                   self.label_res_map.get(&id).cloned()
        .               }
        .           
        .               fn definitions(&mut self) -> &mut Definitions {
      582 ( 0.00%)          &mut self.definitions
      582 ( 0.00%)      }
        .           
    6,252 ( 0.00%)      fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {
   10,931 ( 0.00%)          StableHashingContext::new(self.session, &self.definitions, self.crate_loader.cstore())
    7,815 ( 0.00%)      }
        .           
        .               fn lint_buffer(&mut self) -> &mut LintBuffer {
        .                   &mut self.lint_buffer
        .               }
        .           
        .               fn next_node_id(&mut self) -> NodeId {
        .                   self.next_node_id()
        .               }
        .           
  237,252 ( 0.01%)      fn take_trait_map(&mut self, node: NodeId) -> Option<Vec<TraitCandidate>> {
        .                   self.trait_map.remove(&node)
  237,252 ( 0.01%)      }
        .           
  237,896 ( 0.01%)      fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {
    4,195 ( 0.00%)          self.node_id_to_def_id.get(&node).copied()
  237,896 ( 0.01%)      }
        .           
    3,284 ( 0.00%)      fn local_def_id(&self, node: NodeId) -> LocalDefId {
        .                   self.opt_local_def_id(node).unwrap_or_else(|| panic!("no entry for node id: `{:?}`", node))
    3,284 ( 0.00%)      }
        .           
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash {
        .                   match def_id.as_local() {
        .                       Some(def_id) => self.definitions.def_path_hash(def_id),
        .                       None => self.cstore().def_path_hash(def_id),
        .                   }
        .               }
        .           
        .               /// Adds a definition with a parent definition.
   14,190 ( 0.00%)      fn create_def(
        .                   &mut self,
        .                   parent: LocalDefId,
        .                   node_id: ast::NodeId,
        .                   data: DefPathData,
        .                   expn_id: ExpnId,
        .                   span: Span,
        .               ) -> LocalDefId {
    1,892 ( 0.00%)          assert!(
    1,892 ( 0.00%)              !self.node_id_to_def_id.contains_key(&node_id),
        .                       "adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}",
        .                       node_id,
        .                       data,
        .                       self.definitions.def_key(self.node_id_to_def_id[&node_id]),
        .                   );
        .           
        .                   // Find the next free disambiguator for this key.
      946 ( 0.00%)          let next_disambiguator = &mut self.next_disambiguator;
        .                   let next_disambiguator = |parent, data| {
    4,730 ( 0.00%)              let next_disamb = next_disambiguator.entry((parent, data)).or_insert(0);
      946 ( 0.00%)              let disambiguator = *next_disamb;
      946 ( 0.00%)              *next_disamb = next_disamb.checked_add(1).expect("disambiguator overflow");
        .                       disambiguator
        .                   };
        .           
    9,460 ( 0.00%)          let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator, span);
        .           
        .                   // Some things for which we allocate `LocalDefId`s don't correspond to
        .                   // anything in the AST, so they don't have a `NodeId`. For these cases
        .                   // we don't need a mapping from `NodeId` to `LocalDefId`.
    2,838 ( 0.00%)          if node_id != ast::DUMMY_NODE_ID {
        .                       debug!("create_def: def_id_to_node_id[{:?}] <-> {:?}", def_id, node_id);
        .                       self.node_id_to_def_id.insert(node_id, def_id);
        .                   }
    2,838 ( 0.00%)          assert_eq!(self.def_id_to_node_id.push(node_id), def_id);
        .           
        .                   def_id
    8,514 ( 0.00%)      }
        .           }
        .           
        .           impl<'a> Resolver<'a> {
       16 ( 0.00%)      pub fn new(
        .                   session: &'a Session,
        .                   krate: &Crate,
        .                   crate_name: &str,
        .                   metadata_loader: Box<MetadataLoaderDyn>,
        .                   arenas: &'a ResolverArenas<'a>,
        .               ) -> Resolver<'a> {
        .                   let root_def_id = CRATE_DEF_ID.to_def_id();
        .                   let mut module_map = FxHashMap::default();
       14 ( 0.00%)          let graph_root = arenas.new_module(
        .                       None,
        .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
        1 ( 0.00%)              ExpnId::root(),
        1 ( 0.00%)              krate.span,
        2 ( 0.00%)              session.contains_name(&krate.attrs, sym::no_implicit_prelude),
        .                       &mut module_map,
        .                   );
       12 ( 0.00%)          let empty_module = arenas.new_module(
        .                       None,
        .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
        1 ( 0.00%)              ExpnId::root(),
        .                       DUMMY_SP,
        .                       true,
        .                       &mut FxHashMap::default(),
        .                   );
        .           
        4 ( 0.00%)          let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);
        2 ( 0.00%)          let root = definitions.get_root_def();
        .           
        .                   let mut visibilities = FxHashMap::default();
        .                   visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);
        .           
        .                   let mut def_id_to_node_id = IndexVec::default();
        2 ( 0.00%)          assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);
        .                   let mut node_id_to_def_id = FxHashMap::default();
        .                   node_id_to_def_id.insert(CRATE_NODE_ID, root);
        .           
        .                   let mut invocation_parents = FxHashMap::default();
        .                   invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));
        .           
        3 ( 0.00%)          let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session
        .                       .opts
        .                       .externs
        .                       .iter()
        .                       .filter(|(_, entry)| entry.add_prelude)
        .                       .map(|(name, _)| (Ident::from_str(name), Default::default()))
        .                       .collect();
        .           
        9 ( 0.00%)          if !session.contains_name(&krate.attrs, sym::no_core) {
        .                       extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());
        7 ( 0.00%)              if !session.contains_name(&krate.attrs, sym::no_std) {
        .                           extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());
        .                       }
        .                   }
        .           
        8 ( 0.00%)          let (registered_attrs, registered_tools) =
        4 ( 0.00%)              macros::registered_attrs_and_tools(session, &krate.attrs);
        .           
        .                   let features = session.features_untracked();
        .           
      237 ( 0.00%)          let mut resolver = Resolver {
        .                       session,
        .           
        2 ( 0.00%)              definitions,
        .           
        .                       // The outermost module has def ID 0; this is not reflected in the
        .                       // AST.
        .                       graph_root,
        .                       prelude: None,
        4 ( 0.00%)              extern_prelude,
        .           
        .                       has_self: FxHashSet::default(),
        .                       field_names: FxHashMap::default(),
        .           
        .                       determined_imports: Vec::new(),
        .                       indeterminate_imports: Vec::new(),
        .           
        .                       last_import_segment: false,
-- line 1343 ----------------------------------------
-- line 1347 ----------------------------------------
        .                       partial_res_map: Default::default(),
        .                       import_res_map: Default::default(),
        .                       label_res_map: Default::default(),
        .                       extern_crate_map: Default::default(),
        .                       reexport_map: FxHashMap::default(),
        .                       trait_map: NodeMap::default(),
        .                       underscore_disambiguator: 0,
        .                       empty_module,
        4 ( 0.00%)              module_map,
        .                       block_map: Default::default(),
        .                       binding_parent_modules: FxHashMap::default(),
        .                       ast_transform_scopes: FxHashMap::default(),
        .           
        .                       glob_map: Default::default(),
        4 ( 0.00%)              visibilities,
        .                       used_imports: FxHashSet::default(),
        .                       maybe_unused_trait_imports: Default::default(),
        .                       maybe_unused_extern_crates: Vec::new(),
        .           
        .                       privacy_errors: Vec::new(),
        .                       ambiguity_errors: Vec::new(),
        .                       use_injections: Vec::new(),
        .                       macro_expanded_macro_export_errors: BTreeSet::new(),
-- line 1369 ----------------------------------------
-- line 1372 ----------------------------------------
        .                       dummy_binding: arenas.alloc_name_binding(NameBinding {
        .                           kind: NameBindingKind::Res(Res::Err, false),
        .                           ambiguity: None,
        .                           expansion: LocalExpnId::ROOT,
        .                           span: DUMMY_SP,
        .                           vis: ty::Visibility::Public,
        .                       }),
        .           
        6 ( 0.00%)              crate_loader: CrateLoader::new(session, metadata_loader, crate_name),
        .                       macro_names: FxHashSet::default(),
        .                       builtin_macros: Default::default(),
        4 ( 0.00%)              registered_attrs,
        4 ( 0.00%)              registered_tools,
        .                       macro_use_prelude: FxHashMap::default(),
        .                       all_macros: FxHashMap::default(),
        .                       macro_map: FxHashMap::default(),
        7 ( 0.00%)              dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),
        6 ( 0.00%)              dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),
        5 ( 0.00%)              non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),
        .                       invocation_parent_scopes: Default::default(),
        .                       output_macro_rules_scopes: Default::default(),
        .                       helper_attrs: Default::default(),
        .                       derive_data: Default::default(),
        .                       local_macro_def_scopes: FxHashMap::default(),
        .                       name_already_seen: FxHashMap::default(),
        .                       potentially_unused_imports: Vec::new(),
        .                       struct_constructors: Default::default(),
-- line 1398 ----------------------------------------
-- line 1405 ----------------------------------------
        .                       active_features: features
        .                           .declared_lib_features
        .                           .iter()
        .                           .map(|(feat, ..)| *feat)
        .                           .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))
        .                           .collect(),
        .                       lint_buffer: LintBuffer::default(),
        .                       next_node_id: CRATE_NODE_ID,
        4 ( 0.00%)              node_id_to_def_id,
        4 ( 0.00%)              def_id_to_node_id,
        .                       placeholder_field_indices: Default::default(),
        4 ( 0.00%)              invocation_parents,
        .                       next_disambiguator: Default::default(),
        .                       trait_impl_items: Default::default(),
        .                       legacy_const_generic_args: Default::default(),
        .                       item_generics_num_lifetimes: Default::default(),
        .                       main_def: Default::default(),
        .                       trait_impls: Default::default(),
        .                       proc_macros: Default::default(),
        .                       confused_type_with_std_module: Default::default(),
        .                       access_levels: Default::default(),
        .                   };
        .           
        .                   let root_parent_scope = ParentScope::module(graph_root, &resolver);
        .                   resolver.invocation_parent_scopes.insert(LocalExpnId::ROOT, root_parent_scope);
        .           
        .                   resolver
        9 ( 0.00%)      }
        .           
        .               fn new_module(
        .                   &mut self,
        .                   parent: Option<Module<'a>>,
        .                   kind: ModuleKind,
        .                   expn_id: ExpnId,
        .                   span: Span,
        .                   no_implicit_prelude: bool,
        .               ) -> Module<'a> {
       22 ( 0.00%)          let module_map = &mut self.module_map;
    2,899 ( 0.00%)          self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)
        .               }
        .           
        .               pub fn next_node_id(&mut self) -> NodeId {
        .                   let next =
   60,214 ( 0.00%)              self.next_node_id.as_u32().checked_add(1).expect("input too large; ran out of NodeIds");
        .                   mem::replace(&mut self.next_node_id, ast::NodeId::from_u32(next))
        .               }
        .           
        .               pub fn lint_buffer(&mut self) -> &mut LintBuffer {
        3 ( 0.00%)          &mut self.lint_buffer
        3 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn arenas() -> ResolverArenas<'a> {
        .                   Default::default()
        1 ( 0.00%)      }
        .           
        9 ( 0.00%)      pub fn into_outputs(self) -> ResolverOutputs {
        .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
        1 ( 0.00%)          let definitions = self.definitions;
        4 ( 0.00%)          let visibilities = self.visibilities;
        4 ( 0.00%)          let extern_crate_map = self.extern_crate_map;
        4 ( 0.00%)          let reexport_map = self.reexport_map;
        4 ( 0.00%)          let maybe_unused_trait_imports = self.maybe_unused_trait_imports;
        4 ( 0.00%)          let maybe_unused_extern_crates = self.maybe_unused_extern_crates;
        4 ( 0.00%)          let glob_map = self.glob_map;
        6 ( 0.00%)          let main_def = self.main_def;
        4 ( 0.00%)          let confused_type_with_std_module = self.confused_type_with_std_module;
        6 ( 0.00%)          let access_levels = self.access_levels;
       37 ( 0.00%)          ResolverOutputs {
        2 ( 0.00%)              definitions,
       11 ( 0.00%)              cstore: Box::new(self.crate_loader.into_cstore()),
        4 ( 0.00%)              visibilities,
        4 ( 0.00%)              access_levels,
        4 ( 0.00%)              extern_crate_map,
        4 ( 0.00%)              reexport_map,
        4 ( 0.00%)              glob_map,
        4 ( 0.00%)              maybe_unused_trait_imports,
        4 ( 0.00%)              maybe_unused_extern_crates,
        .                       extern_prelude: self
        .                           .extern_prelude
        .                           .iter()
        3 ( 0.00%)                  .map(|(ident, entry)| (ident.name, entry.introduced_by_item))
        .                           .collect(),
        6 ( 0.00%)              main_def,
        4 ( 0.00%)              trait_impls: self.trait_impls,
        4 ( 0.00%)              proc_macros,
        4 ( 0.00%)              confused_type_with_std_module,
        5 ( 0.00%)              registered_tools: self.registered_tools,
        .                   }
       19 ( 0.00%)      }
        .           
        .               pub fn clone_outputs(&self) -> ResolverOutputs {
        .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
        .                   ResolverOutputs {
        .                       definitions: self.definitions.clone(),
        .                       access_levels: self.access_levels.clone(),
        .                       cstore: Box::new(self.cstore().clone()),
        .                       visibilities: self.visibilities.clone(),
-- line 1501 ----------------------------------------
-- line 1513 ----------------------------------------
        .                       trait_impls: self.trait_impls.clone(),
        .                       proc_macros,
        .                       confused_type_with_std_module: self.confused_type_with_std_module.clone(),
        .                       registered_tools: self.registered_tools.clone(),
        .                   }
        .               }
        .           
        .               pub fn cstore(&self) -> &CStore {
   10,544 ( 0.00%)          self.crate_loader.cstore()
        .               }
        .           
        .               fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {
        .                   match macro_kind {
        .                       MacroKind::Bang => self.dummy_ext_bang.clone(),
        .                       MacroKind::Derive => self.dummy_ext_derive.clone(),
        .                       MacroKind::Attr => self.non_macro_attr.clone(),
        .                   }
        .               }
        .           
        .               /// Runs the function on each namespace.
      288 ( 0.00%)      fn per_ns<F: FnMut(&mut Self, Namespace)>(&mut self, mut f: F) {
      546 ( 0.00%)          f(self, TypeNS);
      540 ( 0.00%)          f(self, ValueNS);
      546 ( 0.00%)          f(self, MacroNS);
      240 ( 0.00%)      }
        .           
        .               fn is_builtin_macro(&mut self, res: Res) -> bool {
        .                   self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())
        .               }
        .           
        .               fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {
        .                   loop {
        .                       match ctxt.outer_expn_data().macro_def_id {
        .                           Some(def_id) => return def_id,
        .                           None => ctxt.remove_mark(),
        .                       };
        .                   }
        .               }
        .           
        .               /// Entry point to crate resolution.
        2 ( 0.00%)      pub fn resolve_crate(&mut self, krate: &Crate) {
        4 ( 0.00%)          self.session.time("resolve_crate", || {
        3 ( 0.00%)              self.session.time("finalize_imports", || ImportResolver { r: self }.finalize_imports());
        .                       self.session.time("resolve_access_levels", || {
        3 ( 0.00%)                  AccessLevelsVisitor::compute_access_levels(self, krate)
        .                       });
        2 ( 0.00%)              self.session.time("finalize_macro_resolutions", || self.finalize_macro_resolutions());
        3 ( 0.00%)              self.session.time("late_resolve_crate", || self.late_resolve_crate(krate));
        2 ( 0.00%)              self.session.time("resolve_main", || self.resolve_main());
        3 ( 0.00%)              self.session.time("resolve_check_unused", || self.check_unused(krate));
        3 ( 0.00%)              self.session.time("resolve_report_errors", || self.report_errors(krate));
        4 ( 0.00%)              self.session.time("resolve_postprocess", || self.crate_loader.postprocess(krate));
        .                   });
        .               }
        .           
  113,676 ( 0.00%)      pub fn traits_in_scope(
        .                   &mut self,
        .                   current_trait: Option<Module<'a>>,
        .                   parent_scope: &ParentScope<'a>,
        .                   ctxt: SyntaxContext,
        .                   assoc_item: Option<(Symbol, Namespace)>,
        .               ) -> Vec<TraitCandidate> {
        .                   let mut found_traits = Vec::new();
        .           
   18,946 ( 0.00%)          if let Some(module) = current_trait {
        .                       if self.trait_may_have_item(Some(module), assoc_item) {
        .                           let def_id = module.def_id();
   26,148 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });
        .                       }
        .                   }
        .           
        .                   self.visit_scopes(ScopeSet::All(TypeNS, false), parent_scope, ctxt, |this, scope, _, _| {
        .                       match scope {
        .                           Scope::Module(module, _) => {
        .                               this.traits_in_module(module, assoc_item, &mut found_traits);
        .                           }
        .                           Scope::StdLibPrelude => {
   28,419 ( 0.00%)                      if let Some(module) = this.prelude {
        .                                   this.traits_in_module(module, assoc_item, &mut found_traits);
        .                               }
        .                           }
        .                           Scope::ExternPrelude | Scope::ToolPrelude | Scope::BuiltinTypes => {}
        .                           _ => unreachable!(),
        .                       }
        .                       None::<()>
        .                   });
        .           
        .                   found_traits
   75,784 ( 0.00%)      }
        .           
        .               fn traits_in_module(
        .                   &mut self,
        .                   module: Module<'a>,
        .                   assoc_item: Option<(Symbol, Namespace)>,
        .                   found_traits: &mut Vec<TraitCandidate>,
        .               ) {
        .                   module.ensure_traits(self);
        .                   let traits = module.traits.borrow();
  536,858 ( 0.01%)          for (trait_name, trait_binding) in traits.as_ref().unwrap().iter() {
        .                       if self.trait_may_have_item(trait_binding.module(), assoc_item) {
        .                           let def_id = trait_binding.res().def_id();
   53,169 ( 0.00%)                  let import_ids = self.find_transitive_imports(&trait_binding.kind, *trait_name);
  159,507 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids });
        .                       }
        .                   }
        .               }
        .           
        .               // List of traits in scope is pruned on best effort basis. We reject traits not having an
        .               // associated item with the given name and namespace (if specified). This is a conservative
        .               // optimization, proper hygienic type-based resolution of associated items is done in typeck.
        .               // We don't reject trait aliases (`trait_module == None`) because we don't have access to their
        .               // associated items.
        .               fn trait_may_have_item(
        .                   &mut self,
        .                   trait_module: Option<Module<'a>>,
        .                   assoc_item: Option<(Symbol, Namespace)>,
        .               ) -> bool {
  277,223 ( 0.01%)          match (trait_module, assoc_item) {
        .                       (Some(trait_module), Some((name, ns))) => {
  545,275 ( 0.01%)                  self.resolutions(trait_module).borrow().iter().any(|resolution| {
        .                               let (&BindingKey { ident: assoc_ident, ns: assoc_ns, .. }, _) = resolution;
2,121,179 ( 0.05%)                      assoc_ns == ns && assoc_ident.name == name
        .                           })
        .                       }
        .                       _ => true,
        .                   }
        .               }
        .           
        .               fn find_transitive_imports(
        .                   &mut self,
        .                   mut kind: &NameBindingKind<'_>,
        .                   trait_name: Ident,
        .               ) -> SmallVec<[LocalDefId; 1]> {
        .                   let mut import_ids = smallvec![];
   80,097 ( 0.00%)          while let NameBindingKind::Import { import, binding, .. } = kind {
   26,967 ( 0.00%)              let id = self.local_def_id(import.id);
        .                       self.maybe_unused_trait_imports.insert(id);
    8,989 ( 0.00%)              self.add_to_glob_map(&import, trait_name);
        .                       import_ids.push(id);
    8,989 ( 0.00%)              kind = &binding.kind;
        .                   }
        .                   import_ids
        .               }
        .           
        .               fn new_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {
   75,173 ( 0.00%)          let ident = ident.normalize_to_macros_2_0();
   24,192 ( 0.00%)          let disambiguator = if ident.name == kw::Underscore {
        .                       self.underscore_disambiguator += 1;
        .                       self.underscore_disambiguator
        .                   } else {
        .                       0
        .                   };
        .                   BindingKey { ident, ns, disambiguator }
        .               }
        .           
2,339,696 ( 0.05%)      fn resolutions(&mut self, module: Module<'a>) -> &'a Resolutions<'a> {
  292,462 ( 0.01%)          if module.populate_on_access.get() {
        .                       module.populate_on_access.set(false);
        .                       self.build_reduced_graph_external(module);
        .                   }
  292,462 ( 0.01%)          &module.lazy_resolutions
2,632,158 ( 0.06%)      }
        .           
  219,177 ( 0.01%)      fn resolution(
        .                   &mut self,
        .                   module: Module<'a>,
        .                   key: BindingKey,
        .               ) -> &'a RefCell<NameResolution<'a>> {
   73,059 ( 0.00%)          *self
        .                       .resolutions(module)
        .                       .borrow_mut()
  146,118 ( 0.00%)              .entry(key)
   48,706 ( 0.00%)              .or_insert_with(|| self.arenas.alloc_name_resolution())
  194,824 ( 0.00%)      }
        .           
   25,641 ( 0.00%)      fn record_use(
        .                   &mut self,
        .                   ident: Ident,
        .                   used_binding: &'a NameBinding<'a>,
        .                   is_lexical_scope: bool,
        .               ) {
    6,993 ( 0.00%)          if let Some((b2, kind)) = used_binding.ambiguity {
        .                       self.ambiguity_errors.push(AmbiguityError {
        .                           kind,
        .                           ident,
        .                           b1: used_binding,
        .                           b2,
        .                           misc1: AmbiguityErrorMisc::None,
        .                           misc2: AmbiguityErrorMisc::None,
        .                       });
        .                   }
    6,286 ( 0.00%)          if let NameBindingKind::Import { import, binding, ref used } = used_binding.kind {
        .                       // Avoid marking `extern crate` items that refer to a name from extern prelude,
        .                       // but not introduce it, as used if they are accessed from lexical scope.
    1,624 ( 0.00%)              if is_lexical_scope {
       33 ( 0.00%)                  if let Some(entry) = self.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
        5 ( 0.00%)                      if let Some(crate_item) = entry.extern_crate_item {
        2 ( 0.00%)                          if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {
        .                                       return;
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       used.set(true);
        .                       import.used.set(true);
      812 ( 0.00%)              self.used_imports.insert(import.id);
    4,060 ( 0.00%)              self.add_to_glob_map(&import, ident);
    4,872 ( 0.00%)              self.record_use(ident, binding, false);
        .                   }
   18,648 ( 0.00%)      }
        .           
        .               #[inline]
    2,436 ( 0.00%)      fn add_to_glob_map(&mut self, import: &Import<'_>, ident: Ident) {
    9,801 ( 0.00%)          if import.is_glob() {
    1,108 ( 0.00%)              let def_id = self.local_def_id(import.id);
        .                       self.glob_map.entry(def_id).or_default().insert(ident.name);
        .                   }
    1,848 ( 0.00%)      }
        .           
        .               /// A generic scope visitor.
        .               /// Visits scopes in order to resolve some identifier in them or perform other actions.
        .               /// If the callback returns `Some` result, we stop visiting scopes and return it.
        .               fn visit_scopes<T>(
        .                   &mut self,
        .                   scope_set: ScopeSet<'a>,
        .                   parent_scope: &ParentScope<'a>,
-- line 1738 ----------------------------------------
-- line 1780 ----------------------------------------
        .                   //    ambiguities with `macro_rules`.
        .                   // 4. `macro_use` prelude (open, the open part is from macro expansions, not controlled).
        .                   // 4a. User-defined prelude from macro-use
        .                   //    (open, the open part is from macro expansions, not controlled).
        .                   // 4b. "Standard library prelude" part implemented through `macro-use` (closed, controlled).
        .                   // 4c. Standard library prelude (de-facto closed, controlled).
        .                   // 6. Language prelude: builtin attributes (closed, controlled).
        .           
  125,106 ( 0.00%)          let rust_2015 = ctxt.edition() == Edition::Edition2015;
        .                   let (ns, macro_kind, is_absolute_path) = match scope_set {
        .                       ScopeSet::All(ns, _) => (ns, None, false),
        .                       ScopeSet::AbsolutePath(ns) => (ns, None, true),
        .                       ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),
        .                       ScopeSet::Late(ns, ..) => (ns, None, false),
        .                   };
  300,804 ( 0.01%)          let module = match scope_set {
        .                       // Start with the specified module.
        .                       ScopeSet::Late(_, module, _) => module,
        .                       // Jump out of trait or enum modules, they do not act as scopes.
   10,233 ( 0.00%)              _ => parent_scope.module.nearest_item_scope(),
        .                   };
   21,486 ( 0.00%)          let mut scope = match ns {
   53,715 ( 0.00%)              _ if is_absolute_path => Scope::CrateRoot,
        .                       TypeNS | ValueNS => Scope::Module(module, None),
    2,022 ( 0.00%)              MacroNS => Scope::DeriveHelpers(parent_scope.expansion),
        .                   };
   40,432 ( 0.00%)          let mut ctxt = ctxt.normalize_to_macros_2_0();
  156,648 ( 0.00%)          let mut use_prelude = !module.no_implicit_prelude;
        .           
        .                   loop {
  539,569 ( 0.01%)              let visit = match scope {
        .                           // Derive helpers are not in scope when resolving derives in the same container.
        .                           Scope::DeriveHelpers(expn_id) => {
    2,028 ( 0.00%)                      !(expn_id == parent_scope.expansion && macro_kind == Some(MacroKind::Derive))
        .                           }
        .                           Scope::DeriveHelpersCompat => true,
        .                           Scope::MacroRules(macro_rules_scope) => {
        .                               // Use "path compression" on `macro_rules` scope chains. This is an optimization
        .                               // used to avoid long scope chains, see the comments on `MacroRulesScopeRef`.
        .                               // As another consequence of this optimization visitors never observe invocation
        .                               // scopes for macros that were already expanded.
    1,882 ( 0.00%)                      while let MacroRulesScope::Invocation(invoc_id) = macro_rules_scope.get() {
        .                                   if let Some(next_scope) = self.output_macro_rules_scopes.get(&invoc_id) {
        .                                       macro_rules_scope.set(next_scope.get());
        .                                   } else {
        .                                       break;
        .                                   }
        .                               }
        .                               true
        .                           }
        .                           Scope::CrateRoot => true,
        .                           Scope::Module(..) => true,
      672 ( 0.00%)                  Scope::RegisteredAttrs => use_prelude,
        .                           Scope::MacroUsePrelude => use_prelude || rust_2015,
        .                           Scope::BuiltinAttrs => true,
    1,614 ( 0.00%)                  Scope::ExternPrelude => use_prelude || is_absolute_path,
      461 ( 0.00%)                  Scope::ToolPrelude => use_prelude,
   79,174 ( 0.00%)                  Scope::StdLibPrelude => use_prelude || ns == MacroNS,
        .                           Scope::BuiltinTypes => true,
        .                       };
        .           
    3,021 ( 0.00%)              if visit {
   26,322 ( 0.00%)                  if let break_result @ Some(..) = visitor(self, scope, use_prelude, ctxt) {
        .                               return break_result;
        .                           }
        .                       }
        .           
  216,223 ( 0.01%)              scope = match scope {
        .                           Scope::DeriveHelpers(LocalExpnId::ROOT) => Scope::DeriveHelpersCompat,
        .                           Scope::DeriveHelpers(expn_id) => {
        .                               // Derive helpers are not visible to code generated by bang or derive macros.
        .                               let expn_data = expn_id.expn_data();
      351 ( 0.00%)                      match expn_data.kind {
        .                                   ExpnKind::Root
        .                                   | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {
        .                                       Scope::DeriveHelpersCompat
        .                                   }
        6 ( 0.00%)                          _ => Scope::DeriveHelpers(expn_data.parent.expect_local()),
        .                               }
        .                           }
    2,022 ( 0.00%)                  Scope::DeriveHelpersCompat => Scope::MacroRules(parent_scope.macro_rules),
    2,388 ( 0.00%)                  Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {
        .                               MacroRulesScope::Binding(binding) => {
      780 ( 0.00%)                          Scope::MacroRules(binding.parent_macro_rules_scope)
        .                               }
        .                               MacroRulesScope::Invocation(invoc_id) => {
        .                                   Scope::MacroRules(self.invocation_parent_scopes[&invoc_id].macro_rules)
        .                               }
        .                               MacroRulesScope::Empty => Scope::Module(module, None),
        .                           },
        .                           Scope::CrateRoot => match ns {
        .                               TypeNS => {
        .                                   ctxt.adjust(ExpnId::root());
        .                                   Scope::ExternPrelude
        .                               }
        .                               ValueNS | MacroNS => break,
        .                           },
        .                           Scope::Module(module, prev_lint_id) => {
   60,530 ( 0.00%)                      use_prelude = !module.no_implicit_prelude;
        .                               let derive_fallback_lint_id = match scope_set {
        .                                   ScopeSet::Late(.., lint_id) => lint_id,
        .                                   _ => None,
        .                               };
  129,287 ( 0.00%)                      match self.hygienic_lexical_parent(module, &mut ctxt, derive_fallback_lint_id) {
        .                                   Some((parent_module, lint_id)) => {
        .                                       Scope::Module(parent_module, lint_id.or(prev_lint_id))
        .                                   }
        .                                   None => {
  108,038 ( 0.00%)                              ctxt.adjust(ExpnId::root());
   39,884 ( 0.00%)                              match ns {
        .                                           TypeNS => Scope::ExternPrelude,
        .                                           ValueNS => Scope::StdLibPrelude,
        .                                           MacroNS => Scope::RegisteredAttrs,
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                           Scope::RegisteredAttrs => Scope::MacroUsePrelude,
        .                           Scope::MacroUsePrelude => Scope::StdLibPrelude,
        .                           Scope::BuiltinAttrs => break, // nowhere else to search
      922 ( 0.00%)                  Scope::ExternPrelude if is_absolute_path => break,
        .                           Scope::ExternPrelude => Scope::ToolPrelude,
        .                           Scope::ToolPrelude => Scope::StdLibPrelude,
   38,722 ( 0.00%)                  Scope::StdLibPrelude => match ns {
        .                               TypeNS => Scope::BuiltinTypes,
        .                               ValueNS => break, // nowhere else to search
        .                               MacroNS => Scope::BuiltinAttrs,
        .                           },
        .                           Scope::BuiltinTypes => break, // nowhere else to search
        .                       };
        .                   }
        .           
-- line 1911 ----------------------------------------
-- line 1924 ----------------------------------------
        .               ///    let g = || {};
        .               ///    fn g() {}
        .               ///    g(); // This resolves to the local variable `g` since it shadows the item.
        .               /// }
        .               /// ```
        .               ///
        .               /// Invariant: This must only be called during main resolution, not during
        .               /// import resolution.
  206,940 ( 0.00%)      fn resolve_ident_in_lexical_scope(
        .                   &mut self,
        .                   mut ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used_id: Option<NodeId>,
        .                   path_span: Span,
        .                   ribs: &[Rib<'a>],
        .               ) -> Option<LexicalScopeBinding<'a>> {
   41,388 ( 0.00%)          assert!(ns == TypeNS || ns == ValueNS);
        .                   let orig_ident = ident;
  144,858 ( 0.00%)          if ident.name == kw::Empty {
        .                       return Some(LexicalScopeBinding::Res(Res::Err));
        .                   }
        .                   let (general_span, normalized_span) = if ident.name == kw::SelfUpper {
        .                       // FIXME(jseyfried) improve `Self` hygiene
        .                       let empty_span = ident.span.with_ctxt(SyntaxContext::root());
        .                       (empty_span, empty_span)
   20,369 ( 0.00%)          } else if ns == TypeNS {
   51,160 ( 0.00%)              let normalized_span = ident.span.normalize_to_macros_2_0();
        .                       (normalized_span, normalized_span)
        .                   } else {
   50,685 ( 0.00%)              (ident.span.normalize_to_macro_rules(), ident.span.normalize_to_macros_2_0())
        .                   };
        .                   ident.span = general_span;
        .                   let normalized_ident = Ident { span: normalized_span, ..ident };
        .           
        .                   // Walk backwards up the ribs in scope.
        .                   let record_used = record_used_id.is_some();
   62,082 ( 0.00%)          let mut module = self.graph_root;
        .                   for i in (0..ribs.len()).rev() {
        .                       debug!("walk rib\n{:?}", ribs[i].bindings);
        .                       // Use the rib kind to determine whether we are resolving parameters
        .                       // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).
   99,157 ( 0.00%)              let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };
        .                       if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)
        .                       {
        .                           // The ident resolves to a type parameter or local variable.
  125,832 ( 0.00%)                  return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(
        .                               i,
   20,972 ( 0.00%)                      rib_ident,
   52,430 ( 0.00%)                      *res,
        .                               record_used,
        .                               path_span,
        .                               *original_rib_ident_def,
        .                               ribs,
        .                           )));
        .                       }
        .           
  579,041 ( 0.01%)              module = match ribs[i].kind {
   10,414 ( 0.00%)                  ModuleRibKind(module) => module,
        .                           MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {
        .                               // If an invocation of this macro created `ident`, give up on `ident`
        .                               // and switch to `ident`'s source from the macro definition.
        .                               ident.span.remove_mark();
        .                               continue;
        .                           }
        .                           _ => continue,
        .                       };
        .           
   31,242 ( 0.00%)              match module.kind {
        .                           ModuleKind::Block(..) => {} // We can see through blocks
        .                           _ => break,
        .                       }
        .           
        .                       let item = self.resolve_ident_in_module_unadjusted(
        .                           ModuleOrUniformRoot::Module(module),
        .                           ident,
        .                           ns,
        .                           parent_scope,
        .                           record_used,
        .                           path_span,
        .                       );
        .                       if let Ok(binding) = item {
        .                           // The ident resolves to an item.
       48 ( 0.00%)                  return Some(LexicalScopeBinding::Item(binding));
        .                       }
        .                   }
  173,264 ( 0.00%)          self.early_resolve_ident_in_lexical_scope(
        .                       orig_ident,
        .                       ScopeSet::Late(ns, module, record_used_id),
        .                       parent_scope,
        .                       record_used,
        .                       record_used,
        .                       path_span,
        .                   )
        .                   .ok()
        .                   .map(LexicalScopeBinding::Item)
  186,246 ( 0.00%)      }
        .           
  219,384 ( 0.01%)      fn hygienic_lexical_parent(
        .                   &mut self,
        .                   module: Module<'a>,
        .                   ctxt: &mut SyntaxContext,
        .                   derive_fallback_lint_id: Option<NodeId>,
        .               ) -> Option<(Module<'a>, Option<NodeId>)> {
  139,608 ( 0.00%)          if !module.expansion.outer_expn_is_descendant_of(*ctxt) {
       90 ( 0.00%)              return Some((self.expn_def_scope(ctxt.remove_mark()), None));
        .                   }
        .           
   39,858 ( 0.00%)          if let ModuleKind::Block(..) = module.kind {
      216 ( 0.00%)              return Some((module.parent.unwrap().nearest_item_scope(), None));
        .                   }
        .           
        .                   // We need to support the next case under a deprecation warning
        .                   // ```
        .                   // struct MyStruct;
        .                   // ---- begin: this comes from a proc macro derive
        .                   // mod implementation_details {
        .                   //     // Note that `MyStruct` is not in scope here.
        .                   //     impl SomeTrait for MyStruct { ... }
        .                   // }
        .                   // ---- end
        .                   // ```
        .                   // So we have to fall back to the module's parent during lexical resolution in this case.
   19,713 ( 0.00%)          if derive_fallback_lint_id.is_some() {
    1,026 ( 0.00%)              if let Some(parent) = module.parent {
        .                           // Inner module is inside the macro, parent module is outside of the macro.
    1,710 ( 0.00%)                  if module.expansion != parent.expansion
        .                               && module.expansion.is_descendant_of(parent.expansion)
        .                           {
        .                               // The macro is a proc macro derive
        .                               if let Some(def_id) = module.expansion.expn_data().macro_def_id {
        .                                   let ext = self.get_macro_by_def_id(def_id);
        .                                   if ext.builtin_name.is_none()
        .                                       && ext.macro_kind() == MacroKind::Derive
        .                                       && parent.expansion.outer_expn_is_descendant_of(*ctxt)
-- line 2058 ----------------------------------------
-- line 2060 ----------------------------------------
        .                                       return Some((parent, derive_fallback_lint_id));
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   None
  199,440 ( 0.00%)      }
        .           
        .               fn resolve_ident_in_module(
        .                   &mut self,
        .                   module: ModuleOrUniformRoot<'a>,
        .                   ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
   11,073 ( 0.00%)          self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, record_used, path_span)
        .                       .map_err(|(determinacy, _)| determinacy)
        .               }
        .           
   24,860 ( 0.00%)      fn resolve_ident_in_module_ext(
        .                   &mut self,
        .                   module: ModuleOrUniformRoot<'a>,
        .                   mut ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .               ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {
        .                   let tmp_parent_scope;
        .                   let mut adjusted_parent_scope = parent_scope;
        .                   match module {
        .                       ModuleOrUniformRoot::Module(m) => {
    7,464 ( 0.00%)                  if let Some(def) = ident.span.normalize_to_macros_2_0_and_adjust(m.expansion) {
      100 ( 0.00%)                      tmp_parent_scope =
      120 ( 0.00%)                          ParentScope { module: self.expn_def_scope(def), ..*parent_scope };
        .                               adjusted_parent_scope = &tmp_parent_scope;
        .                           }
        .                       }
        .                       ModuleOrUniformRoot::ExternPrelude => {
        .                           ident.span.normalize_to_macros_2_0_and_adjust(ExpnId::root());
        .                       }
        .                       ModuleOrUniformRoot::CrateRootAndExternPrelude | ModuleOrUniformRoot::CurrentScope => {
        .                           // No adjustments
        .                       }
        .                   }
   13,683 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
        .                       module,
    2,488 ( 0.00%)              ident,
        .                       ns,
        .                       adjusted_parent_scope,
        .                       false,
        .                       record_used,
        .                       path_span,
        .                   )
    8,701 ( 0.00%)      }
        .           
    7,880 ( 0.00%)      fn resolve_crate_root(&mut self, ident: Ident) -> Module<'a> {
        .                   debug!("resolve_crate_root({:?})", ident);
      788 ( 0.00%)          let mut ctxt = ident.span.ctxt();
      788 ( 0.00%)          let mark = if ident.name == kw::DollarCrate {
        .                       // When resolving `$crate` from a `macro_rules!` invoked in a `macro`,
        .                       // we don't want to pretend that the `macro_rules!` definition is in the `macro`
        .                       // as described in `SyntaxContext::apply_mark`, so we ignore prepended opaque marks.
        .                       // FIXME: This is only a guess and it doesn't work correctly for `macro_rules!`
        .                       // definitions actually produced by `macro` and `macro` definitions produced by
        .                       // `macro_rules!`, but at least such configurations are not stable yet.
    1,576 ( 0.00%)              ctxt = ctxt.normalize_to_macro_rules();
        .                       debug!(
        .                           "resolve_crate_root: marks={:?}",
        .                           ctxt.marks().into_iter().map(|(i, t)| (i.expn_data(), t)).collect::<Vec<_>>()
        .                       );
    1,576 ( 0.00%)              let mut iter = ctxt.marks().into_iter().rev().peekable();
        .                       let mut result = None;
        .                       // Find the last opaque mark from the end if it exists.
    3,567 ( 0.00%)              while let Some(&(mark, transparency)) = iter.peek() {
        .                           if transparency == Transparency::Opaque {
        .                               result = Some(mark);
        .                               iter.next();
        .                           } else {
        .                               break;
        .                           }
        .                       }
        .                       debug!(
        .                           "resolve_crate_root: found opaque mark {:?} {:?}",
        .                           result,
        .                           result.map(|r| r.expn_data())
        .                       );
        .                       // Then find the last semi-transparent mark from the end if it exists.
    2,364 ( 0.00%)              for (mark, transparency) in iter {
        .                           if transparency == Transparency::SemiTransparent {
        .                               result = Some(mark);
        .                           } else {
        .                               break;
        .                           }
        .                       }
        .                       debug!(
        .                           "resolve_crate_root: found semi-transparent mark {:?} {:?}",
-- line 2160 ----------------------------------------
-- line 2162 ----------------------------------------
        .                           result.map(|r| r.expn_data())
        .                       );
        .                       result
        .                   } else {
        .                       debug!("resolve_crate_root: not DollarCrate");
        .                       ctxt = ctxt.normalize_to_macros_2_0();
        .                       ctxt.adjust(ExpnId::root())
        .                   };
    1,576 ( 0.00%)          let module = match mark {
    3,760 ( 0.00%)              Some(def) => self.expn_def_scope(def),
        .                       None => {
        .                           debug!(
        .                               "resolve_crate_root({:?}): found no mark (ident.span = {:?})",
        .                               ident, ident.span
        .                           );
       72 ( 0.00%)                  return self.graph_root;
        .                       }
        .                   };
        .                   let module = self.expect_module(
        .                       module.opt_def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id(),
        .                   );
        .                   debug!(
        .                       "resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})",
        .                       ident,
        .                       module,
        .                       module.kind.name(),
        .                       ident.span
        .                   );
        .                   module
    5,516 ( 0.00%)      }
        .           
      144 ( 0.00%)      fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {
       32 ( 0.00%)          let mut module = self.expect_module(module.nearest_parent_mod());
       64 ( 0.00%)          while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {
        .                       let parent = module.parent.unwrap_or_else(|| self.expn_def_scope(ctxt.remove_mark()));
        .                       module = self.expect_module(parent.nearest_parent_mod());
        .                   }
        .                   module
      144 ( 0.00%)      }
        .           
        .               fn resolve_path(
        .                   &mut self,
        .                   path: &[Segment],
        .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .                   crate_lint: CrateLint,
        .               ) -> PathResult<'a> {
    4,449 ( 0.00%)          self.resolve_path_with_ribs(
        .                       path,
        .                       opt_ns,
        .                       parent_scope,
        .                       record_used,
        .                       path_span,
        .                       crate_lint,
        .                       None,
        .                   )
        .               }
        .           
  307,185 ( 0.01%)      fn resolve_path_with_ribs(
        .                   &mut self,
        .                   path: &[Segment],
        .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .                   crate_lint: CrateLint,
        .                   ribs: Option<&PerNS<Vec<Rib<'a>>>>,
        .               ) -> PathResult<'a> {
   20,479 ( 0.00%)          let mut module = None;
        .                   let mut allow_super = true;
        .                   let mut second_binding = None;
        .           
        .                   debug!(
        .                       "resolve_path(path={:?}, opt_ns={:?}, record_used={:?}, \
        .                        path_span={:?}, crate_lint={:?})",
        .                       path, opt_ns, record_used, path_span, crate_lint,
        .                   );
        .           
  128,964 ( 0.00%)          for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {
        .                       debug!("resolve_path ident {} {:?} {:?}", i, ident, id);
  141,145 ( 0.00%)              let record_segment_res = |this: &mut Self, res| {
   33,675 ( 0.00%)                  if record_used {
   55,510 ( 0.00%)                      if let Some(id) = id {
   22,172 ( 0.00%)                          if !this.partial_res_map.contains_key(&id) {
   21,810 ( 0.00%)                              assert!(id != ast::DUMMY_NODE_ID, "Trying to resolve dummy id");
   43,620 ( 0.00%)                              this.record_partial_res(id, PartialRes::new(res));
        .                                   }
        .                               }
        .                           }
   44,900 ( 0.00%)              };
        .           
   44,780 ( 0.00%)              let is_last = i == path.len() - 1;
  107,470 ( 0.00%)              let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };
   21,494 ( 0.00%)              let name = ident.name;
        .           
   32,938 ( 0.00%)              allow_super &= ns == TypeNS && (name == kw::SelfLower || name == kw::Super);
        .           
        .                       if ns == TypeNS {
   22,888 ( 0.00%)                  if allow_super && name == kw::Super {
       32 ( 0.00%)                      let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
       16 ( 0.00%)                      let self_module = match i {
       32 ( 0.00%)                          0 => Some(self.resolve_self(&mut ctxt, parent_scope.module)),
        .                                   _ => match module {
        .                                       Some(ModuleOrUniformRoot::Module(module)) => Some(module),
        .                                       _ => None,
        .                                   },
        .                               };
        .                               if let Some(self_module) = self_module {
       24 ( 0.00%)                          if let Some(parent) = self_module.parent {
       40 ( 0.00%)                              module = Some(ModuleOrUniformRoot::Module(
       16 ( 0.00%)                                  self.resolve_self(&mut ctxt, parent),
        .                                       ));
        .                                       continue;
        .                                   }
        .                               }
        .                               let msg = "there are too many leading `super` keywords".to_string();
        .                               return PathResult::Failed {
        .                                   span: ident.span,
        .                                   label: msg,
        .                                   suggestion: None,
        .                                   is_error_from_last_segment: false,
        .                               };
        .                           }
   22,872 ( 0.00%)                  if i == 0 {
   32,376 ( 0.00%)                      if name == kw::SelfLower {
        .                                   let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
        .                                   module = Some(ModuleOrUniformRoot::Module(
        .                                       self.resolve_self(&mut ctxt, parent_scope.module),
        .                                   ));
        .                                   continue;
        .                               }
        .                               if name == kw::PathRoot && ident.span.rust_2018() {
        .                                   module = Some(ModuleOrUniformRoot::ExternPrelude);
-- line 2296 ----------------------------------------
-- line 2298 ----------------------------------------
        .                               }
        .                               if name == kw::PathRoot && ident.span.rust_2015() && self.session.rust_2018() {
        .                                   // `::a::b` from 2015 macro on 2018 global edition
        .                                   module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);
        .                                   continue;
        .                               }
        .                               if name == kw::PathRoot || name == kw::Crate || name == kw::DollarCrate {
        .                                   // `::a::b`, `crate::a::b` or `$crate::a::b`
    2,012 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(self.resolve_crate_root(ident)));
        .                                   continue;
        .                               }
        .                           }
        .                       }
        .           
        .                       // Report special messages for path segment keywords in wrong positions.
  105,833 ( 0.00%)              if ident.is_path_segment_keyword() && i != 0 {
        .                           let name_str = if name == kw::PathRoot {
        .                               "crate root".to_string()
        .                           } else {
        .                               format!("`{}`", name)
        .                           };
        .                           let label = if i == 1 && path[0].ident.name == kw::PathRoot {
        .                               format!("global paths cannot start with {}", name_str)
        .                           } else {
-- line 2321 ----------------------------------------
-- line 2328 ----------------------------------------
        .                               is_error_from_last_segment: false,
        .                           };
        .                       }
        .           
        .                       enum FindBindingResult<'a> {
        .                           Binding(Result<&'a NameBinding<'a>, Determinacy>),
        .                           PathResult(PathResult<'a>),
        .                       }
  671,456 ( 0.02%)              let find_binding_in_ns = |this: &mut Self, ns| {
   84,947 ( 0.00%)                  let binding = if let Some(module) = module {
        .                               this.resolve_ident_in_module(
        .                                   module,
    3,045 ( 0.00%)                          ident,
        .                                   ns,
        .                                   parent_scope,
    2,030 ( 0.00%)                          record_used,
    1,015 ( 0.00%)                          path_span,
        .                               )
  119,472 ( 0.00%)                  } else if ribs.is_none() || opt_ns.is_none() || opt_ns == Some(MacroNS) {
        .                               let scopes = ScopeSet::All(ns, opt_ns.is_none());
    1,428 ( 0.00%)                      this.early_resolve_ident_in_lexical_scope(
      252 ( 0.00%)                          ident,
        .                                   scopes,
       84 ( 0.00%)                          parent_scope,
      168 ( 0.00%)                          record_used,
        .                                   record_used,
       84 ( 0.00%)                          path_span,
        .                               )
        .                           } else {
   79,536 ( 0.00%)                      let record_used_id = if record_used {
   11,001 ( 0.00%)                          crate_lint.node_id().or(Some(CRATE_NODE_ID))
        .                               } else {
        .                                   None
        .                               };
  277,952 ( 0.01%)                      match this.resolve_ident_in_lexical_scope(
   59,652 ( 0.00%)                          ident,
        .                                   ns,
   19,884 ( 0.00%)                          parent_scope,
        .                                   record_used_id,
   39,768 ( 0.00%)                          path_span,
        .                                   &ribs.unwrap()[ns],
        .                               ) {
        .                                   // we found a locally-imported or available item/module
    2,604 ( 0.00%)                          Some(LexicalScopeBinding::Item(binding)) => Ok(binding),
        .                                   // we found a local variable or type param
        .                                   Some(LexicalScopeBinding::Res(res))
   20,308 ( 0.00%)                              if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) =>
        .                                   {
   91,386 ( 0.00%)                              record_segment_res(this, res);
   81,232 ( 0.00%)                              return FindBindingResult::PathResult(PathResult::NonModule(
   71,078 ( 0.00%)                                  PartialRes::with_unresolved_segments(res, path.len() - 1),
        .                                       ));
        .                                   }
   26,586 ( 0.00%)                          _ => Err(Determinacy::determined(record_used)),
        .                               }
        .                           };
   75,803 ( 0.00%)                  FindBindingResult::Binding(binding)
  167,864 ( 0.00%)              };
  146,881 ( 0.00%)              let binding = match find_binding_in_ns(self, ns) {
  142,156 ( 0.00%)                  FindBindingResult::PathResult(x) => return x,
        .                           FindBindingResult::Binding(binding) => binding,
        .                       };
   48,244 ( 0.00%)              match binding {
        .                           Ok(binding) => {
    9,835 ( 0.00%)                      if i == 1 {
        .                                   second_binding = Some(binding);
        .                               }
        .                               let res = binding.res();
   16,988 ( 0.00%)                      let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(res);
        .                               if let Some(next_module) = binding.module() {
    2,142 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(next_module));
    9,639 ( 0.00%)                          record_segment_res(self, res);
    6,272 ( 0.00%)                      } else if res == Res::ToolMod && i + 1 != path.len() {
        .                                   if binding.is_import() {
        .                                       self.session
        .                                           .struct_span_err(
        .                                               ident.span,
        .                                               "cannot use a tool module through an import",
        .                                           )
        .                                           .span_note(binding.span, "the tool module imported here")
        .                                           .emit();
        .                                   }
        .                                   let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);
        .                                   return PathResult::NonModule(PartialRes::new(res));
    4,480 ( 0.00%)                      } else if res == Res::Err {
        .                                   return PathResult::NonModule(PartialRes::new(Res::Err));
    2,688 ( 0.00%)                      } else if opt_ns.is_some() && (is_last || maybe_assoc) {
    6,272 ( 0.00%)                          self.lint_if_path_starts_with_module(
    1,792 ( 0.00%)                              crate_lint,
        .                                       path,
      896 ( 0.00%)                              path_span,
        .                                       second_binding,
        .                                   );
    2,688 ( 0.00%)                          return PathResult::NonModule(PartialRes::with_unresolved_segments(
    3,584 ( 0.00%)                              res,
    3,584 ( 0.00%)                              path.len() - i - 1,
        .                                   ));
        .                               } else {
        .                                   let label = format!(
        .                                       "`{}` is {} {}, not a module",
        .                                       ident,
        .                                       res.article(),
        .                                       res.descr(),
        .                                   );
-- line 2431 ----------------------------------------
-- line 2433 ----------------------------------------
        .                                   return PathResult::Failed {
        .                                       span: ident.span,
        .                                       label,
        .                                       suggestion: None,
        .                                       is_error_from_last_segment: is_last,
        .                                   };
        .                               }
        .                           }
   17,724 ( 0.00%)                  Err(Undetermined) => return PathResult::Indeterminate,
        .                           Err(Determined) => {
        .                               if let Some(ModuleOrUniformRoot::Module(module)) = module {
        .                                   if opt_ns.is_some() && !module.is_normal() {
        .                                       return PathResult::NonModule(PartialRes::with_unresolved_segments(
        .                                           module.res().unwrap(),
        .                                           path.len() - i,
        .                                       ));
        .                                   }
-- line 2449 ----------------------------------------
-- line 2612 ----------------------------------------
        .                                   label,
        .                                   suggestion,
        .                                   is_error_from_last_segment: is_last,
        .                               };
        .                           }
        .                       }
        .                   }
        .           
    6,237 ( 0.00%)          self.lint_if_path_starts_with_module(crate_lint, path, path_span, second_binding);
        .           
    3,402 ( 0.00%)          PathResult::Module(match module {
    1,134 ( 0.00%)              Some(module) => module,
        .                       None if path.is_empty() => ModuleOrUniformRoot::CurrentScope,
        .                       _ => span_bug!(path_span, "resolve_path: non-empty path `{:?}` has no module", path),
        .                   })
  184,311 ( 0.00%)      }
        .           
   17,664 ( 0.00%)      fn lint_if_path_starts_with_module(
        .                   &mut self,
        .                   crate_lint: CrateLint,
        .                   path: &[Segment],
        .                   path_span: Span,
        .                   second_binding: Option<&NameBinding<'_>>,
        .               ) {
    7,360 ( 0.00%)          let (diag_id, diag_span) = match crate_lint {
        .                       CrateLint::No => return,
        .                       CrateLint::SimplePath(id) => (id, path_span),
        .                       CrateLint::UsePath { root_id, root_span } => (root_id, root_span),
        .                       CrateLint::QPathTrait { qpath_id, qpath_span } => (qpath_id, qpath_span),
        .                   };
        .           
    1,193 ( 0.00%)          let first_name = match path.get(0) {
        .                       // In the 2018 edition this lint is a hard error, so nothing to do
    2,386 ( 0.00%)              Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,
        .                       _ => return,
        .                   };
        .           
        .                   // We're only interested in `use` paths which should start with
        .                   // `{{root}}` currently.
        .                   if first_name != kw::PathRoot {
        .                       return;
        .                   }
-- line 2653 ----------------------------------------
-- line 2679 ----------------------------------------
        .                   self.lint_buffer.buffer_lint_with_diagnostic(
        .                       lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,
        .                       diag_id,
        .                       diag_span,
        .                       "absolute paths must start with `self`, `super`, \
        .                        `crate`, or an external crate name in the 2018 edition",
        .                       diag,
        .                   );
   11,776 ( 0.00%)      }
        .           
        .               // Validate a local resolution (from ribs).
        .               fn validate_res_from_ribs(
        .                   &mut self,
        .                   rib_index: usize,
        .                   rib_ident: Ident,
        .                   mut res: Res,
        .                   record_used: bool,
        .                   span: Span,
        .                   original_rib_ident_def: Ident,
        .                   all_ribs: &[Rib<'a>],
        .               ) -> Res {
        .                   const CG_BUG_STR: &str = "min_const_generics resolve check didn't stop compilation";
        .                   debug!("validate_res_from_ribs({:?})", res);
   20,972 ( 0.00%)          let ribs = &all_ribs[rib_index + 1..];
        .           
        .                   // An invalid forward use of a generic parameter from a previous default.
   41,944 ( 0.00%)          if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {
        .                       if record_used {
        .                           let res_error = if rib_ident.name == kw::SelfUpper {
        .                               ResolutionError::SelfInGenericParamDefault
        .                           } else {
        .                               ResolutionError::ForwardDeclaredGenericParam
        .                           };
        .                           self.report_error(span, res_error);
        .                       }
        .                       assert_eq!(res, Res::Err);
        .                       return Res::Err;
        .                   }
        .           
   82,044 ( 0.00%)          match res {
        .                       Res::Local(_) => {
        .                           use ResolutionError::*;
      869 ( 0.00%)                  let mut res_err = None;
        .           
        .                           for rib in ribs {
    8,885 ( 0.00%)                      match rib.kind {
        .                                   NormalRibKind
        .                                   | ClosureOrAsyncRibKind
        .                                   | ModuleRibKind(..)
        .                                   | MacroDefinition(..)
        .                                   | ForwardGenericParamBanRibKind => {
        .                                       // Nothing to do. Continue.
        .                                   }
        .                                   ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {
        .                                       // This was an attempt to access an upvar inside a
        .                                       // named function item. This is not allowed, so we
        .                                       // report an error.
      762 ( 0.00%)                              if record_used {
        .                                           // We don't immediately trigger a resolve error, because
        .                                           // we want certain other resolution errors (namely those
        .                                           // emitted for `ConstantItemRibKind` below) to take
        .                                           // precedence.
        .                                           res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);
        .                                       }
        .                                   }
        .                                   ConstantItemRibKind(_, item) => {
-- line 2744 ----------------------------------------
-- line 2773 ----------------------------------------
        .                                   ConstParamTyRibKind => {
        .                                       if record_used {
        .                                           self.report_error(span, ParamInTyOfConstParam(rib_ident.name));
        .                                       }
        .                                       return Res::Err;
        .                                   }
        .                               }
        .                           }
    1,514 ( 0.00%)                  if let Some(res_err) = res_err {
        .                               self.report_error(span, res_err);
        .                               return Res::Err;
        .                           }
        .                       }
        .                       Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {
        .                           for rib in ribs {
  139,890 ( 0.00%)                      let has_generic_params: HasGenericParams = match rib.kind {
        .                                   NormalRibKind
        .                                   | ClosureOrAsyncRibKind
        .                                   | AssocItemRibKind
        .                                   | ModuleRibKind(..)
        .                                   | MacroDefinition(..)
        .                                   | ForwardGenericParamBanRibKind => {
        .                                       // Nothing to do. Continue.
        .                                       continue;
-- line 2796 ----------------------------------------
-- line 2799 ----------------------------------------
        .                                   ConstantItemRibKind(trivial, _) => {
        .                                       let features = self.session.features_untracked();
        .                                       // HACK(min_const_generics): We currently only allow `N` or `{ N }`.
        .                                       if !(trivial || features.generic_const_exprs) {
        .                                           // HACK(min_const_generics): If we encounter `Self` in an anonymous constant
        .                                           // we can't easily tell if it's generic at this stage, so we instead remember
        .                                           // this and then enforce the self type to be concrete later on.
        .                                           if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {
    9,586 ( 0.00%)                                      res = Res::SelfTy(trait_def, Some((impl_def, true)));
        .                                           } else {
        .                                               if record_used {
        .                                                   self.report_error(
        .                                                       span,
        .                                                       ResolutionError::ParamInNonTrivialAnonConst {
        .                                                           name: rib_ident.name,
        .                                                           is_type: true,
        .                                                       },
-- line 2815 ----------------------------------------
-- line 2912 ----------------------------------------
        .                                       ),
        .                                   );
        .                               }
        .                               return Res::Err;
        .                           }
        .                       }
        .                       _ => {}
        .                   }
   41,944 ( 0.00%)          res
        .               }
        .           
        .               fn record_partial_res(&mut self, node_id: NodeId, resolution: PartialRes) {
        .                   debug!("(recording res) recording {:?} for {}", resolution, node_id);
   47,268 ( 0.00%)          if let Some(prev_res) = self.partial_res_map.insert(node_id, resolution) {
        .                       panic!("path resolved multiple times ({:?} before, {:?} now)", prev_res, resolution);
        .                   }
        .               }
        .           
        .               fn record_pat_span(&mut self, node: NodeId, span: Span) {
        .                   debug!("(recording pat) recording {:?} for {:?}", node, span);
        .                   self.pat_span_map.insert(node, span);
        .               }
        .           
    2,720 ( 0.00%)      fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {
   12,969 ( 0.00%)          vis.is_accessible_from(module.nearest_parent_mod(), self)
    2,448 ( 0.00%)      }
        .           
        .               fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {
    3,960 ( 0.00%)          if let Some(old_module) = self.binding_parent_modules.insert(PtrKey(binding), module) {
        .                       if !ptr::eq(module, old_module) {
        .                           span_bug!(binding.span, "parent module is reset for binding");
        .                       }
        .                   }
        .               }
        .           
        .               fn disambiguate_macro_rules_vs_modularized(
        .                   &self,
-- line 2948 ----------------------------------------
-- line 2959 ----------------------------------------
        .                       (Some(macro_rules), Some(modularized)) => {
        .                           macro_rules.nearest_parent_mod() == modularized.nearest_parent_mod()
        .                               && modularized.is_ancestor_of(macro_rules)
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        7 ( 0.00%)      fn report_errors(&mut self, krate: &Crate) {
        .                   self.report_with_use_injections(krate);
        .           
        6 ( 0.00%)          for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {
        .                       let msg = "macro-expanded `macro_export` macros from the current crate \
        .                                  cannot be referred to by absolute paths";
        .                       self.lint_buffer.buffer_lint_with_diagnostic(
        .                           lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,
        .                           CRATE_NODE_ID,
        .                           span_use,
        .                           msg,
        .                           BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),
-- line 2978 ----------------------------------------
-- line 2984 ----------------------------------------
        .                   }
        .           
        .                   let mut reported_spans = FxHashSet::default();
        .                   for error in &self.privacy_errors {
        .                       if reported_spans.insert(error.dedup_span) {
        .                           self.report_privacy_error(error);
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               fn report_with_use_injections(&mut self, krate: &Crate) {
        .                   for UseError { mut err, candidates, def_id, instead, suggestion } in
       10 ( 0.00%)              self.use_injections.drain(..)
        .                   {
        .                       let (span, found_use) = if let Some(def_id) = def_id.as_local() {
        .                           UsePlacementFinder::check(krate, self.def_id_to_node_id[def_id])
        .                       } else {
        .                           (None, false)
        .                       };
        .                       if !candidates.is_empty() {
        .                           diagnostics::show_candidates(
-- line 3004 ----------------------------------------
-- line 3284 ----------------------------------------
        .                       }
        .           
        .                       return;
        .                   }
        .           
        .                   err.span_suggestion(span, message, String::new(), Applicability::MachineApplicable);
        .               }
        .           
    5,360 ( 0.00%)      fn extern_prelude_get(
        .                   &mut self,
        .                   ident: Ident,
        .                   speculative: bool,
        .               ) -> Option<&'a NameBinding<'a>> {
    2,680 ( 0.00%)          if ident.is_path_segment_keyword() {
        .                       // Make sure `self`, `super` etc produce an error when passed to here.
        .                       return None;
        .                   }
    4,824 ( 0.00%)          self.extern_prelude.get(&ident.normalize_to_macros_2_0()).cloned().and_then(|entry| {
      228 ( 0.00%)              if let Some(binding) = entry.extern_crate_item {
        .                           if !speculative && entry.introduced_by_item {
        .                               self.record_use(ident, binding, false);
        .                           }
        .                           Some(binding)
        .                       } else {
      228 ( 0.00%)                  let crate_id = if !speculative {
      134 ( 0.00%)                      let Some(crate_id) =
      201 ( 0.00%)                          self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };
        .                               crate_id
        .                           } else {
      188 ( 0.00%)                      self.crate_loader.maybe_process_path_extern(ident.name)?
        .                           };
        .                           let crate_root = self.expect_module(crate_id.as_def_id());
        .                           Some(
        .                               (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)
      114 ( 0.00%)                          .to_name_binding(self.arenas),
        .                           )
        .                       }
        .                   })
    4,288 ( 0.00%)      }
        .           
        .               /// Rustdoc uses this to resolve things in a recoverable way. `ResolutionError<'a>`
        .               /// isn't something that can be returned because it can't be made to live that long,
        .               /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,
        .               /// just that an error occurred.
        .               // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.
        .               pub fn resolve_str_path_error(
        .                   &mut self,
-- line 3330 ----------------------------------------
-- line 3422 ----------------------------------------
        .               #[inline]
        .               pub fn opt_span(&self, def_id: DefId) -> Option<Span> {
        .                   def_id.as_local().map(|def_id| self.definitions.def_span(def_id))
        .               }
        .           
        .               /// Checks if an expression refers to a function marked with
        .               /// `#[rustc_legacy_const_generics]` and returns the argument index list
        .               /// from the attribute.
  143,168 ( 0.00%)      pub fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
   71,584 ( 0.00%)          if let ExprKind::Path(None, path) = &expr.kind {
        .                       // Don't perform legacy const generics rewriting if the path already
        .                       // has generic arguments.
   17,896 ( 0.00%)              if path.segments.last().unwrap().args.is_some() {
        .                           return None;
        .                       }
        .           
        .                       let partial_res = self.partial_res_map.get(&expr.id)?;
   35,780 ( 0.00%)              if partial_res.unresolved_segments() != 0 {
        .                           return None;
        .                       }
        .           
      660 ( 0.00%)              if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {
        .                           // We only support cross-crate argument rewriting. Uses
        .                           // within the same crate should be updated to use the new
        .                           // const generics style.
       82 ( 0.00%)                  if def_id.is_local() {
        .                               return None;
        .                           }
        .           
        .                           if let Some(v) = self.legacy_const_generic_args.get(&def_id) {
        .                               return v.clone();
        .                           }
        .           
      360 ( 0.00%)                  let attr = self
        .                               .cstore()
      120 ( 0.00%)                      .item_attrs_untracked(def_id, self.session)
        .                               .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;
        .                           let mut ret = Vec::new();
        .                           for meta in attr.meta_item_list()? {
        .                               match meta.literal()?.kind {
        .                                   LitKind::Int(a, _) => ret.push(a as usize),
        .                                   _ => panic!("invalid arg index"),
        .                               }
        .                           }
        .                           // Cache the lookup to avoid parsing attributes for an iterm multiple times.
        .                           self.legacy_const_generic_args.insert(def_id, Some(ret.clone()));
        .                           return Some(ret);
        .                       }
        .                   }
        .                   None
  161,064 ( 0.00%)      }
        .           
        7 ( 0.00%)      fn resolve_main(&mut self) {
        2 ( 0.00%)          let module = self.graph_root;
        .                   let ident = Ident::with_dummy_span(sym::main);
        .                   let parent_scope = &ParentScope::module(module, self);
        .           
        .                   let name_binding = match self.resolve_ident_in_module(
        .                       ModuleOrUniformRoot::Module(module),
        .                       ident,
        .                       ValueNS,
        .                       parent_scope,
-- line 3483 ----------------------------------------
-- line 3490 ----------------------------------------
        .           
        .                   let res = name_binding.res();
        .                   let is_import = name_binding.is_import();
        .                   let span = name_binding.span;
        .                   if let Res::Def(DefKind::Fn, _) = res {
        .                       self.record_use(ident, name_binding, false);
        .                   }
        .                   self.main_def = Some(MainDefinition { res, is_import, span });
        8 ( 0.00%)      }
        .           }
        .           
        .           fn names_to_string(names: &[Symbol]) -> String {
        .               let mut result = String::new();
        .               for (i, name) in names.iter().filter(|name| **name != kw::PathRoot).enumerate() {
        .                   if i > 0 {
        .                       result.push_str("::");
        .                   }
-- line 3506 ----------------------------------------
-- line 3558 ----------------------------------------
        .               /// This is the "trait item" from a fully qualified path. For example,
        .               /// we might be resolving  `X::Y::Z` from a path like `<T as X::Y>::Z`.
        .               /// The `path_span` is the span of the to the trait itself (`X::Y`).
        .               QPathTrait { qpath_id: NodeId, qpath_span: Span },
        .           }
        .           
        .           impl CrateLint {
        .               fn node_id(&self) -> Option<NodeId> {
   33,003 ( 0.00%)          match *self {
        .                       CrateLint::No => None,
        .                       CrateLint::SimplePath(id)
        .                       | CrateLint::UsePath { root_id: id, .. }
        .                       | CrateLint::QPathTrait { qpath_id: id, .. } => Some(id),
        .                   }
        .               }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        .               late::lifetimes::provide(providers);
        1 ( 0.00%)  }

1,810,013 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           use rustc_span::Span;
         .           use std::borrow::Cow;
         .           use std::fmt::{self, Debug, Formatter, Write};
         .           use std::iter;
         .           use std::slice;
         .           
         .           pub use super::query::*;
         .           
     5,616 ( 0.00%)  #[derive(Debug, Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]
         .           pub struct SwitchTargets {
         .               /// Possible values. The locations to branch to in each case
         .               /// are found in the corresponding indices from the `targets` vector.
         .               values: SmallVec<[u128; 1]>,
         .           
         .               /// Possible branch sites. The last element of this vector is used
         .               /// for the otherwise branch, so targets.len() == values.len() + 1
         .               /// should hold.
-- line 28 ----------------------------------------
-- line 38 ----------------------------------------
         .               targets: SmallVec<[BasicBlock; 2]>,
         .           }
         .           
         .           impl SwitchTargets {
         .               /// Creates switch targets from an iterator of values and target blocks.
         .               ///
         .               /// The iterator may be empty, in which case the `SwitchInt` instruction is equivalent to
         .               /// `goto otherwise;`.
     1,865 ( 0.00%)      pub fn new(targets: impl Iterator<Item = (u128, BasicBlock)>, otherwise: BasicBlock) -> Self {
     2,536 ( 0.00%)          let (values, mut targets): (SmallVec<_>, SmallVec<_>) = targets.unzip();
         .                   targets.push(otherwise);
     2,536 ( 0.00%)          Self { values, targets }
     1,865 ( 0.00%)      }
         .           
         .               /// Builds a switch targets definition that jumps to `then` if the tested value equals `value`,
         .               /// and to `else_` if not.
         .               pub fn static_if(value: u128, then: BasicBlock, else_: BasicBlock) -> Self {
         .                   Self { values: smallvec![value], targets: smallvec![then, else_] }
         .               }
         .           
         .               /// Returns the fallback target that is jumped to when none of the values match the operand.
     1,230 ( 0.00%)      pub fn otherwise(&self) -> BasicBlock {
     1,231 ( 0.00%)          *self.targets.last().unwrap()
     2,460 ( 0.00%)      }
         .           
         .               /// Returns an iterator over the switch targets.
         .               ///
         .               /// The iterator will yield tuples containing the value and corresponding target to jump to, not
         .               /// including the `otherwise` fallback target.
         .               ///
         .               /// Note that this may yield 0 elements. Only the `otherwise` branch is mandatory.
     1,230 ( 0.00%)      pub fn iter(&self) -> SwitchTargetsIter<'_> {
     8,610 ( 0.00%)          SwitchTargetsIter { inner: iter::zip(&self.values, &self.targets) }
     1,230 ( 0.00%)      }
         .           
         .               /// Returns a slice with all possible jump targets (including the fallback target).
     2,085 ( 0.00%)      pub fn all_targets(&self) -> &[BasicBlock] {
         .                   &self.targets
     2,085 ( 0.00%)      }
         .           
         .               pub fn all_targets_mut(&mut self) -> &mut [BasicBlock] {
         .                   &mut self.targets
         .               }
         .           
         .               /// Finds the `BasicBlock` to which this `SwitchInt` will branch given the
         .               /// specific value.  This cannot fail, as it'll return the `otherwise`
         .               /// branch if there's not a specific match for the value.
         5 ( 0.00%)      pub fn target_for_value(&self, value: u128) -> BasicBlock {
         4 ( 0.00%)          self.iter().find_map(|(v, t)| (v == value).then_some(t)).unwrap_or_else(|| self.otherwise())
         6 ( 0.00%)      }
         .           }
         .           
         .           pub struct SwitchTargetsIter<'a> {
         .               inner: iter::Zip<slice::Iter<'a, u128>, slice::Iter<'a, BasicBlock>>,
         .           }
         .           
         .           impl<'a> Iterator for SwitchTargetsIter<'a> {
         .               type Item = (u128, BasicBlock);
         .           
         .               fn next(&mut self) -> Option<Self::Item> {
     4,692 ( 0.00%)          self.inner.next().map(|(val, bb)| (*val, *bb))
     3,576 ( 0.00%)      }
         .           
       128 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
       128 ( 0.00%)          self.inner.size_hint()
       384 ( 0.00%)      }
         .           }
         .           
         .           impl<'a> ExactSizeIterator for SwitchTargetsIter<'a> {}
         .           
 1,763,244 ( 0.04%)  #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]
         .           pub enum TerminatorKind<'tcx> {
         .               /// Block should have one successor in the graph; we jump there.
    13,992 ( 0.00%)      Goto { target: BasicBlock },
         .           
         .               /// Operand evaluates to an integer; jump depending on its value
         .               /// to one of the targets, and otherwise fallback to `otherwise`.
         .               SwitchInt {
         .                   /// The discriminant value being tested.
         .                   discr: Operand<'tcx>,
         .           
         .                   /// The type of value being tested.
         .                   /// This is always the same as the type of `discr`.
         .                   /// FIXME: remove this redundant information. Currently, it is relied on by pretty-printing.
       256 ( 0.00%)          switch_ty: Ty<'tcx>,
         .           
         .                   targets: SwitchTargets,
         .               },
         .           
         .               /// Indicates that the landing pad is finished and unwinding should
         .               /// continue. Emitted by `build::scope::diverge_cleanup`.
         .               Resume,
         .           
-- line 130 ----------------------------------------
-- line 136 ----------------------------------------
         .               /// been filled in before this executes. This can occur multiple times
         .               /// in different basic blocks.
         .               Return,
         .           
         .               /// Indicates a terminator that can never be reached.
         .               Unreachable,
         .           
         .               /// Drop the `Place`.
   508,626 ( 0.01%)      Drop { place: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },
         .           
         .               /// Drop the `Place` and assign the new value over it. This ensures
         .               /// that the assignment to `P` occurs *even if* the destructor for
         .               /// place unwinds. Its semantics are best explained by the
         .               /// elaboration:
         .               ///
         .               /// ```
         .               /// BB0 {
-- line 152 ----------------------------------------
-- line 167 ----------------------------------------
         .               /// BB2 {
         .               ///   // P is now uninitialized -- its dtor panicked
         .               ///   P <- V
         .               /// }
         .               /// ```
         .               ///
         .               /// Note that DropAndReplace is eliminated as part of the `ElaborateDrops` pass.
         .               DropAndReplace {
        12 ( 0.00%)          place: Place<'tcx>,
         .                   value: Operand<'tcx>,
         8 ( 0.00%)          target: BasicBlock,
         4 ( 0.00%)          unwind: Option<BasicBlock>,
         .               },
         .           
         .               /// Block ends with a call of a function.
         .               Call {
         .                   /// The function that’s being called.
         .                   func: Operand<'tcx>,
         .                   /// Arguments the function is called with.
         .                   /// These are owned by the callee, which is free to modify them.
         .                   /// This allows the memory occupied by "by-value" arguments to be
         .                   /// reused across function calls without duplicating the contents.
    57,918 ( 0.00%)          args: Vec<Operand<'tcx>>,
         .                   /// Destination for the return value. If some, the call is converging.
         .                   destination: Option<(Place<'tcx>, BasicBlock)>,
         .                   /// Cleanups to be done if the call unwinds.
    38,612 ( 0.00%)          cleanup: Option<BasicBlock>,
         .                   /// `true` if this is from a call in HIR rather than from an overloaded
         .                   /// operator. True for overloaded function call.
         .                   from_hir_call: bool,
         .                   /// This `Span` is the span of the function, without the dot and receiver
         .                   /// (e.g. `foo(a, b)` in `x.foo(a, b)`
         .                   fn_span: Span,
         .               },
         .           
         .               /// Jump to the target if the condition has the expected value,
         .               /// otherwise panic with a message and a cleanup target.
         .               Assert {
         .                   cond: Operand<'tcx>,
       114 ( 0.00%)          expected: bool,
         .                   msg: AssertMessage<'tcx>,
       228 ( 0.00%)          target: BasicBlock,
       228 ( 0.00%)          cleanup: Option<BasicBlock>,
         .               },
         .           
         .               /// A suspend point.
         .               Yield {
         .                   /// The value to return.
         .                   value: Operand<'tcx>,
         .                   /// Where to resume to.
         .                   resume: BasicBlock,
-- line 217 ----------------------------------------
-- line 223 ----------------------------------------
         .           
         .               /// Indicates the end of the dropping of a generator.
         .               GeneratorDrop,
         .           
         .               /// A block where control flow only ever takes one real path, but borrowck
         .               /// needs to be more conservative.
         .               FalseEdge {
         .                   /// The target normal control flow will take.
       292 ( 0.00%)          real_target: BasicBlock,
         .                   /// A block control flow could conceptually jump to, but won't in
         .                   /// practice.
       438 ( 0.00%)          imaginary_target: BasicBlock,
         .               },
         .               /// A terminator for blocks that only take one path in reality, but where we
         .               /// reserve the right to unwind in borrowck, even if it won't happen in practice.
         .               /// This can arise in infinite loops with no function calls for example.
         .               FalseUnwind {
         .                   /// The target normal control flow will take.
        72 ( 0.00%)          real_target: BasicBlock,
         .                   /// The imaginary cleanup block link. This particular path will never be taken
         .                   /// in practice, but in order to avoid fragility we want to always
         .                   /// consider it in borrowck. We don't want to accept programs which
         .                   /// pass borrowck only when `panic=abort` or some assertions are disabled
         .                   /// due to release vs. debug mode builds. This needs to be an `Option` because
         .                   /// of the `remove_noop_landing_pads` and `abort_unwinding_calls` passes.
        72 ( 0.00%)          unwind: Option<BasicBlock>,
         .               },
         .           
         .               /// Block ends with an inline assembly block. This is a terminator since
         .               /// inline assembly is allowed to diverge.
         .               InlineAsm {
         .                   /// The template for the inline assembly, with placeholders.
         .                   template: &'tcx [InlineAsmTemplatePiece],
         .           
-- line 256 ----------------------------------------
-- line 268 ----------------------------------------
         .                   /// diverging (InlineAsmOptions::NORETURN).
         .                   destination: Option<BasicBlock>,
         .           
         .                   /// Cleanup to be done if the inline assembly unwinds. This is present
         .                   /// if and only if InlineAsmOptions::MAY_UNWIND is set.
         .                   cleanup: Option<BasicBlock>,
         .               },
         .           }
 1,460,143 ( 0.03%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
         .           pub struct Terminator<'tcx> {
         .               pub source_info: SourceInfo,
         .               pub kind: TerminatorKind<'tcx>,
         .           }
         .           
         .           impl<'tcx> Terminator<'tcx> {
   646,166 ( 0.01%)      pub fn successors(&self) -> Successors<'_> {
 1,559,136 ( 0.04%)          self.kind.successors()
   969,249 ( 0.02%)      }
         .           
   487,208 ( 0.01%)      pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {
   243,604 ( 0.01%)          self.kind.successors_mut()
   730,812 ( 0.02%)      }
         .           
         .               pub fn unwind(&self) -> Option<&Option<BasicBlock>> {
         .                   self.kind.unwind()
         .               }
         .           
         .               pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {
         .                   self.kind.unwind_mut()
    84,368 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TerminatorKind<'tcx> {
       134 ( 0.00%)      pub fn if_(
         .                   tcx: TyCtxt<'tcx>,
         .                   cond: Operand<'tcx>,
         .                   t: BasicBlock,
         .                   f: BasicBlock,
         .               ) -> TerminatorKind<'tcx> {
     1,340 ( 0.00%)          TerminatorKind::SwitchInt {
       268 ( 0.00%)              discr: cond,
       134 ( 0.00%)              switch_ty: tcx.types.bool,
         .                       targets: SwitchTargets::static_if(0, f, t),
         .                   }
       134 ( 0.00%)      }
         .           
 1,132,526 ( 0.03%)      pub fn successors(&self) -> Successors<'_> {
         .                   use self::TerminatorKind::*;
10,287,448 ( 0.24%)          match *self {
         .                       Resume
         .                       | Abort
         .                       | GeneratorDrop
         .                       | Return
         .                       | Unreachable
         .                       | Call { destination: None, cleanup: None, .. }
         .                       | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&[]),
   135,078 ( 0.00%)              Goto { target: ref t }
         .                       | Call { destination: None, cleanup: Some(ref t), .. }
         .                       | Call { destination: Some((_, ref t)), cleanup: None, .. }
         .                       | Yield { resume: ref t, drop: None, .. }
         .                       | DropAndReplace { target: ref t, unwind: None, .. }
         .                       | Drop { target: ref t, unwind: None, .. }
         .                       | Assert { target: ref t, cleanup: None, .. }
         .                       | FalseUnwind { real_target: ref t, unwind: None }
         .                       | InlineAsm { destination: Some(ref t), cleanup: None, .. }
-- line 332 ----------------------------------------
-- line 338 ----------------------------------------
         .                       | DropAndReplace { target: ref t, unwind: Some(ref u), .. }
         .                       | Drop { target: ref t, unwind: Some(ref u), .. }
         .                       | Assert { target: ref t, cleanup: Some(ref u), .. }
         .                       | FalseUnwind { real_target: ref t, unwind: Some(ref u) }
         .                       | InlineAsm { destination: Some(ref t), cleanup: Some(ref u), .. } => {
         .                           Some(t).into_iter().chain(slice::from_ref(u))
         .                       }
         .                       SwitchInt { ref targets, .. } => None.into_iter().chain(&targets.targets),
     4,964 ( 0.00%)              FalseEdge { ref real_target, ref imaginary_target } => {
         .                           Some(real_target).into_iter().chain(slice::from_ref(imaginary_target))
         .                       }
         .                   }
 1,132,526 ( 0.03%)      }
         .           
   243,604 ( 0.01%)      pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {
         .                   use self::TerminatorKind::*;
 2,270,174 ( 0.05%)          match *self {
         .                       Resume
         .                       | Abort
         .                       | GeneratorDrop
         .                       | Return
         .                       | Unreachable
         .                       | Call { destination: None, cleanup: None, .. }
         .                       | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&mut []),
    18,354 ( 0.00%)              Goto { target: ref mut t }
         .                       | Call { destination: None, cleanup: Some(ref mut t), .. }
         .                       | Call { destination: Some((_, ref mut t)), cleanup: None, .. }
         .                       | Yield { resume: ref mut t, drop: None, .. }
         .                       | DropAndReplace { target: ref mut t, unwind: None, .. }
         .                       | Drop { target: ref mut t, unwind: None, .. }
         .                       | Assert { target: ref mut t, cleanup: None, .. }
         .                       | FalseUnwind { real_target: ref mut t, unwind: None }
         .                       | InlineAsm { destination: Some(ref mut t), cleanup: None, .. }
-- line 370 ----------------------------------------
-- line 376 ----------------------------------------
         .                       | DropAndReplace { target: ref mut t, unwind: Some(ref mut u), .. }
         .                       | Drop { target: ref mut t, unwind: Some(ref mut u), .. }
         .                       | Assert { target: ref mut t, cleanup: Some(ref mut u), .. }
         .                       | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) }
         .                       | InlineAsm { destination: Some(ref mut t), cleanup: Some(ref mut u), .. } => {
         .                           Some(t).into_iter().chain(slice::from_mut(u))
         .                       }
         .                       SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets.targets),
     1,164 ( 0.00%)              FalseEdge { ref mut real_target, ref mut imaginary_target } => {
         .                           Some(real_target).into_iter().chain(slice::from_mut(imaginary_target))
         .                       }
         .                   }
   243,604 ( 0.01%)      }
         .           
         .               pub fn unwind(&self) -> Option<&Option<BasicBlock>> {
         .                   match *self {
         .                       TerminatorKind::Goto { .. }
         .                       | TerminatorKind::Resume
         .                       | TerminatorKind::Abort
         .                       | TerminatorKind::Return
         .                       | TerminatorKind::Unreachable
-- line 396 ----------------------------------------
-- line 403 ----------------------------------------
         .                       | TerminatorKind::DropAndReplace { ref unwind, .. }
         .                       | TerminatorKind::Drop { ref unwind, .. }
         .                       | TerminatorKind::FalseUnwind { ref unwind, .. }
         .                       | TerminatorKind::InlineAsm { cleanup: ref unwind, .. } => Some(unwind),
         .                   }
         .               }
         .           
         .               pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {
   506,208 ( 0.01%)          match *self {
         .                       TerminatorKind::Goto { .. }
         .                       | TerminatorKind::Resume
         .                       | TerminatorKind::Abort
         .                       | TerminatorKind::Return
         .                       | TerminatorKind::Unreachable
         .                       | TerminatorKind::GeneratorDrop
         .                       | TerminatorKind::Yield { .. }
         .                       | TerminatorKind::SwitchInt { .. }
         .                       | TerminatorKind::FalseEdge { .. } => None,
    74,584 ( 0.00%)              TerminatorKind::Call { cleanup: ref mut unwind, .. }
         .                       | TerminatorKind::Assert { cleanup: ref mut unwind, .. }
         .                       | TerminatorKind::DropAndReplace { ref mut unwind, .. }
         .                       | TerminatorKind::Drop { ref mut unwind, .. }
         .                       | TerminatorKind::FalseUnwind { ref mut unwind, .. }
         .                       | TerminatorKind::InlineAsm { cleanup: ref mut unwind, .. } => Some(unwind),
         .                   }
         .               }
         .           
-- line 429 ----------------------------------------

 4,341,995 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/vec.rs
--------------------------------------------------------------------------------
Ir                  

-- line 13 ----------------------------------------
         .           ///
         .           /// Purpose: avoid mixing indexes for different bitvector domains.
         .           pub trait Idx: Copy + 'static + Eq + PartialEq + Debug + Hash {
         .               fn new(idx: usize) -> Self;
         .           
         .               fn index(self) -> usize;
         .           
         .               fn increment_by(&mut self, amount: usize) {
    58,734 ( 0.00%)          *self = self.plus(amount);
         .               }
         .           
         .               fn plus(self, amount: usize) -> Self {
    84,828 ( 0.00%)          Self::new(self.index() + amount)
         .               }
         .           }
         .           
         .           impl Idx for usize {
         .               #[inline]
         .               fn new(idx: usize) -> Self {
         .                   idx
         .               }
-- line 33 ----------------------------------------
-- line 35 ----------------------------------------
         .               fn index(self) -> usize {
         .                   self
         .               }
         .           }
         .           
         .           impl Idx for u32 {
         .               #[inline]
         .               fn new(idx: usize) -> Self {
     4,472 ( 0.00%)          assert!(idx <= u32::MAX as usize);
         .                   idx as u32
         .               }
         .               #[inline]
         .               fn index(self) -> usize {
       237 ( 0.00%)          self as usize
         .               }
         .           }
         .           
         .           /// Creates a struct type `S` that can be used as an index with
         .           /// `IndexVec` and so on.
         .           ///
         .           /// There are two ways of interacting with these indices:
         .           ///
-- line 56 ----------------------------------------
-- line 71 ----------------------------------------
         .           
         .               // Use default constants
         .               ($(#[$attrs:meta])* $v:vis struct $name:ident { .. }) => (
         .                   $crate::newtype_index!(
         .                       // Leave out derives marker so we can use its absence to ensure it comes first
         .                       @attrs        [$(#[$attrs])*]
         .                       @type         [$name]
         .                       // shave off 256 indices at the end to allow space for packing these indices into enums
    61,337 ( 0.00%)              @max          [0xFFFF_FF00]
         .                       @vis          [$v]
         .                       @debug_format ["{}"]);
         .               );
         .           
         .               // Define any constants
         .               ($(#[$attrs:meta])* $v:vis struct $name:ident { $($tokens:tt)+ }) => (
         .                   $crate::newtype_index!(
         .                       // Leave out derives marker so we can use its absence to ensure it comes first
         .                       @attrs        [$(#[$attrs])*]
         .                       @type         [$name]
         .                       // shave off 256 indices at the end to allow space for packing these indices into enums
   340,271 ( 0.01%)              @max          [0xFFFF_FF00]
         .                       @vis          [$v]
         .                       @debug_format ["{}"]
         .                                     $($tokens)+);
         .               );
         .           
         .               // ---- private rules ----
         .           
         .               // Base case, user-defined constants (if any) have already been defined
-- line 99 ----------------------------------------
-- line 102 ----------------------------------------
         .                @type         [$type:ident]
         .                @max          [$max:expr]
         .                @vis          [$v:vis]
         .                @debug_format [$debug_format:tt]) => (
         .                   $(#[$attrs])*
         .                   #[derive(Copy, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]
         .                   #[rustc_layout_scalar_valid_range_end($max)]
         .                   $v struct $type {
31,634,919 ( 0.73%)              private: u32
         .                   }
         .           
         .                   impl Clone for $type {
         .                       #[inline]
         .                       fn clone(&self) -> Self {
         .                           *self
         .                       }
         .                   }
-- line 118 ----------------------------------------
-- line 126 ----------------------------------------
         .           
         .                       /// Creates a new index from a given `usize`.
         .                       ///
         .                       /// # Panics
         .                       ///
         .                       /// Will panic if `value` exceeds `MAX`.
         .                       #[inline]
         .                       $v const fn from_usize(value: usize) -> Self {
 6,216,524 ( 0.14%)                  assert!(value <= ($max as usize));
         .                           // SAFETY: We just checked that `value <= max`.
         .                           unsafe {
     1,044 ( 0.00%)                      Self::from_u32_unchecked(value as u32)
         .                           }
         .                       }
         .           
         .                       /// Creates a new index from a given `u32`.
         .                       ///
         .                       /// # Panics
         .                       ///
         .                       /// Will panic if `value` exceeds `MAX`.
         .                       #[inline]
         .                       $v const fn from_u32(value: u32) -> Self {
   401,614 ( 0.01%)                  assert!(value <= $max);
         .                           // SAFETY: We just checked that `value <= max`.
         .                           unsafe {
         .                               Self::from_u32_unchecked(value)
         .                           }
         .                       }
         .           
         .                       /// Creates a new index from a given `u32`.
         .                       ///
-- line 156 ----------------------------------------
-- line 175 ----------------------------------------
         .                       #[inline]
         .                       $v const fn as_u32(self) -> u32 {
         .                           self.private
         .                       }
         .           
         .                       /// Extracts the value of this index as a `usize`.
         .                       #[inline]
         .                       $v const fn as_usize(self) -> usize {
 4,764,632 ( 0.11%)                  self.as_u32() as usize
         .                       }
         .                   }
         .           
         .                   impl std::ops::Add<usize> for $type {
         .                       type Output = Self;
         .           
         .                       fn add(self, other: usize) -> Self {
     2,486 ( 0.00%)                  Self::from_usize(self.index() + other)
         .                       }
         .                   }
         .           
         .                   impl $crate::vec::Idx for $type {
         .                       #[inline]
         .                       fn new(value: usize) -> Self {
         .                           Self::from_usize(value)
         .                       }
-- line 199 ----------------------------------------
-- line 269 ----------------------------------------
         .                @debug_format [custom]) => ();
         .           
         .               // base case for handle_debug, no debug overrides found, so use default
         .               (@handle_debug
         .                @derives      []
         .                @type         [$type:ident]
         .                @debug_format [$debug_format:tt]) => (
         .                   impl ::std::fmt::Debug for $type {
        10 ( 0.00%)              fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        40 ( 0.00%)                  write!(fmt, $debug_format, self.as_u32())
        10 ( 0.00%)              }
         .                   }
         .               );
         .           
         .               // Debug is requested for derive, don't generate any Debug implementation.
         .               (@handle_debug
         .                @derives      [Debug, $($derives:ident,)*]
         .                @type         [$type:ident]
         .                @debug_format [$debug_format:tt]) => ();
-- line 287 ----------------------------------------
-- line 390 ----------------------------------------
         .                       @vis          [$v]
         .                       @debug_format [$debug_format]
         .                                     $($tokens)*);
         .                   $crate::newtype_index!(@serializable $type);
         .               );
         .           
         .               (@serializable $type:ident) => (
         .                   impl<D: ::rustc_serialize::Decoder> ::rustc_serialize::Decodable<D> for $type {
       326 ( 0.00%)              fn decode(d: &mut D) -> Self {
     1,067 ( 0.00%)                  Self::from_u32(d.read_u32())
       652 ( 0.00%)              }
         .                   }
         .                   impl<E: ::rustc_serialize::Encoder> ::rustc_serialize::Encodable<E> for $type {
   182,950 ( 0.00%)              fn encode(&self, e: &mut E) -> Result<(), E::Error> {
         .                           e.emit_u32(self.private)
   219,540 ( 0.01%)              }
         .                   }
         .               );
         .           
         .               // Rewrite final without comma to one that includes comma
         .               (@derives      [$($derives:ident,)*]
         .                @attrs        [$(#[$attrs:meta])*]
         .                @type         [$type:ident]
         .                @max          [$max:expr]
-- line 413 ----------------------------------------
-- line 499 ----------------------------------------
         .                       @type         [$type]
         .                       @max          [$max]
         .                       @vis          [$v]
         .                       @debug_format [$debug_format]
         .                                     $($tokens)*);
         .               );
         .           }
         .           
    19,263 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Hash)]
         .           pub struct IndexVec<I: Idx, T> {
     5,755 ( 0.00%)      pub raw: Vec<T>,
         .               _marker: PhantomData<fn(&I)>,
         .           }
         .           
         .           // Whether `IndexVec` is `Send` depends only on the data,
         .           // not the phantom data.
         .           unsafe impl<I: Idx, T> Send for IndexVec<I, T> where T: Send {}
         .           
         .           impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for IndexVec<I, T> {
-- line 517 ----------------------------------------
-- line 523 ----------------------------------------
         .           impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for &IndexVec<I, T> {
         .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
         .                   Encodable::encode(&self.raw, s)
         .               }
         .           }
         .           
         .           impl<D: Decoder, I: Idx, T: Decodable<D>> Decodable<D> for IndexVec<I, T> {
         .               fn decode(d: &mut D) -> Self {
        65 ( 0.00%)          IndexVec { raw: Decodable::decode(d), _marker: PhantomData }
         .               }
         .           }
         .           
         .           impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Debug::fmt(&self.raw, fmt)
         .               }
         .           }
         .           
         .           impl<I: Idx, T> IndexVec<I, T> {
         .               #[inline]
         .               pub fn new() -> Self {
     9,990 ( 0.00%)          IndexVec { raw: Vec::new(), _marker: PhantomData }
         .               }
         .           
         .               #[inline]
         .               pub fn from_raw(raw: Vec<T>) -> Self {
    18,254 ( 0.00%)          IndexVec { raw, _marker: PhantomData }
         .               }
         .           
         .               #[inline]
         .               pub fn with_capacity(capacity: usize) -> Self {
     4,602 ( 0.00%)          IndexVec { raw: Vec::with_capacity(capacity), _marker: PhantomData }
         .               }
         .           
         .               #[inline]
         .               pub fn from_elem<S>(elem: T, universe: &IndexVec<I, S>) -> Self
         .               where
         .                   T: Clone,
         .               {
    27,595 ( 0.00%)          IndexVec { raw: vec![elem; universe.len()], _marker: PhantomData }
         .               }
         .           
         .               #[inline]
         .               pub fn from_elem_n(elem: T, n: usize) -> Self
         .               where
         .                   T: Clone,
         .               {
   307,291 ( 0.01%)          IndexVec { raw: vec![elem; n], _marker: PhantomData }
         .               }
         .           
         .               /// Create an `IndexVec` with `n` elements, where the value of each
         .               /// element is the result of `func(i)`. (The underlying vector will
         .               /// be allocated only once, with a capacity of at least `n`.)
         .               #[inline]
         .               pub fn from_fn_n(func: impl FnMut(I) -> T, n: usize) -> Self {
         .                   let indices = (0..n).map(I::new);
         .                   Self::from_raw(indices.map(func).collect())
         .               }
         .           
         .               #[inline]
        50 ( 0.00%)      pub fn push(&mut self, d: T) -> I {
         .                   let idx = I::new(self.len());
 1,364,716 ( 0.03%)          self.raw.push(d);
         .                   idx
        60 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn pop(&mut self) -> Option<T> {
         .                   self.raw.pop()
         .               }
         .           
         .               #[inline]
         .               pub fn len(&self) -> usize {
 1,025,652 ( 0.02%)          self.raw.len()
         .               }
         .           
         .               /// Gives the next index that will be assigned when `push` is
         .               /// called.
         .               #[inline]
         .               pub fn next_index(&self) -> I {
         .                   I::new(self.len())
         .               }
-- line 604 ----------------------------------------
-- line 612 ----------------------------------------
         .               pub fn into_iter(self) -> vec::IntoIter<T> {
         .                   self.raw.into_iter()
         .               }
         .           
         .               #[inline]
         .               pub fn into_iter_enumerated(
         .                   self,
         .               ) -> impl DoubleEndedIterator<Item = (I, T)> + ExactSizeIterator {
 2,807,246 ( 0.07%)          self.raw.into_iter().enumerate().map(|(n, t)| (I::new(n), t))
         .               }
         .           
         .               #[inline]
         .               pub fn iter(&self) -> slice::Iter<'_, T> {
         .                   self.raw.iter()
         .               }
         .           
         .               #[inline]
-- line 628 ----------------------------------------
-- line 692 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn get_mut(&mut self, index: I) -> Option<&mut T> {
         .                   self.raw.get_mut(index.index())
         .               }
         .           
         .               /// Returns mutable references to two distinct elements, a and b. Panics if a == b.
         .               #[inline]
    13,977 ( 0.00%)      pub fn pick2_mut(&mut self, a: I, b: I) -> (&mut T, &mut T) {
         .                   let (ai, bi) = (a.index(), b.index());
    27,954 ( 0.00%)          assert!(ai != bi);
         .           
    13,977 ( 0.00%)          if ai < bi {
         .                       let (c1, c2) = self.raw.split_at_mut(bi);
    56,585 ( 0.00%)              (&mut c1[ai], &mut c2[0])
         .                   } else {
        90 ( 0.00%)              let (c2, c1) = self.pick2_mut(b, a);
         .                       (c1, c2)
         .                   }
    41,931 ( 0.00%)      }
         .           
         .               /// Returns mutable references to three distinct elements or panics otherwise.
         .               #[inline]
         .               pub fn pick3_mut(&mut self, a: I, b: I, c: I) -> (&mut T, &mut T, &mut T) {
         .                   let (ai, bi, ci) = (a.index(), b.index(), c.index());
         .                   assert!(ai != bi && bi != ci && ci != ai);
         .                   let len = self.raw.len();
         .                   assert!(ai < len && bi < len && ci < len);
-- line 719 ----------------------------------------
-- line 726 ----------------------------------------
         .               }
         .           
         .               /// Grows the index vector so that it contains an entry for
         .               /// `elem`; if that is already true, then has no
         .               /// effect. Otherwise, inserts new values as needed by invoking
         .               /// `fill_value`.
         .               #[inline]
         .               pub fn ensure_contains_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) {
     3,607 ( 0.00%)          let min_new_len = elem.index() + 1;
   310,944 ( 0.01%)          if self.len() < min_new_len {
     6,822 ( 0.00%)              self.raw.resize_with(min_new_len, fill_value);
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn resize_to_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) {
         .                   let min_new_len = elem.index() + 1;
         .                   self.raw.resize_with(min_new_len, fill_value);
         .               }
-- line 744 ----------------------------------------
-- line 823 ----------------------------------------
         .           }
         .           
         .           impl<I: Idx, T> FromIterator<T> for IndexVec<I, T> {
         .               #[inline]
         .               fn from_iter<J>(iter: J) -> Self
         .               where
         .                   J: IntoIterator<Item = T>,
         .               {
   233,589 ( 0.01%)          IndexVec { raw: FromIterator::from_iter(iter), _marker: PhantomData }
         .               }
         .           }
         .           
         .           impl<I: Idx, T> IntoIterator for IndexVec<I, T> {
         .               type Item = T;
         .               type IntoIter = vec::IntoIter<T>;
         .           
         .               #[inline]
-- line 839 ----------------------------------------

 3,146,871 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/vec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           pub struct Preorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               worklist: Vec<BasicBlock>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Preorder<'a, 'tcx> {
   58,020 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> {
    5,802 ( 0.00%)          let worklist = vec![root];
        .           
   17,406 ( 0.00%)          Preorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
   23,208 ( 0.00%)              worklist,
        .                       root_is_start_block: root == START_BLOCK,
        .                   }
   52,218 ( 0.00%)      }
        .           }
        .           
    5,350 ( 0.00%)  pub fn preorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Preorder<'a, 'tcx> {
   24,112 ( 0.00%)      Preorder::new(body, START_BLOCK)
    8,025 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
4,217,279 ( 0.10%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
  579,567 ( 0.01%)          while let Some(idx) = self.worklist.pop() {
  579,567 ( 0.01%)              if !self.visited.insert(idx) {
        .                           continue;
        .                       }
        .           
  377,587 ( 0.01%)              let data = &self.body[idx];
        .           
1,887,935 ( 0.04%)              if let Some(ref term) = data.terminator {
        .                           self.worklist.extend(term.successors());
        .                       }
        .           
        .                       return Some((idx, data));
        .                   }
        .           
        .                   None
3,450,501 ( 0.08%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
        .                   let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
        .                   let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
-- line 74 ----------------------------------------
-- line 101 ----------------------------------------
        .           pub struct Postorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               visit_stack: Vec<(BasicBlock, Successors<'a>)>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Postorder<'a, 'tcx> {
   36,722 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {
        .                   let mut po = Postorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
        .                       visit_stack: Vec::new(),
        .                       root_is_start_block: root == START_BLOCK,
        .                   };
        .           
        .                   let data = &po.body[root];
        .           
   36,722 ( 0.00%)          if let Some(ref term) = data.terminator {
        .                       po.visited.insert(root);
   20,984 ( 0.00%)              po.visit_stack.push((root, term.successors()));
   10,492 ( 0.00%)              po.traverse_successor();
        .                   }
        .           
        .                   po
   47,214 ( 0.00%)      }
        .           
2,529,954 ( 0.06%)      fn traverse_successor(&mut self) {
        .                   // This is quite a complex loop due to 1. the borrow checker not liking it much
        .                   // and 2. what exactly is going on is not clear
        .                   //
        .                   // It does the actual traversal of the graph, while the `next` method on the iterator
        .                   // just pops off of the stack. `visit_stack` is a stack containing pairs of nodes and
        .                   // iterators over the successors of those nodes. Each iteration attempts to get the next
        .                   // node from the top of the stack, then pushes that node and an iterator over the
        .                   // successors to the top of the stack. This loop only grows `visit_stack`, stopping when
-- line 136 ----------------------------------------
-- line 169 ----------------------------------------
        .                   //
        .                   // Now that the top of the stack has no successors we can traverse, each item will
        .                   // be popped off during iteration until we get back to `A`. This yields [E, D, B].
        .                   //
        .                   // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but
        .                   // since we've already visited `E`, that child isn't added to the stack. The last
        .                   // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]
        .                   loop {
2,790,710 ( 0.06%)              let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {
1,716,936 ( 0.04%)                  if let Some(&bb) = iter.next() {
        .                               bb
        .                           } else {
        .                               break;
        .                           }
        .                       } else {
        .                           break;
        .                       };
        .           
  572,312 ( 0.01%)              if self.visited.insert(bb) {
2,456,510 ( 0.06%)                  if let Some(term) = &self.body[bb].terminator {
1,403,720 ( 0.03%)                      self.visit_stack.push((bb, term.successors()));
        .                           }
        .                       }
        .                   }
2,891,376 ( 0.07%)      }
        .           }
        .           
    1,616 ( 0.00%)  pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {
    1,616 ( 0.00%)      Postorder::new(body, START_BLOCK)
    2,424 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
  148,386 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
        .                   let next = self.visit_stack.pop();
  356,176 ( 0.01%)          if next.is_some() {
  707,914 ( 0.02%)              self.traverse_successor();
        .                   }
        .           
  356,176 ( 0.01%)          next.map(|(bb, _)| (bb, &self.body[bb]))
  247,310 ( 0.01%)      }
        .           
    6,305 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
   16,879 ( 0.00%)          let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
   16,879 ( 0.00%)          let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
        .                   } else {
        .                       self.visit_stack.len()
        .                   };
        .           
    3,783 ( 0.00%)          (lower, Some(upper))
    8,827 ( 0.00%)      }
        .           }
        .           
        .           /// Reverse postorder traversal of a graph
        .           ///
        .           /// Reverse postorder is the reverse order of a postorder traversal.
        .           /// This is different to a preorder traversal and represents a natural
        .           /// linearization of control-flow.
        .           ///
-- line 232 ----------------------------------------
-- line 253 ----------------------------------------
        .           pub struct ReversePostorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               blocks: Vec<BasicBlock>,
        .               idx: usize,
        .           }
        .           
        .           impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {
        .               pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> {
    8,876 ( 0.00%)          let blocks: Vec<_> = Postorder::new(body, root).map(|(bb, _)| bb).collect();
        .           
    4,438 ( 0.00%)          let len = blocks.len();
        .           
   22,190 ( 0.00%)          ReversePostorder { body, blocks, idx: len }
        .               }
        .           }
        .           
   26,628 ( 0.00%)  pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorder<'a, 'tcx> {
        .               ReversePostorder::new(body, START_BLOCK)
   22,190 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
  311,960 ( 0.01%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
1,247,840 ( 0.03%)          if self.idx == 0 {
        .                       return None;
        .                   }
  615,044 ( 0.01%)          self.idx -= 1;
        .           
        .                   self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))
  623,920 ( 0.01%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.idx, Some(self.idx))
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> ExactSizeIterator for ReversePostorder<'a, 'tcx> {}
        .           
-- line 291 ----------------------------------------
-- line 295 ----------------------------------------
        .           /// This is clearer than writing `preorder` in cases where the order doesn't matter.
        .           pub fn reachable<'a, 'tcx>(
        .               body: &'a Body<'tcx>,
        .           ) -> impl 'a + Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> {
        .               preorder(body)
        .           }
        .           
        .           /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.
   18,762 ( 0.00%)  pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {
        .               let mut iter = preorder(body);
        .               (&mut iter).for_each(drop);
   12,508 ( 0.00%)      iter.visited
   18,762 ( 0.00%)  }

3,483,820 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 270 ----------------------------------------
         .               ///
         .               /// let s = RandomState::new();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
         .               pub fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {
   723,490 ( 0.02%)          HashMap { base: base::HashMap::with_hasher(hash_builder) }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
         .               /// The hash map will be able to hold at least `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
         .               ///
-- line 286 ----------------------------------------
-- line 300 ----------------------------------------
         .               ///
         .               /// let s = RandomState::new();
         .               /// let mut map = HashMap::with_capacity_and_hasher(10, s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
         .               pub fn with_capacity_and_hasher(capacity: usize, hash_builder: S) -> HashMap<K, V, S> {
     1,143 ( 0.00%)          HashMap { base: base::HashMap::with_capacity_and_hasher(capacity, hash_builder) }
         .               }
         .           
         .               /// Returns the number of elements the map can hold without reallocating.
         .               ///
         .               /// This number is a lower bound; the `HashMap<K, V>` might be able to hold
         .               /// more, but is guaranteed to be able to hold at least this many.
         .               ///
         .               /// # Examples
-- line 316 ----------------------------------------
-- line 468 ----------------------------------------
         .               /// ]);
         .               ///
         .               /// for (key, val) in map.iter() {
         .               ///     println!("key: {} val: {}", key, val);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn iter(&self) -> Iter<'_, K, V> {
     5,790 ( 0.00%)          Iter { base: self.base.iter() }
         .               }
         .           
         .               /// An iterator visiting all key-value pairs in arbitrary order,
         .               /// with mutable references to the values.
         .               /// The iterator element type is `(&'a K, &'a mut V)`.
         .               ///
         .               /// # Examples
         .               ///
-- line 484 ----------------------------------------
-- line 643 ----------------------------------------
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
         1 ( 0.00%)          self.base.clear();
         .               }
         .           
         .               /// Returns a reference to the map's [`BuildHasher`].
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use std::collections::HashMap;
-- line 659 ----------------------------------------
-- line 688 ----------------------------------------
         .               /// ```
         .               /// use std::collections::HashMap;
         .               /// let mut map: HashMap<&str, i32> = HashMap::new();
         .               /// map.reserve(10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve(&mut self, additional: usize) {
         1 ( 0.00%)          self.base.reserve(additional)
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `HashMap<K, V>`. The collection may reserve more space to avoid
         .               /// frequent reallocations.
         .               ///
         .               /// # Errors
         .               ///
-- line 704 ----------------------------------------
-- line 784 ----------------------------------------
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
45,304,982 ( 1.05%)          map_entry(self.base.rustc_entry(key))
         .               }
         .           
         .               /// Returns a reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 800 ----------------------------------------
-- line 805 ----------------------------------------
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.get(&1), Some(&"a"));
         .               /// assert_eq!(map.get(&2), None);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
   746,484 ( 0.02%)      pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.base.get(k)
 1,074,350 ( 0.02%)      }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// # Examples
-- line 827 ----------------------------------------
-- line 862 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
    75,448 ( 0.00%)          self.base.contains_key(k)
         .               }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 878 ----------------------------------------
-- line 890 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
       501 ( 0.00%)          self.base.get_mut(k)
         .               }
         .           
         .               /// Inserts a key-value pair into the map.
         .               ///
         .               /// If the map did not have this key present, [`None`] is returned.
         .               ///
         .               /// If the map did have this key present, the value is updated, and the old
         .               /// value is returned. The key is not updated, though; this matters for
-- line 906 ----------------------------------------
-- line 920 ----------------------------------------
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn insert(&mut self, k: K, v: V) -> Option<V> {
 1,651,871 ( 0.04%)          self.base.insert(k, v)
         .               }
         .           
         .               /// Tries to insert a key-value pair into the map, and returns
         .               /// a mutable reference to the value in the entry.
         .               ///
         .               /// If the map already had this key present, nothing is updated, and
         .               /// an error containing the occupied entry and the value is returned.
         .               ///
-- line 936 ----------------------------------------
-- line 978 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
   165,157 ( 0.00%)          self.base.remove(k)
         .               }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
-- line 994 ----------------------------------------
-- line 1083 ----------------------------------------
         .           impl<K, V, S> Clone for HashMap<K, V, S>
         .           where
         .               K: Clone,
         .               V: Clone,
         .               S: Clone,
         .           {
         .               #[inline]
         .               fn clone(&self) -> Self {
       901 ( 0.00%)          Self { base: self.base.clone() }
         .               }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, other: &Self) {
         .                   self.base.clone_from(&other.base);
         .               }
         .           }
         .           
-- line 1099 ----------------------------------------
-- line 1155 ----------------------------------------
         .               type Output = V;
         .           
         .               /// Returns a reference to the value corresponding to the supplied key.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the key is not present in the `HashMap`.
         .               #[inline]
     2,911 ( 0.00%)      fn index(&self, key: &Q) -> &V {
         .                   self.get(key).expect("no entry found for key")
     3,886 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "std_collections_from_array", since = "1.56.0")]
         .           // Note: as what is currently the most convenient built-in way to construct
         .           // a HashMap, a simple usage of this function must not *require* the user
         .           // to provide a type annotation in order to infer the third type parameter
         .           // (the hasher parameter, conventionally "S").
         .           // To that end, this impl is defined using RandomState as the concrete
-- line 1173 ----------------------------------------
-- line 1557 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 2,160,103 ( 0.05%)          map_raw_entry(self.map.base.raw_entry_mut().from_key_hashed_nocheck(hash, k))
         .               }
         .           
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[inline]
         .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
         .               pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
-- line 1573 ----------------------------------------
-- line 1594 ----------------------------------------
         .               /// Access an entry by a key and its hash.
         .               #[inline]
         .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 3,706,359 ( 0.09%)          self.map.base.raw_entry().from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[inline]
         .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
         .               pub fn from_hash<F>(self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
-- line 1610 ----------------------------------------
-- line 2338 ----------------------------------------
         .               /// assert_eq!(map["poneyland"], 3);
         .               ///
         .               /// *map.entry("poneyland").or_insert(10) *= 2;
         .               /// assert_eq!(map["poneyland"], 6);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn or_insert(self, default: V) -> &'a mut V {
    50,628 ( 0.00%)          match self {
         .                       Occupied(entry) => entry.into_mut(),
         .                       Vacant(entry) => entry.insert(default),
         .                   }
         .               }
         .           
         .               /// Ensures a value is in the entry by inserting the result of the default function if empty,
         .               /// and returns a mutable reference to the value in the entry.
         .               ///
-- line 2354 ----------------------------------------
-- line 2362 ----------------------------------------
         .               ///
         .               /// map.entry("poneyland").or_insert_with(|| s);
         .               ///
         .               /// assert_eq!(map["poneyland"], "hoho".to_string());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {
22,439,309 ( 0.52%)          match self {
         .                       Occupied(entry) => entry.into_mut(),
         .                       Vacant(entry) => entry.insert(default()),
         .                   }
         .               }
         .           
         .               /// Ensures a value is in the entry by inserting, if empty, the result of the default function.
         .               /// This method allows for generating key-derived values for insertion by providing the default
         .               /// function a reference to the key that was moved during the `.entry(key)` method call.
-- line 2378 ----------------------------------------
-- line 2443 ----------------------------------------
         .               /// assert_eq!(map["poneyland"], 43);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "entry_and_modify", since = "1.26.0")]
         .               pub fn and_modify<F>(self, f: F) -> Self
         .               where
         .                   F: FnOnce(&mut V),
         .               {
        44 ( 0.00%)          match self {
         .                       Occupied(mut entry) => {
         .                           f(entry.get_mut());
         .                           Occupied(entry)
         .                       }
         .                       Vacant(entry) => Vacant(entry),
         .                   }
         .               }
         .           
-- line 2459 ----------------------------------------
-- line 2496 ----------------------------------------
         .               /// map.entry("poneyland").or_default();
         .               ///
         .               /// assert_eq!(map["poneyland"], None);
         .               /// # }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "entry_or_default", since = "1.28.0")]
         .               pub fn or_default(self) -> &'a mut V {
    16,518 ( 0.00%)          match self {
         .                       Occupied(entry) => entry.into_mut(),
         .                       Vacant(entry) => entry.insert(Default::default()),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V> OccupiedEntry<'a, K, V> {
         .               /// Gets a reference to the key in the entry.
-- line 2512 ----------------------------------------
-- line 2790 ----------------------------------------
         .               /// if let Entry::Vacant(o) = map.entry("poneyland") {
         .               ///     o.insert(37);
         .               /// }
         .               /// assert_eq!(map["poneyland"], 37);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn insert(self, value: V) -> &'a mut V {
   104,026 ( 0.00%)          self.base.insert(value)
         .               }
         .           
         .               /// Sets the value of the entry with the `VacantEntry`'s key,
         .               /// and returns an `OccupiedEntry`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 2806 ----------------------------------------
-- line 2823 ----------------------------------------
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<K, V, S> FromIterator<(K, V)> for HashMap<K, V, S>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher + Default,
         .           {
         4 ( 0.00%)      fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> HashMap<K, V, S> {
         .                   let mut map = HashMap::with_hasher(Default::default());
         .                   map.extend(iter);
         .                   map
         5 ( 0.00%)      }
         .           }
         .           
         .           /// Inserts all new key-values from the iterator and replaces values with existing
         .           /// keys with new values returned from the iterator.
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<K, V, S> Extend<(K, V)> for HashMap<K, V, S>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .           {
         .               #[inline]
         .               fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
    18,927 ( 0.00%)          self.base.extend(iter)
         .               }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.base.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 2856 ----------------------------------------
-- line 2928 ----------------------------------------
         .                   // many hash maps are created on a thread. To solve this performance
         .                   // trap we cache the first set of randomly generated keys per-thread.
         .                   //
         .                   // Later in #36481 it was discovered that exposing a deterministic
         .                   // iteration order allows a form of DOS attack. To counter that we
         .                   // increment one of the seeds on every RandomState creation, giving
         .                   // every corresponding HashMap a different iteration order.
         .                   thread_local!(static KEYS: Cell<(u64, u64)> = {
         1 ( 0.00%)              Cell::new(sys::hashmap_random_keys())
         .                   });
         .           
         .                   KEYS.with(|keys| {
         3 ( 0.00%)              let (k0, k1) = keys.get();
         .                       keys.set((k0.wrapping_add(1), k1));
         .                       RandomState { k0, k1 }
         .                   })
         .               }
         .           }
         .           
         .           #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
         .           impl BuildHasher for RandomState {
-- line 2948 ----------------------------------------
-- line 2967 ----------------------------------------
         .               /// Creates a new `DefaultHasher`.
         .               ///
         .               /// This hasher is not guaranteed to be the same as all other
         .               /// `DefaultHasher` instances, but is the same as all other `DefaultHasher`
         .               /// instances created through `new` or `default`.
         .               #[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
         .               #[allow(deprecated)]
         .               #[must_use]
         3 ( 0.00%)      pub fn new() -> DefaultHasher {
        12 ( 0.00%)          DefaultHasher(SipHasher13::new_with_keys(0, 0))
         3 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
         .           impl Default for DefaultHasher {
         .               /// Creates a new `DefaultHasher` using [`new`].
         .               /// See its documentation for more.
         .               ///
         .               /// [`new`]: DefaultHasher::new
-- line 2985 ----------------------------------------
-- line 2986 ----------------------------------------
         .               fn default() -> DefaultHasher {
         .                   DefaultHasher::new()
         .               }
         .           }
         .           
         .           #[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
         .           impl Hasher for DefaultHasher {
         .               #[inline]
     1,076 ( 0.00%)      fn write(&mut self, msg: &[u8]) {
         .                   self.0.write(msg)
     1,076 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn finish(&self) -> u64 {
         .                   self.0.finish()
         .               }
         .           }
         .           
         .           #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
-- line 3004 ----------------------------------------
-- line 3014 ----------------------------------------
         .           impl fmt::Debug for RandomState {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_struct("RandomState").finish_non_exhaustive()
         .               }
         .           }
         .           
         .           #[inline]
         .           fn map_entry<'a, K: 'a, V: 'a>(raw: base::RustcEntry<'a, K, V>) -> Entry<'a, K, V> {
    12,681 ( 0.00%)      match raw {
        54 ( 0.00%)          base::RustcEntry::Occupied(base) => Entry::Occupied(OccupiedEntry { base }),
     2,074 ( 0.00%)          base::RustcEntry::Vacant(base) => Entry::Vacant(VacantEntry { base }),
         .               }
         .           }
         .           
         .           #[inline]
         .           pub(super) fn map_try_reserve_error(err: hashbrown::TryReserveError) -> TryReserveError {
         .               match err {
         .                   hashbrown::TryReserveError::CapacityOverflow => {
         .                       TryReserveErrorKind::CapacityOverflow.into()
-- line 3032 ----------------------------------------
-- line 3036 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           #[inline]
         .           fn map_raw_entry<'a, K: 'a, V: 'a, S: 'a>(
         .               raw: base::RawEntryMut<'a, K, V, S>,
         .           ) -> RawEntryMut<'a, K, V, S> {
 1,664,092 ( 0.04%)      match raw {
         .                   base::RawEntryMut::Occupied(base) => RawEntryMut::Occupied(RawOccupiedEntryMut { base }),
         .                   base::RawEntryMut::Vacant(base) => RawEntryMut::Vacant(RawVacantEntryMut { base }),
         .               }
         .           }
         .           
         .           #[allow(dead_code)]
         .           fn assert_covariance() {
         .               fn map_key<'new>(v: HashMap<&'static str, u8>) -> HashMap<&'new str, u8> {
-- line 3052 ----------------------------------------

12,361,954 ( 0.29%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
2,295,620,969 (53.18%)  events annotated

