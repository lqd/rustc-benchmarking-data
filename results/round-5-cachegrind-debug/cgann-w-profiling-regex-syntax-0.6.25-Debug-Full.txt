--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name regex_syntax --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="unicode" --cfg feature="unicode-age" --cfg feature="unicode-bool" --cfg feature="unicode-case" --cfg feature="unicode-gencat" --cfg feature="unicode-perl" --cfg feature="unicode-script" --cfg feature="unicode-segment" -C metadata=d10814a624ac3cb1 -C extra-filename=-d10814a624ac3cb1 --out-dir /usr/home/liquid/tmp/.tmpCl9IXP/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpCl9IXP/target/debug/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-regex-syntax-0.6.25-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
19,702,669,044 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
697,784,341 ( 3.54%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
547,763,655 ( 2.78%)  ./malloc/malloc.c:_int_malloc
535,434,092 ( 2.72%)  ./malloc/malloc.c:_int_free
365,065,898 ( 1.85%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
324,635,416 ( 1.65%)  ./malloc/malloc.c:malloc
202,484,366 ( 1.03%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
173,470,107 ( 0.88%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
167,644,457 ( 0.85%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
162,066,607 ( 0.82%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
155,315,291 ( 0.79%)  ./malloc/malloc.c:free
151,690,019 ( 0.77%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
151,083,063 ( 0.77%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
140,927,117 ( 0.72%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
121,730,614 ( 0.62%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
117,667,262 ( 0.60%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
107,215,100 ( 0.54%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
 93,105,784 ( 0.47%)  ./malloc/malloc.c:malloc_consolidate
 86,385,310 ( 0.44%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 78,002,742 ( 0.40%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
 76,690,577 ( 0.39%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
 71,394,117 ( 0.36%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
 66,118,374 ( 0.34%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
 65,415,479 ( 0.33%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 63,511,064 ( 0.32%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
 61,074,632 ( 0.31%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
 59,324,061 ( 0.30%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 58,334,004 ( 0.30%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 58,277,014 ( 0.30%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
 58,137,503 ( 0.30%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 57,643,868 ( 0.29%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
 56,211,767 ( 0.29%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 55,564,359 ( 0.28%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
 54,428,191 ( 0.28%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
 52,841,966 ( 0.27%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 50,052,597 ( 0.25%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
 50,006,710 ( 0.25%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
 49,203,281 ( 0.25%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
 48,342,203 ( 0.25%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 47,918,992 ( 0.24%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
 47,881,626 ( 0.24%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
 47,876,382 ( 0.24%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 46,457,323 ( 0.24%)  ???:llvm::DAGTypeLegalizer::run()
 46,217,258 ( 0.23%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
 45,507,238 ( 0.23%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
 45,027,099 ( 0.23%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
 44,308,765 ( 0.22%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
 43,793,191 ( 0.22%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
 42,586,845 ( 0.22%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
 40,739,523 ( 0.21%)  ???:llvm::SelectionDAG::Legalize()
 40,428,998 ( 0.21%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
 39,784,322 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 39,592,059 ( 0.20%)  ./malloc/malloc.c:realloc
 39,228,313 ( 0.20%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
 39,120,313 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 38,997,363 ( 0.20%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
 38,271,997 ( 0.19%)  ???:llvm::calculateDbgEntityHistory(llvm::MachineFunction const*, llvm::TargetRegisterInfo const*, llvm::DbgValueHistoryMap&, llvm::DbgLabelInstrMap&)
 38,150,776 ( 0.19%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
 37,834,089 ( 0.19%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
 36,902,248 ( 0.19%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
 36,068,583 ( 0.18%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
 34,284,197 ( 0.17%)  ./stdlib/msort.c:msort_with_tmp.part.0
 33,177,741 ( 0.17%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
 32,656,530 ( 0.17%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
 32,384,345 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 31,777,979 ( 0.16%)  ???:llvm::X86FrameLowering::hasFP(llvm::MachineFunction const&) const
 31,133,802 ( 0.16%)  ???:(anonymous namespace)::ELFObjectWriter::recordRelocation(llvm::MCAssembler&, llvm::MCAsmLayout const&, llvm::MCFragment const*, llvm::MCFixup const&, llvm::MCValue, unsigned long&) [clone .llvm.14145361893594770252]
 30,845,031 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 30,507,085 ( 0.15%)  ???:llvm::FoldingSet<llvm::AttributeImpl>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
 30,263,650 ( 0.15%)  ???:(anonymous namespace)::Verifier::visitFunction(llvm::Function const&)::$_3::operator()(llvm::Instruction const&, llvm::MDNode const*) const
 30,084,690 ( 0.15%)  ???:llvm::MachineFunction::CreateMachineInstr(llvm::MCInstrDesc const&, llvm::DebugLoc const&, bool)
 29,975,006 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 29,502,759 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 29,303,062 ( 0.15%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
 29,300,255 ( 0.15%)  ???:(anonymous namespace)::X86MCCodeEmitter::encodeInstruction(llvm::MCInst const&, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&) const
 28,587,182 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 28,579,145 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 28,499,598 ( 0.14%)  ???:llvm::FunctionLoweringInfo::set(llvm::Function const&, llvm::MachineFunction&, llvm::SelectionDAG*)
 28,307,936 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 27,837,972 ( 0.14%)  ???:llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*)
 27,010,468 ( 0.14%)  ./malloc/malloc.c:_int_realloc
 25,909,427 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_data_structures::sorted_map::SortedMap<rustc_target::abi::Size, rustc_middle::mir::interpret::AllocId>>::range_slice_indices::<core::ops::range::Range<rustc_target::abi::Size>>
 25,859,961 ( 0.13%)  ???:(anonymous namespace)::ELFWriter::writeObject(llvm::MCAssembler&, llvm::MCAsmLayout const&)
 25,512,941 ( 0.13%)  ???:llvm::ScheduleDAGSDNodes::AddSchedEdges()
 25,441,528 ( 0.13%)  ???:llvm::raw_ostream::write(char const*, unsigned long)
 25,436,106 ( 0.13%)  ???:(anonymous namespace)::RegAllocFast::markRegUsedInInstr(unsigned short)
 25,309,538 ( 0.13%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
 25,051,994 ( 0.13%)  ???:llvm::Twine::printOneChild(llvm::raw_ostream&, llvm::Twine::Child, llvm::Twine::NodeKind) const
 24,949,770 ( 0.13%)  ???:llvm::MCAssembler::layout(llvm::MCAsmLayout&)
 24,663,451 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
 24,477,135 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 24,433,178 ( 0.12%)  ???:llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&)
 24,114,152 ( 0.12%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
 24,030,763 ( 0.12%)  ???:(anonymous namespace)::CFIInstrInserter::runOnMachineFunction(llvm::MachineFunction&)
 23,739,632 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 23,584,011 ( 0.12%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
 23,510,588 ( 0.12%)  ???:llvm::SelectionDAG::AssignTopologicalOrder()
 23,402,806 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 23,387,486 ( 0.12%)  ./malloc/malloc.c:calloc
 22,912,142 ( 0.12%)  ???:llvm::LazyCallGraph::Node::populateSlow()
 22,709,643 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 22,348,209 ( 0.11%)  ???:llvm::MDNode::MDNode(llvm::LLVMContext&, unsigned int, llvm::Metadata::StorageType, llvm::ArrayRef<llvm::Metadata*>, llvm::ArrayRef<llvm::Metadata*>)
 21,901,713 ( 0.11%)  ???:llvm::SelectionDAG::getRegister(unsigned int, llvm::EVT)
 21,853,603 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
 21,760,671 ( 0.11%)  ???:llvm::X86TargetMachine::getTargetTransformInfo(llvm::Function const&)
 21,723,660 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 21,711,765 ( 0.11%)  ???:llvm::MachineFunctionPass::runOnFunction(llvm::Function&)
 21,664,991 ( 0.11%)  ???:llvm::MCELFStreamer::emitLabel(llvm::MCSymbol*, llvm::SMLoc)
 21,524,381 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
 21,417,255 ( 0.11%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitMemModRMByte(llvm::MCInst const&, unsigned int, unsigned int, unsigned long, bool, unsigned long, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&, bool) const
 21,388,990 ( 0.11%)  ???:llvm::AsmPrinter::emitFunctionBody()
 21,351,388 ( 0.11%)  ???:llvm::MCELFStreamer::emitInstToData(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
 20,997,839 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 20,946,928 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::SourceFile>::line_begin_pos
 20,946,928 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_line
 20,838,304 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
 20,785,386 ( 0.11%)  ???:(anonymous namespace)::VarLocBasedLDV::collectIDsForRegs(llvm::SmallSet<unsigned int, 32u, std::less<unsigned int> >&, llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> > const&, llvm::CoalescingBitVector<unsigned long> const&, (anonymous namespace)::VarLocBasedLDV::VarLocMap const&)
 20,565,574 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 20,509,301 ( 0.10%)  ???:llvm::LLVMContextImpl::~LLVMContextImpl()
 20,388,452 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 20,368,733 ( 0.10%)  ???:llvm::MCDwarfLineAddr::Encode(llvm::MCContext&, llvm::MCDwarfLineTableParams, long, unsigned long, llvm::raw_ostream&)
 20,046,349 ( 0.10%)  ???:llvm::X86RegisterInfo::eliminateFrameIndex(llvm::MachineInstrBundleIterator<llvm::MachineInstr, false>, int, unsigned int, llvm::RegScavenger*) const
 19,846,012 ( 0.10%)  ???:llvm::MCObjectStreamer::emitInstruction(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
 19,813,458 ( 0.10%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
 19,760,464 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     1,104 ( 0.00%)      fn clone(&self) -> Self {
     2,808 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
       521 ( 0.00%)              table: self.table.clone(),
         .                   }
     1,242 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   625,501 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 2,327,041 ( 0.01%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 2,020,282 ( 0.01%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
         .               hash_builder.hash_one(val)
         4 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub const fn with_hasher(hash_builder: S) -> Self {
 1,979,423 ( 0.01%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new(),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       601 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
         .               /// map.insert("c", 3);
         .               ///
         .               /// for key in map.keys() {
         .               ///     println!("{}", key);
         .               /// }
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn keys(&self) -> Keys<'_, K, V> {
         6 ( 0.00%)          Keys { inner: self.iter() }
         .               }
         .           
         .               /// An iterator visiting all values in arbitrary order.
         .               /// The iterator element type is `&'a V`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
    49,197 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   541,675 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,456 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       470 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
     1,350 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
     1,820 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 6,095,097 ( 0.03%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 6,792,622 ( 0.03%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,428,574 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.get_inner(k).is_some()
 2,049,298 ( 0.01%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,130 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    10,134 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
     2,260 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
     3,378 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
     4,496 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
         .               /// mutable reference will be returned to any value. `None` will be returned if any of the
         .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
13,398,884 ( 0.07%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    22,936 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        22 ( 0.00%)              Some(mem::replace(item, v))
         .                   } else {
 4,704,968 ( 0.02%)              self.table
 5,083,651 ( 0.03%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   491,284 ( 0.00%)              None
         .                   }
12,621,658 ( 0.06%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   605,680 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 2,541,228 ( 0.01%)          match self.remove_entry(k) {
   183,846 ( 0.00%)              Some((_, v)) => Some(v),
   457,668 ( 0.00%)              None => None,
         .                   }
 1,471,780 ( 0.01%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 1,000,094 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 9,100,860 ( 0.05%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
24,154,079 ( 0.12%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
25,683,249 ( 0.13%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 2,935,076 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
14,803,795 ( 0.08%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
 1,503,208 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 7,069,558 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 5,984,149 ( 0.03%)          self.from_hash(hash, equivalent(k))
12,229,089 ( 0.06%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
11,734,365 ( 0.06%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 2,436,156 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     4,580 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   103,233 ( 0.00%)          IntoIter {
    58,177 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    13,740 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   798,120 ( 0.00%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
     2,716 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
     1,900 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
    21,346 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       263 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
       526 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
       108 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
    98,213 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
    78,343 ( 0.00%)          let iter = iter.into_iter();
    79,246 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
     5,935 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
   226,674 ( 0.00%)              self.insert(k, v);
         .                   });
    68,442 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------
-- line 4604 ----------------------------------------
         .           impl<'a, K, V, S, A> Extend<(&'a K, &'a V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash + Copy,
         .               V: Copy,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
        28 ( 0.00%)      fn extend<T: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: T) {
         .                   self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));
        32 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (&'a K, &'a V)) {
         .                   self.insert(*k, *v);
         .               }
         .           
         .               #[inline]
-- line 4622 ----------------------------------------

11,112,185 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           };
        .           use rustc_ast_pretty::pprust::token_to_string;
        .           use rustc_data_structures::fx::FxHashMap;
        .           use rustc_errors::PResult;
        .           use rustc_span::Span;
        .           
        .           impl<'a> StringReader<'a> {
        .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      722 ( 0.00%)          let mut tt_reader = TokenTreesReader {
        .                       string_reader: self,
       38 ( 0.00%)              token: Token::dummy(),
        .                       open_braces: Vec::new(),
        .                       unmatched_braces: Vec::new(),
        .                       matching_delim_spans: Vec::new(),
        .                       last_unclosed_found_span: None,
        .                       last_delim_empty_block_spans: FxHashMap::default(),
        .                       matching_block_spans: Vec::new(),
        .                   };
       38 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
      228 ( 0.00%)          (res, tt_reader.unmatched_braces)
        .               }
        .           }
        .           
        .           struct TokenTreesReader<'a> {
        .               string_reader: StringReader<'a>,
        .               token: Token,
        .               /// Stack of open delimiters and their spans. Used for error message.
        .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
        .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
        .               /// Collect the spans of braces (Open, Close). Used only
        .               /// for detecting if blocks are empty and only braces.
        .               matching_block_spans: Vec<(Span, Span)>,
        .           }
        .           
        .           impl<'a> TokenTreesReader<'a> {
        .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
      304 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
        .                   let mut buf = TokenStreamBuilder::default();
        .           
        .                   self.bump();
   18,456 ( 0.00%)          while self.token != token::Eof {
   73,520 ( 0.00%)              buf.push(self.parse_token_tree()?);
        .                   }
        .           
        .                   Ok(buf.into_token_stream())
      342 ( 0.00%)      }
        .           
        .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
        .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
        .                   let mut buf = TokenStreamBuilder::default();
        .                   loop {
  610,146 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
        .                           return buf.into_token_stream();
        .                       }
        .           
1,271,060 ( 0.01%)              match self.parse_token_tree() {
2,287,908 ( 0.01%)                  Ok(tree) => buf.push(tree),
        .                           Err(mut e) => {
        .                               e.emit();
        .                               return buf.into_token_stream();
        .                           }
        .                       }
        .                   }
        .               }
        .           
2,370,618 ( 0.01%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
  526,804 ( 0.00%)          let sm = self.string_reader.sess.source_map();
        .           
2,167,174 ( 0.01%)          match self.token.kind {
        .                       token::Eof => {
        .                           let msg = "this file contains an unclosed delimiter";
        .                           let mut err =
        .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
        .                           for &(_, sp) in &self.open_braces {
        .                               err.span_label(sp, "unclosed delimiter");
        .                               self.unmatched_braces.push(UnmatchedBrace {
        .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
        .                                   err.span_label(
        .                                       *close_sp,
        .                                       "...as it matches this but it has different indentation",
        .                                   );
        .                               }
        .                           }
        .                           Err(err)
        .                       }
   50,861 ( 0.00%)              token::OpenDelim(delim) => {
        .                           // The span for beginning of the delimited section
   50,861 ( 0.00%)                  let pre_span = self.token.span;
        .           
        .                           // Parse the open delimiter.
  356,027 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
        .                           self.bump();
        .           
        .                           // Parse the token trees within the delimiters.
        .                           // We stop at any delimiter so we can try to recover if the user
        .                           // uses an incorrect delimiter.
   50,861 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
        .           
        .                           // Expand to cover the entire delimited token tree
  254,305 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
        .           
  101,722 ( 0.00%)                  match self.token.kind {
        .                               // Correct delimiter.
  101,722 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
        .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
  101,722 ( 0.00%)                          let close_brace_span = self.token.span;
        .           
  152,583 ( 0.00%)                          if tts.is_empty() {
    7,971 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
   10,628 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
        .                                           // Only track if the block is in the form of `{}`, otherwise it is
        .                                           // likely that it was written on purpose.
        .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
        .                                       }
        .                                   }
        .           
        .                                   //only add braces
  203,444 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
        .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
        .                                   }
        .           
   50,861 ( 0.00%)                          if self.open_braces.is_empty() {
        .                                       // Clear up these spans to avoid suggesting them as we've found
        .                                       // properly matched delimiters so far for an entire block.
        .                                       self.matching_delim_spans.clear();
        .                                   } else {
        .                                       self.matching_delim_spans.push((
        .                                           open_brace,
        .                                           open_brace_span,
        .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
        .                               token::Eof => {
        .                                   // Silently recover, the EOF token will be seen again
        .                                   // and an error emitted then. Thus we don't pop from
        .                                   // self.open_braces here.
        .                               }
        .                               _ => {}
        .                           }
        .           
  356,027 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
        .                       }
        .                       token::CloseDelim(delim) => {
        .                           // An unexpected closing delimiter (i.e., there is no
        .                           // matching opening delimiter).
        .                           let token_str = token_to_string(&self.token);
        .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
        .                           let mut err =
        .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
        .                                   err.span_label(parent.1, "...matches this closing brace");
        .                               }
        .                           }
        .           
        .                           err.span_label(self.token.span, "unexpected closing delimiter");
        .                           Err(err)
        .                       }
        .                       _ => {
1,062,705 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
        .                           let mut spacing = self.bump();
  425,082 ( 0.00%)                  if !self.token.is_op() {
        .                               spacing = Alone;
        .                           }
1,275,246 ( 0.01%)                  Ok((tt, spacing))
        .                       }
        .                   }
2,107,216 ( 0.01%)      }
        .           
        .               fn bump(&mut self) -> Spacing {
2,574,290 ( 0.01%)          let (spacing, token) = self.string_reader.next_token();
1,317,352 ( 0.01%)          self.token = token;
        .                   spacing
        .               }
        .           }
        .           
   50,861 ( 0.00%)  #[derive(Default)]
        .           struct TokenStreamBuilder {
        .               buf: Vec<TreeAndSpacing>,
        .           }
        .           
        .           impl TokenStreamBuilder {
3,424,226 ( 0.02%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
1,478,648 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
  111,946 ( 0.00%)              if let TokenTree::Token(token) = &tree {
  194,707 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
        .                               self.buf.pop();
   80,364 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
        .                               return;
        .                           }
        .                       }
        .                   }
1,283,525 ( 0.01%)          self.buf.push((tree, joint))
2,107,216 ( 0.01%)      }
        .           
        .               fn into_token_stream(self) -> TokenStream {
  508,952 ( 0.00%)          TokenStream::new(self.buf)
        .               }
        .           }

1,120,322 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
   12,280 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
    4,006 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
  219,104 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
   39,888 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
      927 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
   18,767 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    2,886 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
    8,739 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
    6,029 ( 0.00%)              self.current_id = parent_id;
   23,385 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
   10,724 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
   24,129 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
  164,295 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
   54,765 ( 0.00%)          if self.current_id.local_id.index() != 0 {
   10,056 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
   40,224 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    8,199 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
       12 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
   16,386 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
   16,386 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
  146,040 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      231 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       33 ( 0.00%)          self.tcx.hir_crate(())
      264 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
  260,556 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
   70,371 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
  195,417 ( 0.00%)      }
        .           
        .               #[inline]
  187,672 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
   49,503 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
   18,286 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
  211,131 ( 0.00%)      }
        .           
        .               #[inline]
      281 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
   15,696 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      562 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
   24,745 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
   45,955 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    5,944 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
        .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
        .                           ItemKind::Impl { .. } => DefKind::Impl,
        .                       },
        .                       Node::ForeignItem(item) => match item.kind {
        .                           ForeignItemKind::Fn(..) => DefKind::Fn,
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
       76 ( 0.00%)              Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
      861 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      970 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
    1,348 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
      388 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      776 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
       86 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
      315 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
      414 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
   13,072 ( 0.00%)          Some(def_kind)
   35,350 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
5,510,424 ( 0.03%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  688,803 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
1,354,428 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  677,214 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
2,031,642 ( 0.01%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
5,510,424 ( 0.03%)      }
        .           
    7,933 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
3,917,728 ( 0.02%)          self.find_parent_node(hir_id).unwrap()
   15,866 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
1,722,568 ( 0.01%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
  215,321 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
  126,526 ( 0.00%)              Some(owner.node.into())
        .                   } else {
  176,976 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   88,488 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  265,464 ( 0.00%)              Some(node.node)
        .                   }
1,722,568 ( 0.01%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
   40,532 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
  112,200 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
   62,486 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
   74,800 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
    5,300 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
    2,650 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
    5,300 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
  285,810 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   81,660 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
  326,640 ( 0.00%)      }
        .           
    6,916 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
    1,976 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
    7,904 ( 0.00%)      }
        .           
  171,913 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   49,118 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
  196,472 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
  343,630 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   98,180 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
  392,720 ( 0.00%)      }
        .           
    7,368 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    7,368 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    4,912 ( 0.00%)      }
        .           
    1,512 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
    1,512 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    1,512 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
  234,768 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
  176,076 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
  234,768 ( 0.00%)      }
        .           
   74,935 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
  117,275 ( 0.00%)          self.local_def_id(self.body_owner(id))
   74,935 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
   10,377 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
   34,144 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
   31,131 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
   27,117 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
   21,091 ( 0.00%)      }
        .           
      933 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    8,403 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
    2,802 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
    2,799 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
   53,814 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
  142,274 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
        .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
   53,814 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
   72,000 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
  108,000 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
        .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
    5,598 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    5,598 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
   11,196 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
   81,000 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
   10,605 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
       75 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
   14,775 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
   21,210 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
   13,500 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
      430 ( 0.00%)      pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
      236 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
        .                   }
      301 ( 0.00%)      }
        .           
    1,360 ( 0.00%)      pub fn ty_param_name(&self, id: HirId) -> Symbol {
      846 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
      108 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
      816 ( 0.00%)      }
        .           
    1,089 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
      121 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
    1,089 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       74 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
      665 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
      475 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
      168 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      855 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
   14,140 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
   21,530 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      160 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       23 ( 0.00%)          let krate = self.krate();
       83 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
   85,896 ( 0.00%)              match owner.node() {
   81,730 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
    2,583 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      160 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
    1,486 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
      861 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
       38 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
    2,494 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
      319 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
      348 ( 0.00%)          for id in module.items.iter() {
   66,870 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
      348 ( 0.00%)          for id in module.trait_items.iter() {
    1,520 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
      348 ( 0.00%)          for id in module.impl_items.iter() {
   33,579 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
      348 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
    2,552 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
      232 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
       87 ( 0.00%)              let items = self.tcx.hir_module_items(id);
      928 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
    2,567 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
   10,384 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
   53,229 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 752 ----------------------------------------
        .               /// ```
        .               /// fn foo(x: usize) -> bool {
        .               ///     loop {
        .               ///         true  // If `get_return_block` gets passed the `id` corresponding
        .               ///     }         // to this, it will return `None`.
        .               ///     false
        .               /// }
        .               /// ```
      243 ( 0.00%)      pub fn get_return_block(&self, id: HirId) -> Option<HirId> {
       27 ( 0.00%)          let mut iter = self.parent_iter(id).peekable();
        .                   let mut ignore_tail = false;
      108 ( 0.00%)          if let Some(node) = self.find(id) {
      108 ( 0.00%)              if let Node::Expr(Expr { kind: ExprKind::Ret(_), .. }) = node {
        .                           // When dealing with `return` statements, we don't care about climbing only tail
        .                           // expressions.
        .                           ignore_tail = true;
        .                       }
        .                   }
      352 ( 0.00%)          while let Some((hir_id, node)) = iter.next() {
    1,421 ( 0.00%)              if let (Some((_, next_node)), false) = (iter.peek(), ignore_tail) {
        9 ( 0.00%)                  match next_node {
        .                               Node::Block(Block { expr: None, .. }) => return None,
        .                               // The current node is not the tail expression of its parent.
        9 ( 0.00%)                      Node::Block(Block { expr: Some(e), .. }) if hir_id != e.hir_id => return None,
        .                               _ => {}
        .                           }
        .                       }
    1,525 ( 0.00%)              match node {
        .                           Node::Item(_)
        .                           | Node::ForeignItem(_)
        .                           | Node::TraitItem(_)
        .                           | Node::Expr(Expr { kind: ExprKind::Closure(..), .. })
        .                           | Node::ImplItem(_) => return Some(hir_id),
        .                           // Ignore `return`s on the first iteration
        .                           Node::Expr(Expr { kind: ExprKind::Loop(..) | ExprKind::Ret(..), .. })
        .                           | Node::Local(_) => {
        .                               return None;
        .                           }
        .                           _ => {}
        .                       }
        .                   }
        .                   None
      270 ( 0.00%)      }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
   16,198 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
  146,032 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
   32,396 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
   14,442 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    8,072 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 834 ----------------------------------------
        .                           }
        .                           _ => {}
        .                       }
        .                   }
        .                   None
        .               }
        .           
        .               /// Returns the nearest enclosing scope. A scope is roughly an item or block.
       16 ( 0.00%)      pub fn get_enclosing_scope(&self, hir_id: HirId) -> Option<HirId> {
        6 ( 0.00%)          for (hir_id, node) in self.parent_iter(hir_id) {
       12 ( 0.00%)              if let Node::Item(Item {
        .                           kind:
        .                               ItemKind::Fn(..)
        .                               | ItemKind::Const(..)
        .                               | ItemKind::Static(..)
        .                               | ItemKind::Mod(..)
        .                               | ItemKind::Enum(..)
        .                               | ItemKind::Struct(..)
        .                               | ItemKind::Union(..)
-- line 852 ----------------------------------------
-- line 858 ----------------------------------------
        .                       | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(..), .. })
        .                       | Node::Block(_) = node
        .                       {
        .                           return Some(hir_id);
        .                       }
        .                   }
        .                   None
       20 ( 0.00%)      }
        .           
        .               /// Returns the defining scope for an opaque type definition.
        .               pub fn get_defining_scope(&self, id: HirId) -> HirId {
        .                   let mut scope = id;
        .                   loop {
        .                       scope = self.get_enclosing_scope(scope).unwrap_or(CRATE_HIR_ID);
        .                       if scope == CRATE_HIR_ID || !matches!(self.get(scope), Node::Block(_)) {
        .                           return scope;
-- line 874 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
   64,463 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
   27,627 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   73,672 ( 0.00%)      }
        .           
   12,054 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
    5,166 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   13,776 ( 0.00%)      }
        .           
      532 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
      228 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
      608 ( 0.00%)      }
        .           
        .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Variant(variant)) => variant,
        .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
    6,696 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
    2,360 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
    2,040 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
      128 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
    3,720 ( 0.00%)      }
        .           
    5,696 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
    2,296 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
    4,272 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
8,645,203 ( 0.04%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
1,235,029 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
9,880,232 ( 0.05%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
   14,946 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
  246,498 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
   14,946 ( 0.00%)      }
        .           
  482,237 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  482,237 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
    6,344 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
    5,800 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
      314 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
      284 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
       30 ( 0.00%)                  _ => trait_item.span,
        .                       },
    6,786 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    6,752 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
       34 ( 0.00%)                  _ => impl_item.span,
        .                       },
      416 ( 0.00%)              Node::Variant(variant) => variant.span,
      532 ( 0.00%)              Node::Field(field) => field.span,
      483 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
    2,546 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  688,910 ( 0.00%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
    1,328 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    6,766 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
    1,992 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   29,937 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   19,145 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      532 ( 0.00%)          self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   12,054 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
       86 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
       95 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       19 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
      261 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
      174 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
      145 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
      464 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
      319 ( 0.00%)      return ModuleItems {
      116 ( 0.00%)          submodules: submodules.into_boxed_slice(),
      116 ( 0.00%)          items: items.into_boxed_slice(),
      116 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
      116 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
      116 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
    3,856 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
    7,430 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    4,458 ( 0.00%)              self.items.push(item.item_id());
    2,972 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
       28 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
    8,748 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
      112 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
      114 ( 0.00%)              self.trait_items.push(item.trait_item_id());
      114 ( 0.00%)              intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
    2,583 ( 0.00%)              self.impl_items.push(item.impl_item_id());
    2,583 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
      232 ( 0.00%)  }

2,423,544 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           #[derive(Debug)]
        .           pub struct Token {
        .               pub kind: TokenKind,
        .               pub len: usize,
        .           }
        .           
        .           impl Token {
        .               fn new(kind: TokenKind, len: usize) -> Token {
3,753,072 ( 0.02%)          Token { kind, len }
        .               }
        .           }
        .           
        .           /// Enum representing common lexeme types.
        .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
  387,720 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum TokenKind {
        .               // Multi-char tokens:
        .               /// "// comment"
        .               LineComment { doc_style: Option<DocStyle> },
        .               /// `/* block comment */`
        .               ///
        .               /// Block comments can be recursive, so the sequence like `/* /* */`
        .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
        .               /// Literal starts with "0x".
        .               Hexadecimal,
        .               /// Literal doesn't contain a prefix.
        .               Decimal,
        .           }
        .           
        .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
        .           /// but shebang isn't a part of rust syntax.
      266 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
        .               // Shebang must start with `#!` literally, without any preceding whitespace.
        .               // For simplicity we consider any line starting with `#!` a shebang,
        .               // regardless of restrictions put on shebangs by specific platforms.
        .               if let Some(input_tail) = input.strip_prefix("#!") {
        .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
        .                   // then it may be valid Rust code, so consider it Rust code.
        .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
        .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
        .                       )
        .                   });
        .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
        .                       // No other choice than to consider this a shebang.
        .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
        .                   }
        .               }
        .               None
      304 ( 0.00%)  }
        .           
        .           /// Parses the first token from the provided input string.
1,251,024 ( 0.01%)  pub fn first_token(input: &str) -> Token {
        .               debug_assert!(!input.is_empty());
  417,008 ( 0.00%)      Cursor::new(input).advance_token()
1,668,032 ( 0.01%)  }
        .           
        .           /// Creates an iterator that produces tokens from the input string.
        .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
        .               let mut cursor = Cursor::new(input);
        .               std::iter::from_fn(move || {
        .                   if cursor.is_eof() {
        .                       None
        .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
        .           /// for definitions of these classes.
        .           pub fn is_whitespace(c: char) -> bool {
        .               // This is Pattern_White_Space.
        .               //
        .               // Note that this set is stable (ie, it doesn't change with different
        .               // Unicode versions), so it's ok to just hard-code the values.
        .           
  989,368 ( 0.01%)      matches!(
        .                   c,
        .                   // Usual ASCII suspects
        .                   '\u{0009}'   // \t
        .                   | '\u{000A}' // \n
        .                   | '\u{000B}' // vertical tab
        .                   | '\u{000C}' // form feed
        .                   | '\u{000D}' // \r
        .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 269 ----------------------------------------
        .                   | '\u{2028}' // LINE SEPARATOR
        .                   | '\u{2029}' // PARAGRAPH SEPARATOR
        .               )
        .           }
        .           
        .           /// True if `c` is valid as a first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
      106 ( 0.00%)  pub fn is_id_start(c: char) -> bool {
        .               // This is XID_Start OR '_' (which formally is not a XID_Start).
  157,340 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
      106 ( 0.00%)  }
        .           
        .           /// True if `c` is valid as a non-first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_continue(c: char) -> bool {
        .               unicode_xid::UnicodeXID::is_xid_continue(c)
       12 ( 0.00%)  }
        .           
        .           /// The passed string is lexically an identifier.
       25 ( 0.00%)  pub fn is_ident(string: &str) -> bool {
        .               let mut chars = string.chars();
        .               if let Some(start) = chars.next() {
        .                   is_id_start(start) && chars.all(is_id_continue)
        .               } else {
        .                   false
        .               }
       35 ( 0.00%)  }
        .           
        .           impl Cursor<'_> {
        .               /// Parses a token from the input string.
3,336,064 ( 0.02%)      fn advance_token(&mut self) -> Token {
        .                   let first_char = self.bump().unwrap();
1,701,800 ( 0.01%)          let token_kind = match first_char {
        .                       // Slash, comment or block comment.
   12,114 ( 0.00%)              '/' => match self.first() {
        .                           '/' => self.line_comment(),
        .                           '*' => self.block_comment(),
        6 ( 0.00%)                  _ => Slash,
        .                       },
        .           
        .                       // Whitespace sequence.
        .                       c if is_whitespace(c) => self.whitespace(),
        .           
        .                       // Raw identifier, raw string literal or identifier.
    5,576 ( 0.00%)              'r' => match (self.first(), self.second()) {
        .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
        .                           ('#', _) | ('"', _) => {
    8,030 ( 0.00%)                      let (n_hashes, err) = self.raw_double_quoted_string(1);
        .                               let suffix_start = self.len_consumed();
      730 ( 0.00%)                      if err.is_none() {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = RawStr { n_hashes, err };
    5,110 ( 0.00%)                      Literal { kind, suffix_start }
        .                           }
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Byte literal, byte string literal, raw byte string literal or identifier.
    7,960 ( 0.00%)              'b' => match (self.first(), self.second()) {
        .                           ('\'', _) => {
        .                               self.bump();
    1,611 ( 0.00%)                      let terminated = self.single_quoted_string();
        .                               let suffix_start = self.len_consumed();
    1,074 ( 0.00%)                      if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = Byte { terminated };
    1,074 ( 0.00%)                      Literal { kind, suffix_start }
        .                           }
        .                           ('"', _) => {
        .                               self.bump();
       24 ( 0.00%)                      let terminated = self.double_quoted_string();
        .                               let suffix_start = self.len_consumed();
       16 ( 0.00%)                      if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = ByteStr { terminated };
       16 ( 0.00%)                      Literal { kind, suffix_start }
        .                           }
        .                           ('r', '"') | ('r', '#') => {
        .                               self.bump();
        .                               let (n_hashes, err) = self.raw_double_quoted_string(2);
        .                               let suffix_start = self.len_consumed();
        .                               if err.is_none() {
        .                                   self.eat_literal_suffix();
        .                               }
-- line 357 ----------------------------------------
-- line 361 ----------------------------------------
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Identifier (this should be checked after other variant that can
        .                       // start as identifier).
        .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
        .           
        .                       // Numeric literal.
  815,055 ( 0.00%)              c @ '0'..='9' => {
        .                           let literal_kind = self.number(c);
        .                           let suffix_start = self.len_consumed();
        .                           self.eat_literal_suffix();
   10,385 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
        .                       }
        .           
        .                       // One-symbol tokens.
    7,848 ( 0.00%)              ';' => Semi,
  137,306 ( 0.00%)              ',' => Comma,
   10,988 ( 0.00%)              '.' => Dot,
   85,944 ( 0.00%)              '(' => OpenParen,
   85,944 ( 0.00%)              ')' => CloseParen,
    5,534 ( 0.00%)              '{' => OpenBrace,
    5,534 ( 0.00%)              '}' => CloseBrace,
   10,244 ( 0.00%)              '[' => OpenBracket,
   10,244 ( 0.00%)              ']' => CloseBracket,
        4 ( 0.00%)              '@' => At,
      910 ( 0.00%)              '#' => Pound,
        .                       '~' => Tilde,
      302 ( 0.00%)              '?' => Question,
   22,358 ( 0.00%)              ':' => Colon,
      174 ( 0.00%)              '$' => Dollar,
    5,596 ( 0.00%)              '=' => Eq,
    3,744 ( 0.00%)              '!' => Bang,
    1,216 ( 0.00%)              '<' => Lt,
    3,912 ( 0.00%)              '>' => Gt,
    1,244 ( 0.00%)              '-' => Minus,
   11,416 ( 0.00%)              '&' => And,
      768 ( 0.00%)              '|' => Or,
      138 ( 0.00%)              '+' => Plus,
      262 ( 0.00%)              '*' => Star,
        .                       '^' => Caret,
        .                       '%' => Percent,
        .           
        .                       // Lifetime or character literal.
  178,353 ( 0.00%)              '\'' => self.lifetime_or_char(),
        .           
        .                       // String literal.
        .                       '"' => {
   13,026 ( 0.00%)                  let terminated = self.double_quoted_string();
        .                           let suffix_start = self.len_consumed();
    8,684 ( 0.00%)                  if terminated {
        .                               self.eat_literal_suffix();
        .                           }
        .                           let kind = Str { terminated };
    8,684 ( 0.00%)                  Literal { kind, suffix_start }
        .                       }
        .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
        .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
        .                       _ => Unknown,
        .                   };
        .                   Token::new(token_kind, self.len_consumed())
3,753,072 ( 0.02%)      }
        .           
        .               fn line_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '/');
        .                   self.bump();
        .           
    7,046 ( 0.00%)          let doc_style = match self.first() {
        .                       // `//!` is an inner line doc comment.
        .                       '!' => Some(DocStyle::Inner),
        .                       // `////` (more than 3 slashes) is not considered a doc comment.
    7,557 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
        .                       _ => None,
        .                   };
        .           
  139,431 ( 0.00%)          self.eat_while(|c| c != '\n');
    9,063 ( 0.00%)          LineComment { doc_style }
        .               }
        .           
        .               fn block_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '*');
        .                   self.bump();
        .           
       36 ( 0.00%)          let doc_style = match self.first() {
        .                       // `/*!` is an inner block doc comment.
        .                       '!' => Some(DocStyle::Inner),
        .                       // `/***` (more than 2 stars) is not considered a doc comment.
        .                       // `/**/` is not considered a doc comment.
        .                       '*' if !matches!(self.second(), '*' | '/') => Some(DocStyle::Outer),
        .                       _ => None,
        .                   };
        .           
        .                   let mut depth = 1usize;
   62,506 ( 0.00%)          while let Some(c) = self.bump() {
        .                       match c {
      140 ( 0.00%)                  '/' if self.first() == '*' => {
        .                               self.bump();
        .                               depth += 1;
        .                           }
      114 ( 0.00%)                  '*' if self.first() == '/' => {
        .                               self.bump();
       18 ( 0.00%)                      depth -= 1;
       18 ( 0.00%)                      if depth == 0 {
        .                                   // This block comment is closed, so for a construction like "/* */ */"
        .                                   // there will be a successfully parsed block comment "/* */"
        .                                   // and " */" will be processed separately.
        .                                   break;
        .                               }
        .                           }
        .                           _ => (),
        .                       }
        .                   }
        .           
       45 ( 0.00%)          BlockComment { doc_style, terminated: depth == 0 }
        .               }
        .           
        .               fn whitespace(&mut self) -> TokenKind {
        .                   debug_assert!(is_whitespace(self.prev()));
        .                   self.eat_while(is_whitespace);
  102,243 ( 0.00%)          Whitespace
        .               }
        .           
        .               fn raw_ident(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
        .                   // Eat "#" symbol.
        .                   self.bump();
        .                   // Eat the identifier part of RawIdent.
        .                   self.eat_identifier();
        .                   RawIdent
        .               }
        .           
  193,860 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   debug_assert!(is_id_start(self.prev()));
        .                   // Start is already eaten, eat the rest of identifier.
   77,544 ( 0.00%)          self.eat_while(is_id_continue);
        .                   // Known prefixes must have been handled earlier. So if
        .                   // we see a prefix here, it is definitely an unknown prefix.
   77,544 ( 0.00%)          match self.first() {
        .                       '#' | '"' | '\'' => UnknownPrefix,
   38,772 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
   38,772 ( 0.00%)              _ => Ident,
        .                   }
  155,088 ( 0.00%)      }
        .           
        .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   // Start is already eaten, eat the rest of identifier.
        .                   self.eat_while(|c| {
        .                       unicode_xid::UnicodeXID::is_xid_continue(c)
        .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
        .                           || c == '\u{200d}'
        .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
        .                       '#' | '"' | '\'' => UnknownPrefix,
        .                       _ => InvalidIdent,
        .                   }
        .               }
        .           
        .               fn number(&mut self, first_digit: char) -> LiteralKind {
        .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
        .                   let mut base = Base::Decimal;
    4,154 ( 0.00%)          if first_digit == '0' {
        .                       // Attempt to parse encoding base.
    2,369 ( 0.00%)              let has_digits = match self.first() {
        .                           'b' => {
        .                               base = Base::Binary;
        .                               self.bump();
       15 ( 0.00%)                      self.eat_decimal_digits()
        .                           }
        .                           'o' => {
        .                               base = Base::Octal;
        .                               self.bump();
        .                               self.eat_decimal_digits()
        .                           }
        .                           'x' => {
        .                               base = Base::Hexadecimal;
        .                               self.bump();
        .                               self.eat_hexadecimal_digits()
        .                           }
        .                           // Not a base prefix.
    1,275 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
        .                               self.eat_decimal_digits();
        .                               true
        .                           }
        .                           // Just a 0.
        .                           _ => return Int { base, empty_int: false },
        .                       };
        .                       // Base prefix was provided, but there were no digits
        .                       // after it, e.g. "0x".
        6 ( 0.00%)              if !has_digits {
        .                           return Int { base, empty_int: true };
        .                       }
        .                   } else {
        .                       // No base prefix, parse number in the usual way.
        .                       self.eat_decimal_digits();
        .                   };
        .           
    8,998 ( 0.00%)          match self.first() {
        .                       // Don't be greedy if this is actually an
        .                       // integer literal followed by field/method access or a range pattern
        .                       // (`0..2` and `12.foo()`)
    1,222 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
        .                           // might have stuff after the ., and if it does, it needs to start
        .                           // with a number
        .                           self.bump();
        .                           let mut empty_exponent = false;
        .                           if self.first().is_digit(10) {
        .                               self.eat_decimal_digits();
        .                               match self.first() {
        .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
        .                           self.bump();
        .                           let empty_exponent = !self.eat_float_exponent();
        .                           Float { base, empty_exponent }
        .                       }
        .                       _ => Int { base, empty_int: false },
        .                   }
        .               }
        .           
  416,157 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '\'');
        .           
  118,902 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
        .                       // It's surely not a lifetime.
        .                       false
        .                   } else {
        .                       // If the first symbol is valid for identifier, it can be a lifetime.
        .                       // Also check if it's a number for a better error reporting (so '0 will
        .                       // be reported as invalid lifetime and not as unterminated char literal).
        .                       is_id_start(self.first()) || self.first().is_digit(10)
        .                   };
        .           
   11,416 ( 0.00%)          if !can_be_a_lifetime {
  176,004 ( 0.00%)              let terminated = self.single_quoted_string();
        .                       let suffix_start = self.len_consumed();
  117,336 ( 0.00%)              if terminated {
        .                           self.eat_literal_suffix();
        .                       }
        .                       let kind = Char { terminated };
  234,672 ( 0.00%)              return Literal { kind, suffix_start };
        .                   }
        .           
        .                   // Either a lifetime or a character literal with
        .                   // length greater than 1.
        .           
        .                   let starts_with_number = self.first().is_digit(10);
        .           
        .                   // Skip the literal contents.
        .                   // First symbol can be a number (which isn't a valid identifier start),
        .                   // so skip it without any checks.
        .                   self.bump();
    1,566 ( 0.00%)          self.eat_while(is_id_continue);
        .           
        .                   // Check if after skipping literal contents we've met a closing
        .                   // single quote (which means that user attempted to create a
        .                   // string with single quotes).
    1,566 ( 0.00%)          if self.first() == '\'' {
        .                       self.bump();
        .                       let kind = Char { terminated: true };
        .                       Literal { kind, suffix_start: self.len_consumed() }
        .                   } else {
    1,566 ( 0.00%)              Lifetime { starts_with_number }
        .                   }
  356,706 ( 0.00%)      }
        .           
        .               fn single_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '\'');
        .                   // Check if it's a one-symbol literal.
  213,872 ( 0.00%)          if self.second() == '\'' && self.first() != '\\' {
        .                       self.bump();
        .                       self.bump();
        .                       return true;
        .                   }
        .           
        .                   // Literal has more than one symbol.
        .           
        .                   // Parse until either quotes are terminated or error is detected.
        .                   loop {
  541,436 ( 0.00%)              match self.first() {
        .                           // Quotes are terminated, finish parsing.
        .                           '\'' => {
        .                               self.bump();
        .                               return true;
        .                           }
        .                           // Probably beginning of the comment, which we don't want to include
        .                           // to the error report.
        .                           '/' => break,
-- line 660 ----------------------------------------
-- line 670 ----------------------------------------
        .                           // Skip the character.
        .                           _ => {
        .                               self.bump();
        .                           }
        .                       }
        .                   }
        .                   // String was not terminated.
        .                   false
   59,205 ( 0.00%)      }
        .           
        .               /// Eats double-quoted string and returns true
        .               /// if string is terminated.
        .               fn double_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '"');
        .                   while let Some(c) = self.bump() {
  164,040 ( 0.00%)              match c {
        .                           '"' => {
        .                               return true;
        .                           }
      288 ( 0.00%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
        .                               // Bump again to skip escaped character.
        .                               self.bump();
        .                           }
        .                           _ => (),
        .                       }
        .                   }
        .                   // End of file reached.
        .                   false
    4,350 ( 0.00%)      }
        .           
        .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
    5,110 ( 0.00%)      fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
        .                   // Wrap the actual function to handle the error with too many hashes.
        .                   // This way, it eats the whole raw string.
        .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
        .                   // Only up to 65535 `#`s are allowed in raw strings
      730 ( 0.00%)          match u16::try_from(n_hashes) {
    5,110 ( 0.00%)              Ok(num) => (num, err),
        .                       // We lie about the number of hashes here :P
        .                       Err(_) => (0, Some(RawStrError::TooManyDelimiters { found: n_hashes })),
        .                   }
    5,840 ( 0.00%)      }
        .           
        .               fn raw_string_unvalidated(&mut self, prefix_len: usize) -> (usize, Option<RawStrError>) {
        .                   debug_assert!(self.prev() == 'r');
        .                   let start_pos = self.len_consumed();
        .                   let mut possible_terminator_offset = None;
        .                   let mut max_hashes = 0;
        .           
        .                   // Count opening '#' symbols.
        .                   let mut eaten = 0;
    1,464 ( 0.00%)          while self.first() == '#' {
        6 ( 0.00%)              eaten += 1;
        .                       self.bump();
        .                   }
        .                   let n_start_hashes = eaten;
        .           
        .                   // Check that string is started.
    2,920 ( 0.00%)          match self.bump() {
        .                       Some('"') => (),
        .                       c => {
        .                           let c = c.unwrap_or(EOF_CHAR);
        .                           return (n_start_hashes, Some(RawStrError::InvalidStarter { bad_char: c }));
        .                       }
        .                   }
        .           
        .                   // Skip the string contents and on each '#' character met, check if this is
        .                   // a raw string termination.
        .                   loop {
    6,407 ( 0.00%)              self.eat_while(|c| c != '"');
        .           
      730 ( 0.00%)              if self.is_eof() {
        .                           return (
        .                               n_start_hashes,
        .                               Some(RawStrError::NoTerminator {
        .                                   expected: n_start_hashes,
        .                                   found: max_hashes,
        .                                   possible_terminator_offset,
        .                               }),
        .                           );
-- line 749 ----------------------------------------
-- line 753 ----------------------------------------
        .                       self.bump();
        .           
        .                       // Check that amount of closing '#' symbols
        .                       // is equal to the amount of opening ones.
        .                       // Note that this will not consume extra trailing `#` characters:
        .                       // `r###"abcde"####` is lexed as a `RawStr { n_hashes: 3 }`
        .                       // followed by a `#` token.
        .                       let mut n_end_hashes = 0;
    2,928 ( 0.00%)              while self.first() == '#' && n_end_hashes < n_start_hashes {
        4 ( 0.00%)                  n_end_hashes += 1;
        .                           self.bump();
        .                       }
        .           
    1,460 ( 0.00%)              if n_end_hashes == n_start_hashes {
        .                           return (n_start_hashes, None);
        .                       } else if n_end_hashes > max_hashes {
        .                           // Keep track of possible terminators to give a hint about
        .                           // where there might be a missing terminator
        .                           possible_terminator_offset =
        .                               Some(self.len_consumed() - start_pos - n_end_hashes + prefix_len);
        .                           max_hashes = n_end_hashes;
        .                       }
        .                   }
        .               }
        .           
        .               fn eat_decimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
    4,070 ( 0.00%)              match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
    6,099 ( 0.00%)                  '0'..='9' => {
        .                               has_digits = true;
        .                               self.bump();
        .                           }
        .                           _ => break,
        .                       }
        .                   }
        .                   has_digits
    3,608 ( 0.00%)      }
        .           
        .               fn eat_hexadecimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
      598 ( 0.00%)              match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
    1,578 ( 0.00%)                  '0'..='9' | 'a'..='f' | 'A'..='F' => {
        .                               has_digits = true;
        .                               self.bump();
        .                           }
        .                           _ => break,
        .                       }
        .                   }
        .                   has_digits
      206 ( 0.00%)      }
        .           
        .               /// Eats the float exponent. Returns true if at least one digit was met,
        .               /// and returns false otherwise.
        .               fn eat_float_exponent(&mut self) -> bool {
        .                   debug_assert!(self.prev() == 'e' || self.prev() == 'E');
        .                   if self.first() == '-' || self.first() == '+' {
        .                       self.bump();
        .                   }
        .                   self.eat_decimal_digits()
        .               }
        .           
        .               // Eats the suffix of the literal, e.g. "_u8".
        .               fn eat_literal_suffix(&mut self) {
  132,724 ( 0.00%)          self.eat_identifier();
        .               }
        .           
        .               // Eats the identifier.
  199,086 ( 0.00%)      fn eat_identifier(&mut self) {
        .                   if !is_id_start(self.first()) {
        .                       return;
        .                   }
        .                   self.bump();
        .           
        5 ( 0.00%)          self.eat_while(is_id_continue);
  265,444 ( 0.00%)      }
        .           }

5,907,732 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           use rustc_target::spec::abi;
         .           use std::borrow::Cow;
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        16 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
    31,440 ( 0.00%)      pub ty: Ty<'tcx>,
   157,200 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    82,708 ( 0.00%)      pub scope: DefId,
   149,283 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   918,523 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        87 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    45,400 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       890 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     1,633 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   202,625 ( 0.00%)      pub var: BoundVar,
   170,567 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
40,055,347 ( 0.20%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
   465,665 ( 0.00%)  #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
         .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 2,878,906 ( 0.01%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
   278,721 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 4,934,990 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    54,415 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
     5,149 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
        63 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
       126 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       252 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
       126 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     3,423 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    19,298 ( 0.00%)              [
     5,563 ( 0.00%)                  ref parent_substs @ ..,
     6,014 ( 0.00%)                  closure_kind_ty,
     2,226 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     4,832 ( 0.00%)                  tupled_upvars_ty,
    13,692 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
    10,269 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
         .               pub fn is_valid(self) -> bool {
         .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 383 ----------------------------------------
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
     2,454 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     2,708 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
     1,400 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
     1,636 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    17,271 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
     1,083 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     2,166 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         2 ( 0.00%)      pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         4 ( 0.00%)      }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        23 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
       168 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        46 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
     1,154 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     2,308 ( 0.00%)          match ty.kind() {
     4,616 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     3,462 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       172 ( 0.00%)          let tupled_tys = match self {
       235 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       384 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       321 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       298 ( 0.00%)          match self {
       337 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
    39,784 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    43,887 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
        38 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
       190 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
       232 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
       228 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     5,202 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     2,890 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
         .                           let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     4,624 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
       597 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     4,152 ( 0.00%)          self[0]
     2,361 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
     2,388 ( 0.00%)              })
         .                       .transpose()
     1,791 ( 0.00%)      }
         .           
       586 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
     1,172 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
         .                       predicate
       304 ( 0.00%)                  .map_bound(|pred| match pred {
         .                               ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
-- line 874 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    29,405 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 2,025,645 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
     3,899 ( 0.00%)      pub def_id: DefId,
 1,911,255 ( 0.01%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
     3,464 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    13,856 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
       693 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       308 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
       462 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
       616 ( 0.00%)      }
         .           
         .               #[inline]
         9 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         6 ( 0.00%)      }
         .           
    14,296 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
     1,787 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    19,657 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
     7,068 ( 0.00%)          self.skip_binder().def_id
     2,356 ( 0.00%)      }
         .           
     5,098 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    10,196 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
     5,098 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       124 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    22,197 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     3,048 ( 0.00%)      pub def_id: DefId,
    26,659 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
       584 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
       584 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
         4 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
         2 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
        10 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
     1,323 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
     1,875 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
     1,764 ( 0.00%)      }
         .           }
         .           
   121,049 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       195 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    58,130 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 1,172,877 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
    68,665 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   458,091 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   988,900 ( 0.01%)          Binder(value, ty::List::empty())
    68,328 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    46,595 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 2,387,340 ( 0.01%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     4,309 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     5,584 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
       504 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
    61,263 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
 1,653,284 ( 0.01%)          Binder(value, self.1)
       504 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
    11,813 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    23,350 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   356,323 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     1,015 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
     1,675 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    84,274 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
    53,528 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    63,918 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
    26,579 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     7,594 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    30,376 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    10,360 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     4,440 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
     7,400 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
    13,320 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
    33,651 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     3,739 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     3,739 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    41,129 ( 0.00%)      }
         .           
     7,716 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    23,148 ( 0.00%)          self.substs.type_at(0)
    15,432 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   155,947 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    97,419 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
     8,605 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    77,557 ( 0.00%)      pub c_variadic: bool,
    13,747 ( 0.00%)      pub unsafety: hir::Unsafety,
    82,100 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    70,593 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   313,929 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   141,186 ( 0.00%)      }
         .           
    38,292 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   311,190 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    76,584 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    18,805 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    22,890 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       996 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    16,225 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     1,982 ( 0.00%)          self.skip_binder().c_variadic
       991 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
    10,116 ( 0.00%)          self.skip_binder().unsafety
     5,058 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
   127,896 ( 0.00%)          self.skip_binder().abi
    31,974 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
        76 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
     1,482 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamTy {
     2,068 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
       144 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
        72 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        72 ( 0.00%)          ParamTy::new(def.index, def.name)
        36 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        14 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamConst {
       202 ( 0.00%)      pub index: u32,
       202 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
14,644,065 ( 0.07%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
     2,934 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   340,294 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    27,218 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
    31,250 ( 0.00%)      pub def_id: DefId,
    37,851 ( 0.00%)      pub index: u32,
    71,865 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     4,277 ( 0.00%)      pub index: u32,
     1,048 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
     5,149 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
    87,668 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
    10,058 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   340,086 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   697,439 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
    30,332 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     8,382 ( 0.00%)          match self.kind() {
     2,229 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
   443,494 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   455,689 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   144,404 ( 0.00%)          match self.kind() {
    11,834 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       189 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
        12 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
         .                   *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
       263 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       251 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
     7,034 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    14,068 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
     7,034 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
        58 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
         .                   matches!(
         .                       self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
    22,998 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
        48 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   420,848 ( 0.00%)          match self.kind() {
    22,541 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
     3,234 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
     3,234 ( 0.00%)          match self.kind() {
     8,085 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
     3,234 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
     2,868 ( 0.00%)          matches!(
     6,669 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
     6,425 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
     1,408 ( 0.00%)          matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
     4,800 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    25,231 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     5,438 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
    10,137 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    16,764 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
     5,736 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
     2,322 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     2,700 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
   199,405 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
 1,270,393 ( 0.01%)          match self.kind() {
     3,828 ( 0.00%)              Adt(def, _) if def.is_box() => {
     3,116 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
   234,598 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
     6,324 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
   398,810 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
     1,636 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
       193 ( 0.00%)      }
         .           
   358,800 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
   179,400 ( 0.00%)          match self.kind() {
   134,460 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
       150 ( 0.00%)              FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
   403,650 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
    28,875 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
   168,777 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
     1,013 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
    67,172 ( 0.00%)          match self.kind() {
    35,089 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     2,026 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
       110 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       220 ( 0.00%)          match self.kind() {
       220 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       220 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
    28,530 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
    35,337 ( 0.00%)          match self.kind() {
    13,074 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
     6,537 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
    22,824 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
    38,090 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    19,045 ( 0.00%)          match self.kind() {
    30,472 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
    30,472 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
       558 ( 0.00%)      pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
       558 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
       310 ( 0.00%)          match tail.kind() {
         .                       // Sized types
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
         .                       | ty::Foreign(..)
         .                       // If returned by `struct_tail_without_normalization` this is a unit struct
         .                       // without any fields, or not a struct, and therefore is Sized.
         .                       | ty::Adt(..)
         .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
         .                       // a.k.a. unit type, which is Sized
         .                       | ty::Tuple(..) => tcx.types.unit,
         .           
       124 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
         .                       ty::Dynamic(..) => {
         .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
         .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
         .                       },
         .           
         .                       ty::Projection(_)
         .                       | ty::Param(_)
         .                       | ty::Opaque(..)
         .                       | ty::Infer(ty::TyVar(_))
         .                       | ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
         .                       }
         .                   }
       496 ( 0.00%)      }
         .           
         .               /// When we create a closure, we record its kind (i.e., what trait
         .               /// it implements) into its `ClosureSubsts` using a type
         .               /// parameter. This is kind of a phantom type, except that the
         .               /// most convenient thing for us to are the integral types. This
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     3,032 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     6,064 ( 0.00%)          match self.kind() {
     5,980 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     3,032 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
 3,396,942 ( 0.02%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
 2,264,628 ( 0.01%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
   460,989 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    54,891 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
 3,396,942 ( 0.02%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
       153 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
   209,072 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   313,608 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
   104,536 ( 0.00%)      }
         .           }

53,658,420 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs
--------------------------------------------------------------------------------
Ir                 

-- line 41 ----------------------------------------
        .               fn from(val: ScalarMaybeUninit<Tag>) -> Self {
        .                   Immediate::Scalar(val)
        .               }
        .           }
        .           
        .           impl<Tag: Provenance> From<Scalar<Tag>> for Immediate<Tag> {
        .               #[inline(always)]
        .               fn from(val: Scalar<Tag>) -> Self {
       97 ( 0.00%)          Immediate::Scalar(val.into())
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> Immediate<Tag> {
        .               pub fn from_pointer(p: Pointer<Tag>, cx: &impl HasDataLayout) -> Self {
        .                   Immediate::Scalar(ScalarMaybeUninit::from_pointer(p, cx))
        .               }
        .           
        .               pub fn from_maybe_pointer(p: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
        .                   Immediate::Scalar(ScalarMaybeUninit::from_maybe_pointer(p, cx))
        .               }
        .           
    5,208 ( 0.00%)      pub fn new_slice(val: Scalar<Tag>, len: u64, cx: &impl HasDataLayout) -> Self {
   58,712 ( 0.00%)          Immediate::ScalarPair(val.into(), Scalar::from_machine_usize(len, cx).into())
    7,812 ( 0.00%)      }
        .           
        .               pub fn new_dyn_trait(
        .                   val: Scalar<Tag>,
        .                   vtable: Pointer<Option<Tag>>,
        .                   cx: &impl HasDataLayout,
        .               ) -> Self {
        .                   Immediate::ScalarPair(val.into(), ScalarMaybeUninit::from_maybe_pointer(vtable, cx))
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar_or_uninit(self) -> ScalarMaybeUninit<Tag> {
  453,264 ( 0.00%)          match self {
  889,500 ( 0.00%)              Immediate::Scalar(val) => val,
        .                       Immediate::ScalarPair(..) => bug!("Got a scalar pair where a scalar was expected"),
        .                   }
        .               }
        .           
        .               #[inline]
       28 ( 0.00%)      pub fn to_scalar(self) -> InterpResult<'tcx, Scalar<Tag>> {
        .                   self.to_scalar_or_uninit().check_init()
       42 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_scalar_pair(self) -> InterpResult<'tcx, (Scalar<Tag>, Scalar<Tag>)> {
        .                   match self {
        .                       Immediate::ScalarPair(val1, val2) => Ok((val1.check_init()?, val2.check_init()?)),
        .                       Immediate::Scalar(..) => {
        .                           bug!("Got a scalar where a scalar pair was expected")
        .                       }
-- line 93 ----------------------------------------
-- line 159 ----------------------------------------
        .               fn deref(&self) -> &Immediate<Tag> {
        .                   &self.imm
        .               }
        .           }
        .           
        .           /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,
        .           /// or still in memory. The latter is an optimization, to delay reading that chunk of
        .           /// memory and to avoid having to store arbitrary-sized data here.
    2,316 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, HashStable, Hash, Debug)]
        .           pub enum Operand<Tag: Provenance = AllocId> {
        .               Immediate(Immediate<Tag>),
        .               Indirect(MemPlace<Tag>),
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
        .           pub struct OpTy<'tcx, Tag: Provenance = AllocId> {
        .               op: Operand<Tag>, // Keep this private; it helps enforce invariants.
-- line 175 ----------------------------------------
-- line 185 ----------------------------------------
        .               fn deref(&self) -> &Operand<Tag> {
        .                   &self.op
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
   91,303 ( 0.00%)          OpTy { op: Operand::Indirect(*mplace), layout: mplace.layout }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: &MPlaceTy<'tcx, Tag>) -> Self {
        .                   OpTy { op: Operand::Indirect(**mplace), layout: mplace.layout }
        .               }
-- line 201 ----------------------------------------
-- line 206 ----------------------------------------
        .               fn from(val: ImmTy<'tcx, Tag>) -> Self {
        .                   OpTy { op: Operand::Immediate(val.imm), layout: val.layout }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> ImmTy<'tcx, Tag> {
        .               #[inline]
        .               pub fn from_scalar(val: Scalar<Tag>, layout: TyAndLayout<'tcx>) -> Self {
    1,982 ( 0.00%)          ImmTy { imm: val.into(), layout }
        .               }
        .           
        .               #[inline]
        .               pub fn from_immediate(imm: Immediate<Tag>, layout: TyAndLayout<'tcx>) -> Self {
        .                   ImmTy { imm, layout }
        .               }
        .           
        .               #[inline]
        .               pub fn try_from_uint(i: impl Into<u128>, layout: TyAndLayout<'tcx>) -> Option<Self> {
        .                   Some(Self::from_scalar(Scalar::try_from_uint(i, layout.size)?, layout))
        .               }
        .               #[inline]
      196 ( 0.00%)      pub fn from_uint(i: impl Into<u128>, layout: TyAndLayout<'tcx>) -> Self {
      167 ( 0.00%)          Self::from_scalar(Scalar::from_uint(i, layout.size), layout)
      196 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn try_from_int(i: impl Into<i128>, layout: TyAndLayout<'tcx>) -> Option<Self> {
        .                   Some(Self::from_scalar(Scalar::try_from_int(i, layout.size)?, layout))
        .               }
        .           
        .               #[inline]
        .               pub fn from_int(i: impl Into<i128>, layout: TyAndLayout<'tcx>) -> Self {
-- line 237 ----------------------------------------
-- line 248 ----------------------------------------
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
        .               /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.
        .               /// Returns `None` if the layout does not permit loading this as a value.
        .               fn try_read_immediate_from_mplace(
        .                   &self,
        .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<ImmTy<'tcx, M::PointerTag>>> {
  285,178 ( 0.00%)          if mplace.layout.is_unsized() {
        .                       // Don't touch unsized
        .                       return Ok(None);
        .                   }
        .           
  827,610 ( 0.00%)          let alloc = match self.get_alloc(mplace)? {
1,379,035 ( 0.01%)              Some(ptr) => ptr,
        .                       None => {
        .                           return Ok(Some(ImmTy {
        .                               // zero-sized type
      567 ( 0.00%)                      imm: Scalar::ZST.into(),
        .                               layout: mplace.layout,
        .                           }));
        .                       }
        .                   };
        .           
2,113,388 ( 0.01%)          match mplace.layout.abi {
        .                       Abi::Scalar(..) => {
  224,682 ( 0.00%)                  let scalar = alloc.read_scalar(alloc_range(Size::ZERO, mplace.layout.size))?;
        .                           Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))
        .                       }
  139,602 ( 0.00%)              Abi::ScalarPair(a, b) => {
        .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
        .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
        .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
        .                           let (a, b) = (a.value, b.value);
        .                           let (a_size, b_size) = (a.size(self), b.size(self));
        .                           let b_offset = a_size.align_to(b.align(self).abi);
   93,068 ( 0.00%)                  assert!(b_offset.bytes() > 0); // we later use the offset to tell apart the fields
        .                           let a_val = alloc.read_scalar(alloc_range(Size::ZERO, a_size))?;
  139,602 ( 0.00%)                  let b_val = alloc.read_scalar(alloc_range(b_offset, b_size))?;
  232,670 ( 0.00%)                  Ok(Some(ImmTy { imm: Immediate::ScalarPair(a_val, b_val), layout: mplace.layout }))
        .                       }
        .                       _ => Ok(None),
        .                   }
        .               }
        .           
        .               /// Try returning an immediate for the operand.
        .               /// If the layout does not permit loading this as an immediate, return where in memory
        .               /// we can find the data.
        .               /// Note that for a given layout, this operation will either always fail or always
        .               /// succeed!  Whether it succeeds depends on whether the layout can be represented
        .               /// in an `Immediate`, not on which data is stored there currently.
3,199,338 ( 0.02%)      pub fn try_read_immediate(
        .                   &self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Result<ImmTy<'tcx, M::PointerTag>, MPlaceTy<'tcx, M::PointerTag>>> {
6,398,676 ( 0.03%)          Ok(match src.try_as_mplace() {
        .                       Ok(ref mplace) => {
  551,740 ( 0.00%)                  if let Some(val) = self.try_read_immediate_from_mplace(mplace)? {
        .                               Ok(val)
        .                           } else {
        .                               Err(*mplace)
        .                           }
        .                       }
  796,120 ( 0.00%)              Err(val) => Ok(val),
        .                   })
3,199,338 ( 0.02%)      }
        .           
        .               /// Read an immediate from a place, asserting that that is possible with the given layout.
        .               #[inline(always)]
        .               pub fn read_immediate(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {
  816,409 ( 0.00%)          if let Ok(imm) = self.try_read_immediate(op)? {
2,000,565 ( 0.01%)              Ok(imm)
        .                   } else {
        .                       span_bug!(self.cur_span(), "primitive read failed for type: {:?}", op.layout.ty);
        .                   }
        .               }
        .           
        .               /// Read a scalar from a place
2,446,125 ( 0.01%)      pub fn read_scalar(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {
  222,375 ( 0.00%)          Ok(self.read_immediate(op)?.to_scalar_or_uninit())
2,001,375 ( 0.01%)      }
        .           
        .               /// Read a pointer from a place.
        .               pub fn read_pointer(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Pointer<Option<M::PointerTag>>> {
        .                   Ok(self.scalar_to_ptr(self.read_scalar(op)?.check_init()?))
        .               }
-- line 342 ----------------------------------------
-- line 345 ----------------------------------------
        .               pub fn read_str(&self, mplace: &MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, &str> {
        .                   let len = mplace.len(self)?;
        .                   let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len))?;
        .                   let str = std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;
        .                   Ok(str)
        .               }
        .           
        .               /// Projection functions
2,288,610 ( 0.01%)      pub fn operand_field(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let base = match op.try_as_mplace() {
        .                       Ok(ref mplace) => {
        .                           // We can reuse the mplace field computation logic for indirect operands.
        .                           let field = self.mplace_field(mplace, field)?;
2,514,259 ( 0.01%)                  return Ok(field.into());
        .                       }
    2,044 ( 0.00%)              Err(value) => value,
        .                   };
        .           
    1,460 ( 0.00%)          let field_layout = op.layout.field(self, field);
        .                   if field_layout.is_zst() {
        .                       let immediate = Scalar::ZST.into();
        .                       return Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout });
        .                   }
      876 ( 0.00%)          let offset = op.layout.fields.offset(field);
      272 ( 0.00%)          let immediate = match *base {
        .                       // the field covers the entire type
    2,844 ( 0.00%)              _ if offset.bytes() == 0 && field_layout.size == op.layout.size => *base,
        .                       // extract fields from types with `ScalarPair` ABI
        .                       Immediate::ScalarPair(a, b) => {
      136 ( 0.00%)                  let val = if offset.bytes() == 0 { a } else { b };
        .                           Immediate::from(val)
        .                       }
        .                       Immediate::Scalar(val) => span_bug!(
        .                           self.cur_span(),
        .                           "field access on non aggregate {:#?}, {:#?}",
        .                           val,
        .                           op.layout
        .                       ),
        .                   };
    4,088 ( 0.00%)          Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout })
2,059,749 ( 0.01%)      }
        .           
        .               pub fn operand_index(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   index: u64,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   if let Ok(index) = usize::try_from(index) {
        .                       // We can just treat this as a field.
-- line 397 ----------------------------------------
-- line 398 ----------------------------------------
        .                       self.operand_field(op, index)
        .                   } else {
        .                       // Indexing into a big array. This must be an mplace.
        .                       let mplace = op.assert_mem_place();
        .                       Ok(self.mplace_index(&mplace, index)?.into())
        .                   }
        .               }
        .           
    2,629 ( 0.00%)      pub fn operand_downcast(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   variant: VariantIdx,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Downcasts only change the layout
    4,063 ( 0.00%)          Ok(match op.try_as_mplace() {
    1,610 ( 0.00%)              Ok(ref mplace) => self.mplace_downcast(mplace, variant)?.into(),
        .                       Err(..) => {
      234 ( 0.00%)                  let layout = op.layout.for_variant(self, variant);
    1,092 ( 0.00%)                  OpTy { layout, ..*op }
        .                       }
        .                   })
    2,151 ( 0.00%)      }
        .           
    1,720 ( 0.00%)      pub fn operand_projection(
        .                   &self,
        .                   base: &OpTy<'tcx, M::PointerTag>,
        .                   proj_elem: mir::PlaceElem<'tcx>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::ProjectionElem::*;
    6,803 ( 0.00%)          Ok(match proj_elem {
      927 ( 0.00%)              Field(field, _) => self.operand_field(base, field.index())?,
      327 ( 0.00%)              Downcast(_, variant) => self.operand_downcast(base, variant)?,
        8 ( 0.00%)              Deref => self.deref_operand(base)?.into(),
        .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
        .                           // The rest should only occur as mplace, we do not use Immediates for types
        .                           // allowing such operations.  This matches place_projection forcing an allocation.
        .                           let mplace = base.assert_mem_place();
       32 ( 0.00%)                  self.mplace_projection(&mplace, proj_elem)?.into()
        .                       }
        .                   })
    1,720 ( 0.00%)      }
        .           
        .               /// Converts a repr(simd) operand into an operand where `place_index` accesses the SIMD elements.
        .               /// Also returns the number of elements.
        .               pub fn operand_to_simd(
        .                   &self,
        .                   base: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
        .                   // Basically we just transmute this place into an array following simd_size_and_type.
-- line 446 ----------------------------------------
-- line 449 ----------------------------------------
        .                   self.mplace_to_simd(&base.assert_mem_place())
        .               }
        .           
        .               /// Read from a local. Will not actually access the local if reading from a ZST.
        .               /// Will not access memory, instead an indirect `Operand` is returned.
        .               ///
        .               /// This is public because it is used by [priroda](https://github.com/oli-obk/priroda) to get an
        .               /// OpTy from a local
  574,956 ( 0.00%)      pub fn access_local(
        .                   &self,
        .                   frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,
        .                   local: mir::Local,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let layout = self.layout_of_local(frame, local, layout)?;
    6,344 ( 0.00%)          let op = if layout.is_zst() {
        .                       // Do not read from ZST, they might not be initialized
      415 ( 0.00%)              Operand::Immediate(Scalar::ZST.into())
        .                   } else {
   49,005 ( 0.00%)              M::access_local(&self, frame, local)?
        .                   };
  605,774 ( 0.00%)          Ok(OpTy { op, layout })
  483,717 ( 0.00%)      }
        .           
        .               /// Every place can be read from, so we can turn them into an operand.
        .               /// This will definitely return `Indirect` if the place is a `Ptr`, i.e., this
        .               /// will never actually read from memory.
        .               #[inline(always)]
        .               pub fn place_to_op(
        .                   &self,
        .                   place: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
    7,816 ( 0.00%)          let op = match **place {
       14 ( 0.00%)              Place::Ptr(mplace) => Operand::Indirect(mplace),
        .                       Place::Local { frame, local } => {
   35,154 ( 0.00%)                  *self.access_local(&self.stack()[frame], local, None)?
        .                       }
        .                   };
   26,558 ( 0.00%)          Ok(OpTy { op, layout: place.layout })
        .               }
        .           
        .               // Evaluate a place with the goal of reading from it.  This lets us sometimes
        .               // avoid allocations.
  424,336 ( 0.00%)      pub fn eval_place_to_op(
        .                   &self,
        .                   place: mir::Place<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Do not use the layout passed in as argument if the base we are looking at
        .                   // here is not the entire place.
   53,042 ( 0.00%)          let layout = if place.projection.is_empty() { layout } else { None };
        .           
  159,126 ( 0.00%)          let base_op = self.access_local(self.frame(), place.local, layout)?;
        .           
        .                   let op = place
        .                       .projection
        .                       .iter()
    3,870 ( 0.00%)              .try_fold(base_op, |op, elem| self.operand_projection(&op, elem))?;
        .           
        .                   trace!("eval_place_to_op: got {:?}", *op);
        .                   // Sanity-check the type we ended up with.
        .                   debug_assert!(mir_assign_valid_types(
        .                       *self.tcx,
        .                       self.param_env,
        .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
        .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
        .                       )?)?,
        .                       op.layout,
        .                   ));
  124,002 ( 0.00%)          Ok(op)
  477,378 ( 0.00%)      }
        .           
        .               /// Evaluate the operand, returning a place where you can then find the data.
        .               /// If you already know the layout, you can save two table lookups
        .               /// by passing it in here.
        .               #[inline]
  886,688 ( 0.00%)      pub fn eval_operand(
        .                   &self,
        .                   mir_op: &mir::Operand<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::Operand::*;
  223,491 ( 0.00%)          let op = match *mir_op {
        .                       // FIXME: do some more logic on `move` to invalidate the old location
  232,216 ( 0.00%)              Copy(place) | Move(place) => self.eval_place_to_op(place, layout)?,
        .           
        .                       Constant(ref constant) => {
        .                           let val =
  965,573 ( 0.00%)                      self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal)?;
        .                           // This can still fail:
        .                           // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all
        .                           //   checked yet.
        .                           // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.
        .           
    9,048 ( 0.00%)                  self.mir_const_to_op(&val, layout)?
        .                       }
        .                   };
        .                   trace!("{:?}: {:?}", mir_op, *op);
1,316,488 ( 0.01%)          Ok(op)
  591,158 ( 0.00%)      }
        .           
        .               /// Evaluate a bunch of operands at once
        .               pub(super) fn eval_operands(
        .                   &self,
        .                   ops: &[mir::Operand<'tcx>],
        .               ) -> InterpResult<'tcx, Vec<OpTy<'tcx, M::PointerTag>>> {
        .                   ops.iter().map(|op| self.eval_operand(op, None)).collect()
        .               }
        .           
        .               // Used when the miri-engine runs into a constant and for extracting information from constants
        .               // in patterns via the `const_eval` module
        .               /// The `val` and `layout` are assumed to already be in our interpreter
        .               /// "universe" (param_env).
  746,520 ( 0.00%)      pub fn const_to_op(
        .                   &self,
        .                   val: &ty::Const<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  355,485 ( 0.00%)          match val.val {
        .                       ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),
        .                       ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),
      564 ( 0.00%)              ty::ConstKind::Unevaluated(uv) => {
        .                           let instance = self.resolve(uv.def, uv.substs)?;
    1,551 ( 0.00%)                  Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())
        .                       }
        .                       ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {
        .                           span_bug!(self.cur_span(), "const_to_op: Unexpected ConstKind {:?}", val)
        .                       }
  674,576 ( 0.00%)              ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty, layout),
        .                   }
  559,890 ( 0.00%)      }
        .           
   97,757 ( 0.00%)      pub fn mir_const_to_op(
        .                   &self,
        .                   val: &mir::ConstantKind<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  142,194 ( 0.00%)          match val {
  266,614 ( 0.00%)              mir::ConstantKind::Ty(ct) => self.const_to_op(ct, layout),
        .                       mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, ty, layout),
        .                   }
   79,983 ( 0.00%)      }
        .           
  709,560 ( 0.00%)      crate fn const_val_to_op(
        .                   &self,
        .                   val_val: ConstValue<'tcx>,
        .                   ty: Ty<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Other cases need layout.
        .                   let tag_scalar = |scalar| -> InterpResult<'tcx, _> {
  394,956 ( 0.00%)              Ok(match scalar {
        .                           Scalar::Ptr(ptr, size) => Scalar::Ptr(self.global_base_pointer(ptr)?, size),
  195,633 ( 0.00%)                  Scalar::Int(int) => Scalar::Int(int),
        .                       })
        .                   };
   31,581 ( 0.00%)          let layout = from_known_layout(self.tcx, self.param_env, layout, || self.layout_of(ty))?;
  223,128 ( 0.00%)          let op = match val_val {
    2,104 ( 0.00%)              ConstValue::ByRef { alloc, offset } => {
    2,104 ( 0.00%)                  let id = self.tcx.create_memory_alloc(alloc);
        .                           // We rely on mutability being set correctly in that allocation to prevent writes
        .                           // where none should happen.
        .                           let ptr = self.global_base_pointer(Pointer::new(id, offset))?;
    4,208 ( 0.00%)                  Operand::Indirect(MemPlace::from_ptr(ptr.into(), layout.align.abi))
        .                       }
  599,937 ( 0.00%)              ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),
   12,234 ( 0.00%)              ConstValue::Slice { data, start, end } => {
        .                           // We rely on mutability being set correctly in `data` to prevent writes
        .                           // where none should happen.
        .                           let ptr = Pointer::new(
   12,234 ( 0.00%)                      self.tcx.create_memory_alloc(data),
        .                               Size::from_bytes(start), // offset: `start`
        .                           );
   27,416 ( 0.00%)                  Operand::Immediate(Immediate::new_slice(
        .                               Scalar::from_pointer(self.global_base_pointer(ptr)?, &*self.tcx),
        .                               u64::try_from(end.checked_sub(start).unwrap()).unwrap(), // len: `end - start`
        .                               self,
        .                           ))
        .                       }
        .                   };
1,490,076 ( 0.01%)          Ok(OpTy { op, layout })
  567,648 ( 0.00%)      }
        .           
        .               /// Read discriminant, return the runtime value as well as the variant index.
        .               /// Can also legally be called on non-enums (e.g. through the discriminant_value intrinsic)!
    1,820 ( 0.00%)      pub fn read_discriminant(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (Scalar<M::PointerTag>, VariantIdx)> {
        .                   trace!("read_discriminant_value {:#?}", op.layout);
        .                   // Get type and layout of the discriminant.
    2,184 ( 0.00%)          let discr_layout = self.layout_of(op.layout.ty.discriminant_ty(*self.tcx))?;
        .                   trace!("discriminant type: {:?}", discr_layout.ty);
        .           
        .                   // We use "discriminant" to refer to the value associated with a particular enum variant.
        .                   // This is not to be confused with its "variant index", which is just determining its position in the
        .                   // declared list of variants -- they can differ with explicitly assigned discriminants.
        .                   // We use "tag" to refer to how the discriminant is encoded in memory, which can be either
        .                   // straight-forward (`TagEncoding::Direct`) or with a niche (`TagEncoding::Niche`).
      546 ( 0.00%)          let (tag_scalar_layout, tag_encoding, tag_field) = match op.layout.variants {
        .                       Variants::Single { index } => {
        .                           let discr = match op.layout.ty.discriminant_for_variant(*self.tcx, index) {
        .                               Some(discr) => {
        .                                   // This type actually has discriminants.
        .                                   assert_eq!(discr.ty, discr_layout.ty);
        .                                   Scalar::from_uint(discr.val, discr_layout.size)
        .                               }
        .                               None => {
        .                                   // On a type without actual discriminants, variant is 0.
        .                                   assert_eq!(index.as_u32(), 0);
        .                                   Scalar::from_uint(index.as_u32(), discr_layout.size)
        .                               }
        .                           };
        .                           return Ok((discr, index));
        .                       }
      364 ( 0.00%)              Variants::Multiple { tag, ref tag_encoding, tag_field, .. } => {
        .                           (tag, tag_encoding, tag_field)
        .                       }
        .                   };
        .           
        .                   // There are *three* layouts that come into play here:
        .                   // - The discriminant has a type for typechecking. This is `discr_layout`, and is used for
        .                   //   the `Scalar` we return.
        .                   // - The tag (encoded discriminant) has layout `tag_layout`. This is always an integer type,
        .                   //   and used to interpret the value we read from the tag field.
        .                   //   For the return value, a cast to `discr_layout` is performed.
        .                   // - The field storing the tag has a layout, which is very similar to `tag_layout` but
        .                   //   may be a pointer. This is `tag_val.layout`; we just use it for sanity checks.
        .           
        .                   // Get layout for tag.
    1,092 ( 0.00%)          let tag_layout = self.layout_of(tag_scalar_layout.value.to_int_ty(*self.tcx))?;
        .           
        .                   // Read tag and sanity-check `tag_layout`.
    1,274 ( 0.00%)          let tag_val = self.read_immediate(&self.operand_field(op, tag_field)?)?;
      364 ( 0.00%)          assert_eq!(tag_layout.size, tag_val.layout.size);
    1,456 ( 0.00%)          assert_eq!(tag_layout.abi.is_signed(), tag_val.layout.abi.is_signed());
        .                   let tag_val = tag_val.to_scalar()?;
        .                   trace!("tag value: {:?}", tag_val);
        .           
        .                   // Figure out which discriminant and variant this corresponds to.
    1,638 ( 0.00%)          Ok(match *tag_encoding {
        .                       TagEncoding::Direct => {
    3,360 ( 0.00%)                  let tag_bits = tag_val
        .                               .try_to_int()
        .                               .map_err(|dbg_val| err_ub!(InvalidTag(dbg_val)))?
        .                               .assert_bits(tag_layout.size);
        .                           // Cast bits from tag layout to discriminant layout.
    1,344 ( 0.00%)                  let discr_val = self.cast_from_scalar(tag_bits, tag_layout, discr_layout.ty);
      336 ( 0.00%)                  let discr_bits = discr_val.assert_bits(discr_layout.size);
        .                           // Convert discriminant to variant index, and catch invalid discriminants.
      840 ( 0.00%)                  let index = match *op.layout.ty.kind() {
      168 ( 0.00%)                      ty::Adt(adt, _) => {
    2,757 ( 0.00%)                          adt.discriminants(*self.tcx).find(|(_, var)| var.val == discr_bits)
        .                               }
        .                               ty::Generator(def_id, substs, _) => {
        .                                   let substs = substs.as_generator();
        .                                   substs
        .                                       .discriminants(def_id, *self.tcx)
        .                                       .find(|(_, var)| var.val == discr_bits)
        .                               }
        .                               _ => span_bug!(self.cur_span(), "tagged layout for non-adt non-generator"),
        .                           }
        .                           .ok_or_else(|| err_ub!(InvalidTag(Scalar::from_uint(tag_bits, tag_layout.size))))?;
        .                           // Return the cast value, and the index.
      672 ( 0.00%)                  (discr_val, index.0)
        .                       }
       84 ( 0.00%)              TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {
        .                           // Compute the variant this niche value/"tag" corresponds to. With niche layout,
        .                           // discriminant (encoded in niche/tag) and variant index are the same.
        .                           let variants_start = niche_variants.start().as_u32();
       28 ( 0.00%)                  let variants_end = niche_variants.end().as_u32();
       56 ( 0.00%)                  let variant = match tag_val.try_to_int() {
        .                               Err(dbg_val) => {
        .                                   // So this is a pointer then, and casting to an int failed.
        .                                   // Can only happen during CTFE.
        .                                   let ptr = self.scalar_to_ptr(tag_val);
        .                                   // The niche must be just 0, and the ptr not null, then we know this is
        .                                   // okay. Everything else, we conservatively reject.
        .                                   let ptr_valid = niche_start == 0
        .                                       && variants_start == variants_end
        .                                       && !self.memory.ptr_may_be_null(ptr);
        .                                   if !ptr_valid {
        .                                       throw_ub!(InvalidTag(dbg_val))
        .                                   }
        .                                   dataful_variant
        .                               }
        .                               Ok(tag_bits) => {
      238 ( 0.00%)                          let tag_bits = tag_bits.assert_bits(tag_layout.size);
        .                                   // We need to use machine arithmetic to get the relative variant idx:
        .                                   // variant_index_relative = tag_val - niche_start_val
       84 ( 0.00%)                          let tag_val = ImmTy::from_uint(tag_bits, tag_layout);
       98 ( 0.00%)                          let niche_start_val = ImmTy::from_uint(niche_start, tag_layout);
        .                                   let variant_index_relative_val =
       56 ( 0.00%)                              self.binary_op(mir::BinOp::Sub, &tag_val, &niche_start_val)?;
       98 ( 0.00%)                          let variant_index_relative = variant_index_relative_val
        .                                       .to_scalar()?
       28 ( 0.00%)                              .assert_bits(tag_val.layout.size);
        .                                   // Check if this is in the range that indicates an actual discriminant.
       70 ( 0.00%)                          if variant_index_relative <= u128::from(variants_end - variants_start) {
        .                                       let variant_index_relative = u32::try_from(variant_index_relative)
        .                                           .expect("we checked that this fits into a u32");
        .                                       // Then computing the absolute variant idx should not overflow any more.
        .                                       let variant_index = variants_start
        .                                           .checked_add(variant_index_relative)
        .                                           .expect("overflow computing absolute variant idx");
        4 ( 0.00%)                              let variants_len = op
        .                                           .layout
        .                                           .ty
        .                                           .ty_adt_def()
        .                                           .expect("tagged layout for non adt")
        .                                           .variants
        .                                           .len();
        8 ( 0.00%)                              assert!(usize::try_from(variant_index).unwrap() < variants_len);
        .                                       VariantIdx::from_u32(variant_index)
        .                                   } else {
        .                                       dataful_variant
        .                                   }
        .                               }
        .                           };
        .                           // Compute the size of the scalar we need to return.
        .                           // No need to cast, because the variant index directly serves as discriminant and is
        .                           // encoded in the tag.
       98 ( 0.00%)                  (Scalar::from_uint(variant.as_u32(), discr_layout.size), variant)
        .                       }
        .                   })
    1,638 ( 0.00%)      }
        .           }

7,527,918 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
16,335,530 ( 0.08%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
12,251,646 ( 0.06%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
   845,384 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 1,268,076 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 4,295,218 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 1,615,420 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 3,230,840 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
         .               } else if #[cfg(target_os = "wasi")] {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
         .                   }
         .               } else {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         1 ( 0.00%)              let mut out = ptr::null_mut();
         .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
         .                       // Since these are all powers of 2, we can just use max.
         .                       let align = layout.align().max(crate::mem::size_of::<usize>());
         2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
         2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
         .                   }
         .               }
         .           }

         1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .           pub struct UnmatchedBrace {
        .               pub expected_delim: token::DelimToken,
        .               pub found_delim: Option<token::DelimToken>,
        .               pub found_span: Span,
        .               pub unclosed_span: Option<Span>,
        .               pub candidate_span: Option<Span>,
        .           }
        .           
      532 ( 0.00%)  crate fn parse_token_trees<'a>(
        .               sess: &'a ParseSess,
        .               src: &'a str,
        .               start_pos: BytePos,
        .               override_span: Option<Span>,
        .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
        .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
        .                   .into_token_trees()
      342 ( 0.00%)  }
        .           
        .           struct StringReader<'a> {
        .               sess: &'a ParseSess,
        .               /// Initial position, read-only.
        .               start_pos: BytePos,
        .               /// The absolute offset within the source_map of the current character.
        .               pos: BytePos,
        .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
        .               end_src_index: usize,
        .               /// Source text to tokenize.
        .               src: &'a str,
        .               override_span: Option<Span>,
        .           }
        .           
        .           impl<'a> StringReader<'a> {
        .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
  353,111 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
        .               }
        .           
        .               /// Returns the next token, and info about preceding whitespace, if any.
2,200,107 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
        .                   let mut spacing = Spacing::Joint;
        .           
        .                   // Skip `#!` at the start of the file
  628,602 ( 0.00%)          let start_src_index = self.src_index(self.pos);
  942,903 ( 0.00%)          let text: &str = &self.src[start_src_index..self.end_src_index];
        .                   let is_beginning_of_file = self.pos == self.start_pos;
  314,301 ( 0.00%)          if is_beginning_of_file {
      152 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
        .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
        .                           spacing = Spacing::Alone;
        .                       }
        .                   }
        .           
        .                   // Skip trivial (whitespace & comments) tokens
        .                   loop {
  519,791 ( 0.00%)              let start_src_index = self.src_index(self.pos);
1,251,138 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
        .           
  417,046 ( 0.00%)              if text.is_empty() {
        .                           let span = self.mk_sp(self.pos, self.pos);
      190 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
        .                       }
        .           
1,251,024 ( 0.01%)              let token = rustc_lexer::first_token(text);
        .           
  834,016 ( 0.00%)              let start = self.pos;
  417,008 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
        .           
        .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
        .           
3,346,176 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
2,514,104 ( 0.01%)                  Some(kind) => {
        .                               let span = self.mk_sp(start, self.pos);
1,885,578 ( 0.01%)                      return (spacing, Token::new(kind, span));
        .                           }
        .                           None => spacing = Spacing::Alone,
        .                       }
        .                   }
2,828,709 ( 0.01%)      }
        .           
        .               /// Report a fatal lexical error with a given span.
        .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
        .                   self.sess.span_diagnostic.span_fatal(sp, m)
        .               }
        .           
        .               /// Report a lexical error with a given span.
        .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
        .               ) -> DiagnosticBuilder<'a> {
        .                   self.sess
        .                       .span_diagnostic
        .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
        .               }
        .           
        .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
        .               /// complain about it.
    3,514 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
        .                   // Opening delimiter of the length 2 is not included into the comment text.
        .                   let content_start = start + BytePos(2);
        .                   let content = self.str_from(content_start);
        .                   if contains_text_flow_control_chars(content) {
        .                       let span = self.mk_sp(start, self.pos);
        .                       self.sess.buffer_lint_with_diagnostic(
        .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
        .                           span,
        .                           ast::CRATE_NODE_ID,
        .                           "unicode codepoint changing visible direction of text present in comment",
        .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
        .                       );
        .                   }
    4,016 ( 0.00%)      }
        .           
        .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
        .               /// `rustc_ast::TokenKind`. This turns strings into interned
        .               /// symbols and runs additional validation.
        .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
2,085,040 ( 0.01%)          Some(match token {
    3,021 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
        .                           // Skip non-doc comments
   13,599 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
        .                               doc_style
        .                           } else {
        .                               self.lint_unicode_text_flow(start);
        .                               return None;
        .                           };
        .           
        .                           // Opening delimiter of the length 3 is not included into the symbol.
        .                           let content_start = start + BytePos(3);
        .                           let content = self.str_from(content_start);
   12,595 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
        .                       }
       18 ( 0.00%)              rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
        9 ( 0.00%)                  if !terminated {
        .                               let msg = match doc_style {
        .                                   Some(_) => "unterminated block doc-comment",
        .                                   None => "unterminated block comment",
        .                               };
        .                               let last_bpos = self.pos;
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, last_bpos),
        .                                   msg,
        .                                   error_code!(E0758),
        .                               );
        .                           }
        .           
        .                           // Skip non-doc comments
       36 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
        .                               doc_style
        .                           } else {
        .                               self.lint_unicode_text_flow(start);
        .                               return None;
        .                           };
        .           
        .                           // Opening delimiter of the length 3 and closing delimiter of the length 2
        .                           // are not included into the symbol.
        .                           let content_start = start + BytePos(3);
        .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
       63 ( 0.00%)                  let content = self.str_from_to(content_start, content_end);
       36 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
        .                       }
        .                       rustc_lexer::TokenKind::Whitespace => return None,
        .                       rustc_lexer::TokenKind::Ident
        .                       | rustc_lexer::TokenKind::RawIdent
        .                       | rustc_lexer::TokenKind::UnknownPrefix => {
  155,088 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
  193,860 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
        .                           let mut ident_start = start;
   77,544 ( 0.00%)                  if is_raw_ident {
        .                               ident_start = ident_start + BytePos(2);
        .                           }
  116,316 ( 0.00%)                  if is_unknown_prefix {
        .                               self.report_unknown_prefix(start);
        .                           }
  193,860 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
        .                           let span = self.mk_sp(start, self.pos);
  155,088 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
   77,544 ( 0.00%)                  if is_raw_ident {
        .                               if !sym.can_be_raw() {
        .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
        .                               }
        .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
        .                           }
  271,404 ( 0.00%)                  token::Ident(sym, is_raw_ident)
        .                       }
        .                       rustc_lexer::TokenKind::InvalidIdent
        .                           // Do not recover an identifier with emoji if the codepoint is a confusable
        .                           // with a recoverable substitution token, like `➖`.
        .                           if UNICODE_ARRAY
        .                               .iter()
        .                               .find(|&&(c, _, _)| {
        .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
        .                               })
        .                               .is_none() =>
        .                       {
        .                           let sym = nfc_normalize(self.str_from(start));
        .                           let span = self.mk_sp(start, self.pos);
        .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
        .                           token::Ident(sym, false)
        .                       }
1,061,792 ( 0.01%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
        .                           let suffix_start = start + BytePos(suffix_start as u32);
        .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
  199,086 ( 0.00%)                  let suffix = if suffix_start < self.pos {
        .                               let string = self.str_from(suffix_start);
        .                               if string == "_" {
        .                                   self.sess
        .                                       .span_diagnostic
        .                                       .struct_span_warn(
        .                                           self.mk_sp(suffix_start, self.pos),
        .                                           "underscore literal suffix is not allowed",
        .                                       )
-- line 253 ----------------------------------------
-- line 259 ----------------------------------------
        .                                       .note(
        .                                           "see issue #42326 \
        .                                            <https://github.com/rust-lang/rust/issues/42326> \
        .                                            for more information",
        .                                       )
        .                                       .emit();
        .                                   None
        .                               } else {
        5 ( 0.00%)                          Some(Symbol::intern(string))
        .                               }
        .                           } else {
        .                               None
        .                           };
  530,896 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
        .                       }
    1,566 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
        .                           // Include the leading `'` in the real identifier, for macro
        .                           // expansion purposes. See #12512 for the gory details of why
        .                           // this is necessary.
        .                           let lifetime_name = self.str_from(start);
      783 ( 0.00%)                  if starts_with_number {
        .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
        .                           }
    2,349 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
    3,132 ( 0.00%)                  token::Lifetime(ident)
        .                       }
        .                       rustc_lexer::TokenKind::Semi => token::Semi,
        .                       rustc_lexer::TokenKind::Comma => token::Comma,
        .                       rustc_lexer::TokenKind::Dot => token::Dot,
        .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
        .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
        .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
        .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
        .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
        .                           }
        .                           err.emit();
        .                           token?
        .                       }
        .                   })
        .               }
        .           
   30,336 ( 0.00%)      fn cook_doc_comment(
        .                   &self,
        .                   content_start: BytePos,
        .                   content: &str,
        .                   comment_kind: CommentKind,
        .                   doc_style: DocStyle,
        .               ) -> TokenKind {
    2,528 ( 0.00%)          if content.contains('\r') {
        .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
        .                           self.err_span_(
        .                               content_start + BytePos(idx as u32),
        .                               content_start + BytePos(idx as u32 + 1),
        .                               match comment_kind {
        .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
        .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
        .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   let attr_style = match doc_style {
        .                       DocStyle::Outer => AttrStyle::Outer,
        .                       DocStyle::Inner => AttrStyle::Inner,
        .                   };
        .           
    7,584 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
   37,920 ( 0.00%)      }
        .           
        .               fn cook_lexer_literal(
        .                   &self,
        .                   start: BytePos,
        .                   suffix_start: BytePos,
        .                   kind: rustc_lexer::LiteralKind,
        .               ) -> (token::LitKind, Symbol) {
        .                   // prefix means `"` or `br"` or `r###"`, ...
        .                   let (lit_kind, mode, prefix_len, postfix_len) = match kind {
   58,668 ( 0.00%)              rustc_lexer::LiteralKind::Char { terminated } => {
   58,668 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, suffix_start),
        .                                   "unterminated character literal",
        .                                   error_code!(E0762),
        .                               )
        .                           }
        .                           (token::Char, Mode::Char, 1, 1) // ' '
        .                       }
      537 ( 0.00%)              rustc_lexer::LiteralKind::Byte { terminated } => {
      537 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start + BytePos(1), suffix_start),
        .                                   "unterminated byte constant",
        .                                   error_code!(E0763),
        .                               )
        .                           }
        .                           (token::Byte, Mode::Byte, 2, 1) // b' '
        .                       }
    4,342 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    4,342 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, suffix_start),
        .                                   "unterminated double quote string",
        .                                   error_code!(E0765),
        .                               )
        .                           }
        .                           (token::Str, Mode::Str, 1, 1) // " "
        .                       }
        8 ( 0.00%)              rustc_lexer::LiteralKind::ByteStr { terminated } => {
        8 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start + BytePos(1), suffix_start),
        .                                   "unterminated double quote byte string",
        .                                   error_code!(E0766),
        .                               )
        .                           }
        .                           (token::ByteStr, Mode::ByteStr, 2, 1) // b" "
        .                       }
        .                       rustc_lexer::LiteralKind::RawStr { n_hashes, err } => {
        .                           self.report_raw_str_error(start, err);
        .                           let n = u32::from(n_hashes);
    3,650 ( 0.00%)                  (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
        .                       }
        .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
        .                           self.report_raw_str_error(start, err);
        .                           let n = u32::from(n_hashes);
        .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
        .                       }
    4,154 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
    2,077 ( 0.00%)                  return if empty_int {
        .                               self.sess
        .                                   .span_diagnostic
        .                                   .struct_span_err_with_code(
        .                                       self.mk_sp(start, suffix_start),
        .                                       "no valid digits found for number",
        .                                       error_code!(E0768),
        .                                   )
        .                                   .emit();
        .                               (token::Integer, sym::integer(0))
        .                           } else {
        .                               self.validate_int_literal(base, start, suffix_start);
    6,231 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
        .                           };
        .                       }
        .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
        .                           if empty_exponent {
        .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
        .                           }
        .           
        .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
        .                           }
        .           
        .                           let id = self.symbol_from_to(start, suffix_start);
        .                           return (token::Float, id);
        .                       }
        .                   };
        .                   let content_start = start + BytePos(prefix_len);
        .                   let content_end = suffix_start - BytePos(postfix_len);
  192,855 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
        .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
        .                   (lit_kind, id)
        .               }
        .           
        .               #[inline]
        .               fn src_index(&self, pos: BytePos) -> usize {
        .                   (pos - self.start_pos).to_usize()
        .               }
        .           
        .               /// Slice of the source text from `start` up to but excluding `self.pos`,
        .               /// meaning the slice does not include the character `self.ch`.
        .               fn str_from(&self, start: BytePos) -> &str {
  262,558 ( 0.00%)          self.str_from_to(start, self.pos)
        .               }
        .           
        .               /// As symbol_from, with an explicit endpoint.
        .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
        .                   debug!("taking an ident from {:?} to {:?}", start, end);
  785,959 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
        .               }
        .           
        .               /// Slice of the source text spanning from `start` up to but excluding `end`.
  173,236 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
        .                   &self.src[self.src_index(start)..self.src_index(end)]
  692,944 ( 0.00%)      }
        .           
        .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
    1,460 ( 0.00%)          match opt_err {
        .                       Some(RawStrError::InvalidStarter { bad_char }) => {
        .                           self.report_non_started_raw_string(start, bad_char)
        .                       }
        .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
        .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
        .                       Some(RawStrError::TooManyDelimiters { found }) => {
        .                           self.report_too_many_hashes(start, found)
        .                       }
-- line 496 ----------------------------------------
-- line 609 ----------------------------------------
        .               fn validate_literal_escape(
        .                   &self,
        .                   mode: Mode,
        .                   content_start: BytePos,
        .                   content_end: BytePos,
        .                   prefix_len: u32,
        .                   postfix_len: u32,
        .               ) {
  385,710 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
2,223,910 ( 0.01%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
        .                       // Here we only check for errors. The actual unescaping is done later.
  202,410 ( 0.00%)              if let Err(err) = result {
        .                           let span_with_quotes = self
        .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
        .                           let (start, end) = (range.start as u32, range.end as u32);
        .                           let lo = content_start + BytePos(start);
        .                           let hi = lo + BytePos(end - start);
        .                           let span = self.mk_sp(lo, hi);
        .                           emit_unescape_error(
        .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
        .                               lit_content,
        .                               span_with_quotes,
        .                               span,
        .                               mode,
        .                               range,
        .                               err,
        .                           );
        .                       }
  910,845 ( 0.00%)          });
        .               }
        .           
        .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
    8,302 ( 0.00%)          let base = match base {
        .                       Base::Binary => 2,
        .                       Base::Octal => 8,
        .                       _ => return,
        .                   };
       18 ( 0.00%)          let s = self.str_from_to(content_start + BytePos(2), content_end);
       38 ( 0.00%)          for (idx, c) in s.char_indices() {
        .                       let idx = idx as u32;
       72 ( 0.00%)              if c != '_' && c.to_digit(base).is_none() {
        .                           let lo = content_start + BytePos(2 + idx);
        .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
        .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
        .                       }
        .                   }
        .               }
        .           }
        .           
  348,948 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
        .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
   77,544 ( 0.00%)      match is_nfc_quick(string.chars()) {
  387,720 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
        .                   _ => {
        .                       let normalized_str: String = string.chars().nfc().collect();
        .                       Symbol::intern(&normalized_str)
        .                   }
        .               }
        .           }

1,932,936 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               stability: InternedSet<'tcx, attr::Stability>,
         .           
         .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
         .               const_stability: InternedSet<'tcx, attr::ConstStability>,
         .           }
         .           
         .           impl<'tcx> CtxtInterners<'tcx> {
         .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
        17 ( 0.00%)          CtxtInterners {
         .                       arena,
         .                       type_: Default::default(),
         .                       type_list: Default::default(),
         .                       substs: Default::default(),
         .                       region: Default::default(),
         .                       poly_existential_predicates: Default::default(),
         .                       canonical_var_infos: Default::default(),
         .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .                       stability: Default::default(),
         .                       const_stability: Default::default(),
         .                   }
         .               }
         .           
         .               /// Interns a type.
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline(never)]
10,344,032 ( 0.05%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
         .                   self.type_
 6,465,020 ( 0.03%)              .intern(kind, |kind| {
   301,906 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
         .           
         .                           let ty_struct = TyS {
   603,812 ( 0.00%)                      kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(ty_struct))
         .                       })
         .                       .0
11,637,036 ( 0.06%)      }
         .           
         .               #[inline(never)]
 2,992,376 ( 0.02%)      fn intern_predicate(
         .                   &self,
         .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> &'tcx PredicateInner<'tcx> {
         .                   self.predicate
 2,618,329 ( 0.01%)              .intern(kind, |kind| {
   481,854 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
         .           
         .                           let predicate_struct = PredicateInner {
         .                               kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(predicate_struct))
         .                       })
         .                       .0
 3,366,423 ( 0.02%)      }
         .           }
         .           
         .           pub struct CommonTypes<'tcx> {
         .               pub unit: Ty<'tcx>,
         .               pub bool: Ty<'tcx>,
         .               pub char: Ty<'tcx>,
         .               pub isize: Ty<'tcx>,
         .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
         .           /// safely used as a key in the maps of a TypeckResults. For that to be
         .           /// the case, the HirId must have the same `owner` as all the other IDs in
         .           /// this table (signified by `hir_owner`). Otherwise the HirId
         .           /// would be in a different frame of reference and using its `local_id`
         .           /// would result in lookup errors, or worse, in silently wrong data being
         .           /// stored/returned.
         .           #[inline]
         .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 2,237,315 ( 0.01%)      if hir_id.owner != hir_owner {
         .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
         .               }
         .           }
         .           
         .           #[cold]
         .           #[inline(never)]
         .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
         .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
         .           }
         .           
         .           impl<'a, V> LocalTableInContext<'a, V> {
         .               pub fn contains_key(&self, id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.data.contains_key(&id.local_id)
         .               }
         .           
 1,610,474 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   321,878 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   321,878 ( 0.00%)          self.data.get(&id.local_id)
 1,289,592 ( 0.01%)      }
         .           
         .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
         .                   self.data.iter()
         .               }
         .           }
         .           
         .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
         .               type Output = V;
         .           
     5,976 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
         3 ( 0.00%)          self.get(key).expect("LocalTableInContext: key not found")
     3,984 ( 0.00%)      }
         .           }
         .           
         .           pub struct LocalTableInContextMut<'a, V> {
         .               hir_owner: LocalDefId,
         .               data: &'a mut ItemLocalMap<V>,
         .           }
         .           
         .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
         .               pub treat_byte_string_as_slice: ItemLocalSet,
         .           
         .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
         .               /// on closure size.
         .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
         .           }
         .           
         .           impl<'tcx> TypeckResults<'tcx> {
    30,210 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   357,485 ( 0.00%)          TypeckResults {
         .                       hir_owner,
         .                       type_dependent_defs: Default::default(),
         .                       field_indices: Default::default(),
         .                       user_provided_types: Default::default(),
         .                       user_provided_sigs: Default::default(),
         .                       node_types: Default::default(),
         .                       node_substs: Default::default(),
         .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
         .                       tainted_by_errors: None,
         .                       concrete_opaque_types: Default::default(),
         .                       closure_min_captures: Default::default(),
         .                       closure_fake_reads: Default::default(),
         .                       generator_interior_types: ty::Binder::dummy(Default::default()),
         .                       treat_byte_string_as_slice: Default::default(),
         .                       closure_size_eval: Default::default(),
         .                   }
    30,210 ( 0.00%)      }
         .           
         .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   140,850 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
    93,900 ( 0.00%)          match *qpath {
   237,708 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
         .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .type_dependent_def(id)
    43,992 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
         .                   }
   234,750 ( 0.00%)      }
         .           
     1,035 ( 0.00%)      pub fn type_dependent_defs(
         .                   &self,
         .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    10,074 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     1,035 ( 0.00%)      }
         .           
    13,326 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    27,738 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    26,652 ( 0.00%)      }
         .           
    28,320 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
         .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    28,320 ( 0.00%)      }
         .           
   149,054 ( 0.00%)      pub fn type_dependent_defs_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   149,054 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   149,054 ( 0.00%)      }
         .           
         .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    11,755 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     2,312 ( 0.00%)      }
         .           
         .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    15,732 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
     7,866 ( 0.00%)      }
         .           
         .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    25,244 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    12,622 ( 0.00%)      }
         .           
         .               pub fn user_provided_types_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     4,164 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     2,082 ( 0.00%)      }
         .           
         .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   312,786 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   156,393 ( 0.00%)      }
         .           
         .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   577,408 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   288,704 ( 0.00%)      }
         .           
 2,943,222 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   490,537 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
         .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
         .                   })
 2,452,685 ( 0.01%)      }
         .           
   631,809 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   631,809 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_types.get(&id.local_id).cloned()
 1,263,618 ( 0.01%)      }
         .           
         .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    18,806 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
     9,403 ( 0.00%)      }
         .           
   158,627 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   158,627 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   317,254 ( 0.00%)      }
         .           
   138,327 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   138,327 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned()
   276,654 ( 0.00%)      }
         .           
         .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
         .               // doesn't provide type parameter substitutions.
         .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    16,392 ( 0.00%)          self.node_type(pat.hir_id)
         .               }
         .           
         .               // Returns the type of an expression as a monotype.
         .               //
         .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
         .               // some cases, we insert `Adjustment` annotations such as auto-deref or
         .               // auto-ref.  The type returned by this function does not consider such
         .               // adjustments.  See `expr_ty_adjusted()` instead.
         .               //
         .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
         .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
         .               // instead of "fn(ty) -> T with T = isize".
         .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   538,426 ( 0.00%)          self.node_type(expr.hir_id)
         .               }
         .           
         .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   550,065 ( 0.00%)          self.node_type_opt(expr.hir_id)
         .               }
         .           
         .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   272,830 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   136,415 ( 0.00%)      }
         .           
         .               pub fn adjustments_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   328,396 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   164,198 ( 0.00%)      }
         .           
   264,317 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   528,634 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
         .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   528,634 ( 0.00%)      }
         .           
         .               /// Returns the type of `expr`, considering any `Adjustment`
         .               /// entry recorded for that expression.
     9,420 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     1,884 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     3,288 ( 0.00%)      }
         .           
     2,625 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
       525 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
     1,528 ( 0.00%)      }
         .           
     9,039 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
         .                   // Only paths and method calls/overloaded operators have
         .                   // entries in type_dependent_defs, ignore the former here.
    18,078 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
         .                       return false;
         .                   }
         .           
    20,742 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    18,078 ( 0.00%)      }
         .           
    37,050 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
         .                   self.pat_binding_modes().get(id).copied().or_else(|| {
         .                       s.delay_span_bug(sp, "missing binding mode");
         .                       None
         .                   })
    49,400 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    32,784 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    10,217 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    16,440 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
     8,220 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    56,176 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    28,088 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    16,894 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     8,447 ( 0.00%)      }
         .           
         .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
         .               /// by the closure.
     7,192 ( 0.00%)      pub fn closure_min_captures_flattened(
         .                   &self,
         .                   closure_def_id: DefId,
         .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
         .                   self.closure_min_captures
         .                       .get(&closure_def_id)
         .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
         .                       .into_iter()
         .                       .flatten()
     8,990 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     2,874 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     1,437 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
         .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
         .               }
         .           
         .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
     6,858 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     3,429 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
     3,984 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     1,992 ( 0.00%)      }
         .           
         .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     2,880 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     1,440 ( 0.00%)      }
         .           
         .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        12 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
         6 ( 0.00%)      }
         .           
       174 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
        58 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
         .                   self.coercion_casts.contains(&hir_id.local_id)
       116 ( 0.00%)      }
         .           
         .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
         .                   self.coercion_casts.insert(id);
         .               }
         .           
         .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     1,437 ( 0.00%)          &self.coercion_casts
     1,437 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   let ty::TypeckResults {
         .                       hir_owner,
         .                       ref type_dependent_defs,
         .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
         .                   const START_INDEX = 0,
         .               }
         .           }
         .           
         .           /// Mapping of type annotation indices to canonical user type annotations.
         .           pub type CanonicalUserTypeAnnotations<'tcx> =
         .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
         .           
     2,160 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct CanonicalUserTypeAnnotation<'tcx> {
         .               pub user_ty: CanonicalUserType<'tcx>,
         .               pub span: Span,
     1,232 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
         .           }
         .           
         .           /// Canonicalized user type annotation.
         .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
         .           
         .           impl<'tcx> CanonicalUserType<'tcx> {
         .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
         .               /// i.e., each thing is mapped to a canonical variable with the same index.
     2,582 ( 0.00%)      pub fn is_identity(&self) -> bool {
     5,164 ( 0.00%)          match self.value {
         .                       UserType::Ty(_) => false,
         .                       UserType::TypeOf(_, user_substs) => {
     2,582 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
         .                               return false;
         .                           }
         .           
         .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
         .                               match kind.unpack() {
     4,870 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
         .                                       ty::Bound(debruijn, b) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     2,424 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == b.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
       254 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
         .                                       ty::ReLateBound(debruijn, br) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
         .                                           assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == br.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
         .                                           cvar == b
         .                                       }
         .                                       _ => false,
         .                                   },
         .                               }
         .                           })
         .                       }
         .                   }
     5,164 ( 0.00%)      }
         .           }
         .           
         .           /// A user-given type annotation attached to a constant. These arise
         .           /// from constants that are named via paths, like `Foo::<A>::new` and
         .           /// so forth.
     7,392 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    34,978 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub enum UserType<'tcx> {
         .               Ty(Ty<'tcx>),
         .           
         .               /// The canonical type is the result of `type_of(def_id)` with the
         .               /// given substitutions applied.
         .               TypeOf(DefId, UserSubsts<'tcx>),
         .           }
         .           
         .           impl<'tcx> CommonTypes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
       111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
         .           
         .                   CommonTypes {
         .                       unit: mk(Tuple(List::empty())),
         .                       bool: mk(Bool),
         .                       char: mk(Char),
         .                       never: mk(Never),
         .                       isize: mk(Int(ty::IntTy::Isize)),
         .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
         .           
         .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonLifetimes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
        67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
         .           
         .                   CommonLifetimes {
         5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
         5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
         5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonConsts<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
         6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
         .           
         .                   CommonConsts {
         .                       unit: mk_const(ty::Const {
         .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
         .                           ty: types.unit,
         .                       }),
         .                   }
         .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
         .           
         .               /// Stores memory for globals (statics/consts).
         .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
         .           
         .               output_filenames: Arc<OutputFilenames>,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
    83,480 ( 0.00%)      pub fn typeck_opt_const_arg(
         .                   self,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx TypeckResults<'tcx> {
    33,392 ( 0.00%)          if let Some(param_did) = def.const_param_did {
         .                       self.typeck_const_arg((def.did, param_did))
         .                   } else {
         .                       self.typeck(def.did)
         .                   }
    66,784 ( 0.00%)      }
         .           
     4,500 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     1,500 ( 0.00%)          self.arena.alloc(Steal::new(thir))
     6,000 ( 0.00%)      }
         .           
    30,000 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     6,000 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    42,000 ( 0.00%)      }
         .           
     6,000 ( 0.00%)      pub fn alloc_steal_promoted(
         .                   self,
         .                   promoted: IndexVec<Promoted, Body<'tcx>>,
         .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     1,500 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
     7,500 ( 0.00%)      }
         .           
     1,818 ( 0.00%)      pub fn alloc_adt_def(
         .                   self,
         .                   did: DefId,
         .                   kind: AdtKind,
         .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
         .                   repr: ReprOptions,
         .               ) -> &'tcx ty::AdtDef {
     3,232 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
       808 ( 0.00%)      }
         .           
         .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        20 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
         .                   // Create an allocation that just contains these bytes.
         4 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        52 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
         .                   self.create_memory_alloc(alloc)
        20 ( 0.00%)      }
         .           
         .               /// Returns a range of the start/end indices specified with the
         .               /// `rustc_layout_scalar_valid_range` attribute.
         .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    32,528 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    16,264 ( 0.00%)          let attrs = self.get_attrs(def_id);
    69,122 ( 0.00%)          let get = |name| {
    16,264 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
         .                           Some(attr) => attr,
         .                           None => return Bound::Unbounded,
         .                       };
         .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
       776 ( 0.00%)              if let Some(
         .                           &[
         .                               ast::NestedMetaItem::Literal(ast::Lit {
       388 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
         .                               }),
         .                           ],
       194 ( 0.00%)              ) = attr.meta_item_list().as_deref()
         .                       {
         .                           Bound::Included(a)
         .                       } else {
         .                           self.sess
         .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
         .                           Bound::Unbounded
         .                       }
    81,320 ( 0.00%)          };
    24,396 ( 0.00%)          (
    24,396 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    12,198 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
         .                   )
    32,528 ( 0.00%)      }
         .           
         .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
         .                   value.lift_to_tcx(self)
         .               }
         .           
         .               /// Creates a type context and call the closure with a `TyCtxt` reference
         .               /// to the context. The closure enforces that the type context and any interned
         .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
         .               /// reference to the context, to allow formatting values that need it.
        23 ( 0.00%)      pub fn create_global_ctxt(
         .                   s: &'tcx Session,
         .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
         .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
         .                   resolutions: ty::ResolverOutputs,
         .                   krate: &'tcx hir::Crate<'tcx>,
         .                   dep_graph: DepGraph,
         .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
         .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
         .                   query_kinds: &'tcx [DepKindStruct],
         .                   crate_name: &str,
         .                   output_filenames: OutputFilenames,
         .               ) -> GlobalCtxt<'tcx> {
         1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
         .                       s.fatal(&err);
         .                   });
         .                   let interners = CtxtInterners::new(arena);
         .                   let common_types = CommonTypes::new(&interners);
         .                   let common_lifetimes = CommonLifetimes::new(&interners);
         .                   let common_consts = CommonConsts::new(&interners, &common_types);
         .           
       127 ( 0.00%)          GlobalCtxt {
         .                       sess: s,
         6 ( 0.00%)              lint_store,
         .                       arena,
         2 ( 0.00%)              interners,
         5 ( 0.00%)              dep_graph,
         4 ( 0.00%)              untracked_resolutions: resolutions,
         2 ( 0.00%)              prof: s.prof.clone(),
         .                       types: common_types,
         .                       lifetimes: common_lifetimes,
         .                       consts: common_consts,
         .                       untracked_crate: krate,
         .                       on_disk_cache,
         .                       queries,
         .                       query_caches: query::QueryCaches::default(),
         .                       query_kinds,
         .                       ty_rcache: Default::default(),
         .                       pred_rcache: Default::default(),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
         .                       data_layout,
         .                       alloc_map: Lock::new(interpret::AllocMap::new()),
         .                       output_filenames: Arc::new(output_filenames),
         .                   }
         9 ( 0.00%)      }
         .           
         .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
         .                   &self.query_kinds[k as usize]
         .               }
         .           
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   ty: Ty<'tcx>,
         .                   span: S,
         .                   msg: &str,
         .               ) -> &'tcx Const<'tcx> {
         .                   self.sess.delay_span_bug(span, msg);
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
         .               }
         .           
    62,321 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     8,903 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    67,900 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    71,224 ( 0.00%)      }
         .           
         .               /// Obtain all lang items of this crate and all dependencies (recursively)
 3,995,901 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
         .                   self.get_lang_items(())
 5,137,587 ( 0.03%)      }
         .           
         .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
         .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       539 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
         .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       616 ( 0.00%)      }
         .           
         .               /// Obtain the diagnostic item's name
    57,190 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
         .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    65,360 ( 0.00%)      }
         .           
         .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
    80,885 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
         .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
    92,440 ( 0.00%)      }
         .           
    20,615 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
         .                   self.stability_index(())
    26,505 ( 0.00%)      }
         .           
 1,714,769 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
         .                   self.features_query(())
 1,959,736 ( 0.01%)      }
         .           
   100,828 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
         .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   638,675 ( 0.00%)          if let Some(id) = id.as_local() {
         .                       self.untracked_resolutions.definitions.def_key(id)
         .                   } else {
   663,811 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
         .                   }
    69,570 ( 0.00%)      }
         .           
         .               /// Converts a `DefId` into its fully expanded `DefPath` (every
         .               /// `DefId` is really just an interned `DefPath`).
         .               ///
         .               /// Note that if `id` is not local to this crate, the result will
         .               ///  be a non-local `DefPath`.
       180 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
         .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
       270 ( 0.00%)          if let Some(id) = id.as_local() {
        45 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
         .                   } else {
       375 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
         .                   }
       270 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    20,199 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
         .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
         .                   } else {
    15,315 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
         .                   if crate_num == LOCAL_CRATE {
         .                       self.sess.local_stable_crate_id()
         .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
         .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
         .                       self.def_path(def_id).to_string_no_crate_verbose()
         .                   )
         .               }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
    85,614 ( 0.00%)          &*self.untracked_resolutions.cstore
    42,807 ( 0.00%)      }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
         .                   &self.untracked_resolutions.definitions
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    12,367 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    49,969 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         .                   let resolutions = &self.gcx.untracked_resolutions;
         .                   StableHashingContext::ignore_spans(
         .                       self.sess,
         .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
         .               /// If `true`, we should use the MIR-based borrowck, but also
         .               /// fall back on the AST borrowck if the MIR-based one errors.
         .               pub fn migrate_borrowck(self) -> bool {
         .                   self.borrowck_mode().migrate()
         .               }
         .           
         .               /// What mode(s) of borrowck should we run? AST? MIR? both?
         .               /// (Also considers the `#![feature(nll)]` setting.)
     2,874 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
         .                   // Here are the main constraints we need to deal with:
         .                   //
         .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
         .                   //    synonymous with no `-Z borrowck=...` flag at all.
         .                   //
         .                   // 2. We want to allow developers on the Nightly channel
         .                   //    to opt back into the "hard error" mode for NLL,
         .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
         .                   //   errors. (To simplify the code here, it now even overrides
         .                   //   a user's attempt to specify `-Z borrowck=compare`, which
         .                   //   we arguably do not need anymore and should remove.)
         .                   //
         .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
         .                   //
         .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
         .           
     4,311 ( 0.00%)          if self.features().nll {
         .                       return BorrowckMode::Mir;
         .                   }
         .           
     1,437 ( 0.00%)          self.sess.opts.borrowck_mode
     5,748 ( 0.00%)      }
         .           
         .               /// If `true`, we should use lazy normalization for constants, otherwise
         .               /// we still evaluate them eagerly.
         .               #[inline]
         .               pub fn lazy_normalization(self) -> bool {
        69 ( 0.00%)          let features = self.features();
         .                   // Note: We only use lazy normalization for generic const expressions.
        43 ( 0.00%)          features.generic_const_exprs
         .               }
         .           
         .               #[inline]
         .               pub fn local_crate_exports_generics(self) -> bool {
         .                   debug_assert!(self.sess.opts.share_generics());
         .           
     8,228 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
    13,718 ( 0.00%)              match crate_type {
         .                           CrateType::Executable
         .                           | CrateType::Staticlib
         .                           | CrateType::ProcMacro
         .                           | CrateType::Cdylib => false,
         .           
         .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
         .                           // We want to block export of generics from dylibs,
         .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
         .                       // FIXME(#42706) -- in some cases, we could do better here.
         .                       return true;
         .                   }
         .                   false
         .               }
         .           
         .               /// Determines whether identifiers in the assembly have strict naming rules.
         .               /// Currently, only NVPTX* targets need it.
    16,116 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    16,116 ( 0.00%)          self.sess.target.arch.contains("nvptx")
    32,232 ( 0.00%)      }
         .           
         .               /// Returns `&'static core::panic::Location<'static>`.
     9,270 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
         .                   self.mk_imm_ref(
     1,545 ( 0.00%)              self.lifetimes.re_static,
         .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
     3,090 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
         .                   )
     9,270 ( 0.00%)      }
         .           
         .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    12,243 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
     8,904 ( 0.00%)          match self.def_kind(def_id) {
         .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
         .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
         .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
         .                       },
    20,034 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
         .                   }
    10,017 ( 0.00%)      }
         .           
    78,708 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
         .                   self.limits(()).type_length_limit
    89,952 ( 0.00%)      }
         .           
 1,298,584 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
         .                   self.limits(()).recursion_limit
 1,484,096 ( 0.01%)      }
         .           
   413,126 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
         .                   self.limits(()).move_size_limit
   472,144 ( 0.00%)      }
         .           
    23,163 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
         .                   self.limits(()).const_eval_limit
    26,472 ( 0.00%)      }
         .           
         .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
         .                   iter::once(LOCAL_CRATE)
         .                       .chain(self.crates(()).iter().copied())
         .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
         .               }
         .           }
         .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
         .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
         .           }
         .           
         .           macro_rules! nop_lift {
         .               ($set:ident; $ty:ty => $lifted:ty) => {
         .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
         .                       type Lifted = $lifted;
         .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
     9,452 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
         .                               Some(unsafe { mem::transmute(self) })
         .                           } else {
         .                               None
         .                           }
         .                       }
         .                   }
         .               };
         .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
         .               /// This is the implicit state of rustc. It contains the current
         .               /// `TyCtxt` and query. It is updated when creating a local interner or
         .               /// executing a new query. Whenever there's a `TyCtxt` value available
         .               /// you should also have access to an `ImplicitCtxt` through the functions
         .               /// in this module.
         .               #[derive(Clone)]
         .               pub struct ImplicitCtxt<'a, 'tcx> {
         .                   /// The current `TyCtxt`.
         2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
         .           
         .                   /// The current query job, if any. This is updated by `JobOwner::start` in
         .                   /// `ty::query::plumbing` when executing a query.
         .                   pub query: Option<query::QueryJobId<DepKind>>,
         .           
         .                   /// Where to store diagnostics for the current query job, if any.
         .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
         .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
         .                   pub layout_depth: usize,
         .           
         .                   /// The current dep graph task. This is used to add dependencies to queries
         .                   /// when executing them.
         .                   pub task_deps: TaskDepsRef<'a>,
         .               }
         .           
         .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
         5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
         .                       let tcx = TyCtxt { gcx };
        25 ( 0.00%)              ImplicitCtxt {
         .                           tcx,
         .                           query: None,
         .                           diagnostics: None,
         .                           layout_depth: 0,
         .                           task_deps: TaskDepsRef::Ignore,
         .                       }
         5 ( 0.00%)          }
         .               }
         .           
         .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
         .               /// to `value` during the call to `f`. It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(parallel_compiler)]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
         .           
         .               /// Sets TLV to `value` during the call to `f`.
         .               /// It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
         .                   let old = get_tlv();
   225,012 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
         .                   TLV.with(|tlv| tlv.set(value));
         .                   f()
         .               }
         .           
         .               /// Gets the pointer to the current `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
         .               }
         .           
         .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
         .               #[inline]
         .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
         .               #[inline]
         .               pub fn with_context_opt<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
         .               {
         .                   let context = get_tlv();
   994,186 ( 0.01%)          if context == 0 {
         .                       f(None)
         .                   } else {
         .                       // We could get an `ImplicitCtxt` pointer from another thread.
         .                       // Ensure that `ImplicitCtxt` is `Sync`.
         .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
         .           
         .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
         .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
         .           
         .               /// Allows access to the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with_context<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
     6,128 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
         .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
         .               /// as the `TyCtxt` passed in.
         .               /// This will panic if you pass it a `TyCtxt` which is different from the current
         .               /// `ImplicitCtxt`'s `tcx` field.
         .               #[inline]
         .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
         .               {
         .                   with_context(|context| unsafe {
   474,261 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
         .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   465,826 ( 0.00%)              f(context)
         .                   })
         .               }
         .           
         .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with<F, R>(f: F) -> R
         .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
         .               fn into_pointer(&self) -> *const () {
         .                   self.0 as *const _ as *const ()
         .               }
         .           }
         .           
         .           #[allow(rustc::usage_of_ty_tykind)]
         .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 1,164,376 ( 0.01%)          &self.0.kind()
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   697,568 ( 0.00%)          self.0.kind().hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   303,460 ( 0.00%)          &self.0.kind
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   114,684 ( 0.00%)          self.0.kind.hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
         .               fn borrow<'a>(&'a self) -> &'a [T] {
 1,115,238 ( 0.01%)          &self.0[..]
         .               }
         .           }
         .           
         .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
         .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
         .           
         .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   147,896 ( 0.00%)          self.0[..].hash(s)
         .               }
         .           }
         .           
         .           macro_rules! direct_interners {
         .               ($($name:ident: $method:ident($ty:ty),)+) => {
         .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
         .                       fn borrow<'a>(&'a self) -> &'a $ty {
   375,340 ( 0.00%)                  &self.0
         .                       }
         .                   }
         .           
         .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
         .                       fn eq(&self, other: &Self) -> bool {
         .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
         .                           // equals `x == y`.
         .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
         .                   }
         .           
         .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
         .           
         .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
         .                       fn hash<H: Hasher>(&self, s: &mut H) {
         .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
         .                           // x.hash(s)`.
   282,659 ( 0.00%)                  self.0.hash(s)
         .                       }
         .                   }
         .           
         .                   impl<'tcx> TyCtxt<'tcx> {
 3,518,341 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 1,987,481 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    69,606 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
         .                           }).0
 3,943,341 ( 0.02%)              }
         .                   })+
         .               }
         .           }
         .           
         .           direct_interners! {
         .               region: mk_region(RegionKind),
         .               const_: mk_const(Const<'tcx>),
         .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
         .               adt_def: intern_adt_def(AdtDef),
         .               stability: intern_stability(attr::Stability),
         .               const_stability: intern_const_stability(attr::ConstStability),
         .           }
         .           
         .           macro_rules! slice_interners {
         .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
         .                   impl<'tcx> TyCtxt<'tcx> {
12,345,785 ( 0.06%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
         .                           self.interners.$field.intern_ref(v, || {
         .                               Interned(List::from_arena(&*self.arena, v))
         .                           }).0
11,003,517 ( 0.06%)              })+
         .                   }
         .               );
         .           }
         .           
         .           slice_interners!(
         .               type_list: _intern_type_list(Ty<'tcx>),
         .               substs: _intern_substs(GenericArg<'tcx>),
         .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
         .               /// unsafe.
         .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
         .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
         .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
         .               }
         .           
         .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
         .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
       240 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
         .                   self.super_traits_of(trait_def_id).any(|trait_did| {
         .                       self.associated_items(trait_did)
         .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
         .                           .is_some()
         .                   })
       180 ( 0.00%)      }
         .           
         .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
         .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
         .               /// to identify which traits may define a given associated type to help avoid cycle errors.
         .               /// Returns a `DefId` iterator.
         .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
         .                   let mut set = FxHashSet::default();
        40 ( 0.00%)          let mut stack = vec![trait_def_id];
         .           
         .                   set.insert(trait_def_id);
         .           
       180 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
        58 ( 0.00%)              let trait_did = stack.pop()?;
        29 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
         .           
         .                       for (predicate, _) in generic_predicates.predicates {
        30 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
        20 ( 0.00%)                      if set.insert(data.def_id()) {
         .                                   stack.push(data.def_id());
         .                               }
         .                           }
         .                       }
         .           
         .                       Some(trait_did)
         .                   })
         .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
         .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
         .                   })
         .               }
         .           
         .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
         .               /// `*r == kind`.
         .               #[inline]
         .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   250,252 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
         .               }
         .           
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline]
         .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
 9,091,311 ( 0.05%)          self.interners.intern_ty(st)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 4,222,300 ( 0.02%)          let inner = self.interners.intern_predicate(binder);
         .                   Predicate { inner }
         .               }
         .           
         .               #[inline]
 2,112,360 ( 0.01%)      pub fn reuse_or_mk_predicate(
         .                   self,
         .                   pred: Predicate<'tcx>,
         .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> Predicate<'tcx> {
   139,471 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 2,112,360 ( 0.01%)      }
         .           
         .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
       855 ( 0.00%)          match tm {
         .                       IntTy::Isize => self.types.isize,
         .                       IntTy::I8 => self.types.i8,
         .                       IntTy::I16 => self.types.i16,
         .                       IntTy::I32 => self.types.i32,
         .                       IntTy::I64 => self.types.i64,
         .                       IntTy::I128 => self.types.i128,
         .                   }
       855 ( 0.00%)      }
         .           
         .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     1,443 ( 0.00%)          match tm {
         .                       UintTy::Usize => self.types.usize,
         .                       UintTy::U8 => self.types.u8,
         .                       UintTy::U16 => self.types.u16,
         .                       UintTy::U32 => self.types.u32,
         .                       UintTy::U64 => self.types.u64,
         .                       UintTy::U128 => self.types.u128,
         .                   }
     1,443 ( 0.00%)      }
         .           
         .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
         .                   match tm {
         .                       FloatTy::F32 => self.types.f32,
         .                       FloatTy::F64 => self.types.f64,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_static_str(self) -> Ty<'tcx> {
     6,960 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   // Take a copy of substs so that we own the vectors inside.
         .                   self.mk_ty(Adt(def, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
         .                   self.mk_ty(Foreign(def_id))
         .               }
         .           
       408 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
         .                   let adt_def = self.adt_def(wrapper_def_id);
         .                   let substs =
       765 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
         .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
        51 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       204 ( 0.00%)                      if param.index == 0 {
         .                                   ty_param.into()
         .                               } else {
        51 ( 0.00%)                          assert!(has_default);
       153 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
         .                               }
         .                           }
         .                       });
        51 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
       408 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
       255 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
       456 ( 0.00%)          self.mk_generic_adt(def_id, ty)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
         .                   let def_id = self.lang_items().require(item).ok()?;
         .                   Some(self.mk_generic_adt(def_id, ty))
         .               }
         .           
-- line 2293 ----------------------------------------
-- line 2329 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
         .               }
         .           
         .               #[inline]
    86,770 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
         .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    90,392 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Slice(ty))
         .               }
         .           
         .               #[inline]
         .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
     5,240 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     6,463 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
         .               }
         .           
         .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    74,732 ( 0.00%)          iter.intern_with(|ts| {
   394,318 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   575,738 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    67,140 ( 0.00%)          })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_unit(self) -> Ty<'tcx> {
     7,459 ( 0.00%)          self.types.unit
         .               }
         .           
         .               #[inline]
         .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
         .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(FnDef(def_id, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
     3,690 ( 0.00%)          self.mk_ty(FnPtr(fty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_dynamic(
         .                   self,
         .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   reg: ty::Region<'tcx>,
         .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(TyVar(v))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     2,076 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(IntVar(v))
         .               }
         .           
         .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
         .                   self.mk_ty(Param(ParamTy { index, name }))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
         .               }
         .           
    16,849 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
     9,731 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
     6,912 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
         .                       }
     2,510 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
         .                       GenericParamDefKind::Const { .. } => {
         .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
         .                       }
         .                   }
    16,849 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Opaque(def_id, substs))
         .               }
         .           
    63,581 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
    63,581 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
   127,162 ( 0.00%)      }
         .           
       439 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
     1,317 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
       878 ( 0.00%)      }
         .           
     1,151 ( 0.00%)      pub fn mk_place_downcast(
         .                   self,
         .                   place: Place<'tcx>,
         .                   adt_def: &'tcx AdtDef,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
     1,151 ( 0.00%)          self.mk_place_elem(
         .                       place,
     2,302 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
         .                   )
     2,302 ( 0.00%)      }
         .           
         .               pub fn mk_place_downcast_unnamed(
         .                   self,
         .                   place: Place<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
         .               }
         .           
        24 ( 0.00%)      pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        24 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Index(index))
        48 ( 0.00%)      }
         .           
         .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
         .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
         .               /// flight.
   591,786 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
         .                   let mut projection = place.projection.to_vec();
         .                   projection.push(elem);
         .           
         .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   657,540 ( 0.00%)      }
         .           
     9,730 ( 0.00%)      pub fn intern_poly_existential_predicates(
         .                   self,
         .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
     1,390 ( 0.00%)          assert!(!eps.is_empty());
         .                   assert!(
         .                       eps.array_windows()
       120 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
         .                               != Ordering::Greater)
         .                   );
     5,560 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    11,120 ( 0.00%)      }
         .           
         .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
         .                   // FIXME consider asking the input slice to be sorted to avoid
         .                   // re-interning permutations, in which case that would be asserted
         .                   // here.
    17,532 ( 0.00%)          if preds.is_empty() {
         .                       // The macro-generated method below asserts we don't intern an empty slice.
         .                       List::empty()
         .                   } else {
     3,428 ( 0.00%)              self._intern_predicates(preds)
         .                   }
    28,208 ( 0.00%)      }
         .           
         .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   165,745 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    23,290 ( 0.00%)      }
         .           
         .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 1,900,237 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   103,702 ( 0.00%)      }
         .           
         .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
         .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
         .               }
         .           
         .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   196,913 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    53,910 ( 0.00%)      }
         .           
         .               pub fn intern_canonical_var_infos(
         .                   self,
         .                   ts: &[CanonicalVarInfo<'tcx>],
         .               ) -> CanonicalVarInfos<'tcx> {
    68,129 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     3,114 ( 0.00%)      }
         .           
         .               pub fn intern_bound_variable_kinds(
         .                   self,
         .                   ts: &[ty::BoundVariableKind],
         .               ) -> &'tcx List<ty::BoundVariableKind> {
    23,071 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    31,458 ( 0.00%)      }
         .           
         .               pub fn mk_fn_sig<I>(
         .                   self,
         .                   inputs: I,
         .                   output: I::Item,
         .                   c_variadic: bool,
         .                   unsafety: hir::Unsafety,
         .                   abi: abi::Abi,
         .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
         .               where
         .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
         .               {
         .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
     7,687 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     1,727 ( 0.00%)              c_variadic,
     2,300 ( 0.00%)              unsafety,
     2,308 ( 0.00%)              abi,
       580 ( 0.00%)          })
         .               }
         .           
         .               pub fn mk_poly_existential_predicates<
         .                   I: InternAs<
         .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   >,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
     5,537 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
         .               }
         .           
         .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
        24 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
         .               }
         .           
         .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
   135,071 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
         .               }
         .           
     2,001 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   917,459 ( 0.00%)          iter.intern_with(|xs| self.intern_substs(xs))
     2,668 ( 0.00%)      }
         .           
         .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   271,160 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
         .               }
         .           
   194,876 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
         .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   389,752 ( 0.00%)      }
         .           
         .               pub fn mk_bound_variable_kinds<
         .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   107,973 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
         .               }
         .           
         .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
         .               /// It stops at `bound` and just returns it if reached.
 1,812,188 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 1,812,188 ( 0.01%)          let hir = self.hir();
         .                   loop {
 2,687,877 ( 0.01%)              if id == bound {
         .                           return bound;
         .                       }
         .           
 3,195,095 ( 0.02%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
         .                           return id;
         .                       }
         .                       let next = hir.get_parent_node(id);
 1,911,225 ( 0.01%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
 2,588,840 ( 0.01%)      }
         .           
    23,232 ( 0.00%)      pub fn lint_level_at_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   mut id: hir::HirId,
         .               ) -> (Level, LintLevelSource) {
         .                   let sets = self.lint_levels(());
         .                   loop {
   139,305 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
         .                           return pair;
         .                       }
    10,961 ( 0.00%)              let next = self.hir().get_parent_node(id);
    32,883 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
    23,232 ( 0.00%)      }
         .           
     1,246 ( 0.00%)      pub fn struct_span_lint_hir(
         .                   self,
         .                   lint: &'static Lint,
         .                   hir_id: HirId,
         .                   span: impl Into<MultiSpan>,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
     7,586 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     2,321 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
       712 ( 0.00%)      }
         .           
         .               pub fn struct_lint_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   id: HirId,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
         .                   let (level, src) = self.lint_level_at_node(lint, id);
         .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
         .               }
         .           
    22,666 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     6,476 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
         .                   let candidates = map.get(&id.local_id)?;
     6,476 ( 0.00%)          Some(&*candidates)
    25,904 ( 0.00%)      }
         .           
    44,919 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
         .                   debug!(?id, "named_region");
         .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    57,753 ( 0.00%)      }
         .           
     1,197 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
         .                   self.is_late_bound_map(id.owner)
        59 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     1,064 ( 0.00%)      }
         .           
    24,353 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
         .                   self.object_lifetime_defaults_map(id.owner)
    31,311 ( 0.00%)      }
         .           
    15,201 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
         .                   self.mk_bound_variable_kinds(
         .                       self.late_bound_vars_map(id.owner)
         .                           .and_then(|map| map.get(&id.local_id).cloned())
         .                           .unwrap_or_else(|| {
         .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
         .                           })
         .                           .iter(),
         .                   )
    15,201 ( 0.00%)      }
         .           
         .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
         .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
         .               }
         .           
         .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
         .               /// feature gates
     1,060 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       106 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        33 ( 0.00%)              match self.lookup_const_stability(def_id) {
        44 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
         .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
         .                               // corresponding feature gate.
        12 ( 0.00%)                      self.features()
         .                                   .declared_lib_features
         .                                   .iter()
         .                                   .any(|&(sym, _)| sym == stability.feature)
         .                           }
         .                           // functions without const stability are either stable user written
         .                           // const fn or the user is using feature gates and we thus don't
         .                           // care what they do
         .                           _ => true,
         .                       }
         .                   } else {
         .                       false
         .                   }
       954 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
         .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
         .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
         .           }
         .           
         .           impl<I, T, R, E> InternAs<[T], R> for I
         .           where
         .               E: InternIteratorElement<T, R>,
         .               I: Iterator<Item = E>,
         .           {
         .               type Output = E::Output;
   264,712 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
         .               where
         .                   F: FnOnce(&[T]) -> R,
         .               {
 4,704,297 ( 0.02%)          E::intern_with(self, f)
   155,394 ( 0.00%)      }
         .           }
         .           
         .           pub trait InternIteratorElement<T, R>: Sized {
         .               type Output;
         .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
         .           }
         .           
         .           impl<T, R> InternIteratorElement<T, R> for T {
         .               type Output = R;
 1,768,145 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`.
 1,837,050 ( 0.01%)          match iter.size_hint() {
         .                       (0, Some(0)) => {
         6 ( 0.00%)                  assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
         .                           let t0 = iter.next().unwrap();
        46 ( 0.00%)                  assert!(iter.next().is_none());
   147,317 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
         .                           let t0 = iter.next().unwrap();
         .                           let t1 = iter.next().unwrap();
       645 ( 0.00%)                  assert!(iter.next().is_none());
   197,200 ( 0.00%)                  f(&[t0, t1])
         .                       }
     4,384 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
         .                   }
 1,800,409 ( 0.01%)      }
         .           }
         .           
         .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
         .           where
         .               T: Clone + 'a,
         .           {
         .               type Output = R;
    17,810 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
         .                   // This code isn't hot.
       232 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    14,464 ( 0.00%)      }
         .           }
         .           
         .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
         .               type Output = Result<R, E>;
   949,623 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`, unless a failure happens first, in which case the result
         .                   // will be an error anyway.
   770,728 ( 0.00%)          Ok(match iter.size_hint() {
         .                       (0, Some(0)) => {
         .                           assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
     4,038 ( 0.00%)                  let t0 = iter.next().unwrap()?;
         .                           assert!(iter.next().is_none());
    36,938 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
     1,557 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     1,557 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     2,304 ( 0.00%)                  assert!(iter.next().is_none());
   100,988 ( 0.00%)                  f(&[t0, t1])
         .                       }
     8,680 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
         .                   })
 1,086,014 ( 0.01%)      }
         .           }
         .           
         .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
         .           // won't work for us.
         .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   474,261 ( 0.00%)      t as *const () == u as *const ()
         .           }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      providers.in_scope_traits_map =
         .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
         3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
         2 ( 0.00%)      providers.module_reexports =
         .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
         2 ( 0.00%)      providers.crate_name = |tcx, id| {
         1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
         1 ( 0.00%)          tcx.crate_name
         .               };
         2 ( 0.00%)      providers.maybe_unused_trait_import =
         .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
         2 ( 0.00%)      providers.maybe_unused_extern_crates =
         .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
         2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
         .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
         .               };
         .           
        11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_const_stability =
         9 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_deprecation_entry =
    23,536 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
         2 ( 0.00%)      providers.extern_mod_stmt_cnum =
         .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
         3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
         3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
         2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
         .               };
         2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
         .               };
         2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         .                   // We want to check if the panic handler was defined in this crate
         3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
         .               };
         .           }

 6,661,831 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 141 ----------------------------------------
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
 3,944,984 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
    11,313 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     8,500 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
         .               ///     assert_eq!(first, &0);
         .               ///     assert_eq!(elements, &[1, 2]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
         6 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    66,887 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn last(&self) -> Option<&T> {
 3,024,747 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 2,975,927 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
         .               pub const fn as_ptr(&self) -> *const T {
 3,851,014 ( 0.02%)          self as *const [T] as *const T
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        31 ( 0.00%)          self as *mut [T] as *mut T
         .               }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 556 ----------------------------------------
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "slice_ptr_range", since = "1.48.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr_range(&mut self) -> Range<*mut T> {
         .                   let start = self.as_mut_ptr();
         .                   // SAFETY: See as_ptr_range() above for why `add` here is safe.
         .                   let end = unsafe { start.add(self.len()) };
         1 ( 0.00%)          start..end
         .               }
         .           
         .               /// Swaps two elements in the slice.
         .               ///
         .               /// # Arguments
         .               ///
         .               /// * a - The index of the first element
         .               /// * b - The index of the second element
-- line 572 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
   173,398 ( 0.00%)          let _ = &self[a];
   222,762 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 644 ----------------------------------------
         .               /// ```
         .               /// let mut v = [1, 2, 3];
         .               /// v.reverse();
         .               /// assert!(v == [3, 2, 1]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn reverse(&mut self) {
         4 ( 0.00%)          let half_len = self.len() / 2;
         .                   let Range { start, end } = self.as_mut_ptr_range();
         .           
         .                   // These slices will skip the middle item for an odd length,
         .                   // since that one doesn't need to move.
         .                   let (front_half, back_half) =
         .                       // SAFETY: Both are subparts of the original slice, so the memory
         .                       // range is valid, and they don't overlap because they're each only
         .                       // half (or less) of the original slice.
-- line 660 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
    18,045 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       420 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   197,310 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
    13,308 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
    15,014 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
         .               }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let n = needle.len();
     4,569 ( 0.00%)          self.len() >= n && needle == &self[..n]
         .               }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let (m, n) = (self.len(), needle.len());
    80,044 ( 0.00%)          m >= n && needle == &self[m - n..]
         .               }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
26,340,991 ( 0.13%)          while left < right {
35,689,502 ( 0.18%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 4,077,316 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
10,711,897 ( 0.05%)              if cmp == Less {
16,720,504 ( 0.08%)                  left = mid + 1;
 5,048,587 ( 0.03%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
28,954,337 ( 0.15%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
   413,360 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
         .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
         .                   let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
    85,328 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    85,328 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    85,328 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
         .               /// let v = [1, 2, 3, 3, 5, 6, 7];
         .               /// let i = v.partition_point(|&x| x < 5);
         .               ///
         .               /// assert_eq!(i, 4);
         .               /// assert!(v[..i].iter().all(|&x| x < 5));
         .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
         .               /// ```
         .               #[stable(feature = "partition_point", since = "1.52.0")]
        29 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
         .               where
         .                   P: FnMut(&T) -> bool,
         .               {
         .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
        58 ( 0.00%)      }
         .           
         .               /// Removes the subslice corresponding to the given range
         .               /// and returns a reference to it.
         .               ///
         .               /// Returns `None` and does not modify the slice if the given
         .               /// range is out of bounds.
         .               ///
         .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

19,103,904 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           pub fn move_path_children_matching<'tcx, F>(
        .               move_data: &MoveData<'tcx>,
        .               path: MovePathIndex,
        .               mut cond: F,
        .           ) -> Option<MovePathIndex>
        .           where
        .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
        .           {
    1,342 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
    3,716 ( 0.00%)      while let Some(child_index) = next_child {
        .                   let move_path_children = &move_data.move_paths[child_index];
    3,072 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
    5,109 ( 0.00%)              if cond(elem) {
        .                           return Some(child_index);
        .                       }
        .                   }
        .                   next_child = move_path_children.next_sibling;
        .               }
        .           
        .               None
        .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
4,164,700 ( 0.02%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
1,199,367 ( 0.01%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   81,492 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
6,310,816 ( 0.03%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
1,577,704 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
6,310,816 ( 0.03%)      }
        .           
7,466,190 ( 0.04%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
  314,473 ( 0.00%)          each_child(move_path_index);
        .           
5,525,256 ( 0.03%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  494,902 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
1,081,398 ( 0.01%)          while let Some(child_index) = next_child_index {
  138,642 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
   23,107 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
6,032,618 ( 0.03%)      }
4,513,090 ( 0.02%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   53,885 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
   36,260 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
    9,065 ( 0.00%)          let ty = place.ty(body, tcx).ty;
        .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
        .           
    4,999 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
   55,631 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
    8,882 ( 0.00%)              each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
  130,605 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
   11,676 ( 0.00%)      for arg in body.args_iter() {
   18,276 ( 0.00%)          let place = mir::Place::from(arg);
   27,414 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    9,330 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
   93,408 ( 0.00%)  }
        .           
7,082,238 ( 0.04%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  233,983 ( 0.00%)      for mi in &move_data.loc_map[loc] {
1,546,395 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  417,981 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
  314,448 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
5,671,368 ( 0.03%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  233,983 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
1,384,292 ( 0.01%)          let init = move_data.inits[*ii];
  759,736 ( 0.00%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
  102,936 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
   42,890 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
   15,894 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
    1,999 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
    7,996 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
    5,997 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
    1,999 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
    2,016 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
   68,624 ( 0.00%)  }

4,927,129 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   54,698 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   14,906 ( 0.00%)              self.file = file;
   21,169 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   39,572 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
  103,194 ( 0.00%)          self.line_number = line_index + 1;
  154,681 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  614,116 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
    9,468 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
    4,734 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   23,670 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   33,138 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   18,936 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
2,319,912 ( 0.01%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
1,325,664 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  331,416 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  331,416 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  566,064 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  565,400 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
1,696,200 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  565,400 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  282,700 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  282,700 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  282,700 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
1,130,800 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   96,768 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  389,084 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   45,720 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
   54,864 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
   36,576 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
  118,716 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
  118,716 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
  243,580 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
  136,179 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      664 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
      996 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
    2,991 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    5,982 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   11,964 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   97,432 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   48,716 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   97,432 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   48,716 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  243,580 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  146,148 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  146,148 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
  146,148 ( 0.00%)          Some((
   48,716 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   48,716 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
2,982,744 ( 0.02%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
3,827,315 ( 0.02%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
  272,358 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   36,578 ( 0.00%)              if idx != avoid_idx
   19,899 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
   45,720 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
    9,144 ( 0.00%)          if !self.source_map.files().is_empty() {
   18,288 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
   73,152 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
   45,720 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

4,339,269 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
       984 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       492 ( 0.00%)              from_str_radix(src, radix)
     1,476 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   859,065 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 1,507,908 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 3,411,591 ( 0.02%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
48,518,881 ( 0.25%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
       126 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 4,421,034 ( 0.02%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   191,415 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
     7,176 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
 1,342,756 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
 2,134,343 ( 0.01%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
26,171,300 ( 0.13%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
12,781,930 ( 0.06%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
36,030,005 ( 0.18%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
       528 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
        96 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
11,933,941 ( 0.06%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
       192 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
        16 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 1,505,068 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
        32 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 7,169,756 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 1838 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
       198 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
         .                   }
         .           
         .                   /// Shifts self right by `rhs` bits.
         .                   ///
         .                   /// Returns a tuple of the shifted version of self along with a boolean
         .                   /// indicating whether the shift value was larger than or equal to the
         .                   /// number of bits. If the shift value is too large, then value is
         .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       168 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
    56,738 ( 0.00%)              if self <= 1 { return 0; }
         .           
    82,091 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   245,830 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    82,230 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
   107,294 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   396,029 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
  321,392 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
   30,775 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
    1,165 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
      870 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
      520 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
    1,305 ( 0.00%)      pub prev_token: Token,
      605 ( 0.00%)      pub capture_cfg: bool,
    1,295 ( 0.00%)      restrictions: Restrictions,
    1,040 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
    1,040 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
    1,040 ( 0.00%)      unmatched_angle_bracket_count: u32,
    1,560 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
      520 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
      520 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
    2,290 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
    2,080 ( 0.00%)      capturing: Capturing,
      520 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
    5,000 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
  152,389 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
   36,754 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
   11,090 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
   69,424 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
   24,008 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
   48,016 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    4,935 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   54,016 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
3,855,504 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
1,970,300 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   52,042 ( 0.00%)                  self.frame.open_delim = true;
  260,210 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
3,743,453 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
  209,666 ( 0.00%)              } else if !self.frame.close_delim {
   51,815 ( 0.00%)                  self.frame.close_delim = true;
  259,075 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  103,630 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  673,595 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
   21,654 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  746,668 ( 0.00%)              match tree {
        .                           TokenTree::Token(token) => {
2,570,336 ( 0.01%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
2,570,336 ( 0.01%)      }
        .           
   27,570 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
    8,271 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
        .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
   13,785 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
        .                   for ch in data.as_str().chars() {
        .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
        .                   self.next()
   24,813 ( 0.00%)      }
        .           }
        .           
   36,110 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
   28,888 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
      204 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    1,902 ( 0.00%)      Some(match token.kind {
    3,804 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    3,804 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    3,804 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
    6,657 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    1,902 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    6,657 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
    4,755 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
   13,818 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
      987 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    1,974 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
   30,597 ( 0.00%)          let mut parser = Parser {
        .                       sess,
      987 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
      987 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
    5,922 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
    1,974 ( 0.00%)          parser.bump();
        .           
        .                   parser
    8,883 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
1,906,140 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
   11,028 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  944,799 ( 0.00%)                  self.token_cursor.next()
        .                       };
1,270,760 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  317,690 ( 0.00%)              self.token_cursor.break_last_token = false;
1,270,760 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    4,100 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
1,108,515 ( 0.01%)              if matches!(
  635,380 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
1,270,760 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  955,836 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  106,204 ( 0.00%)          if self.expected_tokens.is_empty() {
    7,152 ( 0.00%)              if self.token == *t {
    5,960 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
1,260,144 ( 0.01%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
1,593,060 ( 0.01%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
1,293,504 ( 0.01%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
  215,584 ( 0.00%)          if edible.contains(&self.token.kind) {
  317,583 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
1,616,880 ( 0.01%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   90,228 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   69,243 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  158,830 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   22,690 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  136,140 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   90,760 ( 0.00%)          self.bump();
        .                   Ok(ident)
  226,900 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
6,204,198 ( 0.03%)      fn check(&mut self, tok: &TokenKind) -> bool {
2,672,484 ( 0.01%)          let is_present = self.token == *tok;
1,791,324 ( 0.01%)          if !is_present {
3,741,763 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
6,204,198 ( 0.03%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
      380 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
1,122,083 ( 0.01%)          let is_present = self.check(tok);
  742,704 ( 0.00%)          if is_present {
  124,746 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
      475 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
   64,110 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   19,415 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
  482,119 ( 0.00%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
  142,930 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  114,566 ( 0.00%)          if self.check_keyword(kw) {
   11,771 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
  142,930 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   13,226 ( 0.00%)          if self.token.is_keyword(kw) {
    3,155 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
      945 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
      756 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  116,968 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   58,528 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  131,589 ( 0.00%)      }
        .           
  103,398 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   41,700 ( 0.00%)          if ok {
        .                       true
        .                   } else {
   17,992 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
  103,398 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
   24,596 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   40,272 ( 0.00%)      fn check_path(&mut self) -> bool {
   92,970 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   50,340 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
    3,472 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
    3,424 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
   28,044 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
   15,580 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
   28,044 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
   10,676 ( 0.00%)          self.check_or_expected(
    5,338 ( 0.00%)              self.token.is_like_plus(),
    5,338 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  196,344 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  114,534 ( 0.00%)          if self.token.kind == expected {
   11,932 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   51,980 ( 0.00%)          match self.token.kind.break_two_token_op() {
      274 ( 0.00%)              Some((first, second)) if first == expected => {
      148 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
      185 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
      333 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
       37 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
      518 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   31,077 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  188,699 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
      228 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
   29,346 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
      408 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
    7,652 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   33,926 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   22,111 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    2,080 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    2,166 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
    7,652 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    3,066 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    1,533 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    1,022 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
  681,687 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    1,068 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
  527,937 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
  336,103 ( 0.00%)              if let Some(ref t) = sep.sep {
  309,016 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
  467,215 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
  197,052 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
  100,177 ( 0.00%)              let t = f(self)?;
    6,715 ( 0.00%)              v.push(t);
        .                   }
        .           
  151,368 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  120,564 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
   40,060 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   79,674 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   71,422 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
  106,763 ( 0.00%)          Ok((val, trailing))
   32,048 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
   15,625 ( 0.00%)          self.expect(bra)?;
   32,048 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
    6,214 ( 0.00%)              &token::OpenDelim(delim),
    8,464 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
4,130,451 ( 0.02%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
1,906,362 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
1,270,908 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  317,727 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  317,727 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
2,541,520 ( 0.01%)      pub fn bump(&mut self) {
1,270,760 ( 0.01%)          let next_token = self.next_tok(self.token.span);
1,906,140 ( 0.01%)          self.bump_with(next_token);
2,541,520 ( 0.01%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
      584 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    9,464 ( 0.00%)          if dist == 0 {
    3,844 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
  131,837 ( 0.00%)          let frame = &self.token_cursor.frame;
  135,256 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  398,338 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  469,215 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  658,986 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  193,503 ( 0.00%)                      Some(tree) => match tree {
   93,676 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
   26,015 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
  246,795 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
    3,588 ( 0.00%)          let mut token = Token::dummy();
    1,940 ( 0.00%)          while i < dist {
   25,960 ( 0.00%)              token = cursor.next().0;
   11,435 ( 0.00%)              if matches!(
    7,204 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
      925 ( 0.00%)              i += 1;
        .                   }
      225 ( 0.00%)          return looker(&token);
      657 ( 0.00%)      }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   40,023 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
   10,562 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   40,023 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
    1,978 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
    7,912 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
   22,776 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
    6,669 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
    2,465 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
   39,858 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
        .                       id: DUMMY_NODE_ID,
        .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
      664 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
   10,724 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
        .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
      902 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
    1,353 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    3,604 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    1,347 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
   18,153 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   16,136 ( 0.00%)          Ok(
   10,779 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
      606 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
      435 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
    7,524 ( 0.00%)                  match self.parse_token_tree() {
    9,405 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
    3,762 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
      272 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
        .                               let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
        .                               let expr = self.parse_expr_force_collect()?;
        .                               let span = expr.span;
        .           
        .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
        .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
   14,119 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
  326,971 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
  214,690 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
   18,456 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
    8,233 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
  102,144 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
   77,606 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
    3,958 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    3,958 ( 0.00%)                  let span = frame.span;
    1,979 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
    3,958 ( 0.00%)                  self.bump();
    9,895 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
      656 ( 0.00%)                  self.bump();
    1,640 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
   16,149 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
  106,956 ( 0.00%)          let old = self.restrictions;
  110,116 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
  109,518 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
   48,320 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   30,200 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   54,360 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
   33,610 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    6,722 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
    3,361 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
   13,444 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
    2,487 ( 0.00%)              return Ok(Visibility {
    7,461 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
      874 ( 0.00%)          let lo = self.prev_token.span;
        .           
    4,370 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
        .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
    2,622 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   30,249 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
      809 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
    2,130 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
      213 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
    2,130 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
  137,992 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   68,996 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
   45,795 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
  130,950 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
   12,056 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
    6,028 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
    6,028 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
   12,056 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

1,996,815 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           // maximum of number bytes needed to fill an 8-byte-sized element on which
         .           // SipHash operates. Note that for variable-sized copies which are known to be
         .           // less than 8 bytes, this function will perform more work than necessary unless
         .           // the compiler is able to optimize the extra work away.
         .           #[inline]
         .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
         .               debug_assert!(count <= 8);
         .           
   102,783 ( 0.00%)      if count == 8 {
         .                   ptr::copy_nonoverlapping(src, dst, 8);
         .                   return;
         .               }
         .           
         .               let mut i = 0;
   113,308 ( 0.00%)      if i + 3 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
         .                   i += 4;
         .               }
         .           
   247,814 ( 0.00%)      if i + 1 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    27,138 ( 0.00%)          i += 2
         .               }
         .           
   113,308 ( 0.00%)      if i < count {
    77,628 ( 0.00%)          *dst.add(i) = *src.add(i);
         .                   i += 1;
         .               }
         .           
         .               debug_assert_eq!(i, count);
         .           }
         .           
         .           // # Implementation
         .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
         .           
         .                   hasher
         .               }
         .           
         .               // A specialized write function for values with size <= 8.
         .               #[inline]
         .               fn short_write<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
 2,457,056 ( 0.01%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
16,491,588 ( 0.08%)          if nbuf + size < BUFFER_SIZE {
         .                       unsafe {
         .                           // The memcpy call is optimized away because the size is known.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .                       }
         .           
 5,305,339 ( 0.03%)              self.nbuf = nbuf + size;
         .           
         .                       return;
         .                   }
         .           
   757,560 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
         .               }
         .           
         .               // A specialized write function for values with size <= 8 that should only
         .               // be called when the write would cause the buffer to fill.
         .               //
         .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
         .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
         .               // overflow) if it wasn't already.
         .               #[inline(never)]
   246,330 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
   246,330 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
         .                   // Copy first part of input into end of buffer, possibly into spill
         .                   // element. The memcpy call is optimized away because the size is known.
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .           
         .                   // Process buffer.
         .                   for i in 0..BUFFER_CAPACITY {
 2,463,300 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 1,970,640 ( 0.01%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
 2,216,970 ( 0.01%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer by copying size - 1
         .                   // elements from spill (at most size - 1 bytes could have overflowed
         .                   // into the spill). The memcpy call is optimized away because the size
         .                   // is known. And the whole copy is optimized away for size == 1.
         .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
         .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
         .           
         .                   // This function should only be called when the write fills the buffer.
         .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
         .                   // is statically known, so the branch is optimized away.
 1,152,810 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
   985,320 ( 0.01%)          self.processed += BUFFER_SIZE;
   492,660 ( 0.00%)      }
         .           
         .               // A write function for byte slices.
         .               #[inline]
         .               fn slice_write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    15,807 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .           
   354,430 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
         .                       unsafe {
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .           
   129,156 ( 0.00%)                  if length <= 8 {
         .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
         .                           } else {
         .                               // This memcpy is *not* optimized away.
         .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
         .                           }
         .                       }
         .           
    65,396 ( 0.00%)              self.nbuf = nbuf + length;
         .           
         .                       return;
         .                   }
         .           
    47,405 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
         .               }
         .           
         .               // A write function for byte slices that should only be called when the
         .               // write would cause the buffer to fill.
         .               //
         .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
         .               // and `msg` must contain enough bytes to initialize the rest of the element
         .               // containing the byte offset `self.nbuf`.
         .               #[inline(never)]
    28,260 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
     5,652 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
         .           
         .                   // Always copy first part of input into current element of buffer.
         .                   // This function should only be called when the write fills the buffer,
         .                   // so we know that there is enough input to fill the current element.
    16,956 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
     5,652 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
         .           
         .                   let src = msg.as_ptr();
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
         .           
         .                   // Process buffer.
         .           
         .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
         .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
         .                   // We know that is true, because last step ensured we have a full
         .                   // element in the buffer.
    11,304 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
         .           
         .                   for i in 0..last {
    43,656 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
    49,308 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
    87,312 ( 0.00%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Process the remaining element-sized chunks of input.
         .                   let mut processed = needed_in_elem;
    11,304 ( 0.00%)          let input_left = length - processed;
     6,774 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
         .                   let extra_bytes_left = input_left % ELEM_SIZE;
         .           
         .                   for _ in 0..elems_left {
     3,034 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
     3,034 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
     3,034 ( 0.00%)              self.state.v0 ^= elem;
     6,068 ( 0.00%)              processed += ELEM_SIZE;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer.
         .                   let src = msg.as_ptr().add(processed);
         .                   let dst = self.buf.as_mut_ptr() as *mut u8;
         .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
         .           
     5,652 ( 0.00%)          self.nbuf = extra_bytes_left;
    28,260 ( 0.00%)          self.processed += nbuf + processed;
    33,912 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn finish128(mut self) -> (u64, u64) {
         .                   debug_assert!(self.nbuf < BUFFER_SIZE);
         .           
         .                   // Process full elements in buffer.
   106,047 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
         .           
         .                   // Since we're consuming self, avoid updating members for a potential
         .                   // performance gain.
   141,396 ( 0.00%)          let mut state = self.state;
         .           
         .                   for i in 0..last {
    99,943 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
    99,943 ( 0.00%)              state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut state);
    99,943 ( 0.00%)              state.v0 ^= elem;
         .                   }
         .           
         .                   // Get remaining partial element.
    70,698 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
         .                       unsafe {
         .                           // Ensure element is initialized by writing zero bytes. At most
         .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
         .                           // to write this many because we have the spill and we maintain
         .                           // `self.nbuf` such that this write will start before the spill.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
         .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    27,869 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
         .                       }
         .                   } else {
         .                       0
         .                   };
         .           
         .                   // Finalize the hash.
    94,047 ( 0.00%)          let length = self.processed + self.nbuf;
    61,654 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
         .           
    30,827 ( 0.00%)          state.v3 ^= b;
         .                   Sip24Rounds::c_rounds(&mut state);
    30,827 ( 0.00%)          state.v0 ^= b;
         .           
    30,827 ( 0.00%)          state.v2 ^= 0xee;
         .                   Sip24Rounds::d_rounds(&mut state);
   111,744 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
    50,086 ( 0.00%)          state.v1 ^= 0xdd;
         .                   Sip24Rounds::d_rounds(&mut state);
    50,086 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
         .                   (_0, _1)
         .               }
         .           }
         .           
         .           impl Hasher for SipHasher128 {
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip24Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
 8,855,686 ( 0.04%)          compress!(state);
 9,462,358 ( 0.05%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
   223,480 ( 0.00%)          compress!(state);
   223,480 ( 0.00%)          compress!(state);
   223,480 ( 0.00%)          compress!(state);
   192,655 ( 0.00%)          compress!(state);
         .               }
         .           }

 1,639,119 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
    1,437 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
    1,437 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
    2,874 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  183,255 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
1,246,134 ( 0.01%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
  109,953 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
  219,906 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
   11,186 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
1,853,556 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
   19,325 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    6,120 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  293,740 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
  341,899 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  502,880 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  523,952 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
   29,730 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
    4,577 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    4,295 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
    4,004 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   36,651 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  109,953 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   36,651 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
   32,382 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   39,578 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
   17,990 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   25,186 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
    3,008 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    1,504 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
   10,204 ( 0.00%)          self
    4,512 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   50,052 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   70,152 ( 0.00%)              let (value, subst) =
    3,306 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
  103,372 ( 0.00%)              f(infcx, value, subst)
        .                   })
   54,368 ( 0.00%)      }
        .           
  223,279 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  103,015 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
1,565,919 ( 0.01%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   36,651 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   36,651 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
  236,754 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
    1,616 ( 0.00%)          let InferOk { value, obligations } = self;
    6,626 ( 0.00%)          for obligation in obligations {
      156 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   31,811 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  127,244 ( 0.00%)          self.obligations
   31,811 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   88,233 ( 0.00%)      }
        .           
  898,704 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
1,011,042 ( 0.01%)          t.fold_with(&mut self.freshener())
1,011,042 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      700 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    1,400 ( 0.00%)          match *ty.kind() {
      317 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    1,268 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
       33 ( 0.00%)              _ => None,
        .                   }
    1,400 ( 0.00%)      }
        .           
  112,338 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
  112,338 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
  255,468 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
  255,468 ( 0.00%)      }
        .           
    6,300 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    3,150 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    3,150 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      634 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      850 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
       33 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
   11,025 ( 0.00%)      }
        .           
  229,978 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  920,208 ( 0.00%)          CombineFields {
        .                       infcx: self,
2,300,520 ( 0.01%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
  229,978 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
      152 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
   22,713 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
      171 ( 0.00%)      }
        .           
1,269,724 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
3,809,172 ( 0.02%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  634,862 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
2,539,448 ( 0.01%)      }
        .           
1,432,189 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  130,199 ( 0.00%)              undo_snapshot,
  130,199 ( 0.00%)              region_constraints_snapshot,
  130,199 ( 0.00%)              universe,
  130,199 ( 0.00%)              was_in_snapshot,
  260,398 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
  130,199 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
7,569,945 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  504,663 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
  504,663 ( 0.00%)              was_in_snapshot,
1,009,326 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
  170,664 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  209,693 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   19,063 ( 0.00%)          let snapshot = self.start_snapshot();
   60,888 ( 0.00%)          let r = f(&snapshot);
  133,441 ( 0.00%)          self.commit_from(snapshot);
  115,661 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
2,634,083 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
3,272,889 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
  652,425 ( 0.00%)          let snapshot = self.start_snapshot();
1,518,341 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  840,556 ( 0.00%)          match r {
        .                       Ok(_) => {
3,422,498 ( 0.02%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  857,312 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
4,075,982 ( 0.02%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  304,998 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  357,934 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   82,921 ( 0.00%)          let snapshot = self.start_snapshot();
  146,781 ( 0.00%)          let r = f(&snapshot);
  400,650 ( 0.00%)          self.rollback_to("probe", snapshot);
   84,769 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      216 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
      288 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
       48 ( 0.00%)          let snapshot = self.start_snapshot();
       24 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
       48 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
       96 ( 0.00%)          let r = f(&snapshot);
      216 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
      288 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   20,940 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   41,880 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   31,410 ( 0.00%)      }
        .           
       16 ( 0.00%)      pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
       32 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
       24 ( 0.00%)      }
        .           
    2,832 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
    2,124 ( 0.00%)      }
        .           
   19,008 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
   14,256 ( 0.00%)      }
        .           
  240,450 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
  216,405 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
       45 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   region: ty::Region<'tcx>,
        .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
        .               ) {
       45 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       region,
        .                       in_regions,
        .                   );
        .               }
        .           
-- line 961 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
       60 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
       40 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
      100 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       80 ( 0.00%)      }
        .           
    8,328 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
      694 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      694 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    5,336 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    1,288 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    1,288 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
       50 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
      100 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
    6,246 ( 0.00%)      }
        .           
   82,284 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
   68,570 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
   54,856 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
      138 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
      276 ( 0.00%)      }
        .           
  172,862 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  864,310 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  259,293 ( 0.00%)      }
        .           
  169,530 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  603,353 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
  254,295 ( 0.00%)      }
        .           
    1,908 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
   10,494 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      954 ( 0.00%)          self.tcx.mk_ty_var(vid)
    2,862 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
    1,210 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      726 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      968 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
   34,651 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  924,637 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
   69,302 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
  349,592 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
2,272,348 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  873,980 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
  524,388 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
   24,374 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   36,561 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
   12,126 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
   18,189 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   89,450 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  178,900 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      396 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
    2,916 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      792 ( 0.00%)      }
        .           
  552,120 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  289,221 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
   27,927 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
  162,968 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
  203,710 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   40,742 ( 0.00%)                              param.name,
   40,742 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   40,742 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
    3,806 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
      346 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
    2,768 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   92,469 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  519,183 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   61,646 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
    3,590 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   89,431 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    5,385 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   89,677 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
  243,409 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
   12,811 ( 0.00%)              assert!(
   38,433 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
   12,811 ( 0.00%)          };
        .           
        .                   let region_rels =
   12,811 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
  115,299 ( 0.00%)          let (lexical_region_resolutions, errors) =
  307,464 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   51,244 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
   12,811 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
  115,299 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  128,110 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
   25,622 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
   38,433 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
   25,622 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   64,055 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
        .               /// region constraints as normal, but then we take them and
        .               /// translate them into the form that the NLL solver
        .               /// understands. See the NLL module for mode details.
       24 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
        8 ( 0.00%)          assert!(
        .                       self.inner.borrow().region_obligations.is_empty(),
        .                       "region_obligations not empty: {:#?}",
        .                       self.inner.borrow().region_obligations
        .                   );
        .           
       32 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
       40 ( 0.00%)      }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
   20,820 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    7,500 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
   28,500 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
    1,500 ( 0.00%)              .into_infos_and_data();
    1,500 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
   12,000 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
   11,926 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   35,778 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   41,741 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
1,411,456 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
   21,250 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   31,875 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
    4,776 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  668,358 ( 0.00%)          if !value.needs_infer() {
  602,925 ( 0.00%)              return value; // Avoid duplicated subst-folding.
        .                   }
  430,074 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  499,824 ( 0.00%)          value.fold_with(&mut r)
    5,802 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   34,911 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
  250,983 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  256,979 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   23,274 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
   16,768 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
    6,288 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
   35,632 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
   14,672 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
    2,156 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    4,312 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    3,234 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
1,693,949 ( 0.01%)          self.universe.get()
  608,246 ( 0.00%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
      824 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    1,152 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
      824 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
        .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
        .               /// returned.
        .               ///
        .               /// This handles inferences variables within both `param_env` and `substs` by
        .               /// performing the operation on their respective canonical forms.
       26 ( 0.00%)      pub fn const_eval_resolve(
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   unevaluated: ty::Unevaluated<'tcx>,
        .                   span: Option<Span>,
        .               ) -> EvalToConstValueResult<'tcx> {
        2 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
        .           
        .                   // Postpone the evaluation of constants whose substs depend on inference
        .                   // variables
        .                   if substs.has_infer_types_or_consts() {
        .                       return Err(ErrorHandled::TooGeneric);
        .                   }
        .           
        2 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
        .                   let substs_erased = self.tcx.erase_regions(substs);
        .           
        .                   let unevaluated = ty::Unevaluated {
        .                       def: unevaluated.def,
        .                       substs: substs_erased,
        4 ( 0.00%)              promoted: unevaluated.promoted,
        .                   };
        .           
        .                   // The return value is the evaluated value which doesn't contain any reference to inference
        .                   // variables, thus we don't need to substitute back the original values.
       24 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
       18 ( 0.00%)      }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
7,546,880 ( 0.04%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
3,069,670 ( 0.02%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
1,093,720 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
   22,444 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
    6,081 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
8,490,240 ( 0.04%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
  735,680 ( 0.00%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
    4,114 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   10,211 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
   10,211 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
    1,276 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  102,665 ( 0.00%)          match *ty.kind() {
   22,316 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
      634 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
    1,276 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
1,625,134 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    5,956 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    3,922 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    2,360 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
    1,416 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    7,445 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
      178 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
      445 ( 0.00%)          match *self {
       89 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   82,881 ( 0.00%)          match *cause.code() {
    9,721 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   48,605 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

4,067,923 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
  8,413,232 ( 0.04%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    374,652 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
186,227,013 ( 0.95%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  2,084,912 ( 0.01%)          self.stride += Group::WIDTH;
  2,084,912 ( 0.01%)          self.pos += self.stride;
  1,863,439 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    399,672 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
    815,680 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    220,200 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  1,112,423 ( 0.01%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    305,580 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
    786,427 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  1,068,787 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
      5,244 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
      1,560 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        535 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     28,695 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
     68,389 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
     68,389 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    136,778 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
     27,886 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    108,892 ( 0.00%)          self.erase_no_drop(&item);
        467 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,081,410 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
      7,144 ( 0.00%)          match self.find(hash, eq) {
     29,229 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
  1,066,530 ( 0.01%)              None => None,
          .                   }
  4,488,214 ( 0.02%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     42,220 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  1,040,634 ( 0.01%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
    674,470 ( 0.00%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  1,592,090 ( 0.01%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
  1,058,288 ( 0.01%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  9,837,616 ( 0.05%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     21,539 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  8,180,315 ( 0.04%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
  7,292,000 ( 0.04%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,434,016 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        451 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  2,575,512 ( 0.01%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      6,642 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  1,048,814 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     38,443 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  2,211,159 ( 0.01%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  1,711,547 ( 0.01%)          self.table.items += 1;
          .                   bucket
     13,267 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
    201,116 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    307,219 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    230,743 ( 0.00%)              eq(self.bucket(index).as_ref())
    212,279 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
     52,913 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
    228,208 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    179,234 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
     15,736 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    106,231 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
     17,984 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  6,826,017 ( 0.03%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
         32 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    961,068 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     27,468 ( 0.00%)          let allocation = self.into_allocation();
     20,601 ( 0.00%)          RawIntoIter {
     34,335 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     11,447 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      1,773 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  3,894,857 ( 0.02%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  1,360,547 ( 0.01%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    336,764 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
    746,574 ( 0.00%)          Ok(Self {
          .                       ctrl,
    324,372 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
    989,984 ( 0.01%)      }
          .           
          .               #[inline]
     89,585 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     23,474 ( 0.00%)          if capacity == 0 {
     15,168 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
    617,210 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
     50,500 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
     89,585 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    368,024 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    368,024 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
    736,048 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  5,426,615 ( 0.03%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 15,666,710 ( 0.08%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
  7,265,237 ( 0.04%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    320,424 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 21,479,403 ( 0.11%)              for bit in group.match_byte(h2_hash) {
 41,783,061 ( 0.21%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 26,345,563 ( 0.13%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  6,429,256 ( 0.03%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
         12 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
         12 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 21,305,584 ( 0.11%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
109,867,232 ( 0.56%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 10,231,947 ( 0.05%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
  8,177,808 ( 0.04%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         87 ( 0.00%)          probe_index(i) == probe_index(new_i)
          .               }
          .           
          .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
          .                   self.set_ctrl(index, h2(hash));
          .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 15,255,988 ( 0.08%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  5,082,302 ( 0.03%)          *self.ctrl(index) = ctrl;
  5,083,137 ( 0.03%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  1,943,297 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
    859,036 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
  6,480,335 ( 0.03%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
     12,612 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
    426,528 ( 0.00%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    195,620 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    391,249 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    391,248 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
    818,167 ( 0.00%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          8 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    195,620 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
     31,866 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  3,192,447 ( 0.02%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    195,620 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
        256 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
          .                           let new_i = guard.find_insert_slot(hash);
          .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
          .           
          .                           // Probing works by scanning through all of the control
          .                           // bytes in groups, which may not be aligned to the group
          .                           // size. If both the new and old position fall within the
          .                           // same unaligned group, then there is no benefit in moving
          .                           // it and we can just continue to the next item.
         29 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
          .                               guard.set_ctrl_h2(i, hash);
          .                               continue 'outer;
          .                           }
          .           
          .                           // We are moving the current item to a new position. Write
          .                           // our H2 to the control byte of the new position.
          .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
          .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
         12 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    125,196 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
     64,231 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
     89,092 ( 0.00%)          self.items = 0;
     64,476 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    338,249 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  1,352,996 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  1,675,545 ( 0.01%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  1,352,996 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      4,176 ( 0.00%)      fn clone(&self) -> Self {
        660 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
      4,698 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        214 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,758,698 ( 0.01%)      fn drop(&mut self) {
  2,752,500 ( 0.01%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  3,120,780 ( 0.02%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     27,468 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     34,335 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  1,330,876 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    240,979 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    416,230 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
  1,336,521 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     28,384 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     44,001 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     38,372 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
      4,502 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    257,847 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    556,586 ( 0.00%)          if let Some(b) = self.iter.next() {
  1,636,985 ( 0.01%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    515,694 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     10,134 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
     52,249 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
      4,286 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      8,295 ( 0.00%)      fn next(&mut self) -> Option<T> {
      2,958 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     21,350 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          4 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      1,688 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
        211 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
      1,688 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 58,072,260 ( 0.29%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,916,378,933 ( 9.73%)  events annotated

