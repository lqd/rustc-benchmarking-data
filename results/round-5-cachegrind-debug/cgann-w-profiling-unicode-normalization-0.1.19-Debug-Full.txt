--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name unicode_normalization --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="std" -C metadata=6c729129290414aa -C extra-filename=-6c729129290414aa --out-dir /usr/home/liquid/tmp/.tmpTDRUYL/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpTDRUYL/target/debug/deps --extern tinyvec=/usr/home/liquid/tmp/.tmpTDRUYL/target/debug/deps/libtinyvec-1b9cbbcac1f2cbe8.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-unicode-normalization-0.1.19-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
5,570,846,600 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
157,420,034 ( 2.83%)  ./malloc/malloc.c:_int_malloc
118,947,696 ( 2.14%)  ./malloc/malloc.c:_int_free
100,940,564 ( 1.81%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 79,470,618 ( 1.43%)  ./malloc/malloc.c:malloc
 78,623,060 ( 1.41%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/kind.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
 74,522,808 ( 1.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
 59,959,936 ( 1.08%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/pattern/mod.rs:rustc_mir_build::thir::pattern::compare_const_vals
 59,469,633 ( 1.07%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
 42,885,159 ( 0.77%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<&rustc_middle::ty::TyS, (&rustc_middle::ty::TyS, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<&rustc_middle::ty::TyS>
 41,678,051 ( 0.75%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/kind.rs:<rustc_middle::ty::consts::kind::ConstKind>::try_eval
 37,298,137 ( 0.67%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::ParamEnv>::with_reveal_all_normalized
 36,352,972 ( 0.65%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 36,187,889 ( 0.65%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_data_structures::sorted_map::SortedMap<rustc_target::abi::Size, rustc_middle::mir::interpret::AllocId>>::range_slice_indices::<core::ops::range::Range<rustc_target::abi::Size>>
 34,962,700 ( 0.63%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/matches/simplify.rs:<rustc_mir_build::build::Builder>::simplify_candidate
 33,220,661 ( 0.60%)  ./malloc/malloc.c:malloc_consolidate
 33,091,325 ( 0.59%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
 32,850,964 ( 0.59%)  ./malloc/malloc.c:free
 26,911,014 ( 0.48%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/tagged_ptr/copy.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
 24,497,836 ( 0.44%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 22,765,870 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/int.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
 21,709,632 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/kind.rs:<rustc_middle::ty::consts::kind::ConstKind as core::cmp::PartialEq>::eq
 20,718,380 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/tagged_ptr/copy.rs:<rustc_middle::ty::ParamEnv>::with_reveal_all_normalized
 20,363,145 ( 0.37%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
 20,301,673 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/matches/test.rs:<rustc_mir_build::build::Builder>::test_candidates
 18,640,678 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
 18,630,702 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
 17,197,787 ( 0.31%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 16,570,792 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::ty::ParamEnv>::with_reveal_all_normalized
 15,856,295 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 15,820,850 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/kind.rs:<rustc_middle::ty::consts::kind::ConstKind>::try_to_bits
 15,126,245 ( 0.27%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<rustc_mir_build::build::Builder>::simplify_candidate
 14,334,820 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 14,079,647 ( 0.25%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
 13,439,296 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:rustc_mir_build::thir::pattern::compare_const_vals
 13,439,296 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs:<rustc_middle::ty::consts::kind::ConstKind as core::cmp::PartialEq>::eq
 13,268,261 ( 0.24%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 13,032,843 ( 0.23%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 12,868,244 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<&rustc_middle::ty::TyS, (&rustc_middle::ty::TyS, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<&rustc_middle::ty::TyS>
 12,153,171 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 11,961,427 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 11,892,540 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
 11,869,670 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 11,592,634 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 11,376,733 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 11,372,003 ( 0.20%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
 10,997,735 ( 0.20%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
 10,984,568 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_mir_build::build::Builder>::simplify_candidate
 10,963,843 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::inspect_node
 10,712,714 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 10,700,449 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::RawEntryBuilder<&rustc_middle::ty::TyS, (&rustc_middle::ty::TyS, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<&rustc_middle::ty::TyS>
 10,309,062 ( 0.19%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 10,256,021 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:rustc_mir_build::thir::pattern::usefulness::is_useful
 10,045,998 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 10,011,357 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
  9,962,124 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::start_walk_from
  9,587,744 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
  9,556,138 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
  9,507,372 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
  9,499,084 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
  9,476,837 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
  9,380,250 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
  9,128,081 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
  8,890,576 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
  8,839,652 ( 0.16%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
  8,617,853 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilder<&rustc_middle::ty::TyS, (&rustc_middle::ty::TyS, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<&rustc_middle::ty::TyS>
  8,428,096 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
  8,285,372 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/caches.rs:<rustc_middle::ty::ParamEnv>::with_reveal_all_normalized
  8,280,311 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
  8,280,310 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/caches.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
  8,280,309 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
  8,207,750 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
  8,169,874 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::mirror_expr_inner
  8,095,302 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs:<rustc_ast_pretty::pp::ring::RingBuffer<rustc_ast_pretty::pp::BufEntry>>::pop_first
  8,080,752 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
  7,975,141 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
  7,971,382 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
  7,868,532 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs:rustc_const_eval::transform::check_consts::qualifs::in_operand::<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior, <rustc_const_eval::transform::promote_consts::Validator>::qualif_local<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior>::{closure#0}>
  7,826,127 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
  7,812,134 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs:<alloc::vec::Vec<(rustc_mir_build::thir::pattern::deconstruct_pat::IntRange, rustc_span::span_encoding::Span)> as alloc::vec::spec_from_iter::SpecFromIter<(rustc_mir_build::thir::pattern::deconstruct_pat::IntRange, rustc_span::span_encoding::Span), core::iter::adapters::map::Map<core::iter::adapters::filter::Filter<core::iter::adapters::filter_map::FilterMap<core::iter::adapters::map::Map<core::slice::iter::Iter<rustc_mir_build::thir::pattern::usefulness::PatStack>, <rustc_mir_build::thir::pattern::usefulness::Matrix>::heads::{closure#0}>, <rustc_mir_build::thir::pattern::deconstruct_pat::IntRange>::lint_overlapping_range_endpoints<core::iter::adapters::map::Map<core::slice::iter::Iter<rustc_mir_build::thir::pattern::usefulness::PatStack>, <rustc_mir_build::thir::pattern::usefulness::Matrix>::heads::{closure#0}>>::{closure#0}>, <rustc_mir_build::thir::pattern::deconstruct_pat::IntRange>::lint_overlapping_range_endpoints<core::iter::adapters::map::Map<core::slice::iter::Iter<rustc_mir_build::thir::pattern::usefulness::PatStack>, <rustc_mir_build::thir::pattern::usefulness::Matrix>::heads::{closure#0}>>::{closure#1}>, <rustc_mir_build::thir::pattern::deconstruct_pat::IntRange>::lint_overlapping_range_endpoints<core::iter::adapters::map::Map<core::slice::iter::Iter<rustc_mir_build::thir::pattern::usefulness::PatStack>, <rustc_mir_build::thir::pattern::usefulness::Matrix>::heads::{closure#0}>>::{closure#2}>>>::from_iter
  7,797,783 ( 0.14%)  ???:llvm::MCAssembler::writeSectionData(llvm::raw_ostream&, llvm::MCSection const*, llvm::MCAsmLayout const&) const
  7,504,942 ( 0.13%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
  7,496,082 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs:<alloc::collections::vec_deque::VecDeque<rustc_ast_pretty::pp::BufEntry>>::push_back
  7,311,056 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs:<rustc_ast_pretty::pp::Printer>::advance_left
  7,236,532 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sorted_map.rs:<rustc_data_structures::sorted_map::SortedMap<rustc_target::abi::Size, rustc_middle::mir::interpret::AllocId>>::range_slice_indices::<core::ops::range::Range<rustc_target::abi::Size>>
  7,073,591 ( 0.13%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
  7,061,681 ( 0.13%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
  7,020,172 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
  7,003,117 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<rustc_middle::middle::region::ScopeTree>::temporary_scope
  6,955,735 ( 0.12%)  ???:llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const
  6,900,491 ( 0.12%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
  6,819,103 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_middle::ty::fold::RegionFolder>
  6,813,290 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_mir_build::build::Builder>::simplify_candidate
  6,711,761 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
  6,703,240 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
  6,634,550 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs:<rustc_middle::ty::consts::kind::ConstKind>::try_to_bits
  6,627,825 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
  6,563,111 ( 0.12%)  ./malloc/malloc.c:realloc
  6,558,366 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
  6,466,002 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::maybe_lint_level_root_bounded
  6,436,891 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs:<rustc_typeck::check::regionck::RegionCtxt as rustc_hir::intravisit::Visitor>::visit_expr
  6,423,161 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
  6,411,373 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  6,377,616 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
  6,323,227 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs:rustc_const_eval::transform::check_consts::qualifs::in_rvalue::<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior, <rustc_const_eval::transform::promote_consts::Validator>::qualif_local<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior>::{closure#0}>
  6,272,960 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_middle::ty::context::TypeckResults>::node_type_opt
  6,241,284 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/promote_consts.rs:<rustc_const_eval::transform::promote_consts::Validator>::validate_local
  6,214,035 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_middle::ty::ParamEnv>::with_reveal_all_normalized
  6,210,234 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::consts::Const>::try_eval_bits
  6,202,752 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/int.rs:<rustc_middle::ty::consts::kind::ConstKind as core::cmp::PartialEq>::eq
  6,157,076 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
  6,094,823 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
  5,924,152 ( 0.11%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
  5,841,543 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
  5,800,431 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_ast_pretty::pp::Printer>::advance_left
  5,788,700 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs:<rustc_middle::ty::ParamEnvAnd<rustc_middle::traits::query::type_op::Normalize<&rustc_middle::ty::TyS>> as rustc_trait_selection::traits::query::type_op::TypeOp>::fully_perform
  5,725,388 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                  

-- line 346 ----------------------------------------
         .               ///
         .               /// let c = Cell::new(5);
         .               ///
         .               /// c.set(10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn set(&self, val: T) {
       166 ( 0.00%)          let old = self.replace(val);
       524 ( 0.00%)          drop(old);
         .               }
         .           
         .               /// Swaps the values of two `Cell`s.
         .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
         .               ///
         .               /// let five = c.get();
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn get(&self) -> T {
         .                   // SAFETY: This can cause data races if called from a separate thread,
         .                   // but `Cell` is `!Sync` so this won't happen.
   159,030 ( 0.00%)          unsafe { *self.value.get() }
         .               }
         .           
         .               /// Updates the contained value using a function and returns the new value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
         .           
         .           #[inline(always)]
         .           fn is_writing(x: BorrowFlag) -> bool {
         .               x < UNUSED
         .           }
         .           
         .           #[inline(always)]
         .           fn is_reading(x: BorrowFlag) -> bool {
   745,819 ( 0.01%)      x > UNUSED
         .           }
         .           
         .           impl<T> RefCell<T> {
         .               /// Creates a new `RefCell` containing `value`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
         .               /// use std::cell::RefCell;
         .               ///
         .               /// let c = RefCell::new(5);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
         .               #[inline]
         .               pub const fn new(value: T) -> RefCell<T> {
    78,022 ( 0.00%)          RefCell {
    38,647 ( 0.00%)              value: UnsafeCell::new(value),
         .                       borrow: Cell::new(UNUSED),
         .                       #[cfg(feature = "debug_refcell")]
         .                       borrowed_at: Cell::new(None),
         .                   }
         .               }
         .           
         .               /// Consumes the `RefCell`, returning the wrapped value.
         .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
         .               /// let five = c.into_inner();
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
         .               #[inline]
         .               pub const fn into_inner(self) -> T {
         .                   // Since this function takes `self` (the `RefCell`) by value, the
         .                   // compiler statically verifies that it is not currently borrowed.
       764 ( 0.00%)          self.value.into_inner()
         .               }
         .           
         .               /// Replaces the wrapped value with a new one, returning the old value,
         .               /// without deinitializing either one.
         .               ///
         .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
         .               ///
         .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               ///
         .               /// let m = c.borrow_mut();
         .               /// let b = c.borrow(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
       983 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
         .                   self.try_borrow().expect("already mutably borrowed")
     2,949 ( 0.00%)      }
         .           
         .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
         .               /// borrowed.
         .               ///
         .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
         .               /// taken out at the same time.
         .               ///
         .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               /// let m = c.borrow();
         .               ///
         .               /// let b = c.borrow_mut(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
    47,769 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
         .                   self.try_borrow_mut().expect("already borrowed")
   143,307 ( 0.00%)      }
         .           
         .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
         .               ///
         .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
         .               /// from it exit scope. The value cannot be borrowed while this borrow is
         .               /// active.
         .               ///
         .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 975 ----------------------------------------
         .                   match BorrowRefMut::new(&self.borrow) {
         .                       Some(b) => {
         .                           #[cfg(feature = "debug_refcell")]
         .                           {
         .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
         .                           }
         .           
         .                           // SAFETY: `BorrowRef` guarantees unique access.
       289 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
         .                       }
         .                       None => Err(BorrowMutError {
         .                           // If a borrow occurred, then we must already have an outstanding borrow,
         .                           // so `borrowed_at` will be `Some`
         .                           #[cfg(feature = "debug_refcell")]
         .                           location: self.borrowed_at.get().unwrap(),
         .                       }),
         .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
         .           
         .           struct BorrowRef<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl<'b> BorrowRef<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
 1,120,379 ( 0.02%)          let b = borrow.get().wrapping_add(1);
   647,360 ( 0.01%)          if !is_reading(b) {
         .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
         .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
         .                       //    due to Rust's reference aliasing rules
         .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
         .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
         .                       //    an additional read borrow because isize can't represent so many read borrows
         .                       //    (this can only happen if you mem::forget more than a small constant amount of
         .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
         .                       Some(BorrowRef { borrow })
         .                   }
         .               }
         .           }
         .           
         .           impl Drop for BorrowRef<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
   539,521 ( 0.01%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_reading(borrow));
 1,083,261 ( 0.02%)          self.borrow.set(borrow - 1);
         .               }
         .           }
         .           
         .           impl Clone for BorrowRef<'_> {
         .               #[inline]
         .               fn clone(&self) -> Self {
         .                   // Since this Ref exists, we know the borrow flag
         .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
         .           
         .           struct BorrowRefMut<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl Drop for BorrowRefMut<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
 9,361,467 ( 0.17%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_writing(borrow));
18,423,154 ( 0.33%)          self.borrow.set(borrow + 1);
         .               }
         .           }
         .           
         .           impl<'b> BorrowRefMut<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
         .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
         .                   // mutable reference, and so there must currently be no existing
         .                   // references. Thus, while clone increments the mutable refcount, here
         .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
19,309,480 ( 0.35%)          match borrow.get() {
         .                       UNUSED => {
         .                           borrow.set(UNUSED - 1);
         .                           Some(BorrowRefMut { borrow })
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
         .                   self.value
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut T {
       172 ( 0.00%)          self.value
         .               }
         .           }
         .           
         .           #[unstable(feature = "coerce_unsized", issue = "27732")]
         .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
         .           
         .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
         .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
         .               /// ```
         .               #[inline(always)]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
         .               pub const fn get(&self) -> *mut T {
         .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
         .                   // #[repr(transparent)]. This exploits libstd's special status, there is
         .                   // no guarantee for user code that this will work in future versions of the compiler!
12,184,771 ( 0.22%)          self as *const UnsafeCell<T> as *const T as *mut T
         .               }
         .           
         .               /// Returns a mutable reference to the underlying data.
         .               ///
         .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
         .               /// guarantees that we possess the only reference.
         .               ///
         .               /// # Examples
-- line 1925 ----------------------------------------

13,980,135 ( 0.25%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  414,215 ( 0.01%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       33 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,064 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,885 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       22 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       88 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    4,632 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       12 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
      372 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
    1,378 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
      558 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,047 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,562 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        2 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       84 ( 0.00%)      fn from(p: PathBuf) -> Self {
       24 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       72 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       84 ( 0.00%)      }
        .           }
        .           
       34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
    3,840 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
    5,760 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
    5,760 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
    4,800 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
      184 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
      138 ( 0.00%)          match self.inner {
       46 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
      184 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    2,986 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
      994 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
    1,988 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       12 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       24 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       10 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        4 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       10 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       13 ( 0.00%)      pub lo: BytePos,
       13 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       36 ( 0.00%)      pub ctxt: SyntaxContext,
       12 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  784,548 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      126 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   22,552 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   16,914 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   22,552 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  261,423 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
  174,282 ( 0.00%)      }
        .               #[inline]
      932 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      932 ( 0.00%)      }
        .               #[inline]
   15,786 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
   10,524 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      695 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      417 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       57 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       38 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      378 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      252 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
      130 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
       65 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
      143 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
    9,729 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    6,486 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    2,196 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      458 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      344 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
       45 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        9 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
       36 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    2,527 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    2,166 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    1,805 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       55 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       66 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       44 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       12 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
        3 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       12 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  904,497 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  164,351 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
       95 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       86 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  574,980 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  740,043 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      121 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
       77 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
       88 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      836 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      152 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      532 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      684 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      100 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      612 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      357 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   11,331 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    7,554 ( 0.00%)          let mut span = self.data();
    6,227 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   11,331 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   12,522 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
       81 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      154 ( 0.00%)          let mut span = self.data();
      245 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      481 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
       90 ( 0.00%)      }
        .           
        .               #[inline]
   22,168 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   19,397 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    3,535 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       25 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       49 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    3,535 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    3,535 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       25 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       20 ( 0.00%)          MultiSpan::from_spans(spans)
       25 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       55 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       33 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,078 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       66 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,156 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       42 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1324 ----------------------------------------
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        .                   Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
       77 ( 0.00%)          let len = self.hash_len();
       77 ( 0.00%)          &self.value[..len]
       77 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
      196 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      638 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       11 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       11 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       11 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       44 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       22 ( 0.00%)                          0..=0xFF => 1,
        8 ( 0.00%)                          0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       26 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       33 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      121 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,851 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      539 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  895,984 ( 0.02%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,078 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    5,929 ( 0.00%)              SourceFile {
    4,312 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,156 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,156 ( 0.00%)                  lines,
    2,156 ( 0.00%)                  multibyte_chars,
    2,156 ( 0.00%)                  non_narrow_chars,
    2,156 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,851 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      154 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       42 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       28 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       28 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       42 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      168 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       28 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      238 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      154 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       56 ( 0.00%)              lines,
       56 ( 0.00%)              multibyte_chars,
       56 ( 0.00%)              non_narrow_chars,
       56 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      126 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
   13,122 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
    6,561 ( 0.00%)          self.lines[line_index]
   13,122 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      441 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       63 ( 0.00%)          if matches!(
      126 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       63 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      567 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
    1,493 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
  167,447 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   40,871 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   82,910 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   55,355 ( 0.00%)          assert!(line_index < self.lines.len());
   82,686 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       62 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   55,076 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      132 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
      396 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
    1,052 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
    2,892 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
    2,410 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
      792 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
      660 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      264 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
      462 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      132 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
       48 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
       66 ( 0.00%)                  let linebpos = self.lines[a];
      132 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
       66 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
      528 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
      528 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      198 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      132 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
       66 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        9 ( 0.00%)                  let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
      330 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      140 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      126 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       14 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       14 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
  215,869 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
   21,021 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
  385,708 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
2,267,231 ( 0.04%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
3,398,696 ( 0.06%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  178,624 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  832,734 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  122,918 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  709,816 ( 0.01%)          let span = self.data_untracked();
  345,038 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
  356,886 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  238,194 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  237,384 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  474,768 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  237,384 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
  118,692 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  118,692 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  951,696 ( 0.02%)      }
        .           }

3,247,711 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
3,928,096 ( 0.07%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
2,455,060 ( 0.04%)              .intern(kind, |kind| {
  225,820 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
  451,640 ( 0.01%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
4,419,108 ( 0.08%)      }
        .           
        .               #[inline(never)]
  955,680 ( 0.02%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
  836,220 ( 0.02%)              .intern(kind, |kind| {
  346,470 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
1,075,140 ( 0.02%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
1,017,440 ( 0.02%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
  725,072 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  145,079 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  145,079 ( 0.00%)          self.data.get(&id.local_id)
  580,088 ( 0.01%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
      570 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
      380 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    2,388 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   28,258 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    2,388 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   24,855 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   16,570 ( 0.00%)          match *qpath {
   48,084 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
    1,626 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
   41,425 ( 0.00%)      }
        .           
       16 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
      372 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
       16 ( 0.00%)      }
        .           
      546 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    1,133 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    1,092 ( 0.00%)      }
        .           
    1,264 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    1,264 ( 0.00%)      }
        .           
   66,636 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   66,636 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   66,636 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
      643 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      132 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    1,020 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
      510 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    4,072 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    2,036 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
       64 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
       32 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  148,726 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   74,363 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  265,514 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  132,757 ( 0.00%)      }
        .           
1,457,652 ( 0.03%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  242,942 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
1,214,710 ( 0.02%)      }
        .           
  313,636 ( 0.01%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  313,636 ( 0.01%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
  627,272 ( 0.01%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    1,292 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
      646 ( 0.00%)      }
        .           
   69,998 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   69,998 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  139,996 ( 0.00%)      }
        .           
   66,108 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   66,108 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
  132,216 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
      924 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  269,528 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  282,057 ( 0.01%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  131,864 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   65,932 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  161,042 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   80,521 ( 0.00%)      }
        .           
  130,723 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  261,446 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  261,446 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
      775 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      155 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      268 ( 0.00%)      }
        .           
      115 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
       23 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
       64 ( 0.00%)      }
        .           
      356 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
      712 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
      828 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
      712 ( 0.00%)      }
        .           
    1,896 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
    2,528 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    1,592 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
      480 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
      840 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
      420 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   14,588 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    7,294 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    4,798 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    2,399 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
      716 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
      895 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      240 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      120 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
      620 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      310 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
      380 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      190 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      240 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      120 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
       42 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       14 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
       28 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      120 ( 0.00%)          &self.coercion_casts
      120 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
       20 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
       16 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
      205 ( 0.00%)      pub fn is_identity(&self) -> bool {
      410 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
      205 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
      486 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      243 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
        .                                   GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
-- line 861 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
      410 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
       96 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    2,025 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
    6,060 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
    2,424 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
    4,848 ( 0.00%)      }
        .           
      387 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      129 ( 0.00%)          self.arena.alloc(Steal::new(thir))
      516 ( 0.00%)      }
        .           
    2,580 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
      516 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    3,612 ( 0.00%)      }
        .           
      516 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      129 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
      645 ( 0.00%)      }
        .           
      423 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
      752 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      188 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        .                   let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        .               }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
   12,584 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    6,292 ( 0.00%)          let attrs = self.get_attrs(def_id);
   26,741 ( 0.00%)          let get = |name| {
    6,292 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
       64 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
       32 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
       16 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   31,460 ( 0.00%)          };
    9,438 ( 0.00%)          (
    9,438 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    4,719 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
   12,584 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
    2,254 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      322 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    2,443 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    2,576 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
1,389,311 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
1,786,257 ( 0.03%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       35 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       40 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
    3,605 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    4,120 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
    5,383 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
    6,152 ( 0.00%)      }
        .           
    1,764 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
    2,268 ( 0.00%)      }
        .           
  833,252 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  952,288 ( 0.02%)      }
        .           
    4,288 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   38,156 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
   42,953 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
      684 ( 0.00%)      }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
       88 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
        .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
      132 ( 0.00%)          if let Some(id) = id.as_local() {
       21 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
        .                   } else {
      185 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
        .                   }
      132 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    1,404 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
    1,069 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   42,008 ( 0.00%)          &*self.untracked_resolutions.cstore
   21,004 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      827 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    3,328 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      240 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
      360 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
      120 ( 0.00%)          self.sess.opts.borrowck_mode
      480 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
       15 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
        9 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
      347 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
      583 ( 0.00%)              match crate_type {
        .                           CrateType::Executable
        .                           | CrateType::Staticlib
        .                           | CrateType::ProcMacro
        .                           | CrateType::Cdylib => false,
        .           
        .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
        .                           // We want to block export of generics from dylibs,
        .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
        .                       // FIXME(#42706) -- in some cases, we could do better here.
        .                       return true;
        .                   }
        .                   false
        .               }
        .           
        .               /// Determines whether identifiers in the assembly have strict naming rules.
        .               /// Currently, only NVPTX* targets need it.
      558 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
      558 ( 0.00%)          self.sess.target.arch.contains("nvptx")
    1,116 ( 0.00%)      }
        .           
        .               /// Returns `&'static core::panic::Location<'static>`.
      384 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
        .                   self.mk_imm_ref(
       64 ( 0.00%)              self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      128 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
      384 ( 0.00%)      }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    1,265 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
      920 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    2,070 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
    1,035 ( 0.00%)      }
        .           
    4,347 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
    4,968 ( 0.00%)      }
        .           
  447,272 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  511,168 ( 0.01%)      }
        .           
   18,186 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
   20,784 ( 0.00%)      }
        .           
    1,421 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
    1,624 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
        .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
        .           }
        .           
        .           macro_rules! nop_lift {
        .               ($set:ident; $ty:ty => $lifted:ty) => {
        .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
        .                       type Lifted = $lifted;
        .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
      628 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
        .                               Some(unsafe { mem::transmute(self) })
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                   }
        .               };
        .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
   40,618 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  242,469 ( 0.00%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
        .           
        .               /// Allows access to the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with_context<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
      310 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
        .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
        .               /// as the `TyCtxt` passed in.
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  111,799 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  110,928 ( 0.00%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  391,860 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  344,680 ( 0.01%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   67,646 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  114,684 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  245,448 ( 0.00%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  118,727 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
  189,778 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
  280,290 ( 0.01%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
1,992,393 ( 0.04%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
1,179,144 ( 0.02%)                  self.interners.$name.intern(v, |v| {
   63,622 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
2,238,588 ( 0.04%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
3,240,923 ( 0.06%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
2,886,930 ( 0.05%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   66,136 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
3,487,908 ( 0.06%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
1,436,189 ( 0.03%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
  498,584 ( 0.01%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
   27,759 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
  498,584 ( 0.01%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
       63 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
       63 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      279 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
      279 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        .                   match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
       14 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
  155,799 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
  162,568 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      648 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    1,178 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    6,628 ( 0.00%)          iter.intern_with(|ts| {
  140,558 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  188,342 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    5,895 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      410 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
      154 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      144 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
    2,891 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    2,003 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
      186 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
      764 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
    2,891 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
   15,606 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
   15,606 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
   31,212 ( 0.00%)      }
        .           
       16 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
       48 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
       32 ( 0.00%)      }
        .           
    1,415 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
    1,415 ( 0.00%)          self.mk_place_elem(
        .                       place,
    2,830 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
    2,830 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
  153,333 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
  170,370 ( 0.00%)      }
        .           
      238 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
       34 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
       70 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
      136 ( 0.00%)          self._intern_poly_existential_predicates(eps)
      272 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
    2,738 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
    1,027 ( 0.00%)              self._intern_predicates(preds)
        .                   }
    3,424 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
    8,810 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
      916 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  501,111 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
    8,236 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   62,082 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
   25,284 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   17,094 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
      312 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
    2,502 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    3,660 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
      877 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      135 ( 0.00%)              c_variadic,
      215 ( 0.00%)              unsafety,
      110 ( 0.00%)              abi,
       80 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
      117 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
        2 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    6,033 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
      117 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  303,727 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
      156 ( 0.00%)      }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   52,231 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   81,373 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  162,746 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   14,423 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
  863,254 ( 0.02%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  863,254 ( 0.02%)          let hir = self.hir();
        .                   loop {
1,153,983 ( 0.02%)              if id == bound {
        .                           return bound;
        .                       }
        .           
1,306,887 ( 0.02%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  784,017 ( 0.01%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
1,233,220 ( 0.02%)      }
        .           
    1,928 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
    7,712 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
      482 ( 0.00%)              let next = self.hir().get_parent_node(id);
    1,446 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    1,928 ( 0.00%)      }
        .           
       70 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
      203 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
       73 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
       40 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
      819 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
      234 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
      234 ( 0.00%)          Some(&*candidates)
      936 ( 0.00%)      }
        .           
    1,533 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    1,971 ( 0.00%)      }
        .           
       18 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
        1 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
       16 ( 0.00%)      }
        .           
    2,646 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
    3,402 ( 0.00%)      }
        .           
    1,845 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
    1,845 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      490 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       49 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        .                       match self.lookup_const_stability(def_id) {
        .                           Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        .                               self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      441 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
  102,920 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
1,308,664 ( 0.02%)          E::intern_with(self, f)
   81,243 ( 0.00%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  483,459 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  605,316 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        6 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
        4 ( 0.00%)                  assert!(iter.next().is_none());
   60,071 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
       93 ( 0.00%)                  assert!(iter.next().is_none());
   67,985 ( 0.00%)                  f(&[t0, t1])
        .                       }
      188 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  551,900 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
    1,549 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
       32 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    1,272 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  209,722 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  209,914 ( 0.00%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
       51 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
    3,958 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
       66 ( 0.00%)                  let t0 = iter.next().unwrap()?;
       66 ( 0.00%)                  let t1 = iter.next().unwrap()?;
       99 ( 0.00%)                  assert!(iter.next().is_none());
   18,596 ( 0.00%)                  f(&[t0, t1])
        .                       }
      258 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  252,042 ( 0.00%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  111,799 ( 0.00%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
        .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
    2,000 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

2,292,432 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs
--------------------------------------------------------------------------------
Ir                  

-- line 491 ----------------------------------------
         .           
         .           use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};
         .           use crate::ops::{self, ControlFlow, Deref, DerefMut};
         .           use crate::{convert, fmt, hint};
         .           
         .           /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).
         .           ///
         .           /// See the [module documentation](self) for details.
       120 ( 0.00%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[must_use = "this `Result` may be an `Err` variant, which should be handled"]
         .           #[rustc_diagnostic_item = "Result"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Result<T, E> {
         .               /// Contains the success value
         .               #[lang = "Ok"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
-- line 507 ----------------------------------------
-- line 534 ----------------------------------------
         .               /// let x: Result<i32, &str> = Err("Some error message");
         .               /// assert_eq!(x.is_ok(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn is_ok(&self) -> bool {
     1,579 ( 0.00%)          matches!(*self, Ok(_))
         .               }
         .           
         .               /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
-- line 550 ----------------------------------------
-- line 628 ----------------------------------------
         .               /// assert_eq!(x.ok(), Some(2));
         .               ///
         .               /// let x: Result<u32, &str> = Err("Nothing here");
         .               /// assert_eq!(x.ok(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ok(self) -> Option<T> {
 2,081,240 ( 0.04%)          match self {
     3,833 ( 0.00%)              Ok(x) => Some(x),
         .                       Err(_) => None,
         .                   }
         1 ( 0.00%)      }
         .           
         .               /// Converts from `Result<T, E>` to [`Option<E>`].
         .               ///
         .               /// Converts `self` into an [`Option<E>`], consuming `self`,
         .               /// and discarding the success value, if any.
         .               ///
         .               /// # Examples
         .               ///
-- line 648 ----------------------------------------
-- line 657 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn err(self) -> Option<E> {
         .                   match self {
         .                       Ok(_) => None,
         .                       Err(x) => Some(x),
         .                   }
         4 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Adapter for working with references
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Converts from `&Result<T, E>` to `Result<&T, &E>`.
         .               ///
         .               /// Produces a new `Result`, containing a reference
-- line 673 ----------------------------------------
-- line 683 ----------------------------------------
         .               ///
         .               /// let x: Result<u32, &str> = Err("Error");
         .               /// assert_eq!(x.as_ref(), Err(&"Error"));
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Result<&T, &E> {
        62 ( 0.00%)          match *self {
         .                       Ok(ref x) => Ok(x),
         .                       Err(ref x) => Err(x),
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.
         .               ///
         .               /// # Examples
-- line 699 ----------------------------------------
-- line 715 ----------------------------------------
         .               /// let mut x: Result<i32, i32> = Err(13);
         .               /// mutate(&mut x);
         .               /// assert_eq!(x.unwrap_err(), 0);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {
   352,491 ( 0.01%)          match *self {
         .                       Ok(ref mut x) => Ok(x),
         .                       Err(ref mut x) => Err(x),
         .                   }
         .               }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Transforming contained values
         .               /////////////////////////////////////////////////////////////////////////
-- line 731 ----------------------------------------
-- line 747 ----------------------------------------
         .               ///         Ok(n) => println!("{}", n),
         .               ///         Err(..) => {}
         .               ///     }
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
   619,590 ( 0.01%)          match self {
   560,453 ( 0.01%)              Ok(t) => Ok(op(t)),
    88,948 ( 0.00%)              Err(e) => Err(e),
         .                   }
    95,669 ( 0.00%)      }
         .           
         .               /// Returns the provided default (if [`Err`]), or
         .               /// applies a function to the contained value (if [`Ok`]),
         .               ///
         .               /// Arguments passed to `map_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`map_or_else`],
         .               /// which is lazily evaluated.
         .               ///
-- line 767 ----------------------------------------
-- line 774 ----------------------------------------
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
         .               ///
         .               /// let x: Result<&str, _> = Err("bar");
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "result_map_or", since = "1.41.0")]
         .               pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
       503 ( 0.00%)          match self {
       373 ( 0.00%)              Ok(t) => f(t),
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to
         .               /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.
         .               ///
         .               /// This function can be used to unpack a successful result
-- line 791 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// let x: Result<u32, u32> = Ok(2);
         .               /// assert_eq!(x.map_err(stringify), Ok(2));
         .               ///
         .               /// let x: Result<u32, u32> = Err(13);
         .               /// assert_eq!(x.map_err(stringify), Err("error code: 13".to_string()));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     9,852 ( 0.00%)      pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
 1,499,155 ( 0.03%)          match self {
 2,494,049 ( 0.04%)              Ok(t) => Ok(t),
     1,871 ( 0.00%)              Err(e) => Err(op(e)),
         .                   }
    17,919 ( 0.00%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Ok`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 852 ----------------------------------------
-- line 1012 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "result_expect", since = "1.4.0")]
         .               pub fn expect(self, msg: &str) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
   111,698 ( 0.00%)          match self {
     2,256 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed(msg, &e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`Err`]
-- line 1029 ----------------------------------------
-- line 1051 ----------------------------------------
         .               ///
         .               /// ```should_panic
         .               /// let x: Result<u32, &str> = Err("emergency failure");
         .               /// x.unwrap(); // panics with `emergency failure`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    32,000 ( 0.00%)      pub fn unwrap(self) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
   291,836 ( 0.01%)          match self {
   426,294 ( 0.01%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
         .                   }
    48,000 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Ok`] value or a default
         .               ///
         .               /// Consumes the `self` argument then, if [`Ok`], returns the contained
         .               /// value, otherwise if [`Err`], returns the default value for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 1075 ----------------------------------------
-- line 1092 ----------------------------------------
         .               /// [`parse`]: str::parse
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
         .               pub fn unwrap_or_default(self) -> T
         .               where
         .                   T: Default,
         .               {
       771 ( 0.00%)          match self {
       551 ( 0.00%)              Ok(x) => x,
         .                       Err(_) => Default::default(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, consuming the `self` value.
         .               ///
         .               /// # Panics
         .               ///
-- line 1109 ----------------------------------------
-- line 1152 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_err(self) -> E
         .               where
         .                   T: fmt::Debug,
         .               {
        58 ( 0.00%)          match self {
         .                       Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
         .                       Err(e) => e,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap`], this method is known to never panic on the
-- line 1168 ----------------------------------------
-- line 1190 ----------------------------------------
         .               /// ```
         .               #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
         .               #[inline]
         .               pub fn into_ok(self) -> T
         .               where
         .                   E: Into<!>,
         .               {
         .                   match self {
   806,346 ( 0.01%)              Ok(x) => x,
         .                       Err(e) => e.into(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap_err`], this method is known to never panic on the
         .               /// result types it is implemented for. Therefore, it can be used
-- line 1206 ----------------------------------------
-- line 1290 ----------------------------------------
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));
         .               /// assert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));
         .               /// assert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
   301,256 ( 0.01%)          match self {
   436,556 ( 0.01%)              Ok(t) => op(t),
    16,309 ( 0.00%)              Err(e) => Err(e),
         .                   }
         .               }
         .           
         .               /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
         .               /// result of a function call, it is recommended to use [`or_else`], which is
         .               /// lazily evaluated.
-- line 1308 ----------------------------------------
-- line 1355 ----------------------------------------
         .               /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));
         .               /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));
         .               /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));
         .               /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {
   178,008 ( 0.00%)          match self {
   555,707 ( 0.01%)              Ok(t) => Ok(t),
         .                       Err(e) => op(e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 1372 ----------------------------------------
-- line 1384 ----------------------------------------
         .               /// assert_eq!(x.unwrap_or(default), 9);
         .               ///
         .               /// let x: Result<u32, &str> = Err("error");
         .               /// assert_eq!(x.unwrap_or(default), default);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or(self, default: T) -> T {
        42 ( 0.00%)          match self {
         6 ( 0.00%)              Ok(t) => t,
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or computes it from a closure.
         .               ///
         .               ///
         .               /// # Examples
-- line 1401 ----------------------------------------
-- line 1406 ----------------------------------------
         .               /// fn count(x: &str) -> usize { x.len() }
         .               ///
         .               /// assert_eq!(Ok(2).unwrap_or_else(count), 2);
         .               /// assert_eq!(Err("foo").unwrap_or_else(count), 3);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {
   657,934 ( 0.01%)          match self {
   125,152 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => op(e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value,
         .               /// without checking that the value is not an [`Err`].
         .               ///
         .               /// # Safety
-- line 1423 ----------------------------------------
-- line 1647 ----------------------------------------
         .               /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));
         .               /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));
         .               /// assert_eq!(x.transpose(), y);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "transpose_result", since = "1.33.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn transpose(self) -> Option<Result<T, E>> {
       352 ( 0.00%)          match self {
         .                       Ok(Some(x)) => Some(Ok(x)),
         .                       Ok(None) => None,
         .                       Err(e) => Some(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           impl<T, E> Result<Result<T, E>, E> {
-- line 1663 ----------------------------------------
-- line 1751 ----------------------------------------
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, E: Clone> Clone for Result<T, E> {
         .               #[inline]
    69,216 ( 0.00%)      fn clone(&self) -> Self {
 5,166,534 ( 0.09%)          match self {
   225,918 ( 0.00%)              Ok(x) => Ok(x.clone()),
   166,442 ( 0.00%)              Err(x) => Err(x.clone()),
         .                   }
   308,596 ( 0.01%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Ok(to), Ok(from)) => to.clone_from(from),
         .                       (Err(to), Err(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
-- line 1772 ----------------------------------------
-- line 2011 ----------------------------------------
         .               ///
         .               /// Since the third element caused an underflow, no further elements were taken,
         .               /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {
         .                   // FIXME(#11084): This could be replaced with Iterator::scan when this
         .                   // performance bug is closed.
         .           
     4,056 ( 0.00%)          iter::process_results(iter.into_iter(), |i| i.collect())
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E> const ops::Try for Result<T, E> {
         .               type Output = T;
         .               type Residual = Result<convert::Infallible, E>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
    15,732 ( 0.00%)          Ok(output)
         .               }
         .           
         .               #[inline]
         .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 6,694,612 ( 0.12%)          match self {
11,952,531 ( 0.21%)              Ok(v) => ControlFlow::Continue(v),
    26,650 ( 0.00%)              Err(e) => ControlFlow::Break(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>
         .               for Result<T, F>
         .           {
         .               #[inline]
         .               #[track_caller]
         .               fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
         .                   match residual {
   163,761 ( 0.00%)              Err(e) => Err(From::from(e)),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {
         .               type TryType = Result<T, E>;
         .           }
-- line 2060 ----------------------------------------

 6,292,508 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/matches/simplify.rs
--------------------------------------------------------------------------------
Ir                 

-- line 32 ----------------------------------------
        .               ///
        .               /// match x {
        .               ///     0 | 1 => { ... },
        .               ///     2 | 3 => { ... },
        .               /// }
        .               ///
        .               /// only generates a single switch. If this happens this method returns
        .               /// `true`.
1,833,846 ( 0.03%)      pub(super) fn simplify_candidate<'pat>(
        .                   &mut self,
        .                   candidate: &mut Candidate<'pat, 'tcx>,
        .               ) -> bool {
        .                   // repeatedly simplify match pairs until fixed point is reached
        .                   debug!(?candidate, "simplify_candidate");
        .           
        .                   // existing_bindings and new_bindings exists to keep the semantics in order.
        .                   // Reversing the binding order for bindings after `@` changes the binding order in places
-- line 48 ----------------------------------------
-- line 57 ----------------------------------------
        .                   // preexisting (i.e. `candidate.binding` when the function was called).
        .                   //
        .                   // example:
        .                   // candidate.bindings = [1, 2, 3]
        .                   // binding in iter 1: [4, 5]
        .                   // binding in iter 2: [6, 7]
        .                   //
        .                   // final binding: [1, 2, 3, 6, 7, 4, 5]
  523,956 ( 0.01%)          let mut existing_bindings = mem::take(&mut candidate.bindings);
        .                   let mut new_bindings = Vec::new();
        .                   loop {
        .                       let match_pairs = mem::take(&mut candidate.match_pairs);
        .           
2,343,490 ( 0.04%)              if let [MatchPair { pattern: Pat { kind: box PatKind::Or { pats }, .. }, place }] =
        .                           &*match_pairs
        .                       {
        .                           existing_bindings.extend_from_slice(&new_bindings);
        .                           mem::swap(&mut candidate.bindings, &mut existing_bindings);
        7 ( 0.00%)                  candidate.subcandidates =
        .                               self.create_or_subcandidates(candidate, place.clone(), pats);
        .                           return true;
        .                       }
        .           
        .                       let mut changed = false;
6,530,995 ( 0.12%)              for match_pair in match_pairs {
3,360,761 ( 0.06%)                  match self.simplify_match_pair(match_pair, candidate) {
        .                               Ok(()) => {
        .                                   changed = true;
        .                               }
        .                               Err(match_pair) => {
2,858,295 ( 0.05%)                          candidate.match_pairs.push(match_pair);
        .                               }
        .                           }
        .                       }
        .                       // Avoid issue #69971: the binding order should be right to left if there are more
        .                       // bindings after `@` to please the borrow checker
        .                       // Ex
        .                       // struct NonCopyStruct {
        .                       //     copy_field: u32,
-- line 95 ----------------------------------------
-- line 100 ----------------------------------------
        .                       //     // the above should turn into
        .                       //     let z = x.copy_field;
        .                       //     let y = x;
        .                       // }
        .                       candidate.bindings.extend_from_slice(&new_bindings);
        .                       mem::swap(&mut candidate.bindings, &mut new_bindings);
        .                       candidate.bindings.clear();
        .           
  524,174 ( 0.01%)              if !changed {
        .                           existing_bindings.extend_from_slice(&new_bindings);
        .                           mem::swap(&mut candidate.bindings, &mut existing_bindings);
        .                           // Move or-patterns to the end, because they can result in us
        .                           // creating additional candidates, so we want to test them as
        .                           // late as possible.
        .                           candidate
        .                               .match_pairs
      108 ( 0.00%)                      .sort_by_key(|pair| matches!(*pair.pattern.kind, PatKind::Or { .. }));
        .                           debug!(simplified = ?candidate, "simplify_candidate");
        .                           return false; // if we were not able to simplify any, done.
        .                       }
        .                   }
2,357,802 ( 0.04%)      }
        .           
        .               /// Given `candidate` that has a single or-pattern for its match-pairs,
        .               /// creates a fresh candidate for each of its input subpatterns passed via
        .               /// `pats`.
        .               fn create_or_subcandidates<'pat>(
        .                   &mut self,
        .                   candidate: &Candidate<'pat, 'tcx>,
        .                   place: PlaceBuilder<'tcx>,
        .                   pats: &'pat [Pat<'tcx>],
        .               ) -> Vec<Candidate<'pat, 'tcx>> {
        .                   pats.iter()
        .                       .map(|pat| {
      675 ( 0.00%)                  let mut candidate = Candidate::new(place.clone(), pat, candidate.has_guard);
    1,350 ( 0.00%)                  self.simplify_candidate(&mut candidate);
        .                           candidate
        .                       })
        .                       .collect()
        .               }
        .           
        .               /// Tries to simplify `match_pair`, returning `Ok(())` if
        .               /// successful. If successful, new match pairs and bindings will
        .               /// have been pushed into the candidate. If no simplification is
        .               /// possible, `Err` is returned and no changes are made to
        .               /// candidate.
        .               fn simplify_match_pair<'pat>(
        .                   &mut self,
        .                   match_pair: MatchPair<'pat, 'tcx>,
        .                   candidate: &mut Candidate<'pat, 'tcx>,
        .               ) -> Result<(), MatchPair<'pat, 'tcx>> {
  259,969 ( 0.00%)          let tcx = self.tcx;
1,819,783 ( 0.03%)          match *match_pair.pattern.kind {
        .                       PatKind::AscribeUserType {
        .                           ref subpattern,
        .                           ascription: thir::Ascription { variance, user_ty, user_ty_span },
        .                       } => {
        .                           // Apply the type ascription to the value at `match_pair.place`, which is the
        .                           if let Ok(place_resolved) =
        .                               match_pair.place.clone().try_upvars_resolved(self.tcx, self.typeck_results)
        .                           {
-- line 160 ----------------------------------------
-- line 180 ----------------------------------------
        .                           name: _,
        .                           mutability: _,
        .                           mode,
        .                           var,
        .                           ty: _,
        .                           ref subpattern,
        .                           is_primary: _,
        .                       } => {
      118 ( 0.00%)                  if let Ok(place_resolved) =
       59 ( 0.00%)                      match_pair.place.clone().try_upvars_resolved(self.tcx, self.typeck_results)
        .                           {
        .                               candidate.bindings.push(Binding {
      177 ( 0.00%)                          span: match_pair.pattern.span,
      649 ( 0.00%)                          source: place_resolved.into_place(self.tcx, self.typeck_results),
        .                                   var_id: var,
        .                                   binding_mode: mode,
        .                               });
        .                           }
        .           
      118 ( 0.00%)                  if let Some(subpattern) = subpattern.as_ref() {
        .                               // this is the `x @ P` case; have to keep matching against `P` now
        .                               candidate.match_pairs.push(MatchPair::new(match_pair.place, subpattern));
        .                           }
        .           
        .                           Ok(())
        .                       }
        .           
        .                       PatKind::Constant { .. } => {
        .                           // FIXME normalize patterns when possible
        .                           Err(match_pair)
        .                       }
        .           
  765,525 ( 0.01%)              PatKind::Range(PatRange { lo, hi, end }) => {
1,275,891 ( 0.02%)                  let (range, bias) = match *lo.ty.kind() {
        .                               ty::Char => {
        .                                   (Some(('\u{0000}' as u128, '\u{10FFFF}' as u128, Size::from_bits(32))), 0)
        .                               }
        .                               ty::Int(ity) => {
        .                                   let size = Integer::from_int_ty(&tcx, ity).size();
        .                                   let max = size.truncate(u128::MAX);
        .                                   let bias = 1u128 << (size.bits() - 1);
        .                                   (Some((0, max, size)), bias)
        .                               }
       56 ( 0.00%)                      ty::Uint(uty) => {
        .                                   let size = Integer::from_uint_ty(&tcx, uty).size();
        .                                   let max = size.truncate(u128::MAX);
        .                                   (Some((0, max, size)), 0)
        .                               }
        .                               _ => (None, 0),
        .                           };
        .                           if let Some((min, max, sz)) = range {
5,613,850 ( 0.10%)                      if let (Some(lo), Some(hi)) = (lo.val.try_to_bits(sz), hi.val.try_to_bits(sz)) {
        .                                   // We want to compare ranges numerically, but the order of the bitwise
        .                                   // representation of signed integers does not match their numeric order.
        .                                   // Thus, to correct the ordering, we need to shift the range of signed
        .                                   // integers to correct the comparison. This is achieved by XORing with a
        .                                   // bias (see pattern/_match.rs for another pertinent example of this
        .                                   // pattern).
        .                                   let (lo, hi) = (lo ^ bias, hi ^ bias);
1,020,708 ( 0.02%)                          if lo <= min && (hi > max || hi == max && end == RangeEnd::Included) {
        .                                       // Irrefutable pattern match.
        .                                       return Ok(());
        .                                   }
        .                               }
        .                           }
        .                           Err(match_pair)
        .                       }
        .           
-- line 247 ----------------------------------------
-- line 256 ----------------------------------------
        .                                   suffix,
        .                               );
        .                               Ok(())
        .                           } else {
        .                               Err(match_pair)
        .                           }
        .                       }
        .           
      340 ( 0.00%)              PatKind::Variant { adt_def, substs, variant_index, ref subpatterns } => {
      170 ( 0.00%)                  let irrefutable = adt_def.variants.iter_enumerated().all(|(i, v)| {
      121 ( 0.00%)                      i == variant_index || {
      340 ( 0.00%)                          self.tcx.features().exhaustive_patterns
        .                                       && !v
        .                                           .uninhabited_from(
        .                                               self.tcx,
        .                                               substs,
        .                                               adt_def.adt_kind(),
        .                                               self.param_env,
        .                                           )
        .                                           .is_empty()
-- line 275 ----------------------------------------
-- line 295 ----------------------------------------
        .                               slice.as_ref(),
        .                               suffix,
        .                           );
        .                           Ok(())
        .                       }
        .           
        .                       PatKind::Leaf { ref subpatterns } => {
        .                           // tuple struct, match subpats (if any)
      578 ( 0.00%)                  candidate.match_pairs.extend(self.field_match_pairs(match_pair.place, subpatterns));
        .                           Ok(())
        .                       }
        .           
       12 ( 0.00%)              PatKind::Deref { ref subpattern } => {
        .                           let place_builder = match_pair.place.deref();
       36 ( 0.00%)                  candidate.match_pairs.push(MatchPair::new(place_builder, subpattern));
        .                           Ok(())
        .                       }
        .           
        .                       PatKind::Or { .. } => Err(match_pair),
        .                   }
        .               }
        .           }

3,871,371 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/matches/simplify.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           };
        .           use rustc_ast_pretty::pprust::token_to_string;
        .           use rustc_data_structures::fx::FxHashMap;
        .           use rustc_errors::PResult;
        .           use rustc_span::Span;
        .           
        .           impl<'a> StringReader<'a> {
        .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      266 ( 0.00%)          let mut tt_reader = TokenTreesReader {
        .                       string_reader: self,
       14 ( 0.00%)              token: Token::dummy(),
        .                       open_braces: Vec::new(),
        .                       unmatched_braces: Vec::new(),
        .                       matching_delim_spans: Vec::new(),
        .                       last_unclosed_found_span: None,
        .                       last_delim_empty_block_spans: FxHashMap::default(),
        .                       matching_block_spans: Vec::new(),
        .                   };
       14 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
       84 ( 0.00%)          (res, tt_reader.unmatched_braces)
        .               }
        .           }
        .           
        .           struct TokenTreesReader<'a> {
        .               string_reader: StringReader<'a>,
        .               token: Token,
        .               /// Stack of open delimiters and their spans. Used for error message.
        .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
        .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
        .               /// Collect the spans of braces (Open, Close). Used only
        .               /// for detecting if blocks are empty and only braces.
        .               matching_block_spans: Vec<(Span, Span)>,
        .           }
        .           
        .           impl<'a> TokenTreesReader<'a> {
        .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
      112 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
        .                   let mut buf = TokenStreamBuilder::default();
        .           
        .                   self.bump();
    3,610 ( 0.00%)          while self.token != token::Eof {
   14,328 ( 0.00%)              buf.push(self.parse_token_tree()?);
        .                   }
        .           
        .                   Ok(buf.into_token_stream())
      126 ( 0.00%)      }
        .           
        .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
        .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
        .                   let mut buf = TokenStreamBuilder::default();
        .                   loop {
  251,308 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
        .                           return buf.into_token_stream();
        .                       }
        .           
  551,680 ( 0.01%)              match self.parse_token_tree() {
  993,024 ( 0.02%)                  Ok(tree) => buf.push(tree),
        .                           Err(mut e) => {
        .                               e.emit();
        .                               return buf.into_token_stream();
        .                           }
        .                       }
        .                   }
        .               }
        .           
1,009,143 ( 0.02%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
  224,254 ( 0.00%)          let sm = self.string_reader.sess.source_map();
        .           
  947,871 ( 0.02%)          match self.token.kind {
        .                       token::Eof => {
        .                           let msg = "this file contains an unclosed delimiter";
        .                           let mut err =
        .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
        .                           for &(_, sp) in &self.open_braces {
        .                               err.span_label(sp, "unclosed delimiter");
        .                               self.unmatched_braces.push(UnmatchedBrace {
        .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
        .                                   err.span_label(
        .                                       *close_sp,
        .                                       "...as it matches this but it has different indentation",
        .                                   );
        .                               }
        .                           }
        .                           Err(err)
        .                       }
   15,318 ( 0.00%)              token::OpenDelim(delim) => {
        .                           // The span for beginning of the delimited section
   15,318 ( 0.00%)                  let pre_span = self.token.span;
        .           
        .                           // Parse the open delimiter.
  107,226 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
        .                           self.bump();
        .           
        .                           // Parse the token trees within the delimiters.
        .                           // We stop at any delimiter so we can try to recover if the user
        .                           // uses an incorrect delimiter.
   15,318 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
        .           
        .                           // Expand to cover the entire delimited token tree
   76,590 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
        .           
   30,636 ( 0.00%)                  match self.token.kind {
        .                               // Correct delimiter.
   30,636 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
        .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
   30,636 ( 0.00%)                          let close_brace_span = self.token.span;
        .           
   45,954 ( 0.00%)                          if tts.is_empty() {
      300 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
      400 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
        .                                           // Only track if the block is in the form of `{}`, otherwise it is
        .                                           // likely that it was written on purpose.
        .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
        .                                       }
        .                                   }
        .           
        .                                   //only add braces
   61,272 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
        .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
        .                                   }
        .           
   15,318 ( 0.00%)                          if self.open_braces.is_empty() {
        .                                       // Clear up these spans to avoid suggesting them as we've found
        .                                       // properly matched delimiters so far for an entire block.
        .                                       self.matching_delim_spans.clear();
        .                                   } else {
        .                                       self.matching_delim_spans.push((
        .                                           open_brace,
        .                                           open_brace_span,
        .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
        .                               token::Eof => {
        .                                   // Silently recover, the EOF token will be seen again
        .                                   // and an error emitted then. Thus we don't pop from
        .                                   // self.open_braces here.
        .                               }
        .                               _ => {}
        .                           }
        .           
  107,226 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
        .                       }
        .                       token::CloseDelim(delim) => {
        .                           // An unexpected closing delimiter (i.e., there is no
        .                           // matching opening delimiter).
        .                           let token_str = token_to_string(&self.token);
        .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
        .                           let mut err =
        .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
        .                                   err.span_label(parent.1, "...matches this closing brace");
        .                               }
        .                           }
        .           
        .                           err.span_label(self.token.span, "unexpected closing delimiter");
        .                           Err(err)
        .                       }
        .                       _ => {
  484,045 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
        .                           let mut spacing = self.bump();
  193,618 ( 0.00%)                  if !self.token.is_op() {
        .                               spacing = Alone;
        .                           }
  580,854 ( 0.01%)                  Ok((tt, spacing))
        .                       }
        .                   }
  897,016 ( 0.02%)      }
        .           
        .               fn bump(&mut self) -> Spacing {
1,070,499 ( 0.02%)          let (spacing, token) = self.string_reader.next_token();
  560,761 ( 0.01%)          self.token = token;
        .                   spacing
        .               }
        .           }
        .           
   15,318 ( 0.00%)  #[derive(Default)]
        .           struct TokenStreamBuilder {
        .               buf: Vec<TreeAndSpacing>,
        .           }
        .           
        .           impl TokenStreamBuilder {
1,457,651 ( 0.03%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
  724,548 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
   72,328 ( 0.00%)              if let TokenTree::Token(token) = &tree {
  125,424 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
        .                               self.buf.pop();
   50,796 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
        .                               return;
        .                           }
        .                       }
        .                   }
  539,470 ( 0.01%)          self.buf.push((tree, joint))
  897,016 ( 0.02%)      }
        .           
        .               fn into_token_stream(self) -> TokenStream {
  153,306 ( 0.00%)          TokenStream::new(self.buf)
        .               }
        .           }

  406,081 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 72 ----------------------------------------
        .               /// it might do things like invoke `sub_regions`, which would be
        .               /// bad, because it would create subregion relationships that are
        .               /// not captured in the return value.
        .               fn perform_query(
        .                   tcx: TyCtxt<'tcx>,
        .                   canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,
        .               ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>>;
        .           
1,609,383 ( 0.03%)      fn fully_perform_into(
        .                   query_key: ParamEnvAnd<'tcx, Self>,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,
        .               ) -> Fallible<(
        .                   Self::QueryResponse,
        .                   Option<Canonical<'tcx, ParamEnvAnd<'tcx, Self>>>,
        .                   PredicateObligations<'tcx>,
        .                   Certainty,
        .               )> {
  372,572 ( 0.01%)          if let Some(result) = QueryTypeOp::try_fast_path(infcx.tcx, &query_key) {
  742,889 ( 0.01%)              return Ok((result, None, vec![], Certainty::Proven));
        .                   }
        .           
        .                   // FIXME(#33684) -- We need to use
        .                   // `canonicalize_query_keep_static` here because of things
        .                   // like the subtype query, which go awry around
        .                   // `'static` otherwise.
   22,076 ( 0.00%)          let mut canonical_var_values = OriginalQueryValues::default();
      184 ( 0.00%)          let old_param_env = query_key.param_env;
        .                   let canonical_self =
   11,904 ( 0.00%)              infcx.canonicalize_query_keep_static(query_key, &mut canonical_var_values);
  110,668 ( 0.00%)          let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;
        .           
  134,256 ( 0.00%)          let InferOk { value, obligations } = infcx
        .                       .instantiate_nll_query_response_and_region_obligations(
        .                           &ObligationCause::dummy(),
        .                           old_param_env,
        .                           &canonical_var_values,
        .                           canonical_result,
        .                           output_query_region_constraints,
        .                       )?;
        .           
  159,515 ( 0.00%)          Ok((value, Some(canonical_self), obligations, canonical_result.value.certainty))
1,454,646 ( 0.03%)      }
        .           }
        .           
        .           impl<'tcx, Q> TypeOp<'tcx> for ParamEnvAnd<'tcx, Q>
        .           where
        .               Q: QueryTypeOp<'tcx>,
        .           {
        .               type Output = Q::QueryResponse;
        .           
1,338,384 ( 0.02%)      fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {
        .                   let mut region_constraints = QueryRegionConstraints::default();
1,006,797 ( 0.02%)          let (output, canonicalized_query, mut obligations, _) =
  171,058 ( 0.00%)              Q::fully_perform_into(self, infcx, &mut region_constraints)?;
        .           
        .                   // Typically, instantiating NLL query results does not
        .                   // create obligations. However, in some cases there
        .                   // are unresolved type variables, and unify them *can*
        .                   // create obligations. In that case, we have to go
        .                   // fulfill them. We do this via a (recursive) query.
  167,300 ( 0.00%)          while !obligations.is_empty() {
        .                       trace!("{:#?}", obligations);
        .                       let mut progress = false;
       58 ( 0.00%)              for obligation in std::mem::take(&mut obligations) {
       16 ( 0.00%)                  let obligation = infcx.resolve_vars_if_possible(obligation);
       64 ( 0.00%)                  match ProvePredicate::fully_perform_into(
       16 ( 0.00%)                      obligation.param_env.and(ProvePredicate::new(obligation.predicate)),
        .                               infcx,
        .                               &mut region_constraints,
        .                           ) {
       16 ( 0.00%)                      Ok(((), _, new, certainty)) => {
        .                                   obligations.extend(new);
        .                                   progress = true;
        8 ( 0.00%)                          if let Certainty::Ambiguous = certainty {
        .                                       obligations.push(obligation);
        .                                   }
        .                               }
        .                               Err(_) => obligations.push(obligation),
        .                           }
        .                       }
        4 ( 0.00%)              if !progress {
        .                           return Err(NoSolution);
        .                       }
        .                   }
        .           
        .                   // Promote the final query-region-constraints into a
        .                   // (optional) ref-counted vector:
        .                   let region_constraints =
  669,192 ( 0.01%)              if region_constraints.is_empty() { None } else { Some(Rc::new(region_constraints)) };
        .           
2,075,642 ( 0.04%)          Ok(TypeOpOutput { output, constraints: region_constraints, canonicalized_query })
1,672,980 ( 0.03%)      }
        .           }

1,151,852 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                  

-- line 17 ----------------------------------------
         .           pub struct BitMask(pub BitMaskWord);
         .           
         .           #[allow(clippy::use_self)]
         .           impl BitMask {
         .               /// Returns a new `BitMask` with all bits inverted.
         .               #[inline]
         .               #[must_use]
         .               pub fn invert(self) -> Self {
   687,242 ( 0.01%)          BitMask(self.0 ^ BITMASK_MASK)
         .               }
         .           
         .               /// Flip the bit in the mask for the entry at the given index.
         .               ///
         .               /// Returns the bit's previous state.
         .               #[inline]
         .               #[allow(clippy::cast_ptr_alignment)]
         .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
         .                   // The bit was set if the bit is now 0.
         .                   self.0 & mask == 0
         .               }
         .           
         .               /// Returns a new `BitMask` with the lowest bit removed.
         .               #[inline]
         .               #[must_use]
         .               pub fn remove_lowest_bit(self) -> Self {
   200,514 ( 0.00%)          BitMask(self.0 & (self.0 - 1))
         .               }
         .               /// Returns whether the `BitMask` has at least one set bit.
         .               #[inline]
         .               pub fn any_bit_set(self) -> bool {
 2,611,686 ( 0.05%)          self.0 != 0
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one.
         .               #[inline]
         .               pub fn lowest_set_bit(self) -> Option<usize> {
46,268,166 ( 0.83%)          if self.0 == 0 {
         .                       None
         .                   } else {
         .                       Some(unsafe { self.lowest_set_bit_nonzero() })
         .                   }
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one. The
         .               /// bitmask must not be empty.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
     5,863 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
         .               }
         .               #[inline]
         .               #[cfg(not(feature = "nightly"))]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
         .                   self.trailing_zeros()
         .               }
         .           
         .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
         .           /// bits.
         .           pub struct BitMaskIter(BitMask);
         .           
         .           impl Iterator for BitMaskIter {
         .               type Item = usize;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<usize> {
 4,668,774 ( 0.08%)          let bit = self.0.lowest_set_bit()?;
         .                   self.0 = self.0.remove_lowest_bit();
         .                   Some(bit)
         .               }
         .           }

    93,048 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .           use rustc_middle::ty::{self, AdtKind, Ty, UpvarSubsts, UserType};
        .           use rustc_span::def_id::DefId;
        .           use rustc_span::Span;
        .           use rustc_target::abi::VariantIdx;
        .           
        .           impl<'tcx> Cx<'tcx> {
        .               crate fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {
        .                   // `mirror_expr` is recursing very deep. Make sure the stack doesn't overflow.
   66,185 ( 0.00%)          ensure_sufficient_stack(|| self.mirror_expr_inner(expr))
        .               }
        .           
      262 ( 0.00%)      crate fn mirror_exprs(&mut self, exprs: &'tcx [hir::Expr<'tcx>]) -> Box<[ExprId]> {
  151,860 ( 0.00%)          exprs.iter().map(|expr| self.mirror_expr_inner(expr)).collect()
      524 ( 0.00%)      }
        .           
  540,432 ( 0.01%)      pub(super) fn mirror_expr_inner(&mut self, hir_expr: &'tcx hir::Expr<'tcx>) -> ExprId {
  420,336 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(hir_expr.hir_id.local_id);
        .                   let expr_scope =
        .                       region::Scope { id: hir_expr.hir_id.local_id, data: region::ScopeData::Node };
        .           
        .                   debug!("Expr::make_mirror(): id={}, span={:?}", hir_expr.hir_id, hir_expr.span);
        .           
  240,192 ( 0.00%)          let mut expr = self.make_mirror_unadjusted(hir_expr);
        .           
  360,288 ( 0.01%)          let adjustment_span = match self.adjustment_span {
      999 ( 0.00%)              Some((hir_id, span)) if hir_id == hir_expr.hir_id => Some(span),
        .                       _ => None,
        .                   };
        .           
        .                   // Now apply adjustments, if any.
  240,192 ( 0.00%)          for adjustment in self.typeck_results.expr_adjustments(hir_expr) {
        .                       debug!("make_mirror: expr={:?} applying adjustment={:?}", expr, adjustment);
   28,068 ( 0.00%)              let span = expr.span;
  144,578 ( 0.00%)              expr =
  371,772 ( 0.01%)                  self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));
        .                   }
        .           
        .                   // Next, wrap this up in the expr's scope.
  780,624 ( 0.01%)          expr = Expr {
        .                       temp_lifetime,
   53,031 ( 0.00%)              ty: expr.ty,
   60,048 ( 0.00%)              span: hir_expr.span,
        .                       kind: ExprKind::Scope {
        .                           region_scope: expr_scope,
1,080,864 ( 0.02%)                  value: self.thir.exprs.push(expr),
  120,096 ( 0.00%)                  lint_level: LintLevel::Explicit(hir_expr.hir_id),
        .                       },
        .                   };
        .           
        .                   // Finally, create a destruction scope, if any.
  180,144 ( 0.00%)          if let Some(region_scope) =
  120,096 ( 0.00%)              self.region_scope_tree.opt_destruction_scope(hir_expr.hir_id.local_id)
        .                   {
   19,980 ( 0.00%)              expr = Expr {
        .                           temp_lifetime,
        .                           ty: expr.ty,
    1,665 ( 0.00%)                  span: hir_expr.span,
        .                           kind: ExprKind::Scope {
        .                               region_scope,
   23,310 ( 0.00%)                      value: self.thir.exprs.push(expr),
        .                               lint_level: LintLevel::Inherited,
        .                           },
        .                       };
        .                   }
        .           
        .                   // OK, all done!
1,321,056 ( 0.02%)          self.thir.exprs.push(expr)
  540,432 ( 0.01%)      }
        .           
        .               fn apply_adjustment(
        .                   &mut self,
        .                   hir_expr: &'tcx hir::Expr<'tcx>,
        .                   mut expr: Expr<'tcx>,
        .                   adjustment: &Adjustment<'tcx>,
        .                   mut span: Span,
        .               ) -> Expr<'tcx> {
   41,308 ( 0.00%)          let Expr { temp_lifetime, .. } = expr;
        .           
        .                   // Adjust the span from the block, to the last expression of the
        .                   // block. This is a better span when returning a mutable reference
        .                   // with too short a lifetime. The error message will use the span
        .                   // from the assignment to the return place, which should only point
        .                   // at the returned value, not the entire function body.
        .                   //
        .                   // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {
        .                   //      x
        .                   //   // ^ error message points at this expression.
        .                   // }
        .                   let mut adjust_span = |expr: &mut Expr<'tcx>| {
   27,402 ( 0.00%)              if let ExprKind::Block { body } = &expr.kind {
        .                           if let Some(last_expr) = body.expr {
        .                               span = self.thir[last_expr].span;
        .                               expr.span = span;
        .                           }
        .                       }
        .                   };
        .           
  192,575 ( 0.00%)          let kind = match adjustment.kind {
        .                       Adjust::Pointer(PointerCast::Unsize) => {
        .                           adjust_span(&mut expr);
  115,107 ( 0.00%)                  ExprKind::Pointer { cast: PointerCast::Unsize, source: self.thir.exprs.push(expr) }
        .                       }
        .                       Adjust::Pointer(cast) => ExprKind::Pointer { cast, source: self.thir.exprs.push(expr) },
      697 ( 0.00%)              Adjust::NeverToAny => ExprKind::NeverToAny { source: self.thir.exprs.push(expr) },
        .                       Adjust::Deref(None) => {
        .                           adjust_span(&mut expr);
  117,810 ( 0.00%)                  ExprKind::Deref { arg: self.thir.exprs.push(expr) }
        .                       }
       12 ( 0.00%)              Adjust::Deref(Some(deref)) => {
        .                           // We don't need to do call adjust_span here since
        .                           // deref coercions always start with a built-in deref.
       15 ( 0.00%)                  let call = deref.method_call(self.tcx(), expr.ty);
        .           
       18 ( 0.00%)                  expr = Expr {
        .                               temp_lifetime,
        3 ( 0.00%)                      ty: self
        .                                   .tcx
        6 ( 0.00%)                          .mk_ref(deref.region, ty::TypeAndMut { ty: expr.ty, mutbl: deref.mutbl }),
        .                               span,
        .                               kind: ExprKind::Borrow {
        .                                   borrow_kind: deref.mutbl.to_borrow_kind(),
       45 ( 0.00%)                          arg: self.thir.exprs.push(expr),
        .                               },
        .                           };
        .           
       63 ( 0.00%)                  let expr = Box::new([self.thir.exprs.push(expr)]);
        .           
       39 ( 0.00%)                  self.overloaded_place(hir_expr, adjustment.target, Some(call), expr, deref.span)
        .                       }
   27,636 ( 0.00%)              Adjust::Borrow(AutoBorrow::Ref(_, m)) => ExprKind::Borrow {
        .                           borrow_kind: m.to_borrow_kind(),
   96,726 ( 0.00%)                  arg: self.thir.exprs.push(expr),
        .                       },
        .                       Adjust::Borrow(AutoBorrow::RawPtr(mutability)) => {
        .                           ExprKind::AddressOf { mutability, arg: self.thir.exprs.push(expr) }
        .                       }
        .                   };
        .           
  392,426 ( 0.01%)          Expr { temp_lifetime, ty: adjustment.target, span, kind }
        .               }
        .           
  600,480 ( 0.01%)      fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {
  240,192 ( 0.00%)          let expr_ty = self.typeck_results().expr_ty(expr);
   60,048 ( 0.00%)          let expr_span = expr.span;
  300,240 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
        .           
  373,977 ( 0.01%)          let kind = match expr.kind {
        .                       // Here comes the interesting stuff:
      303 ( 0.00%)              hir::ExprKind::MethodCall(segment, ref args, fn_span) => {
        .                           // Rewrite a.b(c) into UFCS form like Trait::b(a, c)
      707 ( 0.00%)                  let expr = self.method_callee(expr, segment.ident.span, None);
        .                           // When we apply adjustments to the receiver, use the span of
        .                           // the overall method call for better diagnostics. args[0]
        .                           // is guaranteed to exist, since a method call always has a receiver.
      404 ( 0.00%)                  let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));
        .                           tracing::info!("Using method span: {:?}", expr.span);
      101 ( 0.00%)                  let args = self.mirror_exprs(args);
      202 ( 0.00%)                  self.adjustment_span = old_adjustment_span;
      707 ( 0.00%)                  ExprKind::Call {
      101 ( 0.00%)                      ty: expr.ty,
    1,414 ( 0.00%)                      fun: self.thir.exprs.push(expr),
        .                               args,
        .                               from_hir_call: true,
        .                               fn_span,
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Call(ref fun, ref args) => {
      692 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               // The callee is something implementing Fn, FnMut, or FnOnce.
        .                               // Find the actual method implementation being called and
        .                               // build the appropriate UFCS call expression with the
        .                               // callee-object as expr parameter.
        .           
        .                               // rewrite f(u, v) into FnOnce::call_once(f, (u, v))
        .           
      104 ( 0.00%)                      let method = self.method_callee(expr, fun.span, None);
        .           
       52 ( 0.00%)                      let arg_tys = args.iter().map(|e| self.typeck_results().expr_ty_adjusted(e));
        .                               let tupled_args = Expr {
       26 ( 0.00%)                          ty: self.tcx.mk_tup(arg_tys),
        .                                   temp_lifetime,
       13 ( 0.00%)                          span: expr.span,
       52 ( 0.00%)                          kind: ExprKind::Tuple { fields: self.mirror_exprs(args) },
        .                               };
      169 ( 0.00%)                      let tupled_args = self.thir.exprs.push(tupled_args);
        .           
       65 ( 0.00%)                      ExprKind::Call {
       26 ( 0.00%)                          ty: method.ty,
      247 ( 0.00%)                          fun: self.thir.exprs.push(method),
       52 ( 0.00%)                          args: Box::new([self.mirror_expr(fun), tupled_args]),
        .                                   from_hir_call: true,
       26 ( 0.00%)                          fn_span: expr.span,
        .                               }
        .                           } else {
        .                               let adt_data =
      800 ( 0.00%)                          if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = fun.kind {
        .                                       // Tuple-like ADTs are represented as ExprKind::Call. We convert them here.
      972 ( 0.00%)                              expr_ty.ty_adt_def().and_then(|adt_def| match path.res {
       84 ( 0.00%)                                  Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_id) => {
      168 ( 0.00%)                                      Some((adt_def, adt_def.variant_index_with_ctor_id(ctor_id)))
        .                                           }
        .                                           Res::SelfCtor(..) => Some((adt_def, VariantIdx::new(0))),
        .                                           _ => None,
        .                                       })
        .                                   } else {
        .                                       None
        .                                   };
      244 ( 0.00%)                      if let Some((adt_def, index)) = adt_data {
      210 ( 0.00%)                          let substs = self.typeck_results().node_substs(fun.hir_id);
      126 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
        .                                   let user_ty =
      210 ( 0.00%)                              user_provided_types.get(fun.hir_id).copied().map(|mut u_ty| {
        .                                           if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {
        .                                               *did = adt_def.did;
        .                                           }
        .                                           u_ty
        .                                       });
        .                                   debug!("make_mirror_unadjusted: (call) user_ty={:?}", user_ty);
        .           
       42 ( 0.00%)                          let field_refs = args
        .                                       .iter()
        .                                       .enumerate()
        .                                       .map(|(idx, e)| FieldExpr {
        .                                           name: Field::new(idx),
        .                                           expr: self.mirror_expr(e),
        .                                       })
        .                                       .collect();
        .                                   ExprKind::Adt(Box::new(Adt {
-- line 246 ----------------------------------------
-- line 247 ----------------------------------------
        .                                       adt_def,
        .                                       substs,
        .                                       variant_index: index,
        .                                       fields: field_refs,
        .                                       user_ty,
        .                                       base: None,
        .                                   }))
        .                               } else {
      472 ( 0.00%)                          ExprKind::Call {
      670 ( 0.00%)                              ty: self.typeck_results().node_type(fun.hir_id),
      118 ( 0.00%)                              fun: self.mirror_expr(fun),
      472 ( 0.00%)                              args: self.mirror_exprs(args),
        .                                       from_hir_call: true,
      118 ( 0.00%)                              fn_span: expr.span,
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, mutbl, ref arg) => {
   34,020 ( 0.00%)                  ExprKind::Borrow { borrow_kind: mutbl.to_borrow_kind(), arg: self.mirror_expr(arg) }
        .                       }
        .           
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Raw, mutability, ref arg) => {
        .                           ExprKind::AddressOf { mutability, arg: self.mirror_expr(arg) }
        .                       }
        .           
    2,282 ( 0.00%)              hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: self.mirror_block(blk) },
        .           
        .                       hir::ExprKind::Assign(ref lhs, ref rhs, _) => {
      168 ( 0.00%)                  ExprKind::Assign { lhs: self.mirror_expr(lhs), rhs: self.mirror_expr(rhs) }
        .                       }
        .           
        2 ( 0.00%)              hir::ExprKind::AssignOp(op, ref lhs, ref rhs) => {
        8 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
        .                               let rhs = self.mirror_expr(rhs);
        .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
        .                           } else {
       10 ( 0.00%)                      ExprKind::AssignOp {
        6 ( 0.00%)                          op: bin_op(op.node),
        2 ( 0.00%)                          lhs: self.mirror_expr(lhs),
        2 ( 0.00%)                          rhs: self.mirror_expr(rhs),
        .                               }
        .                           }
        .                       }
        .           
   35,960 ( 0.00%)              hir::ExprKind::Lit(ref lit) => ExprKind::Literal {
  143,840 ( 0.00%)                  literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, false),
        .                           user_ty: None,
        .                           const_id: None,
        .                       },
        .           
       77 ( 0.00%)              hir::ExprKind::Binary(op, ref lhs, ref rhs) => {
      308 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
        .                               let rhs = self.mirror_expr(rhs);
        .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
        .                           } else {
        .                               // FIXME overflow
      300 ( 0.00%)                      match op.node {
       16 ( 0.00%)                          hir::BinOpKind::And => ExprKind::LogicalOp {
        .                                       op: LogicalOp::And,
        4 ( 0.00%)                              lhs: self.mirror_expr(lhs),
        4 ( 0.00%)                              rhs: self.mirror_expr(rhs),
        .                                   },
        .                                   hir::BinOpKind::Or => ExprKind::LogicalOp {
        .                                       op: LogicalOp::Or,
        .                                       lhs: self.mirror_expr(lhs),
        .                                       rhs: self.mirror_expr(rhs),
        .                                   },
        .                                   _ => {
      292 ( 0.00%)                              let op = bin_op(op.node);
      365 ( 0.00%)                              ExprKind::Binary {
        .                                           op,
       73 ( 0.00%)                                  lhs: self.mirror_expr(lhs),
       73 ( 0.00%)                                  rhs: self.mirror_expr(rhs),
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Index(ref lhs, ref index) => {
       35 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
        .                               let index = self.mirror_expr(index);
       65 ( 0.00%)                      self.overloaded_place(expr, expr_ty, None, Box::new([lhs, index]), expr.span)
        .                           } else {
        8 ( 0.00%)                      ExprKind::Index { lhs: self.mirror_expr(lhs), index: self.mirror_expr(index) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Deref, ref arg) => {
      135 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
        .                               self.overloaded_place(expr, expr_ty, None, Box::new([arg]), expr.span)
        .                           } else {
       81 ( 0.00%)                      ExprKind::Deref { arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Not, ref arg) => {
        .                           if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
        .                               self.overloaded_operator(expr, Box::new([arg]))
        .                           } else {
-- line 353 ----------------------------------------
-- line 365 ----------------------------------------
        .                                   user_ty: None,
        .                                   const_id: None,
        .                               }
        .                           } else {
        .                               ExprKind::Unary { op: UnOp::Neg, arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
       36 ( 0.00%)              hir::ExprKind::Struct(ref qpath, ref fields, ref base) => match expr_ty.kind() {
       36 ( 0.00%)                  ty::Adt(adt, substs) => match adt.adt_kind() {
        .                               AdtKind::Struct | AdtKind::Union => {
       54 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
       72 ( 0.00%)                          let user_ty = user_provided_types.get(expr.hir_id).copied();
        .                                   debug!("make_mirror_unadjusted: (struct/union) user_ty={:?}", user_ty);
       72 ( 0.00%)                          ExprKind::Adt(Box::new(Adt {
       36 ( 0.00%)                              adt_def: adt,
        .                                       variant_index: VariantIdx::new(0),
       36 ( 0.00%)                              substs,
        .                                       user_ty,
       36 ( 0.00%)                              fields: self.field_refs(fields),
       72 ( 0.00%)                              base: base.as_ref().map(|base| FruInfo {
        .                                           base: self.mirror_expr(base),
        .                                           field_types: self.typeck_results().fru_field_types()[expr.hir_id]
        .                                               .iter()
        .                                               .copied()
        .                                               .collect(),
        .                                       }),
        .                                   }))
        .                               }
-- line 393 ----------------------------------------
-- line 418 ----------------------------------------
        .                               }
        .                           },
        .                           _ => {
        .                               span_bug!(expr.span, "unexpected type for struct literal: {:?}", expr_ty);
        .                           }
        .                       },
        .           
        .                       hir::ExprKind::Closure(..) => {
       27 ( 0.00%)                  let closure_ty = self.typeck_results().expr_ty(expr);
       27 ( 0.00%)                  let (def_id, substs, movability) = match *closure_ty.kind() {
        .                               ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs), None),
        .                               ty::Generator(def_id, substs, movability) => {
        .                                   (def_id, UpvarSubsts::Generator(substs), Some(movability))
        .                               }
        .                               _ => {
        .                                   span_bug!(expr.span, "closure expr w/o closure type: {:?}", closure_ty);
        .                               }
        .                           };
        .           
       54 ( 0.00%)                  let upvars = self
        .                               .typeck_results
        .                               .closure_min_captures_flattened(def_id)
        .                               .zip(substs.upvar_tys())
        .                               .map(|(captured_place, ty)| {
       40 ( 0.00%)                          let upvars = self.capture_upvar(expr, captured_place, ty);
      112 ( 0.00%)                          self.thir.exprs.push(upvars)
        .                               })
        .                               .collect();
        .           
        .                           // Convert the closure fake reads, if any, from hir `Place` to ExprRef
        9 ( 0.00%)                  let fake_reads = match self.typeck_results.closure_fake_reads.get(&def_id) {
        .                               Some(fake_reads) => fake_reads
        .                                   .iter()
        .                                   .map(|(place, cause, hir_id)| {
        .                                       let expr = self.convert_captured_hir_place(expr, place.clone());
        .                                       (self.thir.exprs.push(expr), *cause, *hir_id)
        .                                   })
        .                                   .collect(),
        .                               None => Vec::new(),
        .                           };
        .           
      171 ( 0.00%)                  ExprKind::Closure { closure_id: def_id, substs, upvars, movability, fake_reads }
        .                       }
        .           
    1,941 ( 0.00%)              hir::ExprKind::Path(ref qpath) => {
    7,764 ( 0.00%)                  let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
    7,764 ( 0.00%)                  self.convert_path_expr(expr, res)
        .                       }
        .           
        .                       hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {
        .                           template: asm.template,
        .                           operands: asm
        .                               .operands
        .                               .iter()
        .                               .map(|(op, _op_sp)| {
-- line 472 ----------------------------------------
-- line 581 ----------------------------------------
        .                           let count = match ty.kind() {
        .                               ty::Array(_, ct) => ct,
        .                               _ => span_bug!(expr.span, "unexpected repeat expr ty: {:?}", ty),
        .                           };
        .           
        .                           ExprKind::Repeat { value: self.mirror_expr(v), count }
        .                       }
        .                       hir::ExprKind::Ret(ref v) => {
       72 ( 0.00%)                  ExprKind::Return { value: v.as_ref().map(|v| self.mirror_expr(v)) }
        .                       }
       30 ( 0.00%)              hir::ExprKind::Break(dest, ref value) => match dest.target_id {
       50 ( 0.00%)                  Ok(target_id) => ExprKind::Break {
        .                               label: region::Scope { id: target_id.local_id, data: region::ScopeData::Node },
        .                               value: value.as_ref().map(|value| self.mirror_expr(value)),
        .                           },
        .                           Err(err) => bug!("invalid loop id for break: {}", err),
        .                       },
       15 ( 0.00%)              hir::ExprKind::Continue(dest) => match dest.target_id {
       20 ( 0.00%)                  Ok(loop_id) => ExprKind::Continue {
        .                               label: region::Scope { id: loop_id.local_id, data: region::ScopeData::Node },
        .                           },
        .                           Err(err) => bug!("invalid loop id for continue: {}", err),
        .                       },
       24 ( 0.00%)              hir::ExprKind::Let(let_expr) => ExprKind::Let {
        3 ( 0.00%)                  expr: self.mirror_expr(let_expr.init),
        9 ( 0.00%)                  pat: self.pattern_from_hir(let_expr.pat),
        .                       },
      330 ( 0.00%)              hir::ExprKind::If(cond, then, else_opt) => ExprKind::If {
        .                           if_then_scope: region::Scope {
       30 ( 0.00%)                      id: then.hir_id.local_id,
        .                               data: region::ScopeData::IfThen,
        .                           },
        .                           cond: self.mirror_expr(cond),
        .                           then: self.mirror_expr(then),
        .                           else_opt: else_opt.map(|el| self.mirror_expr(el)),
        .                       },
      265 ( 0.00%)              hir::ExprKind::Match(ref discr, ref arms, _) => ExprKind::Match {
       53 ( 0.00%)                  scrutinee: self.mirror_expr(discr),
    4,418 ( 0.00%)                  arms: arms.iter().map(|a| self.convert_arm(a)).collect(),
        .                       },
        .                       hir::ExprKind::Loop(ref body, ..) => {
       50 ( 0.00%)                  let block_ty = self.typeck_results().node_type(body.hir_id);
       60 ( 0.00%)                  let temp_lifetime = self.region_scope_tree.temporary_scope(body.hir_id.local_id);
       40 ( 0.00%)                  let block = self.mirror_block(body);
      150 ( 0.00%)                  let body = self.thir.exprs.push(Expr {
        .                               ty: block_ty,
        .                               temp_lifetime,
       10 ( 0.00%)                      span: block.span,
       80 ( 0.00%)                      kind: ExprKind::Block { body: block },
        .                           });
       30 ( 0.00%)                  ExprKind::Loop { body }
        .                       }
      348 ( 0.00%)              hir::ExprKind::Field(ref source, ..) => ExprKind::Field {
       87 ( 0.00%)                  lhs: self.mirror_expr(source),
      522 ( 0.00%)                  name: Field::new(self.tcx.field_index(expr.hir_id, self.typeck_results)),
        .                       },
        .                       hir::ExprKind::Cast(ref source, ref cast_ty) => {
        .                           // Check for a user-given type annotation on this `cast`
       56 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
       84 ( 0.00%)                  let user_ty = user_provided_types.get(cast_ty.hir_id);
        .           
        .                           debug!(
        .                               "cast({:?}) has ty w/ hir_id {:?} and user provided ty {:?}",
        .                               expr, cast_ty.hir_id, user_ty,
        .                           );
        .           
        .                           // Check to see if this cast is a "coercion cast", where the cast is actually done
        .                           // using a coercion (or is a no-op).
       84 ( 0.00%)                  let cast = if self.typeck_results().is_coercion_cast(source.hir_id) {
        .                               // Convert the lexpr to a vexpr.
        .                               ExprKind::Use { source: self.mirror_expr(source) }
       42 ( 0.00%)                  } else if self.typeck_results().expr_ty(source).is_region_ptr() {
        .                               // Special cased so that we can type check that the element
        .                               // type of the source matches the pointed to type of the
        .                               // destination.
        .                               ExprKind::Pointer {
        .                                   source: self.mirror_expr(source),
        .                                   cast: PointerCast::ArrayToPointer,
        .                               }
        .                           } else {
-- line 660 ----------------------------------------
-- line 664 ----------------------------------------
        .                               // enum's layout (or its tag type) to compute it during const eval
        .                               // Example:
        .                               // enum Foo {
        .                               //     A,
        .                               //     B = A as isize + 4,
        .                               // }
        .                               // The correct solution would be to add symbolic computations to miri,
        .                               // so we wouldn't have to compute and store the actual value
       52 ( 0.00%)                      let var = if let hir::ExprKind::Path(ref qpath) = source.kind {
       60 ( 0.00%)                          let res = self.typeck_results().qpath_res(qpath, source.hir_id);
       70 ( 0.00%)                          self.typeck_results().node_type(source.hir_id).ty_adt_def().and_then(
        .                                       |adt_def| match res {
        .                                           Res::Def(
        .                                               DefKind::Ctor(CtorOf::Variant, CtorKind::Const),
        .                                               variant_ctor_id,
        .                                           ) => {
        .                                               let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);
        .                                               let (d, o) = adt_def.discriminant_def_for_variant(idx);
        .                                               use rustc_middle::ty::util::IntTypeExt;
-- line 682 ----------------------------------------
-- line 683 ----------------------------------------
        .                                               let ty = adt_def.repr.discr_type();
        .                                               let ty = ty.to_ty(self.tcx());
        .                                               Some((d, o, ty))
        .                                           }
        .                                           _ => None,
        .                                       },
        .                                   )
        .                               } else {
        8 ( 0.00%)                          None
        .                               };
        .           
       30 ( 0.00%)                      let source = if let Some((did, offset, var_ty)) = var {
        .                                   let mk_const = |literal| Expr {
        .                                       temp_lifetime,
        .                                       ty: var_ty,
        .                                       span: expr.span,
        .                                       kind: ExprKind::Literal { literal, user_ty: None, const_id: None },
        .                                   };
        .                                   let offset = self.thir.exprs.push(mk_const(ty::Const::from_bits(
        .                                       self.tcx,
-- line 702 ----------------------------------------
-- line 723 ----------------------------------------
        .                                               ty: var_ty,
        .                                               span: expr.span,
        .                                               kind: bin,
        .                                           })
        .                                       }
        .                                       None => offset,
        .                                   }
        .                               } else {
       10 ( 0.00%)                          self.mirror_expr(source)
        .                               };
        .           
        .                               ExprKind::Cast { source: source }
        .                           };
        .           
       28 ( 0.00%)                  if let Some(user_ty) = user_ty {
        .                               // NOTE: Creating a new Expr and wrapping a Cast inside of it may be
        .                               //       inefficient, revisit this when performance becomes an issue.
        .                               let cast_expr = self.thir.exprs.push(Expr {
        .                                   temp_lifetime,
        .                                   ty: expr_ty,
        .                                   span: expr.span,
        .                                   kind: cast,
        .                               });
        .                               debug!("make_mirror_unadjusted: (cast) user_ty={:?}", user_ty);
        .           
        .                               ExprKind::ValueTypeAscription { source: cast_expr, user_ty: Some(*user_ty) }
        .                           } else {
       56 ( 0.00%)                      cast
        .                           }
        .                       }
        .                       hir::ExprKind::Type(ref source, ref ty) => {
        .                           let user_provided_types = self.typeck_results.user_provided_types();
        .                           let user_ty = user_provided_types.get(ty.hir_id).copied();
        .                           debug!("make_mirror_unadjusted: (type) user_ty={:?}", user_ty);
        .                           let mirrored = self.mirror_expr(source);
        .                           if source.is_syntactic_place_expr() {
        .                               ExprKind::PlaceTypeAscription { source: mirrored, user_ty }
        .                           } else {
        .                               ExprKind::ValueTypeAscription { source: mirrored, user_ty }
        .                           }
        .                       }
        .                       hir::ExprKind::DropTemps(ref source) => {
      140 ( 0.00%)                  ExprKind::Use { source: self.mirror_expr(source) }
        .                       }
        .                       hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },
        .                       hir::ExprKind::Array(ref fields) => {
   33,840 ( 0.00%)                  ExprKind::Array { fields: self.mirror_exprs(fields) }
        .                       }
   38,495 ( 0.00%)              hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: self.mirror_exprs(fields) },
        .           
        .                       hir::ExprKind::Yield(ref v, _) => ExprKind::Yield { value: self.mirror_expr(v) },
        .                       hir::ExprKind::Err => unreachable!(),
        .                   };
        .           
2,041,632 ( 0.04%)          Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind }
  480,384 ( 0.01%)      }
        .           
    2,781 ( 0.00%)      fn user_substs_applied_to_res(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   res: Res,
        .               ) -> Option<ty::CanonicalUserType<'tcx>> {
        .                   debug!("user_substs_applied_to_res: res={:?}", res);
    1,854 ( 0.00%)          let user_provided_type = match res {
        .                       // A reference to something callable -- e.g., a fn, method, or
        .                       // a tuple-struct or tuple-variant. This has the type of a
        .                       // `Fn` but with the user-given substitutions.
        .                       Res::Def(DefKind::Fn, _)
        .                       | Res::Def(DefKind::AssocFn, _)
        .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
        .                       | Res::Def(DefKind::Const, _)
        .                       | Res::Def(DefKind::AssocConst, _) => {
    2,163 ( 0.00%)                  self.typeck_results().user_provided_types().get(hir_id).copied()
        .                       }
        .           
        .                       // A unit struct/variant which is used as a value (e.g.,
        .                       // `None`). This has the type of the enum/struct that defines
        .                       // this variant -- but with the substitutions given by the
        .                       // user.
        .                       Res::Def(DefKind::Ctor(_, CtorKind::Const), _) => {
        .                           self.user_substs_applied_to_ty_of_hir_id(hir_id)
-- line 803 ----------------------------------------
-- line 805 ----------------------------------------
        .           
        .                       // `Self` is used in expression as a tuple struct constructor or a unit struct constructor
        .                       Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id),
        .           
        .                       _ => bug!("user_substs_applied_to_res: unexpected res {:?} at {:?}", res, hir_id),
        .                   };
        .                   debug!("user_substs_applied_to_res: user_provided_type={:?}", user_provided_type);
        .                   user_provided_type
    1,854 ( 0.00%)      }
        .           
    1,586 ( 0.00%)      fn method_callee(
        .                   &mut self,
        .                   expr: &hir::Expr<'_>,
        .                   span: Span,
        .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
        .               ) -> Expr<'tcx> {
      732 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
      976 ( 0.00%)          let (def_id, substs, user_ty) = match overloaded_callee {
        .                       Some((def_id, substs)) => (def_id, substs, None),
        .                       None => {
        .                           let (kind, def_id) =
    1,071 ( 0.00%)                      self.typeck_results().type_dependent_def(expr.hir_id).unwrap_or_else(|| {
        .                                   span_bug!(expr.span, "no type-dependent def for method callee")
        .                               });
    1,785 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, Res::Def(kind, def_id));
        .                           debug!("method_callee: user_ty={:?}", user_ty);
    1,785 ( 0.00%)                  (def_id, self.typeck_results().node_substs(expr.hir_id), user_ty)
        .                       }
        .                   };
        .                   let ty = self.tcx().mk_fn_def(def_id, substs);
    1,586 ( 0.00%)          Expr {
        .                       temp_lifetime,
        .                       ty,
        .                       span,
        .                       kind: ExprKind::Literal {
        .                           literal: ty::Const::zero_sized(self.tcx(), ty),
      732 ( 0.00%)                  user_ty,
        .                           const_id: None,
        .                       },
        .                   }
      976 ( 0.00%)      }
        .           
   13,095 ( 0.00%)      fn convert_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) -> ArmId {
   11,640 ( 0.00%)          let arm = Arm {
    4,365 ( 0.00%)              pattern: self.pattern_from_hir(&arm.pat),
        2 ( 0.00%)              guard: arm.guard.as_ref().map(|g| match g {
        1 ( 0.00%)                  hir::Guard::If(ref e) => Guard::If(self.mirror_expr(e)),
        .                           hir::Guard::IfLet(ref pat, ref e) => {
        .                               Guard::IfLet(self.pattern_from_hir(pat), self.mirror_expr(e))
        .                           }
        .                       }),
    1,455 ( 0.00%)              body: self.mirror_expr(arm.body),
    2,910 ( 0.00%)              lint_level: LintLevel::Explicit(arm.hir_id),
        .                       scope: region::Scope { id: arm.hir_id.local_id, data: region::ScopeData::Node },
    1,455 ( 0.00%)              span: arm.span,
        .                   };
   21,825 ( 0.00%)          self.thir.arms.push(arm)
   13,095 ( 0.00%)      }
        .           
        .               fn convert_path_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, res: Res) -> ExprKind<'tcx> {
   13,587 ( 0.00%)          let substs = self.typeck_results().node_substs(expr.hir_id);
   20,432 ( 0.00%)          match res {
        .                       // A regular function, constructor function or a constant.
        .                       Res::Def(DefKind::Fn, _)
        .                       | Res::Def(DefKind::AssocFn, _)
        .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
        .                       | Res::SelfCtor(..) => {
    1,390 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
        .                           debug!("convert_path_expr: user_ty={:?}", user_ty);
      139 ( 0.00%)                  ExprKind::Literal {
        .                               literal: ty::Const::zero_sized(
      278 ( 0.00%)                          self.tcx,
      417 ( 0.00%)                          self.typeck_results().node_type(expr.hir_id),
        .                               ),
    1,112 ( 0.00%)                      user_ty,
        .                               const_id: None,
        .                           }
        .                       }
        .           
        .                       Res::Def(DefKind::ConstParam, def_id) => {
        .                           let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());
        .                           let item_id = self.tcx.hir().get_parent_node(hir_id);
        .                           let item_def_id = self.tcx.hir().local_def_id(item_id);
-- line 887 ----------------------------------------
-- line 895 ----------------------------------------
        .                                   ty: self.typeck_results().node_type(expr.hir_id),
        .                               }),
        .                               user_ty: None,
        .                               const_id: Some(def_id),
        .                           }
        .                       }
        .           
        .                       Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {
      459 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
        .                           debug!("convert_path_expr: (const) user_ty={:?}", user_ty);
      255 ( 0.00%)                  ExprKind::Literal {
      612 ( 0.00%)                      literal: self.tcx.mk_const(ty::Const {
        .                                   val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(
        .                                       ty::WithOptConstParam::unknown(def_id),
        .                                       substs,
        .                                   )),
      153 ( 0.00%)                          ty: self.typeck_results().node_type(expr.hir_id),
        .                               }),
      408 ( 0.00%)                      user_ty,
        .                               const_id: Some(def_id),
        .                           }
        .                       }
        .           
    6,845 ( 0.00%)              Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {
    6,845 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
    5,476 ( 0.00%)                  let user_provided_type = user_provided_types.get(expr.hir_id).copied();
        .                           debug!("convert_path_expr: user_provided_type={:?}", user_provided_type);
    5,476 ( 0.00%)                  let ty = self.typeck_results().node_type(expr.hir_id);
    2,738 ( 0.00%)                  match ty.kind() {
        .                               // A unit struct/variant which is used as a value.
        .                               // We return a completely different ExprKind here to account for this special case.
        .                               ty::Adt(adt_def, substs) => ExprKind::Adt(Box::new(Adt {
    1,369 ( 0.00%)                          adt_def,
    6,845 ( 0.00%)                          variant_index: adt_def.variant_index_with_ctor_id(def_id),
    1,369 ( 0.00%)                          substs,
        .                                   user_ty: user_provided_type,
        .                                   fields: Box::new([]),
        .                                   base: None,
        .                               })),
        .                               _ => bug!("unexpected ty: {:?}", ty),
        .                           }
        .                       }
        .           
-- line 937 ----------------------------------------
-- line 953 ----------------------------------------
        .                                   def_id: id,
        .                               }
        .                           };
        .                           ExprKind::Deref {
        .                               arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),
        .                           }
        .                       }
        .           
    3,056 ( 0.00%)              Res::Local(var_hir_id) => self.convert_var(var_hir_id),
        .           
        .                       _ => span_bug!(expr.span, "res `{:?}` not yet implemented", res),
        .                   }
        .               }
        .           
    3,900 ( 0.00%)      fn convert_var(&mut self, var_hir_id: hir::HirId) -> ExprKind<'tcx> {
        .                   // We want upvars here not captures.
        .                   // Captures will be handled in MIR.
        .                   let is_upvar = self
        .                       .tcx
        .                       .upvars_mentioned(self.body_owner)
        .                       .map_or(false, |upvars| upvars.contains_key(&var_hir_id));
        .           
        .                   debug!(
        .                       "convert_var({:?}): is_upvar={}, body_owner={:?}",
        .                       var_hir_id, is_upvar, self.body_owner
        .                   );
        .           
       11 ( 0.00%)          if is_upvar {
       56 ( 0.00%)              ExprKind::UpvarRef { closure_def_id: self.body_owner, var_hir_id }
        .                   } else {
    1,146 ( 0.00%)              ExprKind::VarRef { id: var_hir_id }
        .                   }
    3,120 ( 0.00%)      }
        .           
        .               fn overloaded_operator(
        .                   &mut self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   args: Box<[ExprId]>,
        .               ) -> ExprKind<'tcx> {
        .                   let fun = self.method_callee(expr, expr.span, None);
        .                   let fun = self.thir.exprs.push(fun);
-- line 993 ----------------------------------------
-- line 995 ----------------------------------------
        .                       ty: self.thir[fun].ty,
        .                       fun,
        .                       args,
        .                       from_hir_call: false,
        .                       fn_span: expr.span,
        .                   }
        .               }
        .           
      112 ( 0.00%)      fn overloaded_place(
        .                   &mut self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   place_ty: Ty<'tcx>,
        .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
        .                   args: Box<[ExprId]>,
        .                   span: Span,
        .               ) -> ExprKind<'tcx> {
        .                   // For an overloaded *x or x[y] expression of type T, the method
        .                   // call returns an &T and we must add the deref so that the types
        .                   // line up (this is because `*x` and `x[y]` represent places):
        .           
        .                   // Reconstruct the output assuming it's a reference with the
        .                   // same region and mutability as the receiver. This holds for
        .                   // `Deref(Mut)::Deref(_mut)` and `Index(Mut)::index(_mut)`.
       64 ( 0.00%)          let (region, mutbl) = match *self.thir[args[0]].ty.kind() {
       16 ( 0.00%)              ty::Ref(region, _, mutbl) => (region, mutbl),
        .                       _ => span_bug!(span, "overloaded_place: receiver is not a reference"),
        .                   };
        8 ( 0.00%)          let ref_ty = self.tcx.mk_ref(region, ty::TypeAndMut { ty: place_ty, mutbl });
        .           
        .                   // construct the complete expression `foo()` for the overloaded call,
        .                   // which will yield the &T type
       32 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
       48 ( 0.00%)          let fun = self.method_callee(expr, span, overloaded_callee);
      112 ( 0.00%)          let fun = self.thir.exprs.push(fun);
       48 ( 0.00%)          let fun_ty = self.thir[fun].ty;
      112 ( 0.00%)          let ref_expr = self.thir.exprs.push(Expr {
        .                       temp_lifetime,
        .                       ty: ref_ty,
        .                       span,
        .                       kind: ExprKind::Call { ty: fun_ty, fun, args, from_hir_call: false, fn_span: span },
        .                   });
        .           
        .                   // construct and return a deref wrapper `*foo()`
       16 ( 0.00%)          ExprKind::Deref { arg: ref_expr }
       64 ( 0.00%)      }
        .           
       88 ( 0.00%)      fn convert_captured_hir_place(
        .                   &mut self,
        .                   closure_expr: &'tcx hir::Expr<'tcx>,
        .                   place: HirPlace<'tcx>,
        .               ) -> Expr<'tcx> {
       32 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);
        .                   let var_ty = place.base_ty;
        .           
        .                   // The result of capture analysis in `rustc_typeck/check/upvar.rs`represents a captured path
        .                   // as it's seen for use within the closure and not at the time of closure creation.
        .                   //
        .                   // That is we see expect to see it start from a captured upvar and not something that is local
        .                   // to the closure's parent.
       16 ( 0.00%)          let var_hir_id = match place.base {
       16 ( 0.00%)              HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,
        .                       base => bug!("Expected an upvar, found {:?}", base),
        .                   };
        .           
      136 ( 0.00%)          let mut captured_place_expr = Expr {
        .                       temp_lifetime,
        .                       ty: var_ty,
        8 ( 0.00%)              span: closure_expr.span,
       40 ( 0.00%)              kind: self.convert_var(var_hir_id),
        .                   };
        .           
        .                   for proj in place.projections.iter() {
        .                       let kind = match proj.kind {
        .                           HirProjectionKind::Deref => {
        .                               ExprKind::Deref { arg: self.thir.exprs.push(captured_place_expr) }
        .                           }
        .                           HirProjectionKind::Field(field, ..) => {
-- line 1071 ----------------------------------------
-- line 1082 ----------------------------------------
        .                           }
        .                       };
        .           
        .                       captured_place_expr =
        .                           Expr { temp_lifetime, ty: proj.ty, span: closure_expr.span, kind };
        .                   }
        .           
        .                   captured_place_expr
       72 ( 0.00%)      }
        .           
       80 ( 0.00%)      fn capture_upvar(
        .                   &mut self,
        .                   closure_expr: &'tcx hir::Expr<'tcx>,
        .                   captured_place: &'tcx ty::CapturedPlace<'tcx>,
        .                   upvar_ty: Ty<'tcx>,
        .               ) -> Expr<'tcx> {
        .                   let upvar_capture = captured_place.info.capture_kind;
        .                   let captured_place_expr =
       56 ( 0.00%)              self.convert_captured_hir_place(closure_expr, captured_place.place.clone());
       24 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);
        .           
       16 ( 0.00%)          match upvar_capture {
        .                       ty::UpvarCapture::ByValue => captured_place_expr,
        .                       ty::UpvarCapture::ByRef(upvar_borrow) => {
       40 ( 0.00%)                  let borrow_kind = match upvar_borrow {
        .                               ty::BorrowKind::ImmBorrow => BorrowKind::Shared,
        .                               ty::BorrowKind::UniqueImmBorrow => BorrowKind::Unique,
        .                               ty::BorrowKind::MutBorrow => BorrowKind::Mut { allow_two_phase_borrow: false },
        .                           };
       56 ( 0.00%)                  Expr {
        .                               temp_lifetime,
        .                               ty: upvar_ty,
        8 ( 0.00%)                      span: closure_expr.span,
        .                               kind: ExprKind::Borrow {
        .                                   borrow_kind,
      120 ( 0.00%)                          arg: self.thir.exprs.push(captured_place_expr),
        .                               },
        .                           }
        .                       }
        .                   }
       72 ( 0.00%)      }
        .           
        .               /// Converts a list of named fields (i.e., for struct-like struct/enum ADTs) into FieldExpr.
        .               fn field_refs(&mut self, fields: &'tcx [hir::ExprField<'tcx>]) -> Box<[FieldExpr]> {
        .                   fields
        .                       .iter()
        .                       .map(|field| FieldExpr {
      165 ( 0.00%)                  name: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),
        .                           expr: self.mirror_expr(field.expr),
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
        .           trait ToBorrowKind {
        .               fn to_borrow_kind(&self) -> BorrowKind;
        .           }
        .           
        .           impl ToBorrowKind for AutoBorrowMutability {
        .               fn to_borrow_kind(&self) -> BorrowKind {
        .                   use rustc_middle::ty::adjustment::AllowTwoPhase;
   48,363 ( 0.00%)          match *self {
        .                       AutoBorrowMutability::Mut { allow_two_phase_borrow } => BorrowKind::Mut {
        .                           allow_two_phase_borrow: match allow_two_phase_borrow {
        .                               AllowTwoPhase::Yes => true,
        .                               AllowTwoPhase::No => false,
        .                           },
        .                       },
        .                       AutoBorrowMutability::Not => BorrowKind::Shared,
        .                   }
        .               }
        .           }
        .           
        .           impl ToBorrowKind for hir::Mutability {
        .               fn to_borrow_kind(&self) -> BorrowKind {
        6 ( 0.00%)          match *self {
        .                       hir::Mutability::Mut => BorrowKind::Mut { allow_two_phase_borrow: false },
        .                       hir::Mutability::Not => BorrowKind::Shared,
        .                   }
        .               }
        .           }
        .           
      150 ( 0.00%)  fn bin_op(op: hir::BinOpKind) -> BinOp {
      675 ( 0.00%)      match op {
        .                   hir::BinOpKind::Add => BinOp::Add,
        .                   hir::BinOpKind::Sub => BinOp::Sub,
        .                   hir::BinOpKind::Mul => BinOp::Mul,
        .                   hir::BinOpKind::Div => BinOp::Div,
        .                   hir::BinOpKind::Rem => BinOp::Rem,
        .                   hir::BinOpKind::BitXor => BinOp::BitXor,
        .                   hir::BinOpKind::BitAnd => BinOp::BitAnd,
        .                   hir::BinOpKind::BitOr => BinOp::BitOr,
-- line 1173 ----------------------------------------
-- line 1176 ----------------------------------------
        .                   hir::BinOpKind::Eq => BinOp::Eq,
        .                   hir::BinOpKind::Lt => BinOp::Lt,
        .                   hir::BinOpKind::Le => BinOp::Le,
        .                   hir::BinOpKind::Ne => BinOp::Ne,
        .                   hir::BinOpKind::Ge => BinOp::Ge,
        .                   hir::BinOpKind::Gt => BinOp::Gt,
        .                   _ => bug!("no equivalent for ast binop {:?}", op),
        .               }
      150 ( 0.00%)  }

  804,646 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                 

-- line 46 ----------------------------------------
        .           ///
        .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
        .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
        .               /// provided default definition delegates.  Implementors **should not** override
        .               /// this provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_super_fold_with` instead).
5,775,342 ( 0.10%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   35,244 ( 0.00%)          self.try_super_fold_with(folder).into_ok()
5,810,296 ( 0.10%)      }
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
        .               /// default definition delegates.  Implementors **should not** override this
        .               /// provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_fold_with` instead).
  166,539 ( 0.00%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   37,230 ( 0.00%)          self.try_fold_with(folder).into_ok()
  150,101 ( 0.00%)      }
        .           
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error>;
        .           
2,609,036 ( 0.05%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
  943,230 ( 0.02%)          self.try_super_fold_with(folder)
2,768,402 ( 0.05%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
  649,920 ( 0.01%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  354,598 ( 0.01%)          self.super_visit_with(visitor)
  389,588 ( 0.01%)      }
        .           
        .               /// Returns `true` if `self` has any late-bound regions that are either
        .               /// bound by `binder` or bound by some binder outside of `binder`.
        .               /// If `binder` is `ty::INNERMOST`, this indicates whether
        .               /// there are any late-bound regions that appear free.
        .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
  223,614 ( 0.00%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
        .               }
        .           
        .               /// Returns `true` if this `self` has any regions that escape `binder` (and
        .               /// hence are not bound by it).
        .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
       24 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
        .               }
        .           
  542,347 ( 0.01%)      fn has_escaping_bound_vars(&self) -> bool {
   50,973 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
  542,610 ( 0.01%)      }
        .           
   15,705 ( 0.00%)      #[instrument(level = "trace")]
        .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
   29,397 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
        .               }
        .               fn has_projections(&self) -> bool {
    1,130 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
        .               }
        .               fn has_opaque_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
        .               }
    3,376 ( 0.00%)      fn references_error(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_ERROR)
    3,376 ( 0.00%)      }
        .               fn has_param_types_or_consts(&self) -> bool {
      333 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
        .               }
        .               fn has_infer_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
        .               }
        .               fn has_infer_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
        .               }
        .               fn has_infer_types_or_consts(&self) -> bool {
   50,240 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
        .               }
   11,310 ( 0.00%)      fn needs_infer(&self) -> bool {
   39,234 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
   11,484 ( 0.00%)      }
        .               fn has_placeholders(&self) -> bool {
        .                   self.has_type_flags(
        .                       TypeFlags::HAS_RE_PLACEHOLDER
        .                           | TypeFlags::HAS_TY_PLACEHOLDER
        .                           | TypeFlags::HAS_CT_PLACEHOLDER,
        .                   )
        .               }
        .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
        .               fn has_erasable_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
        .               }
        .           
        .               /// Indicates whether this value references only 'global'
        .               /// generic parameters that are the same regardless of what fn we are
        .               /// in. This is used for caching.
        .               fn is_global(&self) -> bool {
    8,159 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
        .               }
        .           
        .               /// True if there are any late-bound regions
        .               fn has_late_bound_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
        .               }
        .           
        .               /// Indicates whether this value still has parameters/placeholders/inference variables
-- line 163 ----------------------------------------
-- line 194 ----------------------------------------
        .           
        .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
        .           
        .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
  333,127 ( 0.01%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
  919,579 ( 0.02%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   r.super_fold_with(self)
        .               }
        .           
        .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
   78,101 ( 0.00%)          c.super_fold_with(self)
        .               }
        .           
        .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
      135 ( 0.00%)          p.super_fold_with(self)
        .               }
        .           
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
        .           /// A blanket implementation of this trait (that defers to the relevant
        .           /// method of [`TypeFolder`]) is provided for all infallible folders in
        .           /// order to ensure the two APIs are coherent.
        .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
        .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    6,261 ( 0.00%)          t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
        .                   t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
        .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
        .                   c.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
    2,483 ( 0.00%)          p.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_mir_const(
        .                   &mut self,
        .                   c: mir::ConstantKind<'tcx>,
        .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
        .           }
        .           
        .           // Blanket implementation of fallible trait for infallible folders
        .           // delegates to infallible methods to prevent incoherence
        .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
        .           where
        .               F: TypeFolder<'tcx, Error = !>,
        .           {
   69,856 ( 0.00%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  122,444 ( 0.00%)          Ok(self.fold_binder(t))
  104,354 ( 0.00%)      }
        .           
    6,694 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
2,816,019 ( 0.05%)          Ok(self.fold_ty(t))
    5,042 ( 0.00%)      }
        .           
    1,352 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
  617,307 ( 0.01%)          Ok(self.fold_region(r))
    1,352 ( 0.00%)      }
        .           
   38,786 ( 0.00%)      fn try_fold_const(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
  170,707 ( 0.00%)          Ok(self.fold_const(c))
   38,741 ( 0.00%)      }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
        .                   Ok(self.fold_predicate(p))
        .               }
        .           
    1,848 ( 0.00%)      fn try_fold_mir_const(
        .                   &mut self,
        .                   c: mir::ConstantKind<'tcx>,
        .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
    2,816 ( 0.00%)          Ok(self.fold_mir_const(c))
    1,848 ( 0.00%)      }
        .           }
        .           
        .           pub trait TypeVisitor<'tcx>: Sized {
        .               type BreakTy = !;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
       18 ( 0.00%)          t.super_visit_with(self)
        .               }
        .           
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   t.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   r.super_visit_with(self)
        .               }
        .           
       24 ( 0.00%)      fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   c.super_visit_with(self)
       21 ( 0.00%)      }
        .           
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   uv.super_visit_with(self)
        .               }
        .           
        .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   p.super_visit_with(self)
        .               }
-- line 359 ----------------------------------------
-- line 380 ----------------------------------------
        .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
        .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
        .           {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
      464 ( 0.00%)          let t = ty.super_fold_with(self);
        .                   (self.ty_op)(t)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   let r = r.super_fold_with(self);
        .                   (self.lt_op)(r)
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        6 ( 0.00%)          let ct = ct.super_fold_with(self);
        .                   (self.ct_op)(ct)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Region folder
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
-- line 406 ----------------------------------------
-- line 415 ----------------------------------------
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
        .               }
        .           
        .               /// Invoke `callback` on every region appearing free in `value`.
   11,504 ( 0.00%)      pub fn for_each_free_region(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>),
        .               ) {
        .                   self.any_free_region_meets(value, |r| {
    2,128 ( 0.00%)              callback(r);
        .                       false
        .                   });
   10,066 ( 0.00%)      }
        .           
        .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
        .               pub fn all_free_regions_meet(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
   27,483 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
        .               }
        .           
        .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
        .               pub fn any_free_region_meets(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
        .                       F: FnMut(ty::Region<'tcx>) -> bool,
        .                   {
        .                       type BreakTy = ();
        .           
        .                       fn visit_binder<T: TypeFoldable<'tcx>>(
        .                           &mut self,
        .                           t: &Binder<'tcx, T>,
        .                       ) -> ControlFlow<Self::BreakTy> {
       78 ( 0.00%)                  self.outer_index.shift_in(1);
       24 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
       18 ( 0.00%)                  self.outer_index.shift_out(1);
        .                           result
        .                       }
        .           
    1,715 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   84,606 ( 0.00%)                  match *r {
        .                               ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
        .                                   ControlFlow::CONTINUE
        .                               }
        .                               _ => {
        .                                   if (self.callback)(r) {
        .                                       ControlFlow::BREAK
        .                                   } else {
        .                                       ControlFlow::CONTINUE
        .                                   }
        .                               }
        .                           }
    2,401 ( 0.00%)              }
        .           
        .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                           // We're only interested in types involving regions
   95,407 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
  104,701 ( 0.00%)                      ty.super_visit_with(self)
        .                           } else {
        .                               ControlFlow::CONTINUE
        .                           }
        .                       }
        .                   }
        .           
  288,034 ( 0.01%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
        .               }
        .           }
        .           
        .           /// Folds over the substructure of a type, visiting its component
        .           /// types and all regions that occur *free* within it.
        .           ///
        .           /// That is, `Ty` can contain function or method types that bind
        .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
        .           
        .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
        .               #[inline]
        .               pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   skipped_regions: &'a mut bool,
        .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
        .               ) -> RegionFolder<'a, 'tcx> {
1,105,440 ( 0.02%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  122,185 ( 0.00%)          self.tcx
  122,185 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
      460 ( 0.00%)          self.current_index.shift_in(1);
       78 ( 0.00%)          let t = t.super_fold_with(self);
      414 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
       94 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  151,392 ( 0.00%)          match *r {
       94 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
        .                           debug!(?self.current_index, "skipped bound region");
       94 ( 0.00%)                  *self.skipped_regions = true;
        .                           r
        .                       }
        .                       _ => {
        .                           debug!(?self.current_index, "folding free region");
  453,894 ( 0.01%)                  (self.fold_region_fn)(r, self.current_index)
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Bound vars replacer
        .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
        .               current_index: ty::DebruijnIndex,
        .           
        .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .           }
        .           
        .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
  101,148 ( 0.00%)      fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .               ) -> Self {
  355,710 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
   50,574 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
    4,879 ( 0.00%)          self.tcx
    2,280 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
  142,971 ( 0.00%)          self.current_index.shift_in(1);
   10,810 ( 0.00%)          let t = t.super_fold_with(self);
  108,093 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
   22,265 ( 0.00%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   14,078 ( 0.00%)          match *t.kind() {
      655 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
      131 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
        .                               let ty = fld_t(bound_ty);
      131 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
        .                           }
        .                       }
   13,816 ( 0.00%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
   14,721 ( 0.00%)                  return t.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   t
   17,790 ( 0.00%)      }
        .           
  335,396 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  171,470 ( 0.00%)          match *r {
  171,230 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
   85,615 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
        .                               let region = fld_r(br);
  171,540 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
        .                                   // If the callback returns a late-bound region,
        .                                   // that region should always use the INNERMOST
        .                                   // debruijn index. Then we adjust it to the
        .                                   // correct depth.
      155 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
    1,532 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
        .                               } else {
        .                                   region
        .                               };
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .                   r
  335,396 ( 0.01%)      }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        9 ( 0.00%)          match *ct {
        .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
        .                           if debruijn == self.current_index =>
        .                       {
        .                           if let Some(fld_c) = self.fld_c.as_mut() {
        .                               let ct = fld_c(bound_const, ty);
        .                               return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
        .                           }
        .                       }
        3 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
        .                           return ct.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   ct
        .               }
        .           }
        .           
-- line 681 ----------------------------------------
-- line 697 ----------------------------------------
        .                   mut fld_r: F,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
        .                   let mut real_fld_r =
   19,473 ( 0.00%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    1,556 ( 0.00%)          let value = value.skip_binder();
    4,088 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
    6,768 ( 0.00%)              value
        .                   } else {
    1,898 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
       88 ( 0.00%)              value.fold_with(&mut replacer)
        .                   };
   19,052 ( 0.00%)          (value, region_map)
        .               }
        .           
        .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
        .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
        .               /// closure replaces escaping bound consts.
  584,437 ( 0.01%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: T,
        .                   mut fld_r: F,
        .                   mut fld_t: G,
        .                   mut fld_c: H,
        .               ) -> T
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
   24,694 ( 0.00%)          if !value.has_escaping_bound_vars() {
   39,650 ( 0.00%)              value
        .                   } else {
        .                       let mut replacer =
  617,719 ( 0.01%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
    3,205 ( 0.00%)              value.fold_with(&mut replacer)
        .                   }
  401,399 ( 0.01%)      }
        .           
        .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
        .               /// closure replaces bound regions while the `fld_t` closure replaces bound
        .               /// types.
  166,644 ( 0.00%)      pub fn replace_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: Binder<'tcx, T>,
        .                   mut fld_r: F,
        .                   fld_t: G,
        .                   fld_c: H,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
   10,960 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
  164,172 ( 0.00%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
  186,824 ( 0.00%)          (value, region_map)
  112,213 ( 0.00%)      }
        .           
        .               /// Replaces any late-bound regions bound in `value` with
        .               /// free variants attached to `all_outlive_scope`.
    2,827 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
        .                   self,
        .                   all_outlive_scope: DefId,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_late_bound_regions(value, |br| {
    1,937 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
      298 ( 0.00%)                  scope: all_outlive_scope,
        .                           bound_region: br.kind,
        .                       }))
        .                   })
        .                   .0
    1,542 ( 0.00%)      }
        .           
        .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_escaping_bound_vars(
    2,400 ( 0.00%)              value,
        .                       |r| {
        .                           self.mk_region(ty::ReLateBound(
        .                               ty::INNERMOST,
        .                               ty::BoundRegion {
        .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
        .                                   kind: r.kind,
        .                               },
        .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
        .               fn collect_late_bound_regions<T>(
        .                   self,
        .                   value: &Binder<'tcx, T>,
        .                   just_constraint: bool,
        .               ) -> FxHashSet<ty::BoundRegionKind>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
      548 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
        .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
        .                   assert!(result.is_continue()); // should never have stopped early
      976 ( 0.00%)          collector.regions
        .               }
        .           
        .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
        .               /// method lookup and a few other places where precise region relationships are not required.
       98 ( 0.00%)      pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    1,064 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
       84 ( 0.00%)      }
        .           
        .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
        .               /// assigned starting at 0 and increasing monotonically in the order traversed
        .               /// by the fold operation.
        .               ///
        .               /// The chief purpose of this function is to canonicalize regions so that two
        .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
        .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
        .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
    8,627 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    6,255 ( 0.00%)          let mut counter = 0;
       45 ( 0.00%)          let inner = self
        .                       .replace_late_bound_regions(sig, |_| {
        .                           let br = ty::BoundRegion {
      278 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
        .                               kind: ty::BrAnon(counter),
        .                           };
    1,112 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
      695 ( 0.00%)                  counter += 1;
        .                           r
        .                       })
        .                       .0;
    1,251 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
    3,753 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
        .                   );
    6,816 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
    7,491 ( 0.00%)      }
        .           }
        .           
        .           pub struct ValidateBoundVars<'tcx> {
        .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
        .               binder_index: ty::DebruijnIndex,
        .               // We may encounter the same variable at different levels of binding, so
        .               // this can't just be `Ty`
        .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               current_index: ty::DebruijnIndex,
        .               amount: u32,
        .           }
        .           
        .           impl<'tcx> Shifter<'tcx> {
        .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
        .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
      262 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
-- line 1020 ----------------------------------------
-- line 1038 ----------------------------------------
        .                               self.tcx.mk_region(shifted)
        .                           }
        .                       }
        .                       _ => r,
        .                   }
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
      262 ( 0.00%)          match *ty.kind() {
        .                       ty::Bound(debruijn, bound_ty) => {
        .                           if self.amount == 0 || debruijn < self.current_index {
        .                               ty
        .                           } else {
        .                               let debruijn = debruijn.shifted_in(self.amount);
        .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
        .                           }
        .                       }
        .           
      393 ( 0.00%)              _ => ty.super_fold_with(self),
        .                   }
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
        .                       if self.amount == 0 || debruijn < self.current_index {
        .                           ct
        .                       } else {
-- line 1064 ----------------------------------------
-- line 1085 ----------------------------------------
        .           }
        .           
        .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               debug!("shift_vars(value={:?}, amount={})", value, amount);
        .           
      262 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
        .           struct FoundEscapingVars;
        .           
        .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
        .           /// bound region or a bound type.
        .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
        .               type BreakTy = FoundEscapingVars;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
   69,675 ( 0.00%)          self.outer_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
  104,146 ( 0.00%)          self.outer_index.shift_out(1);
        .                   result
        .               }
        .           
        .               #[inline]
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // If the outer-exclusive-binder is *strictly greater* than
        .                   // `outer_index`, that means that `t` contains some content
        .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
        .                   // visited.
        .                   if r.bound_at_or_above_binder(self.outer_index) {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
      140 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // we don't have a `visit_infer_const` callback, so we have to
        .                   // hook in here to catch this case (annoying...), but
        .                   // otherwise we do want to remember to visit the rest of the
        .                   // const, as it has types/regions embedded in a lot of other
        .                   // places.
      210 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
        .                           ControlFlow::Break(FoundEscapingVars)
        .                       }
        .                       _ => ct.super_visit_with(self),
        .                   }
      140 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
        .               #[instrument(level = "trace")]
        .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
        .                   debug!(
        .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
        .                       t,
        .                       t.flags(),
        .                       self.flags
        .                   );
  271,625 ( 0.00%)          if t.flags().intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(skip(self), level = "trace")]
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    1,370 ( 0.00%)          let flags = r.type_flags();
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
  188,433 ( 0.00%)          let flags = FlagComputation::for_const(c);
        .                   trace!(r.flags=?flags);
      568 ( 0.00%)          if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
    2,377 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
        .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
        .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
        .               /// types may mean that `'a` and `'b` don't appear in the results,
        .               /// so they are not considered *constrained*.
        .               just_constrained: bool,
        .           }
        .           
        .           impl LateBoundRegionsCollector {
      244 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    1,708 ( 0.00%)          LateBoundRegionsCollector {
        .                       current_index: ty::INNERMOST,
        .                       regions: Default::default(),
        .                       just_constrained,
        .                   }
      244 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   self.current_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
        .                   self.current_index.shift_out(1);
        .                   result
        .               }
        .           
      837 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs to a projection, as they may not appear
        .                   // in the normalized form
      728 ( 0.00%)          if self.just_constrained {
      744 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
      813 ( 0.00%)          t.super_visit_with(self)
      558 ( 0.00%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs of an unevaluated const, as they may not appear
        .                   // in the normalized form
        .                   if self.just_constrained {
        .                       if let ty::ConstKind::Unevaluated(..) = c.val {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
        .                   c.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
      242 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
       42 ( 0.00%)              if debruijn == self.current_index {
        .                           self.regions.insert(br.kind);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }

  286,799 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs
--------------------------------------------------------------------------------
Ir                 

-- line 77 ----------------------------------------
        .           //
        .           // FIXME(pnkfelix): this currently derives `PartialOrd` and `Ord` to
        .           // placate the same deriving in `ty::FreeRegion`, but we may want to
        .           // actually attach a more meaningful ordering to scopes than the one
        .           // generated via deriving here.
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Copy, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct Scope {
   63,936 ( 0.00%)      pub id: hir::ItemLocalId,
1,175,598 ( 0.02%)      pub data: ScopeData,
        .           }
        .           
        .           impl fmt::Debug for Scope {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.data {
        .                       ScopeData::Node => write!(fmt, "Node({:?})", self.id),
        .                       ScopeData::CallSite => write!(fmt, "CallSite({:?})", self.id),
        .                       ScopeData::Arguments => write!(fmt, "Arguments({:?})", self.id),
-- line 94 ----------------------------------------
-- line 99 ----------------------------------------
        .                           "Remainder {{ block: {:?}, first_statement_index: {}}}",
        .                           self.id,
        .                           fsi.as_u32(),
        .                       ),
        .                   }
        .               }
        .           }
        .           
5,294,128 ( 0.10%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum ScopeData {
        .               Node,
        .           
        .               /// Scope of the call-site for a function or closure
        .               /// (outlives the arguments as well as the body).
        .               CallSite,
        .           
-- line 115 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// N.B., likely to be replaced as API is refined; e.g., pnkfelix
        .               /// anticipates `fn entry_node_id` and `fn each_exit_node_id`.
        .               pub fn item_local_id(&self) -> hir::ItemLocalId {
        .                   self.id
        .               }
        .           
        .               pub fn hir_id(&self, scope_tree: &ScopeTree) -> Option<hir::HirId> {
   28,957 ( 0.00%)          scope_tree
        .                       .root_body
        .                       .map(|hir_id| hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() })
        .               }
        .           
        .               /// Returns the span of this `Scope`. Note that in general the
        .               /// returned span may not correspond to the span of any `NodeId` in
        .               /// the AST.
  202,699 ( 0.00%)      pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {
   57,914 ( 0.00%)          let hir_id = match self.hir_id(scope_tree) {
        .                       Some(hir_id) => hir_id,
        .                       None => return DUMMY_SP,
        .                   };
  115,828 ( 0.00%)          let span = tcx.hir().span(hir_id);
  115,828 ( 0.00%)          if let ScopeData::Remainder(first_statement_index) = self.data {
      486 ( 0.00%)              if let Node::Block(ref blk) = tcx.hir().get(hir_id) {
        .                           // Want span for scope starting after the
        .                           // indexed statement and ending at end of
        .                           // `blk`; reuse span of `blk` and shift `lo`
        .                           // forward to end of indexed statement.
        .                           //
        .                           // (This is the special case alluded to in the
        .                           // doc-comment for this method)
        .           
      648 ( 0.00%)                  let stmt_span = blk.stmts[first_statement_index.index()].span;
        .           
        .                           // To avoid issues with macro-generated spans, the span
        .                           // of the statement must be nested in that of the block.
      159 ( 0.00%)                  if span.lo() <= stmt_span.lo() && stmt_span.lo() <= span.hi() {
      312 ( 0.00%)                      return span.with_lo(stmt_span.lo());
        .                           }
        .                       }
        .                   }
        .                   span
  260,613 ( 0.00%)      }
        .           }
        .           
        .           pub type ScopeDepth = u32;
        .           
        .           /// The region scope tree encodes information about region relationships.
        .           #[derive(Default, Debug)]
        .           pub struct ScopeTree {
        .               /// If not empty, this body is the root of this region hierarchy.
-- line 209 ----------------------------------------
-- line 321 ----------------------------------------
        .               /// The `Span` of the yield.
        .               pub span: Span,
        .               /// The number of expressions and patterns appearing before the `yield` in the body, plus one.
        .               pub expr_and_pat_count: usize,
        .               pub source: hir::YieldSource,
        .           }
        .           
        .           impl ScopeTree {
  418,458 ( 0.01%)      pub fn record_scope_parent(&mut self, child: Scope, parent: Option<(Scope, ScopeDepth)>) {
        .                   debug!("{:?}.parent = {:?}", child, parent);
        .           
  139,486 ( 0.00%)          if let Some(p) = parent {
        .                       let prev = self.parent_map.insert(child, p);
   69,506 ( 0.00%)              assert!(prev.is_none());
        .                   }
        .           
        .                   // Record the destruction scopes for later so we can query them.
  139,486 ( 0.00%)          if let ScopeData::Destruction = child.data {
        .                       self.destruction_scopes.insert(child.item_local_id(), child);
        .                   }
  271,620 ( 0.00%)      }
        .           
  120,768 ( 0.00%)      pub fn opt_destruction_scope(&self, n: hir::ItemLocalId) -> Option<Scope> {
        .                   self.destruction_scopes.get(&n).cloned()
  120,768 ( 0.00%)      }
        .           
        .               pub fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {
        .                   debug!("record_var_scope(sub={:?}, sup={:?})", var, lifetime);
      210 ( 0.00%)          assert!(var != lifetime.item_local_id());
        .                   self.var_map.insert(var, lifetime);
        .               }
        .           
        .               pub fn record_rvalue_scope(&mut self, var: hir::ItemLocalId, lifetime: Option<Scope>) {
        .                   debug!("record_rvalue_scope(sub={:?}, sup={:?})", var, lifetime);
   27,076 ( 0.00%)          if let Some(lifetime) = lifetime {
        .                       assert!(var != lifetime.item_local_id());
        .                   }
        .                   self.rvalue_scopes.insert(var, lifetime);
        .               }
        .           
        .               /// Returns the narrowest scope that encloses `id`, if any.
        .               pub fn opt_encl_scope(&self, id: Scope) -> Option<Scope> {
        .                   self.parent_map.get(&id).cloned().map(|(p, _)| p)
        .               }
        .           
        .               /// Returns the lifetime of the local variable `var_id`
      372 ( 0.00%)      pub fn var_scope(&self, var_id: hir::ItemLocalId) -> Scope {
        .                   self.var_map
        .                       .get(&var_id)
        .                       .cloned()
        .                       .unwrap_or_else(|| bug!("no enclosing scope for id {:?}", var_id))
      372 ( 0.00%)      }
        .           
        .               /// Returns the scope when the temp created by `expr_id` will be cleaned up.
  841,764 ( 0.02%)      pub fn temporary_scope(&self, expr_id: hir::ItemLocalId) -> Option<Scope> {
        .                   // Check for a designated rvalue scope.
   40,614 ( 0.00%)          if let Some(&s) = self.rvalue_scopes.get(&expr_id) {
        .                       debug!("temporary_scope({:?}) = {:?} [custom]", expr_id, s);
        .                       return s;
        .                   }
        .           
        .                   // Otherwise, locate the innermost terminating scope
        .                   // if there's one. Static items, for instance, won't
        .                   // have an enclosing scope, hence no scope will be
        .                   // returned.
  106,714 ( 0.00%)          let mut id = Scope { id: expr_id, data: ScopeData::Node };
        .           
2,776,012 ( 0.05%)          while let Some(&(p, _)) = self.parent_map.get(&id) {
  926,997 ( 0.02%)              match p.data {
        .                           ScopeData::Destruction => {
        .                               debug!("temporary_scope({:?}) = {:?} [enclosing]", expr_id, id);
        .                               return Some(id);
        .                           }
  305,104 ( 0.01%)                  _ => id = p,
        .                       }
        .                   }
        .           
        .                   debug!("temporary_scope({:?}) = None", expr_id);
        .                   None
  962,016 ( 0.02%)      }
        .           
        .               /// Returns `true` if `subscope` is equal to or is lexically nested inside `superscope`, and
        .               /// `false` otherwise.
        .               ///
        .               /// Used by clippy.
        .               pub fn is_subscope_of(&self, subscope: Scope, superscope: Scope) -> bool {
        .                   let mut s = subscope;
        .                   debug!("is_subscope_of({:?}, {:?})", subscope, superscope);
-- line 408 ----------------------------------------

2,047,484 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
    47,936 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
    23,968 ( 0.00%)              from_str_radix(src, radix)
    71,904 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
    99,990 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
   352,938 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 1,114,284 ( 0.02%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
19,458,737 ( 0.35%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
         4 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 1,889,489 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
    24,924 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
     1,024 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   488,862 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
   571,405 ( 0.01%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
 8,383,429 ( 0.15%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 6,423,977 ( 0.12%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
17,910,353 ( 0.32%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
        20 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 3,725,933 ( 0.07%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
        40 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         4 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   815,461 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         8 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1673 ----------------------------------------
         .                   /// assert_eq!(5u32.overflowing_mul(2), (10, false));
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         4 ( 0.00%)          pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 2,321,910 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         2 ( 0.00%)          }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       168 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
    30,624 ( 0.00%)              if self <= 1 { return 0; }
         .           
    21,126 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
    63,308 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    21,116 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
    11,588 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

    31,765 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/int.rs
--------------------------------------------------------------------------------
Ir                  

-- line 117 ----------------------------------------
         .           ///
         .           /// This is a packed struct in order to allow this type to be optimally embedded in enums
         .           /// (like Scalar).
         .           #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Hash)]
         .           #[repr(packed)]
         .           pub struct ScalarInt {
         .               /// The first `size` bytes of `data` are the value.
         .               /// Do not try to read less or more bytes than that. The remaining bytes must be 0.
 6,351,595 ( 0.11%)      data: u128,
 3,278,144 ( 0.06%)      size: u8,
         .           }
         .           
         .           // Cannot derive these, as the derives take references to the fields, and we
         .           // can't take references to fields of packed structs.
         .           impl<CTX> crate::ty::HashStable<CTX> for ScalarInt {
         .               fn hash_stable(&self, hcx: &mut CTX, hasher: &mut crate::ty::StableHasher) {
         .                   // Using a block `{self.data}` here to force a copy instead of using `self.data`
         .                   // directly, because `hash_stable` takes `&self` and would thus borrow `self.data`.
         .                   // Since `Self` is a packed struct, that would create a possibly unaligned reference,
         .                   // which is UB.
         9 ( 0.00%)          { self.data }.hash_stable(hcx, hasher);
         .                   self.size.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
         .           impl<S: Encoder> Encodable<S> for ScalarInt {
   193,405 ( 0.00%)      fn encode(&self, s: &mut S) -> Result<(), S::Error> {
         .                   s.emit_u128(self.data)?;
    38,681 ( 0.00%)          s.emit_u8(self.size)
   232,086 ( 0.00%)      }
         .           }
         .           
         .           impl<D: Decoder> Decodable<D> for ScalarInt {
     2,244 ( 0.00%)      fn decode(d: &mut D) -> ScalarInt {
     1,683 ( 0.00%)          ScalarInt { data: d.read_u128(), size: d.read_u8() }
     2,805 ( 0.00%)      }
         .           }
         .           
         .           impl ScalarInt {
         .               pub const TRUE: ScalarInt = ScalarInt { data: 1_u128, size: 1 };
         .           
         .               pub const FALSE: ScalarInt = ScalarInt { data: 0_u128, size: 1 };
         .           
         .               pub const ZST: ScalarInt = ScalarInt { data: 0_u128, size: 0 };
-- line 160 ----------------------------------------
-- line 191 ----------------------------------------
         .               #[inline]
         .               pub fn is_null(self) -> bool {
         .                   self.data == 0
         .               }
         .           
         .               #[inline]
         .               pub fn try_from_uint(i: impl Into<u128>, size: Size) -> Option<Self> {
         .                   let data = i.into();
   257,027 ( 0.00%)          if size.truncate(data) == data {
         .                       Some(Self { data, size: size.bytes() as u8 })
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn try_from_int(i: impl Into<i128>, size: Size) -> Option<Self> {
-- line 207 ----------------------------------------
-- line 211 ----------------------------------------
         .                   if size.sign_extend(truncated) as i128 == i {
         .                       Some(Self { data: truncated, size: size.bytes() as u8 })
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               #[inline]
         1 ( 0.00%)      pub fn assert_bits(self, target_size: Size) -> u128 {
         6 ( 0.00%)          self.to_bits(target_size).unwrap_or_else(|size| {
         .                       bug!("expected int of size {}, but got size {}", target_size.bytes(), size.bytes())
         .                   })
         4 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_bits(self, target_size: Size) -> Result<u128, Size> {
 7,768,653 ( 0.14%)          assert_ne!(target_size.bytes(), 0, "you should never look at the bits of a ZST");
15,754,367 ( 0.28%)          if target_size.bytes() == u64::from(self.size) {
         .                       self.check_data();
         .                       Ok(self.data)
         .                   } else {
         .                       Err(self.size())
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn try_to_machine_usize<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Result<u64, Size> {
     8,061 ( 0.00%)          Ok(self.to_bits(tcx.data_layout.pointer_size)? as u64)
         .               }
         .           }
         .           
         .           macro_rules! from {
         .               ($($ty:ty),*) => {
         .                   $(
         .                       impl From<$ty> for ScalarInt {
         .                           #[inline]
         .                           fn from(u: $ty) -> Self {
         4 ( 0.00%)                      Self {
         .                                   data: u128::from(u),
         .                                   size: std::mem::size_of::<$ty>() as u8,
         .                               }
         .                           }
         .                       }
         .                   )*
         .               }
         .           }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
         .           
         .           from!(u8, u16, u32, u64, u128, bool);
         .           try_from!(u8, u16, u32, u64, u128);
         .           
         .           impl TryFrom<ScalarInt> for bool {
         .               type Error = Size;
         .               #[inline]
         .               fn try_from(int: ScalarInt) -> Result<Self, Size> {
        77 ( 0.00%)          int.to_bits(Size::from_bytes(1)).and_then(|u| match u {
         .                       0 => Ok(false),
         .                       1 => Ok(true),
         .                       _ => Err(Size::from_bytes(1)),
         .                   })
         .               }
         .           }
         .           
         .           impl From<char> for ScalarInt {
         .               #[inline]
         .               fn from(c: char) -> Self {
    13,644 ( 0.00%)          Self { data: c as u128, size: std::mem::size_of::<char>() as u8 }
         .               }
         .           }
         .           
         .           impl TryFrom<ScalarInt> for char {
         .               type Error = Size;
         .               #[inline]
         .               fn try_from(int: ScalarInt) -> Result<Self, Size> {
         .                   int.to_bits(Size::from_bytes(std::mem::size_of::<char>()))
-- line 301 ----------------------------------------

 4,136,157 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/int.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
4,617,570 ( 0.08%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
3,463,176 ( 0.06%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
  115,288 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  172,932 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
1,183,204 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  266,052 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  532,104 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
        .               } else if #[cfg(target_os = "wasi")] {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
        .                   }
        .               } else {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        1 ( 0.00%)              let mut out = ptr::null_mut();
        .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
        .                       // Since these are all powers of 2, we can just use max.
        .                       let align = layout.align().max(crate::mem::size_of::<usize>());
        2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
        2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
        .                   }
        .               }
        .           }

        1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 294 ----------------------------------------
         .           #[allow(deprecated)]
         .           impl From<LayoutErr> for CollectionAllocErr {
         .               fn from(_: LayoutErr) -> Self {
         .                   CollectionAllocErr::CapacityOverflow
         .               }
         .           }
         .           
         .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
   491,279 ( 0.01%)      match result {
         .                   Ok(x) => x,
         .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
         .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
         .               }
         .           }
         .           
         .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
         .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
         .           #[cfg(feature = "union")]
         .           impl<A: Array> SmallVecData<A> {
         .               #[inline]
         .               unsafe fn inline(&self) -> *const A::Item {
         .                   self.inline.as_ptr() as *const A::Item
         .               }
         .               #[inline]
         .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
   308,602 ( 0.01%)          self.inline.as_mut_ptr() as *mut A::Item
         .               }
         .               #[inline]
         .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
         .                   SmallVecData {
         .                       inline: core::mem::ManuallyDrop::new(inline),
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn into_inline(self) -> MaybeUninit<A> {
         .                   core::mem::ManuallyDrop::into_inner(self.inline)
         .               }
         .               #[inline]
         .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
     8,291 ( 0.00%)          self.heap
         .               }
         .               #[inline]
         .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
         .                   &mut self.heap
         .               }
         .               #[inline]
         .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
         .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
         .               #[inline]
         .               pub fn new() -> SmallVec<A> {
         .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
         .                   // this check should be optimized away entirely for valid ones.
         .                   assert!(
         .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
         .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
         .                   );
   451,778 ( 0.01%)          SmallVec {
         .                       capacity: 0,
         .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
         .                   }
         .               }
         .           
         .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
         .               /// elements.
         .               ///
-- line 573 ----------------------------------------
-- line 597 ----------------------------------------
         .               ///
         .               /// let vec = vec![1, 2, 3, 4, 5];
         .               /// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
       228 ( 0.00%)          if vec.capacity() <= Self::inline_capacity() {
         .                       unsafe {
         .                           let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());
         .                           let len = vec.len();
         .                           vec.set_len(0);
         .                           ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);
         .           
         .                           SmallVec {
         .                               capacity: len,
         .                               data,
         .                           }
         .                       }
         .                   } else {
         .                       let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
         .                       mem::forget(vec);
         .           
       357 ( 0.00%)              SmallVec {
         .                           capacity: cap,
         .                           data: SmallVecData::from_heap(ptr, len),
         .                       }
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements.
-- line 629 ----------------------------------------
-- line 635 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf(buf: A) -> SmallVec<A> {
         .                   SmallVec {
         .                       capacity: A::size(),
     1,043 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length, which must be less or
         .               /// equal to the size of `buf`.
         .               ///
         .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
         .               ///
         .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
     3,586 ( 0.00%)          assert!(len <= A::size());
    10,758 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length. The user is responsible
         .               /// for ensuring that `len <= A::size()`.
         .               ///
         .               /// ```rust
         .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = unsafe {
         .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
         .               /// };
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
     1,793 ( 0.00%)          SmallVec {
         .                       capacity: len,
         .                       data: SmallVecData::from_inline(buf),
         .                   }
         .               }
         .           
         .               /// Sets the length of a vector.
         .               ///
         .               /// This will explicitly set the size of the vector, without actually
         .               /// modifying its buffers, so it is up to the caller to ensure that the
         .               /// vector is actually the specified size.
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   let (_, len_ptr, _) = self.triple_mut();
   325,325 ( 0.01%)          *len_ptr = new_len;
         .               }
         .           
         .               /// The maximum number of elements this vector can hold inline
         .               #[inline]
         .               fn inline_capacity() -> usize {
         .                   if mem::size_of::<A::Item>() > 0 {
         4 ( 0.00%)              A::size()
         .                   } else {
         .                       // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
         .                       // Therefore all items are at the same address,
         .                       // and any array size has capacity for infinitely many items.
         .                       // The capacity is limited by the bit width of the length field.
         .                       //
         .                       // `Vec` also does this:
         .                       // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
-- line 710 ----------------------------------------
-- line 725 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.triple().1
         .               }
         .           
         .               /// Returns `true` if the vector is empty
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
   126,198 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// The number of items the vector can hold without reallocating
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.triple().2
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len, capacity)
         .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
         .               #[inline]
         .               fn triple(&self) -> (*const A::Item, usize, usize) {
         .                   unsafe {
12,189,087 ( 0.22%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           (ptr, len, self.capacity)
         .                       } else {
         .                           (self.data.inline(), self.capacity, Self::inline_capacity())
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len ptr, capacity)
         .               #[inline]
         .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
         .                   unsafe {
 9,750,947 ( 0.18%)              if self.spilled() {
   110,111 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
         .                           (ptr, len_ptr, self.capacity)
         .                       } else {
         .                           (
         .                               self.data.inline_mut(),
         .                               &mut self.capacity,
         .                               Self::inline_capacity(),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
         .               #[inline]
         .               pub fn spilled(&self) -> bool {
13,658,669 ( 0.25%)          self.capacity > Self::inline_capacity()
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// Note 1: The element range is removed even if the iterator is only
         .               /// partially consumed or not consumed at all.
         .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Append an item to the vector.
         .               #[inline]
   317,495 ( 0.01%)      pub fn push(&mut self, value: A::Item) {
         .                   unsafe {
         .                       let (mut ptr, mut len, cap) = self.triple_mut();
 1,951,209 ( 0.04%)              if *len == cap {
       352 ( 0.00%)                  self.reserve(1);
    15,756 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
         .                           ptr = heap_ptr;
         .                           len = heap_len;
         .                       }
    28,524 ( 0.00%)              ptr::write(ptr.add(*len), value);
 3,721,566 ( 0.07%)              *len += 1;
         .                   }
   253,996 ( 0.00%)      }
         .           
         .               /// Remove an item from the end of the vector and return it, or None if empty.
         .               #[inline]
         .               pub fn pop(&mut self) -> Option<A::Item> {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
   578,610 ( 0.01%)              if *len_ptr == 0 {
         .                           return None;
         .                       }
   164,493 ( 0.00%)              let last_index = *len_ptr - 1;
   164,505 ( 0.00%)              *len_ptr = last_index;
   160,770 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
         .                   }
         1 ( 0.00%)      }
         .           
         .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
         .               ///
         .               /// # Example
         .               ///
         .               /// ```
         .               /// # use smallvec::{SmallVec, smallvec};
         .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// or if the capacity computation overflows `usize`.
         .               pub fn grow(&mut self, new_cap: usize) {
         .                   infallible(self.try_grow(new_cap))
         .               }
         .           
         .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
         .               ///
         .               /// Panics if `new_cap` is less than the vector's length
     1,071 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
         .                   unsafe {
        89 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
         .                       let unspilled = !self.spilled();
    30,642 ( 0.00%)              assert!(new_cap >= len);
    30,642 ( 0.00%)              if new_cap <= self.inline_size() {
         .                           if unspilled {
         .                               return Ok(());
         .                           }
         .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
         .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
         .                           self.capacity = len;
         .                           deallocate(ptr, cap);
    30,642 ( 0.00%)              } else if new_cap != cap {
    30,094 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
         .                           debug_assert!(layout.size() > 0);
         .                           let new_alloc;
    15,321 ( 0.00%)                  if unspilled {
         .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
         .                           } else {
         .                               // This should never fail since the same succeeded
         .                               // when previously allocating `ptr`.
    14,752 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
         .           
         .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
         .                               new_alloc = NonNull::new(new_ptr)
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                           }
    30,642 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
    44,925 ( 0.00%)                  self.capacity = new_cap;
         .                       }
         .                       Ok(())
         .                   }
     1,160 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
         .               ///
         .               /// Panics if the capacity computation overflows `usize`.
         .               #[inline]
   275,300 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
   555,494 ( 0.01%)          infallible(self.try_reserve(additional))
   308,536 ( 0.01%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
 2,121,974 ( 0.04%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   // prefer triple_mut() even if triple() would work
         .                   // so that the optimizer removes duplicated calls to it
         .                   // from callers like insert()
       864 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
 1,535,513 ( 0.03%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .and_then(usize::checked_next_power_of_two)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
       241 ( 0.00%)          self.try_grow(new_cap)
 2,210,223 ( 0.04%)      }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               ///
         .               /// Panics if the new capacity overflows `usize`.
         .               pub fn reserve_exact(&mut self, additional: usize) {
         .                   infallible(self.try_reserve_exact(additional))
         .               }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   let (_, &mut len, cap) = self.triple_mut();
    34,488 ( 0.00%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
        25 ( 0.00%)          self.try_grow(new_cap)
        25 ( 0.00%)      }
         .           
         .               /// Shrink the capacity of the vector as much as possible.
         .               ///
         .               /// When possible, this will move data from an external heap buffer to the vector's inline
         .               /// storage.
         .               pub fn shrink_to_fit(&mut self) {
         .                   if !self.spilled() {
         .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
         .               /// If `len` is greater than or equal to the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
         .               /// `shrink_to_fit` after truncating.
         .               pub fn truncate(&mut self, len: usize) {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
   140,472 ( 0.00%)              while len < *len_ptr {
         .                           let last_index = *len_ptr - 1;
         .                           *len_ptr = last_index;
         .                           ptr::drop_in_place(ptr.add(last_index));
         .                       }
         .                   }
         .               }
         .           
         .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1044 ----------------------------------------
         .               pub fn clear(&mut self) {
         .                   self.truncate(0);
         .               }
         .           
         .               /// Remove and return the element at position `index`, shifting all elements after it to the
         .               /// left.
         .               ///
         .               /// Panics if `index` is out of bounds.
     8,192 ( 0.00%)      pub fn remove(&mut self, index: usize) -> A::Item {
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
       146 ( 0.00%)              let len = *len_ptr;
     6,816 ( 0.00%)              assert!(index < len);
    77,380 ( 0.00%)              *len_ptr = len - 1;
         .                       ptr = ptr.add(index);
         .                       let item = ptr::read(ptr);
     4,544 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
         .                       item
         .                   }
    10,240 ( 0.00%)      }
         .           
         .               /// Insert an element at position `index`, shifting all elements after it to the right.
         .               ///
         .               /// Panics if `index` is out of bounds.
     2,682 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
         .                   self.reserve(1);
         .           
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
       248 ( 0.00%)              let len = *len_ptr;
       492 ( 0.00%)              assert!(index <= len);
       984 ( 0.00%)              *len_ptr = len + 1;
         .                       ptr = ptr.add(index);
       492 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
         .                       ptr::write(ptr, element);
         .                   }
     1,709 ( 0.00%)      }
         .           
         .               /// Insert multiple elements at position `index`, shifting all following elements toward the
         .               /// back.
         .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
         .                   let mut iter = iterable.into_iter();
         .                   if index == self.len() {
         .                       return self.extend(iter);
         .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place and preserves the order of the retained
         .               /// elements.
   134,298 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
         .                   let mut del = 0;
         .                   let len = self.len();
         .                   for i in 0..len {
     5,884 ( 0.00%)              if !f(&mut self[i]) {
         .                           del += 1;
     1,638 ( 0.00%)              } else if del > 0 {
         .                           self.swap(i - del, i);
         .                       }
         .                   }
    29,844 ( 0.00%)          self.truncate(len - del);
   119,376 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements.
         .               pub fn dedup(&mut self)
         .               where
         .                   A::Item: PartialEq<A::Item>,
         .               {
         .                   self.dedup_by(|a, b| a == b);
         .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
         .                           capacity: len,
         .                           data: SmallVecData::from_inline(unsafe {
         .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
         .                               ptr::copy_nonoverlapping(
         .                                   slice.as_ptr(),
         .                                   data.as_mut_ptr() as *mut A::Item,
         .                                   len,
         .                               );
       445 ( 0.00%)                      data
         .                           }),
         .                       }
         .                   } else {
         .                       let mut b = slice.to_vec();
         .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
         .                       mem::forget(b);
         .                       SmallVec {
         .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Copy elements from a slice into the vector at position `index`, shifting any following
         .               /// elements toward the back.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `insert`.
    85,005 ( 0.00%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
         .                   self.reserve(slice.len());
         .           
         .                   let len = self.len();
    23,802 ( 0.00%)          assert!(index <= len);
         .           
         .                   unsafe {
         .                       let slice_ptr = slice.as_ptr();
         .                       let ptr = self.as_mut_ptr().add(index);
         .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
         .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
    15,868 ( 0.00%)              self.set_len(len + slice.len());
         .                   }
    63,472 ( 0.00%)      }
         .           
         .               /// Copy elements from a slice and append them to the vector.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `extend`.
         .               #[inline]
         .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
         .                   let len = self.len();
    23,784 ( 0.00%)          self.insert_from_slice(len, slice);
         .               }
         .           }
         .           
         .           impl<A: Array> SmallVec<A>
         .           where
         .               A::Item: Clone,
         .           {
         .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1489 ----------------------------------------
         .               /// Creates a `SmallVec` with `n` copies of `elem`.
         .               /// ```
         .               /// use smallvec::SmallVec;
         .               ///
         .               /// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
         .               /// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
         .               /// ```
         .               pub fn from_elem(elem: A::Item, n: usize) -> Self {
       970 ( 0.00%)          if n > Self::inline_capacity() {
         .                       vec![elem; n].into()
         .                   } else {
         .                       let mut v = SmallVec::<A>::new();
         .                       unsafe {
         .                           let (ptr, len_ptr, _) = v.triple_mut();
         .                           let mut local_len = SetLenOnDrop::new(len_ptr);
         .           
         .                           for i in 0..n {
         .                               ::core::ptr::write(ptr.add(i), elem.clone());
         .                               local_len.increment_len(1);
         .                           }
         .                       }
     1,440 ( 0.00%)              v
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::Deref for SmallVec<A> {
         .               type Target = [A::Item];
         .               #[inline]
         .               fn deref(&self) -> &[A::Item] {
-- line 1518 ----------------------------------------
-- line 1522 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::DerefMut for SmallVec<A> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut [A::Item] {
         .                   unsafe {
     3,242 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
         .                       slice::from_raw_parts_mut(ptr, len)
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
         .               #[inline]
         .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
         .                   SmallVec::extend_from_slice(self, other)
         .               }
         .           }
         .           
         .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
         .                   let mut v = SmallVec::new();
   615,309 ( 0.01%)          v.extend(iterable);
         .                   v
         .               }
         .           }
         .           
         .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
 2,644,127 ( 0.05%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
   180,276 ( 0.00%)          let mut iter = iterable.into_iter();
         .                   let (lower_size_bound, _) = iter.size_hint();
    39,885 ( 0.00%)          self.reserve(lower_size_bound);
         .           
         .                   unsafe {
         .                       let (ptr, len_ptr, cap) = self.triple_mut();
         .                       let mut len = SetLenOnDrop::new(len_ptr);
 1,156,342 ( 0.02%)              while len.get() < cap {
   248,357 ( 0.00%)                  if let Some(out) = iter.next() {
         .                               ptr::write(ptr.add(len.get()), out);
         .                               len.increment_len(1);
         .                           } else {
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
    71,489 ( 0.00%)          for elem in iter {
   128,820 ( 0.00%)              self.push(elem);
         .                   }
 2,215,466 ( 0.04%)      }
         .           }
         .           
         .           impl<A: Array> fmt::Debug for SmallVec<A>
         .           where
         .               A::Item: fmt::Debug,
         .           {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
         .               #[inline]
         .               fn default() -> SmallVec<A> {
         .                   SmallVec::new()
         .               }
         .           }
         .           
         .           #[cfg(feature = "may_dangle")]
         .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
 2,771,677 ( 0.05%)      fn drop(&mut self) {
         .                   unsafe {
 2,494,192 ( 0.04%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           Vec::from_raw_parts(ptr, len, self.capacity);
         .                       } else {
         .                           ptr::drop_in_place(&mut self[..]);
         .                       }
         .                   }
 2,827,867 ( 0.05%)      }
         .           }
         .           
         .           #[cfg(not(feature = "may_dangle"))]
         .           impl<A: Array> Drop for SmallVec<A> {
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
         .               A::Item: Clone,
         .           {
         .               fn clone(&self) -> IntoIter<A> {
         .                   SmallVec::from(self.as_slice()).into_iter()
         .               }
         .           }
         .           
         .           impl<A: Array> Drop for IntoIter<A> {
       449 ( 0.00%)      fn drop(&mut self) {
    16,719 ( 0.00%)          for _ in self {}
       408 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Array> Iterator for IntoIter<A> {
         .               type Item = A::Item;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A::Item> {
 2,122,261 ( 0.04%)          if self.current == self.end {
         .                       None
         .                   } else {
         .                       unsafe {
         .                           let current = self.current;
 1,113,858 ( 0.02%)                  self.current += 1;
     1,022 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
     1,691 ( 0.00%)          let size = self.end - self.current;
         .                   (size, Some(size))
         .               }
         .           }
         .           
         .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A::Item> {
         .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
         .           impl<A: Array> IntoIterator for SmallVec<A> {
         .               type IntoIter = IntoIter<A>;
         .               type Item = A::Item;
         .               fn into_iter(mut self) -> Self::IntoIter {
         .                   unsafe {
         .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
         .                       let len = self.len();
         .                       self.set_len(0);
    76,986 ( 0.00%)              IntoIter {
   740,884 ( 0.01%)                  data: self,
         .                           current: 0,
         .                           end: len,
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
         .               len: &'a mut usize,
         .               local_len: usize,
         .           }
         .           
         .           impl<'a> SetLenOnDrop<'a> {
         .               #[inline]
         .               fn new(len: &'a mut usize) -> Self {
         .                   SetLenOnDrop {
   279,727 ( 0.01%)              local_len: *len,
         .                       len,
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn get(&self) -> usize {
         .                   self.local_len
         .               }
         .           
         .               #[inline]
         .               fn increment_len(&mut self, increment: usize) {
   135,691 ( 0.00%)          self.local_len += increment;
         .               }
         .           }
         .           
         .           impl<'a> Drop for SetLenOnDrop<'a> {
         .               #[inline]
         .               fn drop(&mut self) {
   340,540 ( 0.01%)          *self.len = self.local_len;
         .               }
         .           }
         .           
         .           #[cfg(feature = "const_new")]
         .           impl<T, const N: usize> SmallVec<[T; N]> {
         .               /// Construct an empty vector.
         .               ///
         .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

 6,946,413 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
       152 ( 0.00%)      fn clone(&self) -> Self {
       166 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
        22 ( 0.00%)              table: self.table.clone(),
         .                   }
       171 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   232,352 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 1,016,736 ( 0.02%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
   830,563 ( 0.01%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
         .               hash_builder.hash_one(val)
        12 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub const fn with_hasher(hash_builder: S) -> Self {
   889,157 ( 0.02%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new(),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     2,092 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
         .               /// map.insert("c", 3);
         .               ///
         .               /// for key in map.keys() {
         .               ///     println!("{}", key);
         .               /// }
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn keys(&self) -> Keys<'_, K, V> {
         6 ( 0.00%)          Keys { inner: self.iter() }
         .               }
         .           
         .               /// An iterator visiting all values in arbitrary order.
         .               /// The iterator element type is `&'a V`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
     3,401 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   226,617 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       204 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
        20 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
       235 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
       255 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 2,285,638 ( 0.04%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 2,615,716 ( 0.05%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         3 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   400,109 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.get_inner(k).is_some()
   672,100 ( 0.01%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       134 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       801 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
       268 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
       267 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
       266 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
         .               /// mutable reference will be returned to any value. `None` will be returned if any of the
         .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 5,024,860 ( 0.09%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
       952 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
         4 ( 0.00%)              Some(mem::replace(item, v))
         .                   } else {
 1,658,011 ( 0.03%)              self.table
 1,712,922 ( 0.03%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   125,525 ( 0.00%)              None
         .                   }
 4,780,917 ( 0.09%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   273,798 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   831,558 ( 0.01%)          match self.remove_entry(k) {
   141,334 ( 0.00%)              Some((_, v)) => Some(v),
   194,586 ( 0.00%)              None => None,
         .                   }
   676,564 ( 0.01%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   337,296 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 3,001,496 ( 0.05%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 8,896,286 ( 0.16%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
 9,162,781 ( 0.16%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
   864,958 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
 4,338,063 ( 0.08%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
 1,148,710 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 6,279,347 ( 0.11%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 1,423,038 ( 0.03%)          self.from_hash(hash, equivalent(k))
11,820,760 ( 0.21%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
12,191,851 ( 0.22%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 1,857,192 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       373 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
     9,566 ( 0.00%)          IntoIter {
    10,642 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
     1,119 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   250,436 ( 0.00%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
       231 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
        72 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
     2,628 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
        30 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
        60 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
        12 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
    12,924 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
     8,531 ( 0.00%)          let iter = iter.into_iter();
    29,406 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
       523 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
    50,459 ( 0.00%)              self.insert(k, v);
         .                   });
     9,269 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

 4,294,495 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 23 ----------------------------------------
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
     1,297 ( 0.00%)      pub ty: Ty<'tcx>,
     6,485 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
     1,989 ( 0.00%)      pub scope: DefId,
     4,074 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   112,800 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        71 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
     1,912 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
        10 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
       108 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
    33,692 ( 0.00%)      pub var: BoundVar,
    32,760 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
15,426,239 ( 0.28%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
    37,136 ( 0.00%)  #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
         .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
   152,762 ( 0.00%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
   474,639 ( 0.01%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 2,476,862 ( 0.04%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
       894 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
       466 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
         9 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
        18 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
        36 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
        18 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
       313 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
     1,880 ( 0.00%)              [
       539 ( 0.00%)                  ref parent_substs @ ..,
       589 ( 0.00%)                  closure_kind_ty,
       203 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
       461 ( 0.00%)                  tupled_upvars_ty,
     1,252 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
       939 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
         .               pub fn is_valid(self) -> bool {
         .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 383 ----------------------------------------
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       162 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       242 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       116 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       108 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     1,512 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
       120 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
       240 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
         7 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        16 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        14 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
        90 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
       180 ( 0.00%)          match ty.kind() {
       360 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
       270 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
        32 ( 0.00%)          let tupled_tys = match self {
        41 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
        66 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
        57 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
        50 ( 0.00%)          match self {
        58 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
     1,021 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
       721 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
        18 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
        70 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
        80 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
        84 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
        72 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
        40 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
         .                           let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
        64 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
        10 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
        70 ( 0.00%)          self[0]
        40 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
        40 ( 0.00%)              })
         .                       .transpose()
        30 ( 0.00%)      }
         .           
         8 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
        16 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
         .                       predicate
        16 ( 0.00%)                  .map_bound(|pred| match pred {
         .                               ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
-- line 874 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    17,875 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   452,160 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
       571 ( 0.00%)      pub def_id: DefId,
   451,877 ( 0.01%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
       284 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
     1,136 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
       351 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       156 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
       234 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
       312 ( 0.00%)      }
         .           
         .               #[inline]
         3 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         2 ( 0.00%)      }
         .           
       880 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
       110 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     1,210 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
       837 ( 0.00%)          self.skip_binder().def_id
       279 ( 0.00%)      }
         .           
       698 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
     1,396 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
       698 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
        60 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
       365 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
        58 ( 0.00%)      pub def_id: DefId,
       436 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
        12 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
        12 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
         .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 994 ----------------------------------------
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
        12 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        16 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        16 ( 0.00%)      }
         .           }
         .           
     9,803 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       110 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
     1,338 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   563,545 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
     3,570 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   197,905 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   452,230 ( 0.01%)          Binder(value, ty::List::empty())
     3,566 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
     5,937 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
   463,090 ( 0.01%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
       184 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     1,238 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
        72 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
     7,475 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   420,007 ( 0.01%)          Binder(value, self.1)
        72 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
     1,969 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
     1,728 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
    76,529 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
        50 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
       317 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    17,146 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
     5,064 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
     7,786 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
     4,417 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     1,262 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
     5,048 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
       868 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
       372 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
       620 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
     1,116 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
     5,607 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
       623 ( 0.00%)          let def_id = self.trait_def_id(tcx);
       623 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
     6,853 ( 0.00%)      }
         .           
     1,244 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
     3,732 ( 0.00%)          self.substs.type_at(0)
     2,488 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    11,689 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
     5,529 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
       450 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
     4,754 ( 0.00%)      pub c_variadic: bool,
       816 ( 0.00%)      pub unsafety: hir::Unsafety,
     5,901 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
     4,110 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
    19,251 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
     8,220 ( 0.00%)      }
         .           
     2,605 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
    20,968 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
     5,210 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
       951 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
     1,619 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
        95 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
     1,037 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
       188 ( 0.00%)          self.skip_binder().c_variadic
        94 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
       480 ( 0.00%)          self.skip_binder().unsafety
       240 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
     7,212 ( 0.00%)          self.skip_binder().abi
     1,803 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
        44 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
       360 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamTy {
        20 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
        86 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
        43 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        26 ( 0.00%)          ParamTy::new(def.index, def.name)
        13 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
       104 ( 0.00%)      pub index: u32,
       104 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 8,106,973 ( 0.15%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       492 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
    65,520 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    12,184 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
       920 ( 0.00%)      pub def_id: DefId,
    11,332 ( 0.00%)      pub index: u32,
     4,660 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
       250 ( 0.00%)      pub index: u32,
        57 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
       466 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
     7,970 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
       134 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   149,727 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   440,460 ( 0.01%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
       688 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
       704 ( 0.00%)          match self.kind() {
       170 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
   156,105 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   180,692 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    22,414 ( 0.00%)          match self.kind() {
       986 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
        27 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
         .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
        66 ( 0.00%)          *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
         1 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
        38 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
    13,536 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    27,072 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
    13,536 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
        14 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
         3 ( 0.00%)          matches!(
         2 ( 0.00%)              self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
         .                   )
         .               }
         .           
         .               /// Get the mutability of the reference or `None` when not a reference
         .               #[inline]
         .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
     7,867 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
         2 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   255,004 ( 0.00%)          match self.kind() {
     2,063 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
         .               pub fn boxed_ty(&self) -> Ty<'tcx> {
         .                   match self.kind() {
         .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
       212 ( 0.00%)          matches!(
       478 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
       530 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
        19 ( 0.00%)          matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
       218 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
     2,766 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
       362 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
       703 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    51,727 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
       901 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
       176 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
       282 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    70,704 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   373,813 ( 0.01%)          match self.kind() {
        56 ( 0.00%)              Adt(def, _) if def.is_box() => {
         .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
   113,900 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
       150 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
   141,408 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
       108 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
         9 ( 0.00%)      }
         .           
    19,408 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
     9,704 ( 0.00%)          match self.kind() {
     7,260 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        30 ( 0.00%)              FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
    21,834 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
     1,317 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    45,085 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       107 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
    15,876 ( 0.00%)          match self.kind() {
     8,115 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       214 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
        24 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
        48 ( 0.00%)          match self.kind() {
        48 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
        48 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
    14,920 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
     8,017 ( 0.00%)          match self.kind() {
     3,076 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
     1,538 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
    11,936 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
     1,520 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       760 ( 0.00%)          match self.kind() {
     1,216 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
     1,216 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        36 ( 0.00%)      pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
        36 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
        20 ( 0.00%)          match tail.kind() {
         .                       // Sized types
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
         .                       | ty::Foreign(..)
         .                       // If returned by `struct_tail_without_normalization` this is a unit struct
         .                       // without any fields, or not a struct, and therefore is Sized.
         .                       | ty::Adt(..)
         .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
         .                       // a.k.a. unit type, which is Sized
         .                       | ty::Tuple(..) => tcx.types.unit,
         .           
         8 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
         .                       ty::Dynamic(..) => {
         .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
         .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
         .                       },
         .           
         .                       ty::Projection(_)
         .                       | ty::Param(_)
         .                       | ty::Opaque(..)
         .                       | ty::Infer(ty::TyVar(_))
         .                       | ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
         .                       }
         .                   }
        32 ( 0.00%)      }
         .           
         .               /// When we create a closure, we record its kind (i.e., what trait
         .               /// it implements) into its `ClosureSubsts` using a type
         .               /// parameter. This is kind of a phantom type, except that the
         .               /// most convenient thing for us to are the integral types. This
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
       324 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
       648 ( 0.00%)          match self.kind() {
       556 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
       324 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
 1,441,026 ( 0.03%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   960,684 ( 0.02%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
   116,185 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
     5,991 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
 1,441,026 ( 0.03%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
   138,698 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   208,047 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    69,349 ( 0.00%)      }
         .           }

21,617,613 ( 0.39%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 166 ----------------------------------------
        .               String(Cow<'static, str>),
        .               Break(BreakToken),
        .               Begin(BeginToken),
        .               End,
        .           }
        .           
        .           impl Token {
        .               pub fn is_hardbreak_tok(&self) -> bool {
   71,636 ( 0.00%)          matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           enum PrintFrame {
        .               Fits,
        .               Broken { offset: isize, breaks: Breaks },
        .           }
-- line 182 ----------------------------------------
-- line 213 ----------------------------------------
        .           
        .           #[derive(Clone)]
        .           struct BufEntry {
        .               token: Token,
        .               size: isize,
        .           }
        .           
        .           impl Printer {
      136 ( 0.00%)      pub fn new() -> Self {
        .                   let linewidth = 78;
    2,016 ( 0.00%)          Printer {
        .                       out: String::new(),
        .                       margin: linewidth as isize,
        .                       space: linewidth as isize,
        .                       buf: RingBuffer::new(),
        .                       left_total: 0,
        .                       right_total: 0,
        .                       scan_stack: VecDeque::new(),
        .                       print_stack: Vec::new(),
        .                       pending_indentation: 0,
        .                       last_printed: None,
        .                   }
      170 ( 0.00%)      }
        .           
        .               pub fn last_token(&self) -> Option<&Token> {
        .                   self.last_token_still_buffered().or_else(|| self.last_printed.as_ref())
        .               }
        .           
        .               pub fn last_token_still_buffered(&self) -> Option<&Token> {
        .                   self.buf.last().map(|last| &last.token)
        .               }
        .           
        .               /// Be very careful with this!
        .               pub fn replace_last_token_still_buffered(&mut self, token: Token) {
        .                   self.buf.last_mut().unwrap().token = token;
        .               }
        .           
        .               fn scan_eof(&mut self) {
       91 ( 0.00%)          if !self.scan_stack.is_empty() {
       68 ( 0.00%)              self.check_stack(0);
       68 ( 0.00%)              self.advance_left();
        .                   }
        .               }
        .           
        .               fn scan_begin(&mut self, token: BeginToken) {
   78,312 ( 0.00%)          if self.scan_stack.is_empty() {
       68 ( 0.00%)              self.left_total = 1;
        .                       self.right_total = 1;
        .                       self.buf.clear();
        .                   }
  313,248 ( 0.01%)          let right = self.buf.push(BufEntry { token: Token::Begin(token), size: -self.right_total });
        .                   self.scan_stack.push_back(right);
        .               }
        .           
        .               fn scan_end(&mut self) {
   78,312 ( 0.00%)          if self.scan_stack.is_empty() {
        .                       self.print_end();
        .                   } else {
        .                       let right = self.buf.push(BufEntry { token: Token::End, size: -1 });
        .                       self.scan_stack.push_back(right);
        .                   }
        .               }
        .           
        .               fn scan_break(&mut self, token: BreakToken) {
   35,840 ( 0.00%)          if self.scan_stack.is_empty() {
        .                       self.left_total = 1;
        .                       self.right_total = 1;
        .                       self.buf.clear();
        .                   } else {
   71,680 ( 0.00%)              self.check_stack(0);
        .                   }
  143,360 ( 0.00%)          let right = self.buf.push(BufEntry { token: Token::Break(token), size: -self.right_total });
        .                   self.scan_stack.push_back(right);
  107,520 ( 0.00%)          self.right_total += token.blank_space;
        .               }
        .           
  966,771 ( 0.02%)      fn scan_string(&mut self, string: Cow<'static, str>) {
  107,419 ( 0.00%)          if self.scan_stack.is_empty() {
        .                       self.print_string(&string);
        .                   } else {
        .                       let len = string.len() as isize;
  107,362 ( 0.00%)              self.buf.push(BufEntry { token: Token::String(string), size: len });
  322,086 ( 0.01%)              self.right_total += len;
        .                       self.check_stream();
        .                   }
  858,896 ( 0.02%)      }
        .           
        .               fn check_stream(&mut self) {
  471,823 ( 0.01%)          while self.right_total - self.left_total > self.space {
   25,425 ( 0.00%)              if *self.scan_stack.front().unwrap() == self.buf.index_of_first() {
        .                           self.scan_stack.pop_front().unwrap();
    4,300 ( 0.00%)                  self.buf.first_mut().unwrap().size = SIZE_INFINITY;
        .                       }
   16,950 ( 0.00%)              self.advance_left();
    8,475 ( 0.00%)              if self.buf.is_empty() {
        .                           break;
        .                       }
        .                   }
        .               }
        .           
  444,479 ( 0.01%)      fn advance_left(&mut self) {
  616,602 ( 0.01%)          while self.buf.first().unwrap().size >= 0 {
  899,478 ( 0.02%)              let left = self.buf.pop_first().unwrap();
        .           
        .                       match &left.token {
        .                           Token::String(string) => {
  322,086 ( 0.01%)                      self.left_total += string.len() as isize;
        .                               self.print_string(string);
        .                           }
        .                           Token::Break(token) => {
  107,520 ( 0.00%)                      self.left_total += token.blank_space;
        .                               self.print_break(*token, left.size);
        .                           }
      282 ( 0.00%)                  Token::Begin(token) => self.print_begin(*token, left.size),
        .                           Token::End => self.print_end(),
        .                       }
        .           
2,398,608 ( 0.04%)              self.last_printed = Some(left.token);
        .           
  299,826 ( 0.01%)              if self.buf.is_empty() {
        .                           break;
        .                       }
        .                   }
   68,072 ( 0.00%)      }
        .           
  322,866 ( 0.01%)      fn check_stack(&mut self, mut depth: usize) {
  402,432 ( 0.01%)          while let Some(&index) = self.scan_stack.back() {
        .                       let mut entry = &mut self.buf[index];
  817,207 ( 0.01%)              match entry.token {
        .                           Token::Begin(_) => {
  178,318 ( 0.00%)                      if depth == 0 {
        .                                   break;
        .                               }
        .                               self.scan_stack.pop_back().unwrap();
  234,654 ( 0.00%)                      entry.size += self.right_total;
   78,218 ( 0.00%)                      depth -= 1;
        .                           }
        .                           Token::End => {
        .                               // paper says + not =, but that makes no sense.
        .                               self.scan_stack.pop_back().unwrap();
   78,312 ( 0.00%)                      entry.size = 1;
  156,624 ( 0.00%)                      depth += 1;
        .                           }
        .                           _ => {
        .                               self.scan_stack.pop_back().unwrap();
   94,902 ( 0.00%)                      entry.size += self.right_total;
   83,979 ( 0.00%)                      if depth == 0 {
        .                                   break;
        .                               }
        .                           }
        .                       }
        .                   }
  286,992 ( 0.01%)      }
        .           
        .               fn get_top(&self) -> PrintFrame {
  107,520 ( 0.00%)          *self
        .                       .print_stack
        .                       .last()
        .                       .unwrap_or(&PrintFrame::Broken { offset: 0, breaks: Breaks::Inconsistent })
        .               }
        .           
        .               fn print_begin(&mut self, token: BeginToken, size: isize) {
  234,936 ( 0.00%)          if size > self.space {
      470 ( 0.00%)              let col = self.margin - self.space + token.offset;
        .                       self.print_stack.push(PrintFrame::Broken { offset: col, breaks: token.breaks });
        .                   } else {
        .                       self.print_stack.push(PrintFrame::Fits);
        .                   }
        .               }
        .           
        .               fn print_end(&mut self) {
        .                   self.print_stack.pop().unwrap();
        .               }
        .           
        .               fn print_break(&mut self, token: BreakToken, size: isize) {
        .                   let break_offset =
  167,292 ( 0.00%)              match self.get_top() {
        .                           PrintFrame::Fits => None,
        .                           PrintFrame::Broken { offset, breaks: Breaks::Consistent } => Some(offset),
        .                           PrintFrame::Broken { offset, breaks: Breaks::Inconsistent } => {
        .                               if size > self.space { Some(offset) } else { None }
        .                           }
        .                       };
        .                   if let Some(offset) = break_offset {
        .                       self.out.push('\n');
   12,618 ( 0.00%)              self.pending_indentation = offset + token.offset;
   16,824 ( 0.00%)              self.space = self.margin - (offset + token.offset);
        .                   } else {
   94,902 ( 0.00%)              self.pending_indentation += token.blank_space;
  126,536 ( 0.00%)              self.space -= token.blank_space;
        .                   }
        .               }
        .           
        .               fn print_string(&mut self, string: &str) {
        .                   // Write the pending indent. A more concise way of doing this would be:
        .                   //
        .                   //   write!(self.out, "{: >n$}", "", n = self.pending_indentation as usize)?;
        .                   //
        .                   // But that is significantly slower. This code is sufficiently hot, and indents can get
        .                   // sufficiently large, that the difference is significant on some workloads.
  107,419 ( 0.00%)          self.out.reserve(self.pending_indentation as usize);
       32 ( 0.00%)          self.out.extend(iter::repeat(' ').take(self.pending_indentation as usize));
  107,419 ( 0.00%)          self.pending_indentation = 0;
        .           
        .                   self.out.push_str(string);
  537,038 ( 0.01%)          self.space -= string.len() as isize;
        .               }
        .           
        .               // Convenience functions to talk to the printer.
        .           
        .               /// "raw box"
  115,608 ( 0.00%)      pub fn rbox(&mut self, indent: usize, breaks: Breaks) {
        .                   self.scan_begin(BeginToken { offset: indent as isize, breaks })
   86,706 ( 0.00%)      }
        .           
        .               /// Inconsistent breaking box
  383,166 ( 0.01%)      pub fn ibox(&mut self, indent: usize) {
        .                   self.rbox(indent, Breaks::Inconsistent)
  319,305 ( 0.01%)      }
        .           
        .               /// Consistent breaking box
        .               pub fn cbox(&mut self, indent: usize) {
        .                   self.rbox(indent, Breaks::Consistent)
        .               }
        .           
  286,720 ( 0.01%)      pub fn break_offset(&mut self, n: usize, off: isize) {
        .                   self.scan_break(BreakToken { offset: off, blank_space: n as isize })
  215,040 ( 0.00%)      }
        .           
  313,248 ( 0.01%)      pub fn end(&mut self) {
        .                   self.scan_end()
  313,248 ( 0.01%)      }
        .           
      455 ( 0.00%)      pub fn eof(mut self) -> String {
        .                   self.scan_eof();
      364 ( 0.00%)          self.out
      455 ( 0.00%)      }
        .           
        .               pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {
        .                   let string = wrd.into();
  750,130 ( 0.01%)          self.scan_string(string)
        .               }
        .           
        .               fn spaces(&mut self, n: usize) {
  143,338 ( 0.00%)          self.break_offset(n, 0)
        .               }
        .           
        .               crate fn zerobreak(&mut self) {
        .                   self.spaces(0)
        .               }
        .           
        .               pub fn space(&mut self) {
        .                   self.spaces(1)
        .               }
        .           
        .               pub fn hardbreak(&mut self) {
        .                   self.spaces(SIZE_INFINITY as usize)
        .               }
        .           
        .               pub fn is_beginning_of_line(&self) -> bool {
   71,636 ( 0.00%)          match self.last_token() {
        .                       Some(last_token) => last_token.is_hardbreak_tok(),
        .                       None => true,
        .                   }
        .               }
        .           
        .               pub fn hardbreak_tok_offset(off: isize) -> Token {
        .                   Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })
        .               }
-- line 481 ----------------------------------------

1,907,221 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/promote_consts.rs
--------------------------------------------------------------------------------
Ir                 

-- line 30 ----------------------------------------
        .           
        .           /// A `MirPass` for promotion.
        .           ///
        .           /// Promotion is the extraction of promotable temps into separate MIR bodies so they can have
        .           /// `'static` lifetime.
        .           ///
        .           /// After this pass is run, `promoted_fragments` will hold the MIR body corresponding to each
        .           /// newly created `Constant`.
      645 ( 0.00%)  #[derive(Default)]
        .           pub struct PromoteTemps<'tcx> {
        .               pub promoted_fragments: Cell<IndexVec<Promoted, Body<'tcx>>>,
        .           }
        .           
        .           impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {
        .               fn phase_change(&self) -> Option<MirPhase> {
        .                   Some(MirPhase::ConstPromotion)
      258 ( 0.00%)      }
        .           
      774 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
        .                   // There's not really any point in promoting errorful MIR.
        .                   //
        .                   // This does not include MIR that failed const-checking, which we still try to promote.
      129 ( 0.00%)          if body.return_ty().references_error() {
        .                       tcx.sess.delay_span_bug(body.span, "PromoteTemps: MIR had errors");
        .                       return;
        .                   }
        .           
      129 ( 0.00%)          if body.source.promoted.is_some() {
        .                       return;
        .                   }
        .           
      387 ( 0.00%)          let mut rpo = traversal::reverse_postorder(body);
      387 ( 0.00%)          let ccx = ConstCx::new(tcx, body);
    1,290 ( 0.00%)          let (temps, all_candidates) = collect_temps_and_candidates(&ccx, &mut rpo);
        .           
        .                   let promotable_candidates = validate_candidates(&ccx, &temps, &all_candidates);
        .           
    1,806 ( 0.00%)          let promoted = promote_candidates(body, tcx, temps, promotable_candidates);
        .                   self.promoted_fragments.set(promoted);
      903 ( 0.00%)      }
        .           }
        .           
        .           /// State of a temporary during collection and promotion.
  410,456 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub enum TempState {
        .               /// No references to this temp.
        .               Undefined,
        .               /// One direct assignment and any number of direct uses.
        .               /// A borrow of this temp is promotable if the assigned
        .               /// value is qualified as constant.
        .               Defined { location: Location, uses: usize },
        .               /// Any other combination of assignments/uses.
-- line 81 ----------------------------------------
-- line 102 ----------------------------------------
        .           
        .           struct Collector<'a, 'tcx> {
        .               ccx: &'a ConstCx<'a, 'tcx>,
        .               temps: IndexVec<Local, TempState>,
        .               candidates: Vec<Candidate>,
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {
  453,756 ( 0.01%)      fn visit_local(&mut self, &index: &Local, context: PlaceContext, location: Location) {
        .                   debug!("visit_local: index={:?} context={:?} location={:?}", index, context, location);
        .                   // We're only interested in temporaries and the return place
      485 ( 0.00%)          match self.ccx.body.local_kind(index) {
        .                       LocalKind::Temp | LocalKind::ReturnPointer => {}
        .                       LocalKind::Arg | LocalKind::Var => return,
        .                   }
        .           
        .                   // Ignore drops, if the temp gets promoted,
        .                   // then it's constant and thus drop is noop.
        .                   // Non-uses are also irrelevant.
  234,108 ( 0.00%)          if context.is_drop() || !context.is_use() {
        .                       debug!(
        .                           "visit_local: context.is_drop={:?} context.is_use={:?}",
        .                           context.is_drop(),
        .                           context.is_use(),
        .                       );
        .                       return;
        .                   }
        .           
        .                   let temp = &mut self.temps[index];
        .                   debug!("visit_local: temp={:?}", temp);
        .                   if *temp == TempState::Undefined {
  114,672 ( 0.00%)              match context {
        .                           PlaceContext::MutatingUse(MutatingUseContext::Store)
        .                           | PlaceContext::MutatingUse(MutatingUseContext::Call) => {
  114,672 ( 0.00%)                      *temp = TempState::Defined { location, uses: 0 };
        .                               return;
        .                           }
        .                           _ => { /* mark as unpromotable below */ }
        .                       }
  158,984 ( 0.00%)          } else if let TempState::Defined { ref mut uses, .. } = *temp {
        .                       // We always allow borrows, even mutable ones, as we need
        .                       // to promote mutable borrows of some ZSTs e.g., `&mut []`.
  153,328 ( 0.00%)              let allowed_use = match context {
        .                           PlaceContext::MutatingUse(MutatingUseContext::Borrow)
        .                           | PlaceContext::NonMutatingUse(_) => true,
        .                           PlaceContext::MutatingUse(_) | PlaceContext::NonUse(_) => false,
        .                       };
        .                       debug!("visit_local: allowed_use={:?}", allowed_use);
        .                       if allowed_use {
  153,104 ( 0.00%)                  *uses += 1;
        .                           return;
        .                       }
        .                       /* mark as unpromotable below */
        .                   }
    1,470 ( 0.00%)          *temp = TempState::Unpromotable;
  162,306 ( 0.00%)      }
        .           
  434,819 ( 0.01%)      fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {
        .                   self.super_rvalue(rvalue, location);
        .           
   79,058 ( 0.00%)          match *rvalue {
        .                       Rvalue::Ref(..) => {
        .                           self.candidates.push(Candidate { location });
        .                       }
        .                       _ => {}
        .                   }
  316,232 ( 0.01%)      }
        .           }
        .           
    1,290 ( 0.00%)  pub fn collect_temps_and_candidates<'tcx>(
        .               ccx: &ConstCx<'_, 'tcx>,
        .               rpo: &mut ReversePostorder<'_, 'tcx>,
        .           ) -> (IndexVec<Local, TempState>, Vec<Candidate>) {
      903 ( 0.00%)      let mut collector = Collector {
      258 ( 0.00%)          temps: IndexVec::from_elem(TempState::Undefined, &ccx.body.local_decls),
        .                   candidates: vec![],
        .                   ccx,
        .               };
   13,948 ( 0.00%)      for (bb, data) in rpo {
        .                   collector.visit_basic_block_data(bb, data);
        .               }
    1,161 ( 0.00%)      (collector.temps, collector.candidates)
    1,032 ( 0.00%)  }
        .           
        .           /// Checks whether locals that appear in a promotion context (`Candidate`) are actually promotable.
        .           ///
        .           /// This wraps an `Item`, and has access to all fields of that `Item` via `Deref` coercion.
        .           struct Validator<'a, 'tcx> {
        .               ccx: &'a ConstCx<'a, 'tcx>,
        .               temps: &'a IndexVec<Local, TempState>,
        .           }
        .           
        .           impl<'a, 'tcx> std::ops::Deref for Validator<'a, 'tcx> {
        .               type Target = ConstCx<'a, 'tcx>;
        .           
        .               fn deref(&self) -> &Self::Target {
  410,384 ( 0.01%)          &self.ccx
        .               }
        .           }
        .           
        .           struct Unpromotable;
        .           
        .           impl<'tcx> Validator<'_, 'tcx> {
        .               fn validate_candidate(&self, candidate: Candidate) -> Result<(), Unpromotable> {
        .                   let loc = candidate.location;
   41,226 ( 0.00%)          let statement = &self.body[loc.block].statements[loc.statement_index];
   82,452 ( 0.00%)          match &statement.kind {
        .                       StatementKind::Assign(box (_, Rvalue::Ref(_, kind, place))) => {
        .                           // We can only promote interior borrows of promotable temps (non-temps
        .                           // don't get promoted anyway).
   68,710 ( 0.00%)                  self.validate_local(place.local)?;
        .           
        .                           // The reference operation itself must be promotable.
        .                           // (Needs to come after `validate_local` to avoid ICEs.)
   81,342 ( 0.00%)                  self.validate_ref(*kind, place)?;
        .           
        .                           // We do not check all the projections (they do not get promoted anyway),
        .                           // but we do stay away from promoting anything involving a dereference.
   40,671 ( 0.00%)                  if place.projection.contains(&ProjectionElem::Deref) {
        .                               return Err(Unpromotable);
        .                           }
        .           
        .                           // We cannot promote things that need dropping, since the promoted value
        .                           // would not get dropped.
   20,304 ( 0.00%)                  if self.qualif_local::<qualifs::NeedsDrop>(place.local) {
        .                               return Err(Unpromotable);
        .                           }
        .           
        .                           Ok(())
        .                       }
        .                       _ => bug!(),
        .                   }
        .               }
        .           
        .               // FIXME(eddyb) maybe cache this?
  639,531 ( 0.01%)      fn qualif_local<Q: qualifs::Qualif>(&self, local: Local) -> bool {
1,705,416 ( 0.03%)          if let TempState::Defined { location: loc, .. } = self.temps[local] {
  639,531 ( 0.01%)              let num_stmts = self.body[loc.block].statements.len();
        .           
  426,354 ( 0.01%)              if loc.statement_index < num_stmts {
  213,177 ( 0.00%)                  let statement = &self.body[loc.block].statements[loc.statement_index];
  426,354 ( 0.01%)                  match &statement.kind {
  852,708 ( 0.02%)                      StatementKind::Assign(box (_, rhs)) => qualifs::in_rvalue::<Q, _>(
        .                                   &self.ccx,
1,698,898 ( 0.03%)                          &mut |l| self.qualif_local::<Q>(l),
        .                                   rhs,
        .                               ),
        .                               _ => {
        .                                   span_bug!(
        .                                       statement.source_info.span,
        .                                       "{:?} is not an assignment",
        .                                       statement
        .                                   );
-- line 254 ----------------------------------------
-- line 265 ----------------------------------------
        .                                   span_bug!(terminator.source_info.span, "{:?} not promotable", kind);
        .                               }
        .                           }
        .                       }
        .                   } else {
        .                       let span = self.body.local_decls[local].source_info.span;
        .                       span_bug!(span, "{:?} not promotable, qualif_local shouldn't have been called", local);
        .                   }
  426,354 ( 0.01%)      }
        .           
        .               // FIXME(eddyb) maybe cache this?
  719,504 ( 0.01%)      fn validate_local(&self, local: Local) -> Result<(), Unpromotable> {
  719,504 ( 0.01%)          if let TempState::Defined { location: loc, .. } = self.temps[local] {
   89,757 ( 0.00%)              let block = &self.body[loc.block];
  179,514 ( 0.00%)              let num_stmts = block.statements.len();
        .           
  179,514 ( 0.00%)              if loc.statement_index < num_stmts {
   89,753 ( 0.00%)                  let statement = &block.statements[loc.statement_index];
  179,506 ( 0.00%)                  match &statement.kind {
   89,753 ( 0.00%)                      StatementKind::Assign(box (_, rhs)) => self.validate_rvalue(rhs),
        .                               _ => {
        .                                   span_bug!(
        .                                       statement.source_info.span,
        .                                       "{:?} is not an assignment",
        .                                       statement
        .                                   );
        .                               }
        .                           }
        .                       } else {
        .                           let terminator = block.terminator();
       12 ( 0.00%)                  match &terminator.kind {
        .                               TerminatorKind::Call { func, args, .. } => self.validate_call(func, args),
        .                               TerminatorKind::Yield { .. } => Err(Unpromotable),
        .                               kind => {
        .                                   span_bug!(terminator.source_info.span, "{:?} not promotable", kind);
        .                               }
        .                           }
        .                       }
        .                   } else {
        .                       Err(Unpromotable)
        .                   }
  809,442 ( 0.01%)      }
        .           
  685,764 ( 0.01%)      fn validate_place(&self, place: PlaceRef<'tcx>) -> Result<(), Unpromotable> {
        .                   match place.last_projection() {
  761,960 ( 0.01%)              None => self.validate_local(place.local),
        .                       Some((place_base, elem)) => {
        .                           // Validate topmost projection, then recurse.
        .                           match elem {
        .                               ProjectionElem::Deref => {
        .                                   let mut promotable = false;
        .                                   // We need to make sure this is a `Deref` of a local with no further projections.
        .                                   // Discussion can be found at
        .                                   // https://github.com/rust-lang/rust/pull/74945#discussion_r463063247
-- line 318 ----------------------------------------
-- line 412 ----------------------------------------
        .                               }
        .                           }
        .           
        .                           self.validate_place(place_base)
        .                       }
        .                   }
        .               }
        .           
   13,508 ( 0.00%)      fn validate_operand(&self, operand: &Operand<'tcx>) -> Result<(), Unpromotable> {
  441,878 ( 0.01%)          match operand {
   84,768 ( 0.00%)              Operand::Copy(place) | Operand::Move(place) => self.validate_place(place.as_ref()),
        .           
        .                       // The qualifs for a constant (e.g. `HasMutInterior`) are checked in
        .                       // `validate_rvalue` upon access.
        .                       Operand::Constant(c) => {
  562,353 ( 0.01%)                  if let Some(def_id) = c.check_static_ptr(self.tcx) {
        .                               // Only allow statics (not consts) to refer to other statics.
        .                               // FIXME(eddyb) does this matter at all for promotion?
        .                               // FIXME(RalfJung) it makes little sense to not promote this in `fn`/`const fn`,
        .                               // and in `const` this cannot occur anyway. The only concern is that we might
        .                               // promote even `let x = &STATIC` which would be useless, but this applies to
        .                               // promotion inside statics as well.
        .                               let is_static = matches!(self.const_kind, Some(hir::ConstContext::Static(_)));
        .                               if !is_static {
-- line 435 ----------------------------------------
-- line 442 ----------------------------------------
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       }
        .                   }
        .               }
        .           
  331,387 ( 0.01%)      fn validate_ref(&self, kind: BorrowKind, place: &Place<'tcx>) -> Result<(), Unpromotable> {
  568,092 ( 0.01%)          match kind {
        .                       // Reject these borrow types just to be safe.
        .                       // FIXME(RalfJung): could we allow them? Should we? No point in it until we have a usecase.
        .                       BorrowKind::Shallow | BorrowKind::Unique => return Err(Unpromotable),
        .           
        .                       BorrowKind::Shared => {
   94,682 ( 0.00%)                  let has_mut_interior = self.qualif_local::<qualifs::HasMutInterior>(place.local);
   94,682 ( 0.00%)                  if has_mut_interior {
        .                               return Err(Unpromotable);
        .                           }
        .                       }
        .           
        .                       BorrowKind::Mut { .. } => {
        .                           let ty = place.ty(self.body, self.tcx).ty;
        .           
        .                           // In theory, any zero-sized value could be borrowed
-- line 466 ----------------------------------------
-- line 473 ----------------------------------------
        .                               }
        .                           } else {
        .                               return Err(Unpromotable);
        .                           }
        .                       }
        .                   }
        .           
        .                   Ok(())
  426,069 ( 0.01%)      }
        .           
        .               fn validate_rvalue(&self, rvalue: &Rvalue<'tcx>) -> Result<(), Unpromotable> {
  538,518 ( 0.01%)          match rvalue {
        .                       Rvalue::Use(operand) | Rvalue::Repeat(operand, _) => {
        .                           self.validate_operand(operand)?;
        .                       }
        .           
        .                       Rvalue::Discriminant(place) | Rvalue::Len(place) => {
        .                           self.validate_place(place.as_ref())?
        .                       }
        .           
        .                       Rvalue::ThreadLocalRef(_) => return Err(Unpromotable),
        .           
   13,508 ( 0.00%)              Rvalue::Cast(kind, operand, cast_ty) => {
   27,016 ( 0.00%)                  if matches!(kind, CastKind::Misc) {
        .                               let operand_ty = operand.ty(self.body, self.tcx);
        .                               let cast_in = CastTy::from_ty(operand_ty).expect("bad input type for cast");
        .                               let cast_out = CastTy::from_ty(cast_ty).expect("bad output type for cast");
        .                               if let (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) = (cast_in, cast_out) {
        .                                   // ptr-to-int casts are not possible in consts and thus not promotable
        .                                   return Err(Unpromotable);
        .                               }
        .                               // int-to-ptr casts are fine, they just use the integer value at pointer type.
        .                           }
        .           
   27,016 ( 0.00%)                  self.validate_operand(operand)?;
        .                       }
        .           
        .                       Rvalue::NullaryOp(op, _) => match op {
        .                           NullOp::SizeOf => {}
        .                           NullOp::AlignOf => {}
        .                       },
        .           
        .                       Rvalue::ShallowInitBox(_, _) => return Err(Unpromotable),
-- line 515 ----------------------------------------
-- line 591 ----------------------------------------
        .                               }
        .                           }
        .                           return Err(Unpromotable);
        .                       }
        .           
        .                       Rvalue::Ref(_, kind, place) => {
        .                           // Special-case reborrows to be more like a copy of the reference.
        .                           let mut place_simplified = place.as_ref();
   67,655 ( 0.00%)                  if let Some((place_base, ProjectionElem::Deref)) =
        .                               place_simplified.last_projection()
        .                           {
   81,186 ( 0.00%)                      let base_ty = place_base.ty(self.body, self.tcx).ty;
   27,062 ( 0.00%)                      if let ty::Ref(..) = base_ty.kind() {
        .                                   place_simplified = place_base;
        .                               }
        .                           }
        .           
  202,860 ( 0.00%)                  self.validate_place(place_simplified)?;
        .           
        .                           // Check that the reference is fine (using the original place!).
        .                           // (Needs to come after `validate_place` to avoid ICEs.)
  168,920 ( 0.00%)                  self.validate_ref(*kind, place)?;
        .                       }
        .           
        .                       Rvalue::Aggregate(_, operands) => {
        .                           for o in operands {
   57,752 ( 0.00%)                      self.validate_operand(o)?;
        .                           }
        .                       }
        .                   }
        .           
        .                   Ok(())
        .               }
        .           
        .               fn validate_call(
-- line 625 ----------------------------------------
-- line 626 ----------------------------------------
        .                   &self,
        .                   callee: &Operand<'tcx>,
        .                   args: &[Operand<'tcx>],
        .               ) -> Result<(), Unpromotable> {
        .                   let fn_ty = callee.ty(self.body, self.tcx);
        .           
        .                   // Inside const/static items, we promote all (eligible) function calls.
        .                   // Everywhere else, we require `#[rustc_promotable]` on the callee.
        4 ( 0.00%)          let promote_all_const_fn = matches!(
        8 ( 0.00%)              self.const_kind,
        .                       Some(hir::ConstContext::Static(_) | hir::ConstContext::Const)
        .                   );
        .                   if !promote_all_const_fn {
       16 ( 0.00%)              if let ty::FnDef(def_id, _) = *fn_ty.kind() {
        .                           // Never promote runtime `const fn` calls of
        .                           // functions without `#[rustc_promotable]`.
       12 ( 0.00%)                  if !self.tcx.is_promotable_const_fn(def_id) {
        .                               return Err(Unpromotable);
        .                           }
        .                       }
        .                   }
        .           
        .                   let is_const_fn = match *fn_ty.kind() {
        .                       ty::FnDef(def_id, _) => self.tcx.is_const_fn_raw(def_id),
        .                       _ => false,
-- line 650 ----------------------------------------
-- line 663 ----------------------------------------
        .           }
        .           
        .           // FIXME(eddyb) remove the differences for promotability in `static`, `const`, `const fn`.
        .           pub fn validate_candidates(
        .               ccx: &ConstCx<'_, '_>,
        .               temps: &IndexVec<Local, TempState>,
        .               candidates: &[Candidate],
        .           ) -> Vec<Candidate> {
      387 ( 0.00%)      let validator = Validator { ccx, temps };
        .           
        .               candidates
        .                   .iter()
        .                   .copied()
   13,742 ( 0.00%)          .filter(|&candidate| validator.validate_candidate(candidate).is_ok())
        .                   .collect()
        .           }
        .           
        .           struct Promoter<'a, 'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               source: &'a mut Body<'tcx>,
        .               promoted: Body<'tcx>,
        .               temps: &'a mut IndexVec<Local, TempState>,
-- line 684 ----------------------------------------
-- line 685 ----------------------------------------
        .               extra_statements: &'a mut Vec<(Location, Statement<'tcx>)>,
        .           
        .               /// If true, all nested temps are also kept in the
        .               /// source MIR, not moved to the promoted MIR.
        .               keep_original: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Promoter<'a, 'tcx> {
      112 ( 0.00%)      fn new_block(&mut self) -> BasicBlock {
       14 ( 0.00%)          let span = self.promoted.span;
       70 ( 0.00%)          self.promoted.basic_blocks_mut().push(BasicBlockData {
        .                       statements: vec![],
        .                       terminator: Some(Terminator {
        .                           source_info: SourceInfo::outermost(span),
        .                           kind: TerminatorKind::Return,
        .                       }),
        .                       is_cleanup: false,
        .                   })
      126 ( 0.00%)      }
        .           
  277,808 ( 0.00%)      fn assign(&mut self, dest: Local, rvalue: Rvalue<'tcx>, span: Span) {
   34,726 ( 0.00%)          let last = self.promoted.basic_blocks().last().unwrap();
        .                   let data = &mut self.promoted[last];
  138,904 ( 0.00%)          data.statements.push(Statement {
        .                       source_info: SourceInfo::outermost(span),
  277,808 ( 0.00%)              kind: StatementKind::Assign(Box::new((Place::from(dest), rvalue))),
        .                   });
  277,808 ( 0.00%)      }
        .           
        .               fn is_temp_kind(&self, local: Local) -> bool {
        .                   self.source.local_kind(local) == LocalKind::Temp
        .               }
        .           
        .               /// Copies the initialization of this temp to the
        .               /// promoted MIR, recursing through temps.
        .               fn promote_temp(&mut self, temp: Local) -> Local {
        .                   let old_keep_original = self.keep_original;
  242,984 ( 0.00%)          let loc = match self.temps[temp] {
  138,848 ( 0.00%)              TempState::Defined { location, uses } if uses > 0 => {
   69,424 ( 0.00%)                  if uses > 1 {
        .                               self.keep_original = true;
        .                           }
        .                           location
        .                       }
        .                       state => {
        .                           span_bug!(self.promoted.span, "{:?} not promotable: {:?}", temp, state);
        .                       }
        .                   };
   69,424 ( 0.00%)          if !self.keep_original {
   69,424 ( 0.00%)              self.temps[temp] = TempState::PromotedOut;
        .                   }
        .           
   69,424 ( 0.00%)          let num_stmts = self.source[loc.block].statements.len();
        .                   let new_temp = self.promoted.local_decls.push(LocalDecl::new(
   34,712 ( 0.00%)              self.source.local_decls[temp].ty,
        .                       self.source.local_decls[temp].source_info.span,
        .                   ));
        .           
        .                   debug!("promote({:?} @ {:?}/{:?}, {:?})", temp, loc, num_stmts, self.keep_original);
        .           
        .                   // First, take the Rvalue or Call out of the source MIR,
        .                   // or duplicate it, depending on keep_original.
  104,136 ( 0.00%)          if loc.statement_index < num_stmts {
  416,544 ( 0.01%)              let (mut rvalue, source_info) = {
   69,424 ( 0.00%)                  let statement = &mut self.source[loc.block].statements[loc.statement_index];
  104,136 ( 0.00%)                  let rhs = match statement.kind {
   34,712 ( 0.00%)                      StatementKind::Assign(box (_, ref mut rhs)) => rhs,
        .                               _ => {
        .                                   span_bug!(
        .                                       statement.source_info.span,
        .                                       "{:?} is not an assignment",
        .                                       statement
        .                                   );
        .                               }
        .                           };
        .           
  277,696 ( 0.00%)                  (
   69,424 ( 0.00%)                      if self.keep_original {
        .                                   rhs.clone()
        .                               } else {
        .                                   let unit = Rvalue::Use(Operand::Constant(Box::new(Constant {
   34,712 ( 0.00%)                              span: statement.source_info.span,
        .                                       user_ty: None,
   69,424 ( 0.00%)                              literal: ty::Const::zero_sized(self.tcx, self.tcx.types.unit).into(),
        .                                   })));
        .                                   mem::replace(rhs, unit)
        .                               },
   34,712 ( 0.00%)                      statement.source_info,
        .                           )
        .                       };
        .           
   69,424 ( 0.00%)              self.visit_rvalue(&mut rvalue, loc);
  520,680 ( 0.01%)              self.assign(new_temp, rvalue, source_info.span);
        .                   } else {
        .                       let terminator = if self.keep_original {
        .                           self.source[loc.block].terminator().clone()
        .                       } else {
        .                           let terminator = self.source[loc.block].terminator_mut();
        .                           let target = match terminator.kind {
        .                               TerminatorKind::Call { destination: Some((_, target)), .. } => target,
        .                               ref kind => {
-- line 785 ----------------------------------------
-- line 816 ----------------------------------------
        .                               };
        .                           }
        .                           ref kind => {
        .                               span_bug!(terminator.source_info.span, "{:?} not promotable", kind);
        .                           }
        .                       };
        .                   };
        .           
   34,712 ( 0.00%)          self.keep_original = old_keep_original;
        .                   new_temp
        .               }
        .           
        .               fn promote_candidate(mut self, candidate: Candidate, next_promoted_id: usize) -> Body<'tcx> {
      112 ( 0.00%)          let def = self.source.source.with_opt_param();
        .                   let mut rvalue = {
        .                       let promoted = &mut self.promoted;
        .                       let promoted_id = Promoted::new(next_promoted_id);
       28 ( 0.00%)              let tcx = self.tcx;
        .                       let mut promoted_operand = |ty, span| {
       14 ( 0.00%)                  promoted.span = span;
      140 ( 0.00%)                  promoted.local_decls[RETURN_PLACE] = LocalDecl::new(ty, span);
        .           
        .                           Operand::Constant(Box::new(Constant {
        .                               span,
        .                               user_ty: None,
       56 ( 0.00%)                      literal: tcx
      140 ( 0.00%)                          .mk_const(ty::Const {
        .                                       ty,
        .                                       val: ty::ConstKind::Unevaluated(ty::Unevaluated {
        .                                           def,
       56 ( 0.00%)                                  substs: InternalSubsts::for_item(tcx, def.did, |param, _| {
        .                                               if let ty::GenericParamDefKind::Lifetime = param.kind {
        .                                                   tcx.lifetimes.re_erased.into()
        .                                               } else {
        .                                                   tcx.mk_param_from_def(param)
        .                                               }
        .                                           }),
        .                                           promoted: Some(promoted_id),
        .                                       }),
        .                                   })
        .                                   .into(),
        .                           }))
        .                       };
        .                       let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();
        .                       let loc = candidate.location;
        .                       let statement = &mut blocks[loc.block].statements[loc.statement_index];
       70 ( 0.00%)              match statement.kind {
        .                           StatementKind::Assign(box (
        .                               _,
        .                               Rvalue::Ref(ref mut region, borrow_kind, ref mut place),
        .                           )) => {
        .                               // Use the underlying local for this (necessarily interior) borrow.
       56 ( 0.00%)                      let ty = local_decls.local_decls()[place.local].ty;
       28 ( 0.00%)                      let span = statement.source_info.span;
        .           
       14 ( 0.00%)                      let ref_ty = tcx.mk_ref(
       28 ( 0.00%)                          tcx.lifetimes.re_erased,
       28 ( 0.00%)                          ty::TypeAndMut { ty, mutbl: borrow_kind.to_mutbl_lossy() },
        .                               );
        .           
       42 ( 0.00%)                      *region = tcx.lifetimes.re_erased;
        .           
       14 ( 0.00%)                      let mut projection = vec![PlaceElem::Deref];
       14 ( 0.00%)                      projection.extend(place.projection);
       56 ( 0.00%)                      place.projection = tcx.intern_place_elems(&projection);
        .           
        .                               // Create a temp to hold the promoted reference.
        .                               // This is because `*r` requires `r` to be a local,
        .                               // otherwise we would use the `promoted` directly.
        .                               let mut promoted_ref = LocalDecl::new(ref_ty, span);
       28 ( 0.00%)                      promoted_ref.source_info = statement.source_info;
      140 ( 0.00%)                      let promoted_ref = local_decls.push(promoted_ref);
       42 ( 0.00%)                      assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);
        .           
       56 ( 0.00%)                      let promoted_ref_statement = Statement {
       56 ( 0.00%)                          source_info: statement.source_info,
        .                                   kind: StatementKind::Assign(Box::new((
       42 ( 0.00%)                              Place::from(promoted_ref),
        .                                       Rvalue::Use(promoted_operand(ref_ty, span)),
        .                                   ))),
        .                               };
      140 ( 0.00%)                      self.extra_statements.push((loc, promoted_ref_statement));
        .           
       98 ( 0.00%)                      Rvalue::Ref(
       42 ( 0.00%)                          tcx.lifetimes.re_erased,
        .                                   borrow_kind,
        .                                   Place {
        .                                       local: mem::replace(&mut place.local, promoted_ref),
        .                                       projection: List::empty(),
        .                                   },
        .                               )
        .                           }
        .                           _ => bug!(),
        .                       }
        .                   };
        .           
       56 ( 0.00%)          assert_eq!(self.new_block(), START_BLOCK);
       42 ( 0.00%)          self.visit_rvalue(
        .                       &mut rvalue,
        .                       Location { block: BasicBlock::new(0), statement_index: usize::MAX },
        .                   );
        .           
       14 ( 0.00%)          let span = self.promoted.span;
      140 ( 0.00%)          self.assign(RETURN_PLACE, rvalue, span);
       70 ( 0.00%)          self.promoted
        .               }
        .           }
        .           
        .           /// Replaces all temporaries with their promoted counterparts.
        .           impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
  277,696 ( 0.00%)      fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {
   69,424 ( 0.00%)          if self.is_temp_kind(*local) {
   34,712 ( 0.00%)              *local = self.promote_temp(*local);
        .                   }
  277,696 ( 0.00%)      }
        .           }
        .           
    1,161 ( 0.00%)  pub fn promote_candidates<'tcx>(
        .               body: &mut Body<'tcx>,
        .               tcx: TyCtxt<'tcx>,
        .               mut temps: IndexVec<Local, TempState>,
        .               candidates: Vec<Candidate>,
        .           ) -> IndexVec<Promoted, Body<'tcx>> {
        .               // Visit candidates in reverse, in case they're nested.
        .               debug!("promote_candidates({:?})", candidates);
        .           
        .               let mut promotions = IndexVec::new();
        .           
        .               let mut extra_statements = vec![];
    6,768 ( 0.00%)      for candidate in candidates.into_iter().rev() {
        .                   let Location { block, statement_index } = candidate.location;
   54,144 ( 0.00%)          if let StatementKind::Assign(box (place, _)) = &body[block].statements[statement_index].kind
        .                   {
    6,768 ( 0.00%)              if let Some(local) = place.as_local() {
        .                           if temps[local] == TempState::PromotedOut {
        .                               // Already promoted.
        .                               continue;
        .                           }
        .                       }
        .                   }
        .           
        .                   // Declare return place local so that `mir::Body::new` doesn't complain.
       42 ( 0.00%)          let initial_locals = iter::once(LocalDecl::new(tcx.types.never, body.span)).collect();
        .           
       70 ( 0.00%)          let mut scope = body.source_scopes[body.source_info(candidate.location).scope].clone();
        .                   scope.parent_scope = None;
        .           
      196 ( 0.00%)          let promoted = Body::new(
       56 ( 0.00%)              body.source, // `promoted` gets filled in below
        .                       IndexVec::new(),
        .                       IndexVec::from_elem_n(scope, 1),
       56 ( 0.00%)              initial_locals,
        .                       IndexVec::new(),
        .                       0,
        .                       vec![],
        .                       body.span,
        .                       body.generator_kind(),
        .                   );
        .           
        .                   let promoter = Promoter {
-- line 979 ----------------------------------------
-- line 980 ----------------------------------------
        .                       promoted,
        .                       tcx,
        .                       source: body,
        .                       temps: &mut temps,
        .                       extra_statements: &mut extra_statements,
        .                       keep_original: false,
        .                   };
        .           
      168 ( 0.00%)          let mut promoted = promoter.promote_candidate(candidate, promotions.len());
       28 ( 0.00%)          promoted.source.promoted = Some(promotions.next_index());
        .                   promotions.push(promoted);
        .               }
        .           
        .               // Insert each of `extra_statements` before its indicated location, which
        .               // has to be done in reverse location order, to not invalidate the rest.
        .               extra_statements.sort_by_key(|&(loc, _)| cmp::Reverse(loc));
      600 ( 0.00%)      for (loc, statement) in extra_statements {
      140 ( 0.00%)          body[loc.block].statements.insert(loc.statement_index, statement);
        .               }
        .           
        .               // Eliminate assignments to, and drops of promoted temps.
      402 ( 0.00%)      let promoted = |index: Local| temps[index] == TempState::PromotedOut;
        .               for block in body.basic_blocks_mut() {
  517,149 ( 0.01%)          block.statements.retain(|statement| match &statement.kind {
   39,543 ( 0.00%)              StatementKind::Assign(box (place, _)) => {
   39,543 ( 0.00%)                  if let Some(index) = place.as_local() {
        .                               !promoted(index)
        .                           } else {
        .                               true
        .                           }
        .                       }
        .                       StatementKind::StorageLive(index) | StatementKind::StorageDead(index) => {
   64,572 ( 0.00%)                  !promoted(*index)
        .                       }
        .                       _ => true,
        .                   });
        .                   let terminator = block.terminator_mut();
   13,690 ( 0.00%)          if let TerminatorKind::Drop { place, target, .. } = &terminator.kind {
      144 ( 0.00%)              if let Some(index) = place.as_local() {
      144 ( 0.00%)                  if promoted(index) {
        .                               terminator.kind = TerminatorKind::Goto { target: *target };
        .                           }
        .                       }
        .                   }
        .               }
        .           
        .               promotions
    1,032 ( 0.00%)  }
        .           
        .           /// This function returns `true` if the function being called in the array
        .           /// repeat expression is a `const` function.
        .           pub fn is_const_fn_in_array_repeat_expression<'tcx>(
        .               ccx: &ConstCx<'_, 'tcx>,
        .               place: &Place<'tcx>,
        .               body: &Body<'tcx>,
        .           ) -> bool {
-- line 1035 ----------------------------------------

2,759,433 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/promote_consts.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/kind.rs
--------------------------------------------------------------------------------
Ir                  

-- line 7 ----------------------------------------
         .           use crate::ty::{self, TyCtxt, TypeFoldable};
         .           use rustc_errors::ErrorReported;
         .           use rustc_hir::def_id::DefId;
         .           use rustc_macros::HashStable;
         .           use rustc_target::abi::Size;
         .           
         .           use super::ScalarInt;
         .           /// An unevaluated, potentially generic, constant.
       685 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]
         .           #[derive(Hash, HashStable)]
         .           pub struct Unevaluated<'tcx, P = Option<Promoted>> {
         .               pub def: ty::WithOptConstParam<DefId>,
     3,286 ( 0.00%)      pub substs: SubstsRef<'tcx>,
     2,746 ( 0.00%)      pub promoted: P,
         .           }
         .           
         .           impl<'tcx> Unevaluated<'tcx> {
         .               #[inline]
         .               pub fn shrink(self) -> Unevaluated<'tcx, ()> {
         .                   debug_assert_eq!(self.promoted, None);
         .                   Unevaluated { def: self.def, substs: self.substs, promoted: () }
         .               }
-- line 28 ----------------------------------------
-- line 38 ----------------------------------------
         .           impl<'tcx, P: Default> Unevaluated<'tcx, P> {
         .               #[inline]
         .               pub fn new(def: ty::WithOptConstParam<DefId>, substs: SubstsRef<'tcx>) -> Unevaluated<'tcx, P> {
         .                   Unevaluated { def, substs, promoted: Default::default() }
         .               }
         .           }
         .           
         .           /// Represents a constant in Rust.
14,998,111 ( 0.27%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]
   661,922 ( 0.01%)  #[derive(Hash, HashStable)]
         .           pub enum ConstKind<'tcx> {
         .               /// A const generic parameter.
       104 ( 0.00%)      Param(ty::ParamConst),
         .           
         .               /// Infer the value of the const.
         .               Infer(InferConst<'tcx>),
         .           
         .               /// Bound const variable, used only when preparing a trait query.
         .               Bound(ty::DebruijnIndex, ty::BoundVar),
         .           
         .               /// A placeholder const - universally quantified higher-ranked const.
         .               Placeholder(ty::PlaceholderConst<'tcx>),
         .           
         .               /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other
         .               /// variants when the code is monomorphic enough for that.
         .               Unevaluated(Unevaluated<'tcx>),
         .           
         .               /// Used to hold computed value.
   262,188 ( 0.00%)      Value(ConstValue<'tcx>),
         .           
         .               /// A placeholder for a const which could not be computed; this is
         .               /// propagated to avoid useless error messages.
         .               Error(ty::DelaySpanBugEmitted),
         .           }
         .           
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(ConstKind<'_>, 40);
         .           
         .           impl<'tcx> ConstKind<'tcx> {
         .               #[inline]
         .               pub fn try_to_value(self) -> Option<ConstValue<'tcx>> {
11,367,455 ( 0.20%)          if let ConstKind::Value(val) = self { Some(val) } else { None }
         .               }
         .           
         .               #[inline]
         .               pub fn try_to_scalar(self) -> Option<Scalar<AllocId>> {
         .                   self.try_to_value()?.try_to_scalar()
         .               }
         .           
         .               #[inline]
         .               pub fn try_to_scalar_int(self) -> Option<ScalarInt> {
         .                   Some(self.try_to_value()?.try_to_scalar()?.assert_int())
         .               }
         .           
         .               #[inline]
 2,551,750 ( 0.05%)      pub fn try_to_bits(self, size: Size) -> Option<u128> {
36,138,877 ( 0.65%)          self.try_to_scalar_int()?.to_bits(size).ok()
 2,551,750 ( 0.05%)      }
         .           
         .               #[inline]
         .               pub fn try_to_bool(self) -> Option<bool> {
        98 ( 0.00%)          self.try_to_scalar_int()?.try_into().ok()
         .               }
         .           
         .               #[inline]
         .               pub fn try_to_machine_usize(self, tcx: TyCtxt<'tcx>) -> Option<u64> {
    93,071 ( 0.00%)          self.try_to_value()?.try_to_machine_usize(tcx)
        13 ( 0.00%)      }
         .           }
         .           
         .           /// An inference variable for a const, for use in const generics.
       511 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]
         .           #[derive(HashStable)]
         .           pub enum InferConst<'tcx> {
         .               /// Infer the value of the const.
         .               Var(ty::ConstVid<'tcx>),
         .               /// A fresh const variable. See `infer::freshen` for more details.
         .               Fresh(u32),
         .           }
         .           
         .           impl<'tcx> ConstKind<'tcx> {
         .               #[inline]
         .               /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the
         .               /// unevaluated constant.
    22,554 ( 0.00%)      pub fn eval(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Self {
39,297,404 ( 0.71%)          self.try_eval(tcx, param_env).and_then(Result::ok).map_or(self, ConstKind::Value)
    20,048 ( 0.00%)      }
         .           
         .               #[inline]
         .               /// Tries to evaluate the constant if it is `Unevaluated`. If that isn't possible or necessary
         .               /// return `None`.
16,671,783 ( 0.30%)      pub(super) fn try_eval(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   param_env: ParamEnv<'tcx>,
         .               ) -> Option<Result<ConstValue<'tcx>, ErrorReported>> {
 4,188,902 ( 0.08%)          if let ConstKind::Unevaluated(unevaluated) = self {
         .                       use crate::mir::interpret::ErrorHandled;
         .           
         .                       // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`
         .                       // also does later, but we want to do it before checking for
         .                       // inference variables.
         .                       // Note that we erase regions *before* calling `with_reveal_all_normalized`,
         .                       // so that we don't try to invoke this query with
         .                       // any region variables.
       263 ( 0.00%)              let param_env_and = tcx
         .                           .erase_regions(param_env)
         .                           .with_reveal_all_normalized(tcx)
         .                           .and(tcx.erase_regions(unevaluated));
         .           
         .                       // HACK(eddyb) when the query key would contain inference variables,
         .                       // attempt using identity substs and `ParamEnv` instead, that will succeed
         .                       // when the expression doesn't depend on any parameters.
         .                       // FIXME(eddyb, skinny121) pass `InferCtxt` into here when it's available, so that
         .                       // we can call `infcx.const_eval_resolve` which handles inference variables.
        66 ( 0.00%)              let param_env_and = if param_env_and.needs_infer() {
         .                           tcx.param_env(unevaluated.def.did).and(ty::Unevaluated {
         .                               def: unevaluated.def,
         .                               substs: InternalSubsts::identity_for_item(tcx, unevaluated.def.did),
         .                               promoted: unevaluated.promoted,
         .                           })
         .                       } else {
         .                           param_env_and
         .                       };
         .           
         .                       // FIXME(eddyb) maybe the `const_eval_*` methods should take
         .                       // `ty::ParamEnvAnd` instead of having them separate.
         .                       let (param_env, unevaluated) = param_env_and.into_parts();
         .                       // try to resolve e.g. associated constants to their definition on an impl, and then
         .                       // evaluate the const.
     1,254 ( 0.00%)              match tcx.const_eval_resolve(param_env, unevaluated, None) {
         .                           // NOTE(eddyb) `val` contains no lifetimes/types/consts,
         .                           // and we use the original type, so nothing from `substs`
         .                           // (which may be identity substs, see above),
         .                           // can leak through `val` into the const we return.
       331 ( 0.00%)                  Ok(val) => Some(Ok(val)),
         .                           Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => None,
         .                           Err(ErrorHandled::Reported(e)) => Some(Err(e)),
         .                       }
         .                   } else {
        18 ( 0.00%)              None
         .                   }
16,671,792 ( 0.30%)      }
         .           }

22,382,287 ( 0.40%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts/kind.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs
--------------------------------------------------------------------------------
Ir                 

-- line 41 ----------------------------------------
        .               fn from(val: ScalarMaybeUninit<Tag>) -> Self {
        .                   Immediate::Scalar(val)
        .               }
        .           }
        .           
        .           impl<Tag: Provenance> From<Scalar<Tag>> for Immediate<Tag> {
        .               #[inline(always)]
        .               fn from(val: Scalar<Tag>) -> Self {
       13 ( 0.00%)          Immediate::Scalar(val.into())
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> Immediate<Tag> {
        .               pub fn from_pointer(p: Pointer<Tag>, cx: &impl HasDataLayout) -> Self {
        .                   Immediate::Scalar(ScalarMaybeUninit::from_pointer(p, cx))
        .               }
        .           
        .               pub fn from_maybe_pointer(p: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
        .                   Immediate::Scalar(ScalarMaybeUninit::from_maybe_pointer(p, cx))
        .               }
        .           
       56 ( 0.00%)      pub fn new_slice(val: Scalar<Tag>, len: u64, cx: &impl HasDataLayout) -> Self {
   13,718 ( 0.00%)          Immediate::ScalarPair(val.into(), Scalar::from_machine_usize(len, cx).into())
       84 ( 0.00%)      }
        .           
        .               pub fn new_dyn_trait(
        .                   val: Scalar<Tag>,
        .                   vtable: Pointer<Option<Tag>>,
        .                   cx: &impl HasDataLayout,
        .               ) -> Self {
        .                   Immediate::ScalarPair(val.into(), ScalarMaybeUninit::from_maybe_pointer(vtable, cx))
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar_or_uninit(self) -> ScalarMaybeUninit<Tag> {
   92,412 ( 0.00%)          match self {
  157,364 ( 0.00%)              Immediate::Scalar(val) => val,
        .                       Immediate::ScalarPair(..) => bug!("Got a scalar pair where a scalar was expected"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar(self) -> InterpResult<'tcx, Scalar<Tag>> {
        .                   self.to_scalar_or_uninit().check_init()
        .               }
-- line 85 ----------------------------------------
-- line 159 ----------------------------------------
        .               fn deref(&self) -> &Immediate<Tag> {
        .                   &self.imm
        .               }
        .           }
        .           
        .           /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,
        .           /// or still in memory. The latter is an optimization, to delay reading that chunk of
        .           /// memory and to avoid having to store arbitrary-sized data here.
      139 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, HashStable, Hash, Debug)]
        .           pub enum Operand<Tag: Provenance = AllocId> {
        .               Immediate(Immediate<Tag>),
        .               Indirect(MemPlace<Tag>),
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
        .           pub struct OpTy<'tcx, Tag: Provenance = AllocId> {
        .               op: Operand<Tag>, // Keep this private; it helps enforce invariants.
-- line 175 ----------------------------------------
-- line 185 ----------------------------------------
        .               fn deref(&self) -> &Operand<Tag> {
        .                   &self.op
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
   75,425 ( 0.00%)          OpTy { op: Operand::Indirect(*mplace), layout: mplace.layout }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: &MPlaceTy<'tcx, Tag>) -> Self {
        .                   OpTy { op: Operand::Indirect(**mplace), layout: mplace.layout }
        .               }
-- line 201 ----------------------------------------
-- line 206 ----------------------------------------
        .               fn from(val: ImmTy<'tcx, Tag>) -> Self {
        .                   OpTy { op: Operand::Immediate(val.imm), layout: val.layout }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> ImmTy<'tcx, Tag> {
        .               #[inline]
        .               pub fn from_scalar(val: Scalar<Tag>, layout: TyAndLayout<'tcx>) -> Self {
      202 ( 0.00%)          ImmTy { imm: val.into(), layout }
        .               }
        .           
        .               #[inline]
        .               pub fn from_immediate(imm: Immediate<Tag>, layout: TyAndLayout<'tcx>) -> Self {
        .                   ImmTy { imm, layout }
        .               }
        .           
        .               #[inline]
        .               pub fn try_from_uint(i: impl Into<u128>, layout: TyAndLayout<'tcx>) -> Option<Self> {
        .                   Some(Self::from_scalar(Scalar::try_from_uint(i, layout.size)?, layout))
        .               }
        .               #[inline]
        .               pub fn from_uint(i: impl Into<u128>, layout: TyAndLayout<'tcx>) -> Self {
       14 ( 0.00%)          Self::from_scalar(Scalar::from_uint(i, layout.size), layout)
        .               }
        .           
        .               #[inline]
        .               pub fn try_from_int(i: impl Into<i128>, layout: TyAndLayout<'tcx>) -> Option<Self> {
        .                   Some(Self::from_scalar(Scalar::try_from_int(i, layout.size)?, layout))
        .               }
        .           
        .               #[inline]
-- line 236 ----------------------------------------
-- line 248 ----------------------------------------
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
        .               /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.
        .               /// Returns `None` if the layout does not permit loading this as a value.
        .               fn try_read_immediate_from_mplace(
        .                   &self,
        .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<ImmTy<'tcx, M::PointerTag>>> {
   81,013 ( 0.00%)          if mplace.layout.is_unsized() {
        .                       // Don't touch unsized
        .                       return Ok(None);
        .                   }
        .           
  202,491 ( 0.00%)          let alloc = match self.get_alloc(mplace)? {
  337,470 ( 0.01%)              Some(ptr) => ptr,
        .                       None => {
        .                           return Ok(Some(ImmTy {
        .                               // zero-sized type
       27 ( 0.00%)                      imm: Scalar::ZST.into(),
        .                               layout: mplace.layout,
        .                           }));
        .                       }
        .                   };
        .           
  497,382 ( 0.01%)          match mplace.layout.abi {
        .                       Abi::Scalar(..) => {
   39,454 ( 0.00%)                  let scalar = alloc.read_scalar(alloc_range(Size::ZERO, mplace.layout.size))?;
        .                           Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))
        .                       }
   63,855 ( 0.00%)              Abi::ScalarPair(a, b) => {
        .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
        .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
        .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
        .                           let (a, b) = (a.value, b.value);
        .                           let (a_size, b_size) = (a.size(self), b.size(self));
        .                           let b_offset = a_size.align_to(b.align(self).abi);
   42,570 ( 0.00%)                  assert!(b_offset.bytes() > 0); // we later use the offset to tell apart the fields
        .                           let a_val = alloc.read_scalar(alloc_range(Size::ZERO, a_size))?;
   63,855 ( 0.00%)                  let b_val = alloc.read_scalar(alloc_range(b_offset, b_size))?;
  106,425 ( 0.00%)                  Ok(Some(ImmTy { imm: Immediate::ScalarPair(a_val, b_val), layout: mplace.layout }))
        .                       }
        .                       _ => Ok(None),
        .                   }
        .               }
        .           
        .               /// Try returning an immediate for the operand.
        .               /// If the layout does not permit loading this as an immediate, return where in memory
        .               /// we can find the data.
        .               /// Note that for a given layout, this operation will either always fail or always
        .               /// succeed!  Whether it succeeds depends on whether the layout can be represented
        .               /// in an `Immediate`, not on which data is stored there currently.
1,150,956 ( 0.02%)      pub fn try_read_immediate(
        .                   &self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Result<ImmTy<'tcx, M::PointerTag>, MPlaceTy<'tcx, M::PointerTag>>> {
2,301,912 ( 0.04%)          Ok(match src.try_as_mplace() {
        .                       Ok(ref mplace) => {
  134,994 ( 0.00%)                  if let Some(val) = self.try_read_immediate_from_mplace(mplace)? {
        .                               Ok(val)
        .                           } else {
        .                               Err(*mplace)
        .                           }
        .                       }
  603,870 ( 0.01%)              Err(val) => Ok(val),
        .                   })
1,150,956 ( 0.02%)      }
        .           
        .               /// Read an immediate from a place, asserting that that is possible with the given layout.
        .               #[inline(always)]
        .               pub fn read_immediate(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {
  296,622 ( 0.01%)          if let Ok(imm) = self.try_read_immediate(op)? {
  576,833 ( 0.01%)              Ok(imm)
        .                   } else {
        .                       span_bug!(self.cur_span(), "primitive read failed for type: {:?}", op.layout.ty);
        .                   }
        .               }
        .           
        .               /// Read a scalar from a place
  432,751 ( 0.01%)      pub fn read_scalar(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {
   39,341 ( 0.00%)          Ok(self.read_immediate(op)?.to_scalar_or_uninit())
  354,069 ( 0.01%)      }
        .           
        .               /// Read a pointer from a place.
        .               pub fn read_pointer(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Pointer<Option<M::PointerTag>>> {
        .                   Ok(self.scalar_to_ptr(self.read_scalar(op)?.check_init()?))
        .               }
-- line 342 ----------------------------------------
-- line 345 ----------------------------------------
        .               pub fn read_str(&self, mplace: &MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, &str> {
        .                   let len = mplace.len(self)?;
        .                   let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len))?;
        .                   let str = std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;
        .                   Ok(str)
        .               }
        .           
        .               /// Projection functions
  307,950 ( 0.01%)      pub fn operand_field(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let base = match op.try_as_mplace() {
        .                       Ok(ref mplace) => {
        .                           // We can reuse the mplace field computation logic for indirect operands.
        .                           let field = self.mplace_field(mplace, field)?;
  338,437 ( 0.01%)                  return Ok(field.into());
        .                       }
      196 ( 0.00%)              Err(value) => value,
        .                   };
        .           
       30 ( 0.00%)          let field_layout = op.layout.field(self, field);
        .                   if field_layout.is_zst() {
        .                       let immediate = Scalar::ZST.into();
        .                       return Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout });
        .                   }
       84 ( 0.00%)          let offset = op.layout.fields.offset(field);
       52 ( 0.00%)          let immediate = match *base {
        .                       // the field covers the entire type
      182 ( 0.00%)              _ if offset.bytes() == 0 && field_layout.size == op.layout.size => *base,
        .                       // extract fields from types with `ScalarPair` ABI
        .                       Immediate::ScalarPair(a, b) => {
       26 ( 0.00%)                  let val = if offset.bytes() == 0 { a } else { b };
        .                           Immediate::from(val)
        .                       }
        .                       Immediate::Scalar(val) => span_bug!(
        .                           self.cur_span(),
        .                           "field access on non aggregate {:#?}, {:#?}",
        .                           val,
        .                           op.layout
        .                       ),
        .                   };
      392 ( 0.00%)          Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout })
  277,155 ( 0.00%)      }
        .           
        .               pub fn operand_index(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   index: u64,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   if let Ok(index) = usize::try_from(index) {
        .                       // We can just treat this as a field.
-- line 397 ----------------------------------------
-- line 398 ----------------------------------------
        .                       self.operand_field(op, index)
        .                   } else {
        .                       // Indexing into a big array. This must be an mplace.
        .                       let mplace = op.assert_mem_place();
        .                       Ok(self.mplace_index(&mplace, index)?.into())
        .                   }
        .               }
        .           
      187 ( 0.00%)      pub fn operand_downcast(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   variant: VariantIdx,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Downcasts only change the layout
      289 ( 0.00%)          Ok(match op.try_as_mplace() {
      160 ( 0.00%)              Ok(ref mplace) => self.mplace_downcast(mplace, variant)?.into(),
        .                       Err(..) => {
        3 ( 0.00%)                  let layout = op.layout.for_variant(self, variant);
       14 ( 0.00%)                  OpTy { layout, ..*op }
        .                       }
        .                   })
      153 ( 0.00%)      }
        .           
      284 ( 0.00%)      pub fn operand_projection(
        .                   &self,
        .                   base: &OpTy<'tcx, M::PointerTag>,
        .                   proj_elem: mir::PlaceElem<'tcx>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::ProjectionElem::*;
    1,136 ( 0.00%)          Ok(match proj_elem {
      165 ( 0.00%)              Field(field, _) => self.operand_field(base, field.index())?,
       48 ( 0.00%)              Downcast(_, variant) => self.operand_downcast(base, variant)?,
        .                       Deref => self.deref_operand(base)?.into(),
        .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
        .                           // The rest should only occur as mplace, we do not use Immediates for types
        .                           // allowing such operations.  This matches place_projection forcing an allocation.
        .                           let mplace = base.assert_mem_place();
        .                           self.mplace_projection(&mplace, proj_elem)?.into()
        .                       }
        .                   })
      284 ( 0.00%)      }
        .           
        .               /// Converts a repr(simd) operand into an operand where `place_index` accesses the SIMD elements.
        .               /// Also returns the number of elements.
        .               pub fn operand_to_simd(
        .                   &self,
        .                   base: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
        .                   // Basically we just transmute this place into an array following simd_size_and_type.
-- line 446 ----------------------------------------
-- line 449 ----------------------------------------
        .                   self.mplace_to_simd(&base.assert_mem_place())
        .               }
        .           
        .               /// Read from a local. Will not actually access the local if reading from a ZST.
        .               /// Will not access memory, instead an indirect `Operand` is returned.
        .               ///
        .               /// This is public because it is used by [priroda](https://github.com/oli-obk/priroda) to get an
        .               /// OpTy from a local
  353,565 ( 0.01%)      pub fn access_local(
        .                   &self,
        .                   frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,
        .                   local: mir::Local,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let layout = self.layout_of_local(frame, local, layout)?;
    6,779 ( 0.00%)          let op = if layout.is_zst() {
        .                       // Do not read from ZST, they might not be initialized
       20 ( 0.00%)              Operand::Immediate(Scalar::ZST.into())
        .                   } else {
   25,134 ( 0.00%)              M::access_local(&self, frame, local)?
        .                   };
  367,536 ( 0.01%)          Ok(OpTy { op, layout })
  300,315 ( 0.01%)      }
        .           
        .               /// Every place can be read from, so we can turn them into an operand.
        .               /// This will definitely return `Indirect` if the place is a `Ptr`, i.e., this
        .               /// will never actually read from memory.
        .               #[inline(always)]
        .               pub fn place_to_op(
        .                   &self,
        .                   place: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
   13,618 ( 0.00%)          let op = match **place {
        .                       Place::Ptr(mplace) => Operand::Indirect(mplace),
        .                       Place::Local { frame, local } => {
   61,281 ( 0.00%)                  *self.access_local(&self.stack()[frame], local, None)?
        .                       }
        .                   };
   47,474 ( 0.00%)          Ok(OpTy { op, layout: place.layout })
        .               }
        .           
        .               // Evaluate a place with the goal of reading from it.  This lets us sometimes
        .               // avoid allocations.
  236,760 ( 0.00%)      pub fn eval_place_to_op(
        .                   &self,
        .                   place: mir::Place<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Do not use the layout passed in as argument if the base we are looking at
        .                   // here is not the entire place.
   29,595 ( 0.00%)          let layout = if place.projection.is_empty() { layout } else { None };
        .           
   88,785 ( 0.00%)          let base_op = self.access_local(self.frame(), place.local, layout)?;
        .           
        .                   let op = place
        .                       .projection
        .                       .iter()
      639 ( 0.00%)              .try_fold(base_op, |op, elem| self.operand_projection(&op, elem))?;
        .           
        .                   trace!("eval_place_to_op: got {:?}", *op);
        .                   // Sanity-check the type we ended up with.
        .                   debug_assert!(mir_assign_valid_types(
        .                       *self.tcx,
        .                       self.param_env,
        .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
        .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
        .                       )?)?,
        .                       op.layout,
        .                   ));
   64,206 ( 0.00%)          Ok(op)
  266,355 ( 0.00%)      }
        .           
        .               /// Evaluate the operand, returning a place where you can then find the data.
        .               /// If you already know the layout, you can save two table lookups
        .               /// by passing it in here.
        .               #[inline]
  527,074 ( 0.01%)      pub fn eval_operand(
        .                   &self,
        .                   mir_op: &mir::Operand<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::Operand::*;
  141,010 ( 0.00%)          let op = match *mir_op {
        .                       // FIXME: do some more logic on `move` to invalidate the old location
  130,176 ( 0.00%)              Copy(place) | Move(place) => self.eval_place_to_op(place, layout)?,
        .           
        .                       Constant(ref constant) => {
        .                           let val =
  606,620 ( 0.01%)                      self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal)?;
        .                           // This can still fail:
        .                           // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all
        .                           //   checked yet.
        .                           // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.
        .           
   13,087 ( 0.00%)                  self.mir_const_to_op(&val, layout)?
        .                       }
        .                   };
        .                   trace!("{:?}: {:?}", mir_op, *op);
  782,562 ( 0.01%)          Ok(op)
  351,802 ( 0.01%)      }
        .           
        .               /// Evaluate a bunch of operands at once
        .               pub(super) fn eval_operands(
        .                   &self,
        .                   ops: &[mir::Operand<'tcx>],
        .               ) -> InterpResult<'tcx, Vec<OpTy<'tcx, M::PointerTag>>> {
        .                   ops.iter().map(|op| self.eval_operand(op, None)).collect()
        .               }
        .           
        .               // Used when the miri-engine runs into a constant and for extracting information from constants
        .               // in patterns via the `const_eval` module
        .               /// The `val` and `layout` are assumed to already be in our interpreter
        .               /// "universe" (param_env).
  431,436 ( 0.01%)      pub fn const_to_op(
        .                   &self,
        .                   val: &ty::Const<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  213,665 ( 0.00%)          match val.val {
        .                       ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),
        .                       ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),
      196 ( 0.00%)              ty::ConstKind::Unevaluated(uv) => {
        .                           let instance = self.resolve(uv.def, uv.substs)?;
      539 ( 0.00%)                  Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())
        .                       }
        .                       ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {
        .                           span_bug!(self.cur_span(), "const_to_op: Unexpected ConstKind {:?}", val)
        .                       }
  399,916 ( 0.01%)              ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty, layout),
        .                   }
  323,577 ( 0.01%)      }
        .           
   74,580 ( 0.00%)      pub fn mir_const_to_op(
        .                   &self,
        .                   val: &mir::ConstantKind<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
   85,466 ( 0.00%)          match val {
  157,372 ( 0.00%)              mir::ConstantKind::Ty(ct) => self.const_to_op(ct, layout),
        .                       mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, ty, layout),
        .                   }
   61,020 ( 0.00%)      }
        .           
  426,840 ( 0.01%)      crate fn const_val_to_op(
        .                   &self,
        .                   val_val: ConstValue<'tcx>,
        .                   ty: Ty<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Other cases need layout.
        .                   let tag_scalar = |scalar| -> InterpResult<'tcx, _> {
  255,900 ( 0.00%)              Ok(match scalar {
        .                           Scalar::Ptr(ptr, size) => Scalar::Ptr(self.global_base_pointer(ptr)?, size),
  127,908 ( 0.00%)                  Scalar::Int(int) => Scalar::Int(int),
        .                       })
        .                   };
  101,688 ( 0.00%)          let layout = from_known_layout(self.tcx, self.param_env, layout, || self.layout_of(ty))?;
  128,120 ( 0.00%)          let op = match val_val {
       32 ( 0.00%)              ConstValue::ByRef { alloc, offset } => {
       32 ( 0.00%)                  let id = self.tcx.create_memory_alloc(alloc);
        .                           // We rely on mutability being set correctly in that allocation to prevent writes
        .                           // where none should happen.
        .                           let ptr = self.global_base_pointer(Pointer::new(id, offset))?;
       64 ( 0.00%)                  Operand::Indirect(MemPlace::from_ptr(ptr.into(), layout.align.abi))
        .                       }
  390,552 ( 0.01%)              ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),
       54 ( 0.00%)              ConstValue::Slice { data, start, end } => {
        .                           // We rely on mutability being set correctly in `data` to prevent writes
        .                           // where none should happen.
        .                           let ptr = Pointer::new(
       54 ( 0.00%)                      self.tcx.create_memory_alloc(data),
        .                               Size::from_bytes(start), // offset: `start`
        .                           );
      322 ( 0.00%)                  Operand::Immediate(Immediate::new_slice(
        .                               Scalar::from_pointer(self.global_base_pointer(ptr)?, &*self.tcx),
        .                               u64::try_from(end.checked_sub(start).unwrap()).unwrap(), // len: `end - start`
        .                               self,
        .                           ))
        .                       }
        .                   };
  896,364 ( 0.02%)          Ok(OpTy { op, layout })
  341,472 ( 0.01%)      }
        .           
        .               /// Read discriminant, return the runtime value as well as the variant index.
        .               /// Can also legally be called on non-enums (e.g. through the discriminant_value intrinsic)!
       10 ( 0.00%)      pub fn read_discriminant(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (Scalar<M::PointerTag>, VariantIdx)> {
        .                   trace!("read_discriminant_value {:#?}", op.layout);
        .                   // Get type and layout of the discriminant.
       12 ( 0.00%)          let discr_layout = self.layout_of(op.layout.ty.discriminant_ty(*self.tcx))?;
        .                   trace!("discriminant type: {:?}", discr_layout.ty);
        .           
        .                   // We use "discriminant" to refer to the value associated with a particular enum variant.
        .                   // This is not to be confused with its "variant index", which is just determining its position in the
        .                   // declared list of variants -- they can differ with explicitly assigned discriminants.
        .                   // We use "tag" to refer to how the discriminant is encoded in memory, which can be either
        .                   // straight-forward (`TagEncoding::Direct`) or with a niche (`TagEncoding::Niche`).
        3 ( 0.00%)          let (tag_scalar_layout, tag_encoding, tag_field) = match op.layout.variants {
        .                       Variants::Single { index } => {
        .                           let discr = match op.layout.ty.discriminant_for_variant(*self.tcx, index) {
        .                               Some(discr) => {
        .                                   // This type actually has discriminants.
        .                                   assert_eq!(discr.ty, discr_layout.ty);
        .                                   Scalar::from_uint(discr.val, discr_layout.size)
        .                               }
        .                               None => {
        .                                   // On a type without actual discriminants, variant is 0.
        .                                   assert_eq!(index.as_u32(), 0);
        .                                   Scalar::from_uint(index.as_u32(), discr_layout.size)
        .                               }
        .                           };
        .                           return Ok((discr, index));
        .                       }
        2 ( 0.00%)              Variants::Multiple { tag, ref tag_encoding, tag_field, .. } => {
        .                           (tag, tag_encoding, tag_field)
        .                       }
        .                   };
        .           
        .                   // There are *three* layouts that come into play here:
        .                   // - The discriminant has a type for typechecking. This is `discr_layout`, and is used for
        .                   //   the `Scalar` we return.
        .                   // - The tag (encoded discriminant) has layout `tag_layout`. This is always an integer type,
        .                   //   and used to interpret the value we read from the tag field.
        .                   //   For the return value, a cast to `discr_layout` is performed.
        .                   // - The field storing the tag has a layout, which is very similar to `tag_layout` but
        .                   //   may be a pointer. This is `tag_val.layout`; we just use it for sanity checks.
        .           
        .                   // Get layout for tag.
        6 ( 0.00%)          let tag_layout = self.layout_of(tag_scalar_layout.value.to_int_ty(*self.tcx))?;
        .           
        .                   // Read tag and sanity-check `tag_layout`.
        7 ( 0.00%)          let tag_val = self.read_immediate(&self.operand_field(op, tag_field)?)?;
        2 ( 0.00%)          assert_eq!(tag_layout.size, tag_val.layout.size);
        8 ( 0.00%)          assert_eq!(tag_layout.abi.is_signed(), tag_val.layout.abi.is_signed());
        .                   let tag_val = tag_val.to_scalar()?;
        .                   trace!("tag value: {:?}", tag_val);
        .           
        .                   // Figure out which discriminant and variant this corresponds to.
        9 ( 0.00%)          Ok(match *tag_encoding {
        .                       TagEncoding::Direct => {
       20 ( 0.00%)                  let tag_bits = tag_val
        .                               .try_to_int()
        .                               .map_err(|dbg_val| err_ub!(InvalidTag(dbg_val)))?
        .                               .assert_bits(tag_layout.size);
        .                           // Cast bits from tag layout to discriminant layout.
        8 ( 0.00%)                  let discr_val = self.cast_from_scalar(tag_bits, tag_layout, discr_layout.ty);
        2 ( 0.00%)                  let discr_bits = discr_val.assert_bits(discr_layout.size);
        .                           // Convert discriminant to variant index, and catch invalid discriminants.
        5 ( 0.00%)                  let index = match *op.layout.ty.kind() {
        1 ( 0.00%)                      ty::Adt(adt, _) => {
       15 ( 0.00%)                          adt.discriminants(*self.tcx).find(|(_, var)| var.val == discr_bits)
        .                               }
        .                               ty::Generator(def_id, substs, _) => {
        .                                   let substs = substs.as_generator();
        .                                   substs
        .                                       .discriminants(def_id, *self.tcx)
        .                                       .find(|(_, var)| var.val == discr_bits)
        .                               }
        .                               _ => span_bug!(self.cur_span(), "tagged layout for non-adt non-generator"),
        .                           }
        .                           .ok_or_else(|| err_ub!(InvalidTag(Scalar::from_uint(tag_bits, tag_layout.size))))?;
        .                           // Return the cast value, and the index.
        4 ( 0.00%)                  (discr_val, index.0)
        .                       }
        .                       TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {
        .                           // Compute the variant this niche value/"tag" corresponds to. With niche layout,
        .                           // discriminant (encoded in niche/tag) and variant index are the same.
        .                           let variants_start = niche_variants.start().as_u32();
        .                           let variants_end = niche_variants.end().as_u32();
        .                           let variant = match tag_val.try_to_int() {
        .                               Err(dbg_val) => {
-- line 721 ----------------------------------------
-- line 766 ----------------------------------------
        .                               }
        .                           };
        .                           // Compute the size of the scalar we need to return.
        .                           // No need to cast, because the variant index directly serves as discriminant and is
        .                           // encoded in the tag.
        .                           (Scalar::from_uint(variant.as_u32(), discr_layout.size), variant)
        .                       }
        .                   })
        9 ( 0.00%)      }
        .           }

2,560,068 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 157 ----------------------------------------
         .               pub fn opt_fn_def_id(self) -> Option<DefId> {
         .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
         .               }
         .           }
         .           
         .           /// The "header" of an impl is everything outside the body: a Self type, a trait
         .           /// ref (in the case of a trait impl), and a set of predicates (from the
         .           /// bounds / where-clauses).
        32 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct ImplHeader<'tcx> {
         .               pub impl_def_id: DefId,
         .               pub self_ty: Ty<'tcx>,
         .               pub trait_ref: Option<TraitRef<'tcx>>,
         .               pub predicates: Vec<Predicate<'tcx>>,
         .           }
         .           
         .           #[derive(
         .               Copy,
         .               Clone,
    98,996 ( 0.00%)      PartialEq,
         .               Eq,
         .               Hash,
         .               TyEncodable,
    12,118 ( 0.00%)      TyDecodable,
         .               HashStable,
         .               Debug,
         .               TypeFoldable
         .           )]
         .           pub enum ImplPolarity {
         .               /// `impl Trait for Type`
         .               Positive,
         .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
         .                   match self {
         .                       Self::Positive => f.write_str("positive"),
         .                       Self::Negative => f.write_str("negative"),
         .                       Self::Reservation => f.write_str("reservation"),
         .                   }
         .               }
         .           }
         .           
   124,191 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
         .           pub enum Visibility {
         .               /// Visible everywhere (including in other crates).
         .               Public,
         .               /// Visible only in the given crate-local module.
         .               Restricted(DefId),
         .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
         .               Invisible,
         .           }
         .           
   104,339 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
         .           pub enum BoundConstness {
         .               /// `T: Trait`
         .               NotConst,
         .               /// `T: ~const Trait`
         .               ///
         .               /// Requires resolving to const only when we are in a const context.
         .               ConstIfConst,
         .           }
         .           
         .           impl BoundConstness {
         .               /// Reduce `self` and `constness` to two possible combined states instead of four.
    23,566 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
    35,349 ( 0.00%)          match (constness, self) {
         .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
         .                       (_, this) => {
    46,777 ( 0.00%)                  *this = BoundConstness::NotConst;
         .                           hir::Constness::NotConst
         .                       }
         .                   }
    11,783 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Display for BoundConstness {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
         .                       Self::NotConst => f.write_str("normal"),
         .                       Self::ConstIfConst => f.write_str("`~const`"),
         .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
         .               pub before_feature_tys: Ty<'tcx>,
         .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
         .               pub after_feature_tys: Ty<'tcx>,
         .           }
         .           
         .           pub trait DefIdTree: Copy {
         .               fn parent(self, id: DefId) -> Option<DefId>;
         .           
        21 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
         9 ( 0.00%)          if descendant.krate != ancestor.krate {
         .                       return false;
         .                   }
         .           
     3,472 ( 0.00%)          while descendant != ancestor {
     2,294 ( 0.00%)              match self.parent(descendant) {
         .                           Some(parent) => descendant = parent,
         .                           None => return false,
         .                       }
         .                   }
         .                   true
        24 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
     8,996 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
         .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
    13,494 ( 0.00%)      }
         .           }
         .           
         .           impl Visibility {
        74 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
       222 ( 0.00%)          match visibility.node {
         .                       hir::VisibilityKind::Public => Visibility::Public,
         .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
         .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
         .                           // If there is no resolution, `resolve` will have already reported an error, so
         .                           // assume that the visibility is public to avoid reporting more privacy errors.
         .                           Res::Err => Visibility::Public,
         .                           def => Visibility::Restricted(def.def_id()),
         .                       },
         .                       hir::VisibilityKind::Inherited => {
        72 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
         .                       }
         .                   }
        74 ( 0.00%)      }
         .           
         .               /// Returns `true` if an item with this visibility is accessible from the given block.
    21,285 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
    44,522 ( 0.00%)          let restriction = match self {
         .                       // Public items are visible everywhere.
         .                       Visibility::Public => return true,
         .                       // Private items from other crates are visible nowhere.
         .                       Visibility::Invisible => return false,
         .                       // Restricted items are visible in an arbitrary local module.
     2,296 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         6 ( 0.00%)          tree.is_descendant_of(module, restriction)
    21,285 ( 0.00%)      }
         .           
         .               /// Returns `true` if this visibility is at least as accessible as the given visibility
     1,953 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
     3,360 ( 0.00%)          let vis_restriction = match vis {
         .                       Visibility::Public => return self == Visibility::Public,
         .                       Visibility::Invisible => return true,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         .                   self.is_accessible_from(vis_restriction, tree)
     1,953 ( 0.00%)      }
         .           
         .               // Returns `true` if this item is visible anywhere in the local crate.
         .               pub fn is_visible_locally(self) -> bool {
         .                   match self {
         .                       Visibility::Public => true,
         .                       Visibility::Restricted(def_id) => def_id.is_local(),
         .                       Visibility::Invisible => false,
         .                   }
         .               }
         .           
         .               pub fn is_public(self) -> bool {
       616 ( 0.00%)          matches!(self, Visibility::Public)
       308 ( 0.00%)      }
         .           }
         .           
         .           /// The crate variances map is computed during typeck and contains the
         .           /// variance of every item in the local crate. You should not use it
         .           /// directly, because to do so will make your pass dependent on the
         .           /// HIR of every item in the local crate. Instead, use
         .           /// `tcx.variances_of()` to get the variance for a *particular*
         .           /// item.
-- line 365 ----------------------------------------
-- line 474 ----------------------------------------
         .           
         .                       // The other fields just provide fast access to information that is
         .                       // also contained in `kind`, so no need to hash them.
         .                       flags: _,
         .           
         .                       outer_exclusive_binder: _,
         .                   } = *self;
         .           
     5,670 ( 0.00%)          kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
         .           #[rustc_diagnostic_item = "Ty"]
         .           #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
         .           pub type Ty<'tcx> = &'tcx TyS<'tcx>;
         .           
         .           impl ty::EarlyBoundRegion {
-- line 490 ----------------------------------------
-- line 509 ----------------------------------------
         .           #[derive(Clone, Copy, Lift)]
         .           pub struct Predicate<'tcx> {
         .               inner: &'tcx PredicateInner<'tcx>,
         .           }
         .           
         .           impl<'tcx> PartialEq for Predicate<'tcx> {
         .               fn eq(&self, other: &Self) -> bool {
         .                   // `self.kind` is always interned.
    51,954 ( 0.00%)          ptr::eq(self.inner, other.inner)
    49,721 ( 0.00%)      }
         .           }
         .           
         .           impl Hash for Predicate<'_> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   (self.inner as *const PredicateInner<'_>).hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Predicate<'tcx> {}
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
         .               #[inline]
         .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
   579,954 ( 0.01%)          self.inner.kind
         .               }
         .           
         .               /// Flips the polarity of a Predicate.
         .               ///
         .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
         .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
         .                   let kind = self
         .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
         .                       flags: _,
         .                       outer_exclusive_binder: _,
         .                   } = self.inner;
         .           
         .                   kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
 4,050,637 ( 0.07%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 1,474,919 ( 0.03%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum PredicateKind<'tcx> {
         .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
         .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
         .               /// would be the type parameters.
         .               Trait(TraitPredicate<'tcx>),
         .           
         .               /// `where 'a: 'b`
         .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
         .               WellFormed(GenericArg<'tcx>),
         .           
         .               /// Trait must be object-safe.
         .               ObjectSafe(DefId),
         .           
         .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
         .               /// for some substitutions `...` and `T` being a closure type.
         .               /// Satisfied (or refuted) once we know the closure's kind.
       264 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
         .           
         .               /// `T1 <: T2`
         .               ///
         .               /// This obligation is created most often when we have two
         .               /// unresolved type variables and hence don't have enough
         .               /// information to process the subtyping obligation yet.
       104 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
         .           
         .               /// `T1` coerced to `T2`
         .               ///
         .               /// Like a subtyping obligation, this is created most often
         .               /// when we have two unresolved type variables and hence
         .               /// don't have enough information to process the coercion
         .               /// obligation yet. At the moment, we actually process coercions
         .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Performs a substitution suitable for going from a
         .               /// poly-trait-ref to supertraits that must hold if that
         .               /// poly-trait-ref holds. This is slightly different from a normal
         .               /// substitution in terms of what happens with bound regions. See
         .               /// lengthy comment below for details.
     1,440 ( 0.00%)      pub fn subst_supertrait(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: &ty::PolyTraitRef<'tcx>,
         .               ) -> Predicate<'tcx> {
         .                   // The interaction between HRTB and supertraits is not entirely
         .                   // obvious. Let me walk you (and myself) through an example.
         .                   //
         .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
         .                   //    ['x, 'b]
         .                   let bound_pred = self.kind();
         .                   let pred_bound_vars = bound_pred.bound_vars();
         .                   let trait_bound_vars = trait_ref.bound_vars();
         .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
         .                   let shifted_pred =
         .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
         .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
       160 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
         .                   // 3) ['x] + ['b] -> ['x, 'b]
         .                   let bound_vars =
         .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
     1,440 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
     1,120 ( 0.00%)      }
         .           }
         .           
     2,791 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    73,446 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitPredicate<'tcx> {
         .               pub trait_ref: TraitRef<'tcx>,
         .           
   374,199 ( 0.01%)      pub constness: BoundConstness,
         .           
   360,611 ( 0.01%)      pub polarity: ImplPolarity,
         .           }
         .           
         .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
         .           
         .           impl<'tcx> TraitPredicate<'tcx> {
   280,240 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
   245,282 ( 0.00%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
         .                       // remap without changing constness of this predicate.
         .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
        72 ( 0.00%)              param_env.remap_constness_with(self.constness)
         .                   } else {
    34,994 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
         .                   }
   210,180 ( 0.00%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   // this is different to `remap_constness` that callees want to print this predicate
         .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
         .                   // param_env is not const because we it is always satisfied in non-const contexts.
         .                   if let hir::Constness::NotConst = param_env.constness() {
         .                       self.constness = ty::BoundConstness::NotConst;
         .                   }
         .               }
         .           
         .               pub fn def_id(self) -> DefId {
   221,170 ( 0.00%)          self.trait_ref.def_id
   110,585 ( 0.00%)      }
         .           
    68,247 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
   204,741 ( 0.00%)          self.trait_ref.self_ty()
   136,494 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyTraitPredicate<'tcx> {
         .               pub fn def_id(self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
         .                   self.skip_binder().def_id()
    11,010 ( 0.00%)      }
         .           
         .               pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound(|trait_ref| trait_ref.self_ty())
         .               }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   *self = self.map_bound(|mut p| {
         .                       p.remap_constness_diag(param_env);
         .                       p
         .                   });
         .               }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   145,814 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
   123,335 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
         .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
         .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
         .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
         .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
         .           
         .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
         .           /// whether the `a` type is the type that we should label as "expected" when
         .           /// presenting user diagnostics.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
       231 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct SubtypePredicate<'tcx> {
       399 ( 0.00%)      pub a_is_expected: bool,
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
         .           
         .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable)]
         .           pub struct CoercePredicate<'tcx> {
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
         .           
    14,995 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
    12,498 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum Term<'tcx> {
        22 ( 0.00%)      Ty(Ty<'tcx>),
         .               Const(&'tcx Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
         .               fn from(ty: Ty<'tcx>) -> Self {
         .                   Term::Ty(ty)
       630 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
         .               fn from(c: &'tcx Const<'tcx>) -> Self {
         .                   Term::Const(c)
         .               }
         .           }
         .           
         .           impl<'tcx> Term<'tcx> {
         .               pub fn ty(&self) -> Option<Ty<'tcx>> {
     1,244 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
       622 ( 0.00%)      }
         .           }
         .           
         .           /// This kind of predicate has no *direct* correspondent in the
         .           /// syntax, but it roughly corresponds to the syntactic forms:
         .           ///
         .           /// 1. `T: TraitRef<..., Item = Type>`
         .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
         .           ///
         .           /// In particular, form #1 is "desugared" to the combination of a
         .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
         .           /// predicates. Form #2 is a broader form in that it also permits
         .           /// equality between arbitrary types. Processing an instance of
         .           /// Form #2 eventually yields one of these `ProjectionPredicate`
         .           /// instances to normalize the LHS.
        56 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
     2,444 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionPredicate<'tcx> {
         .               pub projection_ty: ProjectionTy<'tcx>,
     9,762 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
         .           
         .           impl<'tcx> PolyProjectionPredicate<'tcx> {
         .               /// Returns the `DefId` of the trait of the associated item being projected.
         .               #[inline]
         .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
        32 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
         .               }
         .           
         .               /// Get the [PolyTraitRef] required for this projection to be well formed.
         .               /// Note that for generic associated types the predicates of the associated
         .               /// type also need to be checked.
         .               #[inline]
         .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
         .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
         .                   // `self.0.trait_ref` is permitted to have escaping regions.
         .                   // This is because here `self` has a `Binder` and so does our
         .                   // return value, so we are preserving the number of binding
         .                   // levels.
        16 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
         .               }
         .           
         .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
         .                   self.map_bound(|predicate| predicate.term)
         .               }
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
         .               pub fn projection_def_id(&self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
       642 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
       321 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPolyTraitRef<'tcx> {
         .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
     1,143 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
     1,143 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
     1,143 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
         .               #[inline(always)]
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   tcx.mk_predicate(self)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
    32,207 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
   161,035 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
    64,414 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
         4 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         8 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
       126 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
       630 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
       252 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
     6,694 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
         .                   let predicate = self.kind();
    20,082 ( 0.00%)          match predicate.skip_binder() {
    13,240 ( 0.00%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
         .                       PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::TypeOutlives(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
       699 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
     6,694 ( 0.00%)      }
         .           
       689 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
         .                   let predicate = self.kind();
     1,378 ( 0.00%)          match predicate.skip_binder() {
         .                       PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
         .                       PredicateKind::Trait(..)
         .                       | PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
       689 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
       689 ( 0.00%)      }
         .           }
         .           
         .           /// Represents the bounds declared on a particular set of type
         .           /// parameters. Should eventually be generalized into a flag list of
         .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
         .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
         .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
         .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
         .           /// Example:
         .           ///
         .           ///     struct Foo<T, U: Bar<T>> { ... }
         .           ///
         .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
         .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
         .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
         .           /// [usize:Bar<isize>]]`.
    11,711 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct InstantiatedPredicates<'tcx> {
         .               pub predicates: Vec<Predicate<'tcx>>,
         .               pub spans: Vec<Span>,
         .           }
         .           
         .           impl<'tcx> InstantiatedPredicates<'tcx> {
    14,480 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
    40,468 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
    14,480 ( 0.00%)      }
         .           
         .               pub fn is_empty(&self) -> bool {
         .                   self.predicates.is_empty()
         4 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
         .           pub struct OpaqueTypeKey<'tcx> {
         .               pub def_id: DefId,
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
         .               /// ```
         .               /// for<'a> fn(&'a u32)
         .               /// ```
         .               ///
         .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
         .               /// new universe that extends `U` -- in this new universe, we can
         .               /// name the region `'a`, but that region was not nameable from
         .               /// `U` because it was not in scope there.
    17,855 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
         .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
    53,565 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` can name a name from `other` -- in other words,
         .               /// if the set of names in `self` is a superset of those in
         .               /// `other` (`self >= other`).
         .               pub fn can_name(self, other: UniverseIndex) -> bool {
    58,558 ( 0.00%)          self.private >= other.private
    29,279 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` cannot name some names from `other` -- in other
         .               /// words, if the set of names in `self` is a strict subset of
         .               /// those in `other` (`self < other`).
         .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
         6 ( 0.00%)          self.private < other.private
         3 ( 0.00%)      }
         .           }
         .           
         .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
         .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
         .           /// regions/types/consts within the same universe simply have an unknown relationship to one
         .           /// another.
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
         .           pub struct Placeholder<T> {
        39 ( 0.00%)      pub universe: UniverseIndex,
        27 ( 0.00%)      pub name: T,
         .           }
         .           
         .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
         .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
         .           /// trivial to compute.
         .           ///
         .           /// If we now want to use that constant in a place which potentionally needs its type
         .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
         .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
         .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
         .           /// to get the type of `did`.
     6,570 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
         .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
         .           #[derive(Hash, HashStable)]
         .           pub struct WithOptConstParam<T> {
     2,385 ( 0.00%)      pub did: T,
         .               /// The `DefId` of the corresponding generic parameter in case `did` is
         .               /// a const argument.
         .               ///
         .               /// Note that even if `did` is a const argument, this may still be `None`.
         .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
         .               /// to potentially update `param_did` in the case it is `None`.
    29,661 ( 0.00%)      pub const_param_did: Option<DefId>,
         .           }
         .           
         .           impl<T> WithOptConstParam<T> {
         .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
         .               #[inline(always)]
         .               pub fn unknown(did: T) -> WithOptConstParam<T> {
         .                   WithOptConstParam { did, const_param_did: None }
     8,541 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<LocalDefId> {
         .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
         .               /// `None` otherwise.
         .               #[inline(always)]
         .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
         .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
         .               }
         .           
         .               /// In case `self` is unknown but `self.did` is a const argument, this returns
         .               /// a `WithOptConstParam` with the correct `const_param_did`.
         .               #[inline(always)]
         .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
       516 ( 0.00%)          if self.const_param_did.is_none() {
       774 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
         .                           return Some(WithOptConstParam { did: self.did, const_param_did });
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           
         .               pub fn to_global(self) -> WithOptConstParam<DefId> {
         .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
         .               }
         .           
       136 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
       123 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
        34 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<DefId> {
       428 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
         .                   self.did
         .                       .as_local()
         .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
       428 ( 0.00%)      }
         .           
         .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
     2,609 ( 0.00%)          if let Some(param_did) = self.const_param_did {
     1,195 ( 0.00%)              if let Some(did) = self.did.as_local() {
         .                           return Some((did, param_did));
         .                       }
         .                   }
         .           
         .                   None
       612 ( 0.00%)      }
         .           
         .               pub fn is_local(self) -> bool {
         .                   self.did.is_local()
         .               }
         .           
       381 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
         .                   self.const_param_did.unwrap_or(self.did)
       381 ( 0.00%)      }
         .           }
         .           
         .           /// When type checking, we use the `ParamEnv` to track
         .           /// details about the set of where-clauses that are in scope at this
         .           /// particular point.
         .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
         .           pub struct ParamEnv<'tcx> {
         .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
         .               reveal: traits::Reveal,
         .               constness: hir::Constness,
         .           }
         .           
         .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
         .               const BITS: usize = 2;
         .               #[inline]
         .               fn into_usize(self) -> usize {
 2,128,341 ( 0.04%)          match self {
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn from_usize(ptr: usize) -> Self {
 5,101,170 ( 0.09%)          match ptr {
         .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
         .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
         .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
         .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
         .                       _ => std::hint::unreachable_unchecked(),
         .                   }
         .               }
         .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
         .               pub fn new(
         .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
         .                   reveal: Reveal,
         .                   constness: hir::Constness,
         .               ) -> Self {
         .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
         .               }
         .           
       104 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
         .                   self
       104 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
         .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
         .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    39,476 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
         .               }
         .           
         .               /// Returns a new parameter environment with the same clauses, but
         .               /// which "reveals" the true results of projections in all cases
         .               /// (even for associated types that are specializable). This is
         .               /// the desired behavior during codegen and certain other special
         .               /// contexts; normally though we want to use `Reveal::UserFacing`,
         .               /// which is the default.
         .               /// All opaque types in the caller_bounds of the `ParamEnv`
         .               /// will be normalized to their underlying types.
         .               /// See PR #65989 and issue #65918 for more details
16,577,312 ( 0.30%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
         .                   if self.packed.tag().reveal == traits::Reveal::All {
         .                       return self;
         .                   }
         .           
         .                   ParamEnv::new(
         .                       tcx.normalize_opaque_types(self.caller_bounds()),
         .                       Reveal::All,
         .                       self.constness(),
         .                   )
18,649,476 ( 0.33%)      }
         .           
         .               /// Returns this same environment but with no caller bounds.
         .               #[inline]
         .               pub fn without_caller_bounds(self) -> Self {
         .                   Self::new(List::empty(), self.reveal(), self.constness())
         .               }
         .           
         .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
         .               /// pair it with the empty environment. This improves caching and is generally
         .               /// invisible.
         .               ///
         .               /// N.B., we preserve the environment when type-checking because it
         .               /// is possible for the user to have wacky where-clauses like
         .               /// `where Box<u32>: Copy`, which are clearly never
         .               /// satisfiable. We generally want to behave as if they were true,
         .               /// although the surrounding function is never reachable.
    27,875 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
         .                   match self.reveal() {
         .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
         .           
         .                       Reveal::All => {
 2,094,183 ( 0.04%)                  if value.is_global() {
     1,640 ( 0.00%)                      ParamEnvAnd { param_env: self.without_caller_bounds(), value }
         .                           } else {
         .                               ParamEnvAnd { param_env: self, value }
         .                           }
         .                       }
         .                   }
    25,069 ( 0.00%)      }
         .           }
         .           
         .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
         .           // the constness of trait bounds is being propagated correctly.
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               #[inline]
         .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
       232 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
         .               }
         .               #[inline]
         .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
         .                   self.with_constness(BoundConstness::NotConst)
         .               }
         .           }
         .           
     1,472 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
         .           pub struct ParamEnvAnd<'tcx, T> {
    10,264 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
   187,771 ( 0.00%)      pub value: T,
         .           }
         .           
         .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
         .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
         .                   (self.param_env, self.value)
         .               }
         .           
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.param_env = self.param_env.without_const();
    12,739 ( 0.00%)          self
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
         .           #[derive(Copy, Clone, Debug, HashStable)]
         .           pub struct Destructor {
         .               /// The `DefId` of the destructor method
         .               pub did: DefId,
         .               /// The constness of the destructor method
         .               pub constness: hir::Constness,
         .           }
         .           
       358 ( 0.00%)  bitflags! {
       693 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
         .               pub struct VariantFlags: u32 {
         .                   const NO_VARIANT_FLAGS        = 0;
         .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
         .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
         .                   /// Indicates whether this variant was obtained as part of recovering from
         .                   /// a syntactic error. May be incomplete or bogus.
         .                   const IS_RECOVERED = 1 << 1;
         .               }
         .           }
         .           
         .           /// Definition of a variant -- a struct's fields or an enum variant.
   136,925 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct VariantDef {
         .               /// `DefId` that identifies the variant itself.
         .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
         .               pub def_id: DefId,
         .               /// `DefId` that identifies the variant's constructor.
         .               /// If this variant is a struct variant, then this is `None`.
         .               pub ctor_def_id: Option<DefId>,
         .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
         .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
         .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
         .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
         .               /// built-in trait), and we do not want to load attributes twice.
         .               ///
         .               /// If someone speeds up attribute loading to not be a performance concern, they can
         .               /// remove this hack and use the constructor `DefId` everywhere.
       456 ( 0.00%)      pub fn new(
         .                   name: Symbol,
         .                   variant_did: Option<DefId>,
         .                   ctor_def_id: Option<DefId>,
         .                   discr: VariantDiscr,
         .                   fields: Vec<FieldDef>,
         .                   ctor_kind: CtorKind,
         .                   adt_kind: AdtKind,
         .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
         .               ) -> Self {
         .                   debug!(
         .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
         .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
         .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
         .                   );
         .           
         .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
        57 ( 0.00%)          if is_field_list_non_exhaustive {
         .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
         .                   }
         .           
       171 ( 0.00%)          if recovered {
         .                       flags |= VariantFlags::IS_RECOVERED;
         .                   }
         .           
       513 ( 0.00%)          VariantDef {
         .                       def_id: variant_did.unwrap_or(parent_did),
         .                       ctor_def_id,
         .                       name,
         .                       discr,
       228 ( 0.00%)              fields,
         .                       ctor_kind,
         .                       flags,
         .                   }
       228 ( 0.00%)      }
         .           
         .               /// Is this field list non-exhaustive?
         .               #[inline]
         .               pub fn is_field_list_non_exhaustive(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
         .               }
         .           
         .               /// Was this variant obtained as part of recovering from a syntactic error?
         .               #[inline]
         .               pub fn is_recovered(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
         .               }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
       315 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
       180 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
       405 ( 0.00%)      }
         .           }
         .           
    72,499 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
         .           pub enum VariantDiscr {
         .               /// Explicit value for this variant, i.e., `X = 123`.
         .               /// The `DefId` corresponds to the embedded constant.
         .               Explicit(DefId),
         .           
         .               /// The previous variant's discriminant plus one.
         .               /// For efficiency reasons, the distance from the
         .               /// last `Explicit` discriminant is being stored,
         .               /// or `0` for the first variant, if it has none.
         .               Relative(u32),
         .           }
         .           
   181,936 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct FieldDef {
         .               pub did: DefId,
         .               pub name: Symbol,
         .               pub vis: Visibility,
         .           }
         .           
     1,589 ( 0.00%)  bitflags! {
         .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
         .               pub struct ReprFlags: u8 {
         .                   const IS_C               = 1 << 0;
         .                   const IS_SIMD            = 1 << 1;
         .                   const IS_TRANSPARENT     = 1 << 2;
         .                   // Internal only for now. If true, don't reorder fields.
         .                   const IS_LINEAR          = 1 << 3;
         .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
         .                   // Any of these flags being set prevent field reordering optimisation.
         .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
         .                                            | ReprFlags::IS_SIMD.bits
         .                                            | ReprFlags::IS_LINEAR.bits;
         .               }
         .           }
         .           
         .           /// Represents the repr options provided by the user,
   102,220 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
         .           pub struct ReprOptions {
         .               pub int: Option<attr::IntType>,
         .               pub align: Option<Align>,
         .               pub pack: Option<Align>,
         .               pub flags: ReprFlags,
         .               /// The seed to be used for randomizing a type's layout
         .               ///
         .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
         .               /// be the "most accurate" hash as it'd encompass the item and crate
         .               /// hash without loss, but it does pay the price of being larger.
         .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
         .               /// purposes (primarily `-Z randomize-layout`)
         .               pub field_shuffle_seed: u64,
         .           }
         .           
         .           impl ReprOptions {
       104 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
         .                   let mut flags = ReprFlags::empty();
         .                   let mut size = None;
         .                   let mut max_align: Option<Align> = None;
         .                   let mut min_pack: Option<Align> = None;
         .           
         .                   // Generate a deterministically-derived seed from the item's path hash
         .                   // to allow for cross-crate compilation to actually work
         .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
         .           
         .                   // If the user defined a custom seed for layout randomization, xor the item's
         .                   // path hash with the user defined seed, this will allowing determinism while
         .                   // still allowing users to further randomize layout generation for e.g. fuzzing
        24 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
         .                       field_shuffle_seed ^= user_seed;
         .                   }
         .           
        32 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
        45 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
         .                           flags.insert(match r {
         .                               attr::ReprC => ReprFlags::IS_C,
         .                               attr::ReprPacked(pack) => {
         .                                   let pack = Align::from_bytes(pack as u64).unwrap();
         .                                   min_pack = Some(if let Some(min_pack) = min_pack {
         .                                       min_pack.min(pack)
         .                                   } else {
         .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
         .                                   ReprFlags::empty()
         .                               }
         .                           });
         .                       }
         .                   }
         .           
         .                   // If `-Z randomize-layout` was enabled for the type definition then we can
         .                   // consider performing layout randomization
        64 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
         .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
         .                   }
         .           
         .                   // This is here instead of layout because the choice must make it into metadata.
        48 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
         .                       flags.insert(ReprFlags::IS_LINEAR);
         .                   }
         .           
        16 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
       224 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn simd(&self) -> bool {
         .                   self.flags.contains(ReprFlags::IS_SIMD)
         .               }
         .           
         .               #[inline]
         .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
         .               #[inline]
         .               pub fn hide_niche(&self) -> bool {
         .                   self.flags.contains(ReprFlags::HIDE_NICHE)
         .               }
         .           
         .               /// Returns the discriminant type, given these `repr` options.
         .               /// This must only be called on enums!
         .               pub fn discr_type(&self) -> attr::IntType {
     2,665 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
     1,849 ( 0.00%)      }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
         .               /// layout" optimizations, such as representing `Foo<&T>` as a
         .               /// single pointer.
         .               pub fn inhibit_enum_layout_opt(&self) -> bool {
       370 ( 0.00%)          self.c() || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
         .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
         .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
     1,362 ( 0.00%)          if let Some(pack) = self.pack {
         .                       if pack.bytes() == 1 {
         .                           return true;
         .                       }
         .                   }
         .           
     2,772 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
         .               /// was enabled for its declaration crate
         .               pub fn can_randomize_type_layout(&self) -> bool {
       669 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
         .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
         .               pub fn inhibit_union_abi_opt(&self) -> bool {
         3 ( 0.00%)          self.c()
         .               }
         .           }
         .           
         .           impl<'tcx> FieldDef {
         .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
         .               /// typically obtained via the second field of [`TyKind::Adt`].
    17,101 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
     4,886 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
    19,544 ( 0.00%)      }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
     2,555 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     1,460 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
     3,285 ( 0.00%)      }
         .           }
         .           
         .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
         .           
         .           #[derive(Debug, PartialEq, Eq)]
         .           pub enum ImplOverlapKind {
         .               /// These impls are always allowed to overlap.
         .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
         .               /// marker traits.
         .               /// 4. Neither of the impls can have any where-clauses.
         .               ///
         .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
         .               Issue33140,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
     6,376 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
     1,594 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
     6,376 ( 0.00%)      }
         .           
         .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
         .                   self.associated_items(id)
         .                       .in_definition_order()
         .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
         .               }
         .           
         .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
         .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
         .               }
         .           
       684 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
        76 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
         .                       Some(self.crate_name(def_id.krate))
         .                   } else {
       228 ( 0.00%)              let def_key = self.def_key(def_id);
       380 ( 0.00%)              match def_key.disambiguated_data.data {
         .                           // The name of a constructor is that of its parent.
         .                           rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
         .                               krate: def_id.krate,
         .                               index: def_key.parent.unwrap(),
         .                           }),
       152 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
         .                       }
         .                   }
       608 ( 0.00%)      }
         .           
         .               /// Look up the name of an item across crates. This does not look at HIR.
         .               ///
         .               /// When possible, this function should be used for cross-crate lookups over
         .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
         .               /// need to handle items without a name, or HIR items that will not be
         .               /// serialized cross-crate, or if you need the span of the item, use
         .               /// [`opt_item_name`] instead.
         .               ///
         .               /// [`opt_item_name`]: Self::opt_item_name
       532 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
         .                   // Look at cross-crate items first to avoid invalidating the incremental cache
         .                   // unless we have to.
        76 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
         .                       bug!("item_name: no name for {:?}", self.def_path(id));
         .                   })
       380 ( 0.00%)      }
         .           
         .               /// Look up the name and span of an item or [`Node`].
         .               ///
         .               /// See [`item_name`][Self::item_name] for more information.
         .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
         .                   // Look at the HIR first so the span will be correct if this is a local item.
         .                   self.item_name_from_hir(def_id)
         .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
         .               }
         .           
    51,830 ( 0.00%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
    20,732 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
         .                       Some(self.associated_item(def_id))
         .                   } else {
         .                       None
         .                   }
    46,647 ( 0.00%)      }
         .           
       379 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
         .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
       758 ( 0.00%)      }
         .           
         .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
         .                   variant
         .                       .fields
         .                       .iter()
         .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
         .               }
         .           
         .               /// Returns `true` if the impls are the same polarity and the trait either
         .               /// has no items or is annotated `#[marker]` and prevents item overrides.
     2,940 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
         .                   self,
         .                   def_id1: DefId,
         .                   def_id2: DefId,
         .               ) -> Option<ImplOverlapKind> {
         .                   // If either trait impl references an error, they're allowed to overlap,
         .                   // as one of them essentially doesn't exist.
         .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
       588 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
         .                   {
         .                       return Some(ImplOverlapKind::Permitted { marker: false });
         .                   }
         .           
     2,940 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
         .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
         .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
         .                           debug!(
         .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
         .                               def_id1, def_id2
         .                           );
         .                           return Some(ImplOverlapKind::Permitted { marker: false });
         .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
         .                           );
         .                           return None;
         .                       }
         .                       (ImplPolarity::Positive, ImplPolarity::Positive)
         .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
         .                   };
         .           
         .                   let is_marker_overlap = {
     2,940 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
       882 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
       882 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
     2,352 ( 0.00%)              };
     1,176 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
         .                   };
         .           
         .                   if is_marker_overlap {
         .                       debug!(
         .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
         .                           def_id1, def_id2
         .                       );
         .                       Some(ImplOverlapKind::Permitted { marker: true })
         .                   } else {
     1,176 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
         .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
         .                               if self_ty1 == self_ty2 {
         .                                   debug!(
         .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
         .                                       def_id1, def_id2
         .                                   );
         .                                   return Some(ImplOverlapKind::Issue33140);
         .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
         .                                   );
         .                               }
         .                           }
         .                       }
         .           
         .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
         .                       None
         .                   }
     2,352 ( 0.00%)      }
         .           
         .               /// Returns `ty::VariantDef` if `res` refers to a struct,
         .               /// or variant or their constructors, panics otherwise.
       112 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
       192 ( 0.00%)          match res {
         .                       Res::Def(DefKind::Variant, did) => {
         .                           let enum_did = self.parent(did).unwrap();
         .                           self.adt_def(enum_did).variant_with_id(did)
         .                       }
         .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
         .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
         .                           let variant_did = self.parent(variant_ctor_did).unwrap();
         .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
         .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
         .                       }
         .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
         .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
         .                           self.adt_def(struct_did).non_enum_variant()
         .                       }
         .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
         .                   }
       128 ( 0.00%)      }
         .           
         .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
     5,368 ( 0.00%)      pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
     1,342 ( 0.00%)          match instance {
     6,390 ( 0.00%)              ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
         .                           DefKind::Const
         .                           | DefKind::Static
         .                           | DefKind::AssocConst
         .                           | DefKind::Ctor(..)
         .                           | DefKind::AnonConst
         .                           | DefKind::InlineConst => self.mir_for_ctfe_opt_const_arg(def),
         .                           // If the caller wants `mir_for_ctfe` of a function they should not be using
         .                           // `instance_mir`, so we'll assume const fn also wants the optimized version.
         .                           _ => {
       639 ( 0.00%)                      assert_eq!(def.const_param_did, None);
         .                               self.optimized_mir(def.did)
         .                           }
         .                       },
         .                       ty::InstanceDef::VtableShim(..)
         .                       | ty::InstanceDef::ReifyShim(..)
         .                       | ty::InstanceDef::Intrinsic(..)
         .                       | ty::InstanceDef::FnPtrShim(..)
         .                       | ty::InstanceDef::Virtual(..)
         .                       | ty::InstanceDef::ClosureOnceShim { .. }
         .                       | ty::InstanceDef::DropGlue(..)
         .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
         .                   }
     6,039 ( 0.00%)      }
         .           
         .               /// Gets the attributes of a definition.
    54,150 ( 0.00%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
    16,245 ( 0.00%)          if let Some(did) = did.as_local() {
    14,652 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
         .                   } else {
         .                       self.item_attrs(did)
         .                   }
    43,320 ( 0.00%)      }
         .           
         .               /// Determines whether an item is annotated with an attribute.
     3,736 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
    13,149 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
         .               }
         .           
         .               /// Determines whether an item is annotated with `doc(hidden)`.
        56 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
         8 ( 0.00%)          self.get_attrs(did)
         .                       .iter()
         6 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
         .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
        64 ( 0.00%)      }
         .           
         .               /// Returns `true` if this is an `auto trait`.
     2,485 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
       355 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
     2,840 ( 0.00%)      }
         .           
         .               /// Returns layout of a generator. Layout might be unavailable if the
         .               /// generator is tainted by errors.
         .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
         .                   self.optimized_mir(def_id).generator_layout()
         .               }
         .           
         .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
         .               /// If it implements no trait, returns `None`.
     3,472 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
         .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
     4,464 ( 0.00%)      }
         .           
         .               /// If the given defid describes a method belonging to an impl, returns the
         .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
       471 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
     1,440 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
         .                       TraitContainer(_) => None,
         .                       ImplContainer(def_id) => Some(def_id),
         .                   })
       942 ( 0.00%)      }
         .           
         .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
         .               /// with the name of the crate containing the impl.
         .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
         .                   if let Some(impl_did) = impl_did.as_local() {
         .                       Ok(self.def_span(impl_did))
         .                   } else {
         .                       Err(self.crate_name(impl_did.krate))
         .                   }
         .               }
         .           
         .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
         .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
         .               /// definition's parent/scope to perform comparison.
     2,712 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
         .                   // We could use `Ident::eq` here, but we deliberately don't. The name
         .                   // comparison fails frequently, and we want to avoid the expensive
         .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
       339 ( 0.00%)          use_name.name == def_name.name
       993 ( 0.00%)              && use_name
         .                           .span
         .                           .ctxt()
         .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
     2,712 ( 0.00%)      }
         .           
       747 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
       166 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
       166 ( 0.00%)          ident
       664 ( 0.00%)      }
         .           
     3,258 ( 0.00%)      pub fn adjust_ident_and_get_scope(
         .                   self,
         .                   mut ident: Ident,
         .                   scope: DefId,
         .                   block: hir::HirId,
         .               ) -> (Ident, DefId) {
       362 ( 0.00%)          let scope = ident
         .                       .span
         .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
         .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
     1,448 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
     2,172 ( 0.00%)          (ident, scope)
     3,258 ( 0.00%)      }
         .           
        42 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
         .                   self.object_safety_violations(key).is_empty()
        48 ( 0.00%)      }
         .           }
         .           
         .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
     1,938 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
     1,938 ( 0.00%)      let def_id = def_id.as_local()?;
     1,044 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
       404 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
         .                       return match opaque_ty.origin {
         .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
         .                               Some(parent)
         .                           }
         .                           hir::OpaqueTyOrigin::TyAlias => None,
         .                       };
         .                   }
         .               }
         .               None
     2,584 ( 0.00%)  }
         .           
         .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
         .               match ity {
         .                   ast::IntTy::Isize => IntTy::Isize,
         .                   ast::IntTy::I8 => IntTy::I8,
         .                   ast::IntTy::I16 => IntTy::I16,
         .                   ast::IntTy::I32 => IntTy::I32,
         .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
         .           
         .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
         .               match fty {
         .                   ast::FloatTy::F32 => FloatTy::F32,
         .                   ast::FloatTy::F64 => FloatTy::F64,
         .               }
         .           }
         .           
       198 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
         .               match ity {
         .                   IntTy::Isize => ast::IntTy::Isize,
         .                   IntTy::I8 => ast::IntTy::I8,
         .                   IntTy::I16 => ast::IntTy::I16,
         .                   IntTy::I32 => ast::IntTy::I32,
         .                   IntTy::I64 => ast::IntTy::I64,
         .                   IntTy::I128 => ast::IntTy::I128,
         .               }
       198 ( 0.00%)  }
         .           
         .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
         .               match uty {
         .                   UintTy::Usize => ast::UintTy::Usize,
         .                   UintTy::U8 => ast::UintTy::U8,
         .                   UintTy::U16 => ast::UintTy::U16,
         .                   UintTy::U32 => ast::UintTy::U32,
         .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
         .               closure::provide(providers);
         .               context::provide(providers);
         .               erase_regions::provide(providers);
         .               layout::provide(providers);
         .               util::provide(providers);
         .               print::provide(providers);
         .               super::util::bug::provide(providers);
         .               super::middle::provide(providers);
         8 ( 0.00%)      *providers = ty::query::Providers {
         .                   trait_impls_of: trait_def::trait_impls_of_provider,
         .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
         .                   const_param_default: consts::const_param_default,
         .                   vtable_allocation: vtable::vtable_allocation_provider,
         .                   ..*providers
         .               };
         1 ( 0.00%)  }
         .           
         .           /// A map for the local crate mapping each type to a vector of its
         .           /// inherent impls. This is not meant to be used outside of coherence;
         .           /// rather, you should request the vector for a specific type via
         .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
         .           /// (constructing this map requires touching the entire crate).
         .           #[derive(Clone, Debug, Default, HashStable)]
         .           pub struct CrateInherentImpls {
         .               pub inherent_impls: LocalDefIdMap<Vec<DefId>>,
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
         .           pub struct SymbolName<'tcx> {
         .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
     3,693 ( 0.00%)      pub name: &'tcx str,
         .           }
         .           
         .           impl<'tcx> SymbolName<'tcx> {
     1,560 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
         .                   SymbolName {
         .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
         .                   }
     2,080 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
       132 ( 0.00%)      fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
         .           }
         .           
         .           impl<'tcx> fmt::Debug for SymbolName<'tcx> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
-- line 2312 ----------------------------------------

 2,412,644 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 141 ----------------------------------------
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
 1,305,247 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
     6,863 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
 1,039,288 ( 0.02%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    16,366 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn last(&self) -> Option<&T> {
 1,477,447 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 1,585,832 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
         .               pub const fn as_ptr(&self) -> *const T {
 1,414,965 ( 0.03%)          self as *const [T] as *const T
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        12 ( 0.00%)          self as *mut [T] as *mut T
         .               }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 556 ----------------------------------------
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "slice_ptr_range", since = "1.48.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr_range(&mut self) -> Range<*mut T> {
         .                   let start = self.as_mut_ptr();
         .                   // SAFETY: See as_ptr_range() above for why `add` here is safe.
         .                   let end = unsafe { start.add(self.len()) };
        12 ( 0.00%)          start..end
         .               }
         .           
         .               /// Swaps two elements in the slice.
         .               ///
         .               /// # Arguments
         .               ///
         .               /// * a - The index of the first element
         .               /// * b - The index of the second element
-- line 572 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
    81,126 ( 0.00%)          let _ = &self[a];
    87,646 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 644 ----------------------------------------
         .               /// ```
         .               /// let mut v = [1, 2, 3];
         .               /// v.reverse();
         .               /// assert!(v == [3, 2, 1]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn reverse(&mut self) {
        12 ( 0.00%)          let half_len = self.len() / 2;
         .                   let Range { start, end } = self.as_mut_ptr_range();
         .           
         .                   // These slices will skip the middle item for an odd length,
         .                   // since that one doesn't need to move.
         .                   let (front_half, back_half) =
         .                       // SAFETY: Both are subparts of the original slice, so the memory
         .                       // range is valid, and they don't overlap because they're each only
         .                       // half (or less) of the original slice.
-- line 660 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
     3,221 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       336 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
    72,228 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
     8,548 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
    27,114 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
         .               }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let n = needle.len();
     5,004 ( 0.00%)          self.len() >= n && needle == &self[..n]
         .               }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let (m, n) = (self.len(), needle.len());
     6,708 ( 0.00%)          m >= n && needle == &self[m - n..]
         .               }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
11,629,584 ( 0.21%)          while left < right {
15,057,686 ( 0.27%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
   664,387 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 4,647,473 ( 0.08%)              if cmp == Less {
 7,388,468 ( 0.13%)                  left = mid + 1;
 2,062,749 ( 0.04%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
13,983,165 ( 0.25%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
   147,270 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
         .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
         .                   let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
     6,866 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
     6,866 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
     6,866 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------

 8,361,948 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sorted_map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           /// `SortedMap` is a data structure with similar characteristics as BTreeMap but
        .           /// slightly different trade-offs: lookup, insertion, and removal are *O*(log(*n*))
        .           /// and elements can be iterated in order cheaply.
        .           ///
        .           /// `SortedMap` can be faster than a `BTreeMap` for small sizes (<50) since it
        .           /// stores data in a more compact way. It also supports accessing contiguous
        .           /// ranges of elements as a slice, and slices of already sorted elements can be
        .           /// inserted efficiently.
       30 ( 0.00%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]
        .           pub struct SortedMap<K, V> {
        .               data: Vec<(K, V)>,
        .           }
        .           
        .           impl<K, V> Default for SortedMap<K, V> {
        .               #[inline]
        .               fn default() -> SortedMap<K, V> {
        .                   SortedMap { data: Vec::new() }
        .               }
        .           }
        .           
        .           impl<K, V> SortedMap<K, V> {
        .               #[inline]
        .               pub const fn new() -> SortedMap<K, V> {
        1 ( 0.00%)          SortedMap { data: Vec::new() }
        .               }
        .           }
        .           
        .           impl<K: Ord, V> SortedMap<K, V> {
        .               /// Construct a `SortedMap` from a presorted set of elements. This is faster
        .               /// than creating an empty map and then inserting the elements individually.
        .               ///
        .               /// It is up to the caller to make sure that the elements are sorted by key
-- line 43 ----------------------------------------
-- line 45 ----------------------------------------
        .               #[inline]
        .               pub fn from_presorted_elements(elements: Vec<(K, V)>) -> SortedMap<K, V> {
        .                   debug_assert!(elements.array_windows().all(|[fst, snd]| fst.0 < snd.0));
        .           
        .                   SortedMap { data: elements }
        .               }
        .           
        .               #[inline]
   69,545 ( 0.00%)      pub fn insert(&mut self, key: K, mut value: V) -> Option<V> {
        .                   match self.lookup_index_for(&key) {
        .                       Ok(index) => {
        .                           let slot = unsafe { self.data.get_unchecked_mut(index) };
        .                           mem::swap(&mut slot.1, &mut value);
        .                           Some(value)
        .                       }
        .                       Err(index) => {
        .                           self.data.insert(index, (key, value));
        .                           None
        .                       }
        .                   }
   55,544 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn remove(&mut self, key: &K) -> Option<V> {
        .                   match self.lookup_index_for(key) {
        .                       Ok(index) => Some(self.data.remove(index).1),
        .                       Err(_) => None,
        .                   }
        .               }
-- line 73 ----------------------------------------
-- line 116 ----------------------------------------
        .               /// Iterate over values, sorted by key
        .               #[inline]
        .               pub fn values(&self) -> impl Iterator<Item = &V> + ExactSizeIterator + DoubleEndedIterator {
        .                   self.data.iter().map(|&(_, ref v)| v)
        .               }
        .           
        .               #[inline]
        .               pub fn len(&self) -> usize {
    6,890 ( 0.00%)          self.data.len()
        .               }
        .           
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
        .                   self.len() == 0
        .               }
        .           
        .               #[inline]
        .               pub fn range<R>(&self, range: R) -> &[(K, V)]
        .               where
        .                   R: RangeBounds<K>,
        .               {
  577,169 ( 0.01%)          let (start, end) = self.range_slice_indices(range);
        .                   &self.data[start..end]
        .               }
        .           
        .               #[inline]
        .               pub fn remove_range<R>(&mut self, range: R)
        .               where
        .                   R: RangeBounds<K>,
        .               {
-- line 145 ----------------------------------------
-- line 160 ----------------------------------------
        .               /// Inserts a presorted range of elements into the map. If the range can be
        .               /// inserted as a whole in between to existing elements of the map, this
        .               /// will be faster than inserting the elements individually.
        .               ///
        .               /// It is up to the caller to make sure that the elements are sorted by key
        .               /// and that there are no duplicates.
        .               #[inline]
        .               pub fn insert_presorted(&mut self, mut elements: Vec<(K, V)>) {
    6,755 ( 0.00%)          if elements.is_empty() {
        .                       return;
        .                   }
        .           
        .                   debug_assert!(elements.array_windows().all(|[fst, snd]| fst.0 < snd.0));
        .           
        .                   let start_index = self.lookup_index_for(&elements[0].0);
        .           
        .                   let drain = match start_index {
        .                       Ok(index) => {
        .                           let mut drain = elements.drain(..);
        .                           self.data[index] = drain.next().unwrap();
        .                           drain
        .                       }
        .                       Err(index) => {
   13,502 ( 0.00%)                  if index == self.data.len() || elements.last().unwrap().0 < self.data[index].0 {
        .                               // We can copy the whole range without having to mix with
        .                               // existing elements.
        .                               self.data.splice(index..index, elements.drain(..));
        .                               return;
        .                           }
        .           
        .                           let mut drain = elements.drain(..);
        .                           self.data.insert(index, drain.next().unwrap());
-- line 191 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .               /// Looks up the key in `self.data` via `slice::binary_search()`.
        .               #[inline(always)]
        .               fn lookup_index_for<Q>(&self, key: &Q) -> Result<usize, usize>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Ord + ?Sized,
        .               {
7,041,703 ( 0.13%)          self.data.binary_search_by(|&(ref x, _)| x.borrow().cmp(key))
        .               }
        .           
        .               #[inline]
  285,207 ( 0.01%)      fn range_slice_indices<R>(&self, range: R) -> (usize, usize)
        .               where
        .                   R: RangeBounds<K>,
        .               {
        .                   let start = match range.start_bound() {
        .                       Bound::Included(ref k) => match self.lookup_index_for(k) {
        .                           Ok(index) | Err(index) => index,
        .                       },
        .                       Bound::Excluded(ref k) => match self.lookup_index_for(k) {
-- line 221 ----------------------------------------
-- line 228 ----------------------------------------
        .                   let end = match range.end_bound() {
        .                       Bound::Included(ref k) => match self.lookup_index_for(k) {
        .                           Ok(index) => index + 1,
        .                           Err(index) => index,
        .                       },
        .                       Bound::Excluded(ref k) => match self.lookup_index_for(k) {
        .                           Ok(index) | Err(index) => index,
        .                       },
      744 ( 0.00%)              Bound::Unbounded => self.data.len(),
        .                   };
        .           
        .                   (start, end)
  855,621 ( 0.02%)      }
        .           
        .               #[inline]
        .               pub fn contains_key<Q>(&self, key: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Ord + ?Sized,
        .               {
        .                   self.get(key).is_some()
-- line 248 ----------------------------------------
-- line 276 ----------------------------------------
        .               Q: Ord + ?Sized,
        .           {
        .               fn index_mut(&mut self, key: &Q) -> &mut Self::Output {
        .                   self.get_mut(key).expect("no entry found for key")
        .               }
        .           }
        .           
        .           impl<K: Ord, V> FromIterator<(K, V)> for SortedMap<K, V> {
    1,736 ( 0.00%)      fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> Self {
        .                   let mut data: Vec<(K, V)> = iter.into_iter().collect();
        .           
        .                   data.sort_unstable_by(|&(ref k1, _), &(ref k2, _)| k1.cmp(k2));
        .                   data.dedup_by(|&mut (ref k1, _), &mut (ref k2, _)| k1.cmp(k2) == Ordering::Equal);
        .           
      992 ( 0.00%)          SortedMap { data }
    1,984 ( 0.00%)      }
        .           }
        .           
        .           impl<K: HashStable<CTX>, V: HashStable<CTX>, CTX> HashStable<CTX> for SortedMap<K, V> {
        .               #[inline]
        .               fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   self.data.hash_stable(ctx, hasher);
        .               }
        .           }
-- line 299 ----------------------------------------

  272,333 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sorted_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs
--------------------------------------------------------------------------------
Ir                 

-- line 65 ----------------------------------------
        .           use std::cell::Cell;
        .           use std::cmp::{self, max, min, Ordering};
        .           use std::fmt;
        .           use std::iter::{once, IntoIterator};
        .           use std::ops::RangeInclusive;
        .           
        .           /// Recursively expand this pattern into its subpatterns. Only useful for or-patterns.
        .           fn expand_or_pat<'p, 'tcx>(pat: &'p Pat<'tcx>) -> Vec<&'p Pat<'tcx>> {
    2,704 ( 0.00%)      fn expand<'p, 'tcx>(pat: &'p Pat<'tcx>, vec: &mut Vec<&'p Pat<'tcx>>) {
    1,352 ( 0.00%)          if let PatKind::Or { pats } = pat.kind.as_ref() {
        .                       for pat in pats {
    2,025 ( 0.00%)                  expand(pat, vec);
        .                       }
        .                   } else {
        .                       vec.push(pat)
        .                   }
    2,704 ( 0.00%)      }
        .           
        .               let mut pats = Vec::new();
        2 ( 0.00%)      expand(pat, &mut pats);
        .               pats
        .           }
        .           
        .           /// An inclusive interval, used for precise integer exhaustiveness checking.
        .           /// `IntRange`s always store a contiguous range. This means that values are
        .           /// encoded such that `0` encodes the minimum value for the integer,
        .           /// regardless of the signedness.
        .           /// For example, the pattern `-128..=127i8` is encoded as `0..=255`.
        .           /// This makes comparisons and arithmetic on interval endpoints much more
        .           /// straightforward. See `signed_bias` for details.
        .           ///
        .           /// `IntRange` is never used to encode an empty range or a "range" that wraps
        .           /// around the (offset) space: i.e., `range.lo <= range.hi`.
        .           #[derive(Clone, PartialEq, Eq)]
        .           pub(super) struct IntRange {
  712,391 ( 0.01%)      range: RangeInclusive<u128>,
        .               /// Keeps the bias used for encoding the range. It depends on the type of the range and
        .               /// possibly the pointer size of the current architecture. The algorithm ensures we never
        .               /// compare `IntRange`s with different types/architectures.
   22,605 ( 0.00%)      bias: u128,
        .           }
        .           
        .           impl IntRange {
        .               #[inline]
        .               fn is_integral(ty: Ty<'_>) -> bool {
    4,121 ( 0.00%)          matches!(ty.kind(), ty::Char | ty::Int(_) | ty::Uint(_) | ty::Bool)
        .               }
        .           
        .               fn is_singleton(&self) -> bool {
   13,472 ( 0.00%)          self.range.start() == self.range.end()
        .               }
        .           
        .               fn boundaries(&self) -> (u128, u128) {
1,702,772 ( 0.03%)          (*self.range.start(), *self.range.end())
        .               }
        .           
        .               #[inline]
        .               fn integral_size_and_signed_bias(tcx: TyCtxt<'_>, ty: Ty<'_>) -> Option<(Size, u128)> {
    2,403 ( 0.00%)          match *ty.kind() {
        .                       ty::Bool => Some((Size::from_bytes(1), 0)),
        .                       ty::Char => Some((Size::from_bytes(4), 0)),
        .                       ty::Int(ity) => {
        .                           let size = Integer::from_int_ty(&tcx, ity).size();
        .                           Some((size, 1u128 << (size.bits() as u128 - 1)))
        .                       }
        .                       ty::Uint(uty) => Some((Integer::from_uint_ty(&tcx, uty).size(), 0)),
        .                       _ => None,
-- line 131 ----------------------------------------
-- line 133 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn from_const<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   value: &Const<'tcx>,
        .               ) -> Option<IntRange> {
      801 ( 0.00%)          if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, value.ty) {
        .                       let ty = value.ty;
        .                       let val = (|| {
    6,408 ( 0.00%)                  if let ty::ConstKind::Value(ConstValue::Scalar(scalar)) = value.val {
        .                               // For this specific pattern we can skip a lot of effort and go
        .                               // straight to the result, after doing a bit of checking. (We
        .                               // could remove this branch and just fall through, which
        .                               // is more general but much slower.)
        .                               if let Ok(bits) = scalar.to_bits_or_ptr_internal(target_size) {
        .                                   return Some(bits);
        .                               }
        .                           }
        .                           // This is a more general form of the previous case.
        .                           value.try_eval_bits(tcx, param_env, ty)
        .                       })()?;
   10,413 ( 0.00%)              let val = val ^ bias;
        .                       Some(IntRange { range: val..=val, bias })
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               #[inline]
   10,801 ( 0.00%)      fn from_range<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   lo: u128,
        .                   hi: u128,
        .                   ty: Ty<'tcx>,
        .                   end: &RangeEnd,
        .               ) -> Option<IntRange> {
    1,543 ( 0.00%)          if Self::is_integral(ty) {
        .                       // Perform a shift if the underlying types are signed,
        .                       // which makes the interval arithmetic simpler.
        .                       let bias = IntRange::signed_bias(tcx, ty);
   15,430 ( 0.00%)              let (lo, hi) = (lo ^ bias, hi ^ bias);
        .                       let offset = (*end == RangeEnd::Excluded) as u128;
   15,430 ( 0.00%)              if lo > hi || (lo == hi && *end == RangeEnd::Excluded) {
        .                           // This should have been caught earlier by E0030.
        .                           bug!("malformed range pattern: {}..={}", lo, (hi - offset));
        .                       }
   15,430 ( 0.00%)              Some(IntRange { range: lo..=(hi - offset), bias })
        .                   } else {
        .                       None
        .                   }
    9,258 ( 0.00%)      }
        .           
        .               // The return value of `signed_bias` should be XORed with an endpoint to encode/decode it.
        .               fn signed_bias(tcx: TyCtxt<'_>, ty: Ty<'_>) -> u128 {
    3,086 ( 0.00%)          match *ty.kind() {
        .                       ty::Int(ity) => {
        .                           let bits = Integer::from_int_ty(&tcx, ity).size().bits() as u128;
        .                           1u128 << (bits - 1)
        .                       }
        .                       _ => 0,
        .                   }
        .               }
        .           
        .               fn is_subrange(&self, other: &Self) -> bool {
        .                   other.range.start() <= self.range.start() && self.range.end() <= other.range.end()
        .               }
        .           
        .               fn intersection(&self, other: &Self) -> Option<Self> {
        .                   let (lo, hi) = self.boundaries();
        .                   let (other_lo, other_hi) = other.boundaries();
3,538,556 ( 0.06%)          if lo <= other_hi && other_lo <= hi {
    4,064 ( 0.00%)              Some(IntRange { range: max(lo, other_lo)..=min(hi, other_hi), bias: self.bias })
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn suspicious_intersection(&self, other: &Self) -> bool {
        .                   // `false` in the following cases:
        .                   // 1     ----      // 1  ----------   // 1 ----        // 1       ----
-- line 214 ----------------------------------------
-- line 218 ----------------------------------------
        .                   // 1 ---------       // 1     ---------
        .                   // 2     ----------  // 2 ----------
        .                   //
        .                   // `true` in the following cases:
        .                   // 1 -------          // 1       -------
        .                   // 2       --------   // 2 -------
        .                   let (lo, hi) = self.boundaries();
        .                   let (other_lo, other_hi) = other.boundaries();
6,453,502 ( 0.12%)          (lo == other_hi || hi == other_lo) && !self.is_singleton() && !other.is_singleton()
        .               }
        .           
        .               /// Only used for displaying the range properly.
        .               fn to_pat<'tcx>(&self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Pat<'tcx> {
        .                   let (lo, hi) = self.boundaries();
        .           
        .                   let bias = self.bias;
        .                   let (lo, hi) = (lo ^ bias, hi ^ bias);
-- line 234 ----------------------------------------
-- line 242 ----------------------------------------
        .                   } else {
        .                       PatKind::Range(PatRange { lo: lo_const, hi: hi_const, end: RangeEnd::Included })
        .                   };
        .           
        .                   Pat { ty, span: DUMMY_SP, kind: Box::new(kind) }
        .               }
        .           
        .               /// Lint on likely incorrect range patterns (#63987)
    8,192 ( 0.00%)      pub(super) fn lint_overlapping_range_endpoints<'a, 'p: 'a, 'tcx: 'a>(
        .                   &self,
        .                   pcx: PatCtxt<'_, 'p, 'tcx>,
        .                   pats: impl Iterator<Item = &'a DeconstructedPat<'p, 'tcx>>,
        .                   column_count: usize,
        .                   hir_id: HirId,
        .               ) {
    4,542 ( 0.00%)          if self.is_singleton() {
        .                       return;
        .                   }
        .           
        .                   if column_count != 1 {
        .                       // FIXME: for now, only check for overlapping ranges on simple range
        .                       // patterns. Otherwise with the current logic the following is detected
        .                       // as overlapping:
        .                       // ```
-- line 265 ----------------------------------------
-- line 268 ----------------------------------------
        .                       //   (125 ..= 255, true) => {}
        .                       //   _ => {}
        .                       // }
        .                       // ```
        .                       return;
        .                   }
        .           
        .                   let overlaps: Vec<_> = pats
  339,658 ( 0.01%)              .filter_map(|pat| Some((pat.ctor().as_int_range()?, pat.span())))
  679,316 ( 0.01%)              .filter(|(range, _)| self.suspicious_intersection(range))
        .                       .map(|(range, span)| (self.intersection(&range).unwrap(), span))
        .                       .collect();
        .           
    1,240 ( 0.00%)          if !overlaps.is_empty() {
        .                       pcx.cx.tcx.struct_span_lint_hir(
        .                           lint::builtin::OVERLAPPING_RANGE_ENDPOINTS,
        .                           hir_id,
        .                           pcx.span,
        .                           |lint| {
        .                               let mut err = lint.build("multiple patterns overlap on their endpoints");
        .                               for (int_range, span) in overlaps {
        .                                   err.span_label(
-- line 289 ----------------------------------------
-- line 295 ----------------------------------------
        .                                   );
        .                               }
        .                               err.span_label(pcx.span, "... with this range");
        .                               err.note("you likely meant to write mutually exclusive ranges");
        .                               err.emit();
        .                           },
        .                       );
        .                   }
   10,240 ( 0.00%)      }
        .           
        .               /// See `Constructor::is_covered_by`
        .               fn is_covered_by(&self, other: &Self) -> bool {
1,007,202 ( 0.02%)          if self.intersection(other).is_some() {
        .                       // Constructor splitting should ensure that all intersections we encounter are actually
        .                       // inclusions.
       24 ( 0.00%)              assert!(self.is_subrange(other));
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           }
        .           
        .           /// Note: this is often not what we want: e.g. `false` is converted into the range `0..=0` and
-- line 318 ----------------------------------------
-- line 325 ----------------------------------------
        .                   write!(f, "{}", lo)?;
        .                   write!(f, "{}", RangeEnd::Included)?;
        .                   write!(f, "{}", hi)
        .               }
        .           }
        .           
        .           /// Represents a border between 2 integers. Because the intervals spanning borders must be able to
        .           /// cover every integer, we need to be able to represent 2^128 + 1 such borders.
  240,419 ( 0.00%)  #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
        .           enum IntBorder {
        .               JustBefore(u128),
        .               AfterMax,
        .           }
        .           
        .           /// A range of integers that is partitioned into disjoint subranges. This does constructor
        .           /// splitting for integer ranges as explained at the top of the file.
        .           ///
-- line 341 ----------------------------------------
-- line 359 ----------------------------------------
        .               range: IntRange,
        .               /// The borders of ranges we have seen. They are all contained within `range`. This is kept
        .               /// sorted.
        .               borders: Vec<IntBorder>,
        .           }
        .           
        .           impl SplitIntRange {
        .               fn new(range: IntRange) -> Self {
   12,344 ( 0.00%)          SplitIntRange { range, borders: Vec::new() }
        .               }
        .           
        .               /// Internal use
        .               fn to_borders(r: IntRange) -> [IntBorder; 2] {
        .                   use IntBorder::*;
        .                   let (lo, hi) = r.boundaries();
        .                   let lo = JustBefore(lo);
        .                   let hi = match hi.checked_add(1) {
-- line 375 ----------------------------------------
-- line 400 ----------------------------------------
        .                   let mut prev_border = self_range[0];
        .                   self.borders
        .                       .iter()
        .                       .copied()
        .                       // End with the end of the range.
        .                       .chain(once(self_range[1]))
        .                       // List pairs of adjacent borders.
        .                       .map(move |border| {
   37,420 ( 0.00%)                  let ret = (prev_border, border);
   22,452 ( 0.00%)                  prev_border = border;
        .                           ret
        .                       })
        .                       // Skip duplicates.
        .                       .filter(|(prev_border, border)| prev_border != border)
        .                       // Finally, convert to ranges.
        .                       .map(move |(prev_border, border)| {
   54,162 ( 0.00%)                  let range = match (prev_border, border) {
   54,162 ( 0.00%)                      (JustBefore(n), JustBefore(m)) if n < m => n..=(m - 1),
        .                               (JustBefore(n), AfterMax) => n..=u128::MAX,
        .                               _ => unreachable!(), // Ruled out by the sorting and filtering we did
        .                           };
   25,538 ( 0.00%)                  IntRange { range, bias: self.range.bias }
        .                       })
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
        .           enum SliceKind {
        .               /// Patterns of length `n` (`[x, y]`).
        .               FixedLen(usize),
-- line 429 ----------------------------------------
-- line 615 ----------------------------------------
        .           
        .           /// A value can be decomposed into a constructor applied to some fields. This struct represents
        .           /// the constructor. See also `Fields`.
        .           ///
        .           /// `pat_constructor` retrieves the constructor corresponding to a pattern.
        .           /// `specialize_constructor` returns the list of fields corresponding to a pattern, given a
        .           /// constructor. `Constructor::apply` reconstructs the pattern from a pair of `Constructor` and
        .           /// `Fields`.
   25,263 ( 0.00%)  #[derive(Clone, Debug, PartialEq)]
        .           pub(super) enum Constructor<'tcx> {
        .               /// The constructor for patterns that have a single constructor, like tuples, struct patterns
        .               /// and fixed-length arrays.
        .               Single,
        .               /// Enum variants.
      951 ( 0.00%)      Variant(VariantIdx),
        .               /// Ranges of integer literal values (`2`, `2..=5` or `2..5`).
        .               IntRange(IntRange),
        .               /// Ranges of floating-point literal values (`2.0..=5.2`).
        .               FloatRange(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>, RangeEnd),
        .               /// String literals. Strings are not quite the same as `&[u8]` so we treat them separately.
        .               Str(&'tcx ty::Const<'tcx>),
        .               /// Array and slice patterns.
        .               Slice(Slice),
-- line 637 ----------------------------------------
-- line 649 ----------------------------------------
        .               /// Wildcard pattern.
        .               Wildcard,
        .               /// Or-pattern.
        .               Or,
        .           }
        .           
        .           impl<'tcx> Constructor<'tcx> {
        .               pub(super) fn is_wildcard(&self) -> bool {
    4,434 ( 0.00%)          matches!(self, Wildcard)
        .               }
        .           
        .               pub(super) fn is_non_exhaustive(&self) -> bool {
        .                   matches!(self, NonExhaustive)
        .               }
        .           
        .               fn as_int_range(&self) -> Option<&IntRange> {
1,387,529 ( 0.02%)          match self {
        .                       IntRange(range) => Some(range),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               fn as_slice(&self) -> Option<Slice> {
        .                   match self {
        .                       Slice(slice) => Some(*slice),
-- line 673 ----------------------------------------
-- line 674 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Checks if the `Constructor` is a variant and `TyCtxt::eval_stability` returns
        .               /// `EvalResult::Deny { .. }`.
        .               ///
        .               /// This means that the variant has a stdlib unstable feature marking it.
        6 ( 0.00%)      pub(super) fn is_unstable_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {
        6 ( 0.00%)          if let Constructor::Variant(idx) = self {
        9 ( 0.00%)              if let ty::Adt(adt, _) = pcx.ty.kind() {
       15 ( 0.00%)                  let variant_def_id = adt.variants[*idx].def_id;
        .                           // Filter variants that depend on a disabled unstable feature.
        6 ( 0.00%)                  return matches!(
       24 ( 0.00%)                      pcx.cx.tcx.eval_stability(variant_def_id, None, DUMMY_SP, None),
        .                               EvalResult::Deny { .. }
        .                           );
        .                       }
        .                   }
        .                   false
       12 ( 0.00%)      }
        .           
        .               /// Checks if the `Constructor` is a `Constructor::Variant` with a `#[doc(hidden)]`
        .               /// attribute.
        .               pub(super) fn is_doc_hidden_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {
        9 ( 0.00%)          if let Constructor::Variant(idx) = self {
        6 ( 0.00%)              if let ty::Adt(adt, _) = pcx.ty.kind() {
       15 ( 0.00%)                  let variant_def_id = adt.variants[*idx].def_id;
        6 ( 0.00%)                  return pcx.cx.tcx.is_doc_hidden(variant_def_id);
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               fn variant_index_for_adt(&self, adt: &'tcx ty::AdtDef) -> VariantIdx {
      308 ( 0.00%)          match *self {
      150 ( 0.00%)              Variant(idx) => idx,
        .                       Single => {
        8 ( 0.00%)                  assert!(!adt.is_enum());
        .                           VariantIdx::new(0)
        .                       }
        .                       _ => bug!("bad constructor {:?} for adt {:?}", self, adt),
        .                   }
        .               }
        .           
        .               /// The number of fields for this constructor. This must be kept in sync with
        .               /// `Fields::wildcards`.
-- line 720 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// matrix, we keep them grouped. For example, all slices of a sufficiently large length
        .               /// will either be all useful or all non-useful with a given matrix.
        .               ///
        .               /// See the branches for details on how the splitting is done.
        .               ///
        .               /// This function may discard some irrelevant constructors if this preserves behavior and
        .               /// diagnostics. Eg. for the `_` case, we ignore the constructors already present in the
        .               /// matrix, unless all of them are.
   33,900 ( 0.00%)      pub(super) fn split<'a>(
        .                   &self,
        .                   pcx: PatCtxt<'_, '_, 'tcx>,
        .                   ctors: impl Iterator<Item = &'a Constructor<'tcx>> + Clone,
        .               ) -> SmallVec<[Self; 1]>
        .               where
        .                   'tcx: 'a,
        .               {
   21,698 ( 0.00%)          match self {
        .                       Wildcard => {
    4,064 ( 0.00%)                  let mut split_wildcard = SplitWildcard::new(pcx);
    4,572 ( 0.00%)                  split_wildcard.split(pcx, ctors);
    9,652 ( 0.00%)                  split_wildcard.into_ctors(pcx)
        .                       }
        .                       // Fast-track if the range is trivial. In particular, we don't do the overlapping
        .                       // ranges check.
    2,344 ( 0.00%)              IntRange(ctor_range) if !ctor_range.is_singleton() => {
        .                           let mut split_range = SplitIntRange::new(ctor_range.clone());
        .                           let int_ranges = ctors.filter_map(|ctor| ctor.as_int_range());
        .                           split_range.split(int_ranges.cloned());
        .                           split_range.iter().map(IntRange).collect()
        .                       }
        .                       &Slice(Slice { kind: VarLen(self_prefix, self_suffix), array_len }) => {
        .                           let mut split_self = SplitVarLenSlice::new(self_prefix, self_suffix, array_len);
        .                           let slices = ctors.filter_map(|c| c.as_slice()).map(|s| s.kind);
        .                           split_self.split(slices);
        .                           split_self.iter().map(Slice).collect()
        .                       }
        .                       // Any other constructor can be used unchanged.
   21,424 ( 0.00%)              _ => smallvec![self.clone()],
        .                   }
   30,510 ( 0.00%)      }
        .           
        .               /// Returns whether `self` is covered by `other`, i.e. whether `self` is a subset of `other`.
        .               /// For the simple cases, this is simply checking for equality. For the "grouped" constructors,
        .               /// this checks for inclusion.
        .               // We inline because this has a single call site in `Matrix::specialize_constructor`.
        .               #[inline]
        .               pub(super) fn is_covered_by<'p>(&self, pcx: PatCtxt<'_, 'p, 'tcx>, other: &Self) -> bool {
        .                   // This must be kept in sync with `is_covered_by_any`.
4,057,154 ( 0.07%)          match (self, other) {
        .                       // Wildcards cover anything
        .                       (_, Wildcard) => true,
        .                       // The missing ctors are not covered by anything in the matrix except wildcards.
        .                       (Missing { .. } | Wildcard, _) => false,
        .           
        .                       (Single, Single) => true,
      229 ( 0.00%)              (Variant(self_id), Variant(other_id)) => self_id == other_id,
        .           
        .                       (IntRange(self_range), IntRange(other_range)) => self_range.is_covered_by(other_range),
        .                       (
        .                           FloatRange(self_from, self_to, self_end),
        .                           FloatRange(other_from, other_to, other_end),
        .                       ) => {
        .                           match (
        .                               compare_const_vals(pcx.cx.tcx, self_to, other_to, pcx.cx.param_env, pcx.ty),
-- line 818 ----------------------------------------
-- line 848 ----------------------------------------
        .                           other
        .                       ),
        .                   }
        .               }
        .           
        .               /// Faster version of `is_covered_by` when applied to many constructors. `used_ctors` is
        .               /// assumed to be built from `matrix.head_ctors()` with wildcards filtered out, and `self` is
        .               /// assumed to have been split from a wildcard.
    2,805 ( 0.00%)      fn is_covered_by_any<'p>(
        .                   &self,
        .                   pcx: PatCtxt<'_, 'p, 'tcx>,
        .                   used_ctors: &[Constructor<'tcx>],
        .               ) -> bool {
      561 ( 0.00%)          if used_ctors.is_empty() {
        .                       return false;
        .                   }
        .           
        .                   // This must be kept in sync with `is_covered_by`.
      774 ( 0.00%)          match self {
        .                       // If `self` is `Single`, `used_ctors` cannot contain anything else than `Single`s.
        .                       Single => !used_ctors.is_empty(),
      282 ( 0.00%)              Variant(vid) => used_ctors.iter().any(|c| matches!(c, Variant(i) if i == vid)),
        .                       IntRange(range) => used_ctors
        .                           .iter()
        .                           .filter_map(|c| c.as_int_range())
        .                           .any(|other| range.is_covered_by(other)),
        .                       Slice(slice) => used_ctors
        .                           .iter()
        .                           .filter_map(|c| c.as_slice())
        .                           .any(|other| slice.is_covered_by(other)),
        .                       // This constructor is never covered by anything else
        .                       NonExhaustive => false,
        .                       Str(..) | FloatRange(..) | Opaque | Missing { .. } | Wildcard | Or => {
        .                           span_bug!(pcx.span, "found unexpected ctor in all_ctors: {:?}", self)
        .                       }
        .                   }
    2,805 ( 0.00%)      }
        .           }
        .           
        .           /// A wildcard constructor that we split relative to the constructors in the matrix, as explained
        .           /// at the top of the file.
        .           ///
        .           /// A constructor that is not present in the matrix rows will only be covered by the rows that have
        .           /// wildcards. Thus we can group all of those constructors together; we call them "missing
        .           /// constructors". Splitting a wildcard would therefore list all present constructors individually
-- line 892 ----------------------------------------
-- line 903 ----------------------------------------
        .           pub(super) struct SplitWildcard<'tcx> {
        .               /// Constructors seen in the matrix.
        .               matrix_ctors: Vec<Constructor<'tcx>>,
        .               /// All the constructors for this type
        .               all_ctors: SmallVec<[Constructor<'tcx>; 1]>,
        .           }
        .           
        .           impl<'tcx> SplitWildcard<'tcx> {
    4,088 ( 0.00%)      pub(super) fn new<'p>(pcx: PatCtxt<'_, 'p, 'tcx>) -> Self {
        .                   debug!("SplitWildcard::new({:?})", pcx.ty);
      511 ( 0.00%)          let cx = pcx.cx;
      511 ( 0.00%)          let make_range = |start, end| {
        .                       IntRange(
        .                           // `unwrap()` is ok because we know the type is an integer.
    2,840 ( 0.00%)                  IntRange::from_range(cx.tcx, start, end, pcx.ty, &RangeEnd::Included).unwrap(),
        .                       )
        .                   };
        .                   // This determines the set of all possible constructors for the type `pcx.ty`. For numbers,
        .                   // arrays and slices we use ranges and variable-length slices when appropriate.
        .                   //
        .                   // If the `exhaustive_patterns` feature is enabled, we make sure to omit constructors that
        .                   // are statically impossible. E.g., for `Option<!>`, we do not include `Some(_)` in the
        .                   // returned list of constructors.
        .                   // Invariant: this is empty if and only if the type is uninhabited (as determined by
        .                   // `cx.is_uninhabited()`).
    2,673 ( 0.00%)          let all_ctors = match pcx.ty.kind() {
        .                       ty::Bool => smallvec![make_range(0, 1)],
        .                       ty::Array(sub_ty, len) if len.try_eval_usize(cx.tcx, cx.param_env).is_some() => {
        .                           let len = len.eval_usize(cx.tcx, cx.param_env) as usize;
        .                           if len != 0 && cx.is_uninhabited(sub_ty) {
        .                               smallvec![]
        .                           } else {
        .                               smallvec![Slice(Slice::new(Some(len), VarLen(0, 0)))]
        .                           }
        .                       }
        .                       // Treat arrays of a constant but unknown length like slices.
        .                       ty::Array(sub_ty, _) | ty::Slice(sub_ty) => {
        .                           let kind = if cx.is_uninhabited(sub_ty) { FixedLen(0) } else { VarLen(0, 0) };
        .                           smallvec![Slice(Slice::new(None, kind))]
        .                       }
      291 ( 0.00%)              ty::Adt(def, substs) if def.is_enum() => {
        .                           // If the enum is declared as `#[non_exhaustive]`, we treat it as if it had an
        .                           // additional "unknown" constructor.
        .                           // There is no point in enumerating all possible variants, because the user can't
        .                           // actually match against them all themselves. So we always return only the fictitious
        .                           // constructor.
        .                           // E.g., in an example like:
        .                           //
        .                           // ```
-- line 951 ----------------------------------------
-- line 954 ----------------------------------------
        .                           //         io::ErrorKind::NotFound => {},
        .                           //     }
        .                           // ```
        .                           //
        .                           // we don't want to show every possible IO error, but instead have only `_` as the
        .                           // witness.
        .                           let is_declared_nonexhaustive = cx.is_foreign_non_exhaustive_enum(pcx.ty);
        .           
      276 ( 0.00%)                  let is_exhaustive_pat_feature = cx.tcx.features().exhaustive_patterns;
        .           
        .                           // If `exhaustive_patterns` is disabled and our scrutinee is an empty enum, we treat it
        .                           // as though it had an "unknown" constructor to avoid exposing its emptiness. The
        .                           // exception is if the pattern is at the top level, because we want empty matches to be
        .                           // considered exhaustive.
        .                           let is_secretly_empty =
      276 ( 0.00%)                      def.variants.is_empty() && !is_exhaustive_pat_feature && !pcx.is_top_level;
        .           
        .                           let mut ctors: SmallVec<[_; 1]> = def
        .                               .variants
        .                               .iter_enumerated()
       69 ( 0.00%)                      .filter(|(_, v)| {
        .                                   // If `exhaustive_patterns` is enabled, we exclude variants known to be
        .                                   // uninhabited.
      456 ( 0.00%)                          let is_uninhabited = is_exhaustive_pat_feature
        .                                       && v.uninhabited_from(cx.tcx, substs, def.adt_kind(), cx.param_env)
        .                                           .contains(cx.tcx, cx.module);
        .                                   !is_uninhabited
        .                               })
        .                               .map(|(idx, _)| Variant(idx))
        .                               .collect();
        .           
      138 ( 0.00%)                  if is_secretly_empty || is_declared_nonexhaustive {
        .                               ctors.push(NonExhaustive);
        .                           }
        .                           ctors
        .                       }
        .                       ty::Char => {
    2,436 ( 0.00%)                  smallvec![
        .                               // The valid Unicode Scalar Value ranges.
        .                               make_range('\u{0000}' as u128, '\u{D7FF}' as u128),
        .                               make_range('\u{E000}' as u128, '\u{10FFFF}' as u128),
        .                           ]
        .                       }
        .                       ty::Int(_) | ty::Uint(_)
        .                           if pcx.ty.is_ptr_sized_integral()
      136 ( 0.00%)                      && !cx.tcx.features().precise_pointer_size_matching =>
        .                       {
        .                           // `usize`/`isize` are not allowed to be matched exhaustively unless the
        .                           // `precise_pointer_size_matching` feature is enabled. So we treat those types like
        .                           // `#[non_exhaustive]` enums by returning a special unmatcheable constructor.
        .                           smallvec![NonExhaustive]
        .                       }
        .                       &ty::Int(ity) => {
        .                           let bits = Integer::from_int_ty(&cx.tcx, ity).size().bits() as u128;
-- line 1007 ----------------------------------------
-- line 1022 ----------------------------------------
        .                       }
        .                       ty::Never => smallvec![],
        .                       _ if cx.is_uninhabited(pcx.ty) => smallvec![],
        .                       ty::Adt(..) | ty::Tuple(..) | ty::Ref(..) => smallvec![Single],
        .                       // This type is one for which we cannot list constructors, like `str` or `f64`.
        .                       _ => smallvec![NonExhaustive],
        .                   };
        .           
    5,621 ( 0.00%)          SplitWildcard { matrix_ctors: Vec::new(), all_ctors }
    4,599 ( 0.00%)      }
        .           
        .               /// Pass a set of constructors relative to which to split this one. Don't call twice, it won't
        .               /// do what you want.
    3,577 ( 0.00%)      pub(super) fn split<'a>(
        .                   &mut self,
        .                   pcx: PatCtxt<'_, '_, 'tcx>,
        .                   ctors: impl Iterator<Item = &'a Constructor<'tcx>> + Clone,
        .               ) where
        .                   'tcx: 'a,
        .               {
        .                   // Since `all_ctors` never contains wildcards, this won't recurse further.
    5,110 ( 0.00%)          self.all_ctors =
    6,390 ( 0.00%)              self.all_ctors.iter().flat_map(|ctor| ctor.split(pcx, ctors.clone())).collect();
    3,577 ( 0.00%)          self.matrix_ctors = ctors.filter(|c| !c.is_wildcard()).cloned().collect();
    2,555 ( 0.00%)      }
        .           
        .               /// Whether there are any value constructors for this type that are not present in the matrix.
        .               fn any_missing(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {
        .                   self.iter_missing(pcx).next().is_some()
        .               }
        .           
        .               /// Iterate over the constructors for this type that are not present in the matrix.
        .               pub(super) fn iter_missing<'a, 'p>(
        .                   &'a self,
        .                   pcx: PatCtxt<'a, 'p, 'tcx>,
        .               ) -> impl Iterator<Item = &'a Constructor<'tcx>> + Captures<'p> {
    6,473 ( 0.00%)          self.all_ctors.iter().filter(move |ctor| !ctor.is_covered_by_any(pcx, &self.matrix_ctors))
        .               }
        .           
        .               /// Return the set of constructors resulting from splitting the wildcard. As explained at the
        .               /// top of the file, if any constructors are missing we can ignore the present ones.
        .               fn into_ctors(self, pcx: PatCtxt<'_, '_, 'tcx>) -> SmallVec<[Constructor<'tcx>; 1]> {
    1,016 ( 0.00%)          if self.any_missing(pcx) {
        .                       // Some constructors are missing, thus we can specialize with the special `Missing`
        .                       // constructor, which stands for those constructors that are not seen in the matrix,
        .                       // and matches the same rows as any of them (namely the wildcard rows). See the top of
        .                       // the file for details.
        .                       // However, when all constructors are missing we can also specialize with the full
        .                       // `Wildcard` constructor. The difference will depend on what we want in diagnostics.
        .           
        .                       // If some constructors are missing, we typically want to report those constructors,
-- line 1072 ----------------------------------------
-- line 1084 ----------------------------------------
        .                       //     let (_, _, false) = x;
        .                       // ```
        .                       // we don't want to show all 16 possible witnesses `(<direction-1>, <direction-2>,
        .                       // true)` - we are satisfied with `(_, _, true)`. So if all constructors are missing we
        .                       // prefer to report just a wildcard `_`.
        .                       //
        .                       // The exception is: if we are at the top-level, for example in an empty match, we
        .                       // sometimes prefer reporting the list of constructors instead of just `_`.
      910 ( 0.00%)              let report_when_all_missing = pcx.is_top_level && !IntRange::is_integral(pcx.ty);
    1,346 ( 0.00%)              let ctor = if !self.matrix_ctors.is_empty() || report_when_all_missing {
      426 ( 0.00%)                  if pcx.is_non_exhaustive {
        .                               Missing {
        .                                   nonexhaustive_enum_missing_real_variants: self
        .                                       .iter_missing(pcx)
        .                                       .any(|c| !(c.is_non_exhaustive() || c.is_unstable_variant(pcx))),
        .                               }
        .                           } else {
        .                               Missing { nonexhaustive_enum_missing_real_variants: false }
        .                           }
        .                       } else {
        .                           Wildcard
        .                       };
    1,365 ( 0.00%)              return smallvec![ctor];
        .                   }
        .           
        .                   // All the constructors are present in the matrix, so we just go through them all.
      530 ( 0.00%)          self.all_ctors
        .               }
        .           }
        .           
        .           /// A value can be decomposed into a constructor applied to some fields. This struct represents
        .           /// those fields, generalized to allow patterns in each field. See also `Constructor`.
        .           ///
        .           /// This is constructed for a constructor using [`Fields::wildcards()`]. The idea is that
        .           /// [`Fields::wildcards()`] constructs a list of fields where all entries are wildcards, and then
-- line 1118 ----------------------------------------
-- line 1142 ----------------------------------------
        .                   Fields { fields: &[] }
        .               }
        .           
        .               fn singleton(cx: &MatchCheckCtxt<'p, 'tcx>, field: DeconstructedPat<'p, 'tcx>) -> Self {
        .                   let field: &_ = cx.pattern_arena.alloc(field);
        .                   Fields { fields: std::slice::from_ref(field) }
        .               }
        .           
      900 ( 0.00%)      pub(super) fn from_iter(
        .                   cx: &MatchCheckCtxt<'p, 'tcx>,
        .                   fields: impl IntoIterator<Item = DeconstructedPat<'p, 'tcx>>,
        .               ) -> Self {
        .                   let fields: &[_] = cx.pattern_arena.alloc_from_iter(fields);
        .                   Fields { fields }
    1,012 ( 0.00%)      }
        .           
        .               fn wildcards_from_tys(
        .                   cx: &MatchCheckCtxt<'p, 'tcx>,
        .                   tys: impl IntoIterator<Item = Ty<'tcx>>,
        .               ) -> Self {
        .                   Fields::from_iter(cx, tys.into_iter().map(DeconstructedPat::wildcard))
        .               }
        .           
-- line 1164 ----------------------------------------
-- line 1165 ----------------------------------------
        .               // In the cases of either a `#[non_exhaustive]` field list or a non-public field, we hide
        .               // uninhabited fields in order not to reveal the uninhabitedness of the whole variant.
        .               // This lists the fields we keep along with their types.
        .               fn list_variant_nonhidden_fields<'a>(
        .                   cx: &'a MatchCheckCtxt<'p, 'tcx>,
        .                   ty: Ty<'tcx>,
        .                   variant: &'a VariantDef,
        .               ) -> impl Iterator<Item = (Field, Ty<'tcx>)> + Captures<'a> + Captures<'p> {
      322 ( 0.00%)          let (adt, substs) = match ty.kind() {
      243 ( 0.00%)              ty::Adt(adt, substs) => (adt, substs),
        .                       _ => bug!(),
        .                   };
        .                   // Whether we must not match the fields of this variant exhaustively.
      240 ( 0.00%)          let is_non_exhaustive = variant.is_field_list_non_exhaustive() && !adt.did.is_local();
        .           
        .                   variant.fields.iter().enumerate().filter_map(move |(i, field)| {
      588 ( 0.00%)              let ty = field.ty(cx.tcx, substs);
        .                       // `field.ty()` doesn't normalize after substituting.
      168 ( 0.00%)              let ty = cx.tcx.normalize_erasing_regions(cx.param_env, ty);
      364 ( 0.00%)              let is_visible = adt.is_enum() || field.vis.is_accessible_from(cx.module, cx.tcx);
        .                       let is_uninhabited = cx.is_uninhabited(ty);
        .           
        .                       if is_uninhabited && (!is_visible || is_non_exhaustive) {
        .                           None
        .                       } else {
        .                           Some((Field::new(i), ty))
        .                       }
        .                   })
        .               }
        .           
        .               /// Creates a new list of wildcard fields for a given constructor. The result must have a
        .               /// length of `constructor.arity()`.
    3,900 ( 0.00%)      pub(super) fn wildcards(
        .                   cx: &MatchCheckCtxt<'p, 'tcx>,
        .                   ty: Ty<'tcx>,
        .                   constructor: &Constructor<'tcx>,
        .               ) -> Self {
    5,460 ( 0.00%)          let ret = match constructor {
      365 ( 0.00%)              Single | Variant(_) => match ty.kind() {
       53 ( 0.00%)                  ty::Tuple(fs) => Fields::wildcards_from_tys(cx, fs.iter().map(|ty| ty.expect_ty())),
       12 ( 0.00%)                  ty::Ref(_, rty, _) => Fields::wildcards_from_tys(cx, once(*rty)),
        .                           ty::Adt(adt, substs) => {
      158 ( 0.00%)                      if adt.is_box() {
        .                                   // The only legal patterns of type `Box` (outside `std`) are `_` and box
        .                                   // patterns. If we're here we can assume this is a box pattern.
        .                                   Fields::wildcards_from_tys(cx, once(substs.type_at(0)))
        .                               } else {
        .                                   let variant = &adt.variants[constructor.variant_index_for_adt(adt)];
        .                                   let tys = Fields::list_variant_nonhidden_fields(cx, ty, variant)
        .                                       .map(|(_, ty)| ty);
       79 ( 0.00%)                          Fields::wildcards_from_tys(cx, tys)
        .                               }
        .                           }
        .                           _ => bug!("Unexpected type for `Single` constructor: {:?}", ty),
        .                       },
        .                       Slice(slice) => match *ty.kind() {
        .                           ty::Slice(ty) | ty::Array(ty, _) => {
        .                               let arity = slice.arity();
        .                               Fields::wildcards_from_tys(cx, (0..arity).map(|_| ty))
-- line 1223 ----------------------------------------
-- line 1232 ----------------------------------------
        .                       | Missing { .. }
        .                       | Wildcard => Fields::empty(),
        .                       Or => {
        .                           bug!("called `Fields::wildcards` on an `Or` ctor")
        .                       }
        .                   };
        .                   debug!("Fields::wildcards({:?}, {:?}) = {:#?}", constructor, ty, ret);
        .                   ret
    3,900 ( 0.00%)      }
        .           
        .               /// Returns the list of patterns.
        .               pub(super) fn iter_patterns<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = &'p DeconstructedPat<'p, 'tcx>> + Captures<'a> {
    4,848 ( 0.00%)          self.fields.iter()
        .               }
        .           }
        .           
        .           /// Values and patterns can be represented as a constructor applied to some fields. This represents
        .           /// a pattern in this form.
        .           /// This also keeps track of whether the pattern has been found reachable during analysis. For this
        .           /// reason we should be careful not to clone patterns for which we care about that. Use
        .           /// `clone_and_forget_reachability` if you're sure.
-- line 1254 ----------------------------------------
-- line 1266 ----------------------------------------
        .               }
        .           
        .               pub(super) fn new(
        .                   ctor: Constructor<'tcx>,
        .                   fields: Fields<'p, 'tcx>,
        .                   ty: Ty<'tcx>,
        .                   span: Span,
        .               ) -> Self {
   40,831 ( 0.00%)          DeconstructedPat { ctor, fields, ty, span, reachable: Cell::new(false) }
        .               }
        .           
        .               /// Construct a pattern that matches everything that starts with this constructor.
        .               /// For example, if `ctor` is a `Constructor::Variant` for `Option::Some`, we get the pattern
        .               /// `Some(_)`.
        .               pub(super) fn wild_from_ctor(pcx: PatCtxt<'_, 'p, 'tcx>, ctor: Constructor<'tcx>) -> Self {
        6 ( 0.00%)          let fields = Fields::wildcards(pcx.cx, pcx.ty, &ctor);
       24 ( 0.00%)          DeconstructedPat::new(ctor, fields, pcx.ty, DUMMY_SP)
        .               }
        .           
        .               /// Clone this value. This method emphasizes that cloning loses reachability information and
        .               /// should be done carefully.
       12 ( 0.00%)      pub(super) fn clone_and_forget_reachability(&self) -> Self {
        6 ( 0.00%)          DeconstructedPat::new(self.ctor.clone(), self.fields, self.ty, self.span)
       12 ( 0.00%)      }
        .           
   23,990 ( 0.00%)      pub(crate) fn from_pat(cx: &MatchCheckCtxt<'p, 'tcx>, pat: &Pat<'tcx>) -> Self {
    2,445 ( 0.00%)          let mkpat = |pat| DeconstructedPat::from_pat(cx, pat);
        .                   let ctor;
        .                   let fields;
   12,415 ( 0.00%)          match pat.kind.as_ref() {
        .                       PatKind::AscribeUserType { subpattern, .. } => return mkpat(subpattern),
        .                       PatKind::Binding { subpattern: Some(subpat), .. } => return mkpat(subpat),
        .                       PatKind::Binding { subpattern: None, .. } | PatKind::Wild => {
        .                           ctor = Wildcard;
        .                           fields = Fields::empty();
        .                       }
       24 ( 0.00%)              PatKind::Deref { subpattern } => {
        .                           ctor = Single;
       12 ( 0.00%)                  fields = Fields::singleton(cx, mkpat(subpattern));
        .                       }
      112 ( 0.00%)              PatKind::Leaf { subpatterns } | PatKind::Variant { subpatterns, .. } => {
      508 ( 0.00%)                  match pat.ty.kind() {
        .                               ty::Tuple(fs) => {
        .                                   ctor = Single;
       30 ( 0.00%)                          let mut wilds: SmallVec<[_; 2]> = fs
        .                                       .iter()
       52 ( 0.00%)                              .map(|ty| ty.expect_ty())
        .                                       .map(DeconstructedPat::wildcard)
        .                                       .collect();
        .                                   for pat in subpatterns {
      780 ( 0.00%)                              wilds[pat.field.index()] = mkpat(&pat.pattern);
        .                                   }
      330 ( 0.00%)                          fields = Fields::from_iter(cx, wilds);
        .                               }
      246 ( 0.00%)                      ty::Adt(adt, substs) if adt.is_box() => {
        .                                   // The only legal patterns of type `Box` (outside `std`) are `_` and box
        .                                   // patterns. If we're here we can assume this is a box pattern.
        .                                   // FIXME(Nadrieril): A `Box` can in theory be matched either with `Box(_,
        .                                   // _)` or a box pattern. As a hack to avoid an ICE with the former, we
        .                                   // ignore other fields than the first one. This will trigger an error later
        .                                   // anyway.
        .                                   // See https://github.com/rust-lang/rust/issues/82772 ,
        .                                   // explanation: https://github.com/rust-lang/rust/pull/82789#issuecomment-796921977
-- line 1328 ----------------------------------------
-- line 1335 ----------------------------------------
        .                                       mkpat(&pat.pattern)
        .                                   } else {
        .                                       DeconstructedPat::wildcard(substs.type_at(0))
        .                                   };
        .                                   ctor = Single;
        .                                   fields = Fields::singleton(cx, pat);
        .                               }
        .                               ty::Adt(adt, _) => {
      254 ( 0.00%)                          ctor = match pat.kind.as_ref() {
        .                                       PatKind::Leaf { .. } => Single,
      156 ( 0.00%)                              PatKind::Variant { variant_index, .. } => Variant(*variant_index),
        .                                       _ => bug!(),
        .                                   };
        .                                   let variant = &adt.variants[ctor.variant_index_for_adt(adt)];
        .                                   // For each field in the variant, we store the relevant index into `self.fields` if any.
        .                                   let mut field_id_to_id: Vec<Option<usize>> =
      246 ( 0.00%)                              (0..variant.fields.len()).map(|_| None).collect();
       82 ( 0.00%)                          let tys = Fields::list_variant_nonhidden_fields(cx, pat.ty, variant)
        .                                       .enumerate()
        .                                       .map(|(i, (field, ty))| {
      176 ( 0.00%)                                  field_id_to_id[field.index()] = Some(i);
        .                                           ty
        .                                       });
        .                                   let mut wilds: SmallVec<[_; 2]> =
        .                                       tys.map(DeconstructedPat::wildcard).collect();
        .                                   for pat in subpatterns {
      220 ( 0.00%)                              if let Some(i) = field_id_to_id[pat.field.index()] {
      660 ( 0.00%)                                  wilds[i] = mkpat(&pat.pattern);
        .                                       }
        .                                   }
      574 ( 0.00%)                          fields = Fields::from_iter(cx, wilds);
        .                               }
        .                               _ => bug!("pattern has unexpected type: pat: {:?}, ty: {:?}", pat, pat.ty),
        .                           }
        .                       }
        .                       PatKind::Constant { value } => {
      801 ( 0.00%)                  if let Some(int_range) = IntRange::from_const(cx.tcx, cx.param_env, value) {
        .                               ctor = IntRange(int_range);
        .                               fields = Fields::empty();
        .                           } else {
        .                               match pat.ty.kind() {
        .                                   ty::Float(_) => {
        .                                       ctor = FloatRange(value, value, RangeEnd::Included);
        .                                       fields = Fields::empty();
        .                                   }
-- line 1379 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   // opaque.
        .                                   _ => {
        .                                       ctor = Opaque;
        .                                       fields = Fields::empty();
        .                                   }
        .                               }
        .                           }
        .                       }
    4,988 ( 0.00%)              &PatKind::Range(PatRange { lo, hi, end }) => {
    1,247 ( 0.00%)                  let ty = lo.ty;
   24,940 ( 0.00%)                  ctor = if let Some(int_range) = IntRange::from_range(
    1,247 ( 0.00%)                      cx.tcx,
    4,988 ( 0.00%)                      lo.eval_bits(cx.tcx, cx.param_env, lo.ty),
    4,988 ( 0.00%)                      hi.eval_bits(cx.tcx, cx.param_env, hi.ty),
        .                               ty,
        .                               &end,
        .                           ) {
        .                               IntRange(int_range)
        .                           } else {
        .                               FloatRange(lo, hi, end)
        .                           };
        .                           fields = Fields::empty();
-- line 1416 ----------------------------------------
-- line 1427 ----------------------------------------
        .                               FixedLen(prefix.len() + suffix.len())
        .                           };
        .                           ctor = Slice(Slice::new(array_len, kind));
        .                           fields = Fields::from_iter(cx, prefix.iter().chain(suffix).map(mkpat));
        .                       }
        .                       PatKind::Or { .. } => {
        .                           ctor = Or;
        .                           let pats = expand_or_pat(pat);
       10 ( 0.00%)                  fields = Fields::from_iter(cx, pats.into_iter().map(mkpat));
        .                       }
        .                   }
   18,325 ( 0.00%)          DeconstructedPat::new(ctor, fields, pat.ty, pat.span)
   21,591 ( 0.00%)      }
        .           
        .               pub(crate) fn to_pat(&self, cx: &MatchCheckCtxt<'p, 'tcx>) -> Pat<'tcx> {
        .                   let is_wildcard = |pat: &Pat<'_>| {
        .                       matches!(*pat.kind, PatKind::Binding { subpattern: None, .. } | PatKind::Wild)
        .                   };
        .                   let mut subpatterns = self.iter_fields().map(|p| p.to_pat(cx));
        .                   let pat = match &self.ctor {
        .                       Single | Variant(_) => match self.ty.kind() {
-- line 1447 ----------------------------------------
-- line 1520 ----------------------------------------
        .                           bug!("can't convert to pattern: {:?}", self)
        .                       }
        .                   };
        .           
        .                   Pat { ty: self.ty, span: DUMMY_SP, kind: Box::new(pat) }
        .               }
        .           
        .               pub(super) fn is_or_pat(&self) -> bool {
   10,543 ( 0.00%)          matches!(self.ctor, Or)
        .               }
        .           
        .               pub(super) fn ctor(&self) -> &Constructor<'tcx> {
        .                   &self.ctor
        .               }
        .               pub(super) fn ty(&self) -> Ty<'tcx> {
    2,842 ( 0.00%)          self.ty
        .               }
        .               pub(super) fn span(&self) -> Span {
    5,407 ( 0.00%)          self.span
        .               }
        .           
        .               pub(super) fn iter_fields<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = &'p DeconstructedPat<'p, 'tcx>> + Captures<'a> {
        .                   self.fields.iter_patterns()
        .               }
        .           
        .               /// Specialize this pattern with a constructor.
        .               /// `other_ctor` can be different from `self.ctor`, but must be covered by it.
   25,464 ( 0.00%)      pub(super) fn specialize<'a>(
        .                   &'a self,
        .                   cx: &MatchCheckCtxt<'p, 'tcx>,
        .                   other_ctor: &Constructor<'tcx>,
        .               ) -> SmallVec<[&'p DeconstructedPat<'p, 'tcx>; 2]> {
   15,915 ( 0.00%)          match (&self.ctor, other_ctor) {
        .                       (Wildcard, _) => {
        .                           // We return a wildcard for each field of `other_ctor`.
    3,108 ( 0.00%)                  Fields::wildcards(cx, self.ty, other_ctor).iter_patterns().collect()
        .                       }
        .                       (Slice(self_slice), Slice(other_slice))
        .                           if self_slice.arity() != other_slice.arity() =>
        .                       {
        .                           // The only tricky case: two slices of different arity. Since `self_slice` covers
        .                           // `other_slice`, `self_slice` must be `VarLen`, i.e. of the form
        .                           // `[prefix, .., suffix]`. Moreover `other_slice` is guaranteed to have a larger
        .                           // arity. So we fill the middle part with enough wildcards to reach the length of
-- line 1565 ----------------------------------------
-- line 1578 ----------------------------------------
        .                                   let extra_wildcards = other_slice.arity() - self_slice.arity();
        .                                   let extra_wildcards = (0..extra_wildcards).map(|_| wildcard);
        .                                   prefix.iter().chain(extra_wildcards).chain(suffix).collect()
        .                               }
        .                           }
        .                       }
        .                       _ => self.fields.iter_patterns().collect(),
        .                   }
   28,647 ( 0.00%)      }
        .           
        .               /// We keep track for each pattern if it was ever reachable during the analysis. This is used
        .               /// with `unreachable_spans` to report unreachable subpatterns arising from or patterns.
        .               pub(super) fn set_reachable(&self) {
        .                   self.reachable.set(true)
        .               }
        .               pub(super) fn is_reachable(&self) -> bool {
        .                   self.reachable.get()
        .               }
        .           
        .               /// Report the spans of subpatterns that were not reachable, if any.
        .               pub(super) fn unreachable_spans(&self) -> Vec<Span> {
        .                   let mut spans = Vec::new();
    4,848 ( 0.00%)          self.collect_unreachable_spans(&mut spans);
        .                   spans
        .               }
        .           
    9,596 ( 0.00%)      fn collect_unreachable_spans(&self, spans: &mut Vec<Span>) {
        .                   // We don't look at subpatterns if we already reported the whole pattern as unreachable.
    2,399 ( 0.00%)          if !self.is_reachable() {
        .                       spans.push(self.span);
        .                   } else {
        .                       for p in self.iter_fields() {
    2,349 ( 0.00%)                  p.collect_unreachable_spans(spans);
        .                       }
        .                   }
    9,596 ( 0.00%)      }
        .           }
        .           
        .           /// This is mostly copied from the `Pat` impl. This is best effort and not good enough for a
        .           /// `Display` impl.
        .           impl<'p, 'tcx> fmt::Debug for DeconstructedPat<'p, 'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   // Printing lists is a chore.
        .                   let mut first = true;
-- line 1621 ----------------------------------------

2,193,466 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           pub fn move_path_children_matching<'tcx, F>(
        .               move_data: &MoveData<'tcx>,
        .               path: MovePathIndex,
        .               mut cond: F,
        .           ) -> Option<MovePathIndex>
        .           where
        .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
        .           {
        2 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
        6 ( 0.00%)      while let Some(child_index) = next_child {
        .                   let move_path_children = &move_data.move_paths[child_index];
        4 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
        7 ( 0.00%)              if cond(elem) {
        .                           return Some(child_index);
        .                       }
        .                   }
        .                   next_child = move_path_children.next_sibling;
        .               }
        .           
        .               None
        .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
1,470,734 ( 0.03%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
  127,206 ( 0.00%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
    4,704 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
2,336,888 ( 0.04%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
  584,222 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
2,336,888 ( 0.04%)      }
        .           
2,709,698 ( 0.05%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
  173,227 ( 0.00%)          each_child(move_path_index);
        .           
2,044,923 ( 0.04%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  151,145 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  304,015 ( 0.01%)          while let Some(child_index) = next_child_index {
    3,408 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
      568 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
2,206,070 ( 0.04%)      }
1,682,612 ( 0.03%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
    2,727 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
    1,292 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
      323 ( 0.00%)          let ty = place.ty(body, tcx).ty;
        .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
        .           
        8 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
    1,967 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
      323 ( 0.00%)              each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
    9,273 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
      830 ( 0.00%)      for arg in body.args_iter() {
    1,512 ( 0.00%)          let place = mir::Place::from(arg);
    2,268 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
      762 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
    6,640 ( 0.00%)  }
        .           
2,161,305 ( 0.04%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
   41,052 ( 0.00%)      for mi in &move_data.loc_map[loc] {
  439,102 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  116,146 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
  173,227 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
1,811,688 ( 0.03%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   41,052 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
  697,444 ( 0.01%)          let init = move_data.inits[*ii];
  352,082 ( 0.01%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
    5,208 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
    2,170 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
      975 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
        .                   let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
        .                   assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
        .                   let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
-- line 260 ----------------------------------------
-- line 262 ----------------------------------------
        .                   };
        .           
        .                   if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
        .                           handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
    3,472 ( 0.00%)  }

1,690,387 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
  164,269 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
    1,431 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
       27 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
       12 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
       21 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
       18 ( 0.00%)      pub prev_token: Token,
       36 ( 0.00%)      pub capture_cfg: bool,
       87 ( 0.00%)      restrictions: Restrictions,
       42 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
       42 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
       42 ( 0.00%)      unmatched_angle_bracket_count: u32,
       63 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
       21 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
       21 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
       84 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
       84 ( 0.00%)      capturing: Capturing,
       21 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
      299 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
   15,247 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
    3,498 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
    1,103 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
    6,947 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
    2,044 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
    4,088 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
      300 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   15,516 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
1,487,136 ( 0.03%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
  727,292 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   15,396 ( 0.00%)                  self.frame.open_delim = true;
   76,980 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
1,455,876 ( 0.03%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
   61,512 ( 0.00%)              } else if !self.frame.close_delim {
   15,336 ( 0.00%)                  self.frame.close_delim = true;
   76,680 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   30,672 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  199,368 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
    1,512 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  278,648 ( 0.01%)              match tree {
        .                           TokenTree::Token(token) => {
  991,424 ( 0.02%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
  991,424 ( 0.02%)      }
        .           
      650 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
      195 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
        .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
      325 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
        .                   for ch in data.as_str().chars() {
        .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
        .                   self.next()
      585 ( 0.00%)      }
        .           }
        .           
    4,170 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
    3,336 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
       24 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
       98 ( 0.00%)      Some(match token.kind {
      196 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
      196 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
      196 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
      343 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
       98 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
      343 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
      245 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
      840 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
       60 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
      120 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
    1,860 ( 0.00%)          let mut parser = Parser {
        .                       sess,
       60 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
       60 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
      360 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
      120 ( 0.00%)          parser.bump();
        .           
        .                   parser
      540 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
  740,592 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
      260 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  370,101 ( 0.01%)                  self.token_cursor.next()
        .                       };
  493,728 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  123,432 ( 0.00%)              self.token_cursor.break_last_token = false;
  493,728 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
      288 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
  416,304 ( 0.01%)              if matches!(
  246,864 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
  493,728 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  415,494 ( 0.01%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   46,166 ( 0.00%)          if self.expected_tokens.is_empty() {
      738 ( 0.00%)              if self.token == *t {
      615 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  552,516 ( 0.01%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  692,490 ( 0.01%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  571,440 ( 0.01%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   95,240 ( 0.00%)          if edible.contains(&self.token.kind) {
  142,407 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  714,300 ( 0.01%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   12,857 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
    9,789 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
   22,666 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
    3,238 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
   19,428 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   12,952 ( 0.00%)          self.bump();
        .                   Ok(ident)
   32,380 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
2,800,651 ( 0.05%)      fn check(&mut self, tok: &TokenKind) -> bool {
1,201,728 ( 0.02%)          let is_present = self.token == *tok;
  801,834 ( 0.01%)          if !is_present {
1,780,409 ( 0.03%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
2,800,651 ( 0.05%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
        .               pub fn eat(&mut self, tok: &TokenKind) -> bool {
  502,246 ( 0.01%)          let is_present = self.check(tok);
  331,776 ( 0.01%)          if is_present {
   32,670 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
        .               }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
    7,225 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
    8,288 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
  125,809 ( 0.00%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
   54,830 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
   42,848 ( 0.00%)          if self.check_keyword(kw) {
    1,080 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
   54,830 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
    1,742 ( 0.00%)          if self.token.is_keyword(kw) {
      374 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
      145 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
      116 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
    7,264 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
    3,632 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
    8,172 ( 0.00%)      }
        .           
   51,210 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   17,516 ( 0.00%)          if ok {
        .                       true
        .                   } else {
   23,684 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
   51,210 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
   20,620 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
    9,224 ( 0.00%)      fn check_path(&mut self) -> bool {
   49,813 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   11,530 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
      904 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
      808 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
   43,209 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
   24,005 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
   43,209 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
    1,376 ( 0.00%)          self.check_or_expected(
      688 ( 0.00%)              self.token.is_like_plus(),
      688 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  112,776 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   65,786 ( 0.00%)          if self.token.kind == expected {
   14,086 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   11,775 ( 0.00%)          match self.token.kind.break_two_token_op() {
      168 ( 0.00%)              Some((first, second)) if first == expected => {
       96 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
      120 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
      216 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
       24 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
      336 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
    6,993 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
   93,906 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
      136 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
   40,860 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
       48 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
      832 ( 0.00%)      fn eat_lt(&mut self) -> bool {
    7,483 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
    4,942 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
      492 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
      528 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
      832 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
      738 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
      369 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
      246 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
  296,865 ( 0.01%)              TokenExpectType::Expect => self.check(k),
      120 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
  228,304 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
  126,414 ( 0.00%)              if let Some(ref t) = sep.sep {
  142,787 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
  254,277 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
   88,100 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
   44,309 ( 0.00%)              let t = f(self)?;
      790 ( 0.00%)              v.push(t);
        .                   }
        .           
   45,508 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   34,711 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
    2,440 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   22,998 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   22,478 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
   24,727 ( 0.00%)          Ok((val, trailing))
    1,952 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
      982 ( 0.00%)          self.expect(bra)?;
    1,952 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
      414 ( 0.00%)              &token::OpenDelim(delim),
      587 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
1,604,928 ( 0.03%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
  740,736 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
  493,824 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  123,456 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  123,456 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
  987,456 ( 0.02%)      pub fn bump(&mut self) {
  493,728 ( 0.01%)          let next_token = self.next_tok(self.token.span);
  740,592 ( 0.01%)          self.bump_with(next_token);
  987,456 ( 0.02%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
        .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    9,974 ( 0.00%)          if dist == 0 {
    6,159 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   58,611 ( 0.00%)          let frame = &self.token_cursor.frame;
   58,942 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  175,672 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  218,624 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  292,325 ( 0.01%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  100,663 ( 0.00%)                      Some(tree) => match tree {
   52,154 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
    1,735 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   57,146 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
      509 ( 0.00%)          let mut token = Token::dummy();
      418 ( 0.00%)          while i < dist {
    3,648 ( 0.00%)              token = cursor.next().0;
    1,652 ( 0.00%)              if matches!(
      992 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
      220 ( 0.00%)              i += 1;
        .                   }
        3 ( 0.00%)          return looker(&token);
        .               }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   44,640 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
   10,150 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   44,640 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
      238 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
      952 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
    2,280 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
      714 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
      155 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
    3,990 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
        .               fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
   13,608 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
        .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
       66 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
       99 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
       24 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
      294 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
      990 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
      880 ( 0.00%)          Ok(
      818 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
      201 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
      201 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
      172 ( 0.00%)                  match self.parse_token_tree() {
      215 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
       86 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
      134 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
        .                               let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
        .                               let expr = self.parse_expr_force_collect()?;
        .                               let span = expr.span;
        .           
        .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
        .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
      770 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
  177,693 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
  118,082 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
      440 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
      165 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
      970 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
      508 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
      110 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
      110 ( 0.00%)                  let span = frame.span;
       55 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
      110 ( 0.00%)                  self.bump();
      275 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
        .                           self.bump();
        .                           TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
      385 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   52,575 ( 0.00%)          let old = self.restrictions;
   52,907 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   52,875 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
    3,800 ( 0.00%)      fn is_crate_vis(&self) -> bool {
    2,375 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
    4,275 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
    3,480 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
      696 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
      348 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
    1,392 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
      267 ( 0.00%)              return Ok(Visibility {
      801 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
       81 ( 0.00%)          let lo = self.prev_token.span;
        .           
      405 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
      261 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
       87 ( 0.00%)                  self.bump(); // `(`
       58 ( 0.00%)                  self.bump(); // `crate`
       87 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
       29 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
        .                           return Ok(Visibility {
       87 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
        .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
        .                           // Parse `pub(in path)`.
        .                           self.bump(); // `(`
        .                           self.bump(); // `in`
        .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
      156 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
    3,132 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
       90 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1409 ----------------------------------------
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
        .                       |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
        .               }
        .           
        .               /// `::{` or `::*`
   22,928 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   11,464 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
    2,302 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
   24,768 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
      648 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
      324 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
      324 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
      648 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

  774,314 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .           pub struct UnmatchedBrace {
        .               pub expected_delim: token::DelimToken,
        .               pub found_delim: Option<token::DelimToken>,
        .               pub found_span: Span,
        .               pub unclosed_span: Option<Span>,
        .               pub candidate_span: Option<Span>,
        .           }
        .           
      196 ( 0.00%)  crate fn parse_token_trees<'a>(
        .               sess: &'a ParseSess,
        .               src: &'a str,
        .               start_pos: BytePos,
        .               override_span: Option<Span>,
        .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
        .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
        .                   .into_token_trees()
      126 ( 0.00%)  }
        .           
        .           struct StringReader<'a> {
        .               sess: &'a ParseSess,
        .               /// Initial position, read-only.
        .               start_pos: BytePos,
        .               /// The absolute offset within the source_map of the current character.
        .               pos: BytePos,
        .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
        .               end_src_index: usize,
        .               /// Source text to tokenize.
        .               src: &'a str,
        .               override_span: Option<Span>,
        .           }
        .           
        .           impl<'a> StringReader<'a> {
        .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
  131,508 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
        .               }
        .           
        .               /// Returns the next token, and info about preceding whitespace, if any.
  892,213 ( 0.02%)      fn next_token(&mut self) -> (Spacing, Token) {
        .                   let mut spacing = Spacing::Joint;
        .           
        .                   // Skip `#!` at the start of the file
  254,918 ( 0.00%)          let start_src_index = self.src_index(self.pos);
  382,377 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
        .                   let is_beginning_of_file = self.pos == self.start_pos;
  127,459 ( 0.00%)          if is_beginning_of_file {
       56 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
        .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
        .                           spacing = Spacing::Alone;
        .                       }
        .                   }
        .           
        .                   // Skip trivial (whitespace & comments) tokens
        .                   loop {
  216,401 ( 0.00%)              let start_src_index = self.src_index(self.pos);
  515,790 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
        .           
  171,930 ( 0.00%)              if text.is_empty() {
        .                           let span = self.mk_sp(self.pos, self.pos);
       70 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
        .                       }
        .           
  515,748 ( 0.01%)              let token = rustc_lexer::first_token(text);
        .           
  343,832 ( 0.01%)              let start = self.pos;
  171,916 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
        .           
        .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
        .           
1,375,804 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
1,019,560 ( 0.02%)                  Some(kind) => {
        .                               let span = self.mk_sp(start, self.pos);
  764,670 ( 0.01%)                      return (spacing, Token::new(kind, span));
        .                           }
        .                           None => spacing = Spacing::Alone,
        .                       }
        .                   }
1,147,131 ( 0.02%)      }
        .           
        .               /// Report a fatal lexical error with a given span.
        .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
        .                   self.sess.span_diagnostic.span_fatal(sp, m)
        .               }
        .           
        .               /// Report a lexical error with a given span.
        .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
        .               ) -> DiagnosticBuilder<'a> {
        .                   self.sess
        .                       .span_diagnostic
        .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
        .               }
        .           
        .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
        .               /// complain about it.
      987 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
        .                   // Opening delimiter of the length 2 is not included into the comment text.
        .                   let content_start = start + BytePos(2);
        .                   let content = self.str_from(content_start);
        .                   if contains_text_flow_control_chars(content) {
        .                       let span = self.mk_sp(start, self.pos);
        .                       self.sess.buffer_lint_with_diagnostic(
        .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
        .                           span,
        .                           ast::CRATE_NODE_ID,
        .                           "unicode codepoint changing visible direction of text present in comment",
        .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
        .                       );
        .                   }
    1,128 ( 0.00%)      }
        .           
        .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
        .               /// `rustc_ast::TokenKind`. This turns strings into interned
        .               /// symbols and runs additional validation.
        .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
  859,580 ( 0.02%)          Some(match token {
      260 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
        .                           // Skip non-doc comments
      877 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
        .                               doc_style
        .                           } else {
        .                               self.lint_unicode_text_flow(start);
        .                               return None;
        .                           };
        .           
        .                           // Opening delimiter of the length 3 is not included into the symbol.
        .                           let content_start = start + BytePos(3);
        .                           let content = self.str_from(content_start);
      595 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
        .                       }
        .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
        .                           if !terminated {
        .                               let msg = match doc_style {
        .                                   Some(_) => "unterminated block doc-comment",
        .                                   None => "unterminated block comment",
        .                               };
        .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
        .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
        .                           let content = self.str_from_to(content_start, content_end);
        .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
        .                       }
        .                       rustc_lexer::TokenKind::Whitespace => return None,
        .                       rustc_lexer::TokenKind::Ident
        .                       | rustc_lexer::TokenKind::RawIdent
        .                       | rustc_lexer::TokenKind::UnknownPrefix => {
   16,140 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
   20,175 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
        .                           let mut ident_start = start;
    8,070 ( 0.00%)                  if is_raw_ident {
        .                               ident_start = ident_start + BytePos(2);
        .                           }
   12,105 ( 0.00%)                  if is_unknown_prefix {
        .                               self.report_unknown_prefix(start);
        .                           }
   20,175 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
        .                           let span = self.mk_sp(start, self.pos);
   16,140 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
    8,070 ( 0.00%)                  if is_raw_ident {
        .                               if !sym.can_be_raw() {
        .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
        .                               }
        .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
        .                           }
   28,245 ( 0.00%)                  token::Ident(sym, is_raw_ident)
        .                       }
        .                       rustc_lexer::TokenKind::InvalidIdent
        .                           // Do not recover an identifier with emoji if the codepoint is a confusable
        .                           // with a recoverable substitution token, like `➖`.
        .                           if UNICODE_ARRAY
        .                               .iter()
        .                               .find(|&&(c, _, _)| {
        .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
        .                               })
        .                               .is_none() =>
        .                       {
        .                           let sym = nfc_normalize(self.str_from(start));
        .                           let span = self.mk_sp(start, self.pos);
        .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
        .                           token::Ident(sym, false)
        .                       }
  627,920 ( 0.01%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
        .                           let suffix_start = start + BytePos(suffix_start as u32);
        .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
  117,735 ( 0.00%)                  let suffix = if suffix_start < self.pos {
        .                               let string = self.str_from(suffix_start);
        .                               if string == "_" {
        .                                   self.sess
        .                                       .span_diagnostic
        .                                       .struct_span_warn(
        .                                           self.mk_sp(suffix_start, self.pos),
        .                                           "underscore literal suffix is not allowed",
        .                                       )
-- line 253 ----------------------------------------
-- line 259 ----------------------------------------
        .                                       .note(
        .                                           "see issue #42326 \
        .                                            <https://github.com/rust-lang/rust/issues/42326> \
        .                                            for more information",
        .                                       )
        .                                       .emit();
        .                                   None
        .                               } else {
        5 ( 0.00%)                          Some(Symbol::intern(string))
        .                               }
        .                           } else {
        .                               None
        .                           };
  313,960 ( 0.01%)                  token::Literal(token::Lit { kind, symbol, suffix })
        .                       }
       32 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
        .                           // Include the leading `'` in the real identifier, for macro
        .                           // expansion purposes. See #12512 for the gory details of why
        .                           // this is necessary.
        .                           let lifetime_name = self.str_from(start);
       16 ( 0.00%)                  if starts_with_number {
        .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
        .                           }
       48 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
       64 ( 0.00%)                  token::Lifetime(ident)
        .                       }
        .                       rustc_lexer::TokenKind::Semi => token::Semi,
        .                       rustc_lexer::TokenKind::Comma => token::Comma,
        .                       rustc_lexer::TokenKind::Dot => token::Dot,
        .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
        .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
        .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
        .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
        .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
        .                           }
        .                           err.emit();
        .                           token?
        .                       }
        .                   })
        .               }
        .           
    1,428 ( 0.00%)      fn cook_doc_comment(
        .                   &self,
        .                   content_start: BytePos,
        .                   content: &str,
        .                   comment_kind: CommentKind,
        .                   doc_style: DocStyle,
        .               ) -> TokenKind {
      119 ( 0.00%)          if content.contains('\r') {
        .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
        .                           self.err_span_(
        .                               content_start + BytePos(idx as u32),
        .                               content_start + BytePos(idx as u32 + 1),
        .                               match comment_kind {
        .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
        .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
        .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   let attr_style = match doc_style {
        .                       DocStyle::Outer => AttrStyle::Outer,
        .                       DocStyle::Inner => AttrStyle::Inner,
        .                   };
        .           
      357 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
    1,785 ( 0.00%)      }
        .           
        .               fn cook_lexer_literal(
        .                   &self,
        .                   start: BytePos,
        .                   suffix_start: BytePos,
        .                   kind: rustc_lexer::LiteralKind,
        .               ) -> (token::LitKind, Symbol) {
        .                   // prefix means `"` or `br"` or `r###"`, ...
        .                   let (lit_kind, mode, prefix_len, postfix_len) = match kind {
   15,261 ( 0.00%)              rustc_lexer::LiteralKind::Char { terminated } => {
   15,261 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, suffix_start),
        .                                   "unterminated character literal",
        .                                   error_code!(E0762),
        .                               )
        .                           }
        .                           (token::Char, Mode::Char, 1, 1) // ' '
        .                       }
-- line 377 ----------------------------------------
-- line 380 ----------------------------------------
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start + BytePos(1), suffix_start),
        .                                   "unterminated byte constant",
        .                                   error_code!(E0763),
        .                               )
        .                           }
        .                           (token::Byte, Mode::Byte, 2, 1) // b' '
        .                       }
       21 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
       21 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, suffix_start),
        .                                   "unterminated double quote string",
        .                                   error_code!(E0765),
        .                               )
        .                           }
        .                           (token::Str, Mode::Str, 1, 1) // " "
        .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
        .                           let n = u32::from(n_hashes);
        .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
        .                       }
        .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
        .                           self.report_raw_str_error(start, err);
        .                           let n = u32::from(n_hashes);
        .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
        .                       }
   47,926 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
   23,963 ( 0.00%)                  return if empty_int {
        .                               self.sess
        .                                   .span_diagnostic
        .                                   .struct_span_err_with_code(
        .                                       self.mk_sp(start, suffix_start),
        .                                       "no valid digits found for number",
        .                                       error_code!(E0768),
        .                                   )
        .                                   .emit();
        .                               (token::Integer, sym::integer(0))
        .                           } else {
        .                               self.validate_int_literal(base, start, suffix_start);
   71,889 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
        .                           };
        .                       }
        .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
        .                           if empty_exponent {
        .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
        .                           }
        .           
        .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
        .                           }
        .           
        .                           let id = self.symbol_from_to(start, suffix_start);
        .                           return (token::Float, id);
        .                       }
        .                   };
        .                   let content_start = start + BytePos(prefix_len);
        .                   let content_end = suffix_start - BytePos(postfix_len);
   45,846 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
        .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
        .                   (lit_kind, id)
        .               }
        .           
        .               #[inline]
        .               fn src_index(&self, pos: BytePos) -> usize {
        .                   (pos - self.start_pos).to_usize()
        .               }
        .           
        .               /// Slice of the source text from `start` up to but excluding `self.pos`,
        .               /// meaning the slice does not include the character `self.ch`.
        .               fn str_from(&self, start: BytePos) -> &str {
   26,868 ( 0.00%)          self.str_from_to(start, self.pos)
        .               }
        .           
        .               /// As symbol_from, with an explicit endpoint.
        .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
        .                   debug!("taking an ident from {:?} to {:?}", start, end);
  351,125 ( 0.01%)          Symbol::intern(self.str_from_to(start, end))
        .               }
        .           
        .               /// Slice of the source text spanning from `start` up to but excluding `end`.
   58,839 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
        .                   &self.src[self.src_index(start)..self.src_index(end)]
  235,356 ( 0.00%)      }
        .           
        .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
        .                   match opt_err {
        .                       Some(RawStrError::InvalidStarter { bad_char }) => {
        .                           self.report_non_started_raw_string(start, bad_char)
        .                       }
        .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
        .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
        .               fn validate_literal_escape(
        .                   &self,
        .                   mode: Mode,
        .                   content_start: BytePos,
        .                   content_end: BytePos,
        .                   prefix_len: u32,
        .                   postfix_len: u32,
        .               ) {
   91,692 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
  463,268 ( 0.01%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
        .                       // Here we only check for errors. The actual unescaping is done later.
   31,766 ( 0.00%)              if let Err(err) = result {
        .                           let span_with_quotes = self
        .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
        .                           let (start, end) = (range.start as u32, range.end as u32);
        .                           let lo = content_start + BytePos(start);
        .                           let hi = lo + BytePos(end - start);
        .                           let span = self.mk_sp(lo, hi);
        .                           emit_unescape_error(
        .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
        .                               lit_content,
        .                               span_with_quotes,
        .                               span,
        .                               mode,
        .                               range,
        .                               err,
        .                           );
        .                       }
  142,947 ( 0.00%)          });
        .               }
        .           
        .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
   95,852 ( 0.00%)          let base = match base {
        .                       Base::Binary => 2,
        .                       Base::Octal => 8,
        .                       _ => return,
        .                   };
        .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
        .                   for (idx, c) in s.char_indices() {
        .                       let idx = idx as u32;
        .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
        .                           let lo = content_start + BytePos(2 + idx);
        .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
        .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
        .                       }
        .                   }
        .               }
        .           }
        .           
   36,315 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
        .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
    8,070 ( 0.00%)      match is_nfc_quick(string.chars()) {
   40,350 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
        .                   _ => {
        .                       let normalized_str: String = string.chars().nfc().collect();
        .                       Symbol::intern(&normalized_str)
        .                   }
        .               }
        .           }

  759,833 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs
--------------------------------------------------------------------------------
Ir                 

-- line 82 ----------------------------------------
        .           /// promotion of temporaries must not change program behavior; if the promoted could be
        .           /// written to, that would be a problem.
        .           pub struct HasMutInterior;
        .           
        .           impl Qualif for HasMutInterior {
        .               const ANALYSIS_NAME: &'static str = "flow_has_mut_interior";
        .           
        .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
       14 ( 0.00%)          qualifs.has_mut_interior
        .               }
        .           
        .               fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
1,148,802 ( 0.02%)          !ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env)
        .               }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   _: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   // Exactly one type, `UnsafeCell`, has the `HasMutInterior` qualif inherently.
-- line 102 ----------------------------------------
-- line 115 ----------------------------------------
        .           impl Qualif for NeedsDrop {
        .               const ANALYSIS_NAME: &'static str = "flow_needs_drop";
        .               const IS_CLEARED_ON_MOVE: bool = true;
        .           
        .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
        .                   qualifs.needs_drop
        .               }
        .           
  375,104 ( 0.01%)      fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
   93,776 ( 0.00%)          ty.needs_drop(cx.tcx, cx.param_env)
  421,992 ( 0.01%)      }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   _: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   adt.has_dtor(cx.tcx)
        .               }
-- line 133 ----------------------------------------
-- line 141 ----------------------------------------
        .               const ANALYSIS_NAME: &'static str = "flow_needs_nonconst_drop";
        .               const IS_CLEARED_ON_MOVE: bool = true;
        .               const ALLOW_PROMOTED: bool = true;
        .           
        .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
        .                   qualifs.needs_non_const_drop
        .               }
        .           
      306 ( 0.00%)      fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
        .                   // Avoid selecting for simple cases, such as builtin types.
      136 ( 0.00%)          if ty::util::is_trivially_const_drop(ty) {
        .                       return false;
        .                   }
        .           
        .                   let Some(drop_trait) = cx.tcx.lang_items().drop_trait() else {
        .                       // there is no way to define a type that needs non-const drop
        .                       // without having the lang item present.
        .                       return false;
        .                   };
-- line 159 ----------------------------------------
-- line 196 ----------------------------------------
        .                       let mut fcx = FulfillmentContext::new();
        .                       for nested in impl_src.nested_obligations() {
        .                           fcx.register_predicate_obligation(&infcx, nested);
        .                       }
        .           
        .                       // If we had any errors, then it's bad
        .                       !fcx.select_all_or_error(&infcx).is_empty()
        .                   })
      306 ( 0.00%)      }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   _: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   adt.has_non_const_dtor(cx.tcx)
        .               }
-- line 212 ----------------------------------------
-- line 223 ----------------------------------------
        .               }
        .           
        .               fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
        .                   // If *any* component of a composite data type does not implement `Structural{Partial,}Eq`,
        .                   // we know that at least some values of that type are not structural-match. I say "some"
        .                   // because that component may be part of an enum variant (e.g.,
        .                   // `Option::<NonStructuralMatchTy>::Some`), in which case some values of this type may be
        .                   // structural-match (`Option::None`).
      102 ( 0.00%)          traits::search_for_structural_match_violation(cx.body.span, cx.tcx, ty).is_some()
        .               }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   let ty = cx.tcx.mk_ty(ty::Adt(adt, substs));
        .                   !ty.is_structural_eq_shallow(cx.tcx)
        .               }
        .           }
        .           
        .           // FIXME: Use `mir::visit::Visitor` for the `in_*` functions if/when it supports early return.
        .           
        .           /// Returns `true` if this `Rvalue` contains qualif `Q`.
2,131,770 ( 0.04%)  pub fn in_rvalue<'tcx, Q, F>(
        .               cx: &ConstCx<'_, 'tcx>,
        .               in_local: &mut F,
        .               rvalue: &Rvalue<'tcx>,
        .           ) -> bool
        .           where
        .               Q: Qualif,
        .               F: FnMut(Local) -> bool,
        .           {
1,065,885 ( 0.02%)      match rvalue {
        .                   Rvalue::ThreadLocalRef(_) | Rvalue::NullaryOp(..) => {
        .                       Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx))
        .                   }
        .           
        .                   Rvalue::Discriminant(place) | Rvalue::Len(place) => {
        .                       in_place::<Q, _>(cx, in_local, place.as_ref())
        .                   }
        .           
        .                   Rvalue::Use(operand)
        .                   | Rvalue::Repeat(operand, _)
        .                   | Rvalue::UnaryOp(_, operand)
        .                   | Rvalue::Cast(_, operand, _)
  101,415 ( 0.00%)          | Rvalue::ShallowInitBox(operand, _) => in_operand::<Q, _>(cx, in_local, operand),
        .           
        .                   Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {
        .                       in_operand::<Q, _>(cx, in_local, lhs) || in_operand::<Q, _>(cx, in_local, rhs)
        .                   }
        .           
  148,616 ( 0.00%)          Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {
        .                       // Special-case reborrows to be more like a copy of the reference.
   54,032 ( 0.00%)              if let Some((place_base, ProjectionElem::Deref)) = place.as_ref().last_projection() {
   27,016 ( 0.00%)                  let base_ty = place_base.ty(cx.body, cx.tcx).ty;
   54,032 ( 0.00%)                  if let ty::Ref(..) = base_ty.kind() {
  155,342 ( 0.00%)                      return in_place::<Q, _>(cx, in_local, place_base);
        .                           }
        .                       }
        .           
  263,490 ( 0.00%)              in_place::<Q, _>(cx, in_local, place.as_ref())
        .                   }
        .           
        .                   Rvalue::Aggregate(kind, operands) => {
        .                       // Return early if we know that the struct or enum being constructed is always
        .                       // qualified.
  335,496 ( 0.01%)              if let AggregateKind::Adt(adt_did, _, substs, ..) = **kind {
        .                           let def = cx.tcx.adt_def(adt_did);
        .                           if Q::in_adt_inherently(cx, def, substs) {
        .                               return true;
        .                           }
        .                           if def.is_union() && Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx)) {
        .                               return true;
        .                           }
        .                       }
        .           
        .                       // Otherwise, proceed structurally...
1,323,700 ( 0.02%)              operands.iter().any(|o| in_operand::<Q, _>(cx, in_local, o))
        .                   }
        .               }
1,402,260 ( 0.03%)  }
        .           
        .           /// Returns `true` if this `Place` contains qualif `Q`.
2,045,864 ( 0.04%)  pub fn in_place<'tcx, Q, F>(cx: &ConstCx<'_, 'tcx>, in_local: &mut F, place: PlaceRef<'tcx>) -> bool
        .           where
        .               Q: Qualif,
        .               F: FnMut(Local) -> bool,
        .           {
   60,912 ( 0.00%)      let mut place = place;
        .               while let Some((place_base, elem)) = place.last_projection() {
        .                   match elem {
        .                       ProjectionElem::Index(index) if in_local(index) => return true,
        .           
        .                       ProjectionElem::Deref
        .                       | ProjectionElem::Field(_, _)
        .                       | ProjectionElem::ConstantIndex { .. }
        .                       | ProjectionElem::Subslice { .. }
-- line 320 ----------------------------------------
-- line 327 ----------------------------------------
        .                   if !Q::in_any_value_of_ty(cx, proj_ty) {
        .                       return false;
        .                   }
        .           
        .                   place = place_base;
        .               }
        .           
        .               assert!(place.projection.is_empty());
   33,840 ( 0.00%)      in_local(place.local)
        .           }
        .           
        .           /// Returns `true` if this `Operand` contains qualif `Q`.
2,778,593 ( 0.05%)  pub fn in_operand<'tcx, Q, F>(
        .               cx: &ConstCx<'_, 'tcx>,
        .               in_local: &mut F,
        .               operand: &Operand<'tcx>,
        .           ) -> bool
        .           where
        .               Q: Qualif,
        .               F: FnMut(Local) -> bool,
        .           {
  632,586 ( 0.01%)      let constant = match operand {
        .                   Operand::Copy(place) | Operand::Move(place) => {
  635,700 ( 0.01%)              return in_place::<Q, _>(cx, in_local, place.as_ref());
        .                   }
        .           
        .                   Operand::Constant(c) => c,
        .               };
        .           
        .               // Check the qualifs of the value of `const` items.
1,157,665 ( 0.02%)      if let Some(ct) = constant.literal.const_for_ty() {
  463,066 ( 0.01%)          if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val {
        .                       // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible
        .                       // only for `NeedsNonConstDrop` with precise drop checking. This is the only const
        .                       // check performed after the promotion. Verify that with an assertion.
       14 ( 0.00%)              assert!(promoted.is_none() || Q::ALLOW_PROMOTED);
        .                       // Don't peek inside trait associated constants.
       14 ( 0.00%)              if promoted.is_none() && cx.tcx.trait_of_item(def.did).is_none() {
      140 ( 0.00%)                  let qualifs = if let Some((did, param_did)) = def.as_const_arg() {
        .                               cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))
        .                           } else {
        .                               cx.tcx.at(constant.span).mir_const_qualif(def.did)
        .                           };
        .           
       14 ( 0.00%)                  if !Q::in_qualifs(&qualifs) {
        .                               return false;
        .                           }
        .           
        .                           // Just in case the type is more specific than
        .                           // the definition, e.g., impl associated const
        .                           // with type parameters, take it into account.
        .                       }
        .                   }
        .               }
        .               // Otherwise use the qualifs of the type.
  603,600 ( 0.01%)      Q::in_any_value_of_ty(cx, constant.literal.ty())
2,297,254 ( 0.04%)  }

  631,345 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   30,963 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   50,952 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
  108,806 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   13,861 ( 0.00%)          i += 2
        .               }
        .           
   50,952 ( 0.00%)      if i < count {
   33,946 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  726,645 ( 0.01%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
4,862,708 ( 0.09%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
1,567,833 ( 0.03%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  172,258 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   68,957 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   68,957 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  689,570 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  551,656 ( 0.01%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  620,613 ( 0.01%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  324,717 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  275,828 ( 0.00%)          self.processed += BUFFER_SIZE;
  137,914 ( 0.00%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
   30,984 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  180,319 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   22,544 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   43,923 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   28,170 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   42,300 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    8,460 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
   25,380 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    8,460 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
   16,920 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   61,974 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   70,434 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  123,948 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
   16,920 ( 0.00%)          let input_left = length - processed;
   23,532 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
    7,954 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    7,954 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
    7,954 ( 0.00%)              self.state.v0 ^= elem;
   15,908 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    8,460 ( 0.00%)          self.nbuf = extra_bytes_left;
   42,300 ( 0.00%)          self.processed += nbuf + processed;
   50,760 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   10,788 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   14,384 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   10,736 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   10,736 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   10,736 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
    7,192 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    2,777 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
    9,719 ( 0.00%)          let length = self.processed + self.nbuf;
    6,690 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
    3,345 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
    3,345 ( 0.00%)          state.v0 ^= b;
        .           
    3,345 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   11,214 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
    4,522 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
    4,522 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
2,636,997 ( 0.05%)          compress!(state);
2,935,453 ( 0.05%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
   22,424 ( 0.00%)          compress!(state);
   22,424 ( 0.00%)          compress!(state);
   22,424 ( 0.00%)          compress!(state);
   19,080 ( 0.00%)          compress!(state);
        .               }
        .           }

  422,561 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .           
        .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
        .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
        .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
        .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key, like the tree
        .               /// in a `BTreeMap` is.
  921,554 ( 0.02%)      pub fn search_tree<Q: ?Sized>(
        .                   mut self,
        .                   key: &Q,
        .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   loop {
        .                       self = match self.search_node(key) {
        .                           Found(handle) => return Found(handle),
  101,208 ( 0.00%)                  GoDown(handle) => match handle.force() {
        .                               Leaf(leaf) => return GoDown(leaf),
        .                               Internal(internal) => internal.descend(),
        .                           },
        .                       }
        .                   }
  453,181 ( 0.01%)      }
        .           
        .               /// Descends to the nearest node where the edge matching the lower bound
        .               /// of the range is different from the edge matching the upper bound, i.e.,
        .               /// the nearest node that has at least one key contained in the range.
        .               ///
        .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
        .               /// edge indices in the node delimiting the range, and the corresponding
        .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
        .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   let node = self.reborrow();
        .                   let keys = node.keys();
        .                   debug_assert!(start_index <= keys.len());
1,673,847 ( 0.03%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
8,078,369 ( 0.15%)              match key.cmp(k.borrow()) {
        .                           Ordering::Greater => {}
        .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
        .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
        .                       }
        .                   }
        .                   IndexResult::Edge(keys.len())
        .               }
        .           
-- line 219 ----------------------------------------

3,548,687 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs
--------------------------------------------------------------------------------
Ir                  

-- line 20 ----------------------------------------
         .               // the value lives here, at offset 0, and that allocation definitely is an `AllocKind::Memory`
         .               // (so you can use `AllocMap::unwrap_memory`).
         .               pub alloc_id: AllocId,
         .               pub ty: Ty<'tcx>,
         .           }
         .           
         .           /// Represents a constant value in Rust. `Scalar` and `Slice` are optimizations for
         .           /// array length computations, enum discriminants and the pattern matching logic.
10,626,952 ( 0.19%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]
       117 ( 0.00%)  #[derive(HashStable)]
         .           pub enum ConstValue<'tcx> {
         .               /// Used only for types with `layout::abi::Scalar` ABI and ZSTs.
         .               ///
         .               /// Not using the enum `Value` to encode that this must not be `Uninit`.
         .               Scalar(Scalar),
         .           
         .               /// Used only for `&[u8]` and `&str`
       268 ( 0.00%)      Slice { data: &'tcx Allocation, start: usize, end: usize },
         .           
         .               /// A value not represented/representable by `Scalar` or `Slice`
         .               ByRef {
         .                   /// The backing memory of the value, may contain more memory than needed for just the value
         .                   /// in order to share `Allocation`s between values
        22 ( 0.00%)          alloc: &'tcx Allocation,
         .                   /// Offset into `alloc`
         3 ( 0.00%)          offset: Size,
         .               },
         .           }
         .           
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(ConstValue<'_>, 32);
         .           
         .           impl<'a, 'tcx> Lift<'tcx> for ConstValue<'a> {
         .               type Lifted = ConstValue<'tcx>;
-- line 53 ----------------------------------------
-- line 62 ----------------------------------------
         .                       }
         .                   })
         .               }
         .           }
         .           
         .           impl<'tcx> ConstValue<'tcx> {
         .               #[inline]
         .               pub fn try_to_scalar(&self) -> Option<Scalar<AllocId>> {
10,341,130 ( 0.19%)          match *self {
         .                       ConstValue::ByRef { .. } | ConstValue::Slice { .. } => None,
     8,115 ( 0.00%)              ConstValue::Scalar(val) => Some(val),
         .                   }
         .               }
         .           
         .               pub fn try_to_scalar_int(&self) -> Option<ScalarInt> {
         .                   Some(self.try_to_scalar()?.assert_int())
         .               }
         .           
        60 ( 0.00%)      pub fn try_to_bits(&self, size: Size) -> Option<u128> {
       510 ( 0.00%)          self.try_to_scalar_int()?.to_bits(size).ok()
        90 ( 0.00%)      }
         .           
         .               pub fn try_to_bool(&self) -> Option<bool> {
         .                   self.try_to_scalar_int()?.try_into().ok()
         .               }
         .           
    16,122 ( 0.00%)      pub fn try_to_machine_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {
   120,915 ( 0.00%)          self.try_to_scalar_int()?.try_to_machine_usize(tcx).ok()
    24,183 ( 0.00%)      }
         .           
       300 ( 0.00%)      pub fn try_to_bits_for_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   param_env: ParamEnv<'tcx>,
         .                   ty: Ty<'tcx>,
         .               ) -> Option<u128> {
        90 ( 0.00%)          let size = tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;
        60 ( 0.00%)          self.try_to_bits(size)
       240 ( 0.00%)      }
         .           
         .               pub fn from_bool(b: bool) -> Self {
         .                   ConstValue::Scalar(Scalar::from_bool(b))
         .               }
         .           
         .               pub fn from_u64(i: u64) -> Self {
         .                   ConstValue::Scalar(Scalar::from_u64(i))
         .               }
-- line 108 ----------------------------------------
-- line 114 ----------------------------------------
         .           
         .           /// A `Scalar` represents an immediate, primitive value existing outside of a
         .           /// `memory::Allocation`. It is in many ways like a small chunk of an `Allocation`, up to 16 bytes in
         .           /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes
         .           /// of a simple value or a pointer into another `Allocation`
         .           ///
         .           /// These variants would be private if there was a convenient way to achieve that in Rust.
         .           /// Do *not* match on a `Scalar`! Use the various `to_*` methods instead.
 8,992,312 ( 0.16%)  #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, TyEncodable, TyDecodable, Hash)]
        18 ( 0.00%)  #[derive(HashStable)]
         .           pub enum Scalar<Tag = AllocId> {
         .               /// The raw bytes of a simple value.
 4,647,914 ( 0.08%)      Int(ScalarInt),
         .           
         .               /// A pointer into an `Allocation`. An `Allocation` in the `memory` module has a list of
         .               /// relocations, but a `Scalar` is only large enough to contain one, so we just represent the
         .               /// relocation and its associated offset together as a `Pointer` here.
         .               ///
         .               /// We also store the size of the pointer, such that a `Scalar` always knows how big it is.
         .               /// The size is always the pointer size of the current target, but this is not information
         .               /// that we always have readily available.
        17 ( 0.00%)      Ptr(Pointer<Tag>, u8),
         .           }
         .           
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(Scalar, 24);
         .           
         .           // We want the `Debug` output to be readable as it is used by `derive(Debug)` for
         .           // all the Miri types.
         .           impl<Tag: Provenance> fmt::Debug for Scalar<Tag> {
-- line 143 ----------------------------------------
-- line 179 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<Tag> Scalar<Tag> {
         .               pub const ZST: Self = Scalar::Int(ScalarInt::ZST);
         .           
         .               #[inline(always)]
         .               pub fn from_pointer(ptr: Pointer<Tag>, cx: &impl HasDataLayout) -> Self {
    95,294 ( 0.00%)          Scalar::Ptr(ptr, u8::try_from(cx.pointer_size().bytes()).unwrap())
         .               }
         .           
         .               /// Create a Scalar from a pointer with an `Option<_>` tag (where `None` represents a plain integer).
    27,184 ( 0.00%)      pub fn from_maybe_pointer(ptr: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
    27,184 ( 0.00%)          match ptr.into_parts() {
         .                       (Some(tag), offset) => Scalar::from_pointer(Pointer::new(tag, offset), cx),
         .                       (None, offset) => {
         .                           Scalar::Int(ScalarInt::try_from_uint(offset.bytes(), cx.pointer_size()).unwrap())
         .                       }
         .                   }
    54,368 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn null_ptr(cx: &impl HasDataLayout) -> Self {
         .                   Scalar::Int(ScalarInt::null(cx.pointer_size()))
         .               }
         .           
         .               #[inline]
         .               pub fn from_bool(b: bool) -> Self {
-- line 206 ----------------------------------------
-- line 213 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn try_from_uint(i: impl Into<u128>, size: Size) -> Option<Self> {
         .                   ScalarInt::try_from_uint(i, size).map(Scalar::Int)
         .               }
         .           
         .               #[inline]
    20,322 ( 0.00%)      pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {
   183,432 ( 0.00%)          let i = i.into();
         .                   Self::try_from_uint(i, size)
         .                       .unwrap_or_else(|| bug!("Unsigned value {:#x} does not fit in {} bits", i, size.bits()))
    27,096 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn from_u8(i: u8) -> Self {
         .                   Scalar::Int(i.into())
         .               }
         .           
         .               #[inline]
         .               pub fn from_u16(i: u16) -> Self {
-- line 233 ----------------------------------------
-- line 241 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn from_u64(i: u64) -> Self {
         .                   Scalar::Int(i.into())
         .               }
         .           
         .               #[inline]
         .               pub fn from_machine_usize(i: u64, cx: &impl HasDataLayout) -> Self {
    33,917 ( 0.00%)          Self::from_uint(i, cx.data_layout().pointer_size)
         .               }
         .           
         .               #[inline]
         .               pub fn try_from_int(i: impl Into<i128>, size: Size) -> Option<Self> {
         .                   ScalarInt::try_from_int(i, size).map(Scalar::Int)
         .               }
         .           
         .               #[inline]
-- line 257 ----------------------------------------
-- line 288 ----------------------------------------
         .           
         .               /// This is almost certainly not the method you want!  You should dispatch on the type
         .               /// and use `to_{u8,u16,...}`/`scalar_to_ptr` to perform ptr-to-int / int-to-ptr casts as needed.
         .               ///
         .               /// This method only exists for the benefit of low-level operations that truly need to treat the
         .               /// scalar in whatever form it is.
         .               #[inline]
         .               pub fn to_bits_or_ptr_internal(self, target_size: Size) -> Result<u128, Pointer<Tag>> {
   242,499 ( 0.00%)          assert_ne!(target_size.bytes(), 0, "you should never look at the bits of a ZST");
   161,666 ( 0.00%)          match self {
   233,067 ( 0.00%)              Scalar::Int(int) => Ok(int.assert_bits(target_size)),
   101,943 ( 0.00%)              Scalar::Ptr(ptr, sz) => {
   135,932 ( 0.00%)                  assert_eq!(target_size.bytes(), u64::from(sz));
         .                           Err(ptr)
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx, Tag: Provenance> Scalar<Tag> {
         .               /// Fundamental scalar-to-int (cast) operation. Many convenience wrappers exist below, that you
         .               /// likely want to use instead.
         .               ///
         .               /// Will perform ptr-to-int casts if needed and possible.
         .               /// If that fails, we know the offset is relative, so we return an "erased" Scalar
         .               /// (which is useful for error messages but not much else).
         .               #[inline]
         .               pub fn try_to_int(self) -> Result<ScalarInt, Scalar<AllocId>> {
 5,352,557 ( 0.10%)          match self {
         4 ( 0.00%)              Scalar::Int(int) => Ok(int),
         .                       Scalar::Ptr(ptr, sz) => {
         .                           if Tag::OFFSET_IS_ADDR {
         .                               Ok(ScalarInt::try_from_uint(ptr.offset.bytes(), Size::from_bytes(sz)).unwrap())
         .                           } else {
         .                               // We know `offset` is relative, since `OFFSET_IS_ADDR == false`.
         .                               let (tag, offset) = ptr.into_parts();
         .                               Err(Scalar::Ptr(Pointer::new(tag.get_alloc_id(), offset), sz))
         .                           }
         .                       }
         .                   }
         .               }
         .           
         .               #[inline(always)]
         .               pub fn assert_int(self) -> ScalarInt {
 3,108,564 ( 0.06%)          self.try_to_int().unwrap()
         .               }
         .           
         .               /// This throws UB (instead of ICEing) on a size mismatch since size mismatches can arise in
         .               /// Miri when someone declares a function that we shim (such as `malloc`) with a wrong type.
         .               #[inline]
   189,488 ( 0.00%)      pub fn to_bits(self, target_size: Size) -> InterpResult<'tcx, u128> {
   142,404 ( 0.00%)          assert_ne!(target_size.bytes(), 0, "you should never look at the bits of a ZST");
 1,069,590 ( 0.02%)          self.try_to_int().map_err(|_| err_unsup!(ReadPointerAsBytes))?.to_bits(target_size).map_err(
         .                       |size| {
         .                           err_ub!(ScalarSizeMismatch {
         .                               target_size: target_size.bytes(),
         .                               data_size: size.bytes(),
         .                           })
         .                           .into()
         .                       },
         .                   )
   236,860 ( 0.00%)      }
         .           
         .               #[inline(always)]
         .               pub fn assert_bits(self, target_size: Size) -> u128 {
         7 ( 0.00%)          self.to_bits(target_size).unwrap()
         .               }
         .           
        36 ( 0.00%)      pub fn to_bool(self) -> InterpResult<'tcx, bool> {
       105 ( 0.00%)          let val = self.to_u8()?;
        46 ( 0.00%)          match val {
         .                       0 => Ok(false),
         .                       1 => Ok(true),
         .                       _ => throw_ub!(InvalidBool(val)),
         .                   }
       227 ( 0.00%)      }
         .           
    23,906 ( 0.00%)      pub fn to_char(self) -> InterpResult<'tcx, char> {
   262,966 ( 0.00%)          let val = self.to_u32()?;
    47,812 ( 0.00%)          match std::char::from_u32(val) {
         .                       Some(c) => Ok(c),
         .                       None => throw_ub!(InvalidChar(val)),
         .                   }
   119,530 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn to_unsigned_with_bit_width(self, bits: u64) -> InterpResult<'static, u128> {
         .                   let sz = Size::from_bits(bits);
   119,640 ( 0.00%)          self.to_bits(sz)
         .               }
         .           
         .               /// Converts the scalar to produce a `u8`. Fails if the scalar is a pointer.
        60 ( 0.00%)      pub fn to_u8(self) -> InterpResult<'static, u8> {
         .                   self.to_unsigned_with_bit_width(8).map(|v| u8::try_from(v).unwrap())
        75 ( 0.00%)      }
         .           
         .               /// Converts the scalar to produce a `u16`. Fails if the scalar is a pointer.
         .               pub fn to_u16(self) -> InterpResult<'static, u16> {
         .                   self.to_unsigned_with_bit_width(16).map(|v| u16::try_from(v).unwrap())
         .               }
         .           
         .               /// Converts the scalar to produce a `u32`. Fails if the scalar is a pointer.
    71,718 ( 0.00%)      pub fn to_u32(self) -> InterpResult<'static, u32> {
         .                   self.to_unsigned_with_bit_width(32).map(|v| u32::try_from(v).unwrap())
    95,624 ( 0.00%)      }
         .           
         .               /// Converts the scalar to produce a `u64`. Fails if the scalar is a pointer.
         .               pub fn to_u64(self) -> InterpResult<'static, u64> {
         .                   self.to_unsigned_with_bit_width(64).map(|v| u64::try_from(v).unwrap())
         .               }
         .           
         .               /// Converts the scalar to produce a `u128`. Fails if the scalar is a pointer.
         .               pub fn to_u128(self) -> InterpResult<'static, u128> {
         .                   self.to_unsigned_with_bit_width(128)
         .               }
         .           
        56 ( 0.00%)      pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {
   439,963 ( 0.01%)          let b = self.to_bits(cx.data_layout().pointer_size)?;
         .                   Ok(u64::try_from(b).unwrap())
        70 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn to_signed_with_bit_width(self, bits: u64) -> InterpResult<'static, i128> {
         .                   let sz = Size::from_bits(bits);
         .                   let b = self.to_bits(sz)?;
         .                   Ok(sz.sign_extend(b) as i128)
         .               }
         .           
-- line 415 ----------------------------------------
-- line 453 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn to_f64(self) -> InterpResult<'static, Double> {
         .                   // Going through `u64` to check size and truncation.
         .                   Ok(Double::from_bits(self.to_u64()?.into()))
         .               }
         .           }
         .           
        14 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, TyEncodable, TyDecodable, HashStable, Hash)]
         .           pub enum ScalarMaybeUninit<Tag = AllocId> {
         .               Scalar(Scalar<Tag>),
         .               Uninit,
         .           }
         .           
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(ScalarMaybeUninit, 24);
         .           
-- line 469 ----------------------------------------
-- line 502 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn from_maybe_pointer(ptr: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
         .                   ScalarMaybeUninit::Scalar(Scalar::from_maybe_pointer(ptr, cx))
         .               }
         .           
         .               #[inline]
         .               pub fn check_init(self) -> InterpResult<'static, Scalar<Tag>> {
   187,380 ( 0.00%)          match self {
    90,693 ( 0.00%)              ScalarMaybeUninit::Scalar(scalar) => Ok(scalar),
         .                       ScalarMaybeUninit::Uninit => throw_ub!(InvalidUninitBytes(None)),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx, Tag: Provenance> ScalarMaybeUninit<Tag> {
         .               #[inline(always)]
         .               pub fn to_bool(self) -> InterpResult<'tcx, bool> {
        42 ( 0.00%)          self.check_init()?.to_bool()
         .               }
         .           
         .               #[inline(always)]
         .               pub fn to_char(self) -> InterpResult<'tcx, char> {
   143,436 ( 0.00%)          self.check_init()?.to_char()
         .               }
         .           
         .               #[inline(always)]
         .               pub fn to_f32(self) -> InterpResult<'tcx, Single> {
         .                   self.check_init()?.to_f32()
         .               }
         .           
         .               #[inline(always)]
-- line 533 ----------------------------------------

 7,467,410 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/matches/test.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use rustc_target::abi::VariantIdx;
        .           
        .           use std::cmp::Ordering;
        .           
        .           impl<'a, 'tcx> Builder<'a, 'tcx> {
        .               /// Identifies what test is needed to decide if `match_pair` is applicable.
        .               ///
        .               /// It is a bug to call this with a not-fully-simplified pattern.
   10,400 ( 0.00%)      pub(super) fn test<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> Test<'tcx> {
    9,100 ( 0.00%)          match *match_pair.pattern.kind {
      288 ( 0.00%)              PatKind::Variant { ref adt_def, substs: _, variant_index: _, subpatterns: _ } => Test {
        .                           span: match_pair.pattern.span,
        .                           kind: TestKind::Switch {
       36 ( 0.00%)                      adt_def,
        .                               variants: BitSet::new_empty(adt_def.variants.len()),
        .                           },
        .                       },
        .           
       17 ( 0.00%)              PatKind::Constant { .. } if is_switch_ty(match_pair.pattern.ty) => {
        .                           // For integers, we use a `SwitchInt` match, which allows
        .                           // us to handle more cases.
      119 ( 0.00%)                  Test {
       17 ( 0.00%)                      span: match_pair.pattern.span,
        .                               kind: TestKind::SwitchInt {
        .                                   switch_ty: match_pair.pattern.ty,
        .           
        .                                   // these maps are empty to start; cases are
        .                                   // added below in add_cases_to_switch
        .                                   options: Default::default(),
        .                               },
        .                           }
        .                       }
        .           
        .                       PatKind::Constant { value } => Test {
        .                           span: match_pair.pattern.span,
        .                           kind: TestKind::Eq { value, ty: match_pair.pattern.ty },
        .                       },
        .           
    1,247 ( 0.00%)              PatKind::Range(range) => {
    2,494 ( 0.00%)                  assert_eq!(range.lo.ty, match_pair.pattern.ty);
    1,247 ( 0.00%)                  assert_eq!(range.hi.ty, match_pair.pattern.ty);
    8,729 ( 0.00%)                  Test { span: match_pair.pattern.span, kind: TestKind::Range(range) }
        .                       }
        .           
        .                       PatKind::Slice { ref prefix, ref slice, ref suffix } => {
        .                           let len = prefix.len() + suffix.len();
        .                           let op = if slice.is_some() { BinOp::Ge } else { BinOp::Eq };
        .                           Test { span: match_pair.pattern.span, kind: TestKind::Len { len: len as u64, op } }
        .                       }
        .           
-- line 72 ----------------------------------------
-- line 74 ----------------------------------------
        .           
        .                       PatKind::AscribeUserType { .. }
        .                       | PatKind::Array { .. }
        .                       | PatKind::Wild
        .                       | PatKind::Binding { .. }
        .                       | PatKind::Leaf { .. }
        .                       | PatKind::Deref { .. } => self.error_simplifyable(match_pair),
        .                   }
   10,400 ( 0.00%)      }
        .           
        .               pub(super) fn add_cases_to_switch<'pat>(
        .                   &mut self,
        .                   test_place: &PlaceBuilder<'tcx>,
        .                   candidate: &Candidate<'pat, 'tcx>,
        .                   switch_ty: Ty<'tcx>,
        .                   options: &mut FxIndexMap<&'tcx ty::Const<'tcx>, u128>,
        .               ) -> bool {
        .                   let Some(match_pair) = candidate.match_pairs.iter().find(|mp| mp.place == *test_place) else {
        .                       return false;
        .                   };
        .           
   16,088 ( 0.00%)          match *match_pair.pattern.kind {
      801 ( 0.00%)              PatKind::Constant { value } => {
    2,403 ( 0.00%)                  options
        .                               .entry(value)
    9,597 ( 0.00%)                      .or_insert_with(|| value.eval_bits(self.tcx, self.param_env, switch_ty));
        .                           true
        .                       }
        .                       PatKind::Variant { .. } => {
        .                           panic!("you should have called add_variants_to_switch instead!");
        .                       }
    6,050 ( 0.00%)              PatKind::Range(range) => {
        .                           // Check that none of the switch values are in the range.
    4,840 ( 0.00%)                  self.values_not_contained_in_range(range, options).unwrap_or(false)
        .                       }
        .                       PatKind::Slice { .. }
        .                       | PatKind::Array { .. }
        .                       | PatKind::Wild
        .                       | PatKind::Or { .. }
        .                       | PatKind::Binding { .. }
        .                       | PatKind::AscribeUserType { .. }
        .                       | PatKind::Leaf { .. }
-- line 115 ----------------------------------------
-- line 128 ----------------------------------------
        .               ) -> bool {
        .                   let match_pair = match candidate.match_pairs.iter().find(|mp| mp.place == *test_place) {
        .                       Some(match_pair) => match_pair,
        .                       _ => {
        .                           return false;
        .                       }
        .                   };
        .           
      312 ( 0.00%)          match *match_pair.pattern.kind {
       78 ( 0.00%)              PatKind::Variant { adt_def: _, variant_index, .. } => {
        .                           // We have a pattern testing for variant `variant_index`
        .                           // set the corresponding index to true
        .                           variants.insert(variant_index);
        .                           true
        .                       }
        .                       _ => {
        .                           // don't know how to add these patterns to a switch
        .                           false
-- line 145 ----------------------------------------
-- line 152 ----------------------------------------
        .                   match_start_span: Span,
        .                   scrutinee_span: Span,
        .                   block: BasicBlock,
        .                   place_builder: PlaceBuilder<'tcx>,
        .                   test: &Test<'tcx>,
        .                   make_target_blocks: impl FnOnce(&mut Self) -> Vec<BasicBlock>,
        .               ) {
        .                   let place: Place<'tcx>;
    2,600 ( 0.00%)          if let Ok(test_place_builder) =
    2,600 ( 0.00%)              place_builder.try_upvars_resolved(self.tcx, self.typeck_results)
        .                   {
   14,300 ( 0.00%)              place = test_place_builder.into_place(self.tcx, self.typeck_results);
        .                   } else {
        .                       return;
        .                   }
        .                   debug!(
        .                       "perform_test({:?}, {:?}: {:?}, {:?})",
        .                       block,
        .                       place,
        .                       place.ty(&self.local_decls, self.tcx),
        .                       test
        .                   );
        .           
    1,300 ( 0.00%)          let source_info = self.source_info(test.span);
    6,500 ( 0.00%)          match test.kind {
       36 ( 0.00%)              TestKind::Switch { adt_def, ref variants } => {
      540 ( 0.00%)                  let target_blocks = make_target_blocks(self);
        .                           // Variants is a BitVec of indexes into adt_def.variants.
        .                           let num_enum_variants = adt_def.variants.len();
        .                           debug_assert_eq!(target_blocks.len(), num_enum_variants + 1);
       72 ( 0.00%)                  let otherwise_block = *target_blocks.last().unwrap();
        .                           let tcx = self.tcx;
       72 ( 0.00%)                  let switch_targets = SwitchTargets::new(
        .                               adt_def.discriminants(tcx).filter_map(|(idx, discr)| {
       82 ( 0.00%)                          if variants.contains(idx) {
        .                                       debug_assert_ne!(
        .                                           target_blocks[idx.index()],
        .                                           otherwise_block,
        .                                           "no canididates for tested discriminant: {:?}",
        .                                           discr,
        .                                       );
      154 ( 0.00%)                              Some((discr.val, target_blocks[idx.index()]))
        .                                   } else {
        .                                       debug_assert_eq!(
        .                                           target_blocks[idx.index()],
        .                                           otherwise_block,
        .                                           "found canididates for untested discriminant: {:?}",
        .                                           discr,
        .                                       );
        .                                       None
        .                                   }
        .                               }),
        .                               otherwise_block,
        .                           );
        .                           debug!("num_enum_variants: {}, variants: {:?}", num_enum_variants, variants);
      252 ( 0.00%)                  let discr_ty = adt_def.repr.discr_type().to_ty(tcx);
      144 ( 0.00%)                  let discr = self.temp(discr_ty, test.span);
        .                           self.cfg.push_assign(
        .                               block,
        .                               self.source_info(scrutinee_span),
        .                               discr,
        .                               Rvalue::Discriminant(place),
        .                           );
        .                           self.cfg.terminate(
        .                               block,
-- line 216 ----------------------------------------
-- line 218 ----------------------------------------
        .                               TerminatorKind::SwitchInt {
        .                                   discr: Operand::Move(discr),
        .                                   switch_ty: discr_ty,
        .                                   targets: switch_targets,
        .                               },
        .                           );
        .                       }
        .           
       17 ( 0.00%)              TestKind::SwitchInt { switch_ty, ref options } => {
      238 ( 0.00%)                  let target_blocks = make_target_blocks(self);
       34 ( 0.00%)                  let terminator = if *switch_ty.kind() == ty::Bool {
        .                               assert!(!options.is_empty() && options.len() <= 2);
        .                               if let [first_bb, second_bb] = *target_blocks {
        .                                   let (true_bb, false_bb) = match options[0] {
        .                                       1 => (first_bb, second_bb),
        .                                       0 => (second_bb, first_bb),
        .                                       v => span_bug!(test.span, "expected boolean value but got {:?}", v),
        .                                   };
        .                                   TerminatorKind::if_(self.tcx, Operand::Copy(place), true_bb, false_bb)
        .                               } else {
        .                                   bug!("`TestKind::SwitchInt` on `bool` should have two targets")
        .                               }
        .                           } else {
        .                               // The switch may be inexhaustive so we have a catch all block
        .                               debug_assert_eq!(options.len() + 1, target_blocks.len());
       17 ( 0.00%)                      let otherwise_block = *target_blocks.last().unwrap();
       17 ( 0.00%)                      let switch_targets = SwitchTargets::new(
        .                                   options.values().copied().zip(target_blocks),
        .                                   otherwise_block,
        .                               );
      119 ( 0.00%)                      TerminatorKind::SwitchInt {
        .                                   discr: Operand::Copy(place),
        .                                   switch_ty,
      102 ( 0.00%)                          targets: switch_targets,
        .                               }
        .                           };
        .                           self.cfg.terminate(block, self.source_info(match_start_span), terminator);
       17 ( 0.00%)              }
        .           
        .                       TestKind::Eq { value, ty } => {
        .                           if !ty.is_scalar() {
        .                               // Use `PartialEq::eq` instead of `BinOp::Eq`
        .                               // (the binop can only handle primitives)
        .                               self.non_scalar_compare(
        .                                   block,
        .                                   make_target_blocks,
-- line 263 ----------------------------------------
-- line 272 ----------------------------------------
        .                               let val = Operand::Copy(place);
        .                               self.compare(block, success, fail, source_info, BinOp::Eq, expect, val);
        .                           } else {
        .                               bug!("`TestKind::Eq` should have two target blocks");
        .                           }
        .                       }
        .           
        .                       TestKind::Range(PatRange { ref lo, ref hi, ref end }) => {
    2,494 ( 0.00%)                  let lower_bound_success = self.cfg.start_new_block();
   17,458 ( 0.00%)                  let target_blocks = make_target_blocks(self);
        .           
        .                           // Test `val` by computing `lo <= val && val <= hi`, using primitive comparisons.
    1,247 ( 0.00%)                  let lo = self.literal_operand(test.span, lo);
    1,247 ( 0.00%)                  let hi = self.literal_operand(test.span, hi);
        .                           let val = Operand::Copy(place);
        .           
    8,729 ( 0.00%)                  if let [success, fail] = *target_blocks {
   18,705 ( 0.00%)                      self.compare(
        .                                   block,
        .                                   lower_bound_success,
        .                                   fail,
        .                                   source_info,
        .                                   BinOp::Le,
    3,741 ( 0.00%)                          lo,
        .                                   val.clone(),
        .                               );
    3,741 ( 0.00%)                      let op = match *end {
        .                                   RangeEnd::Included => BinOp::Le,
        .                                   RangeEnd::Excluded => BinOp::Lt,
        .                               };
   26,187 ( 0.00%)                      self.compare(lower_bound_success, success, fail, source_info, op, val, hi);
        .                           } else {
        .                               bug!("`TestKind::Range` should have two target blocks");
        .                           }
        .                       }
        .           
        .                       TestKind::Len { len, op } => {
        .                           let target_blocks = make_target_blocks(self);
        .           
-- line 310 ----------------------------------------
-- line 332 ----------------------------------------
        .                           } else {
        .                               bug!("`TestKind::Len` should have two target blocks");
        .                           }
        .                       }
        .                   }
        .               }
        .           
        .               /// Compare using the provided built-in comparison operator
   37,410 ( 0.00%)      fn compare(
        .                   &mut self,
        .                   block: BasicBlock,
        .                   success_block: BasicBlock,
        .                   fail_block: BasicBlock,
        .                   source_info: SourceInfo,
        .                   op: BinOp,
        .                   left: Operand<'tcx>,
        .                   right: Operand<'tcx>,
        .               ) {
    4,988 ( 0.00%)          let bool_ty = self.tcx.types.bool;
    4,988 ( 0.00%)          let result = self.temp(bool_ty, source_info.span);
        .           
        .                   // result = op(left, right)
        .                   self.cfg.push_assign(
        .                       block,
        .                       source_info,
        .                       result,
   19,952 ( 0.00%)              Rvalue::BinaryOp(op, Box::new((left, right))),
        .                   );
        .           
        .                   // branch based on result
        .                   self.cfg.terminate(
        .                       block,
        .                       source_info,
   22,446 ( 0.00%)              TerminatorKind::if_(self.tcx, Operand::Move(result), success_block, fail_block),
        .                   );
   19,952 ( 0.00%)      }
        .           
        .               /// Compare two `&T` values using `<T as std::compare::PartialEq>::eq`
        .               fn non_scalar_compare(
        .                   &mut self,
        .                   block: BasicBlock,
        .                   make_target_blocks: impl FnOnce(&mut Self) -> Vec<BasicBlock>,
        .                   source_info: SourceInfo,
        .                   value: &'tcx ty::Const<'tcx>,
-- line 375 ----------------------------------------
-- line 508 ----------------------------------------
        .                   // afaik, there can be at most one. (In the future, if we
        .                   // adopted a more general `@` operator, there might be more
        .                   // than one, but it'd be very unusual to have two sides that
        .                   // both require tests; you'd expect one side to be simplified
        .                   // away.)
        .                   let (match_pair_index, match_pair) =
        .                       candidate.match_pairs.iter().enumerate().find(|&(_, mp)| mp.place == *test_place)?;
        .           
3,108,486 ( 0.06%)          match (&test.kind, &*match_pair.pattern.kind) {
        .                       // If we are performing a variant switch, then this
        .                       // informs variant patterns, but nothing else.
        .                       (
      156 ( 0.00%)                  &TestKind::Switch { adt_def: tested_adt_def, .. },
      156 ( 0.00%)                  &PatKind::Variant { adt_def, variant_index, ref subpatterns, .. },
        .                       ) => {
      390 ( 0.00%)                  assert_eq!(adt_def, tested_adt_def);
        .                           self.candidate_after_variant_switch(
        .                               match_pair_index,
        .                               adt_def,
        .                               variant_index,
        .                               subpatterns,
        .                               candidate,
        .                           );
        .                           Some(variant_index.as_usize())
-- line 531 ----------------------------------------
-- line 535 ----------------------------------------
        .           
        .                       // If we are performing a switch over integers, then this informs integer
        .                       // equality, but nothing else.
        .                       //
        .                       // FIXME(#29623) we could use PatKind::Range to rule
        .                       // things out here, in some cases.
        .                       (
        .                           &TestKind::SwitchInt { switch_ty: _, ref options },
      801 ( 0.00%)                  &PatKind::Constant { ref value },
    3,204 ( 0.00%)              ) if is_switch_ty(match_pair.pattern.ty) => {
    2,403 ( 0.00%)                  let index = options.get_index_of(value).unwrap();
        .                           self.candidate_without_match_pair(match_pair_index, candidate);
        .                           Some(index)
        .                       }
        .           
    4,840 ( 0.00%)              (&TestKind::SwitchInt { switch_ty: _, ref options }, &PatKind::Range(range)) => {
        .                           let not_contained =
    4,840 ( 0.00%)                      self.values_not_contained_in_range(range, options).unwrap_or(false);
        .           
    3,630 ( 0.00%)                  if not_contained {
        .                               // No switch values are contained in the pattern range,
        .                               // so the pattern can be matched only if this test fails.
        .                               let otherwise = options.len();
        .                               Some(otherwise)
        .                           } else {
        .                               None
        .                           }
        .                       }
-- line 562 ----------------------------------------
-- line 633 ----------------------------------------
        .                               (Ordering::Greater, &Some(_)) => {
        .                                   // test_len < pat_len, and is therefore less
        .                                   // strict. This can still go both ways.
        .                                   None
        .                               }
        .                           }
        .                       }
        .           
2,031,696 ( 0.04%)              (&TestKind::Range(test), &PatKind::Range(pat)) => {
    4,988 ( 0.00%)                  if test == pat {
        .                               self.candidate_without_match_pair(match_pair_index, candidate);
        .                               return Some(0);
        .                           }
        .           
        .                           let no_overlap = (|| {
        .                               use rustc_hir::RangeEnd::*;
        .                               use std::cmp::Ordering::*;
        .           
  505,430 ( 0.01%)                      let tcx = self.tcx;
        .           
  252,715 ( 0.00%)                      let test_ty = test.lo.ty;
1,769,005 ( 0.03%)                      let lo = compare_const_vals(tcx, test.lo, pat.hi, self.param_env, test_ty)?;
2,021,720 ( 0.04%)                      let hi = compare_const_vals(tcx, test.hi, pat.lo, self.param_env, test_ty)?;
        .           
1,762,729 ( 0.03%)                      match (test.end, pat.end, lo, hi) {
        .                                   // pat < test
        .                                   (_, _, Greater, _) |
        .                                   (_, Excluded, Equal, _) |
        .                                   // pat > test
        .                                   (_, _, _, Less) |
        .                                   (Excluded, _, _, Equal) => Some(true),
        .                                   _ => Some(false),
        .                               }
        .                           })();
        .           
  505,430 ( 0.01%)                  if let Some(true) = no_overlap {
        .                               // Testing range does not overlap with pattern range,
        .                               // so the pattern can be matched only if this test fails.
        .                               Some(1)
        .                           } else {
        .                               None
        .                           }
        .                       }
        .           
   22,626 ( 0.00%)              (&TestKind::Range(range), &PatKind::Constant { value }) => {
   30,168 ( 0.00%)                  if let Some(false) = self.const_range_contains(range, value) {
        .                               // `value` is not contained in the testing range,
        .                               // so `value` can be matched only if this test fails.
        .                               Some(1)
        .                           } else {
        .                               None
        .                           }
        .                       }
        .           
-- line 686 ----------------------------------------
-- line 712 ----------------------------------------
        .                   }
        .               }
        .           
        .               fn candidate_without_match_pair(
        .                   &mut self,
        .                   match_pair_index: usize,
        .                   candidate: &mut Candidate<'_, 'tcx>,
        .               ) {
    8,192 ( 0.00%)          candidate.match_pairs.remove(match_pair_index);
        .               }
        .           
        .               fn candidate_after_slice_test<'pat>(
        .                   &mut self,
        .                   match_pair_index: usize,
        .                   candidate: &mut Candidate<'pat, 'tcx>,
        .                   prefix: &'pat [Pat<'tcx>],
        .                   opt_slice: Option<&'pat Pat<'tcx>>,
-- line 728 ----------------------------------------
-- line 747 ----------------------------------------
        .                   candidate: &mut Candidate<'pat, 'tcx>,
        .               ) {
        .                   let match_pair = candidate.match_pairs.remove(match_pair_index);
        .           
        .                   // So, if we have a match-pattern like `x @ Enum::Variant(P1, P2)`,
        .                   // we want to create a set of derived match-patterns like
        .                   // `(x as Variant).0 @ P1` and `(x as Variant).1 @ P1`.
        .                   let elem =
      234 ( 0.00%)              ProjectionElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index);
      468 ( 0.00%)          let downcast_place = match_pair.place.project(elem); // `(x as Variant)`
        .                   let consequent_match_pairs = subpatterns.iter().map(|subpattern| {
        .                       // e.g., `(x as Variant).0`
       90 ( 0.00%)              let place = downcast_place.clone().field(subpattern.field, subpattern.pattern.ty);
        .                       // e.g., `(x as Variant).0 @ P1`
        .                       MatchPair::new(place, &subpattern.pattern)
        .                   });
        .           
      546 ( 0.00%)          candidate.match_pairs.extend(consequent_match_pairs);
        .               }
        .           
        .               fn error_simplifyable<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> ! {
        .                   span_bug!(match_pair.pattern.span, "simplifyable pattern found: {:?}", match_pair.pattern)
        .               }
        .           
        .               fn const_range_contains(
        .                   &self,
        .                   range: PatRange<'tcx>,
        .                   value: &'tcx ty::Const<'tcx>,
        .               ) -> Option<bool> {
        .                   use std::cmp::Ordering::*;
        .           
        .                   let tcx = self.tcx;
        .           
2,103,472 ( 0.04%)          let a = compare_const_vals(tcx, range.lo, value, self.param_env, range.lo.ty)?;
2,807,168 ( 0.05%)          let b = compare_const_vals(tcx, value, range.hi, self.param_env, range.lo.ty)?;
        .           
        .                   match (b, range.end) {
    3,771 ( 0.00%)              (Less, _) | (Equal, RangeEnd::Included) if a != Greater => Some(true),
        .                       _ => Some(false),
        .                   }
        .               }
        .           
        .               fn values_not_contained_in_range(
        .                   &self,
        .                   range: PatRange<'tcx>,
        .                   options: &FxIndexMap<&'tcx ty::Const<'tcx>, u128>,
        .               ) -> Option<bool> {
  518,326 ( 0.01%)          for &val in options.keys() {
        .                       if self.const_range_contains(range, val)? {
        .                           return Some(false);
        .                       }
        .                   }
        .           
        .                   Some(true)
        .               }
        .           }
        .           
        .           impl Test<'_> {
        .               pub(super) fn targets(&self) -> usize {
    6,606 ( 0.00%)          match self.kind {
        .                       TestKind::Eq { .. } | TestKind::Range(_) | TestKind::Len { .. } => 2,
       36 ( 0.00%)              TestKind::Switch { adt_def, .. } => {
        .                           // While the switch that we generate doesn't test for all
        .                           // variants, we have a target for each variant and the
        .                           // otherwise case, and we make sure that all of the cases not
        .                           // specified have the same block.
       72 ( 0.00%)                  adt_def.variants.len() + 1
        .                       }
       17 ( 0.00%)              TestKind::SwitchInt { switch_ty, ref options, .. } => {
       17 ( 0.00%)                  if switch_ty.is_bool() {
        .                               // `bool` is special cased in `perform_test` to always
        .                               // branch to two blocks.
        .                               2
        .                           } else {
       34 ( 0.00%)                      options.len() + 1
        .                           }
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           fn is_switch_ty(ty: Ty<'_>) -> bool {
       34 ( 0.00%)      ty.is_integral() || ty.is_char() || ty.is_bool()
      801 ( 0.00%)  }
        .           
        .           fn trait_method<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               trait_def_id: DefId,
        .               method_name: Symbol,
        .               self_ty: Ty<'tcx>,
        .               params: &[GenericArg<'tcx>],
        .           ) -> &'tcx ty::Const<'tcx> {
-- line 838 ----------------------------------------

2,677,793 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/matches/test.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                  

-- line 504 ----------------------------------------
         .           use crate::panicking::{panic, panic_str};
         .           use crate::pin::Pin;
         .           use crate::{
         .               convert, hint, mem,
         .               ops::{self, ControlFlow, Deref, DerefMut},
         .           };
         .           
         .           /// The `Option` type. See [the module level documentation](self) for more.
 2,671,103 ( 0.05%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[rustc_diagnostic_item = "Option"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Option<T> {
         .               /// No value.
         .               #[lang = "None"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               None,
         .               /// Some value of type `T`.
         .               #[lang = "Some"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       656 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Type implementation
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           impl<T> Option<T> {
         .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 543 ----------------------------------------
         .               /// let x: Option<u32> = None;
         .               /// assert_eq!(x.is_some(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               pub const fn is_some(&self) -> bool {
 7,601,074 ( 0.14%)          matches!(*self, Some(_))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
-- line 559 ----------------------------------------
-- line 616 ----------------------------------------
         .               /// // then consume *that* with `map`, leaving `text` on the stack.
         .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
         .               /// println!("still can print text: {:?}", text);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Option<&T> {
 3,884,671 ( 0.07%)          match *self {
         .                       Some(ref x) => Some(x),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
         .               ///
         .               /// # Examples
-- line 632 ----------------------------------------
-- line 638 ----------------------------------------
         .               ///     None => {},
         .               /// }
         .               /// assert_eq!(x, Some(42));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn as_mut(&mut self) -> Option<&mut T> {
 1,802,282 ( 0.03%)          match *self {
         .                       Some(ref mut x) => Some(x),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
         .               ///
         .               /// [&]: reference "shared reference"
-- line 654 ----------------------------------------
-- line 705 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn expect(self, msg: &str) -> T {
 1,908,977 ( 0.03%)          match self {
   583,668 ( 0.01%)              Some(val) => val,
         .                       None => expect_failed(msg),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 742 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.unwrap(), "air"); // fails
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn unwrap(self) -> T {
 4,227,884 ( 0.08%)          match self {
 4,860,329 ( 0.09%)              Some(val) => val,
         .                       None => panic("called `Option::unwrap()` on a `None` value"),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 759 ----------------------------------------
-- line 769 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or(self, default: T) -> T
         .               where
         .                   T: ~const Drop,
         .               {
 2,548,642 ( 0.05%)          match self {
         .                       Some(x) => x,
       208 ( 0.00%)              None => default,
         .                   }
     7,959 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or computes it from a closure.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let k = 10;
         .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
         .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        82 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 2,457,215 ( 0.04%)          match self {
    78,224 ( 0.00%)              Some(x) => x,
    31,974 ( 0.00%)              None => f(),
         .                   }
       874 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or a default.
         .               ///
         .               /// Consumes the `self` argument then, if [`Some`], returns the contained
         .               /// value, otherwise if [`None`], returns the [default value] for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or_default(self) -> T
         .               where
         .                   T: ~const Default,
         .               {
     2,345 ( 0.00%)          match self {
     3,260 ( 0.00%)              Some(x) => x,
         .                       None => Default::default(),
         .                   }
       500 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value,
         .               /// without checking that the value is not [`None`].
         .               ///
         .               /// # Safety
         .               ///
         .               /// Calling this method on [`None`] is *[undefined behavior]*.
         .               ///
-- line 851 ----------------------------------------
-- line 892 ----------------------------------------
         .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
         .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
         .               ///
         .               /// assert_eq!(maybe_some_len, Some(13));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       378 ( 0.00%)      pub const fn map<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
 4,325,888 ( 0.08%)          match self {
 4,369,039 ( 0.08%)              Some(x) => Some(f(x)),
   311,346 ( 0.01%)              None => None,
         .                   }
    42,483 ( 0.00%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 917 ----------------------------------------
-- line 960 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or<U, F>(self, default: U, f: F) -> U
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .                   U: ~const Drop,
         .               {
   734,184 ( 0.01%)          match self {
     9,852 ( 0.00%)              Some(t) => f(t),
16,585,470 ( 0.30%)              None => default,
         .                   }
         .               }
         .           
         .               /// Computes a default function result (if none), or
         .               /// applies a different function to the contained value (if any).
         .               ///
         .               /// # Examples
         .               ///
-- line 978 ----------------------------------------
-- line 990 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
         .               where
         .                   D: ~const FnOnce() -> U,
         .                   D: ~const Drop,
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
    27,632 ( 0.00%)          match self {
    10,315 ( 0.00%)              Some(t) => f(t),
         .                       None => default(),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
         .               ///
         .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1024 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn ok_or<E>(self, err: E) -> Result<T, E>
         .               where
         .                   E: ~const Drop,
         .               {
   436,971 ( 0.01%)          match self {
       252 ( 0.00%)              Some(v) => Ok(v),
       126 ( 0.00%)              None => Err(err),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
         .               ///
         .               /// [`Ok(v)`]: Ok
         .               /// [`Err(err())`]: Err
-- line 1042 ----------------------------------------
-- line 1049 ----------------------------------------
         .               /// assert_eq!(x.ok_or_else(|| 0), Ok("foo"));
         .               ///
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.ok_or_else(|| 0), Err(0));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         4 ( 0.00%)      pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
         .               where
         .                   F: ~const FnOnce() -> E,
         .                   F: ~const Drop,
         .               {
   130,790 ( 0.00%)          match self {
   202,651 ( 0.00%)              Some(v) => Ok(v),
    58,799 ( 0.00%)              None => Err(err()),
         .                   }
         5 ( 0.00%)      }
         .           
         .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
         .               ///
         .               /// Leaves the original Option in-place, creating a new one with a reference
         .               /// to the original one, additionally coercing the contents via [`Deref`].
         .               ///
         .               /// # Examples
         .               ///
-- line 1074 ----------------------------------------
-- line 1080 ----------------------------------------
         .               /// assert_eq!(x.as_deref(), None);
         .               /// ```
         .               #[stable(feature = "option_deref", since = "1.40.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn as_deref(&self) -> Option<&T::Target>
         .               where
         .                   T: ~const Deref,
         .               {
    10,031 ( 0.00%)          match self.as_ref() {
         .                       Some(t) => Some(t.deref()),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
         .               ///
         .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
         .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
         .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
         .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
         .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       524 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> Option<U>,
         .                   F: ~const Drop,
         .               {
 8,649,493 ( 0.16%)          match self {
     2,448 ( 0.00%)              Some(x) => f(x),
         .                       None => None,
         .                   }
     4,317 ( 0.00%)      }
         .           
         .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
         .               /// with the wrapped value and returns:
         .               ///
         .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
         .               ///   value), and
         .               /// - [`None`] if `predicate` returns `false`.
         .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
         .               #[stable(feature = "option_filter", since = "1.27.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn filter<P>(self, predicate: P) -> Self
         .               where
         .                   T: ~const Drop,
         .                   P: ~const FnOnce(&T) -> bool,
         .                   P: ~const Drop,
         .               {
       704 ( 0.00%)          if let Some(x) = self {
       417 ( 0.00%)              if predicate(&x) {
        39 ( 0.00%)                  return Some(x);
         .                       }
         .                   }
         .                   None
         .               }
         .           
         .               /// Returns the option if it contains a value, otherwise returns `optb`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
-- line 1275 ----------------------------------------
-- line 1299 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or(self, optb: Option<T>) -> Option<T>
         .               where
         .                   T: ~const Drop,
         .               {
     2,955 ( 0.00%)          match self {
       245 ( 0.00%)              Some(x) => Some(x),
         .                       None => optb,
         .                   }
         .               }
         .           
         .               /// Returns the option if it contains a value, otherwise calls `f` and
         .               /// returns the result.
         .               ///
         .               /// # Examples
-- line 1316 ----------------------------------------
-- line 1326 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or_else<F>(self, f: F) -> Option<T>
         .               where
         .                   F: ~const FnOnce() -> Option<T>,
         .                   F: ~const Drop,
         .               {
   421,854 ( 0.01%)          match self {
     2,075 ( 0.00%)              Some(x) => Some(x),
         .                       None => f(),
         .                   }
         .               }
         .           
         .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
         .               ///
         .               /// # Examples
         .               ///
-- line 1343 ----------------------------------------
-- line 1431 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
         .               where
         .                   T: ~const Drop,
         .               {
   228,039 ( 0.00%)          if let None = *self {
   532,091 ( 0.01%)              *self = Some(value);
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
         .               }
         .           
         .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
   392,295 ( 0.01%)          if let None = *self {
         .                       // the compiler isn't smart enough to know that we are not dropping a `T`
         .                       // here and wants us to ensure `T` can be dropped at compile time.
         6 ( 0.00%)              mem::forget(mem::replace(self, Some(f())))
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
         .               }
         .           
         .               /////////////////////////////////////////////////////////////////////////
-- line 1518 ----------------------------------------
-- line 1558 ----------------------------------------
         .               /// let old = x.replace(3);
         .               /// assert_eq!(x, Some(3));
         .               /// assert_eq!(old, None);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               #[stable(feature = "option_replace", since = "1.31.0")]
         .               pub const fn replace(&mut self, value: T) -> Option<T> {
       468 ( 0.00%)          mem::replace(self, Some(value))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] value containing the given value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
         .               #[stable(feature = "copied", since = "1.35.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn copied(self) -> Option<T>
         .               where
         .                   T: Copy,
         .               {
         .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
         .                   // ready yet, should be reverted when possible to avoid code repetition
    12,411 ( 0.00%)          match self {
   445,098 ( 0.01%)              Some(&v) => Some(v),
       511 ( 0.00%)              None => None,
         .                   }
         6 ( 0.00%)      }
         .           
         .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
         .               /// let opt_x = Some(&x);
         .               /// assert_eq!(opt_x, Some(&12));
         .               /// let cloned = opt_x.cloned();
         .               /// assert_eq!(cloned, Some(12));
         .               /// ```
         .               #[must_use = "`self` will be dropped if the result is not used"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
    20,089 ( 0.00%)      pub const fn cloned(self) -> Option<T>
         .               where
         .                   T: ~const Clone,
         .               {
   235,059 ( 0.00%)          match self {
 1,307,541 ( 0.02%)              Some(t) => Some(t.clone()),
     3,160 ( 0.00%)              None => None,
         .                   }
    23,950 ( 0.00%)      }
         .           }
         .           
         .           impl<T> Option<&mut T> {
         .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
-- line 1757 ----------------------------------------
-- line 1843 ----------------------------------------
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone> Clone for Option<T> {
         .               #[inline]
         .               fn clone(&self) -> Self {
 2,841,967 ( 0.05%)          match self {
    37,547 ( 0.00%)              Some(x) => Some(x.clone()),
       146 ( 0.00%)              None => None,
         .                   }
   444,551 ( 0.01%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Some(to), Some(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
         .               }
-- line 1863 ----------------------------------------
-- line 2006 ----------------------------------------
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.opt.take()
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
   131,291 ( 0.00%)          match self.opt {
         .                       Some(_) => (1, Some(1)),
         .                       None => (0, Some(0)),
         .                   }
         .               }
         .           }
         .           
         .           impl<A> DoubleEndedIterator for Item<A> {
         .               #[inline]
-- line 2022 ----------------------------------------
-- line 2136 ----------------------------------------
         .               type Item = A;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.inner.next()
         .               }
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
        10 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A> {
         .                   self.inner.next_back()
-- line 2152 ----------------------------------------
-- line 2241 ----------------------------------------
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::Try for Option<T> {
         .               type Output = T;
         .               type Residual = Option<convert::Infallible>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
         .                   Some(output)
       585 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 7,499,527 ( 0.13%)          match self {
   128,243 ( 0.00%)              Some(v) => ControlFlow::Continue(v),
         .                       None => ControlFlow::Break(None),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::FromResidual for Option<T> {
         .               #[inline]
         .               fn from_residual(residual: Option<convert::Infallible>) -> Self {
         .                   match residual {
   143,447 ( 0.00%)              None => None,
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
         .               type TryType = Option<T>;
         .           }
-- line 2274 ----------------------------------------

 6,674,610 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 417 ----------------------------------------
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
         .               pub const fn new() -> Self {
10,830,926 ( 0.19%)          Vec { buf: RawVec::NEW, len: 0 }
        74 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 1,013,036 ( 0.02%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
         .               }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    30,258 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
         .               }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn capacity(&self) -> usize {
 1,824,270 ( 0.03%)          self.buf.capacity()
         .               }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve(&mut self, additional: usize) {
 1,304,098 ( 0.02%)          self.buf.reserve(self.len, additional);
         .               }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
     3,100 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
    48,997 ( 0.00%)          if self.capacity() > self.len {
     4,477 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
         .               }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
         .                       self.shrink_to_fit();
    15,792 ( 0.00%)              let me = ManuallyDrop::new(self);
         .                       let buf = ptr::read(&me.buf);
         .                       let len = me.len();
         .                       buf.into_box(len).assume_init()
         .                   }
         .               }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
   618,078 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
   555,813 ( 0.01%)              if len > self.len {
         .                           return;
         .                       }
         .                       let remaining_len = self.len - len;
         .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   686,435 ( 0.01%)              self.len = len;
     1,434 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
   741,674 ( 0.01%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
 8,584,461 ( 0.15%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
 7,940,491 ( 0.14%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
 2,609,765 ( 0.05%)          self.len = new_len;
    23,138 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // We replace self[index] with the last element. Note that if the
         .                       // bounds check above succeeds there must be a last element (which
         .                       // can be self[index] itself).
         .                       let value = ptr::read(self.as_ptr().add(index));
         .                       let base_ptr = self.as_mut_ptr();
         1 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
         .                       self.set_len(len - 1);
         .                       value
         .                   }
         .               }
         .           
         .               /// Inserts an element at position `index` within the vector, shifting all
         .               /// elements after it to the right.
         .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     1,057 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
       166 ( 0.00%)          let len = self.len();
       348 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
    14,244 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
    21,321 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
    14,244 ( 0.00%)              self.set_len(len + 1);
         .                   }
       906 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
         .               pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
       113 ( 0.00%)          let len = self.len();
       436 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
         .                           let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
       256 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
       300 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
     1,445 ( 0.00%)              self.set_len(len - 1);
         .                       ret
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
   443,219 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
     2,008 ( 0.00%)          self.retain_mut(|elem| f(elem));
   436,440 ( 0.01%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
    88,477 ( 0.00%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
    97,248 ( 0.00%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
   129,066 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
 1,342,042 ( 0.02%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   409,700 ( 0.01%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
   362,732 ( 0.01%)                      g.processed_len += 1;
   292,202 ( 0.01%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
   194,722 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
     4,014 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
     3,898 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
       252 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
       273 ( 0.00%)          let len = self.len();
     1,052 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
         .                   let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
     1,845 ( 0.00%)              while gap.read < len {
         .                           let read_ptr = ptr.add(gap.read);
         .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
       170 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
         .                               let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
         .                               ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
     1,041 ( 0.00%)                      gap.write += 1;
         .                               gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
         .                       gap.vec.set_len(gap.write);
         .                       mem::forget(gap);
         .                   }
       288 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       160 ( 0.00%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
12,613,023 ( 0.23%)          if self.len == self.buf.capacity() {
   429,760 ( 0.01%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
   196,824 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
         .                       ptr::write(end, value);
19,004,103 ( 0.34%)              self.len += 1;
         .                   }
       128 ( 0.00%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn pop(&mut self) -> Option<T> {
 3,168,316 ( 0.06%)          if self.len == 0 {
         6 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
 2,090,714 ( 0.04%)                  self.len -= 1;
   560,214 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
         .               }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
       112 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
         .                       self.append_elements(other.as_slice() as _);
         .                       other.set_len(0);
         .                   }
        96 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               unsafe fn append_elements(&mut self, other: *const [T]) {
         .                   let count = unsafe { (*other).len() };
         .                   self.reserve(count);
   140,169 ( 0.00%)          let len = self.len();
         4 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
 1,003,352 ( 0.02%)          self.len += count;
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
    65,255 ( 0.00%)          let len = self.len();
         .                   let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
         .                       self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
    23,368 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    40,846 ( 0.00%)              Drain {
         .                           tail_start: end,
    15,616 ( 0.00%)                  tail_len: len - end,
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
 1,111,361 ( 0.02%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn is_empty(&self) -> bool {
 1,223,959 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
       364 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
       320 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    17,135 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
     2,039 ( 0.00%)          let len = self.len();
     4,078 ( 0.00%)          if new_len > len {
    12,403 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    15,096 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
         .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
         .                       slice::from_raw_parts_mut(
         2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
        53 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
         .               }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
    46,130 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
     4,613 ( 0.00%)          let len = self.len();
         .           
    13,839 ( 0.00%)          if new_len > len {
     1,707 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
     5,149 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
         .           trait ExtendWith<T> {
         .               fn next(&mut self) -> T;
         .               fn last(self) -> T;
         .           }
         .           
         .           struct ExtendElement<T>(T);
         .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
         .               fn next(&mut self) -> T {
    23,258 ( 0.00%)          self.0.clone()
         .               }
         .               fn last(self) -> T {
         .                   self.0
         .               }
         .           }
         .           
         .           struct ExtendFunc<F>(F);
         .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
   259,270 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
         .                   self.reserve(n);
         .           
         .                   unsafe {
     4,140 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
         .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
         .                       for _ in 1..n {
         .                           ptr::write(ptr, value.next());
         .                           ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
         .                           local_len.increment_len(1);
         .                       }
         .           
   135,380 ( 0.00%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
         .                           ptr::write(ptr, value.last());
         .                           local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
         .                   }
   207,223 ( 0.00%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn dedup(&mut self) {
        37 ( 0.00%)          self.dedup_by(|a, b| a == b)
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
    14,425 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   280,249 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    15,891 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
         .               fn deref(&self) -> &[T] {
13,913,296 ( 0.25%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        56 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
         .               fn deref_mut(&mut self) -> &mut [T] {
 3,734,189 ( 0.07%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
   188,580 ( 0.00%)      fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
         2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   220,720 ( 0.00%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
         .               fn index(&self, index: I) -> &Self::Output {
   123,156 ( 0.00%)          Index::index(&**self, index)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
         .               #[inline]
         .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
       196 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 1,491,243 ( 0.03%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
         .               fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
 1,094,833 ( 0.02%)              let mut me = ManuallyDrop::new(self);
         .                       let alloc = ptr::read(me.allocator());
         .                       let begin = me.as_mut_ptr();
         .                       let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
         .                           begin.add(me.len()) as *const T
         .                       };
         .                       let cap = me.buf.capacity();
   559,282 ( 0.01%)              IntoIter {
         .                           buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
         .                           end,
         .                       }
         .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
         .               fn into_iter(self) -> slice::IterMut<'a, T> {
     1,078 ( 0.00%)          self.iter_mut()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
       896 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   830,514 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       896 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
         .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
    50,625 ( 0.00%)          while let Some(element) = iterator.next() {
    45,697 ( 0.00%)              let len = self.len();
   621,361 ( 0.01%)              if len == self.capacity() {
       578 ( 0.00%)                  let (lower, _) = iterator.size_hint();
         .                           self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
         .                           ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
   472,747 ( 0.01%)                  self.set_len(len + 1);
         .                       }
         .                   }
       774 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "vec_splice", since = "1.21.0")]
         .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
         .               where
         .                   R: RangeBounds<usize>,
         .                   I: IntoIterator<Item = T>,
         .               {
   193,336 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element should be removed.
         .               ///
         .               /// If the closure returns true, then the element is removed and yielded.
         .               /// If the closure returns false, the element will remain in the vector and will not be yielded
         .               /// by the iterator.
         .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
     1,082 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
     3,248 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
         .           /// [`copy_from_slice`]: slice::copy_from_slice
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "extend_ref", since = "1.2.0")]
         .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
     2,856 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
         .                   self.spec_extend(iter.into_iter())
     2,142 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, &item: &'a T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
         .               #[inline]
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   Ord::cmp(&**self, &**other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
 2,396,639 ( 0.04%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
   776,043 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
 2,842,064 ( 0.05%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

 6,103,783 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs
--------------------------------------------------------------------------------
Ir                 

-- line 125 ----------------------------------------
        .               /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }
        .               /// ```
        .               ///
        .               /// we can assume in the caller's body that `'b: 'a` and that `T:
        .               /// 'b` (and hence, transitively, that `T: 'a`). This method would
        .               /// add those assumptions into the outlives-environment.
        .               ///
        .               /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`
    4,476 ( 0.00%)      fn add_implied_bounds<'a>(
        .                   &mut self,
        .                   infcx: &InferCtxt<'a, 'tcx>,
        .                   fn_sig_tys: FxHashSet<Ty<'tcx>>,
        .                   body_id: hir::HirId,
        .                   span: Span,
        .               ) {
        .                   debug!("add_implied_bounds()");
        .           
    7,767 ( 0.00%)          for ty in fn_sig_tys {
        .                       let ty = infcx.resolve_vars_if_possible(ty);
        .                       debug!("add_implied_bounds: ty = {}", ty);
    6,417 ( 0.00%)              let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);
        .                       self.add_outlives_bounds(Some(infcx), implied_bounds)
        .                   }
    2,984 ( 0.00%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // PUBLIC ENTRY POINTS
        .           
        .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
      306 ( 0.00%)      pub fn regionck_expr(&self, body: &'tcx hir::Body<'tcx>) {
      238 ( 0.00%)          let subject = self.tcx.hir().body_owner_def_id(body.id());
       68 ( 0.00%)          let id = body.value.hir_id;
      238 ( 0.00%)          let mut rcx = RegionCtxt::new(self, id, Subject(subject), self.param_env);
        .           
        .                   // There are no add'l implied bounds when checking a
        .                   // standalone expr (e.g., the `E` in a type like `[u32; E]`).
      170 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(id);
        .           
       34 ( 0.00%)          if !self.errors_reported_since_creation() {
        .                       // regionck assumes typeck succeeded
        .                       rcx.visit_body(body);
        .                       rcx.visit_region_obligations(id);
        .                   }
       68 ( 0.00%)          rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));
      306 ( 0.00%)      }
        .           
        .               /// Region checking during the WF phase for items. `wf_tys` are the
        .               /// types from which we should derive implied bounds, if any.
    2,304 ( 0.00%)      pub fn regionck_item(&self, item_id: hir::HirId, span: Span, wf_tys: FxHashSet<Ty<'tcx>>) {
        .                   debug!("regionck_item(item.id={:?}, wf_tys={:?})", item_id, wf_tys);
      768 ( 0.00%)          let subject = self.tcx.hir().local_def_id(item_id);
    1,344 ( 0.00%)          let mut rcx = RegionCtxt::new(self, item_id, Subject(subject), self.param_env);
    2,112 ( 0.00%)          rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);
      768 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(item_id);
        .                   rcx.visit_region_obligations(item_id);
        .                   rcx.resolve_regions_and_report_errors(RegionckMode::default());
    1,728 ( 0.00%)      }
        .           
        .               /// Region check a function body. Not invoked on closures, but
        .               /// only on the "root" fn item (in which closures may be
        .               /// embedded). Walks the function body and adds various add'l
        .               /// constraints that are needed for region inference. This is
        .               /// separated both to isolate "pure" region constraints from the
        .               /// rest of type check and because sometimes we need type
        .               /// inference to have completed before we can determine which
        .               /// constraints to add.
    1,118 ( 0.00%)      pub(crate) fn regionck_fn(
        .                   &self,
        .                   fn_id: hir::HirId,
        .                   body: &'tcx hir::Body<'tcx>,
        .                   span: Span,
        .                   wf_tys: FxHashSet<Ty<'tcx>>,
        .               ) {
        .                   debug!("regionck_fn(id={})", fn_id);
      516 ( 0.00%)          let subject = self.tcx.hir().body_owner_def_id(body.id());
      172 ( 0.00%)          let hir_id = body.value.hir_id;
      430 ( 0.00%)          let mut rcx = RegionCtxt::new(self, hir_id, Subject(subject), self.param_env);
        .                   // We need to add the implied bounds from the function signature
    1,032 ( 0.00%)          rcx.outlives_environment.add_implied_bounds(self, wf_tys, fn_id, span);
      344 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(fn_id);
        .           
       86 ( 0.00%)          if !self.errors_reported_since_creation() {
        .                       // regionck assumes typeck succeeded
      946 ( 0.00%)              rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));
        .                   }
        .           
      172 ( 0.00%)          rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));
      774 ( 0.00%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // INTERNALS
        .           
        .           pub struct RegionCtxt<'a, 'tcx> {
        .               pub fcx: &'a FnCtxt<'a, 'tcx>,
        .           
-- line 221 ----------------------------------------
-- line 229 ----------------------------------------
        .           
        .               // id of AST node being analyzed (the subject of the analysis).
        .               subject_def_id: LocalDefId,
        .           }
        .           
        .           impl<'a, 'tcx> Deref for RegionCtxt<'a, 'tcx> {
        .               type Target = FnCtxt<'a, 'tcx>;
        .               fn deref(&self) -> &Self::Target {
  255,126 ( 0.00%)          self.fcx
        .               }
        .           }
        .           
        .           pub struct Subject(LocalDefId);
        .           
        .           impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {
    3,432 ( 0.00%)      pub fn new(
        .                   fcx: &'a FnCtxt<'a, 'tcx>,
        .                   initial_body_id: hir::HirId,
        .                   Subject(subject): Subject,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> RegionCtxt<'a, 'tcx> {
      312 ( 0.00%)          let region_scope_tree = fcx.tcx.region_scope_tree(subject);
      624 ( 0.00%)          let outlives_environment = OutlivesEnvironment::new(param_env);
    2,184 ( 0.00%)          RegionCtxt {
        .                       fcx,
        .                       region_scope_tree,
        .                       body_id: initial_body_id,
        .                       body_owner: subject,
        .                       subject_def_id: subject,
    1,248 ( 0.00%)              outlives_environment,
        .                   }
    2,808 ( 0.00%)      }
        .           
        .               /// Try to resolve the type for the given node, returning `t_err` if an error results. Note that
        .               /// we never care about the details of the error, the same error will be detected and reported
        .               /// in the writeback phase.
        .               ///
        .               /// Note one important point: we do not attempt to resolve *region variables* here. This is
        .               /// because regionck is essentially adding constraints to those region variables and so may yet
        .               /// influence how they are resolved.
-- line 268 ----------------------------------------
-- line 283 ----------------------------------------
        .               /// of b will be `&<R0>.i32` and then `*b` will require that `<R0>` be bigger than the let and
        .               /// the `*b` expression, so we will effectively resolve `<R0>` to be the block B.
        .               pub fn resolve_type(&self, unresolved_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.resolve_vars_if_possible(unresolved_ty)
        .               }
        .           
        .               /// Try to resolve the type for the given node.
        .               fn resolve_node_type(&self, id: hir::HirId) -> Ty<'tcx> {
    6,946 ( 0.00%)          let t = self.node_ty(id);
    6,914 ( 0.00%)          self.resolve_type(t)
        .               }
        .           
        .               /// This is the "main" function when region-checking a function item or a
        .               /// closure within a function item. It begins by updating various fields
        .               /// (e.g., `outlives_environment`) to be appropriate to the function and
        .               /// then adds constraints derived from the function body.
        .               ///
        .               /// Note that it does **not** restore the state of the fields that
        .               /// it updates! This is intentional, since -- for the main
        .               /// function -- we wish to be able to read the final
        .               /// `outlives_environment` and other fields from the caller. For
        .               /// closures, however, we save and restore any "scoped state"
        .               /// before we invoke this function. (See `visit_fn` in the
        .               /// `intravisit::Visitor` impl below.)
    1,330 ( 0.00%)      fn visit_fn_body(
        .                   &mut self,
        .                   id: hir::HirId, // the id of the fn itself
        .                   body: &'tcx hir::Body<'tcx>,
        .                   span: Span,
        .               ) {
        .                   // When we enter a function, we can derive
        .                   debug!("visit_fn_body(id={:?})", id);
        .           
      380 ( 0.00%)          let body_id = body.id();
      190 ( 0.00%)          self.body_id = body_id.hir_id;
      665 ( 0.00%)          self.body_owner = self.tcx.hir().body_owner_def_id(body_id);
        .           
        .                   let fn_sig = {
      950 ( 0.00%)              match self.typeck_results.borrow().liberated_fn_sigs().get(id) {
      190 ( 0.00%)                  Some(f) => *f,
        .                           None => {
        .                               bug!("No fn-sig entry for id={:?}", id);
        .                           }
        .                       }
        .                   };
        .           
        .                   // Collect the types from which we create inferred bounds.
        .                   // For the return type, if diverging, substitute `bool` just
        .                   // because it will have no effect.
        .                   //
        .                   // FIXME(#27579) return types should not be implied bounds
        .                   let fn_sig_tys: FxHashSet<_> =
      475 ( 0.00%)              fn_sig.inputs().iter().cloned().chain(Some(fn_sig.output())).collect();
        .           
    1,235 ( 0.00%)          self.outlives_environment.add_implied_bounds(self.fcx, fn_sig_tys, body_id.hir_id, span);
      475 ( 0.00%)          self.outlives_environment.save_implied_bounds(body_id.hir_id);
      190 ( 0.00%)          self.link_fn_params(body.params);
        .                   self.visit_body(body);
        .                   self.visit_region_obligations(body_id.hir_id);
      760 ( 0.00%)      }
        .           
        .               fn visit_inline_const(&mut self, id: hir::HirId, body: &'tcx hir::Body<'tcx>) {
        .                   debug!("visit_inline_const(id={:?})", id);
        .           
        .                   // Save state of current function. We will restore afterwards.
        .                   let old_body_id = self.body_id;
        .                   let old_body_owner = self.body_owner;
        .                   let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();
-- line 350 ----------------------------------------
-- line 365 ----------------------------------------
        .               }
        .           
        .               fn visit_region_obligations(&mut self, hir_id: hir::HirId) {
        .                   debug!("visit_region_obligations: hir_id={:?}", hir_id);
        .           
        .                   // region checking can introduce new pending obligations
        .                   // which, when processed, might generate new region
        .                   // obligations. So make sure we process those.
      321 ( 0.00%)          self.select_all_obligations_or_error();
        .               }
        .           
        .               fn resolve_regions_and_report_errors(&self, mode: RegionckMode) {
      936 ( 0.00%)          self.infcx.process_registered_region_obligations(
      624 ( 0.00%)              self.outlives_environment.region_bound_pairs_map(),
      624 ( 0.00%)              Some(self.tcx.lifetimes.re_root_empty),
      312 ( 0.00%)              self.param_env,
        .                   );
        .           
    1,560 ( 0.00%)          self.fcx.resolve_regions_and_report_errors(
      312 ( 0.00%)              self.subject_def_id.to_def_id(),
        .                       &self.outlives_environment,
        .                       mode,
        .                   );
        .               }
        .           
        .               fn constrain_bindings_in_pat(&mut self, pat: &hir::Pat<'_>) {
        .                   debug!("regionck::visit_pat(pat={:?})", pat);
        .                   pat.each_binding(|_, hir_id, span, _| {
       90 ( 0.00%)              let typ = self.resolve_node_type(hir_id);
      180 ( 0.00%)              let body_id = self.body_id;
      360 ( 0.00%)              dropck::check_drop_obligations(self, typ, span, body_id);
        .                   })
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {
        .               // (..) FIXME(#3238) should use visit_pat, not visit_arm/visit_local,
        .               // However, right now we run into an issue whereby some free
        .               // regions are not properly related if they appear within the
-- line 403 ----------------------------------------
-- line 416 ----------------------------------------
        .               ) {
        .                   assert!(
        .                       matches!(fk, intravisit::FnKind::Closure),
        .                       "visit_fn invoked for something other than a closure"
        .                   );
        .           
        .                   // Save state of current function before invoking
        .                   // `visit_fn_body`.  We will restore afterwards.
       18 ( 0.00%)          let old_body_id = self.body_id;
       18 ( 0.00%)          let old_body_owner = self.body_owner;
       36 ( 0.00%)          let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();
        .           
       54 ( 0.00%)          let body = self.tcx.hir().body(body_id);
       54 ( 0.00%)          self.visit_fn_body(hir_id, body, span);
        .           
        .                   // Restore state from previous function.
       36 ( 0.00%)          self.outlives_environment.pop_snapshot_post_typeck_child(env_snapshot);
       18 ( 0.00%)          self.body_id = old_body_id;
       18 ( 0.00%)          self.body_owner = old_body_owner;
        .               }
        .           
        .               //visit_pat: visit_pat, // (..) see above
        .           
        .               fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {
        .                   // see above
   10,185 ( 0.00%)          self.constrain_bindings_in_pat(arm.pat);
        .                   intravisit::walk_arm(self, arm);
        .               }
        .           
      328 ( 0.00%)      fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
        .                   // see above
      287 ( 0.00%)          self.constrain_bindings_in_pat(l.pat);
        .                   self.link_local(l);
        .                   intravisit::walk_local(self, l);
      287 ( 0.00%)      }
        .           
  507,080 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
        .                   // Check any autoderefs or autorefs that appear.
        .                   let cmt_result = self.constrain_adjustments(expr);
        .           
        .                   // If necessary, constrain destructors in this expression. This will be
        .                   // the adjusted form if there is an adjustment.
  133,843 ( 0.00%)          match cmt_result {
  570,465 ( 0.01%)              Ok(head_cmt) => {
        .                           self.check_safety_of_rvalue_destructor_if_necessary(&head_cmt, expr.span);
        .                       }
        .                       Err(..) => {
        .                           self.tcx.sess.delay_span_bug(expr.span, "cat_expr Errd");
        .                       }
        .                   }
        .           
  457,197 ( 0.01%)          match expr.kind {
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, m, ref base) => {
        .                           self.link_addr_of(expr, m, base);
        .           
        .                           intravisit::walk_expr(self, expr);
        .                       }
        .           
        .                       hir::ExprKind::Match(ref discr, arms, _) => {
        .                           self.link_match(discr, arms);
-- line 475 ----------------------------------------
-- line 479 ----------------------------------------
        .           
        .                       hir::ExprKind::ConstBlock(anon_const) => {
        .                           let body = self.tcx.hir().body(anon_const.body);
        .                           self.visit_inline_const(anon_const.hir_id, body);
        .                       }
        .           
        .                       _ => intravisit::walk_expr(self, expr),
        .                   }
  507,080 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {
        .               /// Creates a temporary `MemCategorizationContext` and pass it to the closure.
        .               fn with_mc<F, R>(&self, f: F) -> R
        .               where
        .                   F: for<'b> FnOnce(mc::MemCategorizationContext<'b, 'tcx>) -> R,
        .               {
1,082,607 ( 0.02%)          f(mc::MemCategorizationContext::new(
        .                       &self.infcx,
        .                       self.outlives_environment.param_env,
        .                       self.body_owner,
   92,725 ( 0.00%)              &self.typeck_results.borrow(),
        .                   ))
        .               }
        .           
        .               /// Invoked on any adjustments that occur. Checks that if this is a region pointer being
        .               /// dereferenced, the lifetime of the pointer includes the deref expr.
        .               fn constrain_adjustments(
        .                   &mut self,
        .                   expr: &hir::Expr<'_>,
        .               ) -> mc::McResult<PlaceWithHirId<'tcx>> {
        .                   debug!("constrain_adjustments(expr={:?})", expr);
        .           
  126,770 ( 0.00%)          let mut place = self.with_mc(|mc| mc.cat_expr_unadjusted(expr))?;
        .           
   63,385 ( 0.00%)          let typeck_results = self.typeck_results.borrow();
   63,385 ( 0.00%)          let adjustments = typeck_results.expr_adjustments(expr);
   63,385 ( 0.00%)          if adjustments.is_empty() {
  506,808 ( 0.01%)              return Ok(place);
        .                   }
        .           
        .                   debug!("constrain_adjustments: adjustments={:?}", adjustments);
        .           
        .                   // If necessary, constrain destructors in the unadjusted form of this
        .                   // expression.
        .                   self.check_safety_of_rvalue_destructor_if_necessary(&place, expr.span);
        .           
        .                   for adjustment in adjustments {
        .                       debug!("constrain_adjustments: adjustment={:?}, place={:?}", adjustment, place);
        .           
   82,941 ( 0.00%)              if let adjustment::Adjust::Deref(Some(deref)) = adjustment.kind {
       15 ( 0.00%)                  self.link_region(
        3 ( 0.00%)                      expr.span,
        .                               deref.region,
       12 ( 0.00%)                      ty::BorrowKind::from_mutbl(deref.mutbl),
        .                               &place,
        .                           );
        .                       }
        .           
   27,567 ( 0.00%)              if let adjustment::Adjust::Borrow(ref autoref) = adjustment.kind {
        .                           self.link_autoref(expr, &place, autoref);
        .                       }
        .           
  310,680 ( 0.01%)              place = self.with_mc(|mc| mc.cat_expr_adjusted(expr, place, adjustment))?;
        .                   }
        .           
   70,730 ( 0.00%)          Ok(place)
        .               }
        .           
        .               fn check_safety_of_rvalue_destructor_if_necessary(
        .                   &mut self,
        .                   place_with_id: &PlaceWithHirId<'tcx>,
        .                   span: Span,
        .               ) {
  140,916 ( 0.00%)          if let PlaceBase::Rvalue = place_with_id.place.base {
   69,897 ( 0.00%)              if place_with_id.place.projections.is_empty() {
   83,775 ( 0.00%)                  let typ = self.resolve_type(place_with_id.place.ty());
  139,780 ( 0.00%)                  let body_id = self.body_id;
  279,560 ( 0.01%)                  dropck::check_drop_obligations(self, typ, span, body_id);
        .                       }
        .                   }
        .               }
        .               /// Adds constraints to inference such that `T: 'a` holds (or
        .               /// reports an error if it cannot).
        .               ///
        .               /// # Parameters
        .               ///
-- line 565 ----------------------------------------
-- line 567 ----------------------------------------
        .               /// - `ty`, the type `T`
        .               /// - `region`, the region `'a`
        .               pub fn type_must_outlive(
        .                   &self,
        .                   origin: infer::SubregionOrigin<'tcx>,
        .                   ty: Ty<'tcx>,
        .                   region: ty::Region<'tcx>,
        .               ) {
   41,370 ( 0.00%)          self.infcx.register_region_obligation(
   41,370 ( 0.00%)              self.body_id,
  110,320 ( 0.00%)              RegionObligation { sub_region: region, sup_type: ty, origin },
        .                   );
        .               }
        .           
        .               /// Computes the guarantor for an expression `&base` and then ensures that the lifetime of the
        .               /// resulting pointer is linked to the lifetime of its guarantor (if any).
        .               fn link_addr_of(
        .                   &mut self,
        .                   expr: &hir::Expr<'_>,
        .                   mutability: hir::Mutability,
        .                   base: &hir::Expr<'_>,
        .               ) {
        .                   debug!("link_addr_of(expr={:?}, base={:?})", expr, base);
        .           
   74,844 ( 0.00%)          let cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(base)));
        .           
        .                   debug!("link_addr_of: cmt={:?}", cmt);
        .           
   20,412 ( 0.00%)          self.link_region_from_node_type(expr.span, expr.hir_id, mutability, &cmt);
        .               }
        .           
        .               /// Computes the guarantors for any ref bindings in a `let` and
        .               /// then ensures that the lifetime of the resulting pointer is
        .               /// linked to the lifetime of the initialization expression.
        .               fn link_local(&self, local: &hir::Local<'_>) {
        .                   debug!("regionck::for_local()");
      123 ( 0.00%)          let init_expr = match local.init {
        .                       None => {
        .                           return;
        .                       }
        .                       Some(expr) => &*expr,
        .                   };
      410 ( 0.00%)          let discr_cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(init_expr)));
      328 ( 0.00%)          self.link_pattern(discr_cmt, local.pat);
        .               }
        .           
        .               /// Computes the guarantors for any ref bindings in a match and
        .               /// then ensures that the lifetime of the resulting pointer is
        .               /// linked to the lifetime of its guarantor (if any).
        .               fn link_match(&self, discr: &hir::Expr<'_>, arms: &[hir::Arm<'_>]) {
        .                   debug!("regionck::for_match()");
      530 ( 0.00%)          let discr_cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(discr)));
        .                   debug!("discr_cmt={:?}", discr_cmt);
        .                   for arm in arms {
    5,820 ( 0.00%)              self.link_pattern(discr_cmt.clone(), arm.pat);
        .                   }
        .               }
        .           
        .               /// Computes the guarantors for any ref bindings in a match and
        .               /// then ensures that the lifetime of the resulting pointer is
        .               /// linked to the lifetime of its guarantor (if any).
        .               fn link_fn_params(&self, params: &[hir::Param<'_>]) {
        .                   for param in params {
      468 ( 0.00%)              let param_ty = self.node_ty(param.hir_id);
        .                       let param_cmt =
      234 ( 0.00%)                  self.with_mc(|mc| mc.cat_rvalue(param.hir_id, param.pat.span, param_ty));
        .                       debug!("param_ty={:?} param_cmt={:?} param={:?}", param_ty, param_cmt, param);
    1,404 ( 0.00%)              self.link_pattern(param_cmt, param.pat);
        .                   }
        .               }
        .           
        .               /// Link lifetimes of any ref bindings in `root_pat` to the pointers found
        .               /// in the discriminant, if needed.
    9,678 ( 0.00%)      fn link_pattern(&self, discr_cmt: PlaceWithHirId<'tcx>, root_pat: &hir::Pat<'_>) {
        .                   debug!("link_pattern(discr_cmt={:?}, root_pat={:?})", discr_cmt, root_pat);
        .                   ignore_err!(self.with_mc(|mc| {
    4,839 ( 0.00%)              mc.cat_pattern(discr_cmt, root_pat, |sub_cmt, hir::Pat { kind, span, hir_id, .. }| {
        .                           // `ref x` pattern
    4,786 ( 0.00%)                  if let PatKind::Binding(..) = kind {
      844 ( 0.00%)                      if let Some(ty::BindByReference(mutbl)) =
    2,898 ( 0.00%)                          mc.typeck_results.extract_binding_mode(self.tcx.sess, *hir_id, *span)
        .                               {
        .                                   self.link_region_from_node_type(*span, *hir_id, mutbl, sub_cmt);
        .                               }
        .                           }
        .                       })
        .                   }));
    9,678 ( 0.00%)      }
        .           
        .               /// Link lifetime of borrowed pointer resulting from autoref to lifetimes in the value being
        .               /// autoref'd.
        .               fn link_autoref(
        .                   &self,
        .                   expr: &hir::Expr<'_>,
        .                   expr_cmt: &PlaceWithHirId<'tcx>,
        .                   autoref: &adjustment::AutoBorrow<'tcx>,
        .               ) {
        .                   debug!("link_autoref(autoref={:?}, expr_cmt={:?})", autoref, expr_cmt);
        .           
   13,934 ( 0.00%)          match *autoref {
   13,934 ( 0.00%)              adjustment::AutoBorrow::Ref(r, m) => {
   69,670 ( 0.00%)                  self.link_region(expr.span, r, ty::BorrowKind::from_mutbl(m.into()), expr_cmt);
        .                       }
        .           
        .                       adjustment::AutoBorrow::RawPtr(_) => {}
        .                   }
        .               }
        .           
        .               /// Like `link_region()`, except that the region is extracted from the type of `id`,
        .               /// which must be some reference (`&T`, `&str`, etc).
-- line 676 ----------------------------------------
-- line 682 ----------------------------------------
        .                   cmt_borrowed: &PlaceWithHirId<'tcx>,
        .               ) {
        .                   debug!(
        .                       "link_region_from_node_type(id={:?}, mutbl={:?}, cmt_borrowed={:?})",
        .                       id, mutbl, cmt_borrowed
        .                   );
        .           
        .                   let rptr_ty = self.resolve_node_type(id);
   13,640 ( 0.00%)          if let ty::Ref(r, _, _) = rptr_ty.kind() {
        .                       debug!("rptr_ty={}", rptr_ty);
   47,772 ( 0.00%)              self.link_region(span, r, ty::BorrowKind::from_mutbl(mutbl), cmt_borrowed);
        .                   }
        .               }
        .           
        .               /// Informs the inference engine that `borrow_cmt` is being borrowed with
        .               /// kind `borrow_kind` and lifetime `borrow_region`.
        .               /// In order to ensure borrowck is satisfied, this may create constraints
        .               /// between regions, as explained in `link_reborrowed_region()`.
  151,690 ( 0.00%)      fn link_region(
        .                   &self,
        .                   span: Span,
        .                   borrow_region: ty::Region<'tcx>,
        .                   borrow_kind: ty::BorrowKind,
        .                   borrow_place: &PlaceWithHirId<'tcx>,
        .               ) {
   41,370 ( 0.00%)          let origin = infer::DataBorrowed(borrow_place.place.ty(), span);
   82,740 ( 0.00%)          self.type_must_outlive(origin, borrow_place.place.ty(), borrow_region);
        .           
   75,891 ( 0.00%)          for pointer_ty in borrow_place.place.deref_tys() {
        .                       debug!(
        .                           "link_region(borrow_region={:?}, borrow_kind={:?}, pointer_ty={:?})",
        .                           borrow_region, borrow_kind, borrow_place
        .                       );
   20,823 ( 0.00%)              match *pointer_ty.kind() {
        .                           ty::RawPtr(_) => return,
   62,469 ( 0.00%)                  ty::Ref(ref_region, _, ref_mutability) => {
    6,941 ( 0.00%)                      if self.link_reborrowed_region(span, borrow_region, ref_region, ref_mutability)
        .                               {
        .                                   return;
        .                               }
        .                           }
        .                           _ => assert!(pointer_ty.is_box(), "unexpected built-in deref type {}", pointer_ty),
        .                       }
        .                   }
   13,832 ( 0.00%)          if let PlaceBase::Upvar(upvar_id) = borrow_place.place.base {
        .                       self.link_upvar_region(span, borrow_region, upvar_id);
        .                   }
  110,320 ( 0.00%)      }
        .           
        .               /// This is the most complicated case: the path being borrowed is
        .               /// itself the referent of a borrowed pointer. Let me give an
        .               /// example fragment of code to make clear(er) the situation:
        .               ///
        .               /// ```ignore (incomplete Rust code)
        .               /// let r: &'a mut T = ...;  // the original reference "r" has lifetime 'a
        .               /// ...
-- line 737 ----------------------------------------
-- line 764 ----------------------------------------
        .               fn link_reborrowed_region(
        .                   &self,
        .                   span: Span,
        .                   borrow_region: ty::Region<'tcx>,
        .                   ref_region: ty::Region<'tcx>,
        .                   ref_mutability: hir::Mutability,
        .               ) -> bool {
        .                   debug!("link_reborrowed_region: {:?} <= {:?}", borrow_region, ref_region);
   34,705 ( 0.00%)          self.sub_regions(infer::Reborrow(span), borrow_region, ref_region);
        .           
        .                   // Decide whether we need to recurse and link any regions within
        .                   // the `ref_cmt`. This is concerned for the case where the value
        .                   // being reborrowed is in fact a borrowed pointer found within
        .                   // another borrowed pointer. For example:
        .                   //
        .                   //    let p: &'b &'a mut T = ...;
        .                   //    ...
-- line 780 ----------------------------------------
-- line 834 ----------------------------------------
        .                   borrow_region: ty::Region<'tcx>,
        .                   upvar_id: ty::UpvarId,
        .               ) {
        .                   debug!("link_upvar_region(borrorw_region={:?}, upvar_id={:?}", borrow_region, upvar_id);
        .                   // A by-reference upvar can't be borrowed for longer than the
        .                   // upvar is borrowed from the environment.
        .                   let closure_local_def_id = upvar_id.closure_expr_id;
        .                   let mut all_captures_are_imm_borrow = true;
        4 ( 0.00%)          for captured_place in self
        .                       .typeck_results
        .                       .borrow()
        .                       .closure_min_captures
        .                       .get(&closure_local_def_id.to_def_id())
        .                       .and_then(|root_var_min_cap| root_var_min_cap.get(&upvar_id.var_path.hir_id))
        .                       .into_iter()
        .                       .flatten()
        .                   {
       20 ( 0.00%)              match captured_place.info.capture_kind {
        .                           ty::UpvarCapture::ByRef(upvar_borrow) => {
        4 ( 0.00%)                      self.sub_regions(
       28 ( 0.00%)                          infer::ReborrowUpvar(span, upvar_id),
        .                                   borrow_region,
        4 ( 0.00%)                          captured_place.region.unwrap(),
        .                               );
       24 ( 0.00%)                      if let ty::ImmBorrow = upvar_borrow {
        .                                   debug!("link_upvar_region: capture by shared ref");
        .                               } else {
        .                                   all_captures_are_imm_borrow = false;
        .                               }
        .                           }
        .                           ty::UpvarCapture::ByValue => {
        .                               all_captures_are_imm_borrow = false;
        .                           }
        .                       }
        .                   }
        8 ( 0.00%)          if all_captures_are_imm_borrow {
        .                       return;
        .                   }
        4 ( 0.00%)          let fn_hir_id = self.tcx.hir().local_def_id_to_hir_id(closure_local_def_id);
        .                   let ty = self.resolve_node_type(fn_hir_id);
        .                   debug!("link_upvar_region: ty={:?}", ty);
        .           
        .                   // A closure capture can't be borrowed for longer than the
        .                   // reference to the closure.
        8 ( 0.00%)          if let ty::Closure(_, substs) = ty.kind() {
       24 ( 0.00%)              match self.infcx.closure_kind(substs) {
        .                           Some(ty::ClosureKind::Fn | ty::ClosureKind::FnMut) => {
        .                               // Region of environment pointer
       21 ( 0.00%)                      let env_region = self.tcx.mk_region(ty::ReFree(ty::FreeRegion {
        3 ( 0.00%)                          scope: upvar_id.closure_expr_id.to_def_id(),
        .                                   bound_region: ty::BrEnv,
        .                               }));
        6 ( 0.00%)                      self.sub_regions(
       27 ( 0.00%)                          infer::ReborrowUpvar(span, upvar_id),
        .                                   borrow_region,
        .                                   env_region,
        .                               );
        .                           }
        .                           Some(ty::ClosureKind::FnOnce) => {}
        .                           None => {
        .                               span_bug!(span, "Have not inferred closure kind before regionck");
        .                           }
-- line 895 ----------------------------------------

  676,533 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs
--------------------------------------------------------------------------------
Ir                 

-- line 83 ----------------------------------------
        .                   if $self.is_proc_macro {
        .                       return Lazy::empty();
        .                   }
        .               };
        .           }
        .           
        .           macro_rules! encoder_methods {
        .               ($($name:ident($ty:ty);)*) => {
    6,950 ( 0.00%)          $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {
        .                       self.opaque.$name(value)
    8,340 ( 0.00%)          })*
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {
        .               type Error = <opaque::Encoder as Encoder>::Error;
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> Result<(), Self::Error> {
-- line 101 ----------------------------------------
-- line 125 ----------------------------------------
        .                   emit_raw_bytes(&[u8]);
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<T>
        .           {
        .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      849 ( 0.00%)          e.emit_lazy_distance(*self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<[T]>
        .           {
       70 ( 0.00%)      fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   e.emit_usize(self.meta)?;
      256 ( 0.00%)          if self.meta == 0 {
        .                       return Ok(());
        .                   }
      832 ( 0.00%)          e.emit_lazy_distance(*self)
       12 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx, I: Idx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<Table<I, T>>
        .           where
        .               Option<T>: FixedSizeEncoding,
        .           {
        .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   e.emit_usize(self.meta)?;
      144 ( 0.00%)          e.emit_lazy_distance(*self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for CrateNum {
    3,458 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
    5,642 ( 0.00%)          if *self != LOCAL_CRATE && s.is_proc_macro {
        .                       panic!("Attempted to encode non-local CrateNum {:?} for proc-macro crate", self);
        .                   }
        .                   s.emit_u32(self.as_u32())
    2,964 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for DefIndex {
    2,350 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   s.emit_u32(self.as_u32())
    2,820 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnIndex {
        .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   s.emit_u32(self.as_u32())
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for SyntaxContext {
  831,130 ( 0.01%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  498,678 ( 0.01%)          rustc_span::hygiene::raw_encode_syntax_context(*self, &s.hygiene_ctxt, s)
  997,356 ( 0.02%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnId {
        .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      400 ( 0.00%)          if self.krate == LOCAL_CRATE {
        .                       // We will only write details for local expansions.  Non-local expansions will fetch
        .                       // data from the corresponding crate's metadata.
        .                       // FIXME(#43047) FIXME(#74731) We may eventually want to avoid relying on external
        .                       // metadata from proc-macro crates.
    1,529 ( 0.00%)              s.hygiene_ctxt.schedule_expn_data_for_encoding(*self);
        .                   }
    1,062 ( 0.00%)          self.krate.encode(s)?;
        .                   self.local_id.encode(s)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {
1,328,368 ( 0.02%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  996,276 ( 0.02%)          let span = self.data();
        .           
        .                   // Don't serialize any `SyntaxContext`s from a proc-macro crate,
        .                   // since we don't load proc-macro dependencies during serialization.
        .                   // This means that any hygiene information from macros used *within*
        .                   // a proc-macro crate (e.g. invoking a macro that expands to a proc-macro
        .                   // definition) will be lost.
        .                   //
        .                   // This can show up in two ways:
-- line 211 ----------------------------------------
-- line 228 ----------------------------------------
        .                   // None of these user-visible effects should result in any
        .                   // cross-crate inconsistencies (getting one behavior in the same
        .                   // crate, and a different behavior in another crate) due to the
        .                   // limited surface that proc-macros can expose.
        .                   //
        .                   // IMPORTANT: If this is ever changed, be sure to update
        .                   // `rustc_span::hygiene::raw_encode_expn_id` to handle
        .                   // encoding `ExpnData` for proc-macro crates.
  332,092 ( 0.01%)          if s.is_proc_macro {
        .                       SyntaxContext::root().encode(s)?;
        .                   } else {
  166,046 ( 0.00%)              span.ctxt.encode(s)?;
        .                   }
        .           
  166,046 ( 0.00%)          if self.is_dummy() {
        .                       return TAG_PARTIAL_SPAN.encode(s);
        .                   }
        .           
        .                   // The Span infrastructure should make sure that this invariant holds:
        .                   debug_assert!(span.lo <= span.hi);
        .           
  829,511 ( 0.01%)          if !s.source_file_cache.0.contains(span.lo) {
      428 ( 0.00%)              let source_map = s.tcx.sess.source_map();
      856 ( 0.00%)              let source_file_index = source_map.lookup_source_file_idx(span.lo);
      428 ( 0.00%)              s.source_file_cache =
      856 ( 0.00%)                  (source_map.files()[source_file_index].clone(), source_file_index);
        .                   }
        .           
  498,691 ( 0.01%)          if !s.source_file_cache.0.contains(span.hi) {
        .                       // Unfortunately, macro expansion still sometimes generates Spans
        .                       // that malformed in this way.
        .                       return TAG_PARTIAL_SPAN.encode(s);
        .                   }
        .           
        .                   let source_files = s.required_source_files.as_mut().expect("Already encoded SourceMap!");
        .                   // Record the fact that we need to encode the data for this `SourceFile`
  165,945 ( 0.00%)          source_files.insert(s.source_file_cache.1);
        .           
        .                   // There are two possible cases here:
        .                   // 1. This span comes from a 'foreign' crate - e.g. some crate upstream of the
        .                   // crate we are writing metadata for. When the metadata for *this* crate gets
        .                   // deserialized, the deserializer will need to know which crate it originally came
        .                   // from. We use `TAG_VALID_SPAN_FOREIGN` to indicate that a `CrateNum` should
        .                   // be deserialized after the rest of the span data, which tells the deserializer
        .                   // which crate contains the source map information.
-- line 272 ----------------------------------------
-- line 274 ----------------------------------------
        .                   // write `TAG_VALID_SPAN_LOCAL` to let the deserializer know that it should use
        .                   // our own source map information.
        .                   //
        .                   // If we're a proc-macro crate, we always treat this as a local `Span`.
        .                   // In `encode_source_map`, we serialize foreign `SourceFile`s into our metadata
        .                   // if we're a proc-macro crate.
        .                   // This allows us to avoid loading the dependencies of proc-macro crates: all of
        .                   // the information we need to decode `Span`s is stored in the proc-macro crate.
  995,670 ( 0.02%)          let (tag, lo, hi) = if s.source_file_cache.0.is_imported() && !s.is_proc_macro {
        .                       // To simplify deserialization, we 'rebase' this span onto the crate it originally came from
        .                       // (the crate that 'owns' the file it references. These rebased 'lo' and 'hi' values
        .                       // are relative to the source map information for the 'foreign' crate whose CrateNum
        .                       // we write into the metadata. This allows `imported_source_files` to binary
        .                       // search through the 'foreign' crate's source map information, using the
        .                       // deserialized 'lo' and 'hi' values directly.
        .                       //
        .                       // All of this logic ensures that the final result of deserialization is a 'normal'
        .                       // Span that can be used without any additional trouble.
        .                       let external_start_pos = {
        .                           // Introduce a new scope so that we drop the 'lock()' temporary
       48 ( 0.00%)                  match &*s.source_file_cache.0.external_src.lock() {
       16 ( 0.00%)                      ExternalSource::Foreign { original_start_pos, .. } => *original_start_pos,
        .                               src => panic!("Unexpected external source {:?}", src),
        .                           }
        .                       };
       48 ( 0.00%)              let lo = (span.lo - s.source_file_cache.0.start_pos) + external_start_pos;
       16 ( 0.00%)              let hi = (span.hi - s.source_file_cache.0.start_pos) + external_start_pos;
        .           
        .                       (TAG_VALID_SPAN_FOREIGN, lo, hi)
        .                   } else {
  497,787 ( 0.01%)              (TAG_VALID_SPAN_LOCAL, span.lo, span.hi)
        .                   };
        .           
        .                   tag.encode(s)?;
        .                   lo.encode(s)?;
        .           
        .                   // Encode length which is usually less than span.hi and profits more
        .                   // from the variable-length integer encoding that we use.
        .                   let len = hi - lo;
        .                   len.encode(s)?;
        .           
  331,890 ( 0.01%)          if tag == TAG_VALID_SPAN_FOREIGN {
        .                       // This needs to be two lines to avoid holding the `s.source_file_cache`
        .                       // while calling `cnum.encode(s)`
       64 ( 0.00%)              let cnum = s.source_file_cache.0.cnum;
       48 ( 0.00%)              cnum.encode(s)?;
        .                   }
        .           
        .                   Ok(())
1,328,368 ( 0.02%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {
        .               const CLEAR_CROSS_CRATE: bool = true;
        .           
        .               fn position(&self) -> usize {
        .                   self.opaque.position()
        .               }
-- line 331 ----------------------------------------
-- line 361 ----------------------------------------
        .           }
        .           
        .           /// Helper trait to allow overloading `EncodeContext::lazy` for iterators.
        .           trait EncodeContentsForLazy<'a, 'tcx, T: ?Sized + LazyMeta> {
        .               fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> T::Meta;
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for &T {
    3,166 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
    1,725 ( 0.00%)          self.encode(ecx).unwrap()
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for T {
    7,040 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
    3,265 ( 0.00%)          self.encode(ecx).unwrap()
    4,421 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx, I, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, [T]> for I
        .           where
        .               I: IntoIterator,
        .               I::Item: EncodeContentsForLazy<'a, 'tcx, T>,
        .           {
      238 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> usize {
    1,995 ( 0.00%)          self.into_iter().map(|value| value.encode_contents_for_lazy(ecx)).count()
      306 ( 0.00%)      }
        .           }
        .           
        .           // Shorthand for `$self.$tables.$table.set($def_id.index, $self.lazy($value))`, which would
        .           // normally need extra variables to avoid errors about multiple mutable borrows.
        .           macro_rules! record {
        .               ($self:ident.$tables:ident.$table:ident[$def_id:expr] <- $value:expr) => {{
        .                   {
        .                       let value = $value;
        .                       let lazy = $self.lazy(value);
        .                       $self.$tables.$table.set($def_id.index, lazy);
        .                   }
        .               }};
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
    1,615 ( 0.00%)      fn emit_lazy_distance<T: ?Sized + LazyMeta>(
        .                   &mut self,
        .                   lazy: Lazy<T>,
        .               ) -> Result<(), <Self as Encoder>::Error> {
        .                   let pos = lazy.position.get();
    1,063 ( 0.00%)          let distance = match self.lazy_state {
        .                       LazyState::NoNode => bug!("emit_lazy_distance: outside of a metadata node"),
      276 ( 0.00%)              LazyState::NodeStart(start) => {
        .                           let start = start.get();
      552 ( 0.00%)                  assert!(pos <= start);
        .                           start - pos
        .                       }
       47 ( 0.00%)              LazyState::Previous(last_pos) => {
       47 ( 0.00%)                  assert!(
        .                               last_pos <= lazy.position,
        .                               "make sure that the calls to `lazy*` \
        .                                are in the same order as the metadata fields",
        .                           );
      141 ( 0.00%)                  lazy.position.get() - last_pos.get()
        .                       }
        .                   };
      646 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(pos).unwrap());
        .                   self.emit_usize(distance)
    1,615 ( 0.00%)      }
        .           
    3,333 ( 0.00%)      fn lazy<T: ?Sized + LazyMeta>(
        .                   &mut self,
        .                   value: impl EncodeContentsForLazy<'a, 'tcx, T>,
        .               ) -> Lazy<T> {
        .                   let pos = NonZeroUsize::new(self.position()).unwrap();
        .           
    4,347 ( 0.00%)          assert_eq!(self.lazy_state, LazyState::NoNode);
   12,528 ( 0.00%)          self.lazy_state = LazyState::NodeStart(pos);
    8,172 ( 0.00%)          let meta = value.encode_contents_for_lazy(self);
    5,346 ( 0.00%)          self.lazy_state = LazyState::NoNode;
        .           
    9,114 ( 0.00%)          assert!(pos.get() <= self.position());
        .           
        .                   Lazy::from_position_and_meta(pos, meta)
    4,875 ( 0.00%)      }
        .           
        .               fn encode_info_for_items(&mut self) {
        9 ( 0.00%)          self.encode_info_for_mod(CRATE_DEF_ID, self.tcx.hir().root_module());
        .           
        .                   // Proc-macro crates only export proc-macro items, which are looked
        .                   // up using `proc_macro_data`
        2 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        .           
        6 ( 0.00%)          self.tcx.hir().visit_all_item_likes(&mut self.as_deep_visitor());
        .               }
        .           
        .               fn encode_def_path_table(&mut self) {
        4 ( 0.00%)          let table = self.tcx.resolutions(()).definitions.def_path_table();
        2 ( 0.00%)          if self.is_proc_macro {
        .                       for def_index in std::iter::once(CRATE_DEF_INDEX)
        .                           .chain(self.tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index))
        .                       {
        .                           let def_key = self.lazy(table.def_key(def_index));
        .                           let def_path_hash = self.lazy(table.def_path_hash(def_index));
        .                           self.tables.def_keys.set(def_index, def_key);
        .                           self.tables.def_path_hashes.set(def_index, def_path_hash);
        .                       }
        .                   } else {
        5 ( 0.00%)              for (def_index, def_key, def_path_hash) in table.enumerated_keys_and_path_hashes() {
        .                           let def_key = self.lazy(def_key);
        .                           let def_path_hash = self.lazy(def_path_hash);
    1,820 ( 0.00%)                  self.tables.def_keys.set(def_index, def_key);
    1,820 ( 0.00%)                  self.tables.def_path_hashes.set(def_index, def_path_hash);
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_def_path_hash_map(&mut self) -> Lazy<DefPathHashMapRef<'tcx>> {
        .                   self.lazy(DefPathHashMapRef::BorrowedFromTcx(
        2 ( 0.00%)              self.tcx.resolutions(()).definitions.def_path_hash_to_def_index_map(),
        .                   ))
        .               }
        .           
        .               fn encode_source_map(&mut self) -> Lazy<[rustc_span::SourceFile]> {
        2 ( 0.00%)          let source_map = self.tcx.sess.source_map();
        3 ( 0.00%)          let all_source_files = source_map.files();
        .           
        .                   // By replacing the `Option` with `None`, we ensure that we can't
        .                   // accidentally serialize any more `Span`s after the source map encoding
        .                   // is done.
        .                   let required_source_files = self.required_source_files.take().unwrap();
        .           
        .                   let adapted = all_source_files
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(idx, source_file)| {
        .                           // Only serialize `SourceFile`s that were used
        .                           // during the encoding of a `Span`
    1,091 ( 0.00%)                  required_source_files.contains(*idx) &&
        .                           // Don't serialize imported `SourceFile`s, unless
        .                           // we're in a proc-macro crate.
       73 ( 0.00%)                  (!source_file.is_imported() || self.is_proc_macro)
        .                       })
        .                       .map(|(_, source_file)| {
       33 ( 0.00%)                  let mut adapted = match source_file.name {
        .                               FileName::Real(ref realname) => {
       22 ( 0.00%)                          let mut adapted = (**source_file).clone();
      176 ( 0.00%)                          adapted.name = FileName::Real(match realname {
        .                                       RealFileName::LocalPath(path_to_file) => {
        .                                           // Prepend path of working directory onto potentially
        .                                           // relative paths, because they could become relative
        .                                           // to a wrong directory.
        .                                           // We include `working_dir` as part of the crate hash,
        .                                           // so it's okay for us to use it as part of the encoded
        .                                           // metadata.
       22 ( 0.00%)                                  let working_dir = &self.tcx.sess.opts.working_dir;
       22 ( 0.00%)                                  match working_dir {
        .                                               RealFileName::LocalPath(absolute) => {
        .                                                   // Although neither working_dir or the file name were subject
        .                                                   // to path remapping, the concatenation between the two may
        .                                                   // be. Hence we need to do a remapping here.
        .                                                   let joined = Path::new(absolute).join(path_to_file);
       77 ( 0.00%)                                          let (joined, remapped) =
      121 ( 0.00%)                                              source_map.path_mapping().map_prefix(joined);
       22 ( 0.00%)                                          if remapped {
        .                                                       RealFileName::Remapped {
        .                                                           local_path: None,
        .                                                           virtual_name: joined,
        .                                                       }
        .                                                   } else {
        .                                                       RealFileName::LocalPath(joined)
        .                                                   }
        .                                               }
-- line 532 ----------------------------------------
-- line 544 ----------------------------------------
        .                                       RealFileName::Remapped { local_path: _, virtual_name } => {
        .                                           RealFileName::Remapped {
        .                                               // We do not want any local path to be exported into metadata
        .                                               local_path: None,
        .                                               virtual_name: virtual_name.clone(),
        .                                           }
        .                                       }
        .                                   });
       22 ( 0.00%)                          adapted.name_hash = {
        .                                       let mut hasher: StableHasher = StableHasher::new();
       11 ( 0.00%)                              adapted.name.hash(&mut hasher);
        .                                       hasher.finish::<u128>()
        .                                   };
       11 ( 0.00%)                          Lrc::new(adapted)
        .                               }
        .           
        .                               // expanded code, not from a file
        .                               _ => source_file.clone(),
        .                           };
        .           
        .                           // We're serializing this `SourceFile` into our crate metadata,
        .                           // so mark it as coming from this crate.
        .                           // This also ensures that we don't try to deserialize the
        .                           // `CrateNum` for a proc-macro dependency - since proc macro
        .                           // dependencies aren't loaded when we deserialize a proc-macro,
        .                           // trying to remap the `CrateNum` would fail.
       22 ( 0.00%)                  if self.is_proc_macro {
        .                               Lrc::make_mut(&mut adapted).cnum = LOCAL_CRATE;
        .                           }
        .                           adapted
        .                       })
        .                       .collect::<Vec<_>>();
        .           
        .                   self.lazy(adapted.iter().map(|rc| &**rc))
        .               }
        .           
        8 ( 0.00%)      fn encode_crate_root(&mut self) -> Lazy<CrateRoot<'tcx>> {
        .                   let mut i = self.position();
        .           
        .                   // Encode the crate deps
        .                   let crate_deps = self.encode_crate_deps();
        .                   let dylib_dependency_formats = self.encode_dylib_dependency_formats();
        5 ( 0.00%)          let dep_bytes = self.position() - i;
        .           
        .                   // Encode the lib features.
        .                   i = self.position();
        .                   let lib_features = self.encode_lib_features();
        7 ( 0.00%)          let lib_feature_bytes = self.position() - i;
        .           
        .                   // Encode the language items.
        .                   i = self.position();
        .                   let lang_items = self.encode_lang_items();
        .                   let lang_items_missing = self.encode_lang_items_missing();
        5 ( 0.00%)          let lang_item_bytes = self.position() - i;
        .           
        .                   // Encode the diagnostic items.
        .                   i = self.position();
        .                   let diagnostic_items = self.encode_diagnostic_items();
        5 ( 0.00%)          let diagnostic_item_bytes = self.position() - i;
        .           
        .                   // Encode the native libraries used
        .                   i = self.position();
        .                   let native_libraries = self.encode_native_libraries();
        4 ( 0.00%)          let native_lib_bytes = self.position() - i;
        .           
        .                   let foreign_modules = self.encode_foreign_modules();
        .           
        .                   // Encode DefPathTable
        .                   i = self.position();
        .                   self.encode_def_path_table();
        5 ( 0.00%)          let def_path_table_bytes = self.position() - i;
        .           
        .                   // Encode the def IDs of traits, for rustdoc and diagnostics.
        .                   i = self.position();
        .                   let traits = self.encode_traits();
        5 ( 0.00%)          let traits_bytes = self.position() - i;
        .           
        .                   // Encode the def IDs of impls, for coherence checking.
        .                   i = self.position();
        .                   let impls = self.encode_impls();
        5 ( 0.00%)          let impls_bytes = self.position() - i;
        .           
        3 ( 0.00%)          let tcx = self.tcx;
        .           
        .                   // Encode MIR.
        .                   i = self.position();
        .                   self.encode_mir();
        5 ( 0.00%)          let mir_bytes = self.position() - i;
        .           
        .                   // Encode the items.
        .                   i = self.position();
        .                   self.encode_def_ids();
        .                   self.encode_info_for_items();
        4 ( 0.00%)          let item_bytes = self.position() - i;
        .           
        .                   // Encode the allocation index
        .                   let interpret_alloc_index = {
        .                       let mut interpret_alloc_index = Vec::new();
        .                       let mut n = 0;
        .                       trace!("beginning to encode alloc ids");
        .                       loop {
        .                           let new_n = self.interpret_allocs.len();
        .                           // if we have found new ids, serialize those, too
        2 ( 0.00%)                  if n == new_n {
        .                               // otherwise, abort
        .                               break;
        .                           }
        .                           trace!("encoding {} further alloc ids", new_n - n);
        .                           for idx in n..new_n {
        .                               let id = self.interpret_allocs[idx];
        .                               let pos = self.position() as u32;
        .                               interpret_alloc_index.push(pos);
        .                               interpret::specialized_encode_alloc_id(self, tcx, id).unwrap();
        .                           }
        .                           n = new_n;
        .                       }
        6 ( 0.00%)              self.lazy(interpret_alloc_index)
        .                   };
        .           
        .                   // Encode the proc macro data. This affects 'tables',
        .                   // so we need to do this before we encode the tables
        .                   i = self.position();
        .                   let proc_macro_data = self.encode_proc_macros();
        4 ( 0.00%)          let proc_macro_data_bytes = self.position() - i;
        .           
        .                   i = self.position();
        4 ( 0.00%)          let tables = self.tables.encode(&mut self.opaque);
        4 ( 0.00%)          let tables_bytes = self.position() - i;
        .           
        .                   // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode
        .                   // this as late as possible to give the prefetching as much time as possible to complete.
        .                   i = self.position();
        .                   let exported_symbols = tcx.exported_symbols(LOCAL_CRATE);
        .                   let exported_symbols = self.encode_exported_symbols(&exported_symbols);
        4 ( 0.00%)          let exported_symbols_bytes = self.position() - i;
        .           
        .                   // Encode the hygiene data,
        .                   // IMPORTANT: this *must* be the last thing that we encode (other than `SourceMap`). The process
        .                   // of encoding other items (e.g. `optimized_mir`) may cause us to load
        .                   // data from the incremental cache. If this causes us to deserialize a `Span`,
        .                   // then we may load additional `SyntaxContext`s into the global `HygieneData`.
        .                   // Therefore, we need to encode the hygiene data last to ensure that we encode
        .                   // any `SyntaxContext`s that might be used.
        .                   i = self.position();
        .                   let (syntax_contexts, expn_data, expn_hashes) = self.encode_hygiene();
        5 ( 0.00%)          let hygiene_bytes = self.position() - i;
        .           
        .                   i = self.position();
        .                   let def_path_hash_map = self.encode_def_path_hash_map();
        1 ( 0.00%)          let def_path_hash_map_bytes = self.position() - i;
        .           
        .                   // Encode source_map. This needs to be done last,
        .                   // since encoding `Span`s tells us which `SourceFiles` we actually
        .                   // need to encode.
        .                   i = self.position();
        .                   let source_map = self.encode_source_map();
        4 ( 0.00%)          let source_map_bytes = self.position() - i;
        .           
        3 ( 0.00%)          let attrs = tcx.hir().krate_attrs();
        7 ( 0.00%)          let has_default_lib_allocator = tcx.sess.contains_name(&attrs, sym::default_lib_allocator);
        .           
      118 ( 0.00%)          let root = self.lazy(CrateRoot {
        .                       name: tcx.crate_name(LOCAL_CRATE),
        3 ( 0.00%)              extra_filename: tcx.sess.opts.cg.extra_filename.clone(),
        1 ( 0.00%)              triple: tcx.sess.opts.target_triple.clone(),
        .                       hash: tcx.crate_hash(LOCAL_CRATE),
        .                       stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),
        3 ( 0.00%)              panic_strategy: tcx.sess.panic_strategy(),
        3 ( 0.00%)              panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,
        2 ( 0.00%)              edition: tcx.sess.edition(),
        .                       has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),
        .                       has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),
        .                       has_default_lib_allocator,
        .                       proc_macro_data,
        6 ( 0.00%)              compiler_builtins: tcx.sess.contains_name(&attrs, sym::compiler_builtins),
        6 ( 0.00%)              needs_allocator: tcx.sess.contains_name(&attrs, sym::needs_allocator),
        6 ( 0.00%)              needs_panic_runtime: tcx.sess.contains_name(&attrs, sym::needs_panic_runtime),
        6 ( 0.00%)              no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),
        5 ( 0.00%)              panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),
        5 ( 0.00%)              profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),
        2 ( 0.00%)              symbol_mangling_version: tcx.sess.opts.get_symbol_mangling_version(),
        .           
        .                       crate_deps,
        .                       dylib_dependency_formats,
        .                       lib_features,
        .                       lang_items,
        .                       diagnostic_items,
        .                       lang_items_missing,
        .                       native_libraries,
        .                       foreign_modules,
        .                       source_map,
        .                       traits,
        .                       impls,
        .                       exported_symbols,
        .                       interpret_alloc_index,
        2 ( 0.00%)              tables,
        .                       syntax_contexts,
        .                       expn_data,
        .                       expn_hashes,
        .                       def_path_hash_map,
        .                   });
        .           
        1 ( 0.00%)          let total_bytes = self.position();
        .           
        4 ( 0.00%)          if tcx.sess.meta_stats() {
        .                       let mut zero_bytes = 0;
        .                       for e in self.opaque.data.iter() {
        .                           if *e == 0 {
        .                               zero_bytes += 1;
        .                           }
        .                       }
        .           
        .                       eprintln!("metadata stats:");
-- line 756 ----------------------------------------
-- line 770 ----------------------------------------
        .                       eprintln!("            item bytes: {}", item_bytes);
        .                       eprintln!("           table bytes: {}", tables_bytes);
        .                       eprintln!("         hygiene bytes: {}", hygiene_bytes);
        .                       eprintln!("            zero bytes: {}", zero_bytes);
        .                       eprintln!("           total bytes: {}", total_bytes);
        .                   }
        .           
        .                   root
        9 ( 0.00%)      }
        .           }
        .           
        .           fn should_encode_visibility(def_kind: DefKind) -> bool {
        .               match def_kind {
        .                   DefKind::Mod
        .                   | DefKind::Struct
        .                   | DefKind::Union
        .                   | DefKind::Enum
-- line 786 ----------------------------------------
-- line 853 ----------------------------------------
        .           /// Whether we should encode MIR.
        .           ///
        .           /// Computing, optimizing and encoding the MIR is a relatively expensive operation.
        .           /// We want to avoid this work when not required. Therefore:
        .           /// - we only compute `mir_for_ctfe` on items with const-eval semantics;
        .           /// - we skip `optimized_mir` for check runs.
        .           ///
        .           /// Return a pair, resp. for CTFE and for LLVM.
    1,179 ( 0.00%)  fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {
      655 ( 0.00%)      match tcx.def_kind(def_id) {
        .                   // Constructors
        .                   DefKind::Ctor(_, _) => {
       12 ( 0.00%)              let mir_opt_base = tcx.sess.opts.output_types.should_codegen()
        .                           || tcx.sess.opts.debugging_opts.always_encode_mir;
        .                       (true, mir_opt_base)
        .                   }
        .                   // Constants
        .                   DefKind::AnonConst
        .                   | DefKind::InlineConst
        .                   | DefKind::AssocConst
        .                   | DefKind::Static
        .                   | DefKind::Const => (true, false),
        .                   // Full-fledged functions
        .                   DefKind::AssocFn | DefKind::Fn => {
        .                       let generics = tcx.generics_of(def_id);
      430 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
       86 ( 0.00%)                  || tcx.codegen_fn_attrs(def_id).requests_inline())
      219 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
        .                       // The function has a `const` modifier or is annotated with `default_method_body_is_const`.
       86 ( 0.00%)              let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())
      430 ( 0.00%)                  || tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const);
        .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
      172 ( 0.00%)              (is_const_fn, needs_inline || always_encode_mir)
        .                   }
        .                   // Closures can't be const fn.
        .                   DefKind::Closure => {
        .                       let generics = tcx.generics_of(def_id);
       36 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
        .                           || tcx.codegen_fn_attrs(def_id).requests_inline())
       18 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
        .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
       18 ( 0.00%)              (false, needs_inline || always_encode_mir)
        .                   }
        .                   // Generators require optimized MIR to compute layout.
        .                   DefKind::Generator => (false, true),
        .                   // The others don't have MIR.
        .                   _ => (false, false),
        .               }
    1,179 ( 0.00%)  }
        .           
        .           fn should_encode_variances(def_kind: DefKind) -> bool {
        .               match def_kind {
        .                   DefKind::Struct
        .                   | DefKind::Union
        .                   | DefKind::Enum
        .                   | DefKind::Variant
        .                   | DefKind::Fn
-- line 909 ----------------------------------------
-- line 969 ----------------------------------------
        .                   | DefKind::LifetimeParam
        .                   | DefKind::GlobalAsm
        .                   | DefKind::ExternCrate => false,
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
        .               fn encode_def_ids(&mut self) {
        2 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        1 ( 0.00%)          let tcx = self.tcx;
        3 ( 0.00%)          let hir = tcx.hir();
       45 ( 0.00%)          for local_id in hir.iter_local_def_id() {
        .                       let def_id = local_id.to_def_id();
        .                       let def_kind = tcx.opt_def_kind(local_id);
    2,730 ( 0.00%)              let def_kind = if let Some(def_kind) = def_kind { def_kind } else { continue };
    5,424 ( 0.00%)              record!(self.tables.def_kind[def_id] <- match def_kind {
        .                           // Replace Ctor by the enclosing object to avoid leaking details in children crates.
        .                           DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,
        .                           DefKind::Ctor(CtorOf::Variant, _) => DefKind::Variant,
        .                           def_kind => def_kind,
        .                       });
    1,017 ( 0.00%)              record!(self.tables.span[def_id] <- tcx.def_span(def_id));
    4,068 ( 0.00%)              record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));
    2,712 ( 0.00%)              record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));
        .                       if should_encode_visibility(def_kind) {
    1,680 ( 0.00%)                  record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));
        .                       }
        .                       if should_encode_stability(def_kind) {
        .                           self.encode_stability(def_id);
        .                           self.encode_const_stability(def_id);
    1,500 ( 0.00%)                  self.encode_deprecation(def_id);
        .                       }
        .                       if should_encode_variances(def_kind) {
      232 ( 0.00%)                  let v = self.tcx.variances_of(def_id);
      812 ( 0.00%)                  record!(self.tables.variances[def_id] <- v);
        .                       }
        .                       if should_encode_generics(def_kind) {
        .                           let g = tcx.generics_of(def_id);
      992 ( 0.00%)                  record!(self.tables.generics[def_id] <- g);
    2,976 ( 0.00%)                  record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));
      248 ( 0.00%)                  let inferred_outlives = self.tcx.inferred_outlives_of(def_id);
      299 ( 0.00%)                  if !inferred_outlives.is_empty() {
        .                               record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);
        .                           }
        .                       }
    2,373 ( 0.00%)              if let DefKind::Trait | DefKind::TraitAlias = def_kind {
       14 ( 0.00%)                  record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));
        .                       }
        .                   }
        .                   let inherent_impls = tcx.crate_inherent_impls(());
        .                   for (def_id, implementations) in inherent_impls.inherent_impls.iter() {
        2 ( 0.00%)              if implementations.is_empty() {
        .                           continue;
        .                       }
       18 ( 0.00%)              record!(self.tables.inherent_impls[def_id.to_def_id()] <- implementations.iter().map(|&def_id| {
        2 ( 0.00%)                  assert!(def_id.is_local());
        .                           def_id.index
        .                       }));
        .                   }
        .               }
        .           
    1,428 ( 0.00%)      fn encode_item_type(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_item_type({:?})", def_id);
    1,224 ( 0.00%)          record!(self.tables.ty[def_id] <- self.tcx.type_of(def_id));
    1,632 ( 0.00%)      }
        .           
        .               fn encode_enum_variant_info(&mut self, def: &ty::AdtDef, index: VariantIdx) {
        .                   let tcx = self.tcx;
        .                   let variant = &def.variants[index];
       32 ( 0.00%)          let def_id = variant.def_id;
        .                   debug!("EncodeContext::encode_enum_variant_info({:?})", def_id);
        .           
       48 ( 0.00%)          let data = VariantData {
        8 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
        8 ( 0.00%)              ctor: variant.ctor_def_id.map(|did| did.index),
        8 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
        .                   record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
        .                   record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {
        2 ( 0.00%)              assert!(f.did.is_local());
        .                       f.did.index
        .                   }));
        8 ( 0.00%)          self.encode_ident_span(def_id, variant.ident(tcx));
        8 ( 0.00%)          self.encode_item_type(def_id);
        8 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        .                       // FIXME(eddyb) encode signature only in `encode_enum_variant_ctor`.
        8 ( 0.00%)              if let Some(ctor_def_id) = variant.ctor_def_id {
        .                           record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_enum_variant_ctor(&mut self, def: &ty::AdtDef, index: VariantIdx) {
        .                   let tcx = self.tcx;
        .                   let variant = &def.variants[index];
       40 ( 0.00%)          let def_id = variant.ctor_def_id.unwrap();
        .                   debug!("EncodeContext::encode_enum_variant_ctor({:?})", def_id);
        .           
        .                   // FIXME(eddyb) encode only the `CtorKind` for constructors.
        .                   let data = VariantData {
        8 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
        .                       ctor: Some(def_id.index),
        8 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
       32 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
       24 ( 0.00%)          self.encode_item_type(def_id);
        8 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
      140 ( 0.00%)      fn encode_info_for_mod(&mut self, local_def_id: LocalDefId, md: &hir::Mod<'_>) {
       28 ( 0.00%)          let tcx = self.tcx;
        .                   let def_id = local_def_id.to_def_id();
        .                   debug!("EncodeContext::encode_info_for_mod({:?})", def_id);
        .           
        .                   // If we are encoding a proc-macro crates, `encode_info_for_mod` will
        .                   // only ever get called for the crate root. We still want to encode
        .                   // the crate root for consistency with other crates (some of the resolver
        .                   // code uses it). However, we skip encoding anything relating to child
        .                   // items - we encode information about proc-macros later on.
       42 ( 0.00%)          let reexports = if !self.is_proc_macro {
       28 ( 0.00%)              match tcx.module_reexports(local_def_id) {
        .                           Some(exports) => self.lazy(exports),
        .                           _ => Lazy::empty(),
        .                       }
        .                   } else {
        .                       Lazy::empty()
        .                   };
        .           
       56 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Mod(reexports));
       28 ( 0.00%)          if self.is_proc_macro {
        .                       // Encode this here because we don't do it in encode_def_ids.
        .                       record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));
        .                   } else {
        .                       let direct_children = md.item_ids.iter().map(|item_id| item_id.def_id.local_def_index);
        .                       // Foreign items are planted into their parent modules from name resolution point of view.
       28 ( 0.00%)              let tcx = self.tcx;
        .                       let foreign_item_children = md
        .                           .item_ids
        .                           .iter()
    1,005 ( 0.00%)                  .filter_map(|item_id| match tcx.hir().item(*item_id).kind {
        .                               hir::ItemKind::ForeignMod { items, .. } => {
        .                                   Some(items.iter().map(|fi_ref| fi_ref.id.def_id.local_def_index))
        .                               }
        .                               _ => None,
        .                           })
        .                           .flatten();
        .           
       98 ( 0.00%)              record!(self.tables.children[def_id] <- direct_children.chain(foreign_item_children));
        .                   }
      112 ( 0.00%)      }
        .           
        .               fn encode_field(
        .                   &mut self,
        .                   adt_def: &ty::AdtDef,
        .                   variant_index: VariantIdx,
        .                   field_index: usize,
        .               ) {
        .                   let variant = &adt_def.variants[variant_index];
        .                   let field = &variant.fields[field_index];
        .           
        .                   let def_id = field.did;
        .                   debug!("EncodeContext::encode_field({:?})", def_id);
        .           
        .                   record!(self.tables.kind[def_id] <- EntryKind::Field);
       38 ( 0.00%)          self.encode_ident_span(def_id, field.ident(self.tcx));
       57 ( 0.00%)          self.encode_item_type(def_id);
        .               }
        .           
        .               fn encode_struct_ctor(&mut self, adt_def: &ty::AdtDef, def_id: DefId) {
        .                   debug!("EncodeContext::encode_struct_ctor({:?})", def_id);
        .                   let tcx = self.tcx;
        .                   let variant = adt_def.non_enum_variant();
        .           
        .                   let data = VariantData {
-- line 1150 ----------------------------------------
-- line 1166 ----------------------------------------
        .                   let bounds = self.tcx.explicit_item_bounds(def_id);
        .                   if !bounds.is_empty() {
        .                       record!(self.tables.explicit_item_bounds[def_id] <- bounds);
        .                   }
        .               }
        .           
        .               fn encode_info_for_trait_item(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_info_for_trait_item({:?})", def_id);
        6 ( 0.00%)          let tcx = self.tcx;
        .           
       42 ( 0.00%)          let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());
        .                   let trait_item = tcx.associated_item(def_id);
        .           
       30 ( 0.00%)          let container = match trait_item.defaultness {
        .                       hir::Defaultness::Default { has_value: true } => AssocContainer::TraitWithDefault,
        .                       hir::Defaultness::Default { has_value: false } => AssocContainer::TraitRequired,
        .                       hir::Defaultness::Final => span_bug!(ast_item.span, "traits cannot have final items"),
        .                   };
        .           
       36 ( 0.00%)          match trait_item.kind {
        .                       ty::AssocKind::Const => {
        .                           let rendered = rustc_hir_pretty::to_string(
        .                               &(&self.tcx.hir() as &dyn intravisit::Map<'_>),
        .                               |s| s.print_trait_item(ast_item),
        .                           );
        .                           let rendered_const = self.lazy(RenderedConst(rendered));
        .           
        .                           record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
        .                               container,
        .                               Default::default(),
        .                               rendered_const,
        .                           ));
        .                       }
        .                       ty::AssocKind::Fn => {
       12 ( 0.00%)                  let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {
       12 ( 0.00%)                      let param_names = match *m {
        .                                   hir::TraitFn::Required(ref names) => self.encode_fn_param_names(names),
        .                                   hir::TraitFn::Provided(body) => self.encode_fn_param_names_for_body(body),
        .                               };
        .                               FnData {
        .                                   asyncness: m_sig.header.asyncness,
        .                                   constness: hir::Constness::NotConst,
        .                                   param_names,
        .                               }
-- line 1209 ----------------------------------------
-- line 1217 ----------------------------------------
        .                           })));
        .                       }
        .                       ty::AssocKind::Type => {
        .                           self.encode_explicit_item_bounds(def_id);
        .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
        .                       }
        .                   }
        .                   self.encode_ident_span(def_id, ast_item.ident);
       18 ( 0.00%)          match trait_item.kind {
        .                       ty::AssocKind::Const | ty::AssocKind::Fn => {
        .                           self.encode_item_type(def_id);
        .                       }
        .                       ty::AssocKind::Type => {
        .                           if trait_item.defaultness.has_value() {
        .                               self.encode_item_type(def_id);
        .                           }
        .                       }
        .                   }
        6 ( 0.00%)          if trait_item.kind == ty::AssocKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
        .               fn encode_info_for_impl_item(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_info_for_impl_item({:?})", def_id);
       78 ( 0.00%)          let tcx = self.tcx;
        .           
      234 ( 0.00%)          let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());
       39 ( 0.00%)          let impl_item = self.tcx.associated_item(def_id);
        .           
      156 ( 0.00%)          let container = match impl_item.defaultness {
        .                       hir::Defaultness::Default { has_value: true } => AssocContainer::ImplDefault,
        .                       hir::Defaultness::Final => AssocContainer::ImplFinal,
        .                       hir::Defaultness::Default { has_value: false } => {
        .                           span_bug!(ast_item.span, "impl items always have values (currently)")
        .                       }
        .                   };
        .           
      234 ( 0.00%)          match impl_item.kind {
        .                       ty::AssocKind::Const => {
        .                           if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {
        .                               let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);
        .           
        .                               record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
        .                                   container,
        .                                   qualifs,
        .                                   self.encode_rendered_const_for_body(body_id))
        .                               );
        .                           } else {
        .                               bug!()
        .                           }
        .                       }
        .                       ty::AssocKind::Fn => {
       70 ( 0.00%)                  let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {
        .                               FnData {
        .                                   asyncness: sig.header.asyncness,
        .                                   // Can be inside `impl const Trait`, so using sig.header.constness is not reliable
       35 ( 0.00%)                          constness: if self.tcx.is_const_fn_raw(def_id) {
        .                                       hir::Constness::Const
        .                                   } else {
        .                                       hir::Constness::NotConst
        .                                   },
        .                                   param_names: self.encode_fn_param_names_for_body(body),
        .                               }
        .                           } else {
        .                               bug!()
-- line 1282 ----------------------------------------
-- line 1286 ----------------------------------------
        .                               container,
        .                               has_self: impl_item.fn_has_self_parameter,
        .                           })));
        .                       }
        .                       ty::AssocKind::Type => {
        .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
        .                       }
        .                   }
      117 ( 0.00%)          self.encode_ident_span(def_id, impl_item.ident(self.tcx));
      195 ( 0.00%)          self.encode_item_type(def_id);
      156 ( 0.00%)          if let Some(trait_item_def_id) = impl_item.trait_item_def_id {
        .                       record!(self.tables.trait_item_def_id[def_id] <- trait_item_def_id);
        .                   }
       39 ( 0.00%)          if impl_item.kind == ty::AssocKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
      408 ( 0.00%)      fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {
      500 ( 0.00%)          self.lazy(self.tcx.hir().body_param_names(body_id))
      408 ( 0.00%)      }
        .           
        .               fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Ident]> {
        .                   self.lazy(param_names.iter())
        .               }
        .           
        .               fn encode_mir(&mut self) {
        3 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        .           
        .                   let keys_and_jobs = self
        .                       .tcx
        .                       .mir_keys(())
        .                       .iter()
        .                       .filter_map(|&def_id| {
      655 ( 0.00%)                  let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);
      747 ( 0.00%)                  if encode_const || encode_opt {
      236 ( 0.00%)                      Some((def_id, encode_const, encode_opt))
        .                           } else {
        .                               None
        .                           }
      262 ( 0.00%)              })
        .                       .collect::<Vec<_>>();
      595 ( 0.00%)          for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {
        .                       debug_assert!(encode_const || encode_opt);
        .           
        .                       debug!("EntryBuilder::encode_mir({:?})", def_id);
      118 ( 0.00%)              if encode_opt {
      336 ( 0.00%)                  record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));
        .                       }
      118 ( 0.00%)              if encode_const {
      144 ( 0.00%)                  record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));
        .           
        .                           // FIXME(generic_const_exprs): this feels wrong to have in `encode_mir`
       36 ( 0.00%)                  let abstract_const = self.tcx.thir_abstract_const(def_id);
      144 ( 0.00%)                  if let Ok(Some(abstract_const)) = abstract_const {
        .                               record!(self.tables.thir_abstract_consts[def_id.to_def_id()] <- abstract_const);
        .                           }
        .                       }
      472 ( 0.00%)              record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));
        .           
        .                       let instance =
        .                           ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));
      118 ( 0.00%)              let unused = self.tcx.unused_generic_params(instance);
      118 ( 0.00%)              if !unused.is_empty() {
        .                           record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_stability(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_stability({:?})", def_id);
        .           
        .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
        .                   // the stability attributes are even enabled before using their queries.
    2,000 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
        .                       if let Some(stab) = self.tcx.lookup_stability(def_id) {
        .                           record!(self.tables.stability[def_id] <- stab)
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_const_stability(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_const_stability({:?})", def_id);
        .           
        .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
        .                   // the stability attributes are even enabled before using their queries.
    1,750 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
        .                       if let Some(stab) = self.tcx.lookup_const_stability(def_id) {
        .                           record!(self.tables.const_stability[def_id] <- stab)
        .                       }
        .                   }
        .               }
        .           
    1,500 ( 0.00%)      fn encode_deprecation(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_deprecation({:?})", def_id);
    1,250 ( 0.00%)          if let Some(depr) = self.tcx.lookup_deprecation(def_id) {
        .                       record!(self.tables.deprecation[def_id] <- depr);
        .                   }
    1,250 ( 0.00%)      }
        .           
      204 ( 0.00%)      fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {
      102 ( 0.00%)          let hir = self.tcx.hir();
       68 ( 0.00%)          let body = hir.body(body_id);
      272 ( 0.00%)          let rendered = rustc_hir_pretty::to_string(&(&hir as &dyn intravisit::Map<'_>), |s| {
      102 ( 0.00%)              s.print_expr(&body.value)
        .                   });
       68 ( 0.00%)          let rendered_const = &RenderedConst(rendered);
        .                   self.lazy(rendered_const)
      238 ( 0.00%)      }
        .           
    1,134 ( 0.00%)      fn encode_info_for_item(&mut self, def_id: DefId, item: &'tcx hir::Item<'tcx>) {
        .                   let tcx = self.tcx;
        .           
        .                   debug!("EncodeContext::encode_info_for_item({:?})", def_id);
        .           
        .                   self.encode_ident_span(def_id, item.ident);
        .           
      756 ( 0.00%)          let entry_kind = match item.kind {
        .                       hir::ItemKind::Static(_, hir::Mutability::Mut, _) => EntryKind::MutStatic,
        .                       hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,
       93 ( 0.00%)              hir::ItemKind::Const(_, body_id) => {
       93 ( 0.00%)                  let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);
      217 ( 0.00%)                  EntryKind::Const(qualifs, self.encode_rendered_const_for_body(body_id))
        .                       }
      102 ( 0.00%)              hir::ItemKind::Fn(ref sig, .., body) => {
        .                           let data = FnData {
       51 ( 0.00%)                      asyncness: sig.header.asyncness,
       51 ( 0.00%)                      constness: sig.header.constness,
      102 ( 0.00%)                      param_names: self.encode_fn_param_names_for_body(body),
        .                           };
        .           
        .                           EntryKind::Fn(self.lazy(data))
        .                       }
        .                       hir::ItemKind::Macro(ref macro_def) => {
        .                           EntryKind::MacroDef(self.lazy(macro_def.clone()))
        .                       }
        .                       hir::ItemKind::Mod(ref m) => {
      156 ( 0.00%)                  return self.encode_info_for_mod(item.def_id, m);
        .                       }
        .                       hir::ItemKind::ForeignMod { .. } => EntryKind::ForeignMod,
        .                       hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,
        .                       hir::ItemKind::TyAlias(..) => EntryKind::Type,
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           self.encode_explicit_item_bounds(def_id);
        .                           EntryKind::OpaqueTy
        .                       }
       18 ( 0.00%)              hir::ItemKind::Enum(..) => EntryKind::Enum(self.tcx.adt_def(def_id).repr),
        .                       hir::ItemKind::Struct(ref struct_def, _) => {
       10 ( 0.00%)                  let adt_def = self.tcx.adt_def(def_id);
       15 ( 0.00%)                  let variant = adt_def.non_enum_variant();
        .           
        .                           // Encode def_ids for each field and method
        .                           // for methods, write all the stuff get_trait_method
        .                           // needs to know
       20 ( 0.00%)                  let ctor = struct_def
        .                               .ctor_hir_id()
        .                               .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);
        .           
        .                           EntryKind::Struct(
        .                               self.lazy(VariantData {
        5 ( 0.00%)                          ctor_kind: variant.ctor_kind,
       20 ( 0.00%)                          discr: variant.discr,
        .                                   ctor,
        .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                               }),
       15 ( 0.00%)                      adt_def.repr,
        .                           )
        .                       }
        .                       hir::ItemKind::Union(..) => {
        .                           let adt_def = self.tcx.adt_def(def_id);
        .                           let variant = adt_def.non_enum_variant();
        .           
        .                           EntryKind::Union(
        .                               self.lazy(VariantData {
-- line 1461 ----------------------------------------
-- line 1462 ----------------------------------------
        .                                   ctor_kind: variant.ctor_kind,
        .                                   discr: variant.discr,
        .                                   ctor: None,
        .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                               }),
        .                               adt_def.repr,
        .                           )
        .                       }
       88 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {
       84 ( 0.00%)                  let trait_ref = self.tcx.impl_trait_ref(def_id);
       44 ( 0.00%)                  let polarity = self.tcx.impl_polarity(def_id);
       44 ( 0.00%)                  let parent = if let Some(trait_ref) = trait_ref {
       20 ( 0.00%)                      let trait_def = self.tcx.trait_def(trait_ref.def_id);
      120 ( 0.00%)                      trait_def.ancestors(self.tcx, def_id).ok().and_then(|mut an| {
      120 ( 0.00%)                          an.nth(1).and_then(|node| match node {
        .                                       specialization_graph::Node::Impl(parent) => Some(parent),
        .                                       _ => None,
        .                                   })
        .                               })
        .                           } else {
        .                               None
        .                           };
        .           
        .                           // if this is an impl of `CoerceUnsized`, create its
        .                           // "unsized info", else just store None
        .                           let coerce_unsized_info = trait_ref.and_then(|t| {
      120 ( 0.00%)                      if Some(t.def_id) == self.tcx.lang_items().coerce_unsized_trait() {
        .                                   Some(self.tcx.at(item.span).coerce_unsized_info(def_id))
        .                               } else {
        .                                   None
        .                               }
        .                           });
        .           
        .                           let data = ImplData {
        .                               polarity,
-- line 1496 ----------------------------------------
-- line 1498 ----------------------------------------
        .                               constness,
        .                               parent_impl: parent,
        .                               coerce_unsized_info,
        .                           };
        .           
        .                           EntryKind::Impl(self.lazy(data))
        .                       }
        .                       hir::ItemKind::Trait(..) => {
        2 ( 0.00%)                  let trait_def = self.tcx.trait_def(def_id);
        .                           let data = TraitData {
        1 ( 0.00%)                      unsafety: trait_def.unsafety,
        2 ( 0.00%)                      paren_sugar: trait_def.paren_sugar,
        5 ( 0.00%)                      has_auto_impl: self.tcx.trait_is_auto(def_id),
        1 ( 0.00%)                      is_marker: trait_def.is_marker,
        1 ( 0.00%)                      skip_array_during_method_dispatch: trait_def.skip_array_during_method_dispatch,
        1 ( 0.00%)                      specialization_kind: trait_def.specialization_kind,
        .                               must_implement_one_of: trait_def.must_implement_one_of.clone(),
        .                           };
        .           
        .                           EntryKind::Trait(self.lazy(data))
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => EntryKind::TraitAlias,
        .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {
        .                           bug!("cannot encode info for item {:?}", item)
        .                       }
        .                   };
        .                   record!(self.tables.kind[def_id] <- entry_kind);
        .                   // FIXME(eddyb) there should be a nicer way to do this.
      565 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(..) => record!(self.tables.children[def_id] <-
        6 ( 0.00%)                  self.tcx.adt_def(def_id).variants.iter().map(|v| {
        8 ( 0.00%)                      assert!(v.def_id.is_local());
        .                               v.def_id.index
        .                           })
        .                       ),
        .                       hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {
        .                           record!(self.tables.children[def_id] <-
       15 ( 0.00%)                      self.tcx.adt_def(def_id).non_enum_variant().fields.iter().map(|f| {
       17 ( 0.00%)                          assert!(f.did.is_local());
        .                                   f.did.index
        .                               })
        .                           )
        .                       }
        .                       hir::ItemKind::Impl { .. } | hir::ItemKind::Trait(..) => {
       46 ( 0.00%)                  let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);
        .                           record!(self.tables.children[def_id] <-
        .                               associated_item_def_ids.iter().map(|&def_id| {
       45 ( 0.00%)                          assert!(def_id.is_local());
        .                                   def_id.index
        .                               })
        .                           );
        .                       }
        .                       _ => {}
        .                   }
      257 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::OpaqueTy(..)
        .                       | hir::ItemKind::Enum(..)
        .                       | hir::ItemKind::Struct(..)
        .                       | hir::ItemKind::Union(..)
      448 ( 0.00%)              | hir::ItemKind::Impl { .. } => self.encode_item_type(def_id),
        .                       _ => {}
        .                   }
      338 ( 0.00%)          if let hir::ItemKind::Fn(..) = item.kind {
      204 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
      277 ( 0.00%)          if let hir::ItemKind::Impl { .. } = item.kind {
      110 ( 0.00%)              if let Some(trait_ref) = self.tcx.impl_trait_ref(def_id) {
      100 ( 0.00%)                  record!(self.tables.impl_trait_ref[def_id] <- trait_ref);
        .                       }
        .                   }
      904 ( 0.00%)      }
        .           
        .               fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {
      129 ( 0.00%)          record!(self.tables.kind[def_id] <- kind);
       43 ( 0.00%)          if encode_type {
        .                       self.encode_item_type(def_id);
        .                   }
        .               }
        .           
        .               fn encode_info_for_closure(&mut self, hir_id: hir::HirId) {
       54 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   debug!("EncodeContext::encode_info_for_closure({:?})", def_id);
        .           
        .                   // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,
        .                   // including on the signature, which is inferred in `typeck.
       27 ( 0.00%)          let ty = self.tcx.typeck(def_id).node_type(hir_id);
        .           
       27 ( 0.00%)          match ty.kind() {
        .                       ty::Generator(..) => {
        .                           let data = self.tcx.generator_kind(def_id).unwrap();
        .                           record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Generator(data));
        .                       }
        .           
        .                       ty::Closure(..) => {
        .                           record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Closure);
        .                       }
        .           
        .                       _ => bug!("closure that is neither generator nor closure"),
        .                   }
       36 ( 0.00%)          self.encode_item_type(def_id.to_def_id());
       36 ( 0.00%)          if let ty::Closure(def_id, substs) = *ty.kind() {
       81 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- substs.as_closure().sig());
        .                   }
        .               }
        .           
        .               fn encode_info_for_anon_const(&mut self, id: hir::HirId) {
       21 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(id);
        .                   debug!("EncodeContext::encode_info_for_anon_const({:?})", def_id);
       15 ( 0.00%)          let body_id = self.tcx.hir().body_owned_by(id);
       12 ( 0.00%)          let const_data = self.encode_rendered_const_for_body(body_id);
        3 ( 0.00%)          let qualifs = self.tcx.mir_const_qualif(def_id);
        .           
       12 ( 0.00%)          record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));
       12 ( 0.00%)          self.encode_item_type(def_id.to_def_id());
        .               }
        .           
        .               fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);
        .                   self.lazy(used_libraries.iter())
        .               }
        .           
        .               fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {
        5 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let foreign_modules = self.tcx.foreign_modules(LOCAL_CRATE);
        .                   self.lazy(foreign_modules.iter().map(|(_, m)| m).cloned())
        .               }
        .           
        .               fn encode_hygiene(&mut self) -> (SyntaxContextTable, ExpnDataTable, ExpnHashTable) {
        .                   let mut syntax_contexts: TableBuilder<_, _> = Default::default();
        .                   let mut expn_data_table: TableBuilder<_, _> = Default::default();
        .                   let mut expn_hash_table: TableBuilder<_, _> = Default::default();
        .           
        2 ( 0.00%)          let _: Result<(), !> = self.hygiene_ctxt.encode(
        8 ( 0.00%)              &mut (&mut *self, &mut syntax_contexts, &mut expn_data_table, &mut expn_hash_table),
        .                       |(this, syntax_contexts, _, _), index, ctxt_data| {
        .                           syntax_contexts.set(index, this.lazy(ctxt_data));
        .                           Ok(())
        .                       },
        .                       |(this, _, expn_data_table, expn_hash_table), index, expn_data, hash| {
        .                           if let Some(index) = index.as_local() {
      136 ( 0.00%)                      expn_data_table.set(index.as_raw(), this.lazy(expn_data));
      136 ( 0.00%)                      expn_hash_table.set(index.as_raw(), this.lazy(hash));
        .                           }
        .                           Ok(())
        .                       },
        .                   );
        .           
        .                   (
        .                       syntax_contexts.encode(&mut self.opaque),
        .                       expn_data_table.encode(&mut self.opaque),
        .                       expn_hash_table.encode(&mut self.opaque),
        .                   )
        .               }
        .           
        .               fn encode_proc_macros(&mut self) -> Option<ProcMacroData> {
        6 ( 0.00%)          let is_proc_macro = self.tcx.sess.crate_types().contains(&CrateType::ProcMacro);
        .                   if is_proc_macro {
        .                       let tcx = self.tcx;
        .                       let hir = tcx.hir();
        .           
        .                       let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;
        .                       let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();
        .                       let macros =
        .                           self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));
-- line 1666 ----------------------------------------
-- line 1725 ----------------------------------------
        .           
        .                       Some(ProcMacroData { proc_macro_decls_static, stability, macros })
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {
        7 ( 0.00%)          empty_proc_macro!(self);
        .           
        1 ( 0.00%)          let deps = self
        .                       .tcx
        .                       .crates(())
        .                       .iter()
        .                       .map(|&cnum| {
        .                           let dep = CrateDep {
       21 ( 0.00%)                      name: self.tcx.crate_name(cnum),
       21 ( 0.00%)                      hash: self.tcx.crate_hash(cnum),
       21 ( 0.00%)                      host_hash: self.tcx.crate_host_hash(cnum),
       21 ( 0.00%)                      kind: self.tcx.dep_kind(cnum),
       21 ( 0.00%)                      extra_filename: self.tcx.extra_filename(cnum),
        .                           };
      105 ( 0.00%)                  (cnum, dep)
        .                       })
        .                       .collect::<Vec<_>>();
        .           
        .                   {
        .                       // Sanity-check the crate numbers
        .                       let mut expected_cnum = 1;
       42 ( 0.00%)              for &(n, _) in &deps {
       53 ( 0.00%)                  assert_eq!(n, CrateNum::new(expected_cnum));
        .                           expected_cnum += 1;
        .                       }
        .                   }
        .           
        .                   // We're just going to write a list of crate 'name-hash-version's, with
        .                   // the assumption that they are numbered 1 to n.
        .                   // FIXME (#2166): This is not nearly enough to support correct versioning
        .                   // but is enough to get transitive crate dependencies working.
        .                   self.lazy(deps.iter().map(|&(_, ref dep)| dep))
        .               }
        .           
        .               fn encode_lib_features(&mut self) -> Lazy<[(Symbol, Option<Symbol>)]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        .                   let lib_features = tcx.lib_features(());
        2 ( 0.00%)          self.lazy(lib_features.to_vec())
        .               }
        .           
        .               fn encode_diagnostic_items(&mut self) -> Lazy<[(Symbol, DefIndex)]> {
        3 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        .                   let diagnostic_items = &tcx.diagnostic_items(LOCAL_CRATE).name_to_id;
        .                   self.lazy(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))
        .               }
        .           
        .               fn encode_lang_items(&mut self) -> Lazy<[(DefIndex, usize)]> {
        4 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        1 ( 0.00%)          let lang_items = tcx.lang_items();
        2 ( 0.00%)          let lang_items = lang_items.items().iter();
        .                   self.lazy(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {
      568 ( 0.00%)              if let Some(def_id) = opt_def_id {
        .                           if def_id.is_local() {
        .                               return Some((def_id.index, i));
        .                           }
        .                       }
        .                       None
        .                   }))
        .               }
        .           
        .               fn encode_lang_items_missing(&mut self) -> Lazy<[lang_items::LangItem]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        1 ( 0.00%)          self.lazy(&tcx.lang_items().missing)
        .               }
        .           
        .               fn encode_traits(&mut self) -> Lazy<[DefIndex]> {
        3 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          self.lazy(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))
        .               }
        .           
        .               /// Encodes an index, mapping each trait to its (local) implementations.
        .               fn encode_impls(&mut self) -> Lazy<[TraitImpls]> {
        .                   debug!("EncodeContext::encode_traits_and_impls()");
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let tcx = self.tcx;
        5 ( 0.00%)          let mut visitor = ImplsVisitor { tcx, impls: FxHashMap::default() };
        4 ( 0.00%)          tcx.hir().visit_all_item_likes(&mut visitor);
        .           
        .                   let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();
        .           
        .                   // Bring everything into deterministic order for hashing
        9 ( 0.00%)          all_impls.sort_by_cached_key(|&(trait_def_id, _)| tcx.def_path_hash(trait_def_id));
        .           
        .                   let all_impls: Vec<_> = all_impls
        .                       .into_iter()
      135 ( 0.00%)              .map(|(trait_def_id, mut impls)| {
        .                           // Bring everything into deterministic order for hashing
        5 ( 0.00%)                  impls.sort_by_cached_key(|&(index, _)| {
       16 ( 0.00%)                      tcx.hir().def_path_hash(LocalDefId { local_def_index: index })
        .                           });
        .           
       36 ( 0.00%)                  TraitImpls {
        .                               trait_id: (trait_def_id.krate.as_u32(), trait_def_id.index),
       27 ( 0.00%)                      impls: self.lazy(&impls),
        .                           }
       72 ( 0.00%)              })
        .                       .collect();
        .           
        .                   self.lazy(&all_impls)
        .               }
        .           
        .               // Encodes all symbols exported from this crate into the metadata.
        .               //
        .               // This pass is seeded off the reachability list calculated in the
        .               // middle::reachable module but filters out items that either don't have a
        .               // symbol associated with them (they weren't translated) or if they're an FFI
        .               // definition (as that's not defined in this crate).
        .               fn encode_exported_symbols(
        .                   &mut self,
        .                   exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)],
        .               ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        .                   // The metadata symbol name is special. It should not show up in
        .                   // downstream crates.
        9 ( 0.00%)          let metadata_symbol_name = SymbolName::new(self.tcx, &metadata_symbol_name(self.tcx));
        .           
        .                   self.lazy(
        .                       exported_symbols
        .                           .iter()
      264 ( 0.00%)                  .filter(|&&(ref exported_symbol, _)| match *exported_symbol {
        .                               ExportedSymbol::NoDefId(symbol_name) => symbol_name != metadata_symbol_name,
        .                               _ => true,
        .                           })
        .                           .cloned(),
        .                   )
        .               }
        .           
        .               fn encode_dylib_dependency_formats(&mut self) -> Lazy<[Option<LinkagePreference>]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let formats = self.tcx.dependency_formats(());
        4 ( 0.00%)          for (ty, arr) in formats.iter() {
        2 ( 0.00%)              if *ty != CrateType::Dylib {
        .                           continue;
        .                       }
        .                       return self.lazy(arr.iter().map(|slot| match *slot {
        .                           Linkage::NotLinked | Linkage::IncludedFromDylib => None,
        .           
        .                           Linkage::Dynamic => Some(LinkagePreference::RequireDynamic),
        .                           Linkage::Static => Some(LinkagePreference::RequireStatic),
        .                       }));
-- line 1876 ----------------------------------------
-- line 1914 ----------------------------------------
        .               }
        .           }
        .           
        .           // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.
        .           impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
      129 ( 0.00%)          self.tcx.hir()
        .               }
  570,465 ( 0.01%)      fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {
   63,385 ( 0.00%)          intravisit::walk_expr(self, ex);
        .                   self.encode_info_for_expr(ex);
  507,080 ( 0.01%)      }
       27 ( 0.00%)      fn visit_anon_const(&mut self, c: &'tcx AnonConst) {
        .                   intravisit::walk_anon_const(self, c);
        6 ( 0.00%)          self.encode_info_for_anon_const(c.hir_id);
       24 ( 0.00%)      }
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      606 ( 0.00%)          intravisit::walk_item(self, item);
      404 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {} // ignore these
      504 ( 0.00%)              _ => self.encode_info_for_item(item.def_id.to_def_id(), item),
        .                   }
      808 ( 0.00%)          self.encode_addl_info_for_item(item);
        .               }
        .               fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem<'tcx>) {
        .                   intravisit::walk_foreign_item(self, ni);
        .                   self.encode_info_for_foreign_item(ni.def_id.to_def_id(), ni);
        .               }
    1,143 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   intravisit::walk_generics(self, generics);
        .                   self.encode_info_for_generics(generics);
    1,016 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
       56 ( 0.00%)      fn encode_fields(&mut self, adt_def: &ty::AdtDef) {
        .                   for (variant_index, variant) in adt_def.variants.iter_enumerated() {
        .                       for (field_index, _field) in variant.fields.iter().enumerate() {
        .                           self.encode_field(adt_def, variant_index, field_index);
        .                       }
        .                   }
       64 ( 0.00%)      }
        .           
        .               fn encode_info_for_generics(&mut self, generics: &hir::Generics<'tcx>) {
        .                   for param in generics.params {
      264 ( 0.00%)              let def_id = self.tcx.hir().local_def_id(param.hir_id);
      374 ( 0.00%)              match param.kind {
        .                           GenericParamKind::Lifetime { .. } => continue,
        .                           GenericParamKind::Type { default, .. } => {
        .                               self.encode_info_for_generic_param(
        .                                   def_id.to_def_id(),
        .                                   EntryKind::TypeParam,
        .                                   default.is_some(),
        .                               );
        .                           }
-- line 1970 ----------------------------------------
-- line 1975 ----------------------------------------
        .                                   record!(self.tables.const_defaults[def_id] <- self.tcx.const_param_default(def_id))
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_info_for_expr(&mut self, expr: &hir::Expr<'_>) {
  126,770 ( 0.00%)          if let hir::ExprKind::Closure(..) = expr.kind {
        .                       self.encode_info_for_closure(expr.hir_id);
        .                   }
        .               }
        .           
        .               fn encode_ident_span(&mut self, def_id: DefId, ident: Ident) {
        .                   record!(self.tables.ident_span[def_id] <- ident.span);
        .               }
        .           
        .               /// In some cases, along with the item itself, we also
        .               /// encode some sub-items. Usually we want some info from the item
        .               /// so it's easier to do that here then to wait until we would encounter
        .               /// normally in the visitor walk.
    1,818 ( 0.00%)      fn encode_addl_info_for_item(&mut self, item: &hir::Item<'_>) {
    1,010 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::Macro(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::ForeignMod { .. }
        .                       | hir::ItemKind::GlobalAsm(..)
        .                       | hir::ItemKind::ExternCrate(..)
        .                       | hir::ItemKind::Use(..)
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::OpaqueTy(..)
        .                       | hir::ItemKind::TraitAlias(..) => {
        .                           // no sub-item recording needed in these cases
        .                       }
        .                       hir::ItemKind::Enum(..) => {
        3 ( 0.00%)                  let def = self.tcx.adt_def(item.def_id.to_def_id());
        6 ( 0.00%)                  self.encode_fields(def);
        .           
        .                           for (i, variant) in def.variants.iter_enumerated() {
        .                               self.encode_enum_variant_info(def, i);
        .           
       24 ( 0.00%)                      if let Some(_ctor_def_id) = variant.ctor_def_id {
        .                                   self.encode_enum_variant_ctor(def, i);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref struct_def, _) => {
        5 ( 0.00%)                  let def = self.tcx.adt_def(item.def_id.to_def_id());
       10 ( 0.00%)                  self.encode_fields(def);
        .           
        .                           // If the struct has a constructor, encode it.
       20 ( 0.00%)                  if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {
        .                               let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);
        .                               self.encode_struct_ctor(def, ctor_def_id.to_def_id());
        .                           }
        .                       }
        .                       hir::ItemKind::Union(..) => {
        .                           let def = self.tcx.adt_def(item.def_id.to_def_id());
        .                           self.encode_fields(def);
        .                       }
        .                       hir::ItemKind::Impl { .. } => {
      156 ( 0.00%)                  for &trait_item_def_id in
       22 ( 0.00%)                      self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
        .                           {
        .                               self.encode_info_for_impl_item(trait_item_def_id);
        .                           }
        .                       }
        .                       hir::ItemKind::Trait(..) => {
       19 ( 0.00%)                  for &item_def_id in self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
        .                           {
        .                               self.encode_info_for_trait_item(item_def_id);
        .                           }
        .                       }
        .                   }
    1,616 ( 0.00%)      }
        .           }
        .           
        .           struct ImplsVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               impls: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>>,
        .           }
        .           
        .           impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {
    1,414 ( 0.00%)      fn visit_item(&mut self, item: &hir::Item<'_>) {
      404 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Impl(..) => {
       84 ( 0.00%)                  if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {
      120 ( 0.00%)                      let simplified_self_ty = fast_reject::simplify_type(
        .                                   self.tcx,
        .                                   trait_ref.self_ty(),
        .                                   SimplifyParams::No,
        .                                   StripReferences::No,
        .                               );
        .           
        .                               self.impls
        .                                   .entry(trait_ref.def_id)
        .                                   .or_default()
        .                                   .push((item.def_id.local_def_index, simplified_self_ty));
        .                           }
        .                       }
        .                       _ => {}
        .                   }
    1,616 ( 0.00%)      }
        .           
        .               fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem<'v>) {}
        .           
        .               fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem<'v>) {
        .                   // handled in `visit_item` above
        .               }
        .           
        .               fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}
-- line 2088 ----------------------------------------
-- line 2146 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn raw_data(&self) -> &[u8] {
        .                   &self.raw_data
        .               }
        .           }
        .           
       10 ( 0.00%)  pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {
        5 ( 0.00%)      let _prof_timer = tcx.prof.verbose_generic_activity("generate_crate_metadata");
        .           
        .               // Since encoding metadata is not in a query, and nothing is cached,
        .               // there's no need to do dep-graph tracking for any of it.
        .               tcx.dep_graph.assert_ignored();
        .           
        7 ( 0.00%)      join(
        3 ( 0.00%)          || encode_metadata_impl(tcx),
        .                   || {
        5 ( 0.00%)              if tcx.sess.threads() == 1 {
        .                           return;
        .                       }
        .                       // Prefetch some queries used by metadata encoding.
        .                       // This is not necessary for correctness, but is only done for performance reasons.
        .                       // It can be removed if it turns out to cause trouble or be detrimental to performance.
        .                       join(|| prefetch_mir(tcx), || tcx.exported_symbols(LOCAL_CRATE));
        .                   },
        .               )
        .               .0
        9 ( 0.00%)  }
        .           
        9 ( 0.00%)  fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {
        1 ( 0.00%)      let mut encoder = opaque::Encoder::new(vec![]);
        .               encoder.emit_raw_bytes(METADATA_HEADER).unwrap();
        .           
        .               // Will be filled with the root position after encoding everything.
        .               encoder.emit_raw_bytes(&[0, 0, 0, 0]).unwrap();
        .           
        2 ( 0.00%)      let source_map_files = tcx.sess.source_map().files();
        3 ( 0.00%)      let source_file_cache = (source_map_files[0].clone(), 0);
        2 ( 0.00%)      let required_source_files = Some(GrowableBitSet::with_capacity(source_map_files.len()));
        .               drop(source_map_files);
        .           
        .               let hygiene_ctxt = HygieneEncodeContext::default();
        .           
       35 ( 0.00%)      let mut ecx = EncodeContext {
        4 ( 0.00%)          opaque: encoder,
        .                   tcx,
        2 ( 0.00%)          feat: tcx.features(),
        .                   tables: Default::default(),
        .                   lazy_state: LazyState::NoNode,
        .                   type_shorthands: Default::default(),
        .                   predicate_shorthands: Default::default(),
        4 ( 0.00%)          source_file_cache,
        .                   interpret_allocs: Default::default(),
        4 ( 0.00%)          required_source_files,
        2 ( 0.00%)          is_proc_macro: tcx.sess.crate_types().contains(&CrateType::ProcMacro),
        .                   hygiene_ctxt: &hygiene_ctxt,
        .               };
        .           
        .               // Encode the rustc version string in a predictable location.
        .               rustc_version().encode(&mut ecx).unwrap();
        .           
        .               // Encode all the entries and extra information in the crate,
        .               // culminating in the `CrateRoot` which points to all of it.
        1 ( 0.00%)      let root = ecx.encode_crate_root();
        .           
        7 ( 0.00%)      let mut result = ecx.opaque.into_inner();
        .           
        .               // Encode the root position.
        .               let header = METADATA_HEADER.len();
        .               let pos = root.position.get();
        3 ( 0.00%)      result[header + 0] = (pos >> 24) as u8;
        3 ( 0.00%)      result[header + 1] = (pos >> 16) as u8;
        1 ( 0.00%)      result[header + 2] = (pos >> 8) as u8;
        5 ( 0.00%)      result[header + 3] = (pos >> 0) as u8;
        .           
        .               // Record metadata size for self-profiling
        .               tcx.prof.artifact_size("crate_metadata", "crate_metadata", result.len() as u64);
        .           
        5 ( 0.00%)      EncodedMetadata { raw_data: result }
       12 ( 0.00%)  }
        .           
        .           pub fn provide(providers: &mut Providers) {
        2 ( 0.00%)      *providers = Providers {
        .                   traits_in_crate: |tcx, cnum| {
        1 ( 0.00%)              assert_eq!(cnum, LOCAL_CRATE);
        .           
        1 ( 0.00%)              #[derive(Default)]
        .                       struct TraitsVisitor {
        .                           traits: Vec<DefId>,
        .                       }
        .                       impl ItemLikeVisitor<'_> for TraitsVisitor {
        .                           fn visit_item(&mut self, item: &hir::Item<'_>) {
      808 ( 0.00%)                      if let hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) = item.kind {
        1 ( 0.00%)                          self.traits.push(item.def_id.to_def_id());
        .                               }
        .                           }
        .                           fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}
        .                           fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}
        .                           fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}
        .                       }
        .           
        .                       let mut visitor = TraitsVisitor::default();
        4 ( 0.00%)              tcx.hir().visit_all_item_likes(&mut visitor);
        .                       // Bring everything into deterministic order.
        .                       visitor.traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));
        .                       tcx.arena.alloc_slice(&visitor.traits)
        .                   },
        .           
        .                   ..*providers
        .               };
        .           }
-- line 2257 ----------------------------------------

  349,581 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/pattern/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 37 ----------------------------------------
         .           crate struct PatCtxt<'a, 'tcx> {
         .               crate tcx: TyCtxt<'tcx>,
         .               crate param_env: ty::ParamEnv<'tcx>,
         .               crate typeck_results: &'a ty::TypeckResults<'tcx>,
         .               crate errors: Vec<PatternError>,
         .               include_lint_checks: bool,
         .           }
         .           
    14,544 ( 0.00%)  crate fn pat_from_hir<'a, 'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               param_env: ty::ParamEnv<'tcx>,
         .               typeck_results: &'a ty::TypeckResults<'tcx>,
         .               pat: &'tcx hir::Pat<'tcx>,
         .           ) -> Pat<'tcx> {
         .               let mut pcx = PatCtxt::new(tcx, param_env, typeck_results);
     3,232 ( 0.00%)      let result = pcx.lower_pattern(pat);
     1,616 ( 0.00%)      if !pcx.errors.is_empty() {
         .                   let msg = format!("encountered errors lowering pattern: {:?}", pcx.errors);
         .                   tcx.sess.delay_span_bug(pat.span, &msg);
         .               }
         .               debug!("pat_from_hir({:?}) = {:?}", pat, result);
         .               result
    12,928 ( 0.00%)  }
         .           
         .           impl<'a, 'tcx> PatCtxt<'a, 'tcx> {
         .               crate fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   typeck_results: &'a ty::TypeckResults<'tcx>,
         .               ) -> Self {
    16,160 ( 0.00%)          PatCtxt { tcx, param_env, typeck_results, errors: vec![], include_lint_checks: false }
         .               }
         .           
         .               crate fn include_lint_checks(&mut self) -> &mut Self {
     4,848 ( 0.00%)          self.include_lint_checks = true;
         .                   self
         .               }
         .           
    47,980 ( 0.00%)      crate fn lower_pattern(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Pat<'tcx> {
         .                   // When implicit dereferences have been inserted in this pattern, the unadjusted lowered
         .                   // pattern has the type that results *after* dereferencing. For example, in this code:
         .                   //
         .                   // ```
         .                   // match &&Some(0i32) {
         .                   //     Some(n) => { ... },
         .                   //     _ => { ... },
         .                   // }
-- line 83 ----------------------------------------
-- line 88 ----------------------------------------
         .                   //
         .                   // `vec![&&Option<i32>, &Option<i32>]`.
         .                   //
         .                   // Applying the adjustments, we want to instead output `&&Some(n)` (as a THIR pattern). So
         .                   // we wrap the unadjusted pattern in `PatKind::Deref` repeatedly, consuming the
         .                   // adjustments in *reverse order* (last-in-first-out, so that the last `Deref` inserted
         .                   // gets the least-dereferenced type).
         .                   let unadjusted_pat = self.lower_pattern_unadjusted(pat);
    19,192 ( 0.00%)          self.typeck_results.pat_adjustments().get(pat.hir_id).unwrap_or(&vec![]).iter().rev().fold(
    23,990 ( 0.00%)              unadjusted_pat,
         .                       |pat, ref_ty| {
         .                           debug!("{:?}: wrapping pattern with type {:?}", pat, ref_ty);
         .                           Pat {
         .                               span: pat.span,
         .                               ty: ref_ty,
         .                               kind: Box::new(PatKind::Deref { subpattern: pat }),
         .                           }
         .                       },
         .                   )
    43,182 ( 0.00%)      }
         .           
         .               fn lower_range_expr(
         .                   &mut self,
         .                   expr: &'tcx hir::Expr<'tcx>,
         .               ) -> (PatKind<'tcx>, Option<Ascription<'tcx>>) {
    19,952 ( 0.00%)          match self.lower_lit(expr) {
         .                       PatKind::AscribeUserType { ascription, subpattern: Pat { kind: box kind, .. } } => {
         .                           (kind, Some(ascription))
         .                       }
    74,820 ( 0.00%)              kind => (kind, None),
         .                   }
         .               }
         .           
         .               fn lower_pattern_range(
         .                   &mut self,
         .                   ty: Ty<'tcx>,
         .                   lo: &'tcx ty::Const<'tcx>,
         .                   hi: &'tcx ty::Const<'tcx>,
         .                   end: RangeEnd,
         .                   span: Span,
         .               ) -> PatKind<'tcx> {
     2,494 ( 0.00%)          assert_eq!(lo.ty, ty);
     2,494 ( 0.00%)          assert_eq!(hi.ty, ty);
    14,964 ( 0.00%)          let cmp = compare_const_vals(self.tcx, lo, hi, self.param_env, ty);
     7,482 ( 0.00%)          match (end, cmp) {
         .                       // `x..y` where `x < y`.
         .                       // Non-empty because the range includes at least `x`.
         .                       (RangeEnd::Excluded, Some(Ordering::Less)) => PatKind::Range(PatRange { lo, hi, end }),
         .                       // `x..y` where `x >= y`. The range is empty => error.
         .                       (RangeEnd::Excluded, _) => {
         .                           struct_span_err!(
         .                               self.tcx.sess,
         .                               span,
-- line 140 ----------------------------------------
-- line 142 ----------------------------------------
         .                               "lower range bound must be less than upper"
         .                           )
         .                           .emit();
         .                           PatKind::Wild
         .                       }
         .                       // `x..=y` where `x == y`.
         .                       (RangeEnd::Included, Some(Ordering::Equal)) => PatKind::Constant { value: lo },
         .                       // `x..=y` where `x < y`.
    12,470 ( 0.00%)              (RangeEnd::Included, Some(Ordering::Less)) => PatKind::Range(PatRange { lo, hi, end }),
         .                       // `x..=y` where `x > y` hence the range is empty => error.
         .                       (RangeEnd::Included, _) => {
         .                           let mut err = struct_span_err!(
         .                               self.tcx.sess,
         .                               span,
         .                               E0030,
         .                               "lower range bound must be less than or equal to upper"
         .                           );
-- line 158 ----------------------------------------
-- line 173 ----------------------------------------
         .               }
         .           
         .               fn normalize_range_pattern_ends(
         .                   &self,
         .                   ty: Ty<'tcx>,
         .                   lo: Option<&PatKind<'tcx>>,
         .                   hi: Option<&PatKind<'tcx>>,
         .               ) -> Option<(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>)> {
    17,458 ( 0.00%)          match (lo, hi) {
         .                       (Some(PatKind::Constant { value: lo }), Some(PatKind::Constant { value: hi })) => {
     2,494 ( 0.00%)                  Some((lo, hi))
         .                       }
         .                       (Some(PatKind::Constant { value: lo }), None) => {
         .                           Some((lo, ty.numeric_max_val(self.tcx)?))
         .                       }
         .                       (None, Some(PatKind::Constant { value: hi })) => {
         .                           Some((ty.numeric_min_val(self.tcx)?, hi))
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
         .               fn lower_pattern_unadjusted(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Pat<'tcx> {
    33,586 ( 0.00%)          let mut ty = self.typeck_results.node_type(pat.hir_id);
         .           
    23,990 ( 0.00%)          let kind = match pat.kind {
        64 ( 0.00%)              hir::PatKind::Wild => PatKind::Wild,
         .           
     8,010 ( 0.00%)              hir::PatKind::Lit(ref value) => self.lower_lit(value),
         .           
     7,482 ( 0.00%)              hir::PatKind::Range(ref lo_expr, ref hi_expr, end) => {
         .                           let (lo_expr, hi_expr) = (lo_expr.as_deref(), hi_expr.as_deref());
     4,988 ( 0.00%)                  let lo_span = lo_expr.map_or(pat.span, |e| e.span);
         .                           let lo = lo_expr.map(|e| self.lower_range_expr(e));
         .                           let hi = hi_expr.map(|e| self.lower_range_expr(e));
         .           
         .                           let (lp, hp) = (lo.as_ref().map(|x| &x.0), hi.as_ref().map(|x| &x.0));
     2,494 ( 0.00%)                  let mut kind = match self.normalize_range_pattern_ends(ty, lp, hp) {
         .                               Some((lc, hc)) => self.lower_pattern_range(ty, lc, hc, end, lo_span),
         .                               None => {
         .                                   let msg = &format!(
         .                                       "found bad range pattern `{:?}` outside of error recovery",
         .                                       (&lo, &hi),
         .                                   );
         .                                   self.tcx.sess.delay_span_bug(pat.span, msg);
         .                                   PatKind::Wild
         .                               }
         .                           };
         .           
         .                           // If we are handling a range with associated constants (e.g.
         .                           // `Foo::<'a>::A..=Foo::B`), we need to put the ascriptions for the associated
         .                           // constants somewhere. Have them on the range pattern.
    22,446 ( 0.00%)                  for end in &[lo, hi] {
    14,964 ( 0.00%)                      if let Some((_, Some(ascription))) = end {
         .                                   let subpattern = Pat { span: pat.span, ty, kind: Box::new(kind) };
         .                                   kind = PatKind::AscribeUserType { ascription: *ascription, subpattern };
         .                               }
         .                           }
         .           
    37,410 ( 0.00%)                  kind
         .                       }
         .           
        80 ( 0.00%)              hir::PatKind::Path(ref qpath) => {
       560 ( 0.00%)                  return self.lower_path(qpath, pat.hir_id, pat.span);
         .                       }
         .           
         .                       hir::PatKind::Ref(ref subpattern, _) | hir::PatKind::Box(ref subpattern) => {
       144 ( 0.00%)                  PatKind::Deref { subpattern: self.lower_pattern(subpattern) }
         .                       }
         .           
         .                       hir::PatKind::Slice(ref prefix, ref slice, ref suffix) => {
         .                           self.slice_or_array_pattern(pat.span, ty, prefix, slice, suffix)
         .                       }
         .           
         .                       hir::PatKind::Tuple(ref pats, ddpos) => {
       120 ( 0.00%)                  let tys = match ty.kind() {
         .                               ty::Tuple(ref tys) => tys,
         .                               _ => span_bug!(pat.span, "unexpected type for tuple pattern: {:?}", ty),
         .                           };
       120 ( 0.00%)                  let subpatterns = self.lower_tuple_subpats(pats, tys.len(), ddpos);
       240 ( 0.00%)                  PatKind::Leaf { subpatterns }
         .                       }
         .           
     2,940 ( 0.00%)              hir::PatKind::Binding(_, id, ident, ref sub) => {
     2,100 ( 0.00%)                  let bm = *self
         .                               .typeck_results
         .                               .pat_binding_modes()
       840 ( 0.00%)                      .get(pat.hir_id)
         .                               .expect("missing binding mode");
     4,200 ( 0.00%)                  let (mutability, mode) = match bm {
         .                               ty::BindByValue(mutbl) => (mutbl, BindingMode::ByValue),
         .                               ty::BindByReference(hir::Mutability::Mut) => (
         .                                   Mutability::Not,
         .                                   BindingMode::ByRef(BorrowKind::Mut { allow_two_phase_borrow: false }),
         .                               ),
         .                               ty::BindByReference(hir::Mutability::Not) => {
         .                                   (Mutability::Not, BindingMode::ByRef(BorrowKind::Shared))
         .                               }
         .                           };
         .           
         .                           // A ref x pattern is the same node used for x, and as such it has
         .                           // x's type, which is &T, where we want T (the type being matched).
         .                           let var_ty = ty;
       840 ( 0.00%)                  if let ty::BindByReference(_) = bm {
        64 ( 0.00%)                      if let ty::Ref(_, rty, _) = ty.kind() {
        64 ( 0.00%)                          ty = rty;
         .                               } else {
         .                                   bug!("`ref {}` has wrong type {}", ident, ty);
         .                               }
         .                           };
         .           
     6,720 ( 0.00%)                  PatKind::Binding {
         .                               mutability,
         .                               mode,
       420 ( 0.00%)                      name: ident.name,
         .                               var: id,
         .                               ty: var_ty,
         .                               subpattern: self.lower_opt_pattern(sub),
         .                               is_primary: id == pat.hir_id,
         .                           }
         .                       }
         .           
        96 ( 0.00%)              hir::PatKind::TupleStruct(ref qpath, ref pats, ddpos) => {
       192 ( 0.00%)                  let res = self.typeck_results.qpath_res(qpath, pat.hir_id);
        64 ( 0.00%)                  let adt_def = match ty.kind() {
         .                               ty::Adt(adt_def, _) => adt_def,
         .                               _ => span_bug!(pat.span, "tuple struct pattern not applied to an ADT {:?}", ty),
         .                           };
       224 ( 0.00%)                  let variant_def = adt_def.variant_of_res(res);
        64 ( 0.00%)                  let subpatterns = self.lower_tuple_subpats(pats, variant_def.fields.len(), ddpos);
       544 ( 0.00%)                  self.lower_variant_or_leaf(res, pat.hir_id, pat.span, ty, subpatterns)
         .                       }
         .           
        52 ( 0.00%)              hir::PatKind::Struct(ref qpath, ref fields, _) => {
       312 ( 0.00%)                  let res = self.typeck_results.qpath_res(qpath, pat.hir_id);
       156 ( 0.00%)                  let subpatterns = fields
         .                               .iter()
         .                               .map(|field| FieldPat {
       168 ( 0.00%)                          field: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),
       224 ( 0.00%)                          pattern: self.lower_pattern(&field.pat),
         .                               })
         .                               .collect();
         .           
       884 ( 0.00%)                  self.lower_variant_or_leaf(res, pat.hir_id, pat.span, ty, subpatterns)
         .                       }
         .           
         6 ( 0.00%)              hir::PatKind::Or(ref pats) => PatKind::Or { pats: self.lower_patterns(pats) },
         .                   };
         .           
    18,872 ( 0.00%)          Pat { span: pat.span, ty, kind: Box::new(kind) }
         .               }
         .           
         .               fn lower_tuple_subpats(
         .                   &mut self,
         .                   pats: &'tcx [hir::Pat<'tcx>],
         .                   expected_len: usize,
         .                   gap_pos: Option<usize>,
         .               ) -> Vec<FieldPat<'tcx>> {
         .                   pats.iter()
         .                       .enumerate_and_adjust(expected_len, gap_pos)
       684 ( 0.00%)              .map(|(i, subpattern)| FieldPat {
         .                           field: Field::new(i),
       404 ( 0.00%)                  pattern: self.lower_pattern(subpattern),
         .                       })
         .                       .collect()
         .               }
         .           
         .               fn lower_patterns(&mut self, pats: &'tcx [hir::Pat<'tcx>]) -> Vec<Pat<'tcx>> {
     5,418 ( 0.00%)          pats.iter().map(|p| self.lower_pattern(p)).collect()
         .               }
         .           
         .               fn lower_opt_pattern(&mut self, pat: &'tcx Option<&'tcx hir::Pat<'tcx>>) -> Option<Pat<'tcx>> {
         .                   pat.as_ref().map(|p| self.lower_pattern(p))
         .               }
         .           
         .               fn slice_or_array_pattern(
         .                   &mut self,
-- line 349 ----------------------------------------
-- line 364 ----------------------------------------
         .                           let len = len.eval_usize(self.tcx, self.param_env);
         .                           assert!(len >= prefix.len() as u64 + suffix.len() as u64);
         .                           PatKind::Array { prefix, slice, suffix }
         .                       }
         .                       _ => span_bug!(span, "bad slice pattern type {:?}", ty),
         .                   }
         .               }
         .           
     2,460 ( 0.00%)      fn lower_variant_or_leaf(
         .                   &mut self,
         .                   res: Res,
         .                   hir_id: hir::HirId,
         .                   span: Span,
         .                   ty: Ty<'tcx>,
         .                   subpatterns: Vec<FieldPat<'tcx>>,
         .               ) -> PatKind<'tcx> {
     1,208 ( 0.00%)          let res = match res {
       224 ( 0.00%)              Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_id) => {
       336 ( 0.00%)                  let variant_id = self.tcx.parent(variant_ctor_id).unwrap();
         .                           Res::Def(DefKind::Variant, variant_id)
         .                       }
         .                       res => res,
         .                   };
         .           
       104 ( 0.00%)          let mut kind = match res {
         .                       Res::Def(DefKind::Variant, variant_id) => {
       624 ( 0.00%)                  let enum_id = self.tcx.parent(variant_id).unwrap();
       156 ( 0.00%)                  let adt_def = self.tcx.adt_def(enum_id);
       312 ( 0.00%)                  if adt_def.is_enum() {
       780 ( 0.00%)                      let substs = match ty.kind() {
         .                                   ty::Adt(_, substs) | ty::FnDef(_, substs) => substs,
         .                                   ty::Error(_) => {
         .                                       // Avoid ICE (#50585)
         .                                       return PatKind::Wild;
         .                                   }
         .                                   _ => bug!("inappropriate type for def: {:?}", ty),
         .                               };
       624 ( 0.00%)                      PatKind::Variant {
         .                                   adt_def,
       156 ( 0.00%)                          substs,
       468 ( 0.00%)                          variant_index: adt_def.variant_index_with_id(variant_id),
       624 ( 0.00%)                          subpatterns,
         .                               }
         .                           } else {
         .                               PatKind::Leaf { subpatterns }
         .                           }
         .                       }
         .           
         .                       Res::Def(
         .                           DefKind::Struct
         .                           | DefKind::Ctor(CtorOf::Struct, ..)
         .                           | DefKind::Union
         .                           | DefKind::TyAlias
         .                           | DefKind::AssocTy,
         .                           _,
         .                       )
         .                       | Res::SelfTy(..)
        48 ( 0.00%)              | Res::SelfCtor(..) => PatKind::Leaf { subpatterns },
         .                       _ => {
         .                           let pattern_error = match res {
         .                               Res::Def(DefKind::ConstParam, _) => PatternError::ConstParamInPattern(span),
         .                               Res::Def(DefKind::Static, _) => PatternError::StaticInPattern(span),
         .                               _ => PatternError::NonConstPath(span),
         .                           };
         .                           self.errors.push(pattern_error);
         .                           PatKind::Wild
-- line 429 ----------------------------------------
-- line 437 ----------------------------------------
         .                           ascription: Ascription {
         .                               user_ty: PatTyProj::from_user_type(user_ty),
         .                               user_ty_span: span,
         .                               variance: ty::Variance::Covariant,
         .                           },
         .                       };
         .                   }
         .           
     3,608 ( 0.00%)          kind
     1,640 ( 0.00%)      }
         .           
         .               /// Takes a HIR Path. If the path is a constant, evaluates it and feeds
         .               /// it to `const_to_pat`. Any other path (like enum variants without fields)
         .               /// is converted to the corresponding pattern via `lower_variant_or_leaf`.
     1,248 ( 0.00%)      fn lower_path(&mut self, qpath: &hir::QPath<'_>, id: hir::HirId, span: Span) -> Pat<'tcx> {
       672 ( 0.00%)          let ty = self.typeck_results.node_type(id);
       672 ( 0.00%)          let res = self.typeck_results.qpath_res(qpath, id);
         .           
       160 ( 0.00%)          let pat_from_kind = |kind| Pat { span, ty, kind: Box::new(kind) };
         .           
       880 ( 0.00%)          let (def_id, is_associated_const) = match res {
         .                       Res::Def(DefKind::Const, def_id) => (def_id, false),
         .                       Res::Def(DefKind::AssocConst, def_id) => (def_id, true),
         .           
       960 ( 0.00%)              _ => return pat_from_kind(self.lower_variant_or_leaf(res, id, span, ty, vec![])),
         .                   };
         .           
         .                   // Use `Reveal::All` here because patterns are always monomorphic even if their function
         .                   // isn't.
        96 ( 0.00%)          let param_env_reveal_all = self.param_env.with_reveal_all_normalized(self.tcx);
        80 ( 0.00%)          let substs = self.typeck_results.node_substs(id);
       192 ( 0.00%)          let instance = match ty::Instance::resolve(self.tcx, param_env_reveal_all, def_id, substs) {
       112 ( 0.00%)              Ok(Some(i)) => i,
         .                       Ok(None) => {
         .                           // It should be assoc consts if there's no error but we cannot resolve it.
         .                           debug_assert!(is_associated_const);
         .           
         .                           self.errors.push(PatternError::AssocConstInPattern(span));
         .           
         .                           return pat_from_kind(PatKind::Wild);
         .                       }
-- line 477 ----------------------------------------
-- line 480 ----------------------------------------
         .                           self.tcx.sess.span_err(span, "could not evaluate constant pattern");
         .                           return pat_from_kind(PatKind::Wild);
         .                       }
         .                   };
         .           
         .                   // `mir_const_qualif` must be called with the `DefId` of the item where the const is
         .                   // defined, not where it is declared. The difference is significant for associated
         .                   // constants.
        32 ( 0.00%)          let mir_structural_match_violation = self.tcx.mir_const_qualif(instance.def_id()).custom_eq;
         .                   debug!("mir_structural_match_violation({:?}) -> {}", qpath, mir_structural_match_violation);
         .           
       336 ( 0.00%)          match self.tcx.const_eval_instance(param_env_reveal_all, instance, Some(span)) {
         .                       Ok(value) => {
         .                           let const_ =
        64 ( 0.00%)                      ty::Const::from_value(self.tcx, value, self.typeck_results.node_type(id));
         .           
         .                           let pattern = self.const_to_pat(&const_, id, span, mir_structural_match_violation);
         .           
        32 ( 0.00%)                  if !is_associated_const {
         .                               return pattern;
         .                           }
         .           
         .                           let user_provided_types = self.typeck_results().user_provided_types();
         .                           if let Some(u_ty) = user_provided_types.get(id) {
         .                               let user_ty = PatTyProj::from_user_type(*u_ty);
         .                               Pat {
         .                                   span,
-- line 506 ----------------------------------------
-- line 526 ----------------------------------------
         .                           self.tcx.sess.span_err(span, "constant pattern depends on a generic parameter");
         .                           pat_from_kind(PatKind::Wild)
         .                       }
         .                       Err(_) => {
         .                           self.tcx.sess.span_err(span, "could not evaluate constant pattern");
         .                           pat_from_kind(PatKind::Wild)
         .                       }
         .                   }
       768 ( 0.00%)      }
         .           
         .               /// Converts inline const patterns.
         .               fn lower_inline_const(
         .                   &mut self,
         .                   anon_const: &'tcx hir::AnonConst,
         .                   id: hir::HirId,
         .                   span: Span,
         .               ) -> PatKind<'tcx> {
-- line 542 ----------------------------------------
-- line 561 ----------------------------------------
         .           
         .                   *self.const_to_pat(value, id, span, false).kind
         .               }
         .           
         .               /// Converts literals, paths and negation of literals to patterns.
         .               /// The special case for negation exists to allow things like `-128_i8`
         .               /// which would overflow if we tried to evaluate `128_i8` and then negate
         .               /// afterwards.
    59,310 ( 0.00%)      fn lower_lit(&mut self, expr: &'tcx hir::Expr<'tcx>) -> PatKind<'tcx> {
    26,360 ( 0.00%)          let (lit, neg) = match expr.kind {
        16 ( 0.00%)              hir::ExprKind::Path(ref qpath) => {
       128 ( 0.00%)                  return *self.lower_path(qpath, expr.hir_id, expr.span).kind;
         .                       }
         .                       hir::ExprKind::ConstBlock(ref anon_const) => {
         .                           return self.lower_inline_const(anon_const, expr.hir_id, expr.span);
         .                       }
         .                       hir::ExprKind::Lit(ref lit) => (lit, false),
         .                       hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => {
         .                           let lit = match expr.kind {
         .                               hir::ExprKind::Lit(ref lit) => lit,
-- line 580 ----------------------------------------
-- line 581 ----------------------------------------
         .                               _ => span_bug!(expr.span, "not a literal: {:?}", expr),
         .                           };
         .                           (lit, true)
         .                       }
         .                       _ => span_bug!(expr.span, "not a literal: {:?}", expr),
         .                   };
         .           
         .                   let lit_input =
    32,870 ( 0.00%)              LitToConstInput { lit: &lit.node, ty: self.typeck_results.expr_ty(expr), neg };
    32,870 ( 0.00%)          match self.tcx.at(expr.span).lit_to_const(lit_input) {
   138,054 ( 0.00%)              Ok(val) => *self.const_to_pat(val, expr.hir_id, lit.span, false).kind,
         .                       Err(LitToConstError::Reported) => PatKind::Wild,
         .                       Err(LitToConstError::TypeError) => bug!("lower_lit: had type error"),
         .                   }
    52,720 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> UserAnnotatedTyHelpers<'tcx> for PatCtxt<'_, 'tcx> {
         .               fn tcx(&self) -> TyCtxt<'tcx> {
         .                   self.tcx
         .               }
         .           
         .               fn typeck_results(&self) -> &ty::TypeckResults<'tcx> {
       164 ( 0.00%)          self.typeck_results
         .               }
         .           }
         .           
         .           crate trait PatternFoldable<'tcx>: Sized {
         .               fn fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {
         .                   self.super_fold_with(folder)
         .               }
         .           
-- line 612 ----------------------------------------
-- line 737 ----------------------------------------
         .                           slice: slice.fold_with(folder),
         .                           suffix: suffix.fold_with(folder),
         .                       },
         .                       PatKind::Or { ref pats } => PatKind::Or { pats: pats.fold_with(folder) },
         .                   }
         .               }
         .           }
         .           
11,371,712 ( 0.20%)  crate fn compare_const_vals<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .               param_env: ty::ParamEnv<'tcx>,
         .               ty: Ty<'tcx>,
         .           ) -> Option<Ordering> {
         .               trace!("compare_const_vals: {:?}, {:?}", a, b);
         .           
         .               let from_bool = |v: bool| v.then_some(Ordering::Equal);
         .           
         .               let fallback = || from_bool(a == b);
         .           
         .               // Use the fallback if any type differs
 5,168,960 ( 0.09%)      if a.ty != b.ty || a.ty != ty {
         .                   return fallback();
         .               }
         .           
         .               // Early return for equal constants (so e.g. references to ZSTs can be compared, even if they
         .               // are just integer addresses).
 7,236,544 ( 0.13%)      if a.val == b.val {
         .                   return from_bool(true);
         .               }
         .           
 8,270,336 ( 0.15%)      let a_bits = a.try_eval_bits(tcx, param_env, ty);
 5,168,960 ( 0.09%)      let b_bits = b.try_eval_bits(tcx, param_env, ty);
         .           
 4,135,168 ( 0.07%)      if let (Some(a), Some(b)) = (a_bits, b_bits) {
         .                   use rustc_apfloat::Float;
 5,168,960 ( 0.09%)          return match *ty.kind() {
         .                       ty::Float(ty::FloatTy::F32) => {
         .                           let l = rustc_apfloat::ieee::Single::from_bits(a);
         .                           let r = rustc_apfloat::ieee::Single::from_bits(b);
         .                           l.partial_cmp(&r)
         .                       }
         .                       ty::Float(ty::FloatTy::F64) => {
         .                           let l = rustc_apfloat::ieee::Double::from_bits(a);
         .                           let r = rustc_apfloat::ieee::Double::from_bits(b);
-- line 782 ----------------------------------------
-- line 800 ----------------------------------------
         .                   ) = (a.val, b.val)
         .                   {
         .                       let a_bytes = get_slice_bytes(&tcx, a_val);
         .                       let b_bytes = get_slice_bytes(&tcx, b_val);
         .                       return from_bool(a_bytes == b_bytes);
         .                   }
         .               }
         .               fallback()
 8,270,336 ( 0.15%)  }

 5,269,942 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/pattern/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   27,800 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    1,032 ( 0.00%)              self.file = file;
    1,392 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   26,754 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   55,124 ( 0.00%)          self.line_number = line_index + 1;
   82,679 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  210,046 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
      808 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
      404 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
    2,020 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
    2,828 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
    1,616 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
  830,844 ( 0.01%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
  474,768 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  118,692 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  118,692 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  182,740 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  182,708 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
  548,124 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  182,708 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
   91,354 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
   91,354 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
   91,354 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  365,416 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   54,644 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  218,704 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
    2,920 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
    3,504 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
    2,336 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   80,262 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   80,262 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
  136,690 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   81,273 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
       32 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
       48 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
      231 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      462 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
      924 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   54,676 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   27,338 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   54,676 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   27,338 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  136,690 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   82,014 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   82,014 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
   82,014 ( 0.00%)          Some((
   27,338 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   27,338 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
1,068,228 ( 0.02%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
1,558,577 ( 0.03%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
  162,546 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
    2,823 ( 0.00%)              if idx != avoid_idx
    1,641 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
    2,920 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
      584 ( 0.00%)          if !self.source_map.files().is_empty() {
    1,168 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
    4,672 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
    2,920 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

1,736,881 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                  

-- line 223 ----------------------------------------
         .               fn eq(&self, other: &Rhs) -> bool;
         .           
         .               /// This method tests for `!=`.
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn ne(&self, other: &Rhs) -> bool {
    25,950 ( 0.00%)          !self.eq(other)
         .               }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialEq`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics, structural_match)]
         .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
         .           /// assert_eq!(Ordering::Less, result);
         .           ///
         .           /// let result = 1.cmp(&1);
         .           /// assert_eq!(Ordering::Equal, result);
         .           ///
         .           /// let result = 2.cmp(&1);
         .           /// assert_eq!(Ordering::Greater, result);
         .           /// ```
    21,341 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[repr(i8)]
         .           pub enum Ordering {
         .               /// An ordering where a compared value is less than another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Less = -1,
         .               /// An ordering where a compared value is equal to another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
         .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
         .               ///
         .               /// assert_eq!(result, Ordering::Less);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
         .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
    31,006 ( 0.00%)          match self {
         .                       Equal => f(),
         .                       _ => self,
         .                   }
         .               }
         .           }
         .           
         .           /// A helper struct for reverse ordering.
         .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
         .               fn max(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
   511,422 ( 0.01%)          max_by(self, other, Ord::cmp)
         .               }
         .           
         .               /// Compares and returns the minimum of two values.
         .               ///
         .               /// Returns the first argument if the comparison determines them to be equal.
         .               ///
         .               /// # Examples
         .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
         .               fn min(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
    20,458 ( 0.00%)          min_by(self, other, Ord::cmp)
         .               }
         .           
         .               /// Restrict a value to a certain interval.
         .               ///
         .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
         .               /// less than `min`. Otherwise this returns `self`.
         .               ///
         .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
         .               /// let result = 2.0 < 1.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn lt(&self, other: &Rhs) -> bool {
    36,027 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
         .               }
         .           
         .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn le(&self, other: &Rhs) -> bool {
         .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
         .                   // FIXME: The root cause was fixed upstream in LLVM with:
         .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
         .                   // Revert this workaround once support for LLVM 12 gets dropped.
   850,628 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
         .               }
         .           
         .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
         .               /// let result = 2.0 > 2.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn gt(&self, other: &Rhs) -> bool {
 1,253,950 ( 0.02%)          matches!(self.partial_cmp(other), Some(Greater))
         .               }
         .           
         .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
         .               /// let result = 2.0 >= 2.0;
         .               /// assert_eq!(result, true);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn ge(&self, other: &Rhs) -> bool {
       328 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
         .               }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialOrd`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics)]
         .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
         .           ///
         .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
         .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
         .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   714,808 ( 0.01%)      match compare(&v1, &v2) {
         .                   Ordering::Less | Ordering::Equal => v1,
         .                   Ordering::Greater => v2,
         .               }
        54 ( 0.00%)  }
         .           
         .           /// Returns the element that gives the minimum value from the specified function.
         .           ///
         .           /// Returns the first argument if the comparison determines them to be equal.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
-- line 1230 ----------------------------------------
-- line 1231 ----------------------------------------
         .           /// use std::cmp;
         .           ///
         .           /// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);
         .           /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
       324 ( 0.00%)  pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {
       216 ( 0.00%)      min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))
       216 ( 0.00%)  }
         .           
         .           /// Compares and returns the maximum of two values.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
         .           /// Internally uses an alias to [`Ord::max`].
         .           ///
         .           /// # Examples
-- line 1249 ----------------------------------------
-- line 1273 ----------------------------------------
         .           ///
         .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
         .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   912,728 ( 0.02%)      match compare(&v1, &v2) {
       700 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
         .                   Ordering::Greater => v1,
         .               }
         .           }
         .           
         .           /// Returns the element that gives the maximum value from the specified function.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
-- line 1290 ----------------------------------------
-- line 1308 ----------------------------------------
         .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
         .               use crate::hint::unreachable_unchecked;
         .           
         .               macro_rules! partial_eq_impl {
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialEq for $t {
         .                           #[inline]
    67,874 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
         .                           #[inline]
    57,379 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl PartialEq for () {
         .                   #[inline]
         .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialOrd for $t {
         .                           #[inline]
         .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
         .                               Some(self.cmp(other))
         .                           }
         .                           #[inline]
 8,589,385 ( 0.15%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
         .                           #[inline]
    21,370 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
         .                           #[inline]
         .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
         .                           #[inline]
         .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
         .                       }
         .           
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl Ord for $t {
         .                           #[inline]
         .                           fn cmp(&self, other: &$t) -> Ordering {
         .                               // The order here is important to generate more optimal assembly.
         .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
26,148,020 ( 0.47%)                      if *self < *other { Less }
         .                               else if *self == *other { Equal }
         .                               else { Greater }
         .                           }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl Ord for bool {
         .                   #[inline]
         .                   fn cmp(&self, other: &bool) -> Ordering {
         .                       // Casting to i8's and converting the difference to an Ordering generates
         .                       // more optimal assembly.
         .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
       716 ( 0.00%)              match (*self as i8) - (*other as i8) {
         .                           -1 => Less,
         .                           0 => Equal,
         .                           1 => Greater,
         .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
         .                           _ => unsafe { unreachable_unchecked() },
         .                       }
         .                   }
         .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
         .               // & pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
         .               where
         .                   A: PartialEq<B>,
         .               {
         .                   #[inline]
   916,779 ( 0.02%)          fn eq(&self, other: &&B) -> bool {
 2,851,548 ( 0.05%)              PartialEq::eq(*self, *other)
 1,837,023 ( 0.03%)          }
         .                   #[inline]
       130 ( 0.00%)          fn ne(&self, other: &&B) -> bool {
        63 ( 0.00%)              PartialEq::ne(*self, *other)
    63,928 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
         .               where
         .                   A: PartialOrd<B>,
         .               {
         .                   #[inline]
         .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
         2 ( 0.00%)              PartialOrd::partial_cmp(*self, *other)
         .                   }
         .                   #[inline]
         .                   fn lt(&self, other: &&B) -> bool {
         .                       PartialOrd::lt(*self, *other)
         .                   }
         .                   #[inline]
         .                   fn le(&self, other: &&B) -> bool {
         .                       PartialOrd::le(*self, *other)
-- line 1505 ----------------------------------------
-- line 1516 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Ord for &A
         .               where
         .                   A: Ord,
         .               {
         .                   #[inline]
         .                   fn cmp(&self, other: &Self) -> Ordering {
         .                       Ord::cmp(*self, *other)
   182,211 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Eq for &A where A: Eq {}
         .           
         .               // &mut pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

 3,663,186 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           use rustc_data_structures::sync::Lrc;
         .           use rustc_macros::HashStable_Generic;
         .           use rustc_span::symbol::{kw, sym};
         .           use rustc_span::symbol::{Ident, Symbol};
         .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
         .           use std::borrow::Cow;
         .           use std::{fmt, mem};
         .           
    12,300 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum CommentKind {
         .               Line,
         .               Block,
         .           }
         .           
        90 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum BinOpToken {
         .               Plus,
         .               Minus,
         .               Star,
         .               Slash,
         .               Percent,
         .               Caret,
         .               And,
         .               Or,
         .               Shl,
         .               Shr,
         .           }
         .           
         .           /// A delimiter token.
    76,971 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum DelimToken {
         .               /// A round parenthesis (i.e., `(` or `)`).
         .               Paren,
         .               /// A square bracket (i.e., `[` or `]`).
         .               Bracket,
         .               /// A curly brace (i.e., `{` or `}`).
         .               Brace,
         .               /// An empty delimiter.
         .               NoDelim,
         .           }
         .           
     1,448 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum LitKind {
         .               Bool, // AST only, must never appear in a `Token`
         .               Byte,
         .               Char,
         .               Integer,
         .               Float,
         .               Str,
         .               StrRaw(u16), // raw string delimited by `n` hash symbols
         .               ByteStr,
         .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
         .               Err,
         .           }
         .           
         .           /// A literal token.
    84,607 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Lit {
         .               pub kind: LitKind,
         .               pub symbol: Symbol,
         .               pub suffix: Option<Symbol>,
         .           }
         .           
         .           impl fmt::Display for Lit {
   179,250 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   322,650 ( 0.01%)          let Lit { kind, symbol, suffix } = *self;
         .                   match kind {
         .                       Byte => write!(f, "b'{}'", symbol)?,
    35,859 ( 0.00%)              Char => write!(f, "'{}'", symbol)?,
         .                       Str => write!(f, "\"{}\"", symbol)?,
         .                       StrRaw(n) => write!(
         .                           f,
         .                           "r{delim}\"{string}\"{delim}",
         .                           delim = "#".repeat(n as usize),
         .                           string = symbol
         .                       )?,
         .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
         .                       ByteStrRaw(n) => write!(
         .                           f,
         .                           "br{delim}\"{string}\"{delim}",
         .                           delim = "#".repeat(n as usize),
         .                           string = symbol
         .                       )?,
    71,691 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
         .                   }
         .           
    71,700 ( 0.00%)          if let Some(suffix) = suffix {
         .                       write!(f, "{}", suffix)?;
         .                   }
         .           
         .                   Ok(())
   179,250 ( 0.00%)      }
         .           }
         .           
         .           impl LitKind {
         .               /// An English article for the literal token kind.
         .               pub fn article(self) -> &'static str {
         .                   match self {
         .                       Integer | Err => "an",
         .                       _ => "a",
-- line 113 ----------------------------------------
-- line 123 ----------------------------------------
         .                       Float => "float",
         .                       Str | StrRaw(..) => "string",
         .                       ByteStr | ByteStrRaw(..) => "byte string",
         .                       Err => "error",
         .                   }
         .               }
         .           
         .               crate fn may_have_suffix(self) -> bool {
         2 ( 0.00%)          matches!(self, Integer | Float | Err)
         .               }
         .           }
         .           
         .           impl Lit {
         .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
         .                   Lit { kind, symbol, suffix }
   251,086 ( 0.00%)      }
         .           }
         .           
        68 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
       119 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
        38 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [
         .                       kw::Async,
         .                       kw::Do,
         .                       kw::Box,
         .                       kw::Break,
         .                       kw::Const,
         .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
         .                       kw::True,
         .                       kw::Try,
         .                       kw::Unsafe,
         .                       kw::While,
         .                       kw::Yield,
         .                       kw::Static,
         .                   ]
         .                   .contains(&name)
        85 ( 0.00%)  }
         .           
         .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
       624 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
       208 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
         .                       .contains(&name)
         .           }
         .           
12,165,210 ( 0.22%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum TokenKind {
         .               /* Expression-operator symbols. */
         .               Eq,
         .               Lt,
         .               Le,
         .               EqEq,
         .               Ne,
         .               Ge,
         .               Gt,
         .               AndAnd,
         .               OrOr,
         .               Not,
         .               Tilde,
    78,126 ( 0.00%)      BinOp(BinOpToken),
         6 ( 0.00%)      BinOpEq(BinOpToken),
         .           
         .               /* Structural symbols */
         .               At,
         .               Dot,
         .               DotDot,
         .               DotDotDot,
         .               DotDotEq,
         .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
         .               LArrow,
         .               FatArrow,
         .               Pound,
         .               Dollar,
         .               Question,
         .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
         .               SingleQuote,
         .               /// An opening delimiter (e.g., `{`).
    82,839 ( 0.00%)      OpenDelim(DelimToken),
         .               /// A closing delimiter (e.g., `}`).
   285,411 ( 0.01%)      CloseDelim(DelimToken),
         .           
         .               /* Literals */
   120,841 ( 0.00%)      Literal(Lit),
         .           
         .               /// Identifier token.
         .               /// Do not forget about `NtIdent` when you want to match on identifiers.
         .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated identifiers in the same way.
     5,426 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
         .               /// Lifetime identifier token.
         .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
         .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated lifetime identifiers in the same way.
        72 ( 0.00%)      Lifetime(Symbol),
         .           
         .               Interpolated(Lrc<Nonterminal>),
         .           
         .               /// A doc comment token.
         .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
         .               /// similarly to symbols in string literal tokens.
       357 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
         .           
         .               Eof,
         .           }
         .           
         .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           rustc_data_structures::static_assert_size!(TokenKind, 16);
         .           
   421,524 ( 0.01%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Token {
     5,636 ( 0.00%)      pub kind: TokenKind,
         .               pub span: Span,
         .           }
         .           
         .           impl TokenKind {
         .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
         .                   Literal(Lit::new(kind, symbol, suffix))
         .               }
         .           
         .               // An approximation to proc-macro-style single-character operators used by rustc parser.
         .               // If the operator token can be broken into two tokens, the first of which is single-character,
         .               // then this function performs that operation, otherwise it returns `None`.
     2,355 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
     9,636 ( 0.00%)          Some(match *self {
         .                       Le => (Lt, Eq),
         .                       EqEq => (Eq, Eq),
         .                       Ne => (Not, Eq),
         .                       Ge => (Gt, Eq),
         .                       AndAnd => (BinOp(And), BinOp(And)),
         .                       OrOr => (BinOp(Or), BinOp(Or)),
         .                       BinOp(Shl) => (Lt, Lt),
         .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
         .                       BinOpEq(Shl) => (Lt, Le),
         .                       BinOpEq(Shr) => (Gt, Ge),
         .                       DotDot => (Dot, Dot),
         .                       DotDotDot => (Dot, DotDot),
         .                       ModSep => (Colon, Colon),
         .                       RArrow => (BinOp(Minus), Gt),
         .                       LArrow => (Lt, BinOp(Minus)),
         .                       FatArrow => (Eq, Gt),
     2,331 ( 0.00%)              _ => return None,
         .                   })
     2,355 ( 0.00%)      }
         .           
         .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
         .               /// Enables better error recovery when the wrong token is found.
         .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
         .                   match *self {
         .                       Comma => Some(vec![Dot, Lt, Semi]),
         .                       Semi => Some(vec![Colon, Comma]),
         .                       FatArrow => Some(vec![Eq, RArrow]),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               pub fn should_end_const_arg(&self) -> bool {
       492 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
        87 ( 0.00%)      }
         .           }
         .           
         .           impl Token {
   135,967 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
   410,242 ( 0.01%)          Token { kind, span }
   135,967 ( 0.00%)      }
         .           
         .               /// Some token that will be thrown away later.
       619 ( 0.00%)      pub fn dummy() -> Self {
         .                   Token::new(TokenKind::Question, DUMMY_SP)
       619 ( 0.00%)      }
         .           
         .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
         .               pub fn from_ast_ident(ident: Ident) -> Self {
       176 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
         .               }
         .           
         .               /// Return this token by value and leave a dummy token in its place.
    96,809 ( 0.00%)      pub fn take(&mut self) -> Self {
         .                   mem::replace(self, Token::dummy())
    96,809 ( 0.00%)      }
         .           
         .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
         .               /// token refers. For all other tokens this is just a regular span.
         .               /// It is particularly important to use this for identifiers and lifetimes
         .               /// for which spans affect name resolution and edition checks.
         .               /// Note that keywords are also identifiers, so they should use this
         .               /// if they keep spans or perform edition checks.
         .               pub fn uninterpolated_span(&self) -> Span {
       520 ( 0.00%)          match &self.kind {
         .                       Interpolated(nt) => nt.span(),
       260 ( 0.00%)              _ => self.span,
         .                   }
       260 ( 0.00%)      }
         .           
         .               pub fn is_op(&self) -> bool {
   290,427 ( 0.01%)          !matches!(
    96,809 ( 0.00%)              self.kind,
         .                       OpenDelim(..)
         .                           | CloseDelim(..)
         .                           | Literal(..)
         .                           | DocComment(..)
         .                           | Ident(..)
         .                           | Lifetime(..)
         .                           | Interpolated(..)
         .                           | Eof
         .                   )
    96,809 ( 0.00%)      }
         .           
         .               pub fn is_like_plus(&self) -> bool {
     3,797 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
       743 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of an expression.
        28 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
       140 ( 0.00%)          match self.uninterpolate().kind {
       153 ( 0.00%)              Ident(name, is_raw)              =>
        51 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
         .                       OpenDelim(..)                     | // tuple, array or block
         .                       Literal(..)                       | // literal
         .                       Not                               | // operator not
         .                       BinOp(Minus)                      | // unary minus
         .                       BinOp(Star)                       | // dereference
         .                       BinOp(Or) | OrOr                  | // closure
         .                       BinOp(And)                        | // reference
         .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
         .                       Lifetime(..)                      | // labeled loop
         .                       Pound                             => true, // expression attributes
         .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
         .                           NtExpr(..)    |
         .                           NtBlock(..)   |
         .                           NtPath(..)),
         .                       _ => false,
         .                   }
        56 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a type.
       476 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
       675 ( 0.00%)          match self.uninterpolate().kind {
       936 ( 0.00%)              Ident(name, is_raw)        =>
       104 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
         .                       OpenDelim(Paren)            | // tuple
         .                       OpenDelim(Bracket)          | // array
         .                       Not                         | // never
         .                       BinOp(Star)                 | // raw pointer
         .                       BinOp(And)                  | // reference
         .                       AndAnd                      | // double reference
         .                       Question                    | // maybe bound in trait object
         .                       Lifetime(..)                | // lifetime bound in trait object
         .                       Lt | BinOp(Shl)             | // associated path
         .                       ModSep                      => true, // global path
         .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
         .                       _ => false,
         .                   }
       714 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a const param.
         .               pub fn can_begin_const_arg(&self) -> bool {
       505 ( 0.00%)          match self.kind {
         .                       OpenDelim(Brace) => true,
         .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
       101 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
         .                   }
         .               }
         .           
         .               /// Returns `true` if the token can appear at the start of a generic bound.
         .               pub fn can_begin_bound(&self) -> bool {
         .                   self.is_path_start()
         .                       || self.is_lifetime()
         .                       || self.is_keyword(kw::For)
-- line 419 ----------------------------------------
-- line 427 ----------------------------------------
         .               }
         .           
         .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
         .               /// for example a '-42', or one of the boolean idents).
         .               ///
         .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
         .               ///
         .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
     1,347 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
     7,236 ( 0.00%)          match self.uninterpolate().kind {
         .                       Literal(..) | BinOp(Minus) => true,
       388 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
         .                       Interpolated(ref nt) => match &**nt {
         .                           NtLiteral(_) => true,
         .                           NtExpr(e) => match &e.kind {
         .                               ast::ExprKind::Lit(_) => true,
         .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
         .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
         .                               }
         .                               _ => false,
         .                           },
         .                           _ => false,
         .                       },
         .                       _ => false,
         .                   }
     2,694 ( 0.00%)      }
         .           
         .               // A convenience function for matching on identifiers during parsing.
         .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
         .               // into the regular identifier or lifetime token it refers to,
         .               // otherwise returns the original token.
    61,728 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
   739,608 ( 0.01%)          match &self.kind {
         .                       Interpolated(nt) => match **nt {
         .                           NtIdent(ident, is_raw) => {
         .                               Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
         .                           }
         .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
         .                           _ => Cow::Borrowed(self),
         .                       },
         .                       _ => Cow::Borrowed(self),
         .                   }
    61,728 ( 0.00%)      }
         .           
         .               /// Returns an identifier if this token is an identifier.
   163,768 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
         .                   let token = self.uninterpolate();
   462,229 ( 0.01%)          match token.kind {
   340,442 ( 0.01%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
         .                       _ => None,
         .                   }
 1,010,408 ( 0.02%)      }
         .           
         .               /// Returns a lifetime identifier if this token is a lifetime.
       145 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
         .                   let token = self.uninterpolate();
    14,388 ( 0.00%)          match token.kind {
       228 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
         .                       _ => None,
         .                   }
     1,015 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an identifier.
         .               pub fn is_ident(&self) -> bool {
         .                   self.ident().is_some()
     4,663 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a lifetime.
     7,049 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
         .                   self.lifetime().is_some()
    14,098 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an identifier whose name is the given
         .               /// string slice.
     1,915 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
         .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
     3,830 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an interpolated path.
         .               fn is_path(&self) -> bool {
    28,572 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtPath(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
         .               }
         .           
         .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
-- line 515 ----------------------------------------
-- line 522 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   false
         .               }
         .           
         .               // Is the token an interpolated block (`$b:block`)?
         .               pub fn is_whole_block(&self) -> bool {
        44 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtBlock(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
        22 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is either the `mut` or `const` keyword.
         .               pub fn is_mutability(&self) -> bool {
         .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
         .               }
         .           
       254 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    14,540 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
         .               }
         .           
    28,572 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    33,746 ( 0.00%)          self == &ModSep
         .                       || self.is_qpath_start()
         .                       || self.is_path()
         .                       || self.is_path_segment_keyword()
     7,043 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    35,715 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a given keyword, `kw`.
    44,758 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
         .                   self.is_non_raw_ident_where(|id| id.name == kw)
    89,516 ( 0.00%)      }
         .           
       216 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
         .               }
         .           
         .               // Returns true for reserved identifiers used internally for elided lifetimes,
         .               // unnamed method parameters, crate root module, error recovery etc.
        49 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_special)
         .               }
         .           
         .               /// Returns `true` if the token is a keyword used in the language.
        49 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
         .               }
         .           
         .               /// Returns `true` if the token is a keyword reserved for possible future use.
        49 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
         .               }
         .           
         .               /// Returns `true` if the token is either a special identifier or a keyword.
         .               pub fn is_reserved_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_reserved)
         .               }
         .           
         .               /// Returns `true` if the token is the identifier `true` or `false`.
       216 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
       432 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
         .               }
         .           
         .               pub fn is_numeric_lit(&self) -> bool {
         .                   matches!(
         .                       self.kind,
         .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
         .                   )
         .               }
         .           
         .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
         4 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
 1,013,435 ( 0.02%)          match self.ident() {
     2,487 ( 0.00%)              Some((id, false)) => pred(id),
         .                       _ => false,
         .                   }
         5 ( 0.00%)      }
         .           
   361,640 ( 0.01%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
   180,820 ( 0.00%)          let kind = match self.kind {
     7,097 ( 0.00%)              Eq => match joint.kind {
         .                           Eq => EqEq,
         .                           Gt => FatArrow,
         .                           _ => return None,
         .                       },
        35 ( 0.00%)              Lt => match joint.kind {
         .                           Eq => Le,
         .                           Lt => BinOp(Shl),
         .                           Le => BinOpEq(Shl),
         .                           BinOp(Minus) => LArrow,
         .                           _ => return None,
         .                       },
       314 ( 0.00%)              Gt => match joint.kind {
         .                           Eq => Ge,
         .                           Gt => BinOp(Shr),
         .                           Ge => BinOpEq(Shr),
         .                           _ => return None,
         .                       },
        10 ( 0.00%)              Not => match joint.kind {
         .                           Eq => Ne,
         .                           _ => return None,
         .                       },
       639 ( 0.00%)              BinOp(op) => match joint.kind {
         .                           Eq => BinOpEq(op),
         5 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
         4 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
        79 ( 0.00%)                  Gt if op == Minus => RArrow,
         .                           _ => return None,
         .                       },
     3,759 ( 0.00%)              Dot => match joint.kind {
         .                           Dot => DotDot,
         .                           DotDot => DotDotDot,
         .                           _ => return None,
         .                       },
     5,011 ( 0.00%)              DotDot => match joint.kind {
         .                           Dot => DotDotDot,
         .                           Eq => DotDotEq,
         .                           _ => return None,
         .                       },
       368 ( 0.00%)              Colon => match joint.kind {
         .                           Colon => ModSep,
         .                           _ => return None,
         .                       },
         .                       SingleQuote => match joint.kind {
         .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
         .                           _ => return None,
         .                       },
         .           
         .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
         .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
         .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
         .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
         .                   };
         .           
    55,029 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   325,476 ( 0.01%)      }
         .           }
         .           
         .           impl PartialEq<TokenKind> for Token {
         .               fn eq(&self, rhs: &TokenKind) -> bool {
   626,919 ( 0.01%)          self.kind == *rhs
         .               }
         .           }
         .           
         .           #[derive(Clone, Encodable, Decodable)]
         .           /// For interpolation during macro expansion.
         .           pub enum Nonterminal {
         .               NtItem(P<ast::Item>),
         .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
         .               Path,
         .               Vis,
         .               TT,
         .           }
         .           
         .           impl NonterminalKind {
         .               /// The `edition` closure is used to get the edition for the given symbol. Doing
         .               /// `span.edition()` is expensive, so we do it lazily.
        24 ( 0.00%)      pub fn from_symbol(
         .                   symbol: Symbol,
         .                   edition: impl FnOnce() -> Edition,
         .               ) -> Option<NonterminalKind> {
        50 ( 0.00%)          Some(match symbol {
         .                       sym::item => NonterminalKind::Item,
         .                       sym::block => NonterminalKind::Block,
         .                       sym::stmt => NonterminalKind::Stmt,
         .                       sym::pat => match edition() {
         .                           Edition::Edition2015 | Edition::Edition2018 => {
         .                               NonterminalKind::PatParam { inferred: true }
         .                           }
         .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
         .                       sym::lifetime => NonterminalKind::Lifetime,
         .                       sym::literal => NonterminalKind::Literal,
         .                       sym::meta => NonterminalKind::Meta,
         .                       sym::path => NonterminalKind::Path,
         .                       sym::vis => NonterminalKind::Vis,
         .                       sym::tt => NonterminalKind::TT,
         .                       _ => return None,
         .                   })
        24 ( 0.00%)      }
         .               fn symbol(self) -> Symbol {
         .                   match self {
         .                       NonterminalKind::Item => sym::item,
         .                       NonterminalKind::Block => sym::block,
         .                       NonterminalKind::Stmt => sym::stmt,
         .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
         .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
         .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

 4,416,844 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           #[derive(Debug)]
        .           pub struct Token {
        .               pub kind: TokenKind,
        .               pub len: usize,
        .           }
        .           
        .           impl Token {
        .               fn new(kind: TokenKind, len: usize) -> Token {
1,547,244 ( 0.03%)          Token { kind, len }
        .               }
        .           }
        .           
        .           /// Enum representing common lexeme types.
        .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
   40,350 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum TokenKind {
        .               // Multi-char tokens:
        .               /// "// comment"
        .               LineComment { doc_style: Option<DocStyle> },
        .               /// `/* block comment */`
        .               ///
        .               /// Block comments can be recursive, so the sequence like `/* /* */`
        .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
        .               /// Literal starts with "0x".
        .               Hexadecimal,
        .               /// Literal doesn't contain a prefix.
        .               Decimal,
        .           }
        .           
        .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
        .           /// but shebang isn't a part of rust syntax.
       98 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
        .               // Shebang must start with `#!` literally, without any preceding whitespace.
        .               // For simplicity we consider any line starting with `#!` a shebang,
        .               // regardless of restrictions put on shebangs by specific platforms.
        .               if let Some(input_tail) = input.strip_prefix("#!") {
        .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
        .                   // then it may be valid Rust code, so consider it Rust code.
        .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
        .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
        .                       )
        .                   });
        .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
        .                       // No other choice than to consider this a shebang.
        .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
        .                   }
        .               }
        .               None
      112 ( 0.00%)  }
        .           
        .           /// Parses the first token from the provided input string.
  515,748 ( 0.01%)  pub fn first_token(input: &str) -> Token {
        .               debug_assert!(!input.is_empty());
  171,916 ( 0.00%)      Cursor::new(input).advance_token()
  687,664 ( 0.01%)  }
        .           
        .           /// Creates an iterator that produces tokens from the input string.
        .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
        .               let mut cursor = Cursor::new(input);
        .               std::iter::from_fn(move || {
        .                   if cursor.is_eof() {
        .                       None
        .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
        .           /// for definitions of these classes.
        .           pub fn is_whitespace(c: char) -> bool {
        .               // This is Pattern_White_Space.
        .               //
        .               // Note that this set is stable (ie, it doesn't change with different
        .               // Unicode versions), so it's ok to just hard-code the values.
        .           
  415,624 ( 0.01%)      matches!(
        .                   c,
        .                   // Usual ASCII suspects
        .                   '\u{0009}'   // \t
        .                   | '\u{000A}' // \n
        .                   | '\u{000B}' // vertical tab
        .                   | '\u{000C}' // form feed
        .                   | '\u{000D}' // \r
        .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
        .               )
        .           }
        .           
        .           /// True if `c` is valid as a first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_start(c: char) -> bool {
        .               // This is XID_Start OR '_' (which formally is not a XID_Start).
  109,040 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
        .           }
        .           
        .           /// True if `c` is valid as a non-first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_continue(c: char) -> bool {
        .               unicode_xid::UnicodeXID::is_xid_continue(c)
        .           }
-- line 287 ----------------------------------------
-- line 293 ----------------------------------------
        .                   is_id_start(start) && chars.all(is_id_continue)
        .               } else {
        .                   false
        .               }
        .           }
        .           
        .           impl Cursor<'_> {
        .               /// Parses a token from the input string.
1,375,328 ( 0.02%)      fn advance_token(&mut self) -> Token {
        .                   let first_char = self.bump().unwrap();
  648,626 ( 0.01%)          let token_kind = match first_char {
        .                       // Slash, comment or block comment.
    1,048 ( 0.00%)              '/' => match self.first() {
        .                           '/' => self.line_comment(),
        .                           '*' => self.block_comment(),
        4 ( 0.00%)                  _ => Slash,
        .                       },
        .           
        .                       // Whitespace sequence.
        .                       c if is_whitespace(c) => self.whitespace(),
        .           
        .                       // Raw identifier, raw string literal or identifier.
      224 ( 0.00%)              'r' => match (self.first(), self.second()) {
        .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
        .                           ('#', _) | ('"', _) => {
        .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
        .                               let suffix_start = self.len_consumed();
        .                               if err.is_none() {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = RawStr { n_hashes, err };
        .                               Literal { kind, suffix_start }
        .                           }
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Byte literal, byte string literal, raw byte string literal or identifier.
      558 ( 0.00%)              'b' => match (self.first(), self.second()) {
        .                           ('\'', _) => {
        .                               self.bump();
        .                               let terminated = self.single_quoted_string();
        .                               let suffix_start = self.len_consumed();
        .                               if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = Byte { terminated };
-- line 338 ----------------------------------------
-- line 361 ----------------------------------------
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Identifier (this should be checked after other variant that can
        .                       // start as identifier).
        .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
        .           
        .                       // Numeric literal.
  369,867 ( 0.01%)              c @ '0'..='9' => {
        .                           let literal_kind = self.number(c);
        .                           let suffix_start = self.len_consumed();
        .                           self.eat_literal_suffix();
  119,815 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
        .                       }
        .           
        .                       // One-symbol tokens.
      502 ( 0.00%)              ';' => Semi,
   74,988 ( 0.00%)              ',' => Comma,
    6,694 ( 0.00%)              '.' => Dot,
   16,382 ( 0.00%)              '(' => OpenParen,
   16,382 ( 0.00%)              ')' => CloseParen,
      460 ( 0.00%)              '{' => OpenBrace,
      460 ( 0.00%)              '}' => CloseBrace,
   13,794 ( 0.00%)              '[' => OpenBracket,
   13,794 ( 0.00%)              ']' => CloseBracket,
        .                       '@' => At,
      192 ( 0.00%)              '#' => Pound,
        .                       '~' => Tilde,
        6 ( 0.00%)              '?' => Question,
    1,112 ( 0.00%)              ':' => Colon,
        .                       '$' => Dollar,
    4,410 ( 0.00%)              '=' => Eq,
       42 ( 0.00%)              '!' => Bang,
      264 ( 0.00%)              '<' => Lt,
    3,254 ( 0.00%)              '>' => Gt,
      180 ( 0.00%)              '-' => Minus,
   13,660 ( 0.00%)              '&' => And,
    1,398 ( 0.00%)              '|' => Or,
       46 ( 0.00%)              '+' => Plus,
       26 ( 0.00%)              '*' => Star,
        2 ( 0.00%)              '^' => Caret,
        8 ( 0.00%)              '%' => Percent,
        .           
        .                       // Lifetime or character literal.
   45,831 ( 0.00%)              '\'' => self.lifetime_or_char(),
        .           
        .                       // String literal.
        .                       '"' => {
       63 ( 0.00%)                  let terminated = self.double_quoted_string();
        .                           let suffix_start = self.len_consumed();
       42 ( 0.00%)                  if terminated {
        .                               self.eat_literal_suffix();
        .                           }
        .                           let kind = Str { terminated };
       42 ( 0.00%)                  Literal { kind, suffix_start }
        .                       }
        .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
        .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
        .                       _ => Unknown,
        .                   };
        .                   Token::new(token_kind, self.len_consumed())
1,547,244 ( 0.03%)      }
        .           
        .               fn line_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '/');
        .                   self.bump();
        .           
      864 ( 0.00%)          let doc_style = match self.first() {
        .                       // `//!` is an inner line doc comment.
        .                       '!' => Some(DocStyle::Inner),
        .                       // `////` (more than 3 slashes) is not considered a doc comment.
      264 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
        .                       _ => None,
        .                   };
        .           
   13,071 ( 0.00%)          self.eat_while(|c| c != '\n');
      780 ( 0.00%)          LineComment { doc_style }
        .               }
        .           
        .               fn block_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '*');
        .                   self.bump();
        .           
        .                   let doc_style = match self.first() {
        .                       // `/*!` is an inner block doc comment.
-- line 447 ----------------------------------------
-- line 474 ----------------------------------------
        .                   }
        .           
        .                   BlockComment { doc_style, terminated: depth == 0 }
        .               }
        .           
        .               fn whitespace(&mut self) -> TokenKind {
        .                   debug_assert!(is_whitespace(self.prev()));
        .                   self.eat_while(is_whitespace);
   44,330 ( 0.00%)          Whitespace
        .               }
        .           
        .               fn raw_ident(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
        .                   // Eat "#" symbol.
        .                   self.bump();
        .                   // Eat the identifier part of RawIdent.
        .                   self.eat_identifier();
        .                   RawIdent
        .               }
        .           
   20,175 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   debug_assert!(is_id_start(self.prev()));
        .                   // Start is already eaten, eat the rest of identifier.
    8,070 ( 0.00%)          self.eat_while(is_id_continue);
        .                   // Known prefixes must have been handled earlier. So if
        .                   // we see a prefix here, it is definitely an unknown prefix.
    8,070 ( 0.00%)          match self.first() {
        .                       '#' | '"' | '\'' => UnknownPrefix,
    4,035 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
    4,035 ( 0.00%)              _ => Ident,
        .                   }
   16,140 ( 0.00%)      }
        .           
        .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   // Start is already eaten, eat the rest of identifier.
        .                   self.eat_while(|c| {
        .                       unicode_xid::UnicodeXID::is_xid_continue(c)
        .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
        .                           || c == '\u{200d}'
        .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
        .                       '#' | '"' | '\'' => UnknownPrefix,
        .                       _ => InvalidIdent,
        .                   }
        .               }
        .           
        .               fn number(&mut self, first_digit: char) -> LiteralKind {
        .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
        .                   let mut base = Base::Decimal;
   47,926 ( 0.00%)          if first_digit == '0' {
        .                       // Attempt to parse encoding base.
   71,861 ( 0.00%)              let has_digits = match self.first() {
        .                           'b' => {
        .                               base = Base::Binary;
        .                               self.bump();
        .                               self.eat_decimal_digits()
        .                           }
        .                           'o' => {
        .                               base = Base::Octal;
        .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
        .                               self.eat_decimal_digits()
        .                           }
        .                           'x' => {
        .                               base = Base::Hexadecimal;
        .                               self.bump();
        .                               self.eat_hexadecimal_digits()
        .                           }
        .                           // Not a base prefix.
      126 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
        .                               self.eat_decimal_digits();
        .                               true
        .                           }
        .                           // Just a 0.
        .                           _ => return Int { base, empty_int: false },
        .                       };
        .                       // Base prefix was provided, but there were no digits
        .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
        .                       if !has_digits {
        .                           return Int { base, empty_int: true };
        .                       }
        .                   } else {
        .                       // No base prefix, parse number in the usual way.
        .                       self.eat_decimal_digits();
        .                   };
        .           
  143,536 ( 0.00%)          match self.first() {
        .                       // Don't be greedy if this is actually an
        .                       // integer literal followed by field/method access or a range pattern
        .                       // (`0..2` and `12.foo()`)
       10 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
        .                           // might have stuff after the ., and if it does, it needs to start
        .                           // with a number
        .                           self.bump();
        .                           let mut empty_exponent = false;
        .                           if self.first().is_digit(10) {
        .                               self.eat_decimal_digits();
        .                               match self.first() {
        .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
        .                           self.bump();
        .                           let empty_exponent = !self.eat_float_exponent();
        .                           Float { base, empty_exponent }
        .                       }
        .                       _ => Int { base, empty_int: false },
        .                   }
        .               }
        .           
  106,939 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '\'');
        .           
   30,554 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
        .                       // It's surely not a lifetime.
        .                       false
        .                   } else {
        .                       // If the first symbol is valid for identifier, it can be a lifetime.
        .                       // Also check if it's a number for a better error reporting (so '0 will
        .                       // be reported as invalid lifetime and not as unterminated char literal).
        .                       is_id_start(self.first()) || self.first().is_digit(10)
        .                   };
        .           
   15,261 ( 0.00%)          if !can_be_a_lifetime {
   45,783 ( 0.00%)              let terminated = self.single_quoted_string();
        .                       let suffix_start = self.len_consumed();
   30,522 ( 0.00%)              if terminated {
        .                           self.eat_literal_suffix();
        .                       }
        .                       let kind = Char { terminated };
   61,044 ( 0.00%)              return Literal { kind, suffix_start };
        .                   }
        .           
        .                   // Either a lifetime or a character literal with
        .                   // length greater than 1.
        .           
        .                   let starts_with_number = self.first().is_digit(10);
        .           
        .                   // Skip the literal contents.
        .                   // First symbol can be a number (which isn't a valid identifier start),
        .                   // so skip it without any checks.
        .                   self.bump();
       32 ( 0.00%)          self.eat_while(is_id_continue);
        .           
        .                   // Check if after skipping literal contents we've met a closing
        .                   // single quote (which means that user attempted to create a
        .                   // string with single quotes).
       32 ( 0.00%)          if self.first() == '\'' {
        .                       self.bump();
        .                       let kind = Char { terminated: true };
        .                       Literal { kind, suffix_start: self.len_consumed() }
        .                   } else {
       32 ( 0.00%)              Lifetime { starts_with_number }
        .                   }
   91,662 ( 0.00%)      }
        .           
        .               fn single_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '\'');
        .                   // Check if it's a one-symbol literal.
   30,522 ( 0.00%)          if self.second() == '\'' && self.first() != '\\' {
        .                       self.bump();
        .                       self.bump();
        .                       return true;
        .                   }
        .           
        .                   // Literal has more than one symbol.
        .           
        .                   // Parse until either quotes are terminated or error is detected.
        .                   loop {
  724,965 ( 0.01%)              match self.first() {
        .                           // Quotes are terminated, finish parsing.
        .                           '\'' => {
        .                               self.bump();
        .                               return true;
        .                           }
        .                           // Probably beginning of the comment, which we don't want to include
        .                           // to the error report.
        .                           '/' => break,
-- line 660 ----------------------------------------
-- line 670 ----------------------------------------
        .                           // Skip the character.
        .                           _ => {
        .                               self.bump();
        .                           }
        .                       }
        .                   }
        .                   // String was not terminated.
        .                   false
   15,261 ( 0.00%)      }
        .           
        .               /// Eats double-quoted string and returns true
        .               /// if string is terminated.
        .               fn double_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '"');
        .                   while let Some(c) = self.bump() {
   13,790 ( 0.00%)              match c {
        .                           '"' => {
        .                               return true;
        .                           }
    1,688 ( 0.00%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
        .                               // Bump again to skip escaped character.
        .                               self.bump();
        .                           }
        .                           _ => (),
        .                       }
        .                   }
        .                   // End of file reached.
        .                   false
       21 ( 0.00%)      }
        .           
        .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
        .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
        .                   // Wrap the actual function to handle the error with too many hashes.
        .                   // This way, it eats the whole raw string.
        .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
        .                   // Only up to 65535 `#`s are allowed in raw strings
        .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
        .                           max_hashes = n_end_hashes;
        .                       }
        .                   }
        .               }
        .           
        .               fn eat_decimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
      114 ( 0.00%)              match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
      171 ( 0.00%)                  '0'..='9' => {
        .                               has_digits = true;
        .                               self.bump();
        .                           }
        .                           _ => break,
        .                       }
        .                   }
        .                   has_digits
       82 ( 0.00%)      }
        .           
        .               fn eat_hexadecimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
  186,422 ( 0.00%)              match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
  411,951 ( 0.01%)                  '0'..='9' | 'a'..='f' | 'A'..='F' => {
        .                               has_digits = true;
        .                               self.bump();
        .                           }
        .                           _ => break,
        .                       }
        .                   }
        .                   has_digits
   47,770 ( 0.00%)      }
        .           
        .               /// Eats the float exponent. Returns true if at least one digit was met,
        .               /// and returns false otherwise.
        .               fn eat_float_exponent(&mut self) -> bool {
        .                   debug_assert!(self.prev() == 'e' || self.prev() == 'E');
        .                   if self.first() == '-' || self.first() == '+' {
        .                       self.bump();
        .                   }
        .                   self.eat_decimal_digits()
        .               }
        .           
        .               // Eats the suffix of the literal, e.g. "_u8".
        .               fn eat_literal_suffix(&mut self) {
   78,490 ( 0.00%)          self.eat_identifier();
        .               }
        .           
        .               // Eats the identifier.
  117,735 ( 0.00%)      fn eat_identifier(&mut self) {
        .                   if !is_id_start(self.first()) {
        .                       return;
        .                   }
        .                   self.bump();
        .           
        5 ( 0.00%)          self.eat_while(is_id_continue);
  156,976 ( 0.00%)      }
        .           }

2,419,036 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::collections::BTreeMap;
        .           use std::ops::Range;
        .           use std::{cmp, fmt, mem};
        .           
        .           mod leak_check;
        .           
        .           pub use rustc_middle::infer::MemberConstraint;
        .           
  156,398 ( 0.00%)  #[derive(Default)]
        .           pub struct RegionConstraintStorage<'tcx> {
        .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
        .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
        .           
        .               data: RegionConstraintData<'tcx>,
        .           
        .               /// For a given pair of regions (R1, R2), maps to a region R3 that
        .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
        .               storage: &'a mut RegionConstraintStorage<'tcx>,
        .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .           }
        .           
        .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
        .               type Target = RegionConstraintStorage<'tcx>;
        .               #[inline]
        .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
    1,106 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
  112,121 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
        .           
        .           /// The full set of region constraints gathered up by the collector.
        .           /// Describes constraints between the region variables and other
        .           /// regions, as well as other conditions that must be verified, or
        .           /// assumptions that can be made.
   64,044 ( 0.00%)  #[derive(Debug, Default, Clone)]
        .           pub struct RegionConstraintData<'tcx> {
        .               /// Constraints of the form `A <= B`, where either `A` or `B` can
        .               /// be a region variable (or neither, as it happens).
        .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
        .           
        .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
        .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
        .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
        .               /// This hashmap is used to avoid that naive scenario. Basically
        .               /// we record the fact that `'a <= 'b` is implied by the fn
        .               /// signature, and then ignore the constraint when solving
        .               /// equations. This is a bit of a hack but seems to work.
        .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
        .           }
        .           
        .           /// Represents a constraint that influences the inference process.
8,904,254 ( 0.16%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
        .           pub enum Constraint<'tcx> {
        .               /// A region variable is a subregion of another.
2,140,234 ( 0.04%)      VarSubVar(RegionVid, RegionVid),
        .           
        .               /// A concrete region is a subregion of region variable.
  909,660 ( 0.02%)      RegSubVar(Region<'tcx>, RegionVid),
        .           
        .               /// A region variable is a subregion of a concrete region. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
    1,098 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
        .           
        .               /// A constraint where neither side is a variable. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
      495 ( 0.00%)      RegSubReg(Region<'tcx>, Region<'tcx>),
        .           }
        .           
        .           impl Constraint<'_> {
        .               pub fn involves_placeholders(&self) -> bool {
      472 ( 0.00%)          match self {
        .                       Constraint::VarSubVar(_, _) => false,
        .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
        .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 304 ----------------------------------------
        .               pub universe: ty::UniverseIndex,
        .           }
        .           
        .           pub struct RegionSnapshot {
        .               any_unifications: bool,
        .           }
        .           
        .           impl<'tcx> RegionConstraintStorage<'tcx> {
   28,436 ( 0.00%)      pub fn new() -> Self {
        .                   Self::default()
   28,436 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
        .                   &'a mut self,
        .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .               ) -> RegionConstraintCollector<'a, 'tcx> {
        .                   RegionConstraintCollector { storage: self, undo_log }
        .               }
        .           
        .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
    9,570 ( 0.00%)          match undo_entry {
        .                       AddVar(vid) => {
        .                           self.var_infos.pop().unwrap();
    3,604 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
        .                       }
    1,013 ( 0.00%)              AddConstraint(ref constraint) => {
    4,052 ( 0.00%)                  self.data.constraints.remove(constraint);
        .                       }
        .                       AddVerify(index) => {
        .                           self.data.verifys.pop();
        .                           assert_eq!(self.data.verifys.len(), index);
        .                       }
        .                       AddGiven(sub, sup) => {
        .                           self.data.givens.remove(&(sub, sup));
        .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
        .               pub fn num_region_vars(&self) -> usize {
        .                   self.var_infos.len()
        .               }
        .           
        .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
      731 ( 0.00%)          &self.data
      731 ( 0.00%)      }
        .           
        .               /// Once all the constraints have been gathered, extract out the final data.
        .               ///
        .               /// Not legal during a snapshot.
        .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
    1,793 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
        .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
        .               }
        .           
        .               /// Takes (and clears) the current set of constraints. Note that
        .               /// the set of variables remains intact, but all relationships
        .               /// between them are reset. This is used during NLL checking to
        .               /// grab the set of constraints that arose from a particular
        .               /// operation.
-- line 371 ----------------------------------------
-- line 418 ----------------------------------------
        .           
        .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
        .                   debug!("RegionConstraintCollector: start_snapshot");
        .                   RegionSnapshot { any_unifications: self.any_unifications }
        .               }
        .           
        .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
        .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
   23,799 ( 0.00%)          self.any_unifications = snapshot.any_unifications;
        .               }
        .           
  672,726 ( 0.01%)      pub fn new_region_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: RegionVariableOrigin,
        .               ) -> RegionVid {
  112,121 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
        .           
  336,363 ( 0.01%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
  112,121 ( 0.00%)          assert_eq!(vid, u_vid.vid);
        .                   self.undo_log.push(AddVar(vid));
        .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
        .                   vid
  896,968 ( 0.02%)      }
        .           
        .               /// Returns the universe for the given variable.
        .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
    3,774 ( 0.00%)          self.var_infos[vid].universe
        .               }
        .           
        .               /// Returns the origin for the given variable.
        .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
        .                   self.var_infos[vid].origin
        .               }
        .           
        .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
        .           
        .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
        .                   // present in the map yet. This prevents origins from outside the snapshot being
        .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
        .                   let undo_log = &mut self.undo_log;
  529,978 ( 0.01%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
  296,988 ( 0.01%)              undo_log.push(AddConstraint(constraint));
  197,992 ( 0.00%)              origin
        .                   });
        .               }
        .           
        .               fn add_verify(&mut self, verify: Verify<'tcx>) {
        .                   // cannot add verifys once regions are resolved
        .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
        .           
        .                   // skip no-op cases known to be satisfied
      220 ( 0.00%)          if let VerifyBound::AllBounds(ref bs) = verify.bound {
        .                       if bs.is_empty() {
        .                           return;
        .                       }
        .                   }
        .           
      110 ( 0.00%)          let index = self.data.verifys.len();
    1,650 ( 0.00%)          self.data.verifys.push(verify);
      110 ( 0.00%)          self.undo_log.push(AddVerify(index));
        .               }
        .           
        .               pub fn add_given(&mut self, sub: Region<'tcx>, sup: ty::RegionVid) {
        .                   // cannot add givens once regions are resolved
        .                   if self.data.givens.insert((sub, sup)) {
        .                       debug!("add_given({:?} <= {:?})", sub, sup);
        .           
        .                       self.undo_log.push(AddGiven(sub, sup));
        .                   }
        .               }
        .           
  146,410 ( 0.00%)      pub fn make_eqregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
   73,205 ( 0.00%)          if sub != sup {
        .                       // Eventually, it would be nice to add direct support for
        .                       // equating regions.
  113,864 ( 0.00%)              self.make_subregion(origin.clone(), sub, sup);
  128,097 ( 0.00%)              self.make_subregion(origin, sup, sub);
        .           
   71,165 ( 0.00%)              match (sub, sup) {
   42,261 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
   70,435 ( 0.00%)                      self.unification_table().union(sub, sup);
        .                               self.any_unifications = true;
        .                           }
        .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
      584 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
        .                               self.any_unifications = true;
        .                           }
        .                           (_, _) => {}
        .                       }
        .                   }
   99,631 ( 0.00%)      }
        .           
        .               pub fn member_constraint(
        .                   &mut self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   member_region: ty::Region<'tcx>,
        .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
-- line 526 ----------------------------------------
-- line 535 ----------------------------------------
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       member_region,
        .                       choice_regions: choice_regions.clone(),
        .                   });
        .               }
        .           
  694,104 ( 0.01%)      #[instrument(skip(self, origin), level = "debug")]
        .               pub fn make_subregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("origin = {:#?}", origin);
        .           
  496,402 ( 0.01%)          match (sub, sup) {
        .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
        .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
        .                       }
        .                       (_, &ReStatic) => {
        .                           // all regions are subregions of static, so we can ignore this
        .                       }
   42,189 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
  295,323 ( 0.01%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
        .                       }
        .                       (_, &ReVar(sup_id)) => {
   48,769 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
        .                       }
      260 ( 0.00%)              (&ReVar(sub_id), _) => {
    1,820 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
        .                       }
        .                       _ => {
      749 ( 0.00%)                  self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
        .                       }
        .                   }
        .               }
        .           
      550 ( 0.00%)      pub fn verify_generic_bound(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   sub: Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
    1,430 ( 0.00%)          self.add_verify(Verify { kind, origin, region: sub, bound });
      550 ( 0.00%)      }
        .           
        .               pub fn lub_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
-- line 591 ----------------------------------------
-- line 623 ----------------------------------------
        .                       }
        .           
        .                       _ => self.combine_vars(tcx, Glb, a, b, origin),
        .                   }
        .               }
        .           
        .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
        .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
   31,496 ( 0.00%)          self.unification_table().find(rid).vid
        .               }
        .           
        .               /// If the Region is a `ReVar`, then resolves it either to the root value in
        .               /// the unification table, if it exists, or to the root `ReVar` in the table.
        .               /// If the Region is not a `ReVar`, just returns the Region itself.
        .               pub fn opportunistic_resolve_region(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 683 ----------------------------------------
        .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
        .                       }
        .                   }
        .                   debug!("combine_vars() c={:?}", c);
        .                   new_r
        .               }
        .           
        .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
    2,868 ( 0.00%)          match *region {
        .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
        .                           ty::UniverseIndex::ROOT
        .                       }
        .                       ty::ReEmpty(ui) => ui,
        .                       ty::RePlaceholder(placeholder) => placeholder.universe,
      398 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
        .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
        .                   }
        .               }
        .           
    1,175 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &self,
        .                   value_count: usize,
        .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
        .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
    1,410 ( 0.00%)          (
        .                       range.clone(),
        .                       (range.start.index()..range.end.index())
        .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
        .                           .collect(),
        .                   )
    1,410 ( 0.00%)      }
        .           
        .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
    5,433 ( 0.00%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
    1,811 ( 0.00%)          self.undo_log
        .                       .region_constraints_in_snapshot(mark)
      779 ( 0.00%)              .map(|&elt| match elt {
      180 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
        .                           _ => None,
        .                       })
        .                       .max()
        .                       .unwrap_or(None)
    7,244 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
  268,456 ( 0.00%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
        .               }
        .           }
        .           
        .           impl fmt::Debug for RegionSnapshot {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "RegionSnapshot")
        .               }
        .           }
-- line 737 ----------------------------------------
-- line 750 ----------------------------------------
        .                   match *self {
        .                       GenericKind::Param(ref p) => write!(f, "{}", p),
        .                       GenericKind::Projection(ref p) => write!(f, "{}", p),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> GenericKind<'tcx> {
       92 ( 0.00%)      pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    1,429 ( 0.00%)          match *self {
      156 ( 0.00%)              GenericKind::Param(ref p) => p.to_ty(tcx),
        .                       GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),
        .                   }
       92 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> VerifyBound<'tcx> {
        .               pub fn must_hold(&self) -> bool {
        .                   match self {
        .                       VerifyBound::IfEq(..) => false,
        .                       VerifyBound::OutlivedBy(ty::ReStatic) => true,
        .                       VerifyBound::OutlivedBy(_) => false,
-- line 771 ----------------------------------------
-- line 796 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> RegionConstraintData<'tcx> {
        .               /// Returns `true` if this region constraint data contains no constraints, and `false`
        .               /// otherwise.
        .               pub fn is_empty(&self) -> bool {
        .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
      387 ( 0.00%)          constraints.is_empty()
        .                       && member_constraints.is_empty()
        .                       && verifys.is_empty()
        .                       && givens.is_empty()
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
    9,570 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
    7,656 ( 0.00%)          self.rollback_undo_entry(undo)
    9,570 ( 0.00%)      }
        .           }

2,079,294 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts.rs
--------------------------------------------------------------------------------
Ir                  

-- line 13 ----------------------------------------
         .           mod kind;
         .           mod valtree;
         .           
         .           pub use int::*;
         .           pub use kind::*;
         .           pub use valtree::*;
         .           
         .           /// Typed constant value.
 1,168,647 ( 0.02%)  #[derive(Copy, Clone, Debug, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct Const<'tcx> {
   398,261 ( 0.01%)      pub ty: Ty<'tcx>,
         .           
   405,362 ( 0.01%)      pub val: ConstKind<'tcx>,
         .           }
         .           
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           static_assert_size!(Const<'_>, 48);
         .           
         .           impl<'tcx> Const<'tcx> {
         .               /// Literals and const generic parameters are eagerly converted to a constant, everything else
         .               /// becomes `Unevaluated`.
         .               pub fn from_anon_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {
        14 ( 0.00%)          Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::unknown(def_id))
         .               }
         .           
        56 ( 0.00%)      #[instrument(skip(tcx), level = "debug")]
        56 ( 0.00%)      pub fn from_opt_const_arg_anon_const(
         .                   tcx: TyCtxt<'tcx>,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx Self {
         .                   debug!("Const::from_anon_const(def={:?})", def);
         .           
        28 ( 0.00%)          let body_id = match tcx.hir().get_by_def_id(def.did) {
        14 ( 0.00%)              hir::Node::AnonConst(ac) => ac.body,
         .                       _ => span_bug!(
         .                           tcx.def_span(def.did.to_def_id()),
         .                           "from_anon_const can only process anonymous constants"
         .                       ),
         .                   };
         .           
        42 ( 0.00%)          let expr = &tcx.hir().body(body_id).value;
         .                   debug!(?expr);
         .           
         .                   let ty = tcx.type_of(def.def_id_for_type_of());
         .           
        42 ( 0.00%)          match Self::try_eval_lit_or_param(tcx, ty, expr) {
         .                       Some(v) => v,
         .                       None => tcx.mk_const(ty::Const {
         .                           val: ty::ConstKind::Unevaluated(ty::Unevaluated {
         .                               def: def.to_global(),
         .                               substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),
         .                               promoted: None,
         .                           }),
         .                           ty,
         .                       }),
         .                   }
         .               }
         .           
       126 ( 0.00%)      #[instrument(skip(tcx), level = "debug")]
         .               fn try_eval_lit_or_param(
         .                   tcx: TyCtxt<'tcx>,
         .                   ty: Ty<'tcx>,
         .                   expr: &'tcx hir::Expr<'tcx>,
         .               ) -> Option<&'tcx Self> {
         .                   // Unwrap a block, so that e.g. `{ P }` is recognised as a parameter. Const arguments
         .                   // currently have to be wrapped in curly brackets, so it's necessary to special-case.
        21 ( 0.00%)          let expr = match &expr.kind {
         .                       hir::ExprKind::Block(block, _) if block.stmts.is_empty() && block.expr.is_some() => {
         .                           block.expr.as_ref().unwrap()
         .                       }
         .                       _ => expr,
         .                   };
         .           
        14 ( 0.00%)          let lit_input = match expr.kind {
        14 ( 0.00%)              hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),
         .                       hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => match expr.kind {
         .                           hir::ExprKind::Lit(ref lit) => {
         .                               Some(LitToConstInput { lit: &lit.node, ty, neg: true })
         .                           }
         .                           _ => None,
         .                       },
         .                       _ => None,
         .                   };
         .           
         .                   if let Some(lit_input) = lit_input {
         .                       // If an error occurred, ignore that it's a literal and leave reporting the error up to
         .                       // mir.
        23 ( 0.00%)              match tcx.at(expr.span).lit_to_const(lit_input) {
         .                           Ok(c) => return Some(c),
         .                           Err(e) => {
         .                               tcx.sess.delay_span_bug(
         .                                   expr.span,
         .                                   &format!("Const::from_anon_const: couldn't lit_to_const {:?}", e),
         .                               );
         .                           }
         .                       }
-- line 109 ----------------------------------------
-- line 167 ----------------------------------------
         .                   };
         .                   debug_assert!(!ret.has_free_regions());
         .                   ret
         .               }
         .           
         .               /// Interns the given value as a constant.
         .               #[inline]
         .               pub fn from_value(tcx: TyCtxt<'tcx>, val: ConstValue<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {
   715,592 ( 0.01%)          tcx.mk_const(Self { val: ConstKind::Value(val), ty })
         .               }
         .           
         .               #[inline]
         .               /// Interns the given scalar as a constant.
         .               pub fn from_scalar(tcx: TyCtxt<'tcx>, val: Scalar, ty: Ty<'tcx>) -> &'tcx Self {
         .                   Self::from_value(tcx, ConstValue::Scalar(val), ty)
         .               }
         .           
         .               #[inline]
         .               /// Creates a constant with the given integer value and interns it.
       110 ( 0.00%)      pub fn from_bits(tcx: TyCtxt<'tcx>, bits: u128, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> &'tcx Self {
    20,479 ( 0.00%)          let size = tcx
         .                       .layout_of(ty)
         .                       .unwrap_or_else(|e| panic!("could not compute layout for {:?}: {:?}", ty, e))
         .                       .size;
         .                   Self::from_scalar(tcx, Scalar::from_uint(bits, size), ty.value)
        80 ( 0.00%)      }
         .           
         .               #[inline]
         .               /// Creates an interned zst constant.
         .               pub fn zero_sized(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> &'tcx Self {
         .                   Self::from_scalar(tcx, Scalar::ZST, ty)
         .               }
         .           
         .               #[inline]
         .               /// Creates an interned bool constant.
     1,176 ( 0.00%)      pub fn from_bool(tcx: TyCtxt<'tcx>, v: bool) -> &'tcx Self {
       910 ( 0.00%)          Self::from_bits(tcx, v as u128, ParamEnv::empty().and(tcx.types.bool))
     1,176 ( 0.00%)      }
         .           
         .               #[inline]
         .               /// Creates an interned usize constant.
         .               pub fn from_usize(tcx: TyCtxt<'tcx>, n: u64) -> &'tcx Self {
   101,610 ( 0.00%)          Self::from_bits(tcx, n as u128, ParamEnv::empty().and(tcx.types.usize))
         .               }
         .           
         .               #[inline]
         .               /// Attempts to evaluate the given constant to bits. Can fail to evaluate in the presence of
         .               /// generics (or erroneous code) or if the value can't be represented as bits (e.g. because it
         .               /// contains const generic parameters or pointers).
18,630,702 ( 0.33%)      pub fn try_eval_bits(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   param_env: ParamEnv<'tcx>,
         .                   ty: Ty<'tcx>,
         .               ) -> Option<u128> {
 2,070,877 ( 0.04%)          assert_eq!(self.ty, ty);
 8,280,216 ( 0.15%)          let size = tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;
         .                   // if `ty` does not depend on generic parameters, use an empty param_env
22,779,747 ( 0.41%)          self.val.eval(tcx, param_env).try_to_bits(size)
16,560,624 ( 0.30%)      }
         .           
         .               #[inline]
         .               pub fn try_eval_bool(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<bool> {
        77 ( 0.00%)          self.val.eval(tcx, param_env).try_to_bool()
         .               }
         .           
         .               #[inline]
     9,896 ( 0.00%)      pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {
    85,655 ( 0.00%)          self.val.eval(tcx, param_env).try_to_machine_usize(tcx)
     7,496 ( 0.00%)      }
         .           
         .               #[inline]
         .               /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the
         .               /// unevaluated constant.
         .               pub fn eval(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> &Const<'tcx> {
   249,180 ( 0.00%)          if let Some(val) = self.val.try_eval(tcx, param_env) {
         .                       match val {
        65 ( 0.00%)                  Ok(val) => Const::from_value(tcx, val, self.ty),
         .                           Err(ErrorReported) => tcx.const_error(self.ty),
         .                       }
         .                   } else {
         .                       self
         .                   }
         .               }
         .           
         .               #[inline]
         .               /// Panics if the value cannot be evaluated or doesn't contain a valid integer of the given type.
         .               pub fn eval_bits(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: Ty<'tcx>) -> u128 {
    11,223 ( 0.00%)          self.try_eval_bits(tcx, param_env, ty)
         .                       .unwrap_or_else(|| bug!("expected bits of {:#?}, got {:#?}", ty, self))
         .               }
         .           
         .               #[inline]
         .               /// Panics if the value cannot be evaluated or doesn't contain a valid `usize`.
        24 ( 0.00%)      pub fn eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> u64 {
         .                   self.try_eval_usize(tcx, param_env)
         .                       .unwrap_or_else(|| bug!("expected usize, got {:#?}", self))
        20 ( 0.00%)      }
         .           }
         .           
         .           pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Const<'tcx> {
         .               let default_def_id = match tcx.hir().get_by_def_id(def_id.expect_local()) {
         .                   hir::Node::GenericParam(hir::GenericParam {
         .                       kind: hir::GenericParamKind::Const { ty: _, default: Some(ac) },
         .                       ..
         .                   }) => tcx.hir().local_def_id(ac.hir_id),
-- line 272 ----------------------------------------

 7,060,691 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/consts.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 59 ----------------------------------------
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy>;
        .           
        .               /// Not overridden, but used to actually visit types and traits.
        .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
  750,526 ( 0.01%)          DefIdVisitorSkeleton {
        .                       def_id_visitor: self,
        .                       visited_opaque_tys: Default::default(),
        .                       dummy: Default::default(),
        .                   }
        .               }
      198 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   ty_fragment.visit_with(&mut self.skeleton())
      330 ( 0.00%)      }
      120 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   self.skeleton().visit_trait(trait_ref)
      120 ( 0.00%)      }
        .               fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
      120 ( 0.00%)          self.skeleton().visit_projection_ty(projection)
        .               }
        .               fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
      304 ( 0.00%)          self.skeleton().visit_predicates(predicates)
        .               }
        .           }
        .           
        .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
        .               def_id_visitor: &'v mut V,
        .               visited_opaque_tys: FxHashSet<DefId>,
        .               dummy: PhantomData<TyCtxt<'tcx>>,
        .           }
        .           
        .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
       20 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
    4,754 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
       20 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
        .               }
        .           
    1,240 ( 0.00%)      fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
      992 ( 0.00%)          let (trait_ref, assoc_substs) =
      248 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
        .                   self.visit_trait(trait_ref)?;
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
        .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
        .                   }
    1,116 ( 0.00%)      }
        .           
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
      217 ( 0.00%)          match predicate.kind().skip_binder() {
        .                       ty::PredicateKind::Trait(ty::TraitPredicate {
        .                           trait_ref,
        .                           constness: _,
        .                           polarity: _,
        .                       }) => self.visit_trait(trait_ref),
        .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
      116 ( 0.00%)                  term.visit_with(self)?;
      290 ( 0.00%)                  self.visit_projection_ty(projection_ty)
        .                       }
        .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _region)) => {
        .                           ty.visit_with(self)
        .                       }
        .                       ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,
        .                       ty::PredicateKind::ConstEvaluatable(uv)
        .                           if self.def_id_visitor.tcx().features().generic_const_exprs =>
        .                       {
-- line 140 ----------------------------------------
-- line 157 ----------------------------------------
        .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
        .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
        .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
        .                           ControlFlow::CONTINUE
        .                       }
        .                   })
        .               }
        .           
    2,128 ( 0.00%)      fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
        .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
        .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
    2,432 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               type BreakTy = V::BreakTy;
        .           
1,837,411 ( 0.03%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
  204,149 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
        .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
1,020,293 ( 0.02%)          match *ty.kind() {
   10,685 ( 0.00%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
        .                       | ty::Foreign(def_id)
        .                       | ty::FnDef(def_id, ..)
        .                       | ty::Closure(def_id, ..)
        .                       | ty::Generator(def_id, ..) => {
   52,522 ( 0.00%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
        .                           if self.def_id_visitor.shallow() {
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // Default type visitor doesn't visit signatures of fn types.
        .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
        .                           // `my_func` is public, so we need to visit signatures.
   11,750 ( 0.00%)                  if let ty::FnDef(..) = ty.kind() {
        .                               tcx.fn_sig(def_id).visit_with(self)?;
        .                           }
        .                           // Inherent static methods don't have self type in substs.
        .                           // Something like `fn() {my_method}` type of the method
        .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
        .                           // so we need to visit the self type additionally.
   17,396 ( 0.00%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
      860 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
      164 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
        .                               }
        .                           }
        .                       }
       72 ( 0.00%)              ty::Projection(proj) => {
        .                           if self.def_id_visitor.skip_assoc_tys() {
        .                               // Visitors searching for minimal visibility/reachability want to
        .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
        .                               // as visible/reachable even if both `Type` and `Trait` are private.
        .                               // Ideally, associated types should be substituted in the same way as
        .                               // free type aliases, but this isn't done yet.
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // This will also visit substs if necessary, so we don't need to recurse.
      360 ( 0.00%)                  return self.visit_projection_ty(proj);
        .                       }
        6 ( 0.00%)              ty::Dynamic(predicates, ..) => {
        .                           // All traits in the list are considered the "primary" part of the type
        .                           // and are visited by shallow visitors.
       48 ( 0.00%)                  for predicate in predicates {
       36 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
       36 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
        .                                   ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
        .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
        .                                       ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
        .                                   }
        .                               };
       12 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
       72 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
        .                           }
        .                       }
        .                       ty::Opaque(def_id, ..) => {
        .                           // Skip repeated `Opaque`s to avoid infinite recursion.
        .                           if self.visited_opaque_tys.insert(def_id) {
        .                               // The intent is to treat `impl Trait1 + Trait2` identically to
        .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
        .                               // (it either has no visibility, or its visibility is insignificant, like
-- line 241 ----------------------------------------
-- line 270 ----------------------------------------
        .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
        .                           bug!("unexpected type: {:?}", ty)
        .                       }
        .                   }
        .           
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
  609,983 ( 0.01%)              ty.super_visit_with(self)
        .                   }
1,834,071 ( 0.03%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
  163,098 ( 0.00%)          self.visit_ty(c.ty)?;
   27,183 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
  190,281 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
        .                       self.visit_abstract_const_expr(tcx, ct)?;
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
       64 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
        .           ///
        .           /// This is done so that `private_in_public` warnings can be turned into hard errors
        .           /// in crates that have been updated to use pub(restricted).
        .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
      376 ( 0.00%)          self.tcx.hir()
        .               }
        .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
      904 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine impl visibility and reachability.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
        .                   true
        .               }
        .               fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
      620 ( 0.00%)          self.min = VL::new_min(self, def_id);
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           trait VisibilityLike: Sized {
        .               const MAX: Self;
        .               const SHALLOW: bool = false;
        .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
        .           
        .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
        .               // associated types for which we can't determine visibility precisely.
      462 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
      220 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
       66 ( 0.00%)          find.visit(tcx.type_of(def_id));
      198 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
       20 ( 0.00%)              find.visit_trait(trait_ref);
        .                   }
       52 ( 0.00%)          find.min
      528 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for ty::Visibility {
        .               const MAX: Self = ty::Visibility::Public;
      420 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
      180 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
      600 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for Option<AccessLevel> {
        .               const MAX: Self = Some(AccessLevel::Public);
        .               // Type inference is very smart sometimes.
        .               // It can make an impl reachable even some components of its type or trait are unreachable.
        .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
        .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
        .               // and consider an impl reachable if its "shallow" type and trait are reachable.
        .               //
        .               // The assumption we make here is that type-inference won't let you use an impl without knowing
        .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
        .               // (which require reaching the `DefId`s in them).
        .               const SHALLOW: bool = true;
      240 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
        .                   cmp::min(
      240 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
       88 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
        .                       } else {
        .                           Self::MAX
        .                       },
      184 ( 0.00%)              find.min,
        .                   )
      320 ( 0.00%)      }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// The embargo visitor, used to determine the exports of the AST.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct EmbargoVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
        .           
        .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
        .               access_level: Option<AccessLevel>,
        .               item_def_id: LocalDefId,
        .               ev: &'a mut EmbargoVisitor<'tcx>,
        .           }
        .           
        .           impl<'tcx> EmbargoVisitor<'tcx> {
    1,864 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
        .                   self.access_levels.map.get(&def_id).copied()
    1,864 ( 0.00%)      }
        .           
        .               fn update_with_hir_id(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   level: Option<AccessLevel>,
        .               ) -> Option<AccessLevel> {
      192 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   self.update(def_id, level)
        .               }
        .           
        .               /// Updates node level and returns the updated level.
        .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
    1,342 ( 0.00%)          let old_level = self.get(def_id);
        .                   // Accessibility levels can only grow.
        .                   if level > old_level {
        .                       self.access_levels.map.insert(def_id, level.unwrap());
       50 ( 0.00%)              self.changed = true;
        .                       level
        .                   } else {
        .                       old_level
        .                   }
        .               }
        .           
        .               fn reach(
        .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
        .                   def_id: LocalDefId,
        .                   access_level: Option<AccessLevel>,
        .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .                   ReachEverythingInTheInterfaceVisitor {
        .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
        .                       item_def_id: def_id,
        .                       ev: self,
        .                   }
      584 ( 0.00%)      }
        .           
        .               // We have to make sure that the items that macros might reference
        .               // are reachable, since they might be exported transitively.
        .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
        .                   // Non-opaque macros cannot make other items more accessible than they already are.
        .           
        .                   let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
        .                   let attrs = self.tcx.hir().attrs(hir_id);
-- line 474 ----------------------------------------
-- line 630 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      752 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    3,636 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      808 ( 0.00%)          let item_level = match item.kind {
        .                       hir::ItemKind::Impl { .. } => {
        .                           let impl_level =
      264 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
       44 ( 0.00%)                  self.update(item.def_id, impl_level)
        .                       }
    1,440 ( 0.00%)              _ => self.get(item.def_id),
        .                   };
        .           
        .                   // Update levels of nested things.
    2,039 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(ref def, _) => {
        6 ( 0.00%)                  for variant in def.variants {
       48 ( 0.00%)                      let variant_level = self.update_with_hir_id(variant.id, item_level);
       64 ( 0.00%)                      if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
        .                                   self.update_with_hir_id(ctor_hir_id, item_level);
        .                               }
       32 ( 0.00%)                      for field in variant.data.fields() {
        8 ( 0.00%)                          self.update_with_hir_id(field.hir_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Impl(ref impl_) => {
      132 ( 0.00%)                  for impl_item_ref in impl_.items {
      288 ( 0.00%)                      if impl_.of_trait.is_some()
       20 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
        .                               {
      136 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
        .                               }
        .                           }
        .                       }
        6 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           for trait_item_ref in trait_item_refs {
       24 ( 0.00%)                      self.update(trait_item_ref.id.def_id, item_level);
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
       40 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
        .                               self.update_with_hir_id(ctor_hir_id, item_level);
        .                           }
       20 ( 0.00%)                  for field in def.fields() {
      136 ( 0.00%)                      if field.vis.node.is_pub() {
        .                                   self.update_with_hir_id(field.hir_id, item_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Macro(ref macro_def) => {
        .                           self.update_reachability_from_macro(item.def_id, macro_def);
        .                       }
        .                       hir::ItemKind::ForeignMod { items, .. } => {
-- line 691 ----------------------------------------
-- line 704 ----------------------------------------
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::TraitAlias(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::ExternCrate(..) => {}
        .                   }
        .           
        .                   // Mark all items in interfaces of reachable items as reachable.
    2,020 ( 0.00%)          match item.kind {
        .                       // The interface is empty.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Handled in the access level of in rustc_resolve
        .                       hir::ItemKind::Use(..) => {}
        .                       // The interface is empty.
        .                       hir::ItemKind::GlobalAsm(..) => {}
-- line 720 ----------------------------------------
-- line 732 ----------------------------------------
        .                               self.reach(item.def_id, exist_level).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Visit everything.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
      164 ( 0.00%)                  if item_level.is_some() {
       84 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty();
        .                           }
        .                       }
        4 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        2 ( 0.00%)                  if item_level.is_some() {
       16 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .           
        .                               for trait_item_ref in trait_item_refs {
       24 ( 0.00%)                          let mut reach = self.reach(trait_item_ref.id.def_id, item_level);
       48 ( 0.00%)                          reach.generics().predicates();
        .           
       12 ( 0.00%)                          if trait_item_ref.kind == AssocItemKind::Type
        .                                       && !trait_item_ref.defaultness.has_value()
        .                                   {
        .                                       // No type to visit.
        .                                   } else {
       24 ( 0.00%)                              reach.ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates();
        .                           }
        .                       }
        .                       // Visit everything except for private impl items.
        .                       hir::ItemKind::Impl(ref impl_) => {
       44 ( 0.00%)                  if item_level.is_some() {
      380 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
        .           
       38 ( 0.00%)                      for impl_item_ref in impl_.items {
      216 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
      276 ( 0.00%)                          if impl_item_level.is_some() {
      620 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
        .                                           .generics()
        .                                           .predicates()
        .                                           .ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       // Visit everything, but enum variants have their own levels.
        .                       hir::ItemKind::Enum(ref def, _) => {
        6 ( 0.00%)                  if item_level.is_some() {
       16 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .                           }
        6 ( 0.00%)                  for variant in def.variants {
      144 ( 0.00%)                      let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));
       16 ( 0.00%)                      if variant_level.is_some() {
       12 ( 0.00%)                          for field in variant.data.fields() {
        .                                       self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)
        .                                           .ty();
        .                                   }
        .                                   // Corner case: if the variant is reachable, but its
        .                                   // enum is not, make the enum reachable as well.
       12 ( 0.00%)                          self.update(item.def_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       // Visit everything, but foreign items have their own levels.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let foreign_item_level = self.get(foreign_item.id.def_id);
        .                               if foreign_item_level.is_some() {
-- line 806 ----------------------------------------
-- line 808 ----------------------------------------
        .                                       .generics()
        .                                       .predicates()
        .                                       .ty();
        .                               }
        .                           }
        .                       }
        .                       // Visit everything except for private fields.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
       10 ( 0.00%)                  if item_level.is_some() {
       64 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
       16 ( 0.00%)                      for field in struct_def.fields() {
      196 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
       84 ( 0.00%)                          let field_level = self.get(def_id);
       28 ( 0.00%)                          if field_level.is_some() {
        .                                       self.reach(def_id, field_level).ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
    1,212 ( 0.00%)          intravisit::walk_item(self, item);
      404 ( 0.00%)          self.prev_level = orig_level;
    3,232 ( 0.00%)      }
        .           
        .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
        .                   // Blocks can have public items, for example impls, but they always
        .                   // start as completely private regardless of publicity of a function,
        .                   // constant, type, field, etc., in which this block resides.
        .                   let orig_level = mem::replace(&mut self.prev_level, None);
        .                   intravisit::walk_block(self, b);
        .                   self.prev_level = orig_level;
        .               }
        .           }
        .           
        .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
    1,162 ( 0.00%)      fn generics(&mut self) -> &mut Self {
      664 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
      566 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
       56 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       56 ( 0.00%)                      if has_default {
        .                                   self.visit(self.ev.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           GenericParamDefKind::Const { has_default, .. } => {
        .                               self.visit(self.ev.tcx.type_of(param.def_id));
        .                               if has_default {
        .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
        .                               }
        .                           }
        .                       }
        .                   }
        .                   self
    1,494 ( 0.00%)      }
        .           
      830 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
      498 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
        .                   self
      996 ( 0.00%)      }
        .           
      770 ( 0.00%)      fn ty(&mut self) -> &mut Self {
      462 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
        .                   self
      924 ( 0.00%)      }
        .           
        .               fn trait_ref(&mut self) -> &mut Self {
      228 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
        .                       self.visit_trait(trait_ref);
        .                   }
        .                   self
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
    2,768 ( 0.00%)          self.ev.tcx
        .               }
    2,580 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
    1,548 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
    1,151 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
      294 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
        .                       {
        .                           self.ev.update(def_id, self.access_level);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
    3,612 ( 0.00%)      }
        .           }
        .           
        .           //////////////////////////////////////////////////////////////////////////////////////
        .           /// Name privacy visitor, checks privacy and reports violations.
        .           /// Most of name privacy checks are performed during the main resolution phase,
        .           /// or later in type checking when field accesses and associated items are resolved.
        .           /// This pass performs remaining checks for fields in struct expressions and patterns.
        .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
        .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
        .               #[track_caller]
        .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
        .                   self.maybe_typeck_results
        .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
      830 ( 0.00%)      fn check_field(
        .                   &mut self,
        .                   use_ctxt: Span,        // syntax context of the field name at the use site
        .                   span: Span,            // span of the field pattern, e.g., `x: 0`
        .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
        .                   field: &'tcx ty::FieldDef,
        .                   in_update_syntax: bool,
        .               ) {
      166 ( 0.00%)          if def.is_enum() {
        .                       return;
        .                   }
        .           
        .                   // definition of the field
        .                   let ident = Ident::new(kw::Empty, use_ctxt);
      138 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
      483 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
       69 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
        .                       let label = if in_update_syntax {
        .                           format!("field `{}` is private", field.name)
        .                       } else {
        .                           "private field".to_string()
        .                       };
        .           
        .                       struct_span_err!(
        .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
        .                           "field `{}` of {} `{}` is private",
        .                           field.name,
        .                           def.variant_descr(),
        .                           self.tcx.def_path_str(def.did)
        .                       )
        .                       .span_label(span, label)
        .                       .emit();
        .                   }
      664 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      234 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
        .               fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
      714 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
      774 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
      173 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
        .               }
        .           
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      202 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
      593 ( 0.00%)          intravisit::walk_item(self, item);
      202 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           
  570,465 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  126,770 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
      108 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
       54 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
      162 ( 0.00%)              let variant = adt.variant_of_res(res);
       72 ( 0.00%)              if let Some(base) = *base {
        .                           // If the expression uses FRU we need to make sure all the unmentioned fields
        .                           // are checked for privacy (RFC 736). Rather than computing the set of
        .                           // unmentioned fields, just check them all.
        .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
        .                               let field = fields.iter().find(|f| {
        .                                   self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
        .                               });
        .                               let (use_ctxt, span) = match field {
        .                                   Some(field) => (field.ident.span, field.span),
        .                                   None => (base.span, base.span),
        .                               };
        .                               self.check_field(use_ctxt, span, adt, variant_field, true);
        .                           }
        .                       } else {
        .                           for field in fields {
       55 ( 0.00%)                      let use_ctxt = field.ident.span;
      365 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
      605 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                           }
        .                       }
        .                   }
        .           
  633,850 ( 0.01%)          intravisit::walk_expr(self, expr);
        .               }
        .           
   19,192 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
    4,824 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
      182 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
      104 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
      208 ( 0.00%)              let variant = adt.variant_of_res(res);
        .                       for field in fields {
       28 ( 0.00%)                  let use_ctxt = field.ident.span;
      194 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
      280 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                       }
        .                   }
        .           
   21,591 ( 0.00%)          intravisit::walk_pat(self, pat);
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////////////////
        .           /// Type privacy visitor, checks types for privacy and reports violations.
        .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
        .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
        .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
        .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               fn item_is_accessible(&self, did: DefId) -> bool {
        .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
        .               }
        .           
        .               // Take node-id of an expression or pattern and check its type for privacy.
  461,342 ( 0.01%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
   65,906 ( 0.00%)          self.span = span;
   65,906 ( 0.00%)          let typeck_results = self.typeck_results();
        .                   let result: ControlFlow<()> = try {
  263,624 ( 0.00%)              self.visit(typeck_results.node_type(id))?;
  527,248 ( 0.01%)              self.visit(typeck_results.node_substs(id))?;
  593,154 ( 0.01%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
        .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
        .                       }
        .                   };
        .                   result.is_break()
  527,248 ( 0.01%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
    7,126 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
        .                   if is_error {
        .                       self.tcx
        .                           .sess
        .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
        .                           .span_label(self.span, &format!("private {}", kind))
        .                           .emit();
        .                   }
        .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      234 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
    1,290 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
      387 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
      774 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
      129 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    1,032 ( 0.00%)      }
        .           
        .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
      486 ( 0.00%)          match generic_arg {
      296 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
    3,787 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
    1,082 ( 0.00%)          self.span = hir_ty.span;
    1,623 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
        .                       // Types in bodies.
      111 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
        .                           return;
        .                       }
        .                   } else {
        .                       // Types in signatures.
        .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
        .                       // into a semantic type only once and the result should be cached somehow.
    1,512 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
        .                           return;
        .                       }
        .                   }
        .           
    1,623 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
    3,246 ( 0.00%)      }
        .           
        .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
        .                   self.span = inf.span;
        .                   if let Some(typeck_results) = self.maybe_typeck_results {
        .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
        .                           if self.visit(ty).is_break() {
        .                               return;
        .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
        .                           // We don't do anything for const infers here.
        .                       }
        .                   } else {
        .                       bug!("visit_infer without typeck_results");
        .                   }
        .                   intravisit::walk_inf(self, inf);
        .               }
        .           
      456 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
      171 ( 0.00%)          self.span = trait_ref.path.span;
       57 ( 0.00%)          if self.maybe_typeck_results.is_none() {
        .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
        .                       // The traits' privacy in bodies is already checked as a part of trait object types.
       57 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
       57 ( 0.00%)                  self.tcx,
        .                           trait_ref,
        .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
        .                           // just required by `ty::TraitRef`.
      171 ( 0.00%)                  self.tcx.types.never,
        .                       );
        .           
      513 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
      399 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
        .                               return;
        .                           }
        .                       }
        .           
      552 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
      180 ( 0.00%)                  let pred = poly_predicate.skip_binder();
        .                           let poly_pred_term = self.visit(pred.term);
      120 ( 0.00%)                  if poly_pred_term.is_break()
        .                               || self.visit_projection_ty(pred.projection_ty).is_break()
        .                           {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
        .                   intravisit::walk_trait_ref(self, trait_ref);
      456 ( 0.00%)      }
        .           
        .               // Check types of expressions
  570,465 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  570,465 ( 0.01%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
        .                       // Do not check nested expressions if the error already happened.
        .                       return;
        .                   }
  443,185 ( 0.01%)          match expr.kind {
      109 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
        .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
      567 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
        .                               return;
        .                           }
        .                       }
      101 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
        .                           // Method calls have to be checked specially.
      202 ( 0.00%)                  self.span = segment.ident.span;
      606 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
      303 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
        .                                   return;
        .                               }
        .                           } else {
        .                               self.tcx
        .                                   .sess
        .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .           
  190,155 ( 0.00%)          intravisit::walk_expr(self, expr);
  507,080 ( 0.01%)      }
        .           
        .               // Prohibit access to associated items with insufficient nominal visibility.
        .               //
        .               // Additionally, until better reachability analysis for macros 2.0 is available,
        .               // we prohibit access to private statics from other crates, this allows to give
        .               // more code internal visibility at link time. (Access to private functions
        .               // is already prohibited by type privacy for function types.)
   25,170 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
    5,034 ( 0.00%)          let def = match qpath {
    7,356 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
   11,064 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
        .                           _ => None,
        .                       },
       65 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .maybe_typeck_results
      585 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
        .                   };
        .                   let def = def.filter(|(kind, _)| {
    3,818 ( 0.00%)              matches!(
        .                           kind,
        .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
        .                       )
        .                   });
        .                   if let Some((kind, def_id)) = def {
        .                       let is_local_static =
      204 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
      114 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
        .                           let sess = self.tcx.sess;
        .                           let sm = sess.source_map();
        .                           let name = match qpath {
        .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
        .                                   sm.span_to_snippet(qpath.span()).ok()
        .                               }
        .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
        .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
        .                           };
        .                           sess.struct_span_err(span, &msg)
        .                               .span_label(span, &format!("private {}", kind))
        .                               .emit();
        .                           return;
        .                       }
        .                   }
        .           
   27,687 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
        .               }
        .           
        .               // Check types of patterns.
        .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
   15,254 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
        .                       // Do not check nested patterns if the error already happened.
        .                       return;
        .                   }
        .           
    8,049 ( 0.00%)          intravisit::walk_pat(self, pattern);
        .               }
        .           
      205 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
      123 ( 0.00%)          if let Some(init) = local.init {
      287 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
        .                           // Do not report duplicate errors for `let x = y`.
        .                           return;
        .                       }
        .                   }
        .           
        .                   intravisit::walk_local(self, local);
      164 ( 0.00%)      }
        .           
        .               // Check types in item interfaces.
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      202 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
        .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
      593 ( 0.00%)          intravisit::walk_item(self, item);
      202 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
      204 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  458,774 ( 0.01%)          self.tcx
        .               }
   53,445 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
   32,067 ( 0.00%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////////
        .           /// Obsolete visitors for checking for private items in public interfaces.
        .           /// These visitors are supposed to be kept in frozen state and produce an
        .           /// "old error node set". For backward compatibility the new visitor reports
        .           /// warnings instead of hard errors when the erroneous node is not in this old set.
        .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
        .               /// Whether we've recurred at all (i.e., if we're pointing at the
        .               /// first type on which `visit_ty` was called).
        .               at_outer_type: bool,
        .               /// Whether that first type is a public path.
        .               outer_type_is_public_path: bool,
        .           }
        .           
        .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
      138 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
      459 ( 0.00%)          let did = match path.res {
        .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
      588 ( 0.00%)              res => res.def_id(),
        .                   };
        .           
        .                   // A path can only be private if:
        .                   // it's in this crate...
       98 ( 0.00%)          if let Some(did) = did.as_local() {
        .                       // .. and it corresponds to a private type in the AST (this returns
        .                       // `None` for type parameters).
      400 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
      164 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
        .                           Some(_) | None => false,
        .                       }
        .                   } else {
        .                       false
        .                   }
      276 ( 0.00%)      }
        .           
        .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
        .                   // FIXME: this would preferably be using `exported_items`, but all
        .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
        .                   self.access_levels.is_public(trait_id)
        .               }
        .           
        .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
       38 ( 0.00%)          if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
       15 ( 0.00%)              if self.path_is_private_type(trait_ref.trait_ref.path) {
        .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
        .                       }
        .                   }
        .               }
        .           
        .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
      275 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
        .               }
        .           }
        .           
        .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
        .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
       72 ( 0.00%)          match generic_arg {
        .                       hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
      169 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
      132 ( 0.00%)              if self.inner.path_is_private_type(path) {
        .                           self.contains_private = true;
        .                           // Found what we're looking for, so let's stop working.
        .                           return;
        .                       }
        .                   }
        .                   if let hir::TyKind::Path(_) = ty.kind {
       24 ( 0.00%)              if self.at_outer_type {
       18 ( 0.00%)                  self.outer_type_is_public_path = true;
        .                       }
        .                   }
       50 ( 0.00%)          self.at_outer_type = false;
       62 ( 0.00%)          intravisit::walk_ty(self, ty)
       76 ( 0.00%)      }
        .           
        .               // Don't want to recurse into `[, .. expr]`.
        .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
        .           }
        .           
        .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      239 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    1,809 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      804 ( 0.00%)          match item.kind {
        .                       // Contents of a private mod can be re-exported, so we need
        .                       // to check internals.
        .                       hir::ItemKind::Mod(_) => {}
        .           
        .                       // An `extern {}` doesn't introduce a new privacy
        .                       // namespace (the contents have their own privacies).
        .                       hir::ItemKind::ForeignMod { .. } => {}
        .           
        2 ( 0.00%)              hir::ItemKind::Trait(.., bounds, _) => {
        5 ( 0.00%)                  if !self.trait_is_public(item.def_id) {
        .                               return;
        .                           }
        .           
        .                           for bound in bounds.iter() {
        .                               self.check_generic_bound(bound)
        .                           }
        .                       }
        .           
-- line 1447 ----------------------------------------
-- line 1454 ----------------------------------------
        .                           // `impl [... for] Private` is never visible.
        .                           let self_contains_private;
        .                           // `impl [... for] Public<...>`, but not `impl [... for]
        .                           // Vec<Public>` or `(Public,)`, etc.
        .                           let self_is_public_path;
        .           
        .                           // Check the properties of the `Self` type:
        .                           {
       88 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
        .                                   inner: self,
        .                                   contains_private: false,
        .                                   at_outer_type: true,
        .                                   outer_type_is_public_path: false,
        .                               };
       22 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
        .                               self_contains_private = visitor.contains_private;
        .                               self_is_public_path = visitor.outer_type_is_public_path;
        .                           }
        .           
        .                           // Miscellaneous info about the impl:
        .           
        .                           // `true` iff this is `impl Private for ...`.
        .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
        .                               true, // no trait counts as public trait
        .                               |tr| {
       60 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
        6 ( 0.00%)                              self.trait_is_public(def_id)
        .                                   } else {
        .                                       true // external traits must be public
        .                                   }
        .                               },
        .                           );
        .           
        .                           // `true` iff this is a trait impl or at least one method is public.
        .                           //
        .                           // `impl Public { $( fn ...() {} )* }` is not visible.
        .                           //
        .                           // This is required over just using the methods' privacy
        .                           // directly because we might have `impl<T: Foo<Private>> ...`,
        .                           // and we shouldn't warn about the generics if all the methods
        .                           // are private (because `T` won't be visible externally).
        .                           let trait_or_some_public_method = impl_.of_trait.is_some()
        2 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
       20 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
       20 ( 0.00%)                          match impl_item.kind {
        .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
        .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
        .                                       }
        .                                       hir::ImplItemKind::TyAlias(_) => false,
        .                                   }
        .                               });
        .           
       40 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
        .                               intravisit::walk_generics(self, &impl_.generics);
        .           
       34 ( 0.00%)                      match impl_.of_trait {
        .                                   None => {
        .                                       for impl_item_ref in impl_.items {
        .                                           // This is where we choose whether to walk down
        .                                           // further into the impl to check its items. We
        .                                           // should only walk into public items so that we
        .                                           // don't erroneously report errors for private
        .                                           // types in private items.
        .                                           let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
-- line 1517 ----------------------------------------
-- line 1538 ----------------------------------------
        .                                       //
        .                                       // Those in 1. can only occur if the trait is in
        .                                       // this crate and will've been warned about on the
        .                                       // trait definition (there's no need to warn twice
        .                                       // so we don't check the methods).
        .                                       //
        .                                       // Those in 2. are warned via walk_generics and this
        .                                       // call here.
       51 ( 0.00%)                              intravisit::walk_path(self, tr.path);
        .           
        .                                       // Those in 3. are warned with this call.
       17 ( 0.00%)                              for impl_item_ref in impl_.items {
      155 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
      171 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
        .                                               self.visit_ty(ty);
        .                                           }
        .                                       }
        .                                   }
        .                               }
       15 ( 0.00%)                  } else if impl_.of_trait.is_none() && self_is_public_path {
        .                               // `impl Public<Private> { ... }`. Any public static
        .                               // methods will be visible as `Public::foo`.
        .                               let mut found_pub_static = false;
        2 ( 0.00%)                      for impl_item_ref in impl_.items {
       20 ( 0.00%)                          if self.access_levels.is_reachable(impl_item_ref.id.def_id)
       10 ( 0.00%)                              || self.tcx.visibility(impl_item_ref.id.def_id)
        .                                           == ty::Visibility::Public
        .                                   {
        .                                       let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
        .                                       match impl_item_ref.kind {
        .                                           AssocItemKind::Const => {
        .                                               found_pub_static = true;
        .                                               intravisit::walk_impl_item(self, impl_item);
        .                                           }
-- line 1571 ----------------------------------------
-- line 1572 ----------------------------------------
        .                                           AssocItemKind::Fn { has_self: false } => {
        .                                               found_pub_static = true;
        .                                               intravisit::walk_impl_item(self, impl_item);
        .                                           }
        .                                           _ => {}
        .                                       }
        .                                   }
        .                               }
        4 ( 0.00%)                      if found_pub_static {
        .                                   intravisit::walk_generics(self, &impl_.generics)
        .                               }
        .                           }
        .                           return;
        .                       }
        .           
        .                       // `type ... = ...;` can contain private types, because
        .                       // we're introducing a new name.
        .                       hir::ItemKind::TyAlias(..) => return,
        .           
        .                       // Not at all public, so we don't care.
      979 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
        .                           return;
        .                       }
        .           
        .                       _ => {}
        .                   }
        .           
        .                   // We've carefully constructed it so that if we're here, then
        .                   // any `visit_ty`'s will be called on things that are in
        .                   // public signatures, i.e., things that we're interested in for
        .                   // this visitor.
      800 ( 0.00%)          intravisit::walk_item(self, item);
      968 ( 0.00%)      }
        .           
      344 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   for param in generics.params {
       19 ( 0.00%)              for bound in param.bounds {
        .                           self.check_generic_bound(bound);
        .                       }
        .                   }
       43 ( 0.00%)          for predicate in generics.where_clause.predicates {
        6 ( 0.00%)              match predicate {
        .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
        2 ( 0.00%)                      for bound in bound_pred.bounds.iter() {
        .                                   self.check_generic_bound(bound)
        .                               }
        .                           }
        .                           hir::WherePredicate::RegionPredicate(_) => {}
        .                           hir::WherePredicate::EqPredicate(eq_pred) => {
        .                               self.visit_ty(eq_pred.rhs_ty);
        .                           }
        .                       }
        .                   }
      344 ( 0.00%)      }
        .           
        .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
        .                   if self.access_levels.is_reachable(item.def_id) {
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
      501 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
      388 ( 0.00%)              if self.path_is_private_type(path) {
        .                           self.old_error_set.insert(t.hir_id);
        .                       }
        .                   }
      723 ( 0.00%)          intravisit::walk_ty(self, t)
        .               }
        .           
       24 ( 0.00%)      fn visit_variant(
        .                   &mut self,
        .                   v: &'tcx hir::Variant<'tcx>,
        .                   g: &'tcx hir::Generics<'tcx>,
        .                   item_id: hir::HirId,
        .               ) {
       30 ( 0.00%)          if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
        3 ( 0.00%)              self.in_variant = true;
        .                       intravisit::walk_variant(self, v, g, item_id);
        3 ( 0.00%)              self.in_variant = false;
        .                   }
       21 ( 0.00%)      }
        .           
       70 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
       84 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
        .                       intravisit::walk_field_def(self, s);
        .                   }
       56 ( 0.00%)      }
        .           
        .               // We don't need to introspect into these at all: an
        .               // expression/block context can't possibly contain exported things.
        .               // (Making them no-ops stops us from traversing the whole AST without
        .               // having to be super careful about our `walk_...` calls above.)
        .               fn visit_block(&mut self, _: &'tcx hir::Block<'tcx>) {}
        .               fn visit_expr(&mut self, _: &'tcx hir::Expr<'tcx>) {}
        .           }
-- line 1667 ----------------------------------------
-- line 1679 ----------------------------------------
        .               /// The visitor checks that each component type is at least this visible.
        .               required_visibility: ty::Visibility,
        .               has_pub_restricted: bool,
        .               has_old_errors: bool,
        .               in_assoc_ty: bool,
        .           }
        .           
        .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
      966 ( 0.00%)      fn generics(&mut self) -> &mut Self {
      414 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
      246 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
       33 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       33 ( 0.00%)                      if has_default {
        .                                   self.visit(self.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           // FIXME(generic_const_exprs): May want to look inside const here
        .                           GenericParamDefKind::Const { .. } => {
        .                               self.visit(self.tcx.type_of(param.def_id));
        .                           }
        .                       }
        .                   }
        .                   self
    1,104 ( 0.00%)      }
        .           
      690 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
        .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
        .                   // because we don't want to report privacy errors due to where
        .                   // clauses that the compiler inferred. We only want to
        .                   // consider the ones that the user wrote. This is important
        .                   // for the inferred outlives rules; see
        .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
      276 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
        .                   self
      828 ( 0.00%)      }
        .           
        .               fn bounds(&mut self) -> &mut Self {
        .                   self.visit_predicates(ty::GenericPredicates {
        .                       parent: None,
        .                       predicates: self.tcx.explicit_item_bounds(self.item_def_id),
        .                   });
        .                   self
        .               }
        .           
      730 ( 0.00%)      fn ty(&mut self) -> &mut Self {
      292 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
        .                   self
      730 ( 0.00%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
    1,428 ( 0.00%)          if self.leaks_private_dep(def_id) {
        .                       self.tcx.struct_span_lint_hir(
        .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
        .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
        .                           self.tcx.def_span(self.item_def_id.to_def_id()),
        .                           |lint| {
        .                               lint.build(&format!(
        .                                   "{} `{}` from private dependency '{}' in public \
        .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
        .                                   descr,
        .                                   self.tcx.crate_name(def_id.krate)
        .                               ))
        .                               .emit()
        .                           },
        .                       );
        .                   }
        .           
      671 ( 0.00%)          let hir_id = match def_id.as_local() {
      183 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
        .                       None => return false,
        .                   };
        .           
        .                   let vis = self.tcx.visibility(def_id);
      314 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
        .                       let vis_descr = match vis {
        .                           ty::Visibility::Public => "public",
        .                           ty::Visibility::Invisible => "private",
        .                           ty::Visibility::Restricted(vis_def_id) => {
        .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
        .                                   "private"
        .                               } else if vis_def_id.is_top_level_module() {
        .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
        .                   false
        .               }
        .           
        .               /// An item is 'leaked' from a private dependency if all
        .               /// of the following are true:
        .               /// 1. It's contained within a public type
        .               /// 2. It comes from a private crate
        .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
      915 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
        .           
        .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
        .                   ret
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
      868 ( 0.00%)          self.tcx
        .               }
    4,880 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
    2,745 ( 0.00%)      }
        .           }
        .           
        .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .               old_error_set_ancestry: LocalDefIdSet,
        .           }
        .           
        .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               fn check(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   required_visibility: ty::Visibility,
        .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
    1,312 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
       64 ( 0.00%)              tcx: self.tcx,
        .                       item_def_id: def_id,
        .                       required_visibility,
      176 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
        .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
        .                       in_assoc_ty: false,
        .                   }
        .               }
        .           
      585 ( 0.00%)      fn check_assoc_item(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   assoc_item_kind: AssocItemKind,
        .                   defaultness: hir::Defaultness,
        .                   vis: ty::Visibility,
        .               ) {
        .                   let mut check = self.check(def_id, vis);
        .           
       90 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
        .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
        8 ( 0.00%)              AssocItemKind::Type => (defaultness.has_value(), true),
        .                   };
       90 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
      180 ( 0.00%)          check.generics().predicates();
        8 ( 0.00%)          if check_ty {
       45 ( 0.00%)              check.ty();
        .                   }
      360 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
       41 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    1,818 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      202 ( 0.00%)          let tcx = self.tcx;
      202 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
        .           
    1,010 ( 0.00%)          match item.kind {
        .                       // Crates are always public.
        .                       hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Checked in resolve.
        .                       hir::ItemKind::Use(..) => {}
        .                       // No subitems.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
        .                       // Subitems of these items have inherited publicity.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
      492 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
        .                       }
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // `ty()` for opaque types is the underlying type,
        .                           // it's not a part of interface, so we skip it.
        .                           self.check(item.def_id, item_visibility).generics().bounds();
        .                       }
        4 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        4 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
        .                           for trait_item_ref in trait_item_refs {
       36 ( 0.00%)                      self.check_assoc_item(
        6 ( 0.00%)                          trait_item_ref.id.def_id,
        .                                   trait_item_ref.kind,
        .                                   trait_item_ref.defaultness,
        .                                   item_visibility,
        .                               );
        .           
       17 ( 0.00%)                      if let AssocItemKind::Type = trait_item_ref.kind {
        .                                   self.check(trait_item_ref.id.def_id, item_visibility).bounds();
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           self.check(item.def_id, item_visibility).generics().predicates();
        .                       }
        .                       hir::ItemKind::Enum(ref def, _) => {
       12 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
        3 ( 0.00%)                  for variant in def.variants {
        8 ( 0.00%)                      for field in variant.data.fields() {
       24 ( 0.00%)                          self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility).ty();
        .                               }
        .                           }
        .                       }
        .                       // Subitems of foreign modules have their own publicity.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let vis = tcx.visibility(foreign_item.id.def_id);
        .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Subitems of structs and unions have their own publicity.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
       20 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
       15 ( 0.00%)                  for field in struct_def.fields() {
      102 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
        .                               let field_visibility = tcx.visibility(def_id);
       51 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
        .                           }
        .                       }
        .                       // An inherent impl is public when its type is public
        .                       // Subitems of inherent impls have their own publicity.
        .                       // A trait impl is public when both its type and its trait are public
        .                       // Subitems of trait impls have inherited publicity.
        .                       hir::ItemKind::Impl(ref impl_) => {
       88 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
        .                           // check that private components do not appear in the generics or predicates of inherent impls
        .                           // this check is intentionally NOT performed for impls of traits, per #90586
       44 ( 0.00%)                  if impl_.of_trait.is_none() {
       10 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
        .                           }
       22 ( 0.00%)                  for impl_item_ref in impl_.items {
       38 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
        5 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
        .                               } else {
        .                                   impl_vis
        .                               };
      229 ( 0.00%)                      self.check_assoc_item(
       39 ( 0.00%)                          impl_item_ref.id.def_id,
        .                                   impl_item_ref.kind,
        .                                   impl_item_ref.defaultness,
        .                                   impl_item_vis,
        .                               );
        .                           }
        .                       }
        .                   }
    1,616 ( 0.00%)      }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        8 ( 0.00%)      *providers = Providers {
        .                   visibility,
        .                   privacy_access_levels,
        .                   check_private_in_public,
        .                   check_mod_privacy,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
    2,628 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
      292 ( 0.00%)      let def_id = def_id.expect_local();
        .               match tcx.resolutions(()).visibilities.get(&def_id) {
      424 ( 0.00%)          Some(vis) => *vis,
        .                   None => {
        .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
      947 ( 0.00%)              match tcx.hir().get(hir_id) {
        .                           // Unique types created for closures participate in type privacy checking.
        .                           // They have visibilities inherited from the module they are defined in.
        .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
       54 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
        .                           }
        .                           // - AST lowering may clone `use` items and the clones don't
        .                           //   get their entries in the resolver's visibility table.
        .                           // - AST lowering also creates opaque type items with inherited visibilies.
        .                           //   Visibility on them should have no effect, but to avoid the visibility
        .                           //   query failing on some items, we provide it for opaque types as well.
        .                           Node::Item(hir::Item {
       37 ( 0.00%)                      vis,
        .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
        .                               ..
      222 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
        .                           // Visibilities of trait impl items are inherited from their traits
        .                           // and are not filled in resolve.
        .                           Node::ImplItem(impl_item) => {
      442 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
        .                                   Node::Item(hir::Item {
        .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
        .                                       ..
       34 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
        .                                       || {
        .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
        .                                           ty::Visibility::Public
        .                                       },
        .                                       |def_id| tcx.visibility(def_id),
        .                                   ),
        .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
        .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
        .                           _ => span_bug!(
        .                               tcx.def_span(def_id),
        .                               "visibility table unexpectedly missing a def-id: {:?}",
        .                               def_id,
        .                           ),
        .                       }
        .                   }
        .               }
    2,336 ( 0.00%)  }
        .           
      112 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
        .               // Check privacy of names not checked in previous compilation stages.
        .               let mut visitor =
       56 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
      126 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
        .           
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
        .           
        .               // Check privacy of explicitly written types and traits as well as
        .               // inferred types of expressions and patterns.
        .               let mut visitor =
       84 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
      112 ( 0.00%)  }
        .           
        7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
        .               // Build up a set of all exported items in the AST. This is a set of all
        .               // items which are reachable from external crates based on visibility.
        9 ( 0.00%)      let mut visitor = EmbargoVisitor {
        .                   tcx,
        .                   access_levels: tcx.resolutions(()).access_levels.clone(),
        .                   macro_reachable: Default::default(),
        .                   prev_level: Some(AccessLevel::Public),
        .                   changed: false,
        .               };
        .           
        .               loop {
        .                   tcx.hir().walk_toplevel_module(&mut visitor);
        4 ( 0.00%)          if visitor.changed {
        3 ( 0.00%)              visitor.changed = false;
        .                   } else {
        .                       break;
        .                   }
        .               }
        .           
        1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
        9 ( 0.00%)  }
        .           
        8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
        .               let access_levels = tcx.privacy_access_levels(());
        .           
        9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
        .                   tcx,
        .                   access_levels,
        .                   in_variant: false,
        .                   old_error_set: Default::default(),
        .               };
        .               tcx.hir().walk_toplevel_module(&mut visitor);
        .           
        .               let has_pub_restricted = {
        5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
        .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
        1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
        .               };
        .           
        .               let mut old_error_set_ancestry = HirIdSet::default();
        9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
        .                   loop {
        .                       if !old_error_set_ancestry.insert(id) {
        .                           break;
        .                       }
        .                       let parent = tcx.hir().get_parent_node(id);
        .                       if parent == id {
        .                           break;
        .                       }
        .                       id = parent;
        .                   }
        .               }
        .           
        .               // Check for private types and traits in public interfaces.
        8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
        .                   tcx,
        .                   has_pub_restricted,
        .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
        .                   // so we can filter away all non-definition IDs at this point.
        .                   old_error_set_ancestry: old_error_set_ancestry
        .                       .into_iter()
        .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
        .                       .collect(),
        .               };
        6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
        8 ( 0.00%)  }

  551,530 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 126 ----------------------------------------
        .                           self.extend(remainder.iter().cloned());
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for VecDeque<T, A> {
    1,379 ( 0.00%)      fn drop(&mut self) {
        .                   /// Runs the destructor for all items in the slice when it gets dropped (normally or
        .                   /// during unwinding).
        .                   struct Dropper<'a, T>(&'a mut [T]);
        .           
        .                   impl<'a, T> Drop for Dropper<'a, T> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               ptr::drop_in_place(self.0);
-- line 142 ----------------------------------------
-- line 146 ----------------------------------------
        .           
        .                   let (front, back) = self.as_mut_slices();
        .                   unsafe {
        .                       let _back_dropper = Dropper(back);
        .                       // use drop for [T]
        .                       ptr::drop_in_place(front);
        .                   }
        .                   // RawVec handles deallocation
    1,576 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> Default for VecDeque<T> {
        .               /// Creates an empty `VecDeque<T>`.
        .               #[inline]
        .               fn default() -> VecDeque<T> {
        .                   VecDeque::new()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> VecDeque<T, A> {
        .               /// Marginally more convenient
        .               #[inline]
        .               fn ptr(&self) -> *mut T {
  604,559 ( 0.01%)          self.buf.ptr()
        .               }
        .           
        .               /// Marginally more convenient
        .               #[inline]
        .               fn cap(&self) -> usize {
        .                   if mem::size_of::<T>() == 0 {
        .                       // For zero sized types, we are always at maximum capacity
        .                       MAXIMUM_ZST_CAPACITY
        .                   } else {
  651,813 ( 0.01%)              self.buf.capacity()
        .                   }
        .               }
        .           
        .               /// Turn ptr into a slice
        .               #[inline]
        .               unsafe fn buffer_as_slice(&self) -> &[T] {
        .                   unsafe { slice::from_raw_parts(self.ptr(), self.cap()) }
        .               }
-- line 188 ----------------------------------------
-- line 191 ----------------------------------------
        .               #[inline]
        .               unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] {
        .                   unsafe { slice::from_raw_parts_mut(self.ptr(), self.cap()) }
        .               }
        .           
        .               /// Moves an element out of the buffer
        .               #[inline]
        .               unsafe fn buffer_read(&mut self, off: usize) -> T {
  136,981 ( 0.00%)          unsafe { ptr::read(self.ptr().add(off)) }
        .               }
        .           
        .               /// Writes an element into the buffer, moving it.
        .               #[inline]
        .               unsafe fn buffer_write(&mut self, off: usize, value: T) {
        .                   unsafe {
        .                       ptr::write(self.ptr().add(off), value);
        .                   }
        .               }
        .           
        .               /// Returns `true` if the buffer is at full capacity.
        .               #[inline]
        .               fn is_full(&self) -> bool {
1,618,056 ( 0.03%)          self.cap() - self.len() == 1
        .               }
        .           
        .               /// Returns the index in the underlying buffer for a given logical element
        .               /// index.
        .               #[inline]
        .               fn wrap_index(&self, idx: usize) -> usize {
        .                   wrap_index(idx, self.cap())
        .               }
-- line 221 ----------------------------------------
-- line 452 ----------------------------------------
        .                   //   [o o . o o o o o ]
        .                   //          T             H
        .                   // B [. . . o o o o o o o . . . . . . ]
        .                   //              H T
        .                   //   [o o o o o . o o ]
        .                   //              H                 T
        .                   // C [o o o o o . . . . . . . . . o o ]
        .           
      352 ( 0.00%)          if self.tail <= self.head {
        .                       // A
        .                       // Nop
       88 ( 0.00%)          } else if self.head < old_capacity - self.tail {
        .                       // B
        .                       unsafe {
        8 ( 0.00%)                  self.copy_nonoverlapping(old_capacity, 0, self.head);
        .                       }
       51 ( 0.00%)              self.head += old_capacity;
        .                       debug_assert!(self.head > self.tail);
        .                   } else {
        .                       // C
        6 ( 0.00%)              let new_tail = new_capacity - (old_capacity - self.tail);
        .                       unsafe {
        .                           self.copy_nonoverlapping(new_tail, self.tail, old_capacity - self.tail);
        .                       }
        3 ( 0.00%)              self.tail = new_tail;
        .                       debug_assert!(self.head < self.tail);
        .                   }
        .                   debug_assert!(self.head < self.cap());
        .                   debug_assert!(self.tail < self.cap());
        .                   debug_assert!(self.cap().count_ones() == 1);
        .               }
        .           }
        .           
-- line 484 ----------------------------------------
-- line 507 ----------------------------------------
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub fn with_capacity(capacity: usize) -> VecDeque<T> {
    1,290 ( 0.00%)          Self::with_capacity_in(capacity, Global)
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> VecDeque<T, A> {
        .               /// Creates an empty `VecDeque`.
        .               ///
        .               /// # Examples
        .               ///
-- line 523 ----------------------------------------
-- line 524 ----------------------------------------
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::new();
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn new_in(alloc: A) -> VecDeque<T, A> {
      212 ( 0.00%)          VecDeque::with_capacity_in(INITIAL_CAPACITY, alloc)
        .               }
        .           
        .               /// Creates an empty `VecDeque` with space for at least `capacity` elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);
        .               /// ```
        .               #[unstable(feature = "allocator_api", issue = "32838")]
    3,004 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {
    2,360 ( 0.00%)          assert!(capacity < 1_usize << usize::BITS - 1, "capacity overflow");
        .                   // +1 since the ringbuffer always leaves one space empty
        .                   let cap = cmp::max(capacity + 1, MINIMUM_CAPACITY + 1).next_power_of_two();
        .           
    9,770 ( 0.00%)          VecDeque { tail: 0, head: 0, buf: RawVec::with_capacity_in(cap, alloc) }
    4,506 ( 0.00%)      }
        .           
        .               /// Provides a reference to the element at the given index.
        .               ///
        .               /// Element at index 0 is the front of the queue.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 559 ----------------------------------------
-- line 562 ----------------------------------------
        .               /// let mut buf = VecDeque::new();
        .               /// buf.push_back(3);
        .               /// buf.push_back(4);
        .               /// buf.push_back(5);
        .               /// assert_eq!(buf.get(1), Some(&4));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get(&self, index: usize) -> Option<&T> {
2,172,135 ( 0.04%)          if index < self.len() {
        .                       let idx = self.wrap_add(self.tail, index);
        .                       unsafe { Some(&*self.ptr().add(idx)) }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Provides a mutable reference to the element at the given index.
-- line 578 ----------------------------------------
-- line 591 ----------------------------------------
        .               /// if let Some(elem) = buf.get_mut(1) {
        .               ///     *elem = 7;
        .               /// }
        .               ///
        .               /// assert_eq!(buf[1], 7);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get_mut(&mut self, index: usize) -> Option<&mut T> {
1,211,830 ( 0.02%)          if index < self.len() {
        .                       let idx = self.wrap_add(self.tail, index);
        .                       unsafe { Some(&mut *self.ptr().add(idx)) }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Swaps elements at indices `i` and `j`.
-- line 607 ----------------------------------------
-- line 692 ----------------------------------------
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let mut buf: VecDeque<i32> = [1].into();
        .               /// buf.reserve(10);
        .               /// assert!(buf.capacity() >= 11);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        3 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
        .                   let old_cap = self.cap();
       10 ( 0.00%)          let used_cap = self.len() + 1;
        .                   let new_cap = used_cap
        .                       .checked_add(additional)
        .                       .and_then(|needed_cap| needed_cap.checked_next_power_of_two())
        .                       .expect("capacity overflow");
        .           
       18 ( 0.00%)          if new_cap > old_cap {
       28 ( 0.00%)              self.buf.reserve_exact(used_cap, new_cap - used_cap);
        .                       unsafe {
        .                           self.handle_capacity_increase(old_cap);
        .                       }
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Tries to reserve the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `VecDeque<T>`. After calling `try_reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
        .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 722 ----------------------------------------
-- line 924 ----------------------------------------
        .               /// buf.push_back(5);
        .               /// buf.push_back(10);
        .               /// buf.push_back(15);
        .               /// assert_eq!(buf, [5, 10, 15]);
        .               /// buf.truncate(1);
        .               /// assert_eq!(buf, [5]);
        .               /// ```
        .               #[stable(feature = "deque_extras", since = "1.16.0")]
      272 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   /// Runs the destructor for all items in the slice when it gets dropped (normally or
        .                   /// during unwinding).
        .                   struct Dropper<'a, T>(&'a mut [T]);
        .           
        .                   impl<'a, T> Drop for Dropper<'a, T> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               ptr::drop_in_place(self.0);
-- line 940 ----------------------------------------
-- line 945 ----------------------------------------
        .                   // Safe because:
        .                   //
        .                   // * Any slice passed to `drop_in_place` is valid; the second case has
        .                   //   `len <= front.len()` and returning on `len > self.len()` ensures
        .                   //   `begin <= back.len()` in the first case
        .                   // * The head of the VecDeque is moved before calling `drop_in_place`,
        .                   //   so no value is dropped twice if `drop_in_place` panics
        .                   unsafe {
       68 ( 0.00%)              if len > self.len() {
        .                           return;
        .                       }
        .                       let num_dropped = self.len() - len;
        .                       let (front, back) = self.as_mut_slices();
       68 ( 0.00%)              if len > front.len() {
        .                           let begin = len - front.len();
        .                           let drop_back = back.get_unchecked_mut(begin..) as *mut _;
        .                           self.head = self.wrap_sub(self.head, num_dropped);
        .                           ptr::drop_in_place(drop_back);
        .                       } else {
        .                           let drop_back = back as *mut _;
        .                           let drop_front = front.get_unchecked_mut(len..) as *mut _;
       34 ( 0.00%)                  self.head = self.wrap_sub(self.head, num_dropped);
        .           
        .                           // Make sure the second half is dropped even when a destructor
        .                           // in the first one panics.
        .                           let _back_dropper = Dropper(&mut *drop_back);
        .                           ptr::drop_in_place(drop_front);
        .                       }
        .                   }
      272 ( 0.00%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
        .               pub fn allocator(&self) -> &A {
        .                   self.buf.allocator()
        .               }
        .           
-- line 982 ----------------------------------------
-- line 1085 ----------------------------------------
        .               /// vector.as_mut_slices().0[0] = 42;
        .               /// vector.as_mut_slices().1[0] = 24;
        .               /// assert_eq!(vector.as_slices(), (&[42, 10][..], &[24, 1][..]));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "deque_extras_15", since = "1.5.0")]
        .               pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {
        .                   unsafe {
    1,468 ( 0.00%)              let head = self.head;
    1,468 ( 0.00%)              let tail = self.tail;
    1,811 ( 0.00%)              let buf = self.buffer_as_mut_slice();
        .                       RingSlices::ring_slices(buf, head, tail)
        .                   }
        .               }
        .           
        .               /// Returns the number of elements in the `VecDeque`.
        .               ///
        .               /// # Examples
        .               ///
-- line 1103 ----------------------------------------
-- line 1106 ----------------------------------------
        .               ///
        .               /// let mut v = VecDeque::new();
        .               /// assert_eq!(v.len(), 0);
        .               /// v.push_back(1);
        .               /// assert_eq!(v.len(), 1);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn len(&self) -> usize {
  996,732 ( 0.02%)          count(self.tail, self.head, self.cap())
        .               }
        .           
        .               /// Returns `true` if the `VecDeque` is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
-- line 1122 ----------------------------------------
-- line 1123 ----------------------------------------
        .               ///
        .               /// let mut v = VecDeque::new();
        .               /// assert!(v.is_empty());
        .               /// v.push_front(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
2,066,655 ( 0.04%)          self.tail == self.head
        .               }
        .           
        .               fn range_tail_head<R>(&self, range: R) -> (usize, usize)
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   let Range { start, end } = slice::range(range, ..self.len());
        .                   let tail = self.wrap_add(self.tail, start);
-- line 1139 ----------------------------------------
-- line 1307 ----------------------------------------
        .               /// let mut v = VecDeque::new();
        .               /// v.push_back(1);
        .               /// v.clear();
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn clear(&mut self) {
       68 ( 0.00%)          self.truncate(0);
        .               }
        .           
        .               /// Returns `true` if the `VecDeque` contains an element equal to the
        .               /// given value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1323 ----------------------------------------
-- line 1396 ----------------------------------------
        .               /// assert_eq!(d.back(), None);
        .               ///
        .               /// d.push_back(1);
        .               /// d.push_back(2);
        .               /// assert_eq!(d.back(), Some(&2));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn back(&self) -> Option<&T> {
   35,874 ( 0.00%)          self.get(self.len().wrapping_sub(1))
        .               }
        .           
        .               /// Provides a mutable reference to the back element, or `None` if the
        .               /// `VecDeque` is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1412 ----------------------------------------
-- line 1441 ----------------------------------------
        .               /// d.push_back(2);
        .               ///
        .               /// assert_eq!(d.pop_front(), Some(1));
        .               /// assert_eq!(d.pop_front(), Some(2));
        .               /// assert_eq!(d.pop_front(), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop_front(&mut self) -> Option<T> {
  407,622 ( 0.01%)          if self.is_empty() {
        .                       None
        .                   } else {
        .                       let tail = self.tail;
  701,379 ( 0.01%)              self.tail = self.wrap_add(self.tail, 1);
   47,170 ( 0.00%)              unsafe { Some(self.buffer_read(tail)) }
        .                   }
        .               }
        .           
        .               /// Removes the last element from the `VecDeque` and returns it, or `None` if
        .               /// it is empty.
        .               ///
        .               /// # Examples
        .               ///
-- line 1462 ----------------------------------------
-- line 1466 ----------------------------------------
        .               /// let mut buf = VecDeque::new();
        .               /// assert_eq!(buf.pop_back(), None);
        .               /// buf.push_back(1);
        .               /// buf.push_back(3);
        .               /// assert_eq!(buf.pop_back(), Some(3));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop_back(&mut self) -> Option<T> {
  188,164 ( 0.00%)          if self.is_empty() {
        .                       None
        .                   } else {
  298,016 ( 0.01%)              self.head = self.wrap_sub(self.head, 1);
        .                       let head = self.head;
        .                       unsafe { Some(self.buffer_read(head)) }
        .                   }
        .               }
        .           
        .               /// Prepends an element to the `VecDeque`.
        .               ///
        .               /// # Examples
-- line 1485 ----------------------------------------
-- line 1513 ----------------------------------------
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let mut buf = VecDeque::new();
        .               /// buf.push_back(1);
        .               /// buf.push_back(3);
        .               /// assert_eq!(3, *buf.back().unwrap());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
1,199,304 ( 0.02%)      pub fn push_back(&mut self, value: T) {
1,618,048 ( 0.03%)          if self.is_full() {
      151 ( 0.00%)              self.grow();
        .                   }
        .           
       79 ( 0.00%)          let head = self.head;
  539,427 ( 0.01%)          self.head = self.wrap_add(self.head, 1);
  239,522 ( 0.00%)          unsafe { self.buffer_write(head, value) }
1,199,304 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn is_contiguous(&self) -> bool {
        .                   // FIXME: Should we consider `head == 0` to mean
        .                   // that `self` is contiguous?
        .                   self.tail <= self.head
        .               }
        .           
-- line 1537 ----------------------------------------
-- line 2209 ----------------------------------------
        .                       self.truncate(idx);
        .                   }
        .               }
        .           
        .               // Double the buffer size. This method is inline(never), so we expect it to only
        .               // be called in cold paths.
        .               // This may panic or abort
        .               #[inline(never)]
      474 ( 0.00%)      fn grow(&mut self) {
        .                   // Extend or possibly remove this assertion when valid use-cases for growing the
        .                   // buffer without it being full emerge
        .                   debug_assert!(self.is_full());
        .                   let old_cap = self.cap();
      237 ( 0.00%)          self.buf.reserve_exact(old_cap, old_cap);
      395 ( 0.00%)          assert!(self.cap() == old_cap * 2);
        .                   unsafe {
        .                       self.handle_capacity_increase(old_cap);
        .                   }
        .                   debug_assert!(!self.is_full());
      474 ( 0.00%)      }
        .           
        .               /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,
        .               /// either by removing excess elements from the back or by appending
        .               /// elements generated by calling `generator` to the back.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 2236 ----------------------------------------
-- line 2751 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Returns the index in the underlying buffer for a given logical element index.
        .           #[inline]
        .           fn wrap_index(index: usize, size: usize) -> usize {
        .               // size is always a power of 2
        .               debug_assert!(size.is_power_of_two());
2,859,807 ( 0.05%)      index & (size - 1)
        .           }
        .           
        .           /// Calculate the number of elements left to be read in the buffer
        .           #[inline]
        .           fn count(tail: usize, head: usize, size: usize) -> usize {
        .               // size is always a power of 2
4,457,765 ( 0.08%)      (head.wrapping_sub(tail)) & (size - 1)
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: PartialEq, A: Allocator> PartialEq for VecDeque<T, A> {
        .               fn eq(&self, other: &Self) -> bool {
        .                   if self.len() != other.len() {
        .                       return false;
        .                   }
-- line 2774 ----------------------------------------
-- line 2902 ----------------------------------------
        .           
        .               fn into_iter(self) -> IterMut<'a, T> {
        .                   self.iter_mut()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for VecDeque<T, A> {
      784 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iter.into_iter() {
        .                   //          self.push_back(item);
        .                   //      }
        .                   let mut iter = iter.into_iter();
        .                   while let Some(element) = iter.next() {
    4,130 ( 0.00%)              if self.len() == self.capacity() {
        .                           let (lower, _) = iter.size_hint();
        2 ( 0.00%)                  self.reserve(lower.saturating_add(1));
        .                       }
        .           
        1 ( 0.00%)              let head = self.head;
      852 ( 0.00%)              self.head = self.wrap_add(self.head, 1);
        .                       unsafe {
      104 ( 0.00%)                  self.buffer_write(head, element);
        .                       }
        .                   }
      896 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, elem: T) {
        .                   self.push_back(elem);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2937 ----------------------------------------

  624,227 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/tagged_ptr/copy.rs
--------------------------------------------------------------------------------
Ir                  

-- line 59 ----------------------------------------
         .                   // Trigger assert!
         .                   let () = Self::ASSERTION;
         .                   let packed_tag = tag.into_usize() << Self::TAG_BIT_SHIFT;
         .           
         .                   Self {
         .                       // SAFETY: We know that the pointer is non-null, as it must be
         .                       // dereferenceable per `Pointer` safety contract.
         .                       packed: unsafe {
10,580,449 ( 0.19%)                  NonZeroUsize::new_unchecked((P::into_usize(pointer) >> T::BITS) | packed_tag)
         .                       },
         .                       data: PhantomData,
         .                   }
         .               }
         .           
         .               pub(super) fn pointer_raw(&self) -> usize {
 2,093,141 ( 0.04%)          self.packed.get() << T::BITS
         .               }
         .               pub fn pointer(self) -> P
         .               where
         .                   P: Copy,
         .               {
         .                   // SAFETY: pointer_raw returns the original pointer
         .                   //
         .                   // Note that this isn't going to double-drop or anything because we have
-- line 82 ----------------------------------------
-- line 91 ----------------------------------------
         .               where
         .                   P: std::ops::DerefMut,
         .               {
         .                   // SAFETY: pointer_raw returns the original pointer
         .                   unsafe { std::mem::transmute_copy(&self.pointer_raw()) }
         .               }
         .               #[inline]
         .               pub fn tag(&self) -> T {
32,822,298 ( 0.59%)          unsafe { T::from_usize(self.packed.get() >> Self::TAG_BIT_SHIFT) }
         .               }
         .               #[inline]
         .               pub fn set_tag(&mut self, tag: T) {
         .                   let mut packed = self.packed.get();
         .                   let new_tag = T::into_usize(tag) << Self::TAG_BIT_SHIFT;
         .                   let tag_mask = (1 << T::BITS) - 1;
 2,366,167 ( 0.04%)          packed &= !(tag_mask << Self::TAG_BIT_SHIFT);
 2,367,256 ( 0.04%)          packed |= new_tag;
         .                   self.packed = unsafe { NonZeroUsize::new_unchecked(packed) };
         .               }
         .           }
         .           
         .           impl<P, T, const COMPARE_PACKED: bool> std::ops::Deref for CopyTaggedPtr<P, T, COMPARE_PACKED>
         .           where
         .               P: Pointer,
         .               T: Tag,
-- line 115 ----------------------------------------
-- line 145 ----------------------------------------
         .           }
         .           
         .           impl<P, T> PartialEq for CopyTaggedPtr<P, T, true>
         .           where
         .               P: Pointer,
         .               T: Tag,
         .           {
         .               fn eq(&self, other: &Self) -> bool {
    31,717 ( 0.00%)          self.packed == other.packed
         .               }
         .           }
         .           
         .           impl<P, T> Eq for CopyTaggedPtr<P, T, true>
         .           where
         .               P: Pointer,
         .               T: Tag,
         .           {
-- line 161 ----------------------------------------

 2,596,738 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/tagged_ptr/copy.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    1,060 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
      266 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
   20,910 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
    3,421 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
      219 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
      889 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
      167 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
      516 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
      384 ( 0.00%)              self.current_id = parent_id;
    1,391 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
      508 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
    1,143 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
   10,296 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    3,432 ( 0.00%)          if self.current_id.local_id.index() != 0 {
      683 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
    2,732 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
      461 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
       28 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
      894 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
      894 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    9,152 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      224 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       32 ( 0.00%)          self.tcx.hir_crate(())
      256 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
   24,216 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
    6,252 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
   18,162 ( 0.00%)      }
        .           
        .               #[inline]
   16,672 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
    4,381 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
    1,632 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
   18,756 ( 0.00%)      }
        .           
        .               #[inline]
       44 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
    1,422 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
       88 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
    3,185 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
    5,915 ( 0.00%)          let def_kind = match self.find(hir_id)? {
      808 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
        .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
        .                           ItemKind::Impl { .. } => DefKind::Impl,
        .                       },
        .                       Node::ForeignItem(item) => match item.kind {
        .                           ForeignItemKind::Fn(..) => DefKind::Fn,
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
       12 ( 0.00%)              Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
       39 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
       40 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
       56 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
       16 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
       32 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
       18 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
       45 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
      132 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
    1,356 ( 0.00%)          Some(def_kind)
    4,550 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
2,122,304 ( 0.04%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  265,288 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
  529,326 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  264,663 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  793,989 ( 0.01%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
2,122,304 ( 0.04%)      }
        .           
      693 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
1,574,054 ( 0.03%)          self.find_parent_node(hir_id).unwrap()
    1,386 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
  380,160 ( 0.01%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
   47,520 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
   11,930 ( 0.00%)              Some(owner.node.into())
        .                   } else {
   70,748 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   35,374 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  106,122 ( 0.00%)              Some(node.node)
        .                   }
  380,160 ( 0.01%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
    8,707 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
   13,335 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
    6,470 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
    8,890 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
      266 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
      133 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
      266 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
   38,164 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   10,904 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
   43,616 ( 0.00%)      }
        .           
    1,134 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      324 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
    1,296 ( 0.00%)      }
        .           
    7,861 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    2,246 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
    8,984 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
   29,834 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    8,524 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
   34,096 ( 0.00%)      }
        .           
      636 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
      636 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
      424 ( 0.00%)      }
        .           
      102 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
      102 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
      102 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
   20,632 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
   15,474 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
   20,632 ( 0.00%)      }
        .           
    6,435 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
   10,420 ( 0.00%)          self.local_def_id(self.body_owner(id))
    6,435 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
      872 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
    2,877 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
    2,616 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
    2,349 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
    1,827 ( 0.00%)      }
        .           
       86 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
      706 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
      224 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
      258 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
    4,620 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
   13,064 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
        .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
    4,620 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
    6,192 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
    9,288 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
        .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
      516 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
      516 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
    1,032 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
    6,966 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
    1,365 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
       10 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
    1,260 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
    2,730 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
    1,161 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
        .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
        .                   match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
        .                       Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
        .               }
        .           
      540 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
       60 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
      540 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       74 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
      350 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
      250 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
       78 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      450 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
    1,820 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
    1,155 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      152 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       22 ( 0.00%)          let krate = self.krate();
       82 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
    8,184 ( 0.00%)              match owner.node() {
   10,302 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
      117 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      152 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
      202 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
       39 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
        6 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
    1,204 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
      154 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
      168 ( 0.00%)          for id in module.items.iter() {
    9,090 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
      168 ( 0.00%)          for id in module.trait_items.iter() {
      240 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
      168 ( 0.00%)          for id in module.impl_items.iter() {
    1,521 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
      168 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
    1,232 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
      112 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
       42 ( 0.00%)              let items = self.tcx.hir_module_items(id);
      448 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      109 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
      456 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
    3,404 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 752 ----------------------------------------
        .               /// ```
        .               /// fn foo(x: usize) -> bool {
        .               ///     loop {
        .               ///         true  // If `get_return_block` gets passed the `id` corresponding
        .               ///     }         // to this, it will return `None`.
        .               ///     false
        .               /// }
        .               /// ```
       45 ( 0.00%)      pub fn get_return_block(&self, id: HirId) -> Option<HirId> {
        5 ( 0.00%)          let mut iter = self.parent_iter(id).peekable();
        .                   let mut ignore_tail = false;
       20 ( 0.00%)          if let Some(node) = self.find(id) {
       20 ( 0.00%)              if let Node::Expr(Expr { kind: ExprKind::Ret(_), .. }) = node {
        .                           // When dealing with `return` statements, we don't care about climbing only tail
        .                           // expressions.
        .                           ignore_tail = true;
        .                       }
        .                   }
       70 ( 0.00%)          while let Some((hir_id, node)) = iter.next() {
      280 ( 0.00%)              if let (Some((_, next_node)), false) = (iter.peek(), ignore_tail) {
        .                           match next_node {
        .                               Node::Block(Block { expr: None, .. }) => return None,
        .                               // The current node is not the tail expression of its parent.
        .                               Node::Block(Block { expr: Some(e), .. }) if hir_id != e.hir_id => return None,
        .                               _ => {}
        .                           }
        .                       }
      300 ( 0.00%)              match node {
        .                           Node::Item(_)
        .                           | Node::ForeignItem(_)
        .                           | Node::TraitItem(_)
        .                           | Node::Expr(Expr { kind: ExprKind::Closure(..), .. })
        .                           | Node::ImplItem(_) => return Some(hir_id),
        .                           // Ignore `return`s on the first iteration
        .                           Node::Expr(Expr { kind: ExprKind::Loop(..) | ExprKind::Ret(..), .. })
        .                           | Node::Local(_) => {
        .                               return None;
        .                           }
        .                           _ => {}
        .                       }
        .                   }
        .                   None
       50 ( 0.00%)      }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
      976 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
    8,784 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
    1,952 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
    1,246 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
      588 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
    4,186 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
    1,794 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
    4,784 ( 0.00%)      }
        .           
      546 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
      234 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
      624 ( 0.00%)      }
        .           
       84 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
       36 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
       96 ( 0.00%)      }
        .           
        .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Variant(variant)) => variant,
        .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
    2,178 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
      758 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
      678 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
       32 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
    1,210 ( 0.00%)      }
        .           
    1,872 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
      742 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
    1,404 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
3,687,292 ( 0.07%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
  526,756 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
4,214,048 ( 0.08%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
    1,317 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
  116,267 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
    1,317 ( 0.00%)      }
        .           
  208,313 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  208,313 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
      896 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
      488 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
       36 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
       36 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
        .                           _ => trait_item.span,
        .                       },
      288 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
      280 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
        8 ( 0.00%)                  _ => impl_item.span,
        .                       },
       16 ( 0.00%)              Node::Variant(variant) => variant.span,
       38 ( 0.00%)              Node::Field(field) => field.span,
      105 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
       84 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  297,590 ( 0.01%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
       76 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
      694 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
      114 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    2,458 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    2,624 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
       90 ( 0.00%)          self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
      546 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
       35 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
      105 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       21 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
      126 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
       84 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
       70 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
      224 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
      154 ( 0.00%)      return ModuleItems {
       56 ( 0.00%)          submodules: submodules.into_boxed_slice(),
       56 ( 0.00%)          items: items.into_boxed_slice(),
       56 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
       56 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
       56 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
      363 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
    1,010 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
      606 ( 0.00%)              self.items.push(item.item_id());
      404 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
       13 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
    1,134 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
       52 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
       18 ( 0.00%)              self.trait_items.push(item.trait_item_id());
       18 ( 0.00%)              intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
      117 ( 0.00%)              self.impl_items.push(item.impl_item_id());
      117 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
      112 ( 0.00%)  }

  741,668 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 35 ----------------------------------------
        .           
        .               /// Contains the successors for all the Sccs, concatenated. The
        .               /// range of indices corresponding to a given SCC is found in its
        .               /// SccData.
        .               all_successors: Vec<S>,
        .           }
        .           
        .           impl<N: Idx, S: Idx + Ord> Sccs<N, S> {
    1,161 ( 0.00%)      pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {
        .                   SccsConstruction::construct(graph)
    1,161 ( 0.00%)      }
        .           
        .               /// Returns the number of SCCs in the graph.
        .               pub fn num_sccs(&self) -> usize {
        .                   self.scc_data.len()
        .               }
        .           
        .               /// Returns an iterator over the SCCs in the graph.
        .               ///
-- line 53 ----------------------------------------
-- line 56 ----------------------------------------
        .               /// This is convenient when the edges represent dependencies: when you visit
        .               /// `S1`, the value for `S2` will already have been computed.
        .               pub fn all_sccs(&self) -> impl Iterator<Item = S> {
        .                   (0..self.scc_data.len()).map(S::new)
        .               }
        .           
        .               /// Returns the SCC to which a node `r` belongs.
        .               pub fn scc(&self, r: N) -> S {
  152,400 ( 0.00%)          self.scc_indices[r]
        .               }
        .           
        .               /// Returns the successors of the given SCC.
        .               pub fn successors(&self, scc: S) -> &[S] {
        .                   self.scc_data.successors(scc)
        .               }
        .           
        .               /// Construct the reverse graph of the SCC graph.
-- line 72 ----------------------------------------
-- line 116 ----------------------------------------
        .                   self.ranges.len()
        .               }
        .           
        .               /// Returns the successors of the given SCC.
        .               fn successors(&self, scc: S) -> &[S] {
        .                   // Annoyingly, `range` does not implement `Copy`, so we have
        .                   // to do `range.start..range.end`:
        .                   let range = &self.ranges[scc];
  225,768 ( 0.00%)          &self.all_successors[range.start..range.end]
        .               }
        .           
        .               /// Creates a new SCC with `successors` as its successors and
        .               /// returns the resulting index.
        .               fn create_scc(&mut self, successors: impl IntoIterator<Item = S>) -> S {
        .                   // Store the successors on `scc_successors_vec`, remembering
        .                   // the range of indices.
   28,221 ( 0.00%)          let all_successors_start = self.all_successors.len();
        .                   self.all_successors.extend(successors);
        .                   let all_successors_end = self.all_successors.len();
        .           
        .                   debug!(
        .                       "create_scc({:?}) successors={:?}",
        .                       self.ranges.len(),
        .                       &self.all_successors[all_successors_start..all_successors_end],
        .                   );
-- line 140 ----------------------------------------
-- line 164 ----------------------------------------
        .               /// into the successors_stack, we sometimes get duplicate entries.
        .               /// We use this set to remove those -- we also keep its storage
        .               /// around between successors to amortize memory allocation costs.
        .               duplicate_set: FxHashSet<S>,
        .           
        .               scc_data: SccData<S>,
        .           }
        .           
      645 ( 0.00%)  #[derive(Copy, Clone, Debug)]
        .           enum NodeState<N, S> {
        .               /// This node has not yet been visited as part of the DFS.
        .               ///
        .               /// After SCC construction is complete, this state ought to be
        .               /// impossible.
        .               NotVisited,
        .           
        .               /// This node is currently being walk as part of our DFS. It is on
-- line 180 ----------------------------------------
-- line 216 ----------------------------------------
        .               /// N with depth D can reach some other node N' with lower depth
        .               /// D' (i.e., D' < D), we know that N, N', and all nodes in
        .               /// between them on the stack are part of an SCC.
        .               ///
        .               /// [wikipedia]: https://bit.ly/2EZIx84
        .               fn construct(graph: &'c G) -> Sccs<G::Node, S> {
        .                   let num_nodes = graph.num_nodes();
        .           
    1,419 ( 0.00%)          let mut this = Self {
        .                       graph,
        .                       node_states: IndexVec::from_elem_n(NodeState::NotVisited, num_nodes),
        .                       node_stack: Vec::with_capacity(num_nodes),
        .                       successors_stack: Vec::new(),
        .                       scc_data: SccData { ranges: IndexVec::new(), all_successors: Vec::new() },
        .                       duplicate_set: FxHashSet::default(),
        .                   };
        .           
        .                   let scc_indices = (0..num_nodes)
        .                       .map(G::Node::new)
  456,078 ( 0.01%)              .map(|node| match this.start_walk_from(node) {
        .                           WalkReturn::Complete { scc_index } => scc_index,
        .                           WalkReturn::Cycle { min_depth } => panic!(
        .                               "`start_walk_node({:?})` returned cycle with depth {:?}",
        .                               node, min_depth
        .                           ),
        .                       })
        .                       .collect();
        .           
      774 ( 0.00%)          Sccs { scc_indices, scc_data: this.scc_data }
        .               }
        .           
  684,117 ( 0.01%)      fn start_walk_from(&mut self, node: G::Node) -> WalkReturn<S> {
  304,052 ( 0.01%)          if let Some(result) = self.inspect_node(node) {
        .                       result
        .                   } else {
        .                       self.walk_unvisited_node(node)
        .                   }
  760,130 ( 0.01%)      }
        .           
        .               /// Inspect a node during the DFS. We first examine its current
        .               /// state -- if it is not yet visited (`NotVisited`), return `None` so
        .               /// that the caller might push it onto the stack and start walking its
        .               /// successors.
        .               ///
        .               /// If it is already on the DFS stack it will be in the state
        .               /// `BeingVisited`. In that case, we have found a cycle and we
        .               /// return the depth from the stack.
        .               ///
        .               /// Otherwise, we are looking at a node that has already been
        .               /// completely visited. We therefore return `WalkReturn::Complete`
        .               /// with its associated SCC index.
  803,304 ( 0.01%)      fn inspect_node(&mut self, node: G::Node) -> Option<WalkReturn<S>> {
1,606,608 ( 0.03%)          Some(match self.find_state(node) {
  230,598 ( 0.00%)              NodeState::InCycle { scc_index } => WalkReturn::Complete { scc_index },
        .           
  143,841 ( 0.00%)              NodeState::BeingVisited { depth: min_depth } => WalkReturn::Cycle { min_depth },
        .           
        .                       NodeState::NotVisited => return None,
        .           
        .                       NodeState::InCycleWith { parent } => panic!(
        .                           "`find_state` returned `InCycleWith({:?})`, which ought to be impossible",
        .                           parent
        .                       ),
        .                   })
1,405,782 ( 0.03%)      }
        .           
        .               /// Fetches the state of the node `r`. If `r` is recorded as being
        .               /// in a cycle with some other node `r2`, then fetches the state
        .               /// of `r2` (and updates `r` to reflect current result). This is
        .               /// basically the "find" part of a standard union-find algorithm
        .               /// (with path compression).
        .               fn find_state(&mut self, mut node: G::Node) -> NodeState<G::Node, S> {
        .                   // To avoid recursion we temporarily reuse the `parent` of each
-- line 288 ----------------------------------------
-- line 299 ----------------------------------------
        .                   // following links downwards is then simply as soon as we have
        .                   // found the initial self-loop.
        .                   let mut previous_node = node;
        .           
        .                   // Ultimately assigned by the parent when following
        .                   // `InCycleWith` upwards.
        .                   let node_state = loop {
        .                       debug!("find_state(r = {:?} in state {:?})", node, self.node_states[node]);
1,998,386 ( 0.04%)              match self.node_states[node] {
  307,464 ( 0.01%)                  NodeState::InCycle { scc_index } => break NodeState::InCycle { scc_index },
  191,788 ( 0.00%)                  NodeState::BeingVisited { depth } => break NodeState::BeingVisited { depth },
   76,013 ( 0.00%)                  NodeState::NotVisited => break NodeState::NotVisited,
  135,951 ( 0.00%)                  NodeState::InCycleWith { parent } => {
        .                               // We test this, to be extremely sure that we never
        .                               // ever break our termination condition for the
        .                               // reverse iteration loop.
  135,951 ( 0.00%)                      assert!(node != parent, "Node can not be in cycle with itself");
        .                               // Store the previous node as an inverted list link
  679,755 ( 0.01%)                      self.node_states[node] = NodeState::InCycleWith { parent: previous_node };
        .                               // Update to parent node.
        .                               previous_node = node;
        .                               node = parent;
        .                           }
        .                       }
        .                   };
        .           
        .                   // The states form a graph where up to one outgoing link is stored at
-- line 325 ----------------------------------------
-- line 355 ----------------------------------------
        .                   // We can then walk backwards, starting from `previous_node`, and assign
        .                   // each node in the list with the updated state. The loop terminates
        .                   // when we reach the self-cycle.
        .           
        .                   // Move backwards until we found the node where we started. We
        .                   // will know when we hit the state where previous_node == node.
        .                   loop {
        .                       // Back at the beginning, we can return.
  413,264 ( 0.01%)              if previous_node == node {
        .                           return node_state;
        .                       }
        .                       // Update to previous node in the link.
  271,902 ( 0.00%)              match self.node_states[previous_node] {
  135,951 ( 0.00%)                  NodeState::InCycleWith { parent: previous } => {
        .                               node = previous_node;
        .                               previous_node = previous;
        .                           }
        .                           // Only InCycleWith nodes were added to the reverse linked list.
        .                           other => panic!("Invalid previous link while compressing cycle: {:?}", other),
        .                       }
        .           
        .                       debug!("find_state: parent_state = {:?}", node_state);
        .           
        .                       // Update the node state from the parent state. The assigned
        .                       // state is actually a loop invariant but it will only be
        .                       // evaluated if there is at least one backlink to follow.
        .                       // Fully trusting llvm here to find this loop optimization.
  543,804 ( 0.01%)              match node_state {
        .                           // Path compression, make current node point to the same root.
        .                           NodeState::InCycle { .. } => {
   95,584 ( 0.00%)                      self.node_states[node] = node_state;
        .                           }
        .                           // Still visiting nodes, compress to cycle to the node
        .                           // at that depth.
   88,159 ( 0.00%)                  NodeState::BeingVisited { depth } => {
  176,318 ( 0.00%)                      self.node_states[node] =
   88,159 ( 0.00%)                          NodeState::InCycleWith { parent: self.node_stack[depth] };
        .                           }
        .                           // These are never allowed as parent nodes. InCycleWith
        .                           // should have been followed to a real parent and
        .                           // NotVisited can not be part of a cycle since it should
        .                           // have instead gotten explored.
        .                           NodeState::NotVisited | NodeState::InCycleWith { .. } => {
        .                               panic!("invalid parent state: {:?}", node_state)
        .                           }
        .                       }
        .                   }
  401,652 ( 0.01%)      }
        .           
        .               /// Walks a node that has never been visited before.
        .               ///
        .               /// Call this method when `inspect_node` has returned `None`. Having the
        .               /// caller decide avoids mutual recursion between the two methods and allows
        .               /// us to maintain an allocated stack for nodes on the path between calls.
        .               #[instrument(skip(self, initial), level = "debug")]
        .               fn walk_unvisited_node(&mut self, initial: G::Node) -> WalkReturn<S> {
-- line 410 ----------------------------------------
-- line 418 ----------------------------------------
        .                       successor_node: G::Node,
        .                   }
        .           
        .                   // Move the stack to a local variable. We want to utilize the existing allocation and
        .                   // mutably borrow it without borrowing self at the same time.
        .                   let mut successors_stack = core::mem::take(&mut self.successors_stack);
        .                   debug_assert_eq!(successors_stack.len(), 0);
        .           
      903 ( 0.00%)          let mut stack: Vec<VisitingNodeFrame<G, _>> = vec![VisitingNodeFrame {
        .                       node: initial,
        .                       depth: 0,
        .                       min_depth: 0,
        .                       iter: None,
        .                       successors_len: 0,
        .                       min_cycle_root: initial,
        .                       successor_node: initial,
        .                   }];
        .           
        .                   let mut return_value = None;
        .           
   76,013 ( 0.00%)          'recurse: while let Some(frame) = stack.last_mut() {
        .                       let VisitingNodeFrame {
  303,794 ( 0.01%)                  node,
        .                           depth,
        .                           iter,
  303,794 ( 0.01%)                  successors_len,
        .                           min_depth,
        .                           min_cycle_root,
        .                           successor_node,
        .                       } = frame;
        .           
  151,897 ( 0.00%)              let node = *node;
  303,794 ( 0.01%)              let depth = *depth;
        .           
  455,691 ( 0.01%)              let successors = match iter {
        .                           Some(iter) => iter,
        .                           None => {
        .                               // This None marks that we still have the initialize this node's frame.
        .                               debug!(?depth, ?node);
        .           
        .                               debug_assert!(matches!(self.node_states[node], NodeState::NotVisited));
        .           
        .                               // Push `node` onto the stack.
  304,052 ( 0.01%)                      self.node_states[node] = NodeState::BeingVisited { depth };
        .                               self.node_stack.push(node);
        .           
        .                               // Walk each successor of the node, looking to see if any of
        .                               // them can reach a node that is presently on the stack. If
        .                               // so, that means they can also reach us.
  152,026 ( 0.00%)                      *successors_len = successors_stack.len();
        .                               // Set and return a reference, this is currently empty.
  304,052 ( 0.01%)                      iter.get_or_insert(self.graph.successors(node))
        .                           }
        .                       };
        .           
        .                       // Now that iter is initialized, this is a constant for this frame.
  303,794 ( 0.01%)              let successors_len = *successors_len;
        .           
        .                       // Construct iterators for the nodes and walk results. There are two cases:
        .                       // * The walk of a successor node returned.
        .                       // * The remaining successor nodes.
        .                       let returned_walk =
        .                           return_value.take().into_iter().map(|walk| (*successor_node, Some(walk)));
        .           
        .                       let successor_walk = successors.by_ref().map(|successor_node| {
        .                           debug!(?node, ?successor_node);
  374,439 ( 0.01%)                  (successor_node, self.inspect_node(successor_node))
        .                       });
        .           
  553,420 ( 0.01%)              for (successor_node, walk) in returned_walk.chain(successor_walk) {
  611,310 ( 0.01%)                  match walk {
        .                               Some(WalkReturn::Cycle { min_depth: successor_min_depth }) => {
        .                                   // Track the minimum depth we can reach.
  191,478 ( 0.00%)                          assert!(successor_min_depth <= depth);
  239,298 ( 0.00%)                          if successor_min_depth < *min_depth {
        .                                       debug!(?node, ?successor_min_depth);
  143,460 ( 0.00%)                              *min_depth = successor_min_depth;
   47,820 ( 0.00%)                              *min_cycle_root = successor_node;
        .                                   }
        .                               }
        .           
        .                               Some(WalkReturn::Complete { scc_index: successor_scc_index }) => {
        .                                   // Push the completed SCC indices onto
        .                                   // the `successors_stack` for later.
        .                                   debug!(?node, ?successor_scc_index);
        .                                   successors_stack.push(successor_scc_index);
        .                               }
        .           
        .                               None => {
  151,768 ( 0.00%)                          let depth = depth + 1;
        .                                   debug!(?depth, ?successor_node);
        .                                   // Remember which node the return value will come from.
   75,884 ( 0.00%)                          frame.successor_node = successor_node;
        .                                   // Start a new stack frame the step into it.
        .                                   stack.push(VisitingNodeFrame {
        .                                       node: successor_node,
        .                                       depth,
        .                                       iter: None,
        .                                       successors_len: 0,
        .                                       min_depth: depth,
        .                                       min_cycle_root: successor_node,
-- line 518 ----------------------------------------
-- line 531 ----------------------------------------
        .                       let frame = stack.pop().unwrap();
        .           
        .                       // If `min_depth == depth`, then we are the root of the
        .                       // cycle: we can't reach anyone further down the stack.
        .           
        .                       // Pass the 'return value' down the stack.
        .                       // We return one frame at a time so there can't be another return value.
        .                       debug_assert!(return_value.is_none());
  152,026 ( 0.00%)              return_value = Some(if frame.min_depth == depth {
        .                           // Note that successor stack may have duplicates, so we
        .                           // want to remove those:
        .                           let deduplicated_successors = {
        .                               let duplicate_set = &mut self.duplicate_set;
        .                               duplicate_set.clear();
        .                               successors_stack
        .                                   .drain(successors_len..)
   29,074 ( 0.00%)                          .filter(move |&i| duplicate_set.insert(i))
        .                           };
        .                           let scc_index = self.scc_data.create_scc(deduplicated_successors);
  169,326 ( 0.00%)                  self.node_states[node] = NodeState::InCycle { scc_index };
        .                           WalkReturn::Complete { scc_index }
        .                       } else {
        .                           // We are not the head of the cycle. Return back to our
        .                           // caller. They will take ownership of the
        .                           // `self.successors` data that we pushed.
  286,752 ( 0.01%)                  self.node_states[node] = NodeState::InCycleWith { parent: frame.min_cycle_root };
        .                           WalkReturn::Cycle { min_depth: frame.min_depth }
        .                       });
        .                   }
        .           
        .                   // Keep the allocation we used for successors_stack.
    1,161 ( 0.00%)          self.successors_stack = successors_stack;
        .                   debug_assert_eq!(self.successors_stack.len(), 0);
        .           
        .                   return_value.unwrap()
        .               }
        .           }

3,646,440 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .           /// Adds packed 32-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddd))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_add_epi32(a: __m128i, b: __m128i) -> __m128i {
        17 ( 0.00%)      transmute(simd_add(a.as_i32x4(), b.as_i32x4()))
         .           }
         .           
         .           /// Adds packed 64-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi64)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddq))]
-- line 110 ----------------------------------------
-- line 790 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmpeq_epi8(a: __m128i, b: __m128i) -> __m128i {
   544,147 ( 0.01%)      transmute::<i8x16, _>(simd_eq(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqw))]
-- line 806 ----------------------------------------
-- line 856 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmplt_epi8(a: __m128i, b: __m128i) -> __m128i {
    69,336 ( 0.00%)      transmute::<i8x16, _>(simd_lt(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 872 ----------------------------------------
-- line 1174 ----------------------------------------
         .           /// `mem_addr` must be aligned on a 16-byte boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_load_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movaps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_load_si128(mem_addr: *const __m128i) -> __m128i {
   685,412 ( 0.01%)      *mem_addr
         .           }
         .           
         .           /// Loads 128-bits of integer data from memory into a new vector.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_loadu_si128)
         .           #[inline]
-- line 1190 ----------------------------------------
-- line 1237 ----------------------------------------
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storeu_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movups))] // FIXME movdqu expected
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_storeu_si128(mem_addr: *mut __m128i, a: __m128i) {
        16 ( 0.00%)      storeudq(mem_addr as *mut i8, a);
         .           }
         .           
         .           /// Stores the lower 64-bit integer `a` to a memory location.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storel_epi64)
         .           #[inline]
-- line 1253 ----------------------------------------
-- line 1373 ----------------------------------------
         .           /// Returns a mask of the most significant bit of each element in `a`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_movemask_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pmovmskb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_movemask_epi8(a: __m128i) -> i32 {
56,446,385 ( 1.01%)      pmovmskb(a.as_i8x16())
         .           }
         .           
         .           /// Shuffles 32-bit integers in `a` using the control in `IMM8`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pshufd, IMM8 = 9))]
-- line 1389 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/caches.rs
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .                   &self,
         .                   state: &'s QueryCacheStore<Self>,
         .                   key: &K,
         .                   on_hit: OnHit,
         .               ) -> Result<R, QueryLookup>
         .               where
         .                   OnHit: FnOnce(&V, DepNodeIndex) -> R,
         .               {
     7,967 ( 0.00%)          let (lookup, lock) = state.get_lookup(key);
         .                   let result = lock.raw_entry().from_key_hashed_nocheck(lookup.key_hash, key);
         .           
11,564,986 ( 0.21%)          if let Some((_, value)) = result {
 5,857,096 ( 0.11%)              let hit_result = on_hit(&value.0, value.1);
 2,489,876 ( 0.04%)              Ok(hit_result)
         .                   } else {
    24,777 ( 0.00%)              Err(lookup)
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn complete(
         .                   &self,
         .                   lock_sharded_storage: &mut Self::Sharded,
         .                   key: K,
         .                   value: V,
         .                   index: DepNodeIndex,
         .               ) -> Self::Stored {
    50,230 ( 0.00%)          lock_sharded_storage.insert(key, (value.clone(), index));
     4,842 ( 0.00%)          value
         .               }
         .           
         .               fn iter(
         .                   &self,
         .                   shards: &Sharded<Self::Sharded>,
         .                   f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex),
         .               ) {
         .                   let shards = shards.lock_shards();
-- line 130 ----------------------------------------
-- line 178 ----------------------------------------
         .                   &self,
         .                   state: &'s QueryCacheStore<Self>,
         .                   key: &K,
         .                   on_hit: OnHit,
         .               ) -> Result<R, QueryLookup>
         .               where
         .                   OnHit: FnOnce(&&'tcx V, DepNodeIndex) -> R,
         .               {
     5,742 ( 0.00%)          let (lookup, lock) = state.get_lookup(key);
         .                   let result = lock.raw_entry().from_key_hashed_nocheck(lookup.key_hash, key);
         .           
   283,124 ( 0.01%)          if let Some((_, value)) = result {
   480,948 ( 0.01%)              let hit_result = on_hit(&&value.0, value.1);
    23,130 ( 0.00%)              Ok(hit_result)
         .                   } else {
     1,053 ( 0.00%)              Err(lookup)
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn complete(
         .                   &self,
         .                   lock_sharded_storage: &mut Self::Sharded,
         .                   key: K,
         .                   value: V,
         .                   index: DepNodeIndex,
         .               ) -> Self::Stored {
    24,685 ( 0.00%)          let value = self.arena.alloc((value, index));
         .                   let value = unsafe { &*(value as *const _) };
         .                   lock_sharded_storage.insert(key, value);
         .                   &value.0
         .               }
         .           
         .               fn iter(
         .                   &self,
         .                   shards: &Sharded<Self::Sharded>,
-- line 213 ----------------------------------------

 7,019,383 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/caches.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
  3,793,946 ( 0.07%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
     81,563 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
104,092,698 ( 1.87%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  1,000,222 ( 0.02%)          self.stride += Group::WIDTH;
  1,000,222 ( 0.02%)          self.pos += self.stride;
    822,878 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
     42,112 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
     83,970 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
     25,572 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
    112,200 ( 0.00%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
     33,968 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
     84,448 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
    113,965 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
        340 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
         63 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        100 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
      4,416 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
     11,358 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
     11,358 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
     22,716 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
      2,596 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
     20,120 ( 0.00%)          self.erase_no_drop(&item);
         17 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  1,018,001 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
        864 ( 0.00%)          match self.find(hash, eq) {
      1,651 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    437,098 ( 0.01%)              None => None,
          .                   }
  1,540,944 ( 0.03%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
      3,750 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    223,054 ( 0.00%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
     68,449 ( 0.00%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
    167,303 ( 0.00%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
    110,784 ( 0.00%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,462,950 ( 0.06%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
      1,579 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  3,612,429 ( 0.06%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
  2,578,206 ( 0.05%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,605,128 ( 0.05%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
         84 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  1,953,846 ( 0.04%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
        493 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
    234,692 ( 0.00%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     18,131 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
    492,210 ( 0.01%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
    367,267 ( 0.01%)          self.table.items += 1;
          .                   bucket
        981 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
      8,725 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    173,471 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
     94,318 ( 0.00%)              eq(self.bucket(index).as_ref())
    114,805 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
     27,221 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
      9,912 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     59,675 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
        931 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
      4,473 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
      1,064 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  2,606,464 ( 0.05%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
          1 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    870,634 ( 0.02%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
      5,520 ( 0.00%)          let allocation = self.into_allocation();
      4,140 ( 0.00%)          RawIntoIter {
      6,900 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      1,753 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
        206 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  1,364,217 ( 0.02%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
    145,243 ( 0.00%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
     36,028 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
     81,372 ( 0.00%)          Ok(Self {
          .                       ctrl,
     34,638 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
    105,870 ( 0.00%)      }
          .           
          .               #[inline]
     13,064 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
      3,356 ( 0.00%)          if capacity == 0 {
      2,471 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
     66,187 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
      6,960 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
     13,064 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
     81,075 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
     81,075 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
    162,150 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  2,465,320 ( 0.04%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  6,887,882 ( 0.12%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
  3,198,965 ( 0.06%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
     20,720 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 11,625,367 ( 0.21%)              for bit in group.match_byte(h2_hash) {
 26,018,346 ( 0.47%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 20,335,663 ( 0.37%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  2,464,584 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 10,380,096 ( 0.19%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
 54,743,921 ( 0.98%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  4,516,040 ( 0.08%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
  3,612,272 ( 0.06%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
          .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
  6,846,947 ( 0.12%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  2,282,143 ( 0.04%)          *self.ctrl(index) = ctrl;
  2,282,215 ( 0.04%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  2,043,790 ( 0.04%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
     79,836 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
  2,071,977 ( 0.04%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
      1,632 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
     44,456 ( 0.00%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
     20,439 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
     40,878 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
     40,878 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
     85,497 ( 0.00%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          .                       Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
     20,439 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
      4,079 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  1,498,049 ( 0.03%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
     20,439 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
     13,402 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
     32,805 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
     63,077 ( 0.00%)          self.items = 0;
     32,835 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
     82,242 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
    328,968 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
    408,915 ( 0.01%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
    328,968 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
        184 ( 0.00%)      fn clone(&self) -> Self {
         42 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
        207 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
         40 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
    896,482 ( 0.02%)      fn drop(&mut self) {
    880,456 ( 0.02%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  1,049,300 ( 0.02%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      5,520 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
      6,900 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
    885,526 ( 0.02%)                  if let Some(index) = self.current_group.lowest_set_bit() {
     81,637 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    145,022 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
  1,398,073 ( 0.03%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
      9,063 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     16,309 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     10,613 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
        604 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     83,368 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    167,766 ( 0.00%)          if let Some(b) = self.iter.next() {
    471,209 ( 0.01%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    166,736 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      1,410 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
      6,955 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
        478 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      1,185 ( 0.00%)      fn next(&mut self) -> Option<T> {
        180 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      2,632 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          3 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          8 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
          1 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
          8 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 28,596,699 ( 0.51%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
      120 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
      120 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
      240 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
   71,090 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  483,412 ( 0.01%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   42,654 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
   85,308 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    1,460 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  519,863 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    1,122 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    1,585 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  152,590 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
  168,103 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  175,128 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  215,204 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
   14,233 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
       91 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
       86 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
       97 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   14,218 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   42,654 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   14,218 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
    2,502 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    3,058 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    1,390 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    1,946 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
      258 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
      129 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
      814 ( 0.00%)          self
      387 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
    7,407 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
    9,820 ( 0.00%)              let (value, subst) =
      492 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   14,827 ( 0.00%)              f(infcx, value, subst)
        .                   })
    8,095 ( 0.00%)      }
        .           
  106,443 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   44,762 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  505,637 ( 0.01%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   14,218 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   14,218 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
  117,842 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
      111 ( 0.00%)          let InferOk { value, obligations } = self;
      460 ( 0.00%)          for obligation in obligations {
        .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
    3,041 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   12,164 ( 0.00%)          self.obligations
    3,041 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   18,834 ( 0.00%)      }
        .           
  261,736 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  294,453 ( 0.01%)          t.fold_with(&mut self.freshener())
  294,453 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      108 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      216 ( 0.00%)          match *ty.kind() {
       51 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      204 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        3 ( 0.00%)              _ => None,
        .                   }
      216 ( 0.00%)      }
        .           
   32,717 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   32,717 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
   40,583 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
   40,583 ( 0.00%)      }
        .           
      556 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
      278 ( 0.00%)          let mut inner = self.inner.borrow_mut();
      278 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      102 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
       66 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        3 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
      973 ( 0.00%)      }
        .           
   62,609 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  250,456 ( 0.00%)          CombineFields {
        .                       infcx: self,
  626,140 ( 0.01%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   62,609 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
        8 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
    1,413 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
        9 ( 0.00%)      }
        .           
  344,994 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
1,034,982 ( 0.02%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  172,497 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  689,988 ( 0.01%)      }
        .           
  261,789 ( 0.00%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   23,799 ( 0.00%)              undo_snapshot,
   23,799 ( 0.00%)              region_constraints_snapshot,
   23,799 ( 0.00%)              universe,
   23,799 ( 0.00%)              was_in_snapshot,
   47,598 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   23,799 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
2,230,470 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  148,698 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
  148,698 ( 0.00%)              was_in_snapshot,
  297,396 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   71,349 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   87,285 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    7,935 ( 0.00%)          let snapshot = self.start_snapshot();
   24,132 ( 0.00%)          let r = f(&snapshot);
   55,545 ( 0.00%)          self.commit_from(snapshot);
   47,552 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  720,346 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
  895,966 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
  182,908 ( 0.00%)          let snapshot = self.start_snapshot();
  415,726 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  233,442 ( 0.00%)          match r {
        .                       Ok(_) => {
  995,168 ( 0.02%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  185,618 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
1,139,229 ( 0.02%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
   35,945 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   42,226 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   10,450 ( 0.00%)          let snapshot = self.start_snapshot();
   15,366 ( 0.00%)          let r = f(&snapshot);
   47,377 ( 0.00%)          self.rollback_to("probe", snapshot);
    4,630 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
        9 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
       12 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
        2 ( 0.00%)          let snapshot = self.start_snapshot();
        1 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
        2 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
        4 ( 0.00%)          let r = f(&snapshot);
        9 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
       12 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
    3,622 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
    7,244 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
    5,433 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
      336 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      252 ( 0.00%)      }
        .           
      744 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      558 ( 0.00%)      }
        .           
  138,800 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
  124,920 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 983 ----------------------------------------
        .                   let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
        .                   self.subtype_predicate(cause, param_env, subtype_predicate)
        .               }
        .           
      372 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
       31 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
       31 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
      224 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
       54 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
       54 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
        4 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
        8 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
      279 ( 0.00%)      }
        .           
   82,272 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
   68,560 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
   54,848 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
       19 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
       38 ( 0.00%)      }
        .           
   47,204 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  236,020 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   70,806 ( 0.00%)      }
        .           
   46,974 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  165,099 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   70,461 ( 0.00%)      }
        .           
      232 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
    1,276 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      116 ( 0.00%)          self.tcx.mk_ty_var(vid)
      348 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
      105 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
       63 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
       84 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
   14,191 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  627,195 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   28,382 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
  224,242 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
1,457,573 ( 0.03%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  560,605 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
  336,363 ( 0.01%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
      956 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    1,434 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
    1,050 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    1,575 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   75,832 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  151,664 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
        6 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
       58 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
       12 ( 0.00%)      }
        .           
  243,560 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  123,111 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
   14,557 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   63,456 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
   79,320 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   15,864 ( 0.00%)                              param.name,
   15,864 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   15,864 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
      264 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
       24 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
      192 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   29,394 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  209,793 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   19,596 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
      348 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   11,202 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
      522 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   11,648 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
   31,616 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
    1,664 ( 0.00%)              assert!(
    4,992 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
    1,664 ( 0.00%)          };
        .           
        .                   let region_rels =
    1,664 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   14,976 ( 0.00%)          let (lexical_region_resolutions, errors) =
   39,936 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
    6,656 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    1,664 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   14,976 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   16,640 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
    3,328 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
    4,992 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
    3,328 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
    8,320 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
        .               }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
    2,924 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
      645 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
    2,451 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
      129 ( 0.00%)              .into_infos_and_data();
      129 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
    1,032 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
    1,098 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
    3,294 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
    3,843 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  585,506 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
    1,778 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
    2,667 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
    1,012 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  280,342 ( 0.01%)          if !value.needs_infer() {
  103,432 ( 0.00%)              return value; // Avoid duplicated subst-folding.
        .                   }
  145,664 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  118,782 ( 0.00%)          value.fold_with(&mut r)
    1,258 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
    2,340 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
    7,480 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
   34,047 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    1,560 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
      880 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
      330 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
    1,870 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
      770 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
      238 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
      476 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
      357 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  774,529 ( 0.01%)          self.universe.get()
  344,672 ( 0.01%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
       14 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
       14 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
       14 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   // variables, thus we don't need to substitute back the original values.
        .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
        .               }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
2,818,736 ( 0.05%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
1,003,020 ( 0.02%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  251,684 ( 0.00%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
    1,472 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
      426 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
3,171,078 ( 0.06%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
   39,472 ( 0.00%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
      148 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    1,134 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
    1,134 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
       50 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   10,444 ( 0.00%)          match *ty.kind() {
    2,296 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
       16 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
       50 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  630,335 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
      228 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      192 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
      195 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
      117 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
      285 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
        .                   self.cause.span
        .               }
        .           
        .               pub fn types(
-- line 1787 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   49,362 ( 0.00%)          match *cause.code() {
      424 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
    2,120 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

  923,441 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 180 ----------------------------------------
         .           /// assert_eq!(v, &[0.into()]);
         .           ///
         .           /// // Ensure that the last item was dropped.
         .           /// assert!(weak.upgrade().is_none());
         .           /// ```
         .           #[stable(feature = "drop_in_place", since = "1.8.0")]
         .           #[lang = "drop_in_place"]
         .           #[allow(unconditional_recursion)]
49,131,109 ( 0.88%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
         .               // Code here does not matter - this is replaced by the
         .               // real drop glue by the compiler.
         .           
         .               // SAFETY: see comment above
         .               unsafe { drop_in_place(to_drop) }
         .           }
         .           
         .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
         .                       return;
         .                   }
         .               }
         .           
         .               // Direct swapping, for the cases not going through the block optimization.
         .               // SAFETY: the caller must guarantee that `x` and `y` are valid
         .               // for writes, properly aligned, and non-overlapping.
         .               unsafe {
       499 ( 0.00%)          let z = read(x);
         .                   copy_nonoverlapping(y, x, 1);
         .                   write(y, z);
         .               }
         .           }
         .           
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .               // SAFETY: the caller must guarantee that `src` is valid for reads.
         .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
         .               // the stack as a separate allocated object.
         .               //
         .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
         .               // to be properly initialized.
         .               unsafe {
 1,059,768 ( 0.02%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
12,466,380 ( 0.22%)          tmp.assume_init()
         .               }
         .           }
         .           
         .           /// Reads the value from `src` without moving it. This leaves the
         .           /// memory in `src` unchanged.
         .           ///
         .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
         .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
         .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
         .               // `dst` cannot overlap `src` because the caller has mutable access
         .               // to `dst` while `src` is owned by this function.
         .               unsafe {
72,373,480 ( 1.30%)          copy_nonoverlapping(&src as *const T, dst, 1);
         .                   intrinsics::forget(src);
         .               }
         .           }
         .           
         .           /// Overwrites a memory location with the given value without reading or
         .           /// dropping the old value.
         .           ///
         .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
         .               if stride == 1 {
         .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
         .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
         .                   //
         .                   //    round_up_to_next_alignment(p, a) - p
         .                   //
         .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
         .                   // for LLVM to be able to utilize the various optimizations it knows about.
     3,433 ( 0.00%)          return wrapping_sub(
     7,810 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
         .                       p as usize,
         .                   );
         .               }
         .           
         .               let pmoda = p as usize & a_minus_one;
         .               if pmoda == 0 {
         .                   // Already aligned. Yay!
         .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
         .           /// assert!(std::ptr::eq(
         .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
         .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
         .           /// ));
         .           /// ```
         .           #[stable(feature = "ptr_eq", since = "1.17.0")]
         .           #[inline]
         .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
 7,423,976 ( 0.13%)      a == b
         .           }
         .           
         .           /// Hash a raw pointer.
         .           ///
         .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
         .           /// by its address rather than the value it points to
         .           /// (which is what the `Hash for &T` implementation does).
         .           ///
-- line 1364 ----------------------------------------

 9,824,906 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .                   RingBuffer { data: VecDeque::new(), offset: 0 }
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
        .                   self.data.is_empty()
        .               }
        .           
        .               pub fn push(&mut self, value: T) -> usize {
  599,652 ( 0.01%)          let index = self.offset + self.data.len();
1,857,056 ( 0.03%)          self.data.push_back(value);
        .                   index
        .               }
        .           
        .               pub fn clear(&mut self) {
       34 ( 0.00%)          self.data.clear();
        .               }
        .           
        .               pub fn index_of_first(&self) -> usize {
        .                   self.offset
        .               }
        .           
        .               pub fn first(&self) -> Option<&T> {
        .                   self.data.front()
        .               }
        .           
        .               pub fn first_mut(&mut self) -> Option<&mut T> {
        .                   self.data.front_mut()
        .               }
        .           
1,499,130 ( 0.03%)      pub fn pop_first(&mut self) -> Option<T> {
        .                   let first = self.data.pop_front()?;
1,199,304 ( 0.02%)          self.offset += 1;
1,798,956 ( 0.03%)          Some(first)
2,098,782 ( 0.04%)      }
        .           
        .               pub fn last(&self) -> Option<&T> {
        .                   self.data.back()
        .               }
        .           
        .               pub fn last_mut(&mut self) -> Option<&mut T> {
        .                   self.data.back_mut()
        .               }
-- line 63 ----------------------------------------

1,499,130 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
5,023,411 ( 0.09%)                  if value < 0x80 {
        .                               unsafe {
1,875,374 ( 0.03%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
2,514,310 ( 0.05%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
3,180,036 ( 0.06%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
1,279,754 ( 0.02%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
2,122,276 ( 0.04%)              let byte = slice[*position];
1,061,138 ( 0.02%)              *position += 1;
1,061,138 ( 0.02%)              if (byte & 0x80) == 0 {
    1,276 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,134 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  763,545 ( 0.01%)                  let byte = slice[*position];
  502,060 ( 0.01%)                  *position += 1;
  509,030 ( 0.01%)                  if (byte & 0x80) == 0 {
  420,492 ( 0.01%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

1,405,769 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
2,349,421,678 (42.17%)  events annotated

