time:   0.002; rss:   60MB ->   63MB (   +4MB)	parse_crate
time:   0.000; rss:   63MB ->   63MB (   +0MB)	attributes_injection
time:   0.000; rss:   63MB ->   63MB (   +0MB)	plugin_loading
time:   0.000; rss:   63MB ->   63MB (   +0MB)	plugin_registration
time:   0.000; rss:   63MB ->   67MB (   +3MB)	crate_injection
time:   0.731; rss:   67MB ->  150MB (  +83MB)	expand_crate
time:   0.000; rss:  150MB ->  150MB (   +0MB)	check_unused_macros
time:   0.731; rss:   67MB ->  150MB (  +83MB)	macro_expand_crate
time:   0.000; rss:  150MB ->  150MB (   +0MB)	maybe_building_test_harness
time:   0.007; rss:  150MB ->  150MB (   +0MB)	AST_validation
time:   0.000; rss:  150MB ->  150MB (   +0MB)	maybe_create_a_macro_crate
time:   0.001; rss:  150MB ->  150MB (   +0MB)	finalize_imports
time:   0.001; rss:  150MB ->  150MB (   +0MB)	resolve_access_levels
time:   0.003; rss:  150MB ->  150MB (   +0MB)	finalize_macro_resolutions
time:   0.056; rss:  150MB ->  160MB (  +10MB)	late_resolve_crate
time:   0.000; rss:  160MB ->  160MB (   +0MB)	resolve_main
time:   0.004; rss:  160MB ->  160MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  160MB ->  160MB (   +0MB)	resolve_report_errors
time:   0.004; rss:  160MB ->  160MB (   +0MB)	resolve_postprocess
time:   0.070; rss:  150MB ->  160MB (  +10MB)	resolve_crate
time:   0.005; rss:  160MB ->  160MB (   +0MB)	complete_gated_feature_checking
time:   0.814; rss:   63MB ->  160MB (  +96MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpBC2Z9R/target/debug/deps/goblin-594695118f0f5be2.d","emit":"dep-info"}
time:   0.000; rss:  160MB ->  160MB (   +0MB)	prepare_outputs
time:   0.136; rss:  160MB ->  193MB (  +33MB)	hir_lowering
time:   0.016; rss:  193MB ->  193MB (   +0MB)	early_lint_checks
time:   0.019; rss:  193MB ->  193MB (   +0MB)	drop_ast
time:   0.001; rss:  185MB ->  185MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  185MB ->  185MB (   +0MB)	looking_for_entry_point
time:   0.001; rss:  185MB ->  185MB (   +0MB)	looking_for_derive_registrar
time:   0.054; rss:  185MB ->  192MB (   +7MB)	misc_checking_1
time:   0.052; rss:  192MB ->  209MB (  +17MB)	type_collecting
time:   0.002; rss:  209MB ->  209MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  209MB ->  209MB (   +0MB)	unsafety_checking
time:   0.034; rss:  209MB ->  226MB (  +17MB)	coherence_checking
time:   0.170; rss:  226MB ->  230MB (   +4MB)	wf_checking
time:   0.077; rss:  230MB ->  235MB (   +5MB)	item_types_checking
time:   1.350; rss:  235MB ->  264MB (  +29MB)	item_bodies_checking
time:   1.687; rss:  192MB ->  264MB (  +73MB)	type_check_crate
time:   0.138; rss:  264MB ->  265MB (   +1MB)	match_checking
time:   0.020; rss:  265MB ->  265MB (   +0MB)	liveness_and_intrinsic_checking
time:   0.159; rss:  264MB ->  265MB (   +1MB)	misc_checking_2
time:   1.057; rss:  265MB ->  302MB (  +36MB)	MIR_borrow_checking
time:   0.009; rss:  302MB ->  302MB (   +1MB)	MIR_effect_checking
time:   0.000; rss:  302MB ->  302MB (   +0MB)	layout_testing
{"message":"field is never read: `count`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/elf/dynamic.rs","byte_start":13578,"byte_end":13590,"line_start":406,"line_end":406,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        count: usize,","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Dynamic` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/elf/dynamic.rs","byte_start":13478,"byte_end":13483,"line_start":402,"line_end":402,"column_start":14,"column_end":19,"is_primary":true,"text":[{"text":"    #[derive(Debug)]","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/elf/dynamic.rs","byte_start":13478,"byte_end":13483,"line_start":402,"line_end":402,"column_start":14,"column_end":19,"is_primary":false,"text":[{"text":"    #[derive(Debug)]","highlight_start":14,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":1},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `count`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/elf/dynamic.rs:406:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m406\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        count: usize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Dynamic` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/elf/dynamic.rs:402:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m402\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    #[derive(Debug)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"field is never read: `ctx`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/mach/segment.rs","byte_start":16769,"byte_end":16788,"line_start":523,"line_end":523,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    ctx: container::Ctx,","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Segments` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/mach/segment.rs","byte_start":16636,"byte_end":16641,"line_start":519,"line_end":519,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Debug, Default)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/mach/segment.rs","byte_start":16636,"byte_end":16641,"line_start":519,"line_end":519,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Debug, Default)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":34},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `ctx`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mach/segment.rs:523:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    ctx: container::Ctx,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Segments` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/mach/segment.rs:519:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Default)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"field is never read: `index`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/archive/mod.rs","byte_start":16696,"byte_end":16712,"line_start":403,"line_end":403,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    index: Index<'a>,","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Archive` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/archive/mod.rs","byte_start":16491,"byte_end":16496,"line_start":398,"line_end":398,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/archive/mod.rs","byte_start":16491,"byte_end":16496,"line_start":398,"line_end":398,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":34},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `index`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/archive/mod.rs:403:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m403\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    index: Index<'a>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Archive` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/archive/mod.rs:398:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m398\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"field is never read: `sysv_name_index`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/archive/mod.rs","byte_start":16718,"byte_end":16748,"line_start":404,"line_end":404,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    sysv_name_index: NameIndex<'a>,","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Archive` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/archive/mod.rs","byte_start":16491,"byte_end":16496,"line_start":398,"line_end":398,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/archive/mod.rs","byte_start":16491,"byte_end":16496,"line_start":398,"line_end":398,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":34},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `sysv_name_index`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/archive/mod.rs:404:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m404\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    sysv_name_index: NameIndex<'a>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Archive` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/archive/mod.rs:398:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m398\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"field is never read: `index_type`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/archive/mod.rs","byte_start":17135,"byte_end":17156,"line_start":413,"line_end":413,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"    index_type: IndexType,","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Archive` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/archive/mod.rs","byte_start":16491,"byte_end":16496,"line_start":398,"line_end":398,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/archive/mod.rs","byte_start":16491,"byte_end":16496,"line_start":398,"line_end":398,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":34},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `index_type`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/archive/mod.rs:413:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    index_type: IndexType,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Archive` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/archive/mod.rs:398:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m398\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
time:   0.020; rss:  303MB ->  304MB (   +1MB)	death_checking
time:   0.000; rss:  304MB ->  304MB (   +0MB)	unused_lib_feature_checking
time:   0.037; rss:  304MB ->  305MB (   +1MB)	crate_lints
time:   0.028; rss:  305MB ->  305MB (   +0MB)	module_lints
time:   0.064; rss:  304MB ->  305MB (   +1MB)	lint_checking
time:   0.041; rss:  305MB ->  305MB (   +0MB)	privacy_checking_modules
time:   0.157; rss:  302MB ->  305MB (   +3MB)	misc_checking_3
time:   0.036; rss:  305MB ->  314MB (   +9MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpBC2Z9R/target/debug/deps/libgoblin-594695118f0f5be2.rmeta","emit":"metadata"}
time:   0.001; rss:  314MB ->  314MB (   +0MB)	codegen_crate
time:   0.000; rss:  314MB ->  314MB (   +0MB)	serialize_dep_graph
time:   0.029; rss:  314MB ->  255MB (  -59MB)	free_global_ctxt
time:   0.000; rss:  255MB ->  255MB (   +0MB)	join_worker_thread
time:   0.000; rss:  255MB ->  255MB (   +0MB)	finish_ongoing_codegen
time:   0.000; rss:  255MB ->  255MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  255MB ->  255MB (   +0MB)	serialize_work_products
time:   0.000; rss:  255MB ->  255MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.000; rss:  255MB ->  255MB (   +0MB)	link_binary_remove_temps
time:   0.000; rss:  255MB ->  255MB (   +0MB)	link_binary
time:   0.000; rss:  255MB ->  255MB (   +0MB)	link_crate
time:   0.000; rss:  255MB ->  255MB (   +0MB)	link
{"message":"5 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 5 warnings emitted\u001b[0m\n\n"}
time:   4.204; rss:   46MB ->  254MB ( +208MB)	total
