time:   0.009; rss:   61MB ->   63MB (   +2MB)	parse_crate
time:   0.000; rss:   63MB ->   63MB (   +0MB)	attributes_injection
time:   0.000; rss:   63MB ->   63MB (   +0MB)	plugin_loading
time:   0.000; rss:   63MB ->   63MB (   +0MB)	plugin_registration
time:   0.000; rss:   66MB ->   66MB (   +0MB)	crate_injection
time:   0.023; rss:   66MB ->   99MB (  +34MB)	expand_crate
time:   0.000; rss:   99MB ->   99MB (   +0MB)	check_unused_macros
time:   0.023; rss:   66MB ->   99MB (  +34MB)	macro_expand_crate
time:   0.000; rss:   99MB ->   99MB (   +0MB)	maybe_building_test_harness
time:   0.000; rss:   99MB ->   99MB (   +0MB)	AST_validation
time:   0.000; rss:   99MB ->   99MB (   +0MB)	maybe_create_a_macro_crate
time:   0.000; rss:   99MB ->   99MB (   +0MB)	finalize_imports
time:   0.000; rss:   99MB ->   99MB (   +0MB)	resolve_access_levels
time:   0.000; rss:   99MB ->   99MB (   +0MB)	finalize_macro_resolutions
time:   0.003; rss:   99MB ->  102MB (   +3MB)	late_resolve_crate
time:   0.000; rss:  102MB ->  102MB (   +0MB)	resolve_main
time:   0.000; rss:  102MB ->  102MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  102MB ->  102MB (   +0MB)	resolve_report_errors
time:   0.000; rss:  102MB ->  102MB (   +0MB)	resolve_postprocess
time:   0.003; rss:   99MB ->  102MB (   +3MB)	resolve_crate
time:   0.000; rss:  102MB ->  102MB (   +0MB)	complete_gated_feature_checking
time:   0.028; rss:   63MB ->  102MB (  +39MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpxFZcnR/target/debug/deps/buf_redux-8f673f65f2a2f51e.d","emit":"dep-info"}
time:   0.000; rss:  102MB ->  102MB (   +0MB)	prepare_outputs
time:   0.005; rss:  102MB ->  106MB (   +4MB)	hir_lowering
{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"src/policy.rs","byte_start":1010,"byte_end":1011,"line_start":25,"line_end":25,"column_start":57,"column_end":58,"is_primary":true,"text":[{"text":"    ($val:expr) => ( return $crate::policy::DoRead($val); );","highlight_start":57,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/policy.rs","byte_start":4853,"byte_end":4868,"line_start":118,"line_end":118,"column_start":37,"column_end":52,"is_primary":false,"text":[{"text":"        if buffer.len() >= self.0 { do_read!(false) }","highlight_start":37,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"do_read!","def_site_span":{"file_name":"src/policy.rs","byte_start":931,"byte_end":1047,"line_start":24,"line_end":27,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! do_read (","highlight_start":1,"highlight_end":23},{"text":"    ($val:expr) => ( return $crate::policy::DoRead($val); );","highlight_start":1,"highlight_end":61},{"text":"    () => ( do_read!(true); )","highlight_start":1,"highlight_end":30},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `do_read`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/policy.rs:25:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    ($val:expr) => ( return $crate::policy::DoRead($val); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if buffer.len() >= self.0 { do_read!(false) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `do_read`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `do_read` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
time:   0.001; rss:  106MB ->  106MB (   +0MB)	early_lint_checks
time:   0.000; rss:  106MB ->  106MB (   +0MB)	drop_ast
time:   0.000; rss:  106MB ->  106MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  110MB ->  110MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  110MB ->  110MB (   +0MB)	looking_for_derive_registrar
time:   0.002; rss:  110MB ->  110MB (   +0MB)	misc_checking_1
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":48238,"byte_end":48276,"line_start":1273,"line_end":1273,"column_start":42,"column_end":80,"is_primary":true,"text":[{"text":"    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut Write, &mut Buffer, io::Error)>>","highlight_start":42,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(bare_trait_objects)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":48238,"byte_end":48238,"line_start":1273,"line_end":1273,"column_start":42,"column_end":42,"is_primary":true,"text":[{"text":"    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut Write, &mut Buffer, io::Error)>>","highlight_start":42,"highlight_end":42}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":48276,"byte_end":48276,"line_start":1273,"line_end":1273,"column_start":80,"column_end":80,"is_primary":true,"text":[{"text":"    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut Write, &mut Buffer, io::Error)>>","highlight_start":80,"highlight_end":80}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:1273:42\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut Write, &mut Buffer, io::Error)>>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(bare_trait_objects)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut Write, &mut Buffer, io::Error)>>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    static DROP_ERR_HANDLER: RefCell<Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mFn(&mut Write, &mut Buffer, io::Error)>>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":48246,"byte_end":48251,"line_start":1273,"line_end":1273,"column_start":50,"column_end":55,"is_primary":true,"text":[{"text":"    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut Write, &mut Buffer, io::Error)>>","highlight_start":50,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":48246,"byte_end":48246,"line_start":1273,"line_end":1273,"column_start":50,"column_end":50,"is_primary":true,"text":[{"text":"    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut Write, &mut Buffer, io::Error)>>","highlight_start":50,"highlight_end":50}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":48251,"byte_end":48251,"line_start":1273,"line_end":1273,"column_start":55,"column_end":55,"is_primary":true,"text":[{"text":"    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut Write, &mut Buffer, io::Error)>>","highlight_start":55,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:1273:50\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut Write, &mut Buffer, io::Error)>>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut Write, &mut Buffer, io::Error)>>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    static DROP_ERR_HANDLER: RefCell<Box<Fn(&mut \u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mWrite, &mut Buffer, io::Error)>>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":48734,"byte_end":48739,"line_start":1286,"line_end":1286,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"where F: Fn(&mut Write, &mut Buffer, io::Error)","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":48734,"byte_end":48734,"line_start":1286,"line_end":1286,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"where F: Fn(&mut Write, &mut Buffer, io::Error)","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":48739,"byte_end":48739,"line_start":1286,"line_end":1286,"column_start":23,"column_end":23,"is_primary":true,"text":[{"text":"where F: Fn(&mut Write, &mut Buffer, io::Error)","highlight_start":23,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:1286:18\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mwhere F: Fn(&mut Write, &mut Buffer, io::Error)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mwhere F: Fn(&mut Write, &mut Buffer, io::Error)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mwhere F: Fn(&mut \u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mWrite, &mut Buffer, io::Error)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":16203,"byte_end":16212,"line_start":373,"line_end":373,"column_start":45,"column_end":54,"is_primary":true,"text":[{"text":"    pub fn boxed<'a>(self) -> BufReader<Box<Read + 'a>, P> where R: 'a {","highlight_start":45,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":16203,"byte_end":16203,"line_start":373,"line_end":373,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn boxed<'a>(self) -> BufReader<Box<Read + 'a>, P> where R: 'a {","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":16212,"byte_end":16212,"line_start":373,"line_end":373,"column_start":54,"column_end":54,"is_primary":true,"text":[{"text":"    pub fn boxed<'a>(self) -> BufReader<Box<Read + 'a>, P> where R: 'a {","highlight_start":54,"highlight_end":54}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:373:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn boxed<'a>(self) -> BufReader<Box<Read + 'a>, P> where R: 'a {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    pub fn boxed<'a>(self) -> BufReader<Box<Read + 'a>, P> where R: 'a {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    pub fn boxed<'a>(self) -> BufReader<Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mRead + 'a>, P> where R: 'a {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":34551,"byte_end":34563,"line_start":871,"line_end":871,"column_start":32,"column_end":44,"is_primary":true,"text":[{"text":"    fn cause(&self) -> Option<&error::Error> {","highlight_start":32,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":34551,"byte_end":34551,"line_start":871,"line_end":871,"column_start":32,"column_end":32,"is_primary":true,"text":[{"text":"    fn cause(&self) -> Option<&error::Error> {","highlight_start":32,"highlight_end":32}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":34563,"byte_end":34563,"line_start":871,"line_end":871,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"    fn cause(&self) -> Option<&error::Error> {","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:871:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m871\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn cause(&self) -> Option<&error::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m871\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn cause(&self) -> Option<&error::Error> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m871\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn cause(&self) -> Option<&\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0merror::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
time:   0.003; rss:  110MB ->  118MB (   +8MB)	type_collecting
time:   0.000; rss:  118MB ->  118MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  118MB ->  118MB (   +0MB)	unsafety_checking
time:   0.008; rss:  118MB ->  137MB (  +19MB)	coherence_checking
time:   0.013; rss:  137MB ->  139MB (   +2MB)	wf_checking
time:   0.004; rss:  139MB ->  143MB (   +4MB)	item_types_checking
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":16255,"byte_end":16264,"line_start":374,"line_end":374,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"        let inner: Box<Read + 'a> = Box::new(self.inner);","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":16255,"byte_end":16255,"line_start":374,"line_end":374,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"        let inner: Box<Read + 'a> = Box::new(self.inner);","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":16264,"byte_end":16264,"line_start":374,"line_end":374,"column_start":33,"column_end":33,"is_primary":true,"text":[{"text":"        let inner: Box<Read + 'a> = Box::new(self.inner);","highlight_start":33,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:374:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let inner: Box<Read + 'a> = Box::new(self.inner);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let inner: Box<Read + 'a> = Box::new(self.inner);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let inner: Box<\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mRead + 'a> = Box::new(self.inner);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
time:   0.047; rss:  143MB ->  147MB (   +4MB)	item_bodies_checking
time:   0.075; rss:  110MB ->  147MB (  +38MB)	type_check_crate
time:   0.001; rss:  147MB ->  147MB (   +0MB)	match_checking
time:   0.001; rss:  147MB ->  148MB (   +1MB)	liveness_and_intrinsic_checking
time:   0.002; rss:  147MB ->  148MB (   +1MB)	misc_checking_2
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":41325,"byte_end":41332,"line_start":1050,"line_end":1050,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"            let mut buf = unsafe { self.buf.write_buf() };","highlight_start":17,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":41325,"byte_end":41329,"line_start":1050,"line_end":1050,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let mut buf = unsafe { self.buf.write_buf() };","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:1050:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1050\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let mut buf = unsafe { self.buf.write_buf() };\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":41929,"byte_end":41936,"line_start":1068,"line_end":1068,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"            let mut buf = self.buf.write_buf();","highlight_start":17,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":41929,"byte_end":41933,"line_start":1068,"line_end":1068,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let mut buf = self.buf.write_buf();","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:1068:17\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1068\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let mut buf = self.buf.write_buf();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
time:   0.050; rss:  148MB ->  156MB (   +8MB)	MIR_borrow_checking
time:   0.000; rss:  156MB ->  156MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  156MB ->  156MB (   +0MB)	layout_testing
time:   0.001; rss:  157MB ->  157MB (   +0MB)	death_checking
time:   0.000; rss:  157MB ->  157MB (   +0MB)	unused_lib_feature_checking
time:   0.002; rss:  157MB ->  158MB (   +1MB)	crate_lints
time:   0.001; rss:  158MB ->  158MB (   +0MB)	module_lints
time:   0.003; rss:  157MB ->  158MB (   +1MB)	lint_checking
time:   0.002; rss:  158MB ->  158MB (   +0MB)	privacy_checking_modules
time:   0.007; rss:  156MB ->  158MB (   +2MB)	misc_checking_3
time:   0.002; rss:  158MB ->  159MB (   +1MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpxFZcnR/target/debug/deps/libbuf_redux-8f673f65f2a2f51e.rmeta","emit":"metadata"}
time:   0.000; rss:  159MB ->  159MB (   +0MB)	codegen_crate
time:   0.000; rss:  159MB ->  159MB (   +0MB)	serialize_dep_graph
time:   0.004; rss:  159MB ->  107MB (  -52MB)	free_global_ctxt
time:   0.000; rss:  107MB ->  107MB (   +0MB)	join_worker_thread
time:   0.000; rss:  107MB ->  107MB (   +0MB)	finish_ongoing_codegen
time:   0.000; rss:  107MB ->  107MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  107MB ->  107MB (   +0MB)	serialize_work_products
time:   0.000; rss:  107MB ->  107MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.000; rss:  107MB ->  107MB (   +0MB)	link_binary_remove_temps
time:   0.000; rss:  107MB ->  107MB (   +0MB)	link_binary
time:   0.000; rss:  107MB ->  107MB (   +0MB)	link_crate
time:   0.000; rss:  107MB ->  107MB (   +0MB)	link
{"message":"9 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 9 warnings emitted\u001b[0m\n\n"}
time:   0.193; rss:   46MB ->  106MB (  +60MB)	total
