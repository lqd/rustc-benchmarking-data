time:   0.003; rss:   59MB ->   60MB (   +1MB)	parse_crate
time:   0.000; rss:   60MB ->   60MB (   +0MB)	attributes_injection
time:   0.000; rss:   61MB ->   61MB (   +0MB)	plugin_loading
time:   0.000; rss:   61MB ->   61MB (   +0MB)	plugin_registration
time:   0.000; rss:   61MB ->   61MB (   +0MB)	crate_injection
time:   0.183; rss:   61MB ->  123MB (  +62MB)	expand_crate
time:   0.000; rss:  123MB ->  123MB (   +0MB)	check_unused_macros
time:   0.183; rss:   61MB ->  123MB (  +62MB)	macro_expand_crate
time:   0.000; rss:  123MB ->  123MB (   +0MB)	maybe_building_test_harness
time:   0.004; rss:  123MB ->  123MB (   +0MB)	AST_validation
time:   0.000; rss:  123MB ->  123MB (   +0MB)	maybe_create_a_macro_crate
time:   0.001; rss:  123MB ->  123MB (   +0MB)	finalize_imports
time:   0.000; rss:  123MB ->  123MB (   +0MB)	resolve_access_levels
time:   0.003; rss:  123MB ->  123MB (   +0MB)	finalize_macro_resolutions
time:   0.034; rss:  123MB ->  129MB (   +6MB)	late_resolve_crate
time:   0.000; rss:  129MB ->  129MB (   +0MB)	resolve_main
time:   0.003; rss:  129MB ->  129MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  129MB ->  129MB (   +0MB)	resolve_report_errors
time:   0.002; rss:  129MB ->  129MB (   +0MB)	resolve_postprocess
time:   0.044; rss:  123MB ->  129MB (   +6MB)	resolve_crate
time:   0.003; rss:  129MB ->  129MB (   +0MB)	complete_gated_feature_checking
time:   0.234; rss:   61MB ->  129MB (  +68MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpQFTSOd/target/debug/deps/regalloc-3408ff833321d7b7.d","emit":"dep-info"}
time:   0.000; rss:  129MB ->  129MB (   +0MB)	prepare_outputs
time:   0.069; rss:  129MB ->  145MB (  +17MB)	hir_lowering
time:   0.010; rss:  145MB ->  145MB (   +0MB)	early_lint_checks
time:   0.006; rss:  145MB ->  145MB (   +0MB)	drop_ast
time:   0.000; rss:  142MB ->  142MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  146MB ->  146MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  146MB ->  146MB (   +0MB)	looking_for_derive_registrar
time:   0.017; rss:  146MB ->  146MB (   +0MB)	misc_checking_1
time:   0.029; rss:  146MB ->  163MB (  +17MB)	type_collecting
time:   0.001; rss:  163MB ->  163MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  163MB ->  163MB (   +0MB)	unsafety_checking
time:   0.013; rss:  163MB ->  179MB (  +16MB)	coherence_checking
time:   0.073; rss:  179MB ->  182MB (   +3MB)	wf_checking
time:   0.011; rss:  182MB ->  182MB (   +0MB)	item_types_checking
time:   0.818; rss:  182MB ->  215MB (  +33MB)	item_bodies_checking
time:   0.946; rss:  146MB ->  215MB (  +69MB)	type_check_crate
time:   0.015; rss:  215MB ->  215MB (   +0MB)	match_checking
time:   0.014; rss:  215MB ->  215MB (   +0MB)	liveness_and_intrinsic_checking
time:   0.030; rss:  215MB ->  215MB (   +0MB)	misc_checking_2
time:   0.677; rss:  215MB ->  243MB (  +28MB)	MIR_borrow_checking
time:   0.002; rss:  243MB ->  243MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  243MB ->  243MB (   +0MB)	layout_testing
{"message":"field is never read: `vreg`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/snapshot.rs","byte_start":796,"byte_end":820,"line_start":20,"line_end":20,"column_start":13,"column_end":37,"is_primary":true,"text":[{"text":"    Spill { vreg: Option<VirtualReg> },","highlight_start":13,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`IRInstKind` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/snapshot.rs","byte_start":681,"byte_end":686,"line_start":17,"line_end":17,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/snapshot.rs","byte_start":681,"byte_end":686,"line_start":17,"line_end":17,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/clone.rs","byte_start":4850,"byte_end":4909,"line_start":139,"line_end":141,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro Clone($item:item) {","highlight_start":1,"highlight_end":1},{"text":"    /* compiler built-in */","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/snapshot.rs","byte_start":688,"byte_end":693,"line_start":17,"line_end":17,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/snapshot.rs","byte_start":688,"byte_end":693,"line_start":17,"line_end":17,"column_start":17,"column_end":22,"is_primary":false,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":1},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `vreg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/snapshot.rs:20:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Spill { vreg: Option<VirtualReg> },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `IRInstKind` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/snapshot.rs:17:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"field is never read: `vreg`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/snapshot.rs","byte_start":837,"byte_end":861,"line_start":21,"line_end":21,"column_start":14,"column_end":38,"is_primary":true,"text":[{"text":"    Reload { vreg: Option<VirtualReg> },","highlight_start":14,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`IRInstKind` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/snapshot.rs","byte_start":681,"byte_end":686,"line_start":17,"line_end":17,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/snapshot.rs","byte_start":681,"byte_end":686,"line_start":17,"line_end":17,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/clone.rs","byte_start":4850,"byte_end":4909,"line_start":139,"line_end":141,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro Clone($item:item) {","highlight_start":1,"highlight_end":30},{"text":"    /* compiler built-in */","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/snapshot.rs","byte_start":688,"byte_end":693,"line_start":17,"line_end":17,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/snapshot.rs","byte_start":688,"byte_end":693,"line_start":17,"line_end":17,"column_start":17,"column_end":22,"is_primary":false,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":34},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `vreg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/snapshot.rs:21:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Reload { vreg: Option<VirtualReg> },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `IRInstKind` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/snapshot.rs:17:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"field is never read: `vreg`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/snapshot.rs","byte_start":876,"byte_end":892,"line_start":22,"line_end":22,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"    Move { vreg: VirtualReg },","highlight_start":12,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`IRInstKind` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/snapshot.rs","byte_start":681,"byte_end":686,"line_start":17,"line_end":17,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/snapshot.rs","byte_start":681,"byte_end":686,"line_start":17,"line_end":17,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/clone.rs","byte_start":4850,"byte_end":4909,"line_start":139,"line_end":141,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro Clone($item:item) {","highlight_start":1,"highlight_end":30},{"text":"    /* compiler built-in */","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/snapshot.rs","byte_start":688,"byte_end":693,"line_start":17,"line_end":17,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/snapshot.rs","byte_start":688,"byte_end":693,"line_start":17,"line_end":17,"column_start":17,"column_end":22,"is_primary":false,"text":[{"text":"#[derive(Clone, Debug)]","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":34},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `vreg`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/snapshot.rs:22:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Move { vreg: VirtualReg },\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `IRInstKind` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/snapshot.rs:17:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Clone, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
time:   0.009; rss:  244MB ->  244MB (   +1MB)	death_checking
time:   0.000; rss:  244MB ->  244MB (   +0MB)	unused_lib_feature_checking
time:   0.015; rss:  244MB ->  246MB (   +2MB)	crate_lints
time:   0.016; rss:  246MB ->  246MB (   +0MB)	module_lints
time:   0.031; rss:  244MB ->  246MB (   +2MB)	lint_checking
time:   0.025; rss:  246MB ->  246MB (   +0MB)	privacy_checking_modules
time:   0.078; rss:  243MB ->  246MB (   +3MB)	misc_checking_3
time:   0.013; rss:  246MB ->  249MB (   +2MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpQFTSOd/target/debug/deps/libregalloc-3408ff833321d7b7.rmeta","emit":"metadata"}
time:   0.000; rss:  249MB ->  249MB (   +0MB)	codegen_crate
time:   0.000; rss:  249MB ->  249MB (   +0MB)	serialize_dep_graph
time:   0.018; rss:  249MB ->  187MB (  -62MB)	free_global_ctxt
time:   0.000; rss:  187MB ->  187MB (   +0MB)	join_worker_thread
time:   0.000; rss:  187MB ->  187MB (   +0MB)	finish_ongoing_codegen
time:   0.000; rss:  187MB ->  187MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  187MB ->  187MB (   +0MB)	serialize_work_products
time:   0.000; rss:  187MB ->  187MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.000; rss:  187MB ->  187MB (   +0MB)	link_binary_remove_temps
time:   0.000; rss:  187MB ->  187MB (   +0MB)	link_binary
time:   0.000; rss:  187MB ->  187MB (   +0MB)	link_crate
time:   0.000; rss:  187MB ->  187MB (   +0MB)	link
{"message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}
time:   2.130; rss:   46MB ->  121MB (  +74MB)	total
