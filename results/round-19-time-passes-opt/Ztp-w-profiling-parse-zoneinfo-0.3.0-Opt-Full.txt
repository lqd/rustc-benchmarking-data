time:   0.000; rss:   56MB ->   59MB (   +3MB)	parse_crate
time:   0.000; rss:   59MB ->   59MB (   +0MB)	attributes_injection
time:   0.000; rss:   59MB ->   59MB (   +0MB)	plugin_loading
time:   0.000; rss:   59MB ->   59MB (   +0MB)	plugin_registration
time:   0.000; rss:   62MB ->   62MB (   +0MB)	crate_injection
time:   0.024; rss:   62MB ->  101MB (  +39MB)	expand_crate
time:   0.000; rss:  101MB ->  101MB (   +0MB)	check_unused_macros
time:   0.024; rss:   62MB ->  101MB (  +39MB)	macro_expand_crate
time:   0.000; rss:  101MB ->  101MB (   +0MB)	maybe_building_test_harness
time:   0.000; rss:  101MB ->  101MB (   +0MB)	AST_validation
time:   0.000; rss:  101MB ->  101MB (   +0MB)	maybe_create_a_macro_crate
time:   0.000; rss:  101MB ->  101MB (   +0MB)	finalize_imports
time:   0.000; rss:  101MB ->  101MB (   +0MB)	resolve_access_levels
time:   0.000; rss:  101MB ->  101MB (   +0MB)	finalize_macro_resolutions
time:   0.006; rss:  101MB ->  104MB (   +3MB)	late_resolve_crate
time:   0.000; rss:  104MB ->  104MB (   +0MB)	resolve_main
time:   0.000; rss:  104MB ->  104MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  104MB ->  104MB (   +0MB)	resolve_report_errors
time:   0.000; rss:  104MB ->  104MB (   +0MB)	resolve_postprocess
time:   0.007; rss:  101MB ->  104MB (   +3MB)	resolve_crate
time:   0.000; rss:  104MB ->  104MB (   +0MB)	complete_gated_feature_checking
time:   0.032; rss:   59MB ->  104MB (  +45MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmptLYWdO/target/release/deps/parse_zoneinfo-6e8ad81c172d1c93.d","emit":"dep-info"}
time:   0.000; rss:  104MB ->  104MB (   +0MB)	prepare_outputs
time:   0.011; rss:  104MB ->  109MB (   +5MB)	hir_lowering
time:   0.002; rss:  109MB ->  109MB (   +0MB)	early_lint_checks
time:   0.001; rss:  109MB ->  109MB (   +0MB)	drop_ast
time:   0.000; rss:  108MB ->  108MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  112MB ->  112MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  112MB ->  112MB (   +0MB)	looking_for_derive_registrar
time:   0.003; rss:  112MB ->  112MB (   +0MB)	misc_checking_1
time:   0.007; rss:  112MB ->  129MB (  +17MB)	type_collecting
time:   0.000; rss:  129MB ->  129MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  129MB ->  129MB (   +0MB)	unsafety_checking
time:   0.013; rss:  129MB ->  149MB (  +19MB)	coherence_checking
time:   0.015; rss:  149MB ->  150MB (   +2MB)	wf_checking
time:   0.007; rss:  150MB ->  152MB (   +2MB)	item_types_checking
time:   0.115; rss:  152MB ->  165MB (  +13MB)	item_bodies_checking
time:   0.158; rss:  112MB ->  165MB (  +53MB)	type_check_crate
time:   0.004; rss:  165MB ->  166MB (   +0MB)	match_checking
time:   0.001; rss:  166MB ->  166MB (   +0MB)	liveness_and_intrinsic_checking
time:   0.005; rss:  165MB ->  166MB (   +0MB)	misc_checking_2
time:   0.094; rss:  166MB ->  171MB (   +5MB)	MIR_borrow_checking
time:   0.001; rss:  171MB ->  171MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  171MB ->  171MB (   +0MB)	layout_testing
time:   0.001; rss:  171MB ->  172MB (   +1MB)	death_checking
time:   0.000; rss:  172MB ->  172MB (   +0MB)	unused_lib_feature_checking
time:   0.003; rss:  172MB ->  172MB (   +0MB)	crate_lints
{"message":"unused return value of `std::mem::replace` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/transitions.rs","byte_start":14117,"byte_end":14160,"line_start":337,"line_end":337,"column_start":25,"column_end":68,"is_primary":true,"text":[{"text":"                        replace(start_utc_offset, timespan.offset);","highlight_start":25,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_must_use)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if you don't need the old value, you can just assign the new value directly","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `std::mem::replace` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transitions.rs:337:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        replace(start_utc_offset, timespan.offset);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_must_use)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if you don't need the old value, you can just assign the new value directly\u001b[0m\n\n"}
{"message":"unused return value of `std::mem::replace` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/transitions.rs","byte_start":14185,"byte_end":14224,"line_start":338,"line_end":338,"column_start":25,"column_end":64,"is_primary":true,"text":[{"text":"                        replace(start_dst_offset, *dst_offset);","highlight_start":25,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you don't need the old value, you can just assign the new value directly","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `std::mem::replace` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transitions.rs:338:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m338\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        replace(start_dst_offset, *dst_offset);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if you don't need the old value, you can just assign the new value directly\u001b[0m\n\n"}
{"message":"unused return value of `std::mem::replace` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/transitions.rs","byte_start":14249,"byte_end":14567,"line_start":339,"line_end":346,"column_start":25,"column_end":27,"is_primary":true,"text":[{"text":"                        replace(","highlight_start":25,"highlight_end":33},{"text":"                            start_zone_id,","highlight_start":1,"highlight_end":43},{"text":"                            Some(","highlight_start":1,"highlight_end":34},{"text":"                                timespan","highlight_start":1,"highlight_end":41},{"text":"                                    .format","highlight_start":1,"highlight_end":44},{"text":"                                    .format(*dst_offset, earliest_rule.letters.as_ref()),","highlight_start":1,"highlight_end":90},{"text":"                            ),","highlight_start":1,"highlight_end":31},{"text":"                        );","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you don't need the old value, you can just assign the new value directly","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `std::mem::replace` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transitions.rs:339:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m339\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        replace(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m340\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            start_zone_id,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Some(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m342\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                timespan\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            ),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|__________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if you don't need the old value, you can just assign the new value directly\u001b[0m\n\n"}
{"message":"unused return value of `std::mem::replace` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/transitions.rs","byte_start":14816,"byte_end":15134,"line_start":353,"line_end":360,"column_start":25,"column_end":27,"is_primary":true,"text":[{"text":"                        replace(","highlight_start":25,"highlight_end":33},{"text":"                            start_zone_id,","highlight_start":1,"highlight_end":43},{"text":"                            Some(","highlight_start":1,"highlight_end":34},{"text":"                                timespan","highlight_start":1,"highlight_end":41},{"text":"                                    .format","highlight_start":1,"highlight_end":44},{"text":"                                    .format(*dst_offset, earliest_rule.letters.as_ref()),","highlight_start":1,"highlight_end":90},{"text":"                            ),","highlight_start":1,"highlight_end":31},{"text":"                        );","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you don't need the old value, you can just assign the new value directly","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `std::mem::replace` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transitions.rs:353:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        replace(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m354\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            start_zone_id,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Some(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                timespan\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m359\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            ),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|__________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if you don't need the old value, you can just assign the new value directly\u001b[0m\n\n"}
time:   0.008; rss:  172MB ->  177MB (   +5MB)	module_lints
time:   0.011; rss:  172MB ->  177MB (   +5MB)	lint_checking
time:   0.004; rss:  177MB ->  177MB (   +0MB)	privacy_checking_modules
time:   0.018; rss:  171MB ->  177MB (   +6MB)	misc_checking_3
time:   0.017; rss:  177MB ->  179MB (   +2MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmptLYWdO/target/release/deps/libparse_zoneinfo-6e8ad81c172d1c93.rmeta","emit":"metadata"}
time:   0.000; rss:  179MB ->  179MB (   +0MB)	monomorphization_collector_root_collections
time:   0.099; rss:  179MB ->  192MB (  +14MB)	monomorphization_collector_graph_walk
time:   0.019; rss:  192MB ->  194MB (   +2MB)	partition_and_assert_distinct_symbols
time:   0.000; rss:  194MB ->  194MB (   +0MB)	find_cgu_reuse
time:   0.300; rss:  194MB ->  255MB (  +61MB)	codegen_to_LLVM_IR
time:   0.422; rss:  179MB ->  255MB (  +76MB)	codegen_crate
time:   0.000; rss:  255MB ->  255MB (   +0MB)	serialize_dep_graph
time:   0.021; rss:  255MB ->  187MB (  -68MB)	free_global_ctxt
time:   0.017; rss:  195MB ->  199MB (   +5MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.12)
time:   0.035; rss:  194MB ->  203MB (   +8MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.11)
time:   0.056; rss:  195MB ->  206MB (  +11MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.2)
time:   0.054; rss:  197MB ->  206MB (   +9MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.14)
time:   0.068; rss:  194MB ->  206MB (  +13MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.3)
time:   0.063; rss:  197MB ->  207MB (  +10MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.13)
time:   0.069; rss:  200MB ->  209MB (   +9MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.8)
time:   0.083; rss:  199MB ->  211MB (  +12MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.5)
time:   0.100; rss:  199MB ->  211MB (  +13MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.10)
time:   0.097; rss:  203MB ->  213MB (  +10MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.15)
time:   0.123; rss:  200MB ->  214MB (  +13MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.7)
time:   0.152; rss:  197MB ->  214MB (  +17MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.6)
time:   0.147; rss:  199MB ->  214MB (  +15MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.0)
time:   0.162; rss:  200MB ->  214MB (  +14MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.9)
time:   0.218; rss:  203MB ->  216MB (  +13MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.4)
time:   0.285; rss:  203MB ->  217MB (  +14MB)	LLVM_lto_optimize(parse_zoneinfo.2d913d6f-cgu.1)
time:   1.059; rss:  205MB ->  214MB (   +9MB)	LLVM_passes(crate)
time:   0.000; rss:  214MB ->  214MB (   +0MB)	join_worker_thread
time:   0.784; rss:  187MB ->  214MB (  +27MB)	finish_ongoing_codegen
time:   0.000; rss:  214MB ->  214MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  214MB ->  214MB (   +0MB)	serialize_work_products
time:   0.000; rss:  214MB ->  214MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.002; rss:  214MB ->  215MB (   +1MB)	link_rlib
{"artifact":"/usr/home/liquid/tmp/.tmptLYWdO/target/release/deps/libparse_zoneinfo-6e8ad81c172d1c93.rlib","emit":"link"}
time:   0.000; rss:  215MB ->  215MB (   +0MB)	link_binary_remove_temps
time:   0.003; rss:  214MB ->  215MB (   +1MB)	link_binary
time:   0.003; rss:  214MB ->  215MB (   +1MB)	link_crate
time:   0.787; rss:  187MB ->  215MB (  +28MB)	link
{"message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}
time:   1.577; rss:   46MB ->  215MB ( +169MB)	total
