time:   0.004; rss:   62MB ->   64MB (   +2MB)	parse_crate
time:   0.000; rss:   64MB ->   64MB (   +0MB)	attributes_injection
time:   0.000; rss:   64MB ->   64MB (   +0MB)	plugin_loading
time:   0.000; rss:   64MB ->   64MB (   +0MB)	plugin_registration
time:   0.000; rss:   64MB ->   64MB (   +0MB)	crate_injection
time:   0.263; rss:   64MB ->  146MB (  +81MB)	expand_crate
time:   0.000; rss:  146MB ->  146MB (   +0MB)	check_unused_macros
time:   0.263; rss:   64MB ->  146MB (  +81MB)	macro_expand_crate
time:   0.000; rss:  146MB ->  146MB (   +0MB)	maybe_building_test_harness
time:   0.003; rss:  146MB ->  146MB (   +0MB)	AST_validation
time:   0.000; rss:  146MB ->  146MB (   +0MB)	maybe_create_a_macro_crate
time:   0.001; rss:  146MB ->  146MB (   +0MB)	finalize_imports
time:   0.000; rss:  146MB ->  146MB (   +0MB)	resolve_access_levels
time:   0.001; rss:  146MB ->  146MB (   +0MB)	finalize_macro_resolutions
time:   0.035; rss:  146MB ->  154MB (   +9MB)	late_resolve_crate
time:   0.000; rss:  154MB ->  154MB (   +0MB)	resolve_main
time:   0.002; rss:  154MB ->  154MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  154MB ->  154MB (   +0MB)	resolve_report_errors
time:   0.002; rss:  154MB ->  154MB (   +0MB)	resolve_postprocess
time:   0.042; rss:  146MB ->  154MB (   +9MB)	resolve_crate
time:   0.003; rss:  154MB ->  154MB (   +0MB)	complete_gated_feature_checking
time:   0.312; rss:   64MB ->  154MB (  +90MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpogzT8I/target/release/deps/criterion-f5a7b17316e6f699.d","emit":"dep-info"}
time:   0.000; rss:  154MB ->  154MB (   +0MB)	prepare_outputs
time:   0.057; rss:  154MB ->  169MB (  +15MB)	hir_lowering
{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"src/macros_private.rs","byte_start":527,"byte_end":528,"line_start":19,"line_end":19,"column_start":36,"column_end":37,"is_primary":true,"text":[{"text":"        try_else_return!($x, || {});","highlight_start":36,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/html/mod.rs","byte_start":17189,"byte_end":17254,"line_start":533,"line_end":533,"column_start":29,"column_end":94,"is_primary":false,"text":[{"text":"        let mut found_ids = try_else_return!(fs::list_existing_benchmarks(&output_directory));","highlight_start":29,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"try_else_return!","def_site_span":{"file_name":"src/macros_private.rs","byte_start":442,"byte_end":778,"line_start":17,"line_end":31,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! try_else_return {","highlight_start":1,"highlight_end":31},{"text":"    ($x:expr) => {","highlight_start":1,"highlight_end":19},{"text":"        try_else_return!($x, || {});","highlight_start":1,"highlight_end":37},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($x:expr, $el:expr) => {","highlight_start":1,"highlight_end":29},{"text":"        match $x {","highlight_start":1,"highlight_end":19},{"text":"            Ok(x) => x,","highlight_start":1,"highlight_end":24},{"text":"            Err(e) => {","highlight_start":1,"highlight_end":24},{"text":"                crate::error::log_error(&e);","highlight_start":1,"highlight_end":45},{"text":"                let closure = $el;","highlight_start":1,"highlight_end":35},{"text":"                return closure();","highlight_start":1,"highlight_end":34},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/macros_private.rs:19:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        try_else_return!($x, || {});\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/html/mod.rs:533:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m533\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut found_ids = try_else_return!(fs::list_existing_benchmarks(&output_directory));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `try_else_return` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"src/macros_private.rs","byte_start":966,"byte_end":967,"line_start":36,"line_end":36,"column_start":63,"column_end":64,"is_primary":true,"text":[{"text":"        println!(\"Criterion.rs ERROR: {}\", &format!($($arg)*));","highlight_start":63,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/plot/gnuplot_backend/mod.rs","byte_start":7417,"byte_end":7485,"line_start":243,"line_end":243,"column_start":28,"column_end":96,"is_primary":false,"text":[{"text":"                Ok(out) => error!(\"Error in Gnuplot: {}\", String::from_utf8_lossy(&out.stderr)),","highlight_start":28,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"error!","def_site_span":{"file_name":"src/macros_private.rs","byte_start":860,"byte_end":975,"line_start":34,"line_end":38,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! error {","highlight_start":1,"highlight_end":21},{"text":"    ($($arg:tt)*) => (","highlight_start":1,"highlight_end":23},{"text":"        println!(\"Criterion.rs ERROR: {}\", &format!($($arg)*));","highlight_start":1,"highlight_end":64},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/macros_private.rs:36:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        println!(\"Criterion.rs ERROR: {}\", &format!($($arg)*));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/plot/gnuplot_backend/mod.rs:243:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Ok(out) => error!(\"Error in Gnuplot: {}\", String::from_utf8_lossy(&out.stderr)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `error` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"src/macros_private.rs","byte_start":966,"byte_end":967,"line_start":36,"line_end":36,"column_start":63,"column_end":64,"is_primary":true,"text":[{"text":"        println!(\"Criterion.rs ERROR: {}\", &format!($($arg)*));","highlight_start":63,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/plot/gnuplot_backend/mod.rs","byte_start":7513,"byte_end":7580,"line_start":244,"line_end":244,"column_start":27,"column_end":94,"is_primary":false,"text":[{"text":"                Err(e) => error!(\"Got IO error while waiting for Gnuplot to complete: {}\", e),","highlight_start":27,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"error!","def_site_span":{"file_name":"src/macros_private.rs","byte_start":860,"byte_end":975,"line_start":34,"line_end":38,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! error {","highlight_start":1,"highlight_end":21},{"text":"    ($($arg:tt)*) => (","highlight_start":1,"highlight_end":23},{"text":"        println!(\"Criterion.rs ERROR: {}\", &format!($($arg)*));","highlight_start":1,"highlight_end":64},{"text":"    )","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/macros_private.rs:36:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        println!(\"Criterion.rs ERROR: {}\", &format!($($arg)*));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/plot/gnuplot_backend/mod.rs:244:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Err(e) => error!(\"Got IO error while waiting for Gnuplot to complete: {}\", e),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `error` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
time:   0.010; rss:  169MB ->  169MB (   +0MB)	early_lint_checks
time:   0.005; rss:  169MB ->  169MB (   +0MB)	drop_ast
time:   0.000; rss:  166MB ->  166MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  166MB ->  166MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  166MB ->  166MB (   +0MB)	looking_for_derive_registrar
time:   0.017; rss:  166MB ->  170MB (   +4MB)	misc_checking_1
time:   0.022; rss:  170MB ->  178MB (   +8MB)	type_collecting
time:   0.000; rss:  178MB ->  178MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  178MB ->  178MB (   +0MB)	unsafety_checking
time:   0.020; rss:  178MB ->  211MB (  +33MB)	coherence_checking
time:   0.079; rss:  211MB ->  222MB (  +11MB)	wf_checking
time:   0.021; rss:  222MB ->  224MB (   +2MB)	item_types_checking
time:   0.810; rss:  224MB ->  256MB (  +32MB)	item_bodies_checking
time:   0.954; rss:  170MB ->  256MB (  +86MB)	type_check_crate
time:   0.016; rss:  256MB ->  257MB (   +1MB)	match_checking
time:   0.012; rss:  257MB ->  257MB (   +0MB)	liveness_and_intrinsic_checking
time:   0.027; rss:  256MB ->  257MB (   +2MB)	misc_checking_2
time:   0.696; rss:  257MB ->  288MB (  +31MB)	MIR_borrow_checking
time:   0.002; rss:  288MB ->  288MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  288MB ->  288MB (   +0MB)	layout_testing
{"message":"field is never read: `runner_version`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/connection.rs","byte_start":2195,"byte_end":2218,"line_start":67,"line_end":67,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    runner_version: [u8; 3],","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`InnerConnection` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/connection.rs","byte_start":2075,"byte_end":2080,"line_start":62,"line_end":62,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/connection.rs","byte_start":2075,"byte_end":2080,"line_start":62,"line_end":62,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":1},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `runner_version`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/connection.rs:67:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    runner_version: [u8; 3],\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `InnerConnection` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/connection.rs:62:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
time:   0.007; rss:  288MB ->  288MB (   +0MB)	death_checking
time:   0.000; rss:  288MB ->  288MB (   +0MB)	unused_lib_feature_checking
time:   0.017; rss:  288MB ->  289MB (   +1MB)	crate_lints
time:   0.012; rss:  289MB ->  289MB (   +0MB)	module_lints
time:   0.029; rss:  288MB ->  289MB (   +1MB)	lint_checking
time:   0.022; rss:  289MB ->  289MB (   +0MB)	privacy_checking_modules
time:   0.072; rss:  288MB ->  289MB (   +1MB)	misc_checking_3
time:   0.174; rss:  289MB ->  301MB (  +12MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpogzT8I/target/release/deps/libcriterion-f5a7b17316e6f699.rmeta","emit":"metadata"}
time:   0.001; rss:  301MB ->  301MB (   +0MB)	monomorphization_collector_root_collections
time:   0.616; rss:  301MB ->  338MB (  +38MB)	monomorphization_collector_graph_walk
time:   0.120; rss:  338MB ->  350MB (  +12MB)	partition_and_assert_distinct_symbols
time:   0.000; rss:  350MB ->  350MB (   +0MB)	find_cgu_reuse
time:   1.981; rss:  350MB ->  577MB ( +227MB)	codegen_to_LLVM_IR
time:   2.722; rss:  301MB ->  577MB ( +277MB)	codegen_crate
time:   0.000; rss:  577MB ->  577MB (   +0MB)	serialize_dep_graph
time:   0.095; rss:  577MB ->  458MB ( -119MB)	free_global_ctxt
time:   0.101; rss:  514MB ->  546MB (  +33MB)	LLVM_lto_optimize(criterion.f746272f-cgu.6)
time:   0.412; rss:  525MB ->  605MB (  +80MB)	LLVM_lto_optimize(criterion.f746272f-cgu.12)
time:   0.455; rss:  532MB ->  615MB (  +83MB)	LLVM_lto_optimize(criterion.f746272f-cgu.14)
time:   0.509; rss:  540MB ->  635MB (  +95MB)	LLVM_lto_optimize(criterion.f746272f-cgu.2)
time:   0.669; rss:  524MB ->  653MB ( +129MB)	LLVM_lto_optimize(criterion.f746272f-cgu.1)
time:   0.642; rss:  542MB ->  658MB ( +116MB)	LLVM_lto_optimize(criterion.f746272f-cgu.13)
time:   0.637; rss:  550MB ->  659MB ( +110MB)	LLVM_lto_optimize(criterion.f746272f-cgu.9)
time:   0.811; rss:  537MB ->  671MB ( +134MB)	LLVM_lto_optimize(criterion.f746272f-cgu.11)
time:   0.897; rss:  540MB ->  679MB ( +140MB)	LLVM_lto_optimize(criterion.f746272f-cgu.7)
time:   1.070; rss:  539MB ->  687MB ( +148MB)	LLVM_lto_optimize(criterion.f746272f-cgu.10)
time:   1.086; rss:  539MB ->  687MB ( +148MB)	LLVM_lto_optimize(criterion.f746272f-cgu.15)
time:   1.147; rss:  534MB ->  687MB ( +153MB)	LLVM_lto_optimize(criterion.f746272f-cgu.4)
time:   1.231; rss:  537MB ->  689MB ( +152MB)	LLVM_lto_optimize(criterion.f746272f-cgu.5)
time:   1.297; rss:  544MB ->  689MB ( +145MB)	LLVM_lto_optimize(criterion.f746272f-cgu.8)
time:   1.300; rss:  546MB ->  689MB ( +143MB)	LLVM_lto_optimize(criterion.f746272f-cgu.3)
time:   1.862; rss:  569MB ->  690MB ( +120MB)	LLVM_lto_optimize(criterion.f746272f-cgu.0)
time:   6.706; rss:  369MB ->  671MB ( +302MB)	LLVM_passes(crate)
time:   0.000; rss:  671MB ->  671MB (   +0MB)	join_worker_thread
time:   4.779; rss:  458MB ->  671MB ( +213MB)	finish_ongoing_codegen
time:   0.000; rss:  671MB ->  671MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  671MB ->  671MB (   +0MB)	serialize_work_products
time:   0.000; rss:  671MB ->  671MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.023; rss:  671MB ->  672MB (   +1MB)	link_rlib
{"artifact":"/usr/home/liquid/tmp/.tmpogzT8I/target/release/deps/libcriterion-f5a7b17316e6f699.rlib","emit":"link"}
time:   0.002; rss:  672MB ->  672MB (   +0MB)	link_binary_remove_temps
time:   0.026; rss:  671MB ->  672MB (   +1MB)	link_binary
time:   0.026; rss:  671MB ->  669MB (   -3MB)	link_crate
time:   4.805; rss:  458MB ->  669MB ( +211MB)	link
{"message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}
time:   9.983; rss:   46MB ->  603MB ( +557MB)	total
