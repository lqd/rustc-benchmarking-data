time:   0.000; rss:   58MB ->   61MB (   +2MB)	parse_crate
time:   0.000; rss:   61MB ->   61MB (   +0MB)	attributes_injection
time:   0.000; rss:   61MB ->   61MB (   +0MB)	plugin_loading
time:   0.000; rss:   61MB ->   61MB (   +0MB)	plugin_registration
time:   0.000; rss:   64MB ->   64MB (   +0MB)	crate_injection
time:   0.067; rss:   64MB ->  109MB (  +45MB)	expand_crate
time:   0.000; rss:  109MB ->  109MB (   +0MB)	check_unused_macros
time:   0.067; rss:   64MB ->  109MB (  +45MB)	macro_expand_crate
time:   0.000; rss:  109MB ->  109MB (   +0MB)	maybe_building_test_harness
time:   0.001; rss:  109MB ->  109MB (   +0MB)	AST_validation
time:   0.000; rss:  109MB ->  109MB (   +0MB)	maybe_create_a_macro_crate
time:   0.000; rss:  109MB ->  109MB (   +0MB)	finalize_imports
time:   0.000; rss:  109MB ->  109MB (   +0MB)	resolve_access_levels
time:   0.000; rss:  109MB ->  109MB (   +0MB)	finalize_macro_resolutions
time:   0.011; rss:  109MB ->  115MB (   +6MB)	late_resolve_crate
time:   0.000; rss:  115MB ->  115MB (   +0MB)	resolve_main
time:   0.001; rss:  115MB ->  115MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  115MB ->  115MB (   +0MB)	resolve_report_errors
time:   0.000; rss:  115MB ->  115MB (   +0MB)	resolve_postprocess
time:   0.012; rss:  109MB ->  115MB (   +6MB)	resolve_crate
time:   0.000; rss:  115MB ->  115MB (   +0MB)	complete_gated_feature_checking
time:   0.081; rss:   61MB ->  115MB (  +54MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpV6fjCs/target/release/deps/serde_hjson-82558789810e9769.d","emit":"dep-info"}
time:   0.000; rss:  115MB ->  115MB (   +0MB)	prepare_outputs
time:   0.020; rss:  115MB ->  121MB (   +6MB)	hir_lowering
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/de.rs","byte_start":8625,"byte_end":8628,"line_start":246,"line_end":246,"column_start":26,"column_end":29,"is_primary":true,"text":[{"text":"                c @ b'0' ... b'9' => n * 16_u16 + ((c as u16) - (b'0' as u16)),","highlight_start":26,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(ellipsis_inclusive_range_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/de.rs","byte_start":8625,"byte_end":8628,"line_start":246,"line_end":246,"column_start":26,"column_end":29,"is_primary":true,"text":[{"text":"                c @ b'0' ... b'9' => n * 16_u16 + ((c as u16) - (b'0' as u16)),","highlight_start":26,"highlight_end":29}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/de.rs:246:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m246\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                c @ b'0' ... b'9' => n * 16_u16 + ((c as u16) - (b'0' as u16)),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(ellipsis_inclusive_range_patterns)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/de.rs","byte_start":12623,"byte_end":12626,"line_start":360,"line_end":360,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"                                0xDC00 ... 0xDFFF => {","highlight_start":40,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/de.rs","byte_start":12623,"byte_end":12626,"line_start":360,"line_end":360,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"                                0xDC00 ... 0xDFFF => {","highlight_start":40,"highlight_end":43}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/de.rs:360:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   0xDC00 ... 0xDFFF => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/de.rs","byte_start":12993,"byte_end":12996,"line_start":366,"line_end":366,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"                                n1 @ 0xD800 ... 0xDBFF => {","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/de.rs","byte_start":12993,"byte_end":12996,"line_start":366,"line_end":366,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"                                n1 @ 0xD800 ... 0xDBFF => {","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/de.rs:366:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m366\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   n1 @ 0xD800 ... 0xDBFF => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/util.rs","byte_start":6598,"byte_end":6601,"line_start":231,"line_end":231,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"                b'0' ... b'9' => {","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/util.rs","byte_start":6598,"byte_end":6601,"line_start":231,"line_end":231,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"                b'0' ... b'9' => {","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/util.rs:231:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                b'0' ... b'9' => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/util.rs","byte_start":6845,"byte_end":6848,"line_start":240,"line_end":240,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"                b'0' ... b'9' => {","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/util.rs","byte_start":6845,"byte_end":6848,"line_start":240,"line_end":240,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"                b'0' ... b'9' => {","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/util.rs:240:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m240\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                b'0' ... b'9' => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/util.rs","byte_start":7852,"byte_end":7855,"line_start":268,"line_end":268,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"            c @ b'0' ... b'9' => { self.result.push(c); }","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/util.rs","byte_start":7852,"byte_end":7855,"line_start":268,"line_end":268,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"            c @ b'0' ... b'9' => { self.result.push(c); }","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/util.rs:268:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            c @ b'0' ... b'9' => { self.result.push(c); }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/util.rs","byte_start":8068,"byte_end":8071,"line_start":274,"line_end":274,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"                b'0' ... b'9' => { self.result.push(self.rdr.eat_char()); }","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/util.rs","byte_start":8068,"byte_end":8071,"line_start":274,"line_end":274,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"                b'0' ... b'9' => { self.result.push(self.rdr.eat_char()); }","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/util.rs:274:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                b'0' ... b'9' => { self.result.push(self.rdr.eat_char()); }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/util.rs","byte_start":8755,"byte_end":8758,"line_start":297,"line_end":297,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"            c @ b'0' ... b'9' => { self.result.push(c); }","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/util.rs","byte_start":8755,"byte_end":8758,"line_start":297,"line_end":297,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"            c @ b'0' ... b'9' => { self.result.push(c); }","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/util.rs:297:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            c @ b'0' ... b'9' => { self.result.push(c); }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/util.rs","byte_start":8970,"byte_end":8973,"line_start":303,"line_end":303,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"                b'0' ... b'9' => { self.result.push(self.rdr.eat_char()); }","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/util.rs","byte_start":8970,"byte_end":8973,"line_start":303,"line_end":303,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"                b'0' ... b'9' => { self.result.push(self.rdr.eat_char()); }","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/util.rs:303:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                b'0' ... b'9' => { self.result.push(self.rdr.eat_char()); }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
time:   0.003; rss:  121MB ->  121MB (   +0MB)	early_lint_checks
time:   0.001; rss:  121MB ->  121MB (   +0MB)	drop_ast
time:   0.000; rss:  120MB ->  120MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  120MB ->  120MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  120MB ->  120MB (   +0MB)	looking_for_derive_registrar
time:   0.006; rss:  120MB ->  124MB (   +4MB)	misc_checking_1
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/error.rs","byte_start":4954,"byte_end":4966,"line_start":147,"line_end":147,"column_start":32,"column_end":44,"is_primary":true,"text":[{"text":"    fn cause(&self) -> Option<&error::Error> {","highlight_start":32,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(bare_trait_objects)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/error.rs","byte_start":4954,"byte_end":4954,"line_start":147,"line_end":147,"column_start":32,"column_end":32,"is_primary":true,"text":[{"text":"    fn cause(&self) -> Option<&error::Error> {","highlight_start":32,"highlight_end":32}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/error.rs","byte_start":4966,"byte_end":4966,"line_start":147,"line_end":147,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"    fn cause(&self) -> Option<&error::Error> {","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/error.rs:147:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn cause(&self) -> Option<&error::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(bare_trait_objects)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn cause(&self) -> Option<&error::Error> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn cause(&self) -> Option<&\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0merror::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
time:   0.009; rss:  124MB ->  128MB (   +4MB)	type_collecting
time:   0.000; rss:  128MB ->  133MB (   +4MB)	impl_wf_inference
time:   0.000; rss:  133MB ->  133MB (   +0MB)	unsafety_checking
time:   0.012; rss:  133MB ->  152MB (  +19MB)	coherence_checking
time:   0.039; rss:  152MB ->  156MB (   +4MB)	wf_checking
time:   0.019; rss:  156MB ->  159MB (   +3MB)	item_types_checking
time:   0.176; rss:  159MB ->  173MB (  +14MB)	item_bodies_checking
time:   0.256; rss:  124MB ->  173MB (  +48MB)	type_check_crate
time:   0.004; rss:  173MB ->  173MB (   +0MB)	match_checking
time:   0.003; rss:  173MB ->  174MB (   +1MB)	liveness_and_intrinsic_checking
time:   0.008; rss:  173MB ->  174MB (   +1MB)	misc_checking_2
time:   0.151; rss:  174MB ->  186MB (  +13MB)	MIR_borrow_checking
time:   0.000; rss:  186MB ->  186MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  186MB ->  186MB (   +0MB)	layout_testing
time:   0.002; rss:  186MB ->  187MB (   +1MB)	death_checking
time:   0.000; rss:  187MB ->  187MB (   +0MB)	unused_lib_feature_checking
time:   0.005; rss:  187MB ->  188MB (   +1MB)	crate_lints
time:   0.003; rss:  188MB ->  188MB (   +0MB)	module_lints
time:   0.009; rss:  187MB ->  188MB (   +1MB)	lint_checking
time:   0.007; rss:  188MB ->  188MB (   +0MB)	privacy_checking_modules
time:   0.020; rss:  186MB ->  188MB (   +2MB)	misc_checking_3
time:   0.067; rss:  188MB ->  191MB (   +3MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpV6fjCs/target/release/deps/libserde_hjson-82558789810e9769.rmeta","emit":"metadata"}
time:   0.000; rss:  191MB ->  191MB (   +0MB)	monomorphization_collector_root_collections
time:   0.078; rss:  191MB ->  204MB (  +12MB)	monomorphization_collector_graph_walk
time:   0.016; rss:  204MB ->  206MB (   +2MB)	partition_and_assert_distinct_symbols
time:   0.000; rss:  206MB ->  206MB (   +0MB)	find_cgu_reuse
time:   0.344; rss:  206MB ->  264MB (  +58MB)	codegen_to_LLVM_IR
time:   0.440; rss:  191MB ->  264MB (  +73MB)	codegen_crate
time:   0.000; rss:  264MB ->  264MB (   +0MB)	serialize_dep_graph
time:   0.090; rss:  264MB ->  195MB (  -69MB)	free_global_ctxt
time:   0.015; rss:  198MB ->  202MB (   +3MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.14)
time:   0.043; rss:  198MB ->  209MB (  +10MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.7)
time:   0.040; rss:  200MB ->  209MB (   +9MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.8)
time:   0.044; rss:  199MB ->  209MB (  +10MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.2)
time:   0.044; rss:  201MB ->  209MB (   +8MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.15)
time:   0.055; rss:  202MB ->  212MB (  +10MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.11)
time:   0.062; rss:  201MB ->  212MB (  +11MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.13)
time:   0.069; rss:  201MB ->  212MB (  +11MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.6)
time:   0.089; rss:  201MB ->  213MB (  +12MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.10)
time:   0.109; rss:  201MB ->  214MB (  +13MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.12)
time:   0.112; rss:  203MB ->  214MB (  +12MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.9)
time:   0.117; rss:  203MB ->  214MB (  +12MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.4)
time:   0.135; rss:  201MB ->  215MB (  +13MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.5)
time:   0.246; rss:  209MB ->  220MB (  +11MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.3)
time:   0.498; rss:  201MB ->  221MB (  +20MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.1)
time:   0.550; rss:  207MB ->  222MB (  +15MB)	LLVM_lto_optimize(serde_hjson.6f0e366a-cgu.0)
time:   1.540; rss:  215MB ->  223MB (   +8MB)	LLVM_passes(crate)
time:   0.000; rss:  223MB ->  223MB (   +0MB)	join_worker_thread
time:   1.136; rss:  195MB ->  223MB (  +28MB)	finish_ongoing_codegen
time:   0.000; rss:  223MB ->  223MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  223MB ->  223MB (   +0MB)	serialize_work_products
time:   0.000; rss:  223MB ->  223MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.006; rss:  223MB ->  223MB (   +0MB)	link_rlib
{"artifact":"/usr/home/liquid/tmp/.tmpV6fjCs/target/release/deps/libserde_hjson-82558789810e9769.rlib","emit":"link"}
time:   0.001; rss:  223MB ->  223MB (   +0MB)	link_binary_remove_temps
time:   0.007; rss:  223MB ->  223MB (   +0MB)	link_binary
time:   0.007; rss:  223MB ->  223MB (   +0MB)	link_crate
time:   1.144; rss:  195MB ->  223MB (  +29MB)	link
{"message":"10 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 10 warnings emitted\u001b[0m\n\n"}
time:   2.300; rss:   46MB ->  224MB ( +177MB)	total
