time:   0.001; rss:   57MB ->   59MB (   +3MB)	parse_crate
time:   0.000; rss:   59MB ->   59MB (   +0MB)	attributes_injection
time:   0.000; rss:   62MB ->   62MB (   +0MB)	plugin_loading
time:   0.000; rss:   62MB ->   62MB (   +0MB)	plugin_registration
time:   0.000; rss:   62MB ->   62MB (   +0MB)	crate_injection
time:   0.040; rss:   62MB ->   96MB (  +34MB)	expand_crate
time:   0.000; rss:   96MB ->   96MB (   +0MB)	check_unused_macros
time:   0.040; rss:   62MB ->   96MB (  +34MB)	macro_expand_crate
time:   0.000; rss:   96MB ->   96MB (   +0MB)	maybe_building_test_harness
time:   0.000; rss:   96MB ->   96MB (   +0MB)	AST_validation
time:   0.000; rss:   96MB ->   96MB (   +0MB)	maybe_create_a_macro_crate
time:   0.000; rss:   96MB ->   96MB (   +0MB)	finalize_imports
time:   0.000; rss:   96MB ->   96MB (   +0MB)	resolve_access_levels
time:   0.000; rss:   96MB ->   98MB (   +2MB)	finalize_macro_resolutions
time:   0.007; rss:   98MB ->  101MB (   +2MB)	late_resolve_crate
time:   0.000; rss:  101MB ->  101MB (   +0MB)	resolve_main
time:   0.000; rss:  101MB ->  101MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  101MB ->  101MB (   +0MB)	resolve_report_errors
time:   0.000; rss:  101MB ->  101MB (   +0MB)	resolve_postprocess
time:   0.008; rss:   96MB ->  101MB (   +4MB)	resolve_crate
time:   0.000; rss:  101MB ->  101MB (   +0MB)	complete_gated_feature_checking
time:   0.049; rss:   62MB ->  101MB (  +39MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpqfX2p1/target/release/deps/try_from-11c066d24a6840d0.d","emit":"dep-info"}
time:   0.000; rss:  101MB ->  101MB (   +0MB)	prepare_outputs
time:   0.007; rss:  101MB ->  104MB (   +3MB)	hir_lowering
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/char.rs","byte_start":1365,"byte_end":1368,"line_start":57,"line_end":57,"column_start":26,"column_end":29,"is_primary":true,"text":[{"text":"                    n @ 0...0x10ffff => match char::from_u32(n) {","highlight_start":26,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/char.rs","byte_start":1658,"byte_end":1723,"line_start":68,"line_end":68,"column_start":1,"column_end":66,"is_primary":false,"text":[{"text":"impl_int_to_char!(i8, i16, i32, i64, isize, u16, u32, u64, usize);","highlight_start":1,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_int_to_char!","def_site_span":{"file_name":"src/char.rs","byte_start":1082,"byte_end":1656,"line_start":50,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_int_to_char {","highlight_start":1,"highlight_end":32},{"text":"    ($($ty:ty),*) => { $(","highlight_start":1,"highlight_end":26},{"text":"        impl TryFrom<$ty> for char {","highlight_start":1,"highlight_end":37},{"text":"            type Err = TryFromIntToCharError;","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from (n: $ty) -> Result<char, TryFromIntToCharError> {","highlight_start":1,"highlight_end":74},{"text":"                match u32::try_from(n)? {","highlight_start":1,"highlight_end":42},{"text":"                    n @ 0...0x10ffff => match char::from_u32(n) {","highlight_start":1,"highlight_end":66},{"text":"                        None => Err(TryFromIntToCharError::Reserved),","highlight_start":1,"highlight_end":70},{"text":"                        Some(c) => Ok(c),","highlight_start":1,"highlight_end":42},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => Err(TryFromIntToCharError::Overflow)","highlight_start":1,"highlight_end":62},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    )* };","highlight_start":1,"highlight_end":10},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(ellipsis_inclusive_range_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/char.rs","byte_start":1365,"byte_end":1368,"line_start":57,"line_end":57,"column_start":26,"column_end":29,"is_primary":true,"text":[{"text":"                    n @ 0...0x10ffff => match char::from_u32(n) {","highlight_start":26,"highlight_end":29}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/char.rs","byte_start":1658,"byte_end":1723,"line_start":68,"line_end":68,"column_start":1,"column_end":66,"is_primary":false,"text":[{"text":"impl_int_to_char!(i8, i16, i32, i64, isize, u16, u32, u64, usize);","highlight_start":1,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_int_to_char!","def_site_span":{"file_name":"src/char.rs","byte_start":1082,"byte_end":1656,"line_start":50,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_int_to_char {","highlight_start":1,"highlight_end":32},{"text":"    ($($ty:ty),*) => { $(","highlight_start":1,"highlight_end":26},{"text":"        impl TryFrom<$ty> for char {","highlight_start":1,"highlight_end":37},{"text":"            type Err = TryFromIntToCharError;","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from (n: $ty) -> Result<char, TryFromIntToCharError> {","highlight_start":1,"highlight_end":74},{"text":"                match u32::try_from(n)? {","highlight_start":1,"highlight_end":42},{"text":"                    n @ 0...0x10ffff => match char::from_u32(n) {","highlight_start":1,"highlight_end":66},{"text":"                        None => Err(TryFromIntToCharError::Reserved),","highlight_start":1,"highlight_end":70},{"text":"                        Some(c) => Ok(c),","highlight_start":1,"highlight_end":42},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => Err(TryFromIntToCharError::Overflow)","highlight_start":1,"highlight_end":62},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    )* };","highlight_start":1,"highlight_end":10},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/char.rs:57:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    n @ 0...0x10ffff => match char::from_u32(n) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_int_to_char!(i8, i16, i32, i64, isize, u16, u32, u64, usize);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(ellipsis_inclusive_range_patterns)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_int_to_char` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"anonymous parameters are deprecated and will be removed in the next edition","code":{"code":"anonymous_parameters","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":354,"byte_end":355,"line_start":21,"line_end":21,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    fn try_from(T) -> Result<Self, Self::Err>;","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(anonymous_parameters)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try naming the parameter or explicitly ignoring it","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":354,"byte_end":355,"line_start":21,"line_end":21,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    fn try_from(T) -> Result<Self, Self::Err>;","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"_: T","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: anonymous parameters are deprecated and will be removed in the next edition\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:21:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn try_from(T) -> Result<Self, Self::Err>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try naming the parameter or explicitly ignoring it: `_: T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(anonymous_parameters)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\u001b[0m\n\n"}
time:   0.001; rss:  104MB ->  104MB (   +0MB)	early_lint_checks
time:   0.000; rss:  104MB ->  104MB (   +0MB)	drop_ast
time:   0.000; rss:  104MB ->  104MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  107MB ->  107MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  107MB ->  107MB (   +0MB)	looking_for_derive_registrar
time:   0.002; rss:  107MB ->  107MB (   +0MB)	misc_checking_1
time:   0.003; rss:  107MB ->  111MB (   +4MB)	type_collecting
time:   0.000; rss:  111MB ->  111MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  111MB ->  111MB (   +0MB)	unsafety_checking
time:   0.010; rss:  111MB ->  133MB (  +22MB)	coherence_checking
time:   0.012; rss:  133MB ->  136MB (   +3MB)	wf_checking
time:   0.005; rss:  136MB ->  137MB (   +0MB)	item_types_checking
time:   0.031; rss:  137MB ->  139MB (   +2MB)	item_bodies_checking
time:   0.061; rss:  107MB ->  139MB (  +32MB)	type_check_crate
time:   0.001; rss:  139MB ->  139MB (   +0MB)	match_checking
time:   0.001; rss:  139MB ->  139MB (   +0MB)	liveness_and_intrinsic_checking
time:   0.001; rss:  139MB ->  139MB (   +0MB)	misc_checking_2
time:   0.027; rss:  139MB ->  147MB (   +8MB)	MIR_borrow_checking
time:   0.000; rss:  147MB ->  147MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  147MB ->  147MB (   +0MB)	layout_testing
time:   0.001; rss:  147MB ->  147MB (   +0MB)	death_checking
time:   0.000; rss:  147MB ->  147MB (   +0MB)	unused_lib_feature_checking
time:   0.002; rss:  147MB ->  147MB (   +0MB)	crate_lints
time:   0.001; rss:  147MB ->  147MB (   +0MB)	module_lints
time:   0.003; rss:  147MB ->  147MB (   +0MB)	lint_checking
time:   0.001; rss:  147MB ->  147MB (   +0MB)	privacy_checking_modules
time:   0.006; rss:  147MB ->  147MB (   +0MB)	misc_checking_3
time:   0.003; rss:  147MB ->  150MB (   +3MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpqfX2p1/target/release/deps/libtry_from-11c066d24a6840d0.rmeta","emit":"metadata"}
time:   0.000; rss:  150MB ->  150MB (   +0MB)	monomorphization_collector_root_collections
time:   0.017; rss:  150MB ->  153MB (   +3MB)	monomorphization_collector_graph_walk
time:   0.000; rss:  153MB ->  153MB (   +0MB)	partition_and_assert_distinct_symbols
time:   0.000; rss:  153MB ->  153MB (   +0MB)	find_cgu_reuse
time:   0.007; rss:  153MB ->  164MB (  +12MB)	codegen_to_LLVM_IR
time:   0.026; rss:  150MB ->  164MB (  +14MB)	codegen_crate
time:   0.000; rss:  164MB ->  164MB (   +0MB)	serialize_dep_graph
time:   0.004; rss:  164MB ->  120MB (  -44MB)	free_global_ctxt
time:   0.001; rss:  123MB ->  123MB (   +0MB)	LLVM_lto_optimize(try_from.c8adeedd-cgu.1)
time:   0.025; rss:  124MB ->  129MB (   +6MB)	LLVM_lto_optimize(try_from.c8adeedd-cgu.2)
time:   0.034; rss:  123MB ->  131MB (   +8MB)	LLVM_lto_optimize(try_from.c8adeedd-cgu.0)
time:   0.173; rss:  157MB ->  133MB (  -24MB)	LLVM_passes(crate)
time:   0.000; rss:  130MB ->  130MB (   +0MB)	join_worker_thread
time:   0.166; rss:  120MB ->  130MB (  +10MB)	finish_ongoing_codegen
time:   0.000; rss:  130MB ->  130MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  130MB ->  130MB (   +0MB)	serialize_work_products
time:   0.000; rss:  130MB ->  130MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.001; rss:  130MB ->  130MB (   +0MB)	link_rlib
{"artifact":"/usr/home/liquid/tmp/.tmpqfX2p1/target/release/deps/libtry_from-11c066d24a6840d0.rlib","emit":"link"}
time:   0.000; rss:  130MB ->  130MB (   +0MB)	link_binary_remove_temps
time:   0.001; rss:  130MB ->  130MB (   +0MB)	link_binary
time:   0.001; rss:  130MB ->  130MB (   +0MB)	link_crate
time:   0.167; rss:  120MB ->  130MB (  +10MB)	link
{"message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
time:   0.364; rss:   46MB ->  127MB (  +81MB)	total
