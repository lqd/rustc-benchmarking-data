time:   0.003; rss:   56MB ->   61MB (   +4MB)	parse_crate
time:   0.000; rss:   61MB ->   61MB (   +0MB)	attributes_injection
time:   0.000; rss:   62MB ->   62MB (   +0MB)	plugin_loading
time:   0.000; rss:   62MB ->   62MB (   +0MB)	plugin_registration
time:   0.000; rss:   62MB ->   62MB (   +0MB)	crate_injection
time:   0.015; rss:   62MB ->   95MB (  +33MB)	expand_crate
time:   0.000; rss:   95MB ->   95MB (   +0MB)	check_unused_macros
time:   0.015; rss:   62MB ->   95MB (  +33MB)	macro_expand_crate
time:   0.000; rss:   95MB ->   95MB (   +0MB)	maybe_building_test_harness
time:   0.000; rss:   95MB ->   95MB (   +0MB)	AST_validation
time:   0.000; rss:   95MB ->   95MB (   +0MB)	maybe_create_a_macro_crate
time:   0.000; rss:   95MB ->   95MB (   +0MB)	finalize_imports
time:   0.000; rss:   95MB ->   95MB (   +0MB)	resolve_access_levels
time:   0.000; rss:   95MB ->   95MB (   +0MB)	finalize_macro_resolutions
time:   0.001; rss:   95MB ->   98MB (   +4MB)	late_resolve_crate
time:   0.000; rss:   98MB ->   98MB (   +0MB)	resolve_main
time:   0.000; rss:   98MB ->   98MB (   +0MB)	resolve_check_unused
time:   0.000; rss:   98MB ->   98MB (   +0MB)	resolve_report_errors
time:   0.000; rss:   98MB ->   98MB (   +0MB)	resolve_postprocess
time:   0.002; rss:   95MB ->   98MB (   +4MB)	resolve_crate
time:   0.000; rss:   98MB ->   98MB (   +0MB)	complete_gated_feature_checking
time:   0.018; rss:   62MB ->   98MB (  +36MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpTfXU1T/target/release/deps/cesu8-3100d202ff49b640.d","emit":"dep-info"}
time:   0.000; rss:   98MB ->   98MB (   +0MB)	prepare_outputs
time:   0.001; rss:   98MB ->  100MB (   +2MB)	hir_lowering
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":10369,"byte_end":10372,"line_start":280,"line_end":280,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                        (0xE0         , 0xA0 ... 0xBF) |","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(ellipsis_inclusive_range_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10369,"byte_end":10372,"line_start":280,"line_end":280,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                        (0xE0         , 0xA0 ... 0xBF) |","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:280:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m280\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        (0xE0         , 0xA0 ... 0xBF) |\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(ellipsis_inclusive_range_patterns)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":10411,"byte_end":10414,"line_start":281,"line_end":281,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"                        (0xE1 ... 0xEC, 0x80 ... 0xBF) |","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10411,"byte_end":10414,"line_start":281,"line_end":281,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"                        (0xE1 ... 0xEC, 0x80 ... 0xBF) |","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:281:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        (0xE1 ... 0xEC, 0x80 ... 0xBF) |\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":10426,"byte_end":10429,"line_start":281,"line_end":281,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                        (0xE1 ... 0xEC, 0x80 ... 0xBF) |","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10426,"byte_end":10429,"line_start":281,"line_end":281,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                        (0xE1 ... 0xEC, 0x80 ... 0xBF) |","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:281:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        (0xE1 ... 0xEC, 0x80 ... 0xBF) |\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":10483,"byte_end":10486,"line_start":282,"line_end":282,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                        (0xED         , 0x80 ... 0x9F) |","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10483,"byte_end":10486,"line_start":282,"line_end":282,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                        (0xED         , 0x80 ... 0x9F) |","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:282:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        (0xED         , 0x80 ... 0x9F) |\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":10525,"byte_end":10528,"line_start":283,"line_end":283,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"                        (0xEE ... 0xEF, 0x80 ... 0xBF) => {","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10525,"byte_end":10528,"line_start":283,"line_end":283,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"                        (0xEE ... 0xEF, 0x80 ... 0xBF) => {","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:283:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        (0xEE ... 0xEF, 0x80 ... 0xBF) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":10540,"byte_end":10543,"line_start":283,"line_end":283,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                        (0xEE ... 0xEF, 0x80 ... 0xBF) => {","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10540,"byte_end":10543,"line_start":283,"line_end":283,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                        (0xEE ... 0xEF, 0x80 ... 0xBF) => {","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:283:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        (0xEE ... 0xEF, 0x80 ... 0xBF) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":10824,"byte_end":10827,"line_start":288,"line_end":288,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                        (0xED         , 0xA0 ... 0xAF) => {","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10824,"byte_end":10827,"line_start":288,"line_end":288,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"                        (0xED         , 0xA0 ... 0xAF) => {","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:288:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        (0xED         , 0xA0 ... 0xAF) => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
time:   0.001; rss:  100MB ->  100MB (   +0MB)	early_lint_checks
time:   0.000; rss:  100MB ->  100MB (   +0MB)	drop_ast
time:   0.000; rss:  102MB ->  102MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  105MB ->  105MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  105MB ->  105MB (   +0MB)	looking_for_derive_registrar
time:   0.001; rss:  105MB ->  105MB (   +0MB)	misc_checking_1
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":4242,"byte_end":4247,"line_start":109,"line_end":109,"column_start":32,"column_end":37,"is_primary":true,"text":[{"text":"    fn cause(&self) -> Option<&Error> { None }","highlight_start":32,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(bare_trait_objects)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4242,"byte_end":4242,"line_start":109,"line_end":109,"column_start":32,"column_end":32,"is_primary":true,"text":[{"text":"    fn cause(&self) -> Option<&Error> { None }","highlight_start":32,"highlight_end":32}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":4247,"byte_end":4247,"line_start":109,"line_end":109,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"    fn cause(&self) -> Option<&Error> { None }","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:109:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn cause(&self) -> Option<&Error> { None }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(bare_trait_objects)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn cause(&self) -> Option<&Error> { None }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn cause(&self) -> Option<&\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mError> { None }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
time:   0.001; rss:  105MB ->  109MB (   +4MB)	type_collecting
time:   0.000; rss:  109MB ->  109MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  109MB ->  109MB (   +0MB)	unsafety_checking
time:   0.009; rss:  109MB ->  131MB (  +21MB)	coherence_checking
time:   0.003; rss:  131MB ->  134MB (   +4MB)	wf_checking
time:   0.000; rss:  134MB ->  134MB (   +0MB)	item_types_checking
time:   0.022; rss:  134MB ->  145MB (  +11MB)	item_bodies_checking
time:   0.035; rss:  105MB ->  145MB (  +40MB)	type_check_crate
time:   0.000; rss:  145MB ->  146MB (   +1MB)	match_checking
time:   0.000; rss:  146MB ->  146MB (   +0MB)	liveness_and_intrinsic_checking
time:   0.001; rss:  145MB ->  146MB (   +1MB)	misc_checking_2
time:   0.011; rss:  146MB ->  152MB (   +6MB)	MIR_borrow_checking
time:   0.000; rss:  152MB ->  152MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  152MB ->  152MB (   +0MB)	layout_testing
time:   0.001; rss:  152MB ->  153MB (   +1MB)	death_checking
time:   0.000; rss:  153MB ->  153MB (   +0MB)	unused_lib_feature_checking
time:   0.002; rss:  153MB ->  153MB (   +0MB)	crate_lints
time:   0.000; rss:  153MB ->  153MB (   +0MB)	module_lints
time:   0.002; rss:  153MB ->  153MB (   +0MB)	lint_checking
time:   0.000; rss:  153MB ->  153MB (   +0MB)	privacy_checking_modules
time:   0.003; rss:  152MB ->  153MB (   +1MB)	misc_checking_3
time:   0.001; rss:  153MB ->  155MB (   +2MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpTfXU1T/target/release/deps/libcesu8-3100d202ff49b640.rmeta","emit":"metadata"}
time:   0.000; rss:  155MB ->  155MB (   +0MB)	monomorphization_collector_root_collections
time:   0.018; rss:  155MB ->  161MB (   +6MB)	monomorphization_collector_graph_walk
time:   0.002; rss:  161MB ->  161MB (   +0MB)	partition_and_assert_distinct_symbols
time:   0.000; rss:  161MB ->  161MB (   +0MB)	find_cgu_reuse
time:   0.030; rss:  161MB ->  182MB (  +21MB)	codegen_to_LLVM_IR
time:   0.053; rss:  155MB ->  182MB (  +27MB)	codegen_crate
time:   0.000; rss:  182MB ->  182MB (   +0MB)	serialize_dep_graph
time:   0.007; rss:  182MB ->  127MB (  -55MB)	free_global_ctxt
time:   0.000; rss:  131MB ->  131MB (   +0MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.2)
time:   0.001; rss:  131MB ->  131MB (   +1MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.8)
time:   0.002; rss:  131MB ->  131MB (   +1MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.13)
time:   0.002; rss:  131MB ->  132MB (   +1MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.4)
time:   0.002; rss:  131MB ->  133MB (   +2MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.9)
time:   0.002; rss:  131MB ->  133MB (   +2MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.5)
time:   0.002; rss:  131MB ->  133MB (   +2MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.1)
time:   0.003; rss:  131MB ->  133MB (   +2MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.3)
time:   0.003; rss:  131MB ->  135MB (   +4MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.0)
time:   0.005; rss:  131MB ->  136MB (   +5MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.11)
time:   0.008; rss:  131MB ->  137MB (   +6MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.7)
time:   0.013; rss:  131MB ->  140MB (   +9MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.10)
time:   0.016; rss:  131MB ->  140MB (   +9MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.12)
time:   0.023; rss:  133MB ->  141MB (   +8MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.14)
time:   0.082; rss:  137MB ->  142MB (   +5MB)	LLVM_lto_optimize(cesu8.eb9190c4-cgu.6)
time:   0.205; rss:  169MB ->  143MB (  -25MB)	LLVM_passes(crate)
time:   0.000; rss:  144MB ->  144MB (   +0MB)	join_worker_thread
time:   0.180; rss:  127MB ->  144MB (  +16MB)	finish_ongoing_codegen
time:   0.000; rss:  144MB ->  144MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  144MB ->  144MB (   +0MB)	serialize_work_products
time:   0.000; rss:  144MB ->  144MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.001; rss:  144MB ->  144MB (   +0MB)	link_rlib
{"artifact":"/usr/home/liquid/tmp/.tmpTfXU1T/target/release/deps/libcesu8-3100d202ff49b640.rlib","emit":"link"}
time:   0.000; rss:  144MB ->  144MB (   +0MB)	link_binary_remove_temps
time:   0.001; rss:  144MB ->  144MB (   +0MB)	link_binary
time:   0.001; rss:  144MB ->  144MB (   +0MB)	link_crate
time:   0.181; rss:  127MB ->  144MB (  +17MB)	link
{"message":"8 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 8 warnings emitted\u001b[0m\n\n"}
time:   0.323; rss:   46MB ->  140MB (  +94MB)	total
