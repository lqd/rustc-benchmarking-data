time:   0.000; rss:   56MB ->   58MB (   +2MB)	parse_crate
time:   0.000; rss:   58MB ->   58MB (   +0MB)	attributes_injection
time:   0.000; rss:   58MB ->   58MB (   +0MB)	plugin_loading
time:   0.000; rss:   58MB ->   58MB (   +0MB)	plugin_registration
time:   0.000; rss:   62MB ->   62MB (   +0MB)	crate_injection
time:   0.030; rss:   62MB ->   99MB (  +37MB)	expand_crate
time:   0.000; rss:   99MB ->   99MB (   +0MB)	check_unused_macros
time:   0.030; rss:   62MB ->   99MB (  +37MB)	macro_expand_crate
time:   0.000; rss:   99MB ->   99MB (   +0MB)	maybe_building_test_harness
time:   0.000; rss:   99MB ->   99MB (   +0MB)	AST_validation
time:   0.000; rss:   99MB ->   99MB (   +0MB)	maybe_create_a_macro_crate
time:   0.000; rss:   99MB ->   99MB (   +0MB)	finalize_imports
time:   0.000; rss:   99MB ->   99MB (   +0MB)	resolve_access_levels
time:   0.000; rss:   99MB ->   99MB (   +0MB)	finalize_macro_resolutions
time:   0.004; rss:   99MB ->  102MB (   +3MB)	late_resolve_crate
time:   0.000; rss:  102MB ->  102MB (   +0MB)	resolve_main
time:   0.000; rss:  102MB ->  102MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  102MB ->  102MB (   +0MB)	resolve_report_errors
time:   0.000; rss:  102MB ->  102MB (   +0MB)	resolve_postprocess
time:   0.005; rss:   99MB ->  102MB (   +3MB)	resolve_crate
time:   0.000; rss:  102MB ->  102MB (   +0MB)	complete_gated_feature_checking
time:   0.037; rss:   58MB ->  102MB (  +43MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpZl7OYD/target/release/deps/ascii-32b6f23012324f3b.d","emit":"dep-info"}
time:   0.000; rss:  102MB ->  102MB (   +0MB)	prepare_outputs
time:   0.009; rss:  102MB ->  106MB (   +4MB)	hir_lowering
time:   0.001; rss:  106MB ->  106MB (   +0MB)	early_lint_checks
time:   0.001; rss:  106MB ->  106MB (   +0MB)	drop_ast
time:   0.000; rss:  106MB ->  106MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  109MB ->  109MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  109MB ->  109MB (   +0MB)	looking_for_derive_registrar
time:   0.003; rss:  109MB ->  109MB (   +0MB)	misc_checking_1
time:   0.026; rss:  109MB ->  126MB (  +17MB)	type_collecting
time:   0.000; rss:  126MB ->  126MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  126MB ->  126MB (   +0MB)	unsafety_checking
time:   0.015; rss:  126MB ->  147MB (  +21MB)	coherence_checking
time:   0.022; rss:  147MB ->  149MB (   +2MB)	wf_checking
time:   0.008; rss:  149MB ->  149MB (   +1MB)	item_types_checking
time:   0.071; rss:  149MB ->  155MB (   +6MB)	item_bodies_checking
time:   0.141; rss:  109MB ->  155MB (  +46MB)	type_check_crate
{"message":"pattern binding `a` is named the same as one of the variants of the type `AsciiChar`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/ascii_str.rs","byte_start":6451,"byte_end":6452,"line_start":204,"line_end":204,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"        &self[self.chars().take_while(|a| a.is_whitespace()).count()..]","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(bindings_with_variant_name)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `a` is named the same as one of the variants of the type `AsciiChar`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ascii_str.rs:204:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        &self[self.chars().take_while(|a| a.is_whitespace()).count()..]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(bindings_with_variant_name)]` on by default\u001b[0m\n\n"}
{"message":"pattern binding `a` is named the same as one of the variants of the type `AsciiChar`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/ascii_str.rs","byte_start":6901,"byte_end":6902,"line_start":218,"line_end":218,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"            .take_while(|a| a.is_whitespace())","highlight_start":26,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `a` is named the same as one of the variants of the type `AsciiChar`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ascii_str.rs:218:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .take_while(|a| a.is_whitespace())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\n"}
{"message":"pattern binding `a` is named the same as one of the variants of the type `AsciiChar`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/ascii_str.rs","byte_start":7189,"byte_end":7190,"line_start":226,"line_end":226,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"            self.chars().zip(other.chars()).all(|(a, b)| {","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `a` is named the same as one of the variants of the type `AsciiChar`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ascii_str.rs:226:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            self.chars().zip(other.chars()).all(|(a, b)| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\n"}
{"message":"pattern binding `b` is named the same as one of the variants of the type `AsciiChar`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/ascii_str.rs","byte_start":7192,"byte_end":7193,"line_start":226,"line_end":226,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"            self.chars().zip(other.chars()).all(|(a, b)| {","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `b` is named the same as one of the variants of the type `AsciiChar`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ascii_str.rs:226:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            self.chars().zip(other.chars()).all(|(a, b)| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\n"}
{"message":"pattern binding `a` is named the same as one of the variants of the type `AsciiChar`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/ascii_str.rs","byte_start":7388,"byte_end":7389,"line_start":233,"line_end":233,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        for a in self.chars_mut() {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to match on the variant, qualify the path","code":null,"level":"help","spans":[{"file_name":"src/ascii_str.rs","byte_start":7388,"byte_end":7389,"line_start":233,"line_end":233,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        for a in self.chars_mut() {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"AsciiChar::a","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `a` is named the same as one of the variants of the type `AsciiChar`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ascii_str.rs:233:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        for a in self.chars_mut() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to match on the variant, qualify the path: `AsciiChar::a`\u001b[0m\n\n"}
{"message":"pattern binding `a` is named the same as one of the variants of the type `AsciiChar`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/ascii_str.rs","byte_start":7595,"byte_end":7596,"line_start":240,"line_end":240,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        for a in self.chars_mut() {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to match on the variant, qualify the path","code":null,"level":"help","spans":[{"file_name":"src/ascii_str.rs","byte_start":7595,"byte_end":7596,"line_start":240,"line_end":240,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        for a in self.chars_mut() {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"AsciiChar::a","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `a` is named the same as one of the variants of the type `AsciiChar`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ascii_str.rs:240:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m240\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        for a in self.chars_mut() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to match on the variant, qualify the path: `AsciiChar::a`\u001b[0m\n\n"}
{"message":"pattern binding `c` is named the same as one of the variants of the type `AsciiChar`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/ascii_str.rs","byte_start":17046,"byte_end":17047,"line_start":614,"line_end":614,"column_start":52,"column_end":53,"is_primary":true,"text":[{"text":"            if let Some(at) = self.chars.position(|c| c == split_on) {","highlight_start":52,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `c` is named the same as one of the variants of the type `AsciiChar`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ascii_str.rs:614:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m614\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            if let Some(at) = self.chars.position(|c| c == split_on) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\n"}
{"message":"pattern binding `c` is named the same as one of the variants of the type `AsciiChar`","code":{"code":"E0170","explanation":"A pattern binding is using the same name as one of the variants of a type.\n\nErroneous code example:\n\n```compile_fail,E0170\n# #![deny(warnings)]\nenum Method {\n    GET,\n    POST,\n}\n\nfn is_empty(s: Method) -> bool {\n    match s {\n        GET => true,\n        _ => false\n    }\n}\n\nfn main() {}\n```\n\nEnum variants are qualified by default. For example, given this type:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n```\n\nYou would match it using:\n\n```\nenum Method {\n    GET,\n    POST,\n}\n\nlet m = Method::GET;\n\nmatch m {\n    Method::GET => {},\n    Method::POST => {},\n}\n```\n\nIf you don't qualify the names, the code will bind new variables named \"GET\" and\n\"POST\" instead. This behavior is likely not what you want, so `rustc` warns when\nthat happens.\n\nQualified names are good practice, and most code works well with them. But if\nyou prefer them unqualified, you can import the variants into scope:\n\n```\nuse Method::*;\nenum Method { GET, POST }\n# fn main() {}\n```\n\nIf you want others to be able to import variants from your module directly, use\n`pub use`:\n\n```\npub use Method::*;\npub enum Method { GET, POST }\n# fn main() {}\n```\n"},"level":"warning","spans":[{"file_name":"src/ascii_str.rs","byte_start":17519,"byte_end":17520,"line_start":630,"line_end":630,"column_start":53,"column_end":54,"is_primary":true,"text":[{"text":"            if let Some(at) = self.chars.rposition(|c| c == split_on) {","highlight_start":53,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning[E0170]\u001b[0m\u001b[0m\u001b[1m: pattern binding `c` is named the same as one of the variants of the type `AsciiChar`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/ascii_str.rs:630:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m630\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            if let Some(at) = self.chars.rposition(|c| c == split_on) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\n"}
time:   0.009; rss:  155MB ->  160MB (   +6MB)	match_checking
time:   0.001; rss:  160MB ->  160MB (   +0MB)	liveness_and_intrinsic_checking
time:   0.010; rss:  155MB ->  160MB (   +6MB)	misc_checking_2
time:   0.070; rss:  160MB ->  164MB (   +3MB)	MIR_borrow_checking
time:   0.001; rss:  164MB ->  164MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  164MB ->  164MB (   +0MB)	layout_testing
time:   0.001; rss:  164MB ->  164MB (   +0MB)	death_checking
time:   0.000; rss:  164MB ->  164MB (   +0MB)	unused_lib_feature_checking
time:   0.006; rss:  164MB ->  165MB (   +1MB)	crate_lints
time:   0.001; rss:  165MB ->  165MB (   +0MB)	module_lints
time:   0.007; rss:  164MB ->  165MB (   +1MB)	lint_checking
time:   0.003; rss:  165MB ->  165MB (   +0MB)	privacy_checking_modules
time:   0.013; rss:  164MB ->  165MB (   +1MB)	misc_checking_3
time:   0.025; rss:  165MB ->  167MB (   +3MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpZl7OYD/target/release/deps/libascii-32b6f23012324f3b.rmeta","emit":"metadata"}
time:   0.000; rss:  167MB ->  167MB (   +0MB)	monomorphization_collector_root_collections
time:   0.025; rss:  167MB ->  172MB (   +5MB)	monomorphization_collector_graph_walk
time:   0.004; rss:  172MB ->  172MB (   +0MB)	partition_and_assert_distinct_symbols
time:   0.000; rss:  172MB ->  172MB (   +0MB)	find_cgu_reuse
time:   0.067; rss:  172MB ->  200MB (  +28MB)	codegen_to_LLVM_IR
time:   0.098; rss:  167MB ->  200MB (  +33MB)	codegen_crate
time:   0.000; rss:  200MB ->  200MB (   +0MB)	serialize_dep_graph
time:   0.009; rss:  200MB ->  142MB (  -58MB)	free_global_ctxt
time:   0.002; rss:  144MB ->  146MB (   +2MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.6)
time:   0.003; rss:  144MB ->  148MB (   +5MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.7)
time:   0.004; rss:  144MB ->  148MB (   +5MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.10)
time:   0.005; rss:  144MB ->  152MB (   +7MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.8)
time:   0.006; rss:  144MB ->  152MB (   +8MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.5)
time:   0.006; rss:  144MB ->  152MB (   +7MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.12)
time:   0.006; rss:  145MB ->  152MB (   +7MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.13)
time:   0.008; rss:  146MB ->  153MB (   +7MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.11)
time:   0.008; rss:  146MB ->  153MB (   +7MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.14)
time:   0.012; rss:  146MB ->  155MB (   +9MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.3)
time:   0.015; rss:  144MB ->  155MB (  +10MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.1)
time:   0.019; rss:  146MB ->  156MB (  +11MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.2)
time:   0.020; rss:  147MB ->  157MB (  +10MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.15)
time:   0.018; rss:  151MB ->  157MB (   +5MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.9)
time:   0.051; rss:  152MB ->  158MB (   +6MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.4)
time:   0.059; rss:  151MB ->  158MB (   +7MB)	LLVM_lto_optimize(ascii.412bee6f-cgu.0)
time:   0.269; rss:  180MB ->  159MB (  -21MB)	LLVM_passes(crate)
time:   0.000; rss:  159MB ->  159MB (   +0MB)	join_worker_thread
time:   0.211; rss:  142MB ->  159MB (  +17MB)	finish_ongoing_codegen
time:   0.000; rss:  159MB ->  159MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  159MB ->  159MB (   +0MB)	serialize_work_products
time:   0.000; rss:  159MB ->  159MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.002; rss:  159MB ->  160MB (   +1MB)	link_rlib
{"artifact":"/usr/home/liquid/tmp/.tmpZl7OYD/target/release/deps/libascii-32b6f23012324f3b.rlib","emit":"link"}
time:   0.000; rss:  160MB ->  160MB (   +0MB)	link_binary_remove_temps
time:   0.002; rss:  159MB ->  160MB (   +1MB)	link_binary
time:   0.002; rss:  159MB ->  159MB (   +0MB)	link_crate
time:   0.214; rss:  142MB ->  159MB (  +17MB)	link
{"message":"8 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 8 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0170`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0170`.\u001b[0m\n"}
time:   0.640; rss:   46MB ->  157MB ( +111MB)	total
