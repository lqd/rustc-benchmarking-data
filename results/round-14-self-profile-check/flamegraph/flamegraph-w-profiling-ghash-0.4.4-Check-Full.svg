<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (75,241 samples, 0.30%)</title><rect x="7.4197%" y="165" width="0.2950%" height="15" fill="rgb(227,0,7)"/><text x="7.6697%" y="175.50"></text></g><g><title>evaluate_obligation (71,191 samples, 0.28%)</title><rect x="7.4355%" y="149" width="0.2792%" height="15" fill="rgb(217,0,24)"/><text x="7.6855%" y="159.50"></text></g><g><title>param_env (66,301 samples, 0.26%)</title><rect x="8.8300%" y="133" width="0.2600%" height="15" fill="rgb(221,193,54)"/><text x="9.0800%" y="143.50"></text></g><g><title>codegen_fn_attrs (38,941 samples, 0.15%)</title><rect x="9.4151%" y="117" width="0.1527%" height="15" fill="rgb(248,212,6)"/><text x="9.6651%" y="127.50"></text></g><g><title>predicates_of (33,530 samples, 0.13%)</title><rect x="11.4478%" y="69" width="0.1315%" height="15" fill="rgb(208,68,35)"/><text x="11.6978%" y="79.50"></text></g><g><title>is_copy_raw (249,163 samples, 0.98%)</title><rect x="10.6060%" y="101" width="0.9770%" height="15" fill="rgb(232,128,0)"/><text x="10.8560%" y="111.50"></text></g><g><title>evaluate_obligation (243,953 samples, 0.96%)</title><rect x="10.6264%" y="85" width="0.9566%" height="15" fill="rgb(207,160,47)"/><text x="10.8764%" y="95.50"></text></g><g><title>is_copy_raw (55,952 samples, 0.22%)</title><rect x="11.6901%" y="69" width="0.2194%" height="15" fill="rgb(228,23,34)"/><text x="11.9401%" y="79.50"></text></g><g><title>evaluate_obligation (49,002 samples, 0.19%)</title><rect x="11.7173%" y="53" width="0.1922%" height="15" fill="rgb(218,30,26)"/><text x="11.9673%" y="63.50"></text></g><g><title>param_env (30,830 samples, 0.12%)</title><rect x="11.9095%" y="69" width="0.1209%" height="15" fill="rgb(220,122,19)"/><text x="12.1595%" y="79.50"></text></g><g><title>adt_drop_tys (109,552 samples, 0.43%)</title><rect x="11.6334%" y="85" width="0.4296%" height="15" fill="rgb(250,228,42)"/><text x="11.8834%" y="95.50"></text></g><g><title>is_copy_raw (60,220 samples, 0.24%)</title><rect x="12.0630%" y="85" width="0.2361%" height="15" fill="rgb(240,193,28)"/><text x="12.3130%" y="95.50"></text></g><g><title>evaluate_obligation (50,460 samples, 0.20%)</title><rect x="12.1012%" y="69" width="0.1979%" height="15" fill="rgb(216,20,37)"/><text x="12.3512%" y="79.50"></text></g><g><title>needs_drop_raw (184,012 samples, 0.72%)</title><rect x="11.5831%" y="101" width="0.7216%" height="15" fill="rgb(206,188,39)"/><text x="11.8331%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (34,721 samples, 0.14%)</title><rect x="12.5092%" y="85" width="0.1362%" height="15" fill="rgb(217,207,13)"/><text x="12.7592%" y="95.50"></text></g><g><title>resolve_instance (154,683 samples, 0.61%)</title><rect x="12.3046%" y="101" width="0.6066%" height="15" fill="rgb(231,73,38)"/><text x="12.5546%" y="111.50"></text></g><g><title>thir_body (94,042 samples, 0.37%)</title><rect x="12.9261%" y="101" width="0.3688%" height="15" fill="rgb(225,20,46)"/><text x="13.1761%" y="111.50"></text></g><g><title>mir_const (1,272,955 samples, 4.99%)</title><rect x="8.3112%" y="149" width="4.9916%" height="15" fill="rgb(210,31,41)"/><text x="8.5612%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (1,074,354 samples, 4.21%)</title><rect x="9.0900%" y="133" width="4.2129%" height="15" fill="rgb(221,200,47)"/><text x="9.3400%" y="143.50">unsaf..</text></g><g><title>mir_built (952,491 samples, 3.74%)</title><rect x="9.5678%" y="117" width="3.7350%" height="15" fill="rgb(226,26,5)"/><text x="9.8178%" y="127.50">mir_..</text></g><g><title>mir_promoted (1,434,756 samples, 5.63%)</title><rect x="7.7147%" y="165" width="5.6261%" height="15" fill="rgb(249,33,26)"/><text x="7.9647%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (43,190 samples, 0.17%)</title><rect x="13.3408%" y="165" width="0.1694%" height="15" fill="rgb(235,183,28)"/><text x="13.5908%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (67,170 samples, 0.26%)</title><rect x="13.5102%" y="165" width="0.2634%" height="15" fill="rgb(221,5,38)"/><text x="13.7602%" y="175.50"></text></g><g><title>type_op_normalize_ty (26,472 samples, 0.10%)</title><rect x="13.7736%" y="165" width="0.1038%" height="15" fill="rgb(247,18,42)"/><text x="14.0236%" y="175.50"></text></g><g><title>type_op_prove_predicate (199,532 samples, 0.78%)</title><rect x="13.8774%" y="165" width="0.7824%" height="15" fill="rgb(241,131,45)"/><text x="14.1274%" y="175.50"></text></g><g><title>MIR_borrow_checking (3,147,574 samples, 12.34%)</title><rect x="2.3419%" y="197" width="12.3426%" height="15" fill="rgb(249,31,29)"/><text x="2.5919%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (3,137,634 samples, 12.30%)</title><rect x="2.3809%" y="181" width="12.3036%" height="15" fill="rgb(225,111,53)"/><text x="2.6309%" y="191.50">mir_borrowck</text></g><g><title>hir_owner (25,820 samples, 0.10%)</title><rect x="14.9706%" y="181" width="0.1012%" height="15" fill="rgb(238,160,17)"/><text x="15.2206%" y="191.50"></text></g><g><title>hir_module_items (95,211 samples, 0.37%)</title><rect x="14.7005%" y="197" width="0.3734%" height="15" fill="rgb(214,148,48)"/><text x="14.9505%" y="207.50"></text></g><g><title>associated_item (36,840 samples, 0.14%)</title><rect x="15.6562%" y="133" width="0.1445%" height="15" fill="rgb(232,36,49)"/><text x="15.9062%" y="143.50"></text></g><g><title>get_lang_items (44,931 samples, 0.18%)</title><rect x="15.9029%" y="117" width="0.1762%" height="15" fill="rgb(209,103,24)"/><text x="16.1529%" y="127.50"></text></g><g><title>codegen_fn_attrs (133,122 samples, 0.52%)</title><rect x="15.8007%" y="133" width="0.5220%" height="15" fill="rgb(229,88,8)"/><text x="16.0507%" y="143.50"></text></g><g><title>codegen_fn_attrs (235,223 samples, 0.92%)</title><rect x="15.4074%" y="165" width="0.9224%" height="15" fill="rgb(213,181,19)"/><text x="15.6574%" y="175.50"></text></g><g><title>should_inherit_track_caller (201,862 samples, 0.79%)</title><rect x="15.5382%" y="149" width="0.7916%" height="15" fill="rgb(254,191,54)"/><text x="15.7882%" y="159.50"></text></g><g><title>check_mod_attrs (301,963 samples, 1.18%)</title><rect x="15.1465%" y="181" width="1.1841%" height="15" fill="rgb(241,83,37)"/><text x="15.3965%" y="191.50"></text></g><g><title>lookup_deprecation_entry (38,470 samples, 0.15%)</title><rect x="16.6314%" y="165" width="0.1509%" height="15" fill="rgb(233,36,39)"/><text x="16.8814%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (99,172 samples, 0.39%)</title><rect x="16.4837%" y="181" width="0.3889%" height="15" fill="rgb(226,3,54)"/><text x="16.7337%" y="191.50"></text></g><g><title>looking_for_derive_registrar (26,080 samples, 0.10%)</title><rect x="16.8776%" y="181" width="0.1023%" height="15" fill="rgb(245,192,40)"/><text x="17.1276%" y="191.50"></text></g><g><title>misc_checking_1 (488,576 samples, 1.92%)</title><rect x="15.0755%" y="197" width="1.9159%" height="15" fill="rgb(238,167,29)"/><text x="15.3255%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (75,171 samples, 0.29%)</title><rect x="16.9960%" y="181" width="0.2948%" height="15" fill="rgb(232,182,51)"/><text x="17.2460%" y="191.50"></text></g><g><title>check_mod_liveness (61,661 samples, 0.24%)</title><rect x="17.0490%" y="165" width="0.2418%" height="15" fill="rgb(231,60,39)"/><text x="17.2990%" y="175.50"></text></g><g><title>misc_checking_2 (178,012 samples, 0.70%)</title><rect x="16.9913%" y="197" width="0.6980%" height="15" fill="rgb(208,69,12)"/><text x="17.2413%" y="207.50"></text></g><g><title>match_checking (101,651 samples, 0.40%)</title><rect x="17.2907%" y="181" width="0.3986%" height="15" fill="rgb(235,93,37)"/><text x="17.5407%" y="191.50"></text></g><g><title>check_match (97,921 samples, 0.38%)</title><rect x="17.3054%" y="165" width="0.3840%" height="15" fill="rgb(213,116,39)"/><text x="17.5554%" y="175.50"></text></g><g><title>check_private_in_public (41,861 samples, 0.16%)</title><rect x="17.7179%" y="181" width="0.1641%" height="15" fill="rgb(222,207,29)"/><text x="17.9679%" y="191.50"></text></g><g><title>death_checking (94,901 samples, 0.37%)</title><rect x="17.8821%" y="181" width="0.3721%" height="15" fill="rgb(206,96,30)"/><text x="18.1321%" y="191.50"></text></g><g><title>item_attrs (27,161 samples, 0.11%)</title><rect x="18.1477%" y="165" width="0.1065%" height="15" fill="rgb(218,138,4)"/><text x="18.3977%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (26,731 samples, 0.10%)</title><rect x="18.1494%" y="149" width="0.1048%" height="15" fill="rgb(250,191,14)"/><text x="18.3994%" y="159.50"></text></g><g><title>param_env (56,081 samples, 0.22%)</title><rect x="19.1504%" y="149" width="0.2199%" height="15" fill="rgb(239,60,40)"/><text x="19.4004%" y="159.50"></text></g><g><title>crate_lints (597,377 samples, 2.34%)</title><rect x="18.2598%" y="165" width="2.3425%" height="15" fill="rgb(206,27,48)"/><text x="18.5098%" y="175.50">c..</text></g><g><title>type_of (314,185 samples, 1.23%)</title><rect x="19.3703%" y="149" width="1.2320%" height="15" fill="rgb(225,35,8)"/><text x="19.6203%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (227,833 samples, 0.89%)</title><rect x="19.7089%" y="133" width="0.8934%" height="15" fill="rgb(250,213,24)"/><text x="19.9589%" y="143.50"></text></g><g><title>lint_checking (654,937 samples, 2.57%)</title><rect x="18.2542%" y="181" width="2.5682%" height="15" fill="rgb(247,123,22)"/><text x="18.5042%" y="191.50">li..</text></g><g><title>module_lints (56,140 samples, 0.22%)</title><rect x="20.6023%" y="165" width="0.2201%" height="15" fill="rgb(231,138,38)"/><text x="20.8523%" y="175.50"></text></g><g><title>lint_mod (54,480 samples, 0.21%)</title><rect x="20.6088%" y="149" width="0.2136%" height="15" fill="rgb(231,145,46)"/><text x="20.8588%" y="159.50"></text></g><g><title>privacy_access_levels (58,140 samples, 0.23%)</title><rect x="20.8224%" y="181" width="0.2280%" height="15" fill="rgb(251,118,11)"/><text x="21.0724%" y="191.50"></text></g><g><title>privacy_checking_modules (104,141 samples, 0.41%)</title><rect x="21.0504%" y="181" width="0.4084%" height="15" fill="rgb(217,147,25)"/><text x="21.3004%" y="191.50"></text></g><g><title>check_mod_privacy (103,001 samples, 0.40%)</title><rect x="21.0549%" y="165" width="0.4039%" height="15" fill="rgb(247,81,37)"/><text x="21.3049%" y="175.50"></text></g><g><title>misc_checking_3 (976,780 samples, 3.83%)</title><rect x="17.6894%" y="197" width="3.8302%" height="15" fill="rgb(209,12,38)"/><text x="17.9394%" y="207.50">misc..</text></g><g><title>impl_parent (493,724 samples, 1.94%)</title><rect x="24.2695%" y="133" width="1.9360%" height="15" fill="rgb(227,1,9)"/><text x="24.5195%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (310,943 samples, 1.22%)</title><rect x="24.9863%" y="117" width="1.2193%" height="15" fill="rgb(248,47,43)"/><text x="25.2363%" y="127.50"></text></g><g><title>impl_trait_ref (1,127,244 samples, 4.42%)</title><rect x="26.2056%" y="133" width="4.4203%" height="15" fill="rgb(221,10,30)"/><text x="26.4556%" y="143.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (955,804 samples, 3.75%)</title><rect x="26.8778%" y="117" width="3.7480%" height="15" fill="rgb(210,229,1)"/><text x="27.1278%" y="127.50">meta..</text></g><g><title>coherent_trait (2,431,847 samples, 9.54%)</title><rect x="21.6385%" y="165" width="9.5360%" height="15" fill="rgb(222,148,37)"/><text x="21.8885%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (2,423,987 samples, 9.51%)</title><rect x="21.6693%" y="149" width="9.5052%" height="15" fill="rgb(234,67,33)"/><text x="21.9193%" y="159.50">specialization..</text></g><g><title>trait_impls_of (138,552 samples, 0.54%)</title><rect x="30.6312%" y="133" width="0.5433%" height="15" fill="rgb(247,98,35)"/><text x="30.8812%" y="143.50"></text></g><g><title>implementations_of_trait (37,680 samples, 0.15%)</title><rect x="31.0267%" y="117" width="0.1478%" height="15" fill="rgb(247,138,52)"/><text x="31.2767%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (27,610 samples, 0.11%)</title><rect x="31.0662%" y="101" width="0.1083%" height="15" fill="rgb(213,79,30)"/><text x="31.3162%" y="111.50"></text></g><g><title>coherence_checking (2,475,048 samples, 9.71%)</title><rect x="21.5927%" y="181" width="9.7054%" height="15" fill="rgb(246,177,23)"/><text x="21.8427%" y="191.50">coherence_chec..</text></g><g><title>adt_sized_constraint (28,170 samples, 0.11%)</title><rect x="38.4879%" y="133" width="0.1105%" height="15" fill="rgb(230,62,27)"/><text x="38.7379%" y="143.50"></text></g><g><title>associated_item (172,912 samples, 0.68%)</title><rect x="38.7714%" y="117" width="0.6780%" height="15" fill="rgb(216,154,8)"/><text x="39.0214%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (141,642 samples, 0.56%)</title><rect x="38.8940%" y="101" width="0.5554%" height="15" fill="rgb(244,35,45)"/><text x="39.1440%" y="111.50"></text></g><g><title>associated_items (224,432 samples, 0.88%)</title><rect x="38.5983%" y="133" width="0.8801%" height="15" fill="rgb(251,115,12)"/><text x="38.8483%" y="143.50"></text></g><g><title>adt_dtorck_constraint (39,510 samples, 0.15%)</title><rect x="39.9177%" y="101" width="0.1549%" height="15" fill="rgb(240,54,50)"/><text x="40.1677%" y="111.50"></text></g><g><title>adt_dtorck_constraint (86,840 samples, 0.34%)</title><rect x="39.7804%" y="117" width="0.3405%" height="15" fill="rgb(233,84,52)"/><text x="40.0304%" y="127.50"></text></g><g><title>dropck_outlives (224,312 samples, 0.88%)</title><rect x="39.5311%" y="133" width="0.8796%" height="15" fill="rgb(207,117,47)"/><text x="39.7811%" y="143.50"></text></g><g><title>normalize_projection_ty (73,901 samples, 0.29%)</title><rect x="40.1209%" y="117" width="0.2898%" height="15" fill="rgb(249,43,39)"/><text x="40.3709%" y="127.50"></text></g><g><title>adt_def (36,551 samples, 0.14%)</title><rect x="41.2699%" y="101" width="0.1433%" height="15" fill="rgb(209,38,44)"/><text x="41.5199%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (35,091 samples, 0.14%)</title><rect x="41.2756%" y="85" width="0.1376%" height="15" fill="rgb(236,212,23)"/><text x="41.5256%" y="95.50"></text></g><g><title>adt_sized_constraint (28,660 samples, 0.11%)</title><rect x="41.4132%" y="101" width="0.1124%" height="15" fill="rgb(242,79,21)"/><text x="41.6632%" y="111.50"></text></g><g><title>adt_def (28,190 samples, 0.11%)</title><rect x="41.4150%" y="85" width="0.1105%" height="15" fill="rgb(211,96,35)"/><text x="41.6650%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (27,980 samples, 0.11%)</title><rect x="41.4159%" y="69" width="0.1097%" height="15" fill="rgb(253,215,40)"/><text x="41.6659%" y="79.50"></text></g><g><title>item_attrs (26,100 samples, 0.10%)</title><rect x="41.4232%" y="53" width="0.1023%" height="15" fill="rgb(211,81,21)"/><text x="41.6732%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (25,870 samples, 0.10%)</title><rect x="41.4241%" y="37" width="0.1014%" height="15" fill="rgb(208,190,38)"/><text x="41.6741%" y="47.50"></text></g><g><title>adt_sized_constraint (79,991 samples, 0.31%)</title><rect x="41.2335%" y="117" width="0.3137%" height="15" fill="rgb(235,213,38)"/><text x="41.4835%" y="127.50"></text></g><g><title>evaluate_obligation (341,845 samples, 1.34%)</title><rect x="40.4107%" y="133" width="1.3405%" height="15" fill="rgb(237,122,38)"/><text x="40.6607%" y="143.50"></text></g><g><title>fn_sig (37,760 samples, 0.15%)</title><rect x="41.7763%" y="133" width="0.1481%" height="15" fill="rgb(244,218,35)"/><text x="42.0263%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (33,200 samples, 0.13%)</title><rect x="41.7942%" y="117" width="0.1302%" height="15" fill="rgb(240,68,47)"/><text x="42.0442%" y="127.50"></text></g><g><title>evaluate_obligation (63,521 samples, 0.25%)</title><rect x="42.4667%" y="117" width="0.2491%" height="15" fill="rgb(210,16,53)"/><text x="42.7167%" y="127.50"></text></g><g><title>method_autoderef_steps (117,932 samples, 0.46%)</title><rect x="42.2973%" y="133" width="0.4624%" height="15" fill="rgb(235,124,12)"/><text x="42.5473%" y="143.50"></text></g><g><title>predicates_of (63,120 samples, 0.25%)</title><rect x="42.8033%" y="133" width="0.2475%" height="15" fill="rgb(224,169,11)"/><text x="43.0533%" y="143.50"></text></g><g><title>predicates_defined_on (42,850 samples, 0.17%)</title><rect x="42.8827%" y="117" width="0.1680%" height="15" fill="rgb(250,166,2)"/><text x="43.1327%" y="127.50"></text></g><g><title>item_bodies_checking (3,033,944 samples, 11.90%)</title><rect x="31.3531%" y="181" width="11.8970%" height="15" fill="rgb(242,216,29)"/><text x="31.6031%" y="191.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (3,031,764 samples, 11.89%)</title><rect x="31.3616%" y="165" width="11.8885%" height="15" fill="rgb(230,116,27)"/><text x="31.6116%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (3,022,554 samples, 11.85%)</title><rect x="31.3977%" y="149" width="11.8523%" height="15" fill="rgb(228,99,48)"/><text x="31.6477%" y="159.50">typeck</text></g><g><title>adt_destructor (56,720 samples, 0.22%)</title><rect x="44.4044%" y="149" width="0.2224%" height="15" fill="rgb(253,11,6)"/><text x="44.6544%" y="159.50"></text></g><g><title>coherent_trait (53,690 samples, 0.21%)</title><rect x="44.4163%" y="133" width="0.2105%" height="15" fill="rgb(247,143,39)"/><text x="44.6663%" y="143.50"></text></g><g><title>specialization_graph_of (52,320 samples, 0.21%)</title><rect x="44.4216%" y="117" width="0.2052%" height="15" fill="rgb(236,97,10)"/><text x="44.6716%" y="127.50"></text></g><g><title>predicates_of (67,770 samples, 0.27%)</title><rect x="45.9150%" y="133" width="0.2657%" height="15" fill="rgb(233,208,19)"/><text x="46.1650%" y="143.50"></text></g><g><title>predicates_defined_on (42,190 samples, 0.17%)</title><rect x="46.0153%" y="117" width="0.1654%" height="15" fill="rgb(216,164,2)"/><text x="46.2653%" y="127.50"></text></g><g><title>evaluate_obligation (489,395 samples, 1.92%)</title><rect x="44.6591%" y="149" width="1.9191%" height="15" fill="rgb(220,129,5)"/><text x="44.9091%" y="159.50">e..</text></g><g><title>trait_impls_of (101,371 samples, 0.40%)</title><rect x="46.1807%" y="133" width="0.3975%" height="15" fill="rgb(242,17,10)"/><text x="46.4307%" y="143.50"></text></g><g><title>implementations_of_trait (35,960 samples, 0.14%)</title><rect x="46.4372%" y="117" width="0.1410%" height="15" fill="rgb(242,107,0)"/><text x="46.6872%" y="127.50"></text></g><g><title>item_types_checking (927,210 samples, 3.64%)</title><rect x="43.2501%" y="181" width="3.6359%" height="15" fill="rgb(251,28,31)"/><text x="43.5001%" y="191.50">item..</text></g><g><title>check_mod_item_types (925,470 samples, 3.63%)</title><rect x="43.2569%" y="165" width="3.6290%" height="15" fill="rgb(233,223,10)"/><text x="43.5069%" y="175.50">chec..</text></g><g><title>fn_sig (65,210 samples, 0.26%)</title><rect x="47.1676%" y="149" width="0.2557%" height="15" fill="rgb(215,21,27)"/><text x="47.4176%" y="159.50"></text></g><g><title>type_of (33,740 samples, 0.13%)</title><rect x="47.2910%" y="133" width="0.1323%" height="15" fill="rgb(232,23,21)"/><text x="47.5410%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (33,000 samples, 0.13%)</title><rect x="47.2939%" y="117" width="0.1294%" height="15" fill="rgb(244,5,23)"/><text x="47.5439%" y="127.50"></text></g><g><title>named_region_map (117,062 samples, 0.46%)</title><rect x="47.5196%" y="133" width="0.4590%" height="15" fill="rgb(226,81,46)"/><text x="47.7696%" y="143.50"></text></g><g><title>resolve_lifetimes (111,182 samples, 0.44%)</title><rect x="47.5426%" y="117" width="0.4360%" height="15" fill="rgb(247,70,30)"/><text x="47.7926%" y="127.50"></text></g><g><title>lint_levels (31,880 samples, 0.13%)</title><rect x="47.8536%" y="101" width="0.1250%" height="15" fill="rgb(212,68,19)"/><text x="48.1036%" y="111.50"></text></g><g><title>generics_of (154,032 samples, 0.60%)</title><rect x="47.4233%" y="149" width="0.6040%" height="15" fill="rgb(240,187,13)"/><text x="47.6733%" y="159.50"></text></g><g><title>explicit_predicates_of (38,670 samples, 0.15%)</title><rect x="48.1753%" y="117" width="0.1516%" height="15" fill="rgb(223,113,26)"/><text x="48.4253%" y="127.50"></text></g><g><title>predicates_of (113,131 samples, 0.44%)</title><rect x="48.0809%" y="149" width="0.4436%" height="15" fill="rgb(206,192,2)"/><text x="48.3309%" y="159.50"></text></g><g><title>predicates_defined_on (102,801 samples, 0.40%)</title><rect x="48.1214%" y="133" width="0.4031%" height="15" fill="rgb(241,108,4)"/><text x="48.3714%" y="143.50"></text></g><g><title>inferred_outlives_of (50,401 samples, 0.20%)</title><rect x="48.3269%" y="117" width="0.1976%" height="15" fill="rgb(247,173,49)"/><text x="48.5769%" y="127.50"></text></g><g><title>inferred_outlives_crate (40,001 samples, 0.16%)</title><rect x="48.3677%" y="101" width="0.1569%" height="15" fill="rgb(224,114,35)"/><text x="48.6177%" y="111.50"></text></g><g><title>adt_def (37,870 samples, 0.15%)</title><rect x="48.8708%" y="117" width="0.1485%" height="15" fill="rgb(245,159,27)"/><text x="49.1208%" y="127.50"></text></g><g><title>type_collecting (563,926 samples, 2.21%)</title><rect x="46.8905%" y="181" width="2.2113%" height="15" fill="rgb(245,172,44)"/><text x="47.1405%" y="191.50">t..</text></g><g><title>collect_mod_item_types (555,816 samples, 2.18%)</title><rect x="46.9223%" y="165" width="2.1795%" height="15" fill="rgb(236,23,11)"/><text x="47.1723%" y="175.50">c..</text></g><g><title>type_of (147,211 samples, 0.58%)</title><rect x="48.5245%" y="149" width="0.5773%" height="15" fill="rgb(205,117,38)"/><text x="48.7745%" y="159.50"></text></g><g><title>type_of (69,051 samples, 0.27%)</title><rect x="48.8310%" y="133" width="0.2708%" height="15" fill="rgb(237,72,25)"/><text x="49.0810%" y="143.50"></text></g><g><title>adt_def (33,070 samples, 0.13%)</title><rect x="51.2630%" y="117" width="0.1297%" height="15" fill="rgb(244,70,9)"/><text x="51.5130%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (31,640 samples, 0.12%)</title><rect x="51.2686%" y="101" width="0.1241%" height="15" fill="rgb(217,125,39)"/><text x="51.5186%" y="111.50"></text></g><g><title>adt_sized_constraint (38,790 samples, 0.15%)</title><rect x="51.2426%" y="133" width="0.1521%" height="15" fill="rgb(235,36,10)"/><text x="51.4926%" y="143.50"></text></g><g><title>predicates_of (31,400 samples, 0.12%)</title><rect x="51.4906%" y="133" width="0.1231%" height="15" fill="rgb(251,123,47)"/><text x="51.7406%" y="143.50"></text></g><g><title>evaluate_obligation (299,662 samples, 1.18%)</title><rect x="50.5027%" y="149" width="1.1751%" height="15" fill="rgb(221,13,13)"/><text x="50.7527%" y="159.50"></text></g><g><title>implied_outlives_bounds (74,782 samples, 0.29%)</title><rect x="51.7207%" y="149" width="0.2932%" height="15" fill="rgb(238,131,9)"/><text x="51.9707%" y="159.50"></text></g><g><title>param_env (32,261 samples, 0.13%)</title><rect x="52.0139%" y="149" width="0.1265%" height="15" fill="rgb(211,50,8)"/><text x="52.2639%" y="159.50"></text></g><g><title>predicates_of (48,551 samples, 0.19%)</title><rect x="52.1404%" y="149" width="0.1904%" height="15" fill="rgb(245,182,24)"/><text x="52.3904%" y="159.50"></text></g><g><title>predicates_defined_on (37,481 samples, 0.15%)</title><rect x="52.1839%" y="133" width="0.1470%" height="15" fill="rgb(242,14,37)"/><text x="52.4339%" y="143.50"></text></g><g><title>check_impl_item_well_formed (827,538 samples, 3.25%)</title><rect x="49.2142%" y="165" width="3.2450%" height="15" fill="rgb(246,228,12)"/><text x="49.4642%" y="175.50">che..</text></g><g><title>region_scope_tree (32,750 samples, 0.13%)</title><rect x="52.3308%" y="149" width="0.1284%" height="15" fill="rgb(213,55,15)"/><text x="52.5808%" y="159.50"></text></g><g><title>adt_sized_constraint (35,770 samples, 0.14%)</title><rect x="53.7526%" y="133" width="0.1403%" height="15" fill="rgb(209,9,3)"/><text x="54.0026%" y="143.50"></text></g><g><title>adt_sized_constraint (32,860 samples, 0.13%)</title><rect x="53.7640%" y="117" width="0.1289%" height="15" fill="rgb(230,59,30)"/><text x="54.0140%" y="127.50"></text></g><g><title>evaluate_obligation (126,261 samples, 0.50%)</title><rect x="53.4027%" y="149" width="0.4951%" height="15" fill="rgb(209,121,21)"/><text x="53.6527%" y="159.50"></text></g><g><title>implied_outlives_bounds (44,830 samples, 0.18%)</title><rect x="53.9026%" y="149" width="0.1758%" height="15" fill="rgb(220,109,13)"/><text x="54.1526%" y="159.50"></text></g><g><title>param_env (133,351 samples, 0.52%)</title><rect x="54.0784%" y="149" width="0.5229%" height="15" fill="rgb(232,18,1)"/><text x="54.3284%" y="159.50"></text></g><g><title>predicates_of (27,930 samples, 0.11%)</title><rect x="54.6013%" y="149" width="0.1095%" height="15" fill="rgb(215,41,42)"/><text x="54.8513%" y="159.50"></text></g><g><title>analysis (13,500,280 samples, 52.94%)</title><rect x="1.8773%" y="213" width="52.9387%" height="15" fill="rgb(224,123,36)"/><text x="2.1273%" y="223.50">analysis</text></g><g><title>type_check_crate (8,491,155 samples, 33.30%)</title><rect x="21.5196%" y="197" width="33.2964%" height="15" fill="rgb(240,125,3)"/><text x="21.7696%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,456,477 samples, 5.71%)</title><rect x="49.1047%" y="181" width="5.7113%" height="15" fill="rgb(205,98,50)"/><text x="49.3547%" y="191.50">wf_chec..</text></g><g><title>check_item_well_formed (601,007 samples, 2.36%)</title><rect x="52.4593%" y="165" width="2.3567%" height="15" fill="rgb(205,185,37)"/><text x="52.7093%" y="175.50">c..</text></g><g><title>codegen_crate (493,916 samples, 1.94%)</title><rect x="54.8460%" y="213" width="1.9368%" height="15" fill="rgb(238,207,15)"/><text x="55.0960%" y="223.50">c..</text></g><g><title>AST_validation (50,191 samples, 0.20%)</title><rect x="57.3913%" y="197" width="0.1968%" height="15" fill="rgb(213,199,42)"/><text x="57.6413%" y="207.50"></text></g><g><title>crate_injection (60,880 samples, 0.24%)</title><rect x="57.6788%" y="197" width="0.2387%" height="15" fill="rgb(235,201,11)"/><text x="57.9288%" y="207.50"></text></g><g><title>metadata_load_macro (84,110 samples, 0.33%)</title><rect x="80.7955%" y="165" width="0.3298%" height="15" fill="rgb(207,46,11)"/><text x="81.0455%" y="175.50"></text></g><g><title>macro_expand_crate (6,291,330 samples, 24.67%)</title><rect x="57.9175%" y="197" width="24.6702%" height="15" fill="rgb(241,35,35)"/><text x="58.1675%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (6,274,839 samples, 24.61%)</title><rect x="57.9822%" y="181" width="24.6055%" height="15" fill="rgb(243,32,47)"/><text x="58.2322%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (372,933 samples, 1.46%)</title><rect x="81.1254%" y="165" width="1.4624%" height="15" fill="rgb(247,202,23)"/><text x="81.3754%" y="175.50"></text></g><g><title>metadata_register_crate (145,591 samples, 0.57%)</title><rect x="82.0168%" y="149" width="0.5709%" height="15" fill="rgb(219,102,11)"/><text x="82.2668%" y="159.50"></text></g><g><title>metadata_register_crate (61,791 samples, 0.24%)</title><rect x="82.3454%" y="133" width="0.2423%" height="15" fill="rgb(243,110,44)"/><text x="82.5954%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (99,052 samples, 0.39%)</title><rect x="82.5992%" y="197" width="0.3884%" height="15" fill="rgb(222,74,54)"/><text x="82.8492%" y="207.50"></text></g><g><title>finalize_macro_resolutions (28,630 samples, 0.11%)</title><rect x="83.0889%" y="181" width="0.1123%" height="15" fill="rgb(216,99,12)"/><text x="83.3389%" y="191.50"></text></g><g><title>late_resolve_crate (430,795 samples, 1.69%)</title><rect x="83.2012%" y="181" width="1.6893%" height="15" fill="rgb(226,22,26)"/><text x="83.4512%" y="191.50"></text></g><g><title>configure_and_expand (7,200,270 samples, 28.23%)</title><rect x="56.7828%" y="213" width="28.2344%" height="15" fill="rgb(217,163,10)"/><text x="57.0328%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (517,586 samples, 2.03%)</title><rect x="82.9876%" y="197" width="2.0296%" height="15" fill="rgb(213,25,53)"/><text x="83.2376%" y="207.50">r..</text></g><g><title>drop_ast (32,270 samples, 0.13%)</title><rect x="85.0172%" y="213" width="0.1265%" height="15" fill="rgb(252,105,26)"/><text x="85.2672%" y="223.50"></text></g><g><title>early_lint_checks (95,061 samples, 0.37%)</title><rect x="85.2379%" y="213" width="0.3728%" height="15" fill="rgb(220,39,43)"/><text x="85.4879%" y="223.50"></text></g><g><title>free_global_ctxt (1,378,426 samples, 5.41%)</title><rect x="85.6106%" y="213" width="5.4052%" height="15" fill="rgb(229,68,48)"/><text x="85.8606%" y="223.50">free_gl..</text></g><g><title>crate_hash (64,121 samples, 0.25%)</title><rect x="91.9642%" y="197" width="0.2514%" height="15" fill="rgb(252,8,32)"/><text x="92.2142%" y="207.50"></text></g><g><title>mir_for_ctfe (30,970 samples, 0.12%)</title><rect x="92.3096%" y="197" width="0.1214%" height="15" fill="rgb(223,20,43)"/><text x="92.5596%" y="207.50"></text></g><g><title>generate_crate_metadata (393,994 samples, 1.54%)</title><rect x="91.0159%" y="213" width="1.5450%" height="15" fill="rgb(229,81,49)"/><text x="91.2659%" y="223.50"></text></g><g><title>hir_lowering (385,804 samples, 1.51%)</title><rect x="92.5608%" y="213" width="1.5129%" height="15" fill="rgb(236,28,36)"/><text x="92.8108%" y="223.50"></text></g><g><title>link (45,480 samples, 0.18%)</title><rect x="94.0737%" y="213" width="0.1783%" height="15" fill="rgb(249,185,26)"/><text x="94.3237%" y="223.50"></text></g><g><title>parse_crate (534,306 samples, 2.10%)</title><rect x="94.2520%" y="213" width="2.0952%" height="15" fill="rgb(249,174,33)"/><text x="94.5020%" y="223.50">p..</text></g><g><title>prepare_outputs (153,772 samples, 0.60%)</title><rect x="96.3724%" y="213" width="0.6030%" height="15" fill="rgb(233,201,37)"/><text x="96.6224%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (382,864 samples, 1.50%)</title><rect x="96.9754%" y="213" width="1.5013%" height="15" fill="rgb(221,78,26)"/><text x="97.2254%" y="223.50"></text></g><g><title>setup_global_ctxt (86,741 samples, 0.34%)</title><rect x="98.5315%" y="213" width="0.3401%" height="15" fill="rgb(250,127,30)"/><text x="98.7815%" y="223.50"></text></g><g><title>all (25,501,734 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (25,501,734 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (287,743 samples, 1.13%)</title><rect x="98.8717%" y="213" width="1.1283%" height="15" fill="rgb(249,83,47)"/><text x="99.1217%" y="223.50"></text></g></svg></svg>