<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (86,310 samples, 0.15%)</title><rect x="9.0518%" y="101" width="0.1454%" height="15" fill="rgb(227,0,7)"/><text x="9.3018%" y="111.50"></text></g><g><title>is_copy_raw (83,050 samples, 0.14%)</title><rect x="9.0573%" y="85" width="0.1399%" height="15" fill="rgb(217,0,24)"/><text x="9.3073%" y="95.50"></text></g><g><title>evaluate_obligation (77,770 samples, 0.13%)</title><rect x="9.0662%" y="69" width="0.1310%" height="15" fill="rgb(221,193,54)"/><text x="9.3162%" y="79.50"></text></g><g><title>thir_body (145,051 samples, 0.24%)</title><rect x="9.2341%" y="101" width="0.2444%" height="15" fill="rgb(248,212,6)"/><text x="9.4841%" y="111.50"></text></g><g><title>mir_const (640,166 samples, 1.08%)</title><rect x="8.4037%" y="149" width="1.0787%" height="15" fill="rgb(208,68,35)"/><text x="8.6537%" y="159.50"></text></g><g><title>unsafety_check_result (526,434 samples, 0.89%)</title><rect x="8.5953%" y="133" width="0.8871%" height="15" fill="rgb(232,128,0)"/><text x="8.8453%" y="143.50"></text></g><g><title>mir_built (459,513 samples, 0.77%)</title><rect x="8.7081%" y="117" width="0.7743%" height="15" fill="rgb(207,160,47)"/><text x="8.9581%" y="127.50"></text></g><g><title>thir_body (1,979,031 samples, 3.33%)</title><rect x="12.6051%" y="85" width="3.3347%" height="15" fill="rgb(228,23,34)"/><text x="12.8551%" y="95.50">thi..</text></g><g><title>lit_to_const (228,114 samples, 0.38%)</title><rect x="15.5554%" y="69" width="0.3844%" height="15" fill="rgb(218,30,26)"/><text x="15.8054%" y="79.50"></text></g><g><title>mir_const_qualif (3,833,213 samples, 6.46%)</title><rect x="9.4823%" y="149" width="6.4591%" height="15" fill="rgb(220,122,19)"/><text x="9.7323%" y="159.50">mir_cons..</text></g><g><title>mir_const (3,747,651 samples, 6.31%)</title><rect x="9.6265%" y="133" width="6.3149%" height="15" fill="rgb(250,228,42)"/><text x="9.8765%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (3,620,219 samples, 6.10%)</title><rect x="9.8412%" y="117" width="6.1002%" height="15" fill="rgb(240,193,28)"/><text x="10.0912%" y="127.50">unsafety..</text></g><g><title>mir_built (3,535,098 samples, 5.96%)</title><rect x="9.9847%" y="101" width="5.9567%" height="15" fill="rgb(216,20,37)"/><text x="10.2347%" y="111.50">mir_built</text></g><g><title>mir_promoted (5,260,119 samples, 8.86%)</title><rect x="7.0786%" y="165" width="8.8634%" height="15" fill="rgb(206,188,39)"/><text x="7.3286%" y="175.50">mir_promoted</text></g><g><title>MIR_borrow_checking (8,299,852 samples, 13.99%)</title><rect x="2.2522%" y="197" width="13.9854%" height="15" fill="rgb(217,207,13)"/><text x="2.5022%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,284,612 samples, 13.96%)</title><rect x="2.2779%" y="181" width="13.9598%" height="15" fill="rgb(231,73,38)"/><text x="2.5279%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (143,131 samples, 0.24%)</title><rect x="15.9965%" y="165" width="0.2412%" height="15" fill="rgb(225,20,46)"/><text x="16.2465%" y="175.50"></text></g><g><title>MIR_effect_checking (174,912 samples, 0.29%)</title><rect x="16.2377%" y="197" width="0.2947%" height="15" fill="rgb(210,31,41)"/><text x="16.4877%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (158,792 samples, 0.27%)</title><rect x="16.2648%" y="181" width="0.2676%" height="15" fill="rgb(221,200,47)"/><text x="16.5148%" y="191.50"></text></g><g><title>hir_module_items (163,222 samples, 0.28%)</title><rect x="16.5324%" y="197" width="0.2750%" height="15" fill="rgb(226,26,5)"/><text x="16.7824%" y="207.50"></text></g><g><title>should_inherit_track_caller (73,041 samples, 0.12%)</title><rect x="18.0456%" y="149" width="0.1231%" height="15" fill="rgb(249,33,26)"/><text x="18.2956%" y="159.50"></text></g><g><title>codegen_fn_attrs (221,242 samples, 0.37%)</title><rect x="17.8418%" y="165" width="0.3728%" height="15" fill="rgb(235,183,28)"/><text x="18.0918%" y="175.50"></text></g><g><title>check_mod_attrs (803,740 samples, 1.35%)</title><rect x="16.8611%" y="181" width="1.3543%" height="15" fill="rgb(221,5,38)"/><text x="17.1111%" y="191.50"></text></g><g><title>check_mod_const_bodies (86,591 samples, 0.15%)</title><rect x="18.2154%" y="181" width="0.1459%" height="15" fill="rgb(247,18,42)"/><text x="18.4654%" y="191.50"></text></g><g><title>check_mod_loops (79,141 samples, 0.13%)</title><rect x="18.3614%" y="181" width="0.1334%" height="15" fill="rgb(241,131,45)"/><text x="18.6114%" y="191.50"></text></g><g><title>lookup_deprecation_entry (82,042 samples, 0.14%)</title><rect x="18.6663%" y="165" width="0.1382%" height="15" fill="rgb(249,31,29)"/><text x="18.9163%" y="175.50"></text></g><g><title>stability_index (62,561 samples, 0.11%)</title><rect x="18.6991%" y="149" width="0.1054%" height="15" fill="rgb(225,111,53)"/><text x="18.9491%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (209,972 samples, 0.35%)</title><rect x="18.5084%" y="181" width="0.3538%" height="15" fill="rgb(238,160,17)"/><text x="18.7584%" y="191.50"></text></g><g><title>misc_checking_1 (1,265,854 samples, 2.13%)</title><rect x="16.8084%" y="197" width="2.1330%" height="15" fill="rgb(214,148,48)"/><text x="17.0584%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (163,361 samples, 0.28%)</title><rect x="18.9435%" y="181" width="0.2753%" height="15" fill="rgb(232,36,49)"/><text x="19.1935%" y="191.50"></text></g><g><title>check_mod_liveness (111,131 samples, 0.19%)</title><rect x="19.0315%" y="165" width="0.1873%" height="15" fill="rgb(209,103,24)"/><text x="19.2815%" y="175.50"></text></g><g><title>misc_checking_2 (277,263 samples, 0.47%)</title><rect x="18.9414%" y="197" width="0.4672%" height="15" fill="rgb(229,88,8)"/><text x="19.1914%" y="207.50"></text></g><g><title>match_checking (112,642 samples, 0.19%)</title><rect x="19.2187%" y="181" width="0.1898%" height="15" fill="rgb(213,181,19)"/><text x="19.4687%" y="191.50"></text></g><g><title>check_match (107,452 samples, 0.18%)</title><rect x="19.2275%" y="165" width="0.1811%" height="15" fill="rgb(254,191,54)"/><text x="19.4775%" y="175.50"></text></g><g><title>death_checking (108,061 samples, 0.18%)</title><rect x="19.4967%" y="181" width="0.1821%" height="15" fill="rgb(241,83,37)"/><text x="19.7467%" y="191.50"></text></g><g><title>mir_for_ctfe (68,690 samples, 0.12%)</title><rect x="21.8469%" y="101" width="0.1157%" height="15" fill="rgb(233,36,39)"/><text x="22.0969%" y="111.50"></text></g><g><title>eval_to_const_value_raw (4,133,006 samples, 6.96%)</title><rect x="21.9934%" y="85" width="6.9642%" height="15" fill="rgb(226,3,54)"/><text x="22.2434%" y="95.50">eval_to_c..</text></g><g><title>eval_to_const_value_raw (4,131,496 samples, 6.96%)</title><rect x="21.9960%" y="69" width="6.9617%" height="15" fill="rgb(245,192,40)"/><text x="22.2460%" y="79.50">eval_to_c..</text></g><g><title>eval_to_allocation_raw (4,127,926 samples, 6.96%)</title><rect x="22.0020%" y="53" width="6.9556%" height="15" fill="rgb(238,167,29)"/><text x="22.2520%" y="63.50">eval_to_a..</text></g><g><title>promoted_mir (930,481 samples, 1.57%)</title><rect x="27.3898%" y="37" width="1.5679%" height="15" fill="rgb(232,182,51)"/><text x="27.6398%" y="47.50"></text></g><g><title>eval_to_const_value_raw (5,185,158 samples, 8.74%)</title><rect x="20.2252%" y="149" width="8.7371%" height="15" fill="rgb(231,60,39)"/><text x="20.4752%" y="159.50">eval_to_cons..</text></g><g><title>eval_to_const_value_raw (5,182,278 samples, 8.73%)</title><rect x="20.2301%" y="133" width="8.7323%" height="15" fill="rgb(208,69,12)"/><text x="20.4801%" y="143.50">eval_to_cons..</text></g><g><title>eval_to_allocation_raw (5,176,727 samples, 8.72%)</title><rect x="20.2394%" y="117" width="8.7229%" height="15" fill="rgb(235,93,37)"/><text x="20.4894%" y="127.50">eval_to_allo..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,154,076 samples, 7.00%)</title><rect x="21.9626%" y="101" width="6.9997%" height="15" fill="rgb(213,116,39)"/><text x="22.2126%" y="111.50">try_norma..</text></g><g><title>crate_lints (5,587,572 samples, 9.42%)</title><rect x="19.6817%" y="165" width="9.4152%" height="15" fill="rgb(222,207,29)"/><text x="19.9317%" y="175.50">crate_lints</text></g><g><title>param_env (79,850 samples, 0.13%)</title><rect x="28.9623%" y="149" width="0.1345%" height="15" fill="rgb(206,96,30)"/><text x="29.2123%" y="159.50"></text></g><g><title>lint_checking (6,126,978 samples, 10.32%)</title><rect x="19.6788%" y="181" width="10.3241%" height="15" fill="rgb(218,138,4)"/><text x="19.9288%" y="191.50">lint_checking</text></g><g><title>module_lints (537,676 samples, 0.91%)</title><rect x="29.0969%" y="165" width="0.9060%" height="15" fill="rgb(250,191,14)"/><text x="29.3469%" y="175.50"></text></g><g><title>lint_mod (534,636 samples, 0.90%)</title><rect x="29.1020%" y="149" width="0.9009%" height="15" fill="rgb(239,60,40)"/><text x="29.3520%" y="159.50"></text></g><g><title>privacy_access_levels (62,121 samples, 0.10%)</title><rect x="30.0029%" y="181" width="0.1047%" height="15" fill="rgb(206,27,48)"/><text x="30.2529%" y="191.50"></text></g><g><title>privacy_checking_modules (320,484 samples, 0.54%)</title><rect x="30.1075%" y="181" width="0.5400%" height="15" fill="rgb(225,35,8)"/><text x="30.3575%" y="191.50"></text></g><g><title>check_mod_privacy (318,554 samples, 0.54%)</title><rect x="30.1108%" y="165" width="0.5368%" height="15" fill="rgb(250,213,24)"/><text x="30.3608%" y="175.50"></text></g><g><title>misc_checking_3 (6,679,635 samples, 11.26%)</title><rect x="19.4086%" y="197" width="11.2553%" height="15" fill="rgb(247,123,22)"/><text x="19.6586%" y="207.50">misc_checking_3</text></g><g><title>coherent_trait (87,711 samples, 0.15%)</title><rect x="30.7222%" y="165" width="0.1478%" height="15" fill="rgb(231,138,38)"/><text x="30.9722%" y="175.50"></text></g><g><title>specialization_graph_of (80,911 samples, 0.14%)</title><rect x="30.7336%" y="149" width="0.1363%" height="15" fill="rgb(231,145,46)"/><text x="30.9836%" y="159.50"></text></g><g><title>coherence_checking (134,172 samples, 0.23%)</title><rect x="30.6978%" y="181" width="0.2261%" height="15" fill="rgb(251,118,11)"/><text x="30.9478%" y="191.50"></text></g><g><title>associated_item (129,561 samples, 0.22%)</title><rect x="32.9300%" y="101" width="0.2183%" height="15" fill="rgb(217,147,25)"/><text x="33.1800%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (98,890 samples, 0.17%)</title><rect x="32.9817%" y="85" width="0.1666%" height="15" fill="rgb(247,81,37)"/><text x="33.2317%" y="95.50"></text></g><g><title>associated_items (182,211 samples, 0.31%)</title><rect x="32.8523%" y="117" width="0.3070%" height="15" fill="rgb(209,12,38)"/><text x="33.1023%" y="127.50"></text></g><g><title>dropck_outlives (105,511 samples, 0.18%)</title><rect x="33.1676%" y="117" width="0.1778%" height="15" fill="rgb(227,1,9)"/><text x="33.4176%" y="127.50"></text></g><g><title>adt_dtorck_constraint (86,691 samples, 0.15%)</title><rect x="33.1993%" y="101" width="0.1461%" height="15" fill="rgb(248,47,43)"/><text x="33.4493%" y="111.50"></text></g><g><title>evaluate_obligation (142,041 samples, 0.24%)</title><rect x="33.3453%" y="117" width="0.2393%" height="15" fill="rgb(221,10,30)"/><text x="33.5953%" y="127.50"></text></g><g><title>is_copy_raw (77,551 samples, 0.13%)</title><rect x="33.6882%" y="117" width="0.1307%" height="15" fill="rgb(210,229,1)"/><text x="33.9382%" y="127.50"></text></g><g><title>evaluate_obligation (70,231 samples, 0.12%)</title><rect x="33.7006%" y="101" width="0.1183%" height="15" fill="rgb(222,148,37)"/><text x="33.9506%" y="111.50"></text></g><g><title>lint_levels (133,592 samples, 0.23%)</title><rect x="33.8189%" y="117" width="0.2251%" height="15" fill="rgb(234,67,33)"/><text x="34.0689%" y="127.50"></text></g><g><title>predicates_of (67,421 samples, 0.11%)</title><rect x="34.1201%" y="117" width="0.1136%" height="15" fill="rgb(247,98,35)"/><text x="34.3701%" y="127.50"></text></g><g><title>typeck (1,432,326 samples, 2.41%)</title><rect x="31.9534%" y="133" width="2.4135%" height="15" fill="rgb(247,138,52)"/><text x="32.2034%" y="143.50">ty..</text></g><g><title>item_bodies_checking (2,024,332 samples, 3.41%)</title><rect x="30.9580%" y="181" width="3.4110%" height="15" fill="rgb(213,79,30)"/><text x="31.2080%" y="191.50">ite..</text></g><g><title>typeck_item_bodies (2,022,852 samples, 3.41%)</title><rect x="30.9605%" y="165" width="3.4086%" height="15" fill="rgb(246,177,23)"/><text x="31.2105%" y="175.50">typ..</text></g><g><title>typeck (2,016,272 samples, 3.40%)</title><rect x="30.9716%" y="149" width="3.3975%" height="15" fill="rgb(230,62,27)"/><text x="31.2216%" y="159.50">typ..</text></g><g><title>item_types_checking (6,795,556 samples, 11.45%)</title><rect x="34.3691%" y="181" width="11.4507%" height="15" fill="rgb(216,154,8)"/><text x="34.6191%" y="191.50">item_types_checki..</text></g><g><title>check_mod_item_types (6,791,316 samples, 11.44%)</title><rect x="34.3762%" y="165" width="11.4435%" height="15" fill="rgb(244,35,45)"/><text x="34.6262%" y="175.50">check_mod_item_ty..</text></g><g><title>typeck (6,716,915 samples, 11.32%)</title><rect x="34.5016%" y="149" width="11.3182%" height="15" fill="rgb(251,115,12)"/><text x="34.7516%" y="159.50">typeck</text></g><g><title>fn_sig (125,380 samples, 0.21%)</title><rect x="46.1132%" y="149" width="0.2113%" height="15" fill="rgb(240,54,50)"/><text x="46.3632%" y="159.50"></text></g><g><title>late_bound_vars_map (73,800 samples, 0.12%)</title><rect x="46.2001%" y="133" width="0.1244%" height="15" fill="rgb(233,84,52)"/><text x="46.4501%" y="143.50"></text></g><g><title>resolve_lifetimes (61,370 samples, 0.10%)</title><rect x="46.2211%" y="117" width="0.1034%" height="15" fill="rgb(207,117,47)"/><text x="46.4711%" y="127.50"></text></g><g><title>generics_of (94,082 samples, 0.16%)</title><rect x="46.3245%" y="149" width="0.1585%" height="15" fill="rgb(249,43,39)"/><text x="46.5745%" y="159.50"></text></g><g><title>explicit_predicates_of (63,582 samples, 0.11%)</title><rect x="46.5750%" y="117" width="0.1071%" height="15" fill="rgb(209,38,44)"/><text x="46.8250%" y="127.50"></text></g><g><title>predicates_of (109,882 samples, 0.19%)</title><rect x="46.5129%" y="149" width="0.1852%" height="15" fill="rgb(236,212,23)"/><text x="46.7629%" y="159.50"></text></g><g><title>predicates_defined_on (94,952 samples, 0.16%)</title><rect x="46.5381%" y="133" width="0.1600%" height="15" fill="rgb(242,79,21)"/><text x="46.7881%" y="143.50"></text></g><g><title>type_collecting (731,558 samples, 1.23%)</title><rect x="45.8214%" y="181" width="1.2327%" height="15" fill="rgb(211,96,35)"/><text x="46.0714%" y="191.50"></text></g><g><title>collect_mod_item_types (717,458 samples, 1.21%)</title><rect x="45.8452%" y="165" width="1.2089%" height="15" fill="rgb(253,215,40)"/><text x="46.0952%" y="175.50"></text></g><g><title>type_of (158,392 samples, 0.27%)</title><rect x="46.7872%" y="149" width="0.2669%" height="15" fill="rgb(211,81,21)"/><text x="47.0372%" y="159.50"></text></g><g><title>named_region_map (115,211 samples, 0.19%)</title><rect x="46.8600%" y="133" width="0.1941%" height="15" fill="rgb(208,190,38)"/><text x="47.1100%" y="143.50"></text></g><g><title>resolve_lifetimes (106,111 samples, 0.18%)</title><rect x="46.8753%" y="117" width="0.1788%" height="15" fill="rgb(235,213,38)"/><text x="47.1253%" y="127.50"></text></g><g><title>check_impl_item_well_formed (69,880 samples, 0.12%)</title><rect x="47.1778%" y="165" width="0.1177%" height="15" fill="rgb(237,122,38)"/><text x="47.4278%" y="175.50"></text></g><g><title>evaluate_obligation (118,102 samples, 0.20%)</title><rect x="48.0891%" y="149" width="0.1990%" height="15" fill="rgb(244,218,35)"/><text x="48.3391%" y="159.50"></text></g><g><title>implied_outlives_bounds (101,591 samples, 0.17%)</title><rect x="48.2891%" y="149" width="0.1712%" height="15" fill="rgb(240,68,47)"/><text x="48.5391%" y="159.50"></text></g><g><title>param_env (194,564 samples, 0.33%)</title><rect x="48.4603%" y="149" width="0.3278%" height="15" fill="rgb(210,16,53)"/><text x="48.7103%" y="159.50"></text></g><g><title>region_scope_tree (572,917 samples, 0.97%)</title><rect x="48.7882%" y="149" width="0.9654%" height="15" fill="rgb(235,124,12)"/><text x="49.0382%" y="159.50"></text></g><g><title>check_item_well_formed (1,460,216 samples, 2.46%)</title><rect x="47.2956%" y="165" width="2.4605%" height="15" fill="rgb(224,169,11)"/><text x="47.5456%" y="175.50">ch..</text></g><g><title>analysis (28,874,141 samples, 48.65%)</title><rect x="1.2646%" y="213" width="48.6536%" height="15" fill="rgb(250,166,2)"/><text x="1.5146%" y="223.50">analysis</text></g><g><title>type_check_crate (11,426,736 samples, 19.25%)</title><rect x="30.6639%" y="197" width="19.2543%" height="15" fill="rgb(242,216,29)"/><text x="30.9139%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,698,958 samples, 2.86%)</title><rect x="47.0554%" y="181" width="2.8628%" height="15" fill="rgb(230,116,27)"/><text x="47.3054%" y="191.50">wf..</text></g><g><title>check_trait_item_well_formed (96,211 samples, 0.16%)</title><rect x="49.7561%" y="165" width="0.1621%" height="15" fill="rgb(228,99,48)"/><text x="50.0061%" y="175.50"></text></g><g><title>codegen_crate (259,523 samples, 0.44%)</title><rect x="49.9340%" y="213" width="0.4373%" height="15" fill="rgb(253,11,6)"/><text x="50.1840%" y="223.50"></text></g><g><title>AST_validation (190,572 samples, 0.32%)</title><rect x="50.6922%" y="197" width="0.3211%" height="15" fill="rgb(247,143,39)"/><text x="50.9422%" y="207.50"></text></g><g><title>complete_gated_feature_checking (98,801 samples, 0.17%)</title><rect x="51.0133%" y="197" width="0.1665%" height="15" fill="rgb(236,97,10)"/><text x="51.2633%" y="207.50"></text></g><g><title>crate_injection (89,491 samples, 0.15%)</title><rect x="51.1798%" y="197" width="0.1508%" height="15" fill="rgb(233,208,19)"/><text x="51.4298%" y="207.50"></text></g><g><title>metadata_register_crate (203,453 samples, 0.34%)</title><rect x="80.0887%" y="165" width="0.3428%" height="15" fill="rgb(216,164,2)"/><text x="80.3387%" y="175.50"></text></g><g><title>macro_expand_crate (17,832,108 samples, 30.05%)</title><rect x="51.3306%" y="197" width="30.0475%" height="15" fill="rgb(220,129,5)"/><text x="51.5806%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (17,817,488 samples, 30.02%)</title><rect x="51.3552%" y="181" width="30.0229%" height="15" fill="rgb(242,17,10)"/><text x="51.6052%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (561,736 samples, 0.95%)</title><rect x="80.4315%" y="165" width="0.9465%" height="15" fill="rgb(242,107,0)"/><text x="80.6815%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (104,681 samples, 0.18%)</title><rect x="81.3855%" y="197" width="0.1764%" height="15" fill="rgb(251,28,31)"/><text x="81.6355%" y="207.50"></text></g><g><title>finalize_imports (280,513 samples, 0.47%)</title><rect x="81.5785%" y="181" width="0.4727%" height="15" fill="rgb(233,223,10)"/><text x="81.8285%" y="191.50"></text></g><g><title>late_resolve_crate (509,356 samples, 0.86%)</title><rect x="82.0765%" y="181" width="0.8583%" height="15" fill="rgb(215,21,27)"/><text x="82.3265%" y="191.50"></text></g><g><title>resolve_check_unused (77,371 samples, 0.13%)</title><rect x="82.9535%" y="181" width="0.1304%" height="15" fill="rgb(232,23,21)"/><text x="83.2035%" y="191.50"></text></g><g><title>resolve_postprocess (67,181 samples, 0.11%)</title><rect x="83.0856%" y="181" width="0.1132%" height="15" fill="rgb(244,5,23)"/><text x="83.3356%" y="191.50"></text></g><g><title>configure_and_expand (19,483,676 samples, 32.83%)</title><rect x="50.3713%" y="213" width="32.8304%" height="15" fill="rgb(226,81,46)"/><text x="50.6213%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (973,151 samples, 1.64%)</title><rect x="81.5619%" y="197" width="1.6398%" height="15" fill="rgb(247,70,30)"/><text x="81.8119%" y="207.50"></text></g><g><title>drop_ast (431,705 samples, 0.73%)</title><rect x="83.2017%" y="213" width="0.7274%" height="15" fill="rgb(212,68,19)"/><text x="83.4517%" y="223.50"></text></g><g><title>early_lint_checks (1,023,251 samples, 1.72%)</title><rect x="83.9497%" y="213" width="1.7242%" height="15" fill="rgb(240,187,13)"/><text x="84.1997%" y="223.50"></text></g><g><title>free_global_ctxt (974,111 samples, 1.64%)</title><rect x="85.6739%" y="213" width="1.6414%" height="15" fill="rgb(223,113,26)"/><text x="85.9239%" y="223.50"></text></g><g><title>generate_crate_metadata (2,584,668 samples, 4.36%)</title><rect x="87.3153%" y="213" width="4.3552%" height="15" fill="rgb(206,192,2)"/><text x="87.5653%" y="223.50">gener..</text></g><g><title>hir_lowering (3,072,484 samples, 5.18%)</title><rect x="91.6705%" y="213" width="5.1772%" height="15" fill="rgb(241,108,4)"/><text x="91.9205%" y="223.50">hir_lo..</text></g><g><title>parse_crate (670,348 samples, 1.13%)</title><rect x="96.8983%" y="213" width="1.1296%" height="15" fill="rgb(247,173,49)"/><text x="97.1483%" y="223.50"></text></g><g><title>prepare_outputs (319,154 samples, 0.54%)</title><rect x="98.0429%" y="213" width="0.5378%" height="15" fill="rgb(224,114,35)"/><text x="98.2929%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (296,253 samples, 0.50%)</title><rect x="98.5807%" y="213" width="0.4992%" height="15" fill="rgb(245,159,27)"/><text x="98.8307%" y="223.50"></text></g><g><title>setup_global_ctxt (118,532 samples, 0.20%)</title><rect x="99.0931%" y="213" width="0.1997%" height="15" fill="rgb(245,172,44)"/><text x="99.3431%" y="223.50"></text></g><g><title>all (59,346,389 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (59,346,389 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (419,705 samples, 0.71%)</title><rect x="99.2928%" y="213" width="0.7072%" height="15" fill="rgb(237,72,25)"/><text x="99.5428%" y="223.50"></text></g></svg></svg>