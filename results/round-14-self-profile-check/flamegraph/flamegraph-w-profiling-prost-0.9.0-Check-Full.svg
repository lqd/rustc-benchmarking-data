<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (603,747 samples, 0.14%)</title><rect x="13.7375%" y="149" width="0.1390%" height="15" fill="rgb(227,0,7)"/><text x="13.9875%" y="159.50"></text></g><g><title>param_env (491,987 samples, 0.11%)</title><rect x="15.7956%" y="117" width="0.1133%" height="15" fill="rgb(217,0,24)"/><text x="16.0456%" y="127.50"></text></g><g><title>item_attrs (496,159 samples, 0.11%)</title><rect x="16.4655%" y="85" width="0.1142%" height="15" fill="rgb(221,193,54)"/><text x="16.7155%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (473,229 samples, 0.11%)</title><rect x="16.4708%" y="69" width="0.1090%" height="15" fill="rgb(248,212,6)"/><text x="16.7208%" y="79.50"></text></g><g><title>codegen_fn_attrs (747,792 samples, 0.17%)</title><rect x="16.4170%" y="101" width="0.1722%" height="15" fill="rgb(208,68,35)"/><text x="16.6670%" y="111.50"></text></g><g><title>is_copy_raw (563,125 samples, 0.13%)</title><rect x="19.8453%" y="85" width="0.1296%" height="15" fill="rgb(232,128,0)"/><text x="20.0953%" y="95.50"></text></g><g><title>evaluate_obligation (436,685 samples, 0.10%)</title><rect x="19.8744%" y="69" width="0.1005%" height="15" fill="rgb(207,160,47)"/><text x="20.1244%" y="79.50"></text></g><g><title>adt_drop_tys (641,939 samples, 0.15%)</title><rect x="20.0715%" y="69" width="0.1478%" height="15" fill="rgb(228,23,34)"/><text x="20.3215%" y="79.50"></text></g><g><title>is_copy_raw (2,290,556 samples, 0.53%)</title><rect x="20.2193%" y="69" width="0.5273%" height="15" fill="rgb(218,30,26)"/><text x="20.4693%" y="79.50"></text></g><g><title>evaluate_obligation (1,814,572 samples, 0.42%)</title><rect x="20.3289%" y="53" width="0.4178%" height="15" fill="rgb(220,122,19)"/><text x="20.5789%" y="63.50"></text></g><g><title>needs_drop_raw (3,375,709 samples, 0.78%)</title><rect x="19.9770%" y="85" width="0.7772%" height="15" fill="rgb(250,228,42)"/><text x="20.2270%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,251,820 samples, 0.52%)</title><rect x="20.9593%" y="69" width="0.5184%" height="15" fill="rgb(240,193,28)"/><text x="21.2093%" y="79.50"></text></g><g><title>impl_parent (648,235 samples, 0.15%)</title><rect x="21.8585%" y="53" width="0.1492%" height="15" fill="rgb(216,20,37)"/><text x="22.1085%" y="63.50"></text></g><g><title>specialization_graph_of (2,962,824 samples, 0.68%)</title><rect x="21.5242%" y="69" width="0.6821%" height="15" fill="rgb(206,188,39)"/><text x="21.7742%" y="79.50"></text></g><g><title>impl_trait_ref (862,538 samples, 0.20%)</title><rect x="22.0077%" y="53" width="0.1986%" height="15" fill="rgb(217,207,13)"/><text x="22.2577%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (745,376 samples, 0.17%)</title><rect x="22.0347%" y="37" width="0.1716%" height="15" fill="rgb(231,73,38)"/><text x="22.2847%" y="47.50"></text></g><g><title>resolve_instance (6,510,256 samples, 1.50%)</title><rect x="20.7545%" y="85" width="1.4988%" height="15" fill="rgb(225,20,46)"/><text x="21.0045%" y="95.50"></text></g><g><title>thir_body (5,273,424 samples, 1.21%)</title><rect x="22.2819%" y="85" width="1.2141%" height="15" fill="rgb(210,31,41)"/><text x="22.5319%" y="95.50"></text></g><g><title>mir_const (37,675,704 samples, 8.67%)</title><rect x="14.8448%" y="133" width="8.6740%" height="15" fill="rgb(221,200,47)"/><text x="15.0948%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (33,053,898 samples, 7.61%)</title><rect x="15.9089%" y="117" width="7.6099%" height="15" fill="rgb(226,26,5)"/><text x="16.1589%" y="127.50">unsafety_c..</text></g><g><title>mir_built (30,099,297 samples, 6.93%)</title><rect x="16.5891%" y="101" width="6.9297%" height="15" fill="rgb(249,33,26)"/><text x="16.8391%" y="111.50">mir_built</text></g><g><title>mir_promoted (41,830,888 samples, 9.63%)</title><rect x="13.9528%" y="149" width="9.6306%" height="15" fill="rgb(235,183,28)"/><text x="14.2028%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,598,479 samples, 0.83%)</title><rect x="23.5834%" y="149" width="0.8285%" height="15" fill="rgb(221,5,38)"/><text x="23.8334%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,979,337 samples, 0.46%)</title><rect x="24.4118%" y="149" width="0.4557%" height="15" fill="rgb(247,18,42)"/><text x="24.6618%" y="159.50"></text></g><g><title>normalize_projection_ty (1,222,900 samples, 0.28%)</title><rect x="24.5860%" y="133" width="0.2815%" height="15" fill="rgb(241,131,45)"/><text x="24.8360%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,976,848 samples, 0.46%)</title><rect x="24.8675%" y="149" width="0.4551%" height="15" fill="rgb(249,31,29)"/><text x="25.1175%" y="159.50"></text></g><g><title>normalize_projection_ty (1,042,577 samples, 0.24%)</title><rect x="25.0826%" y="133" width="0.2400%" height="15" fill="rgb(225,111,53)"/><text x="25.3326%" y="143.50"></text></g><g><title>type_op_prove_predicate (9,172,618 samples, 2.11%)</title><rect x="25.3272%" y="149" width="2.1118%" height="15" fill="rgb(238,160,17)"/><text x="25.5772%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (117,117,500 samples, 26.96%)</title><rect x="0.4807%" y="181" width="26.9636%" height="15" fill="rgb(214,148,48)"/><text x="0.7307%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (116,496,377 samples, 26.82%)</title><rect x="0.6237%" y="165" width="26.8206%" height="15" fill="rgb(232,36,49)"/><text x="0.8737%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (644,898 samples, 0.15%)</title><rect x="27.5094%" y="181" width="0.1485%" height="15" fill="rgb(209,103,24)"/><text x="27.7594%" y="191.50"></text></g><g><title>codegen_fn_attrs (706,519 samples, 0.16%)</title><rect x="27.8768%" y="149" width="0.1627%" height="15" fill="rgb(229,88,8)"/><text x="28.1268%" y="159.50"></text></g><g><title>check_mod_attrs (1,590,157 samples, 0.37%)</title><rect x="27.6734%" y="165" width="0.3661%" height="15" fill="rgb(213,181,19)"/><text x="27.9234%" y="175.50"></text></g><g><title>check_mod_const_bodies (455,965 samples, 0.10%)</title><rect x="28.0395%" y="165" width="0.1050%" height="15" fill="rgb(254,191,54)"/><text x="28.2895%" y="175.50"></text></g><g><title>lint_levels (676,678 samples, 0.16%)</title><rect x="28.3167%" y="149" width="0.1558%" height="15" fill="rgb(241,83,37)"/><text x="28.5667%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,624,110 samples, 0.37%)</title><rect x="28.2091%" y="165" width="0.3739%" height="15" fill="rgb(233,36,39)"/><text x="28.4591%" y="175.50"></text></g><g><title>misc_checking_1 (4,163,046 samples, 0.96%)</title><rect x="27.6580%" y="181" width="0.9584%" height="15" fill="rgb(226,3,54)"/><text x="27.9080%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,249,786 samples, 0.52%)</title><rect x="28.6168%" y="165" width="0.5180%" height="15" fill="rgb(245,192,40)"/><text x="28.8668%" y="175.50"></text></g><g><title>check_mod_liveness (1,849,589 samples, 0.43%)</title><rect x="28.7090%" y="149" width="0.4258%" height="15" fill="rgb(238,167,29)"/><text x="28.9590%" y="159.50"></text></g><g><title>misc_checking_2 (5,214,709 samples, 1.20%)</title><rect x="28.6164%" y="181" width="1.2006%" height="15" fill="rgb(232,182,51)"/><text x="28.8664%" y="191.50"></text></g><g><title>match_checking (2,963,123 samples, 0.68%)</title><rect x="29.1348%" y="165" width="0.6822%" height="15" fill="rgb(231,60,39)"/><text x="29.3848%" y="175.50"></text></g><g><title>check_match (2,803,801 samples, 0.65%)</title><rect x="29.1715%" y="149" width="0.6455%" height="15" fill="rgb(208,69,12)"/><text x="29.4215%" y="159.50"></text></g><g><title>check_private_in_public (586,157 samples, 0.13%)</title><rect x="29.8195%" y="165" width="0.1349%" height="15" fill="rgb(235,93,37)"/><text x="30.0695%" y="175.50"></text></g><g><title>death_checking (1,201,763 samples, 0.28%)</title><rect x="29.9545%" y="165" width="0.2767%" height="15" fill="rgb(213,116,39)"/><text x="30.2045%" y="175.50"></text></g><g><title>param_env (692,534 samples, 0.16%)</title><rect x="30.6751%" y="133" width="0.1594%" height="15" fill="rgb(222,207,29)"/><text x="30.9251%" y="143.50"></text></g><g><title>crate_lints (3,877,702 samples, 0.89%)</title><rect x="30.2315%" y="149" width="0.8928%" height="15" fill="rgb(206,96,30)"/><text x="30.4815%" y="159.50"></text></g><g><title>type_of (1,189,307 samples, 0.27%)</title><rect x="30.8505%" y="133" width="0.2738%" height="15" fill="rgb(218,138,4)"/><text x="31.1005%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (955,385 samples, 0.22%)</title><rect x="30.9043%" y="117" width="0.2200%" height="15" fill="rgb(250,191,14)"/><text x="31.1543%" y="127.50"></text></g><g><title>lint_checking (5,767,673 samples, 1.33%)</title><rect x="30.2312%" y="165" width="1.3279%" height="15" fill="rgb(239,60,40)"/><text x="30.4812%" y="175.50"></text></g><g><title>module_lints (1,888,331 samples, 0.43%)</title><rect x="31.1243%" y="149" width="0.4347%" height="15" fill="rgb(206,27,48)"/><text x="31.3743%" y="159.50"></text></g><g><title>lint_mod (1,867,671 samples, 0.43%)</title><rect x="31.1291%" y="133" width="0.4300%" height="15" fill="rgb(225,35,8)"/><text x="31.3791%" y="143.50"></text></g><g><title>privacy_access_levels (1,066,442 samples, 0.25%)</title><rect x="31.5590%" y="165" width="0.2455%" height="15" fill="rgb(250,213,24)"/><text x="31.8090%" y="175.50"></text></g><g><title>privacy_checking_modules (3,276,127 samples, 0.75%)</title><rect x="31.8046%" y="165" width="0.7543%" height="15" fill="rgb(247,123,22)"/><text x="32.0546%" y="175.50"></text></g><g><title>check_mod_privacy (3,260,776 samples, 0.75%)</title><rect x="31.8081%" y="149" width="0.7507%" height="15" fill="rgb(231,138,38)"/><text x="32.0581%" y="159.50"></text></g><g><title>misc_checking_3 (11,934,373 samples, 2.75%)</title><rect x="29.8170%" y="181" width="2.7476%" height="15" fill="rgb(231,145,46)"/><text x="30.0670%" y="191.50">mi..</text></g><g><title>impl_parent (2,866,406 samples, 0.66%)</title><rect x="33.8305%" y="117" width="0.6599%" height="15" fill="rgb(251,118,11)"/><text x="34.0805%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,553,262 samples, 0.36%)</title><rect x="34.1328%" y="101" width="0.3576%" height="15" fill="rgb(217,147,25)"/><text x="34.3828%" y="111.50"></text></g><g><title>impl_trait_ref (5,507,336 samples, 1.27%)</title><rect x="34.4907%" y="117" width="1.2679%" height="15" fill="rgb(247,81,37)"/><text x="34.7407%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,391,295 samples, 1.01%)</title><rect x="34.7476%" y="101" width="1.0110%" height="15" fill="rgb(209,12,38)"/><text x="34.9976%" y="111.50"></text></g><g><title>trait_impls_of (886,719 samples, 0.20%)</title><rect x="35.7769%" y="117" width="0.2041%" height="15" fill="rgb(227,1,9)"/><text x="36.0269%" y="127.50"></text></g><g><title>coherent_trait (14,561,923 samples, 3.35%)</title><rect x="32.6288%" y="149" width="3.3526%" height="15" fill="rgb(248,47,43)"/><text x="32.8788%" y="159.50">coh..</text></g><g><title>specialization_graph_of (14,118,998 samples, 3.25%)</title><rect x="32.7308%" y="133" width="3.2506%" height="15" fill="rgb(221,10,30)"/><text x="32.9808%" y="143.50">spe..</text></g><g><title>coherence_checking (14,681,894 samples, 3.38%)</title><rect x="32.6214%" y="165" width="3.3802%" height="15" fill="rgb(210,229,1)"/><text x="32.8714%" y="175.50">coh..</text></g><g><title>associated_item (1,153,951 samples, 0.27%)</title><rect x="53.1078%" y="101" width="0.2657%" height="15" fill="rgb(222,148,37)"/><text x="53.3578%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (986,570 samples, 0.23%)</title><rect x="53.1463%" y="85" width="0.2271%" height="15" fill="rgb(234,67,33)"/><text x="53.3963%" y="95.50"></text></g><g><title>associated_items (1,523,917 samples, 0.35%)</title><rect x="53.0367%" y="117" width="0.3508%" height="15" fill="rgb(247,98,35)"/><text x="53.2867%" y="127.50"></text></g><g><title>adt_dtorck_constraint (620,158 samples, 0.14%)</title><rect x="53.5491%" y="101" width="0.1428%" height="15" fill="rgb(247,138,52)"/><text x="53.7991%" y="111.50"></text></g><g><title>dropck_outlives (1,392,374 samples, 0.32%)</title><rect x="53.4175%" y="117" width="0.3206%" height="15" fill="rgb(213,79,30)"/><text x="53.6675%" y="127.50"></text></g><g><title>generics_of (755,173 samples, 0.17%)</title><rect x="56.3644%" y="101" width="0.1739%" height="15" fill="rgb(246,177,23)"/><text x="56.6144%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (550,877 samples, 0.13%)</title><rect x="56.4114%" y="85" width="0.1268%" height="15" fill="rgb(230,62,27)"/><text x="56.6614%" y="95.50"></text></g><g><title>impl_trait_ref (1,079,687 samples, 0.25%)</title><rect x="56.5992%" y="101" width="0.2486%" height="15" fill="rgb(216,154,8)"/><text x="56.8492%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (912,285 samples, 0.21%)</title><rect x="56.6378%" y="85" width="0.2100%" height="15" fill="rgb(244,35,45)"/><text x="56.8878%" y="95.50"></text></g><g><title>predicates_of (971,735 samples, 0.22%)</title><rect x="56.8612%" y="101" width="0.2237%" height="15" fill="rgb(251,115,12)"/><text x="57.1112%" y="111.50"></text></g><g><title>predicates_defined_on (579,704 samples, 0.13%)</title><rect x="56.9515%" y="85" width="0.1335%" height="15" fill="rgb(240,54,50)"/><text x="57.2015%" y="95.50"></text></g><g><title>specializes (2,364,134 samples, 0.54%)</title><rect x="57.0849%" y="101" width="0.5443%" height="15" fill="rgb(233,84,52)"/><text x="57.3349%" y="111.50"></text></g><g><title>param_env (1,251,361 samples, 0.29%)</title><rect x="57.3411%" y="85" width="0.2881%" height="15" fill="rgb(207,117,47)"/><text x="57.5911%" y="95.50"></text></g><g><title>def_span (479,895 samples, 0.11%)</title><rect x="57.5187%" y="69" width="0.1105%" height="15" fill="rgb(249,43,39)"/><text x="57.7687%" y="79.50"></text></g><g><title>trait_impls_of (664,349 samples, 0.15%)</title><rect x="57.6350%" y="101" width="0.1530%" height="15" fill="rgb(209,38,44)"/><text x="57.8850%" y="111.50"></text></g><g><title>evaluate_obligation (17,612,311 samples, 4.05%)</title><rect x="53.7381%" y="117" width="4.0548%" height="15" fill="rgb(236,212,23)"/><text x="53.9881%" y="127.50">eval..</text></g><g><title>generics_of (617,574 samples, 0.14%)</title><rect x="57.8555%" y="117" width="0.1422%" height="15" fill="rgb(242,79,21)"/><text x="58.1055%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (493,754 samples, 0.11%)</title><rect x="57.8840%" y="101" width="0.1137%" height="15" fill="rgb(211,96,35)"/><text x="58.1340%" y="111.50"></text></g><g><title>evaluate_obligation (437,794 samples, 0.10%)</title><rect x="58.3425%" y="101" width="0.1008%" height="15" fill="rgb(253,215,40)"/><text x="58.5925%" y="111.50"></text></g><g><title>method_autoderef_steps (968,352 samples, 0.22%)</title><rect x="58.2272%" y="117" width="0.2229%" height="15" fill="rgb(211,81,21)"/><text x="58.4772%" y="127.50"></text></g><g><title>predicates_of (845,355 samples, 0.19%)</title><rect x="58.5092%" y="117" width="0.1946%" height="15" fill="rgb(208,190,38)"/><text x="58.7592%" y="127.50"></text></g><g><title>predicates_defined_on (561,013 samples, 0.13%)</title><rect x="58.5746%" y="101" width="0.1292%" height="15" fill="rgb(235,213,38)"/><text x="58.8246%" y="111.50"></text></g><g><title>dropck_outlives (448,283 samples, 0.10%)</title><rect x="68.5208%" y="101" width="0.1032%" height="15" fill="rgb(237,122,38)"/><text x="68.7708%" y="111.50"></text></g><g><title>evaluate_obligation (3,712,022 samples, 0.85%)</title><rect x="68.6240%" y="101" width="0.8546%" height="15" fill="rgb(244,218,35)"/><text x="68.8740%" y="111.50"></text></g><g><title>is_copy_raw (771,349 samples, 0.18%)</title><rect x="69.5100%" y="101" width="0.1776%" height="15" fill="rgb(240,68,47)"/><text x="69.7600%" y="111.50"></text></g><g><title>evaluate_obligation (554,327 samples, 0.13%)</title><rect x="69.5600%" y="85" width="0.1276%" height="15" fill="rgb(210,16,53)"/><text x="69.8100%" y="95.50"></text></g><g><title>method_autoderef_steps (1,365,917 samples, 0.31%)</title><rect x="69.6916%" y="101" width="0.3145%" height="15" fill="rgb(235,124,12)"/><text x="69.9416%" y="111.50"></text></g><g><title>evaluate_obligation (656,326 samples, 0.15%)</title><rect x="69.8550%" y="85" width="0.1511%" height="15" fill="rgb(224,169,11)"/><text x="70.1050%" y="95.50"></text></g><g><title>typeck (48,978,376 samples, 11.28%)</title><rect x="58.7923%" y="117" width="11.2762%" height="15" fill="rgb(250,166,2)"/><text x="59.0423%" y="127.50">typeck</text></g><g><title>item_bodies_checking (148,047,606 samples, 34.08%)</title><rect x="36.0149%" y="165" width="34.0846%" height="15" fill="rgb(242,216,29)"/><text x="36.2649%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (148,043,886 samples, 34.08%)</title><rect x="36.0158%" y="149" width="34.0837%" height="15" fill="rgb(230,116,27)"/><text x="36.2658%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (147,650,980 samples, 33.99%)</title><rect x="36.1062%" y="133" width="33.9933%" height="15" fill="rgb(228,99,48)"/><text x="36.3562%" y="143.50">typeck</text></g><g><title>generics_of (669,581 samples, 0.15%)</title><rect x="71.5605%" y="101" width="0.1542%" height="15" fill="rgb(253,11,6)"/><text x="71.8105%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (485,388 samples, 0.11%)</title><rect x="71.6029%" y="85" width="0.1117%" height="15" fill="rgb(247,143,39)"/><text x="71.8529%" y="95.50"></text></g><g><title>impl_trait_ref (915,552 samples, 0.21%)</title><rect x="71.7450%" y="101" width="0.2108%" height="15" fill="rgb(236,97,10)"/><text x="71.9950%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (734,022 samples, 0.17%)</title><rect x="71.7868%" y="85" width="0.1690%" height="15" fill="rgb(233,208,19)"/><text x="72.0368%" y="95.50"></text></g><g><title>predicates_of (671,095 samples, 0.15%)</title><rect x="71.9661%" y="101" width="0.1545%" height="15" fill="rgb(216,164,2)"/><text x="72.2161%" y="111.50"></text></g><g><title>specializes (2,144,541 samples, 0.49%)</title><rect x="72.1207%" y="101" width="0.4937%" height="15" fill="rgb(220,129,5)"/><text x="72.3707%" y="111.50"></text></g><g><title>param_env (1,264,184 samples, 0.29%)</title><rect x="72.3233%" y="85" width="0.2910%" height="15" fill="rgb(242,17,10)"/><text x="72.5733%" y="95.50"></text></g><g><title>def_span (585,374 samples, 0.13%)</title><rect x="72.4796%" y="69" width="0.1348%" height="15" fill="rgb(242,107,0)"/><text x="72.7296%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (520,393 samples, 0.12%)</title><rect x="72.4946%" y="53" width="0.1198%" height="15" fill="rgb(251,28,31)"/><text x="72.7446%" y="63.50"></text></g><g><title>evaluate_obligation (7,324,642 samples, 1.69%)</title><rect x="70.9554%" y="117" width="1.6863%" height="15" fill="rgb(233,223,10)"/><text x="71.2054%" y="127.50"></text></g><g><title>item_types_checking (11,266,236 samples, 2.59%)</title><rect x="70.0995%" y="165" width="2.5938%" height="15" fill="rgb(215,21,27)"/><text x="70.3495%" y="175.50">it..</text></g><g><title>check_mod_item_types (11,250,396 samples, 2.59%)</title><rect x="70.1032%" y="149" width="2.5901%" height="15" fill="rgb(232,23,21)"/><text x="70.3532%" y="159.50">ch..</text></g><g><title>typeck (8,734,878 samples, 2.01%)</title><rect x="70.6823%" y="133" width="2.0110%" height="15" fill="rgb(244,5,23)"/><text x="70.9323%" y="143.50">t..</text></g><g><title>mir_borrowck (574,986 samples, 0.13%)</title><rect x="73.0985%" y="53" width="0.1324%" height="15" fill="rgb(226,81,46)"/><text x="73.3485%" y="63.50"></text></g><g><title>mir_for_ctfe (834,849 samples, 0.19%)</title><rect x="73.0392%" y="85" width="0.1922%" height="15" fill="rgb(247,70,30)"/><text x="73.2892%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (764,189 samples, 0.18%)</title><rect x="73.0555%" y="69" width="0.1759%" height="15" fill="rgb(212,68,19)"/><text x="73.3055%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,872,162 samples, 0.43%)</title><rect x="72.8961%" y="133" width="0.4310%" height="15" fill="rgb(240,187,13)"/><text x="73.1461%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,858,131 samples, 0.43%)</title><rect x="72.8994%" y="117" width="0.4278%" height="15" fill="rgb(223,113,26)"/><text x="73.1494%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,844,211 samples, 0.42%)</title><rect x="72.9026%" y="101" width="0.4246%" height="15" fill="rgb(206,192,2)"/><text x="73.1526%" y="111.50"></text></g><g><title>fn_sig (849,066 samples, 0.20%)</title><rect x="73.3271%" y="133" width="0.1955%" height="15" fill="rgb(241,108,4)"/><text x="73.5771%" y="143.50"></text></g><g><title>named_region_map (1,595,058 samples, 0.37%)</title><rect x="73.6236%" y="117" width="0.3672%" height="15" fill="rgb(247,173,49)"/><text x="73.8736%" y="127.50"></text></g><g><title>resolve_lifetimes (1,476,126 samples, 0.34%)</title><rect x="73.6510%" y="101" width="0.3398%" height="15" fill="rgb(224,114,35)"/><text x="73.9010%" y="111.50"></text></g><g><title>generics_of (2,066,242 samples, 0.48%)</title><rect x="73.5226%" y="133" width="0.4757%" height="15" fill="rgb(245,159,27)"/><text x="73.7726%" y="143.50"></text></g><g><title>explicit_predicates_of (1,080,299 samples, 0.25%)</title><rect x="74.1397%" y="101" width="0.2487%" height="15" fill="rgb(245,172,44)"/><text x="74.3897%" y="111.50"></text></g><g><title>predicates_of (1,656,996 samples, 0.38%)</title><rect x="74.0544%" y="133" width="0.3815%" height="15" fill="rgb(236,23,11)"/><text x="74.3044%" y="143.50"></text></g><g><title>predicates_defined_on (1,509,985 samples, 0.35%)</title><rect x="74.0883%" y="117" width="0.3476%" height="15" fill="rgb(205,117,38)"/><text x="74.3383%" y="127.50"></text></g><g><title>type_collecting (7,823,358 samples, 1.80%)</title><rect x="72.6947%" y="165" width="1.8012%" height="15" fill="rgb(237,72,25)"/><text x="72.9447%" y="175.50">t..</text></g><g><title>collect_mod_item_types (7,797,728 samples, 1.80%)</title><rect x="72.7006%" y="149" width="1.7952%" height="15" fill="rgb(244,70,9)"/><text x="72.9506%" y="159.50">c..</text></g><g><title>evaluate_obligation (1,242,692 samples, 0.29%)</title><rect x="75.3160%" y="133" width="0.2861%" height="15" fill="rgb(217,125,39)"/><text x="75.5660%" y="143.50"></text></g><g><title>param_env (452,855 samples, 0.10%)</title><rect x="75.6941%" y="133" width="0.1043%" height="15" fill="rgb(235,36,10)"/><text x="75.9441%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,409,661 samples, 1.25%)</title><rect x="74.6578%" y="149" width="1.2455%" height="15" fill="rgb(251,123,47)"/><text x="74.9078%" y="159.50"></text></g><g><title>evaluate_obligation (1,149,773 samples, 0.26%)</title><rect x="77.3677%" y="133" width="0.2647%" height="15" fill="rgb(221,13,13)"/><text x="77.6177%" y="143.50"></text></g><g><title>implied_outlives_bounds (576,444 samples, 0.13%)</title><rect x="77.6396%" y="133" width="0.1327%" height="15" fill="rgb(238,131,9)"/><text x="77.8896%" y="143.50"></text></g><g><title>param_env (1,250,577 samples, 0.29%)</title><rect x="77.7725%" y="133" width="0.2879%" height="15" fill="rgb(211,50,8)"/><text x="78.0225%" y="143.50"></text></g><g><title>region_scope_tree (1,416,039 samples, 0.33%)</title><rect x="78.0939%" y="133" width="0.3260%" height="15" fill="rgb(245,182,24)"/><text x="78.3439%" y="143.50"></text></g><g><title>check_item_well_formed (11,341,828 samples, 2.61%)</title><rect x="75.9032%" y="149" width="2.6112%" height="15" fill="rgb(242,14,37)"/><text x="76.1532%" y="159.50">ch..</text></g><g><title>analysis (341,309,638 samples, 78.58%)</title><rect x="0.2486%" y="197" width="78.5788%" height="15" fill="rgb(246,228,12)"/><text x="0.4986%" y="207.50">analysis</text></g><g><title>type_check_crate (200,943,918 samples, 46.26%)</title><rect x="32.5646%" y="181" width="46.2628%" height="15" fill="rgb(213,55,15)"/><text x="32.8146%" y="191.50">type_check_crate</text></g><g><title>wf_checking (18,789,170 samples, 4.33%)</title><rect x="74.5016%" y="165" width="4.3258%" height="15" fill="rgb(209,9,3)"/><text x="74.7516%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,359,235 samples, 0.31%)</title><rect x="78.5144%" y="149" width="0.3129%" height="15" fill="rgb(230,59,30)"/><text x="78.7644%" y="159.50"></text></g><g><title>metadata_register_crate (12,199,626 samples, 2.81%)</title><rect x="89.3428%" y="149" width="2.8087%" height="15" fill="rgb(209,121,21)"/><text x="89.5928%" y="159.50">me..</text></g><g><title>metadata_register_crate (941,709 samples, 0.22%)</title><rect x="91.9347%" y="133" width="0.2168%" height="15" fill="rgb(220,109,13)"/><text x="92.1847%" y="143.50"></text></g><g><title>macro_expand_crate (57,613,725 samples, 13.26%)</title><rect x="79.1270%" y="181" width="13.2643%" height="15" fill="rgb(232,18,1)"/><text x="79.3770%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (57,599,515 samples, 13.26%)</title><rect x="79.1303%" y="165" width="13.2610%" height="15" fill="rgb(215,41,42)"/><text x="79.3803%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,041,432 samples, 0.24%)</title><rect x="92.1515%" y="149" width="0.2398%" height="15" fill="rgb(224,123,36)"/><text x="92.4015%" y="159.50"></text></g><g><title>late_resolve_crate (5,229,329 samples, 1.20%)</title><rect x="92.4944%" y="165" width="1.2039%" height="15" fill="rgb(240,125,3)"/><text x="92.7444%" y="175.50"></text></g><g><title>configure_and_expand (64,543,612 samples, 14.86%)</title><rect x="78.9266%" y="197" width="14.8597%" height="15" fill="rgb(205,98,50)"/><text x="79.1766%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,959,006 samples, 1.37%)</title><rect x="92.4144%" y="181" width="1.3719%" height="15" fill="rgb(205,185,37)"/><text x="92.6644%" y="191.50"></text></g><g><title>drop_ast (676,477 samples, 0.16%)</title><rect x="93.7863%" y="197" width="0.1557%" height="15" fill="rgb(238,207,15)"/><text x="94.0363%" y="207.50"></text></g><g><title>early_lint_checks (1,236,454 samples, 0.28%)</title><rect x="93.9469%" y="197" width="0.2847%" height="15" fill="rgb(213,199,42)"/><text x="94.1969%" y="207.50"></text></g><g><title>free_global_ctxt (5,605,273 samples, 1.29%)</title><rect x="94.2315%" y="197" width="1.2905%" height="15" fill="rgb(235,201,11)"/><text x="94.4815%" y="207.50"></text></g><g><title>generate_crate_metadata (3,465,219 samples, 0.80%)</title><rect x="95.5220%" y="197" width="0.7978%" height="15" fill="rgb(207,46,11)"/><text x="95.7720%" y="207.50"></text></g><g><title>hir_lowering (12,666,971 samples, 2.92%)</title><rect x="96.3198%" y="197" width="2.9163%" height="15" fill="rgb(241,35,35)"/><text x="96.5698%" y="207.50">hi..</text></g><g><title>parse_crate (920,681 samples, 0.21%)</title><rect x="99.2520%" y="197" width="0.2120%" height="15" fill="rgb(243,32,47)"/><text x="99.5020%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,546,737 samples, 0.36%)</title><rect x="99.5217%" y="197" width="0.3561%" height="15" fill="rgb(247,202,23)"/><text x="99.7717%" y="207.50"></text></g><g><title>all (434,353,379 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (434,353,379 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (434,855 samples, 0.10%)</title><rect x="99.8999%" y="197" width="0.1001%" height="15" fill="rgb(222,74,54)"/><text x="100.1499%" y="207.50"></text></g></svg></svg>