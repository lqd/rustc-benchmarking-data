<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (418,983 samples, 0.22%)</title><rect x="13.5603%" y="133" width="0.2217%" height="15" fill="rgb(227,0,7)"/><text x="13.8103%" y="143.50"></text></g><g><title>item_attrs (488,015 samples, 0.26%)</title><rect x="14.2731%" y="101" width="0.2583%" height="15" fill="rgb(217,0,24)"/><text x="14.5231%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (473,184 samples, 0.25%)</title><rect x="14.2809%" y="85" width="0.2504%" height="15" fill="rgb(221,193,54)"/><text x="14.5309%" y="95.50"></text></g><g><title>codegen_fn_attrs (644,307 samples, 0.34%)</title><rect x="14.2059%" y="117" width="0.3410%" height="15" fill="rgb(248,212,6)"/><text x="14.4559%" y="127.50"></text></g><g><title>adt_drop_tys (253,234 samples, 0.13%)</title><rect x="17.5992%" y="69" width="0.1340%" height="15" fill="rgb(208,68,35)"/><text x="17.8492%" y="79.50"></text></g><g><title>is_copy_raw (194,152 samples, 0.10%)</title><rect x="17.7345%" y="69" width="0.1027%" height="15" fill="rgb(232,128,0)"/><text x="17.9845%" y="79.50"></text></g><g><title>adt_drop_tys (745,057 samples, 0.39%)</title><rect x="17.5617%" y="85" width="0.3943%" height="15" fill="rgb(207,160,47)"/><text x="17.8117%" y="95.50"></text></g><g><title>is_copy_raw (965,279 samples, 0.51%)</title><rect x="17.9560%" y="85" width="0.5108%" height="15" fill="rgb(228,23,34)"/><text x="18.2060%" y="95.50"></text></g><g><title>evaluate_obligation (814,009 samples, 0.43%)</title><rect x="18.0360%" y="69" width="0.4308%" height="15" fill="rgb(218,30,26)"/><text x="18.2860%" y="79.50"></text></g><g><title>needs_drop_raw (1,952,549 samples, 1.03%)</title><rect x="17.4781%" y="101" width="1.0333%" height="15" fill="rgb(220,122,19)"/><text x="17.7281%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (520,206 samples, 0.28%)</title><rect x="18.6981%" y="85" width="0.2753%" height="15" fill="rgb(250,228,42)"/><text x="18.9481%" y="95.50"></text></g><g><title>specialization_graph_of (276,923 samples, 0.15%)</title><rect x="19.0630%" y="85" width="0.1465%" height="15" fill="rgb(240,193,28)"/><text x="19.3130%" y="95.50"></text></g><g><title>resolve_instance (1,418,657 samples, 0.75%)</title><rect x="18.5271%" y="101" width="0.7508%" height="15" fill="rgb(216,20,37)"/><text x="18.7771%" y="111.50"></text></g><g><title>thir_body (1,991,521 samples, 1.05%)</title><rect x="19.3016%" y="101" width="1.0539%" height="15" fill="rgb(206,188,39)"/><text x="19.5516%" y="111.50"></text></g><g><title>mir_const (14,307,077 samples, 7.57%)</title><rect x="12.7991%" y="149" width="7.5713%" height="15" fill="rgb(217,207,13)"/><text x="13.0491%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (12,449,547 samples, 6.59%)</title><rect x="13.7821%" y="133" width="6.5883%" height="15" fill="rgb(231,73,38)"/><text x="14.0321%" y="143.50">unsafety_..</text></g><g><title>mir_built (11,004,291 samples, 5.82%)</title><rect x="14.5469%" y="117" width="5.8234%" height="15" fill="rgb(225,20,46)"/><text x="14.7969%" y="127.50">mir_bui..</text></g><g><title>mir_promoted (15,879,940 samples, 8.40%)</title><rect x="12.0286%" y="165" width="8.4036%" height="15" fill="rgb(210,31,41)"/><text x="12.2786%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (854,968 samples, 0.45%)</title><rect x="20.4323%" y="165" width="0.4524%" height="15" fill="rgb(221,200,47)"/><text x="20.6823%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (955,719 samples, 0.51%)</title><rect x="20.8847%" y="165" width="0.5058%" height="15" fill="rgb(226,26,5)"/><text x="21.1347%" y="175.50"></text></g><g><title>normalize_projection_ty (640,645 samples, 0.34%)</title><rect x="21.0515%" y="149" width="0.3390%" height="15" fill="rgb(249,33,26)"/><text x="21.3015%" y="159.50"></text></g><g><title>type_op_normalize_predicate (190,432 samples, 0.10%)</title><rect x="21.3905%" y="165" width="0.1008%" height="15" fill="rgb(235,183,28)"/><text x="21.6405%" y="175.50"></text></g><g><title>type_op_prove_predicate (3,211,086 samples, 1.70%)</title><rect x="21.4913%" y="165" width="1.6993%" height="15" fill="rgb(221,5,38)"/><text x="21.7413%" y="175.50"></text></g><g><title>evaluate_obligation (251,734 samples, 0.13%)</title><rect x="23.0573%" y="149" width="0.1332%" height="15" fill="rgb(247,18,42)"/><text x="23.3073%" y="159.50"></text></g><g><title>MIR_borrow_checking (42,597,674 samples, 22.54%)</title><rect x="0.6580%" y="197" width="22.5426%" height="15" fill="rgb(241,131,45)"/><text x="0.9080%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,440,821 samples, 22.46%)</title><rect x="0.7410%" y="181" width="22.4596%" height="15" fill="rgb(249,31,29)"/><text x="0.9910%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (213,093 samples, 0.11%)</title><rect x="23.2906%" y="197" width="0.1128%" height="15" fill="rgb(225,111,53)"/><text x="23.5406%" y="207.50"></text></g><g><title>should_inherit_track_caller (255,863 samples, 0.14%)</title><rect x="23.6844%" y="149" width="0.1354%" height="15" fill="rgb(238,160,17)"/><text x="23.9344%" y="159.50"></text></g><g><title>codegen_fn_attrs (438,506 samples, 0.23%)</title><rect x="23.5985%" y="165" width="0.2321%" height="15" fill="rgb(214,148,48)"/><text x="23.8485%" y="175.50"></text></g><g><title>check_mod_attrs (784,099 samples, 0.41%)</title><rect x="23.4157%" y="181" width="0.4149%" height="15" fill="rgb(232,36,49)"/><text x="23.6657%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (484,275 samples, 0.26%)</title><rect x="23.9691%" y="181" width="0.2563%" height="15" fill="rgb(209,103,24)"/><text x="24.2191%" y="191.50"></text></g><g><title>misc_checking_1 (1,606,718 samples, 0.85%)</title><rect x="23.4036%" y="197" width="0.8503%" height="15" fill="rgb(229,88,8)"/><text x="23.6536%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (665,618 samples, 0.35%)</title><rect x="24.2548%" y="181" width="0.3522%" height="15" fill="rgb(213,181,19)"/><text x="24.5048%" y="191.50"></text></g><g><title>check_mod_liveness (507,266 samples, 0.27%)</title><rect x="24.3386%" y="165" width="0.2684%" height="15" fill="rgb(254,191,54)"/><text x="24.5886%" y="175.50"></text></g><g><title>misc_checking_2 (1,895,411 samples, 1.00%)</title><rect x="24.2539%" y="197" width="1.0030%" height="15" fill="rgb(241,83,37)"/><text x="24.5039%" y="207.50"></text></g><g><title>match_checking (1,228,153 samples, 0.65%)</title><rect x="24.6070%" y="181" width="0.6499%" height="15" fill="rgb(233,36,39)"/><text x="24.8570%" y="191.50"></text></g><g><title>check_match (1,185,963 samples, 0.63%)</title><rect x="24.6293%" y="165" width="0.6276%" height="15" fill="rgb(226,3,54)"/><text x="24.8793%" y="175.50"></text></g><g><title>check_private_in_public (261,413 samples, 0.14%)</title><rect x="25.2626%" y="181" width="0.1383%" height="15" fill="rgb(245,192,40)"/><text x="25.5126%" y="191.50"></text></g><g><title>death_checking (697,888 samples, 0.37%)</title><rect x="25.4010%" y="181" width="0.3693%" height="15" fill="rgb(238,167,29)"/><text x="25.6510%" y="191.50"></text></g><g><title>item_attrs (226,041 samples, 0.12%)</title><rect x="25.6507%" y="165" width="0.1196%" height="15" fill="rgb(232,182,51)"/><text x="25.9007%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (223,441 samples, 0.12%)</title><rect x="25.6521%" y="149" width="0.1182%" height="15" fill="rgb(231,60,39)"/><text x="25.9021%" y="159.50"></text></g><g><title>eval_to_const_value_raw (198,772 samples, 0.11%)</title><rect x="26.3166%" y="149" width="0.1052%" height="15" fill="rgb(208,69,12)"/><text x="26.5666%" y="159.50"></text></g><g><title>eval_to_const_value_raw (195,612 samples, 0.10%)</title><rect x="26.3183%" y="133" width="0.1035%" height="15" fill="rgb(235,93,37)"/><text x="26.5683%" y="143.50"></text></g><g><title>param_env (217,642 samples, 0.12%)</title><rect x="26.4218%" y="149" width="0.1152%" height="15" fill="rgb(213,116,39)"/><text x="26.6718%" y="159.50"></text></g><g><title>crate_lints (2,649,530 samples, 1.40%)</title><rect x="25.7713%" y="165" width="1.4021%" height="15" fill="rgb(222,207,29)"/><text x="26.0213%" y="175.50"></text></g><g><title>type_of (1,115,873 samples, 0.59%)</title><rect x="26.5829%" y="149" width="0.5905%" height="15" fill="rgb(206,96,30)"/><text x="26.8329%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (876,479 samples, 0.46%)</title><rect x="26.7096%" y="133" width="0.4638%" height="15" fill="rgb(218,138,4)"/><text x="26.9596%" y="143.50"></text></g><g><title>lint_checking (3,467,499 samples, 1.83%)</title><rect x="25.7703%" y="181" width="1.8350%" height="15" fill="rgb(250,191,14)"/><text x="26.0203%" y="191.50">l..</text></g><g><title>module_lints (816,029 samples, 0.43%)</title><rect x="27.1735%" y="165" width="0.4318%" height="15" fill="rgb(239,60,40)"/><text x="27.4235%" y="175.50"></text></g><g><title>lint_mod (813,609 samples, 0.43%)</title><rect x="27.1747%" y="149" width="0.4306%" height="15" fill="rgb(206,27,48)"/><text x="27.4247%" y="159.50"></text></g><g><title>privacy_access_levels (329,294 samples, 0.17%)</title><rect x="27.6053%" y="181" width="0.1743%" height="15" fill="rgb(225,35,8)"/><text x="27.8553%" y="191.50"></text></g><g><title>privacy_checking_modules (1,324,305 samples, 0.70%)</title><rect x="27.7796%" y="181" width="0.7008%" height="15" fill="rgb(250,213,24)"/><text x="28.0296%" y="191.50"></text></g><g><title>check_mod_privacy (1,322,515 samples, 0.70%)</title><rect x="27.7805%" y="165" width="0.6999%" height="15" fill="rgb(247,123,22)"/><text x="28.0305%" y="175.50"></text></g><g><title>misc_checking_3 (6,104,669 samples, 3.23%)</title><rect x="25.2569%" y="197" width="3.2306%" height="15" fill="rgb(231,138,38)"/><text x="25.5069%" y="207.50">mis..</text></g><g><title>adt_destructor (298,484 samples, 0.16%)</title><rect x="28.5734%" y="149" width="0.1580%" height="15" fill="rgb(231,145,46)"/><text x="28.8234%" y="159.50"></text></g><g><title>coherent_trait (289,704 samples, 0.15%)</title><rect x="28.5780%" y="133" width="0.1533%" height="15" fill="rgb(251,118,11)"/><text x="28.8280%" y="143.50"></text></g><g><title>specialization_graph_of (288,594 samples, 0.15%)</title><rect x="28.5786%" y="117" width="0.1527%" height="15" fill="rgb(217,147,25)"/><text x="28.8286%" y="127.50"></text></g><g><title>impl_parent (2,844,299 samples, 1.51%)</title><rect x="31.3015%" y="133" width="1.5052%" height="15" fill="rgb(247,81,37)"/><text x="31.5515%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,650,613 samples, 0.87%)</title><rect x="31.9332%" y="117" width="0.8735%" height="15" fill="rgb(209,12,38)"/><text x="32.1832%" y="127.50"></text></g><g><title>impl_trait_ref (6,014,313 samples, 3.18%)</title><rect x="32.8067%" y="133" width="3.1828%" height="15" fill="rgb(227,1,9)"/><text x="33.0567%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,665,283 samples, 2.47%)</title><rect x="33.5206%" y="117" width="2.4689%" height="15" fill="rgb(248,47,43)"/><text x="33.7706%" y="127.50">me..</text></g><g><title>coherent_trait (15,064,177 samples, 7.97%)</title><rect x="28.5463%" y="165" width="7.9719%" height="15" fill="rgb(221,10,30)"/><text x="28.7963%" y="175.50">coherent_tr..</text></g><g><title>specialization_graph_of (14,477,961 samples, 7.66%)</title><rect x="28.8565%" y="149" width="7.6617%" height="15" fill="rgb(210,229,1)"/><text x="29.1065%" y="159.50">specializa..</text></g><g><title>trait_impls_of (996,992 samples, 0.53%)</title><rect x="35.9906%" y="133" width="0.5276%" height="15" fill="rgb(222,148,37)"/><text x="36.2406%" y="143.50"></text></g><g><title>implementations_of_trait (276,123 samples, 0.15%)</title><rect x="36.3721%" y="117" width="0.1461%" height="15" fill="rgb(234,67,33)"/><text x="36.6221%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (217,302 samples, 0.11%)</title><rect x="36.4032%" y="101" width="0.1150%" height="15" fill="rgb(247,98,35)"/><text x="36.6532%" y="111.50"></text></g><g><title>coherence_checking (15,147,809 samples, 8.02%)</title><rect x="28.5338%" y="181" width="8.0162%" height="15" fill="rgb(247,138,52)"/><text x="28.7838%" y="191.50">coherence_c..</text></g><g><title>associated_items (198,123 samples, 0.10%)</title><rect x="48.4110%" y="133" width="0.1048%" height="15" fill="rgb(213,79,30)"/><text x="48.6610%" y="143.50"></text></g><g><title>dropck_outlives (357,612 samples, 0.19%)</title><rect x="48.5335%" y="133" width="0.1892%" height="15" fill="rgb(246,177,23)"/><text x="48.7835%" y="143.50"></text></g><g><title>adt_dtorck_constraint (244,962 samples, 0.13%)</title><rect x="48.5931%" y="117" width="0.1296%" height="15" fill="rgb(230,62,27)"/><text x="48.8431%" y="127.50"></text></g><g><title>predicates_of (223,712 samples, 0.12%)</title><rect x="49.2846%" y="117" width="0.1184%" height="15" fill="rgb(216,154,8)"/><text x="49.5346%" y="127.50"></text></g><g><title>evaluate_obligation (1,320,071 samples, 0.70%)</title><rect x="48.7228%" y="133" width="0.6986%" height="15" fill="rgb(244,35,45)"/><text x="48.9728%" y="143.50"></text></g><g><title>predicates_of (365,074 samples, 0.19%)</title><rect x="49.7183%" y="133" width="0.1932%" height="15" fill="rgb(251,115,12)"/><text x="49.9683%" y="143.50"></text></g><g><title>predicates_defined_on (318,514 samples, 0.17%)</title><rect x="49.7429%" y="117" width="0.1686%" height="15" fill="rgb(240,54,50)"/><text x="49.9929%" y="127.50"></text></g><g><title>inferred_outlives_of (217,733 samples, 0.12%)</title><rect x="49.7962%" y="101" width="0.1152%" height="15" fill="rgb(233,84,52)"/><text x="50.0462%" y="111.50"></text></g><g><title>associated_item (452,415 samples, 0.24%)</title><rect x="59.9645%" y="101" width="0.2394%" height="15" fill="rgb(207,117,47)"/><text x="60.2145%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (360,484 samples, 0.19%)</title><rect x="60.0132%" y="85" width="0.1908%" height="15" fill="rgb(249,43,39)"/><text x="60.2632%" y="95.50"></text></g><g><title>associated_items (674,286 samples, 0.36%)</title><rect x="59.8680%" y="117" width="0.3568%" height="15" fill="rgb(209,38,44)"/><text x="60.1180%" y="127.50"></text></g><g><title>adt_dtorck_constraint (191,304 samples, 0.10%)</title><rect x="60.5067%" y="69" width="0.1012%" height="15" fill="rgb(236,212,23)"/><text x="60.7567%" y="79.50"></text></g><g><title>adt_dtorck_constraint (302,604 samples, 0.16%)</title><rect x="60.4597%" y="85" width="0.1601%" height="15" fill="rgb(242,79,21)"/><text x="60.7097%" y="95.50"></text></g><g><title>adt_dtorck_constraint (482,417 samples, 0.26%)</title><rect x="60.3889%" y="101" width="0.2553%" height="15" fill="rgb(211,96,35)"/><text x="60.6389%" y="111.50"></text></g><g><title>dropck_outlives (892,789 samples, 0.47%)</title><rect x="60.2716%" y="117" width="0.4725%" height="15" fill="rgb(253,215,40)"/><text x="60.5216%" y="127.50"></text></g><g><title>adt_def (481,795 samples, 0.25%)</title><rect x="62.0625%" y="85" width="0.2550%" height="15" fill="rgb(211,81,21)"/><text x="62.3125%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (478,345 samples, 0.25%)</title><rect x="62.0644%" y="69" width="0.2531%" height="15" fill="rgb(208,190,38)"/><text x="62.3144%" y="79.50"></text></g><g><title>item_attrs (442,365 samples, 0.23%)</title><rect x="62.0834%" y="53" width="0.2341%" height="15" fill="rgb(235,213,38)"/><text x="62.3334%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (438,755 samples, 0.23%)</title><rect x="62.0853%" y="37" width="0.2322%" height="15" fill="rgb(237,122,38)"/><text x="62.3353%" y="47.50"></text></g><g><title>adt_sized_constraint (615,276 samples, 0.33%)</title><rect x="62.0544%" y="101" width="0.3256%" height="15" fill="rgb(244,218,35)"/><text x="62.3044%" y="111.50"></text></g><g><title>generics_of (505,938 samples, 0.27%)</title><rect x="62.3867%" y="101" width="0.2677%" height="15" fill="rgb(240,68,47)"/><text x="62.6367%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (427,847 samples, 0.23%)</title><rect x="62.4281%" y="85" width="0.2264%" height="15" fill="rgb(210,16,53)"/><text x="62.6781%" y="95.50"></text></g><g><title>predicates_of (416,279 samples, 0.22%)</title><rect x="62.7474%" y="101" width="0.2203%" height="15" fill="rgb(235,124,12)"/><text x="62.9974%" y="111.50"></text></g><g><title>predicates_defined_on (248,965 samples, 0.13%)</title><rect x="62.8359%" y="85" width="0.1318%" height="15" fill="rgb(224,169,11)"/><text x="63.0859%" y="95.50"></text></g><g><title>specializes (382,815 samples, 0.20%)</title><rect x="62.9677%" y="101" width="0.2026%" height="15" fill="rgb(250,166,2)"/><text x="63.2177%" y="111.50"></text></g><g><title>param_env (224,492 samples, 0.12%)</title><rect x="63.0515%" y="85" width="0.1188%" height="15" fill="rgb(242,216,29)"/><text x="63.3015%" y="95.50"></text></g><g><title>trait_impls_of (397,766 samples, 0.21%)</title><rect x="63.1783%" y="101" width="0.2105%" height="15" fill="rgb(230,116,27)"/><text x="63.4283%" y="111.50"></text></g><g><title>evaluate_obligation (5,007,391 samples, 2.65%)</title><rect x="60.7440%" y="117" width="2.6499%" height="15" fill="rgb(228,99,48)"/><text x="60.9940%" y="127.50">ev..</text></g><g><title>generics_of (767,468 samples, 0.41%)</title><rect x="63.4950%" y="117" width="0.4061%" height="15" fill="rgb(253,11,6)"/><text x="63.7450%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (601,546 samples, 0.32%)</title><rect x="63.5828%" y="101" width="0.3183%" height="15" fill="rgb(247,143,39)"/><text x="63.8328%" y="111.50"></text></g><g><title>impl_item_implementor_ids (436,126 samples, 0.23%)</title><rect x="63.9015%" y="117" width="0.2308%" height="15" fill="rgb(236,97,10)"/><text x="64.1515%" y="127.50"></text></g><g><title>associated_items (398,136 samples, 0.21%)</title><rect x="63.9216%" y="101" width="0.2107%" height="15" fill="rgb(233,208,19)"/><text x="64.1716%" y="111.50"></text></g><g><title>evaluate_obligation (324,007 samples, 0.17%)</title><rect x="64.6120%" y="101" width="0.1715%" height="15" fill="rgb(216,164,2)"/><text x="64.8620%" y="111.50"></text></g><g><title>method_autoderef_steps (684,807 samples, 0.36%)</title><rect x="64.4295%" y="117" width="0.3624%" height="15" fill="rgb(220,129,5)"/><text x="64.6795%" y="127.50"></text></g><g><title>predicates_of (516,915 samples, 0.27%)</title><rect x="64.8143%" y="117" width="0.2736%" height="15" fill="rgb(242,17,10)"/><text x="65.0643%" y="127.50"></text></g><g><title>predicates_defined_on (356,755 samples, 0.19%)</title><rect x="64.8990%" y="101" width="0.1888%" height="15" fill="rgb(242,107,0)"/><text x="65.1490%" y="111.50"></text></g><g><title>typeck (28,923,181 samples, 15.31%)</title><rect x="49.9568%" y="133" width="15.3061%" height="15" fill="rgb(251,28,31)"/><text x="50.2068%" y="143.50">typeck</text></g><g><title>item_bodies_checking (54,257,324 samples, 28.71%)</title><rect x="36.5750%" y="181" width="28.7129%" height="15" fill="rgb(233,223,10)"/><text x="36.8250%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (54,254,014 samples, 28.71%)</title><rect x="36.5768%" y="165" width="28.7111%" height="15" fill="rgb(215,21,27)"/><text x="36.8268%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (54,155,782 samples, 28.66%)</title><rect x="36.6288%" y="149" width="28.6591%" height="15" fill="rgb(232,23,21)"/><text x="36.8788%" y="159.50">typeck</text></g><g><title>item_types_checking (1,440,837 samples, 0.76%)</title><rect x="65.2879%" y="181" width="0.7625%" height="15" fill="rgb(244,5,23)"/><text x="65.5379%" y="191.50"></text></g><g><title>check_mod_item_types (1,438,517 samples, 0.76%)</title><rect x="65.2891%" y="165" width="0.7613%" height="15" fill="rgb(226,81,46)"/><text x="65.5391%" y="175.50"></text></g><g><title>fn_sig (635,416 samples, 0.34%)</title><rect x="66.2344%" y="149" width="0.3363%" height="15" fill="rgb(247,70,30)"/><text x="66.4844%" y="159.50"></text></g><g><title>named_region_map (718,970 samples, 0.38%)</title><rect x="66.6451%" y="133" width="0.3805%" height="15" fill="rgb(212,68,19)"/><text x="66.8951%" y="143.50"></text></g><g><title>resolve_lifetimes (689,510 samples, 0.36%)</title><rect x="66.6607%" y="117" width="0.3649%" height="15" fill="rgb(240,187,13)"/><text x="66.9107%" y="127.50"></text></g><g><title>lint_levels (239,372 samples, 0.13%)</title><rect x="66.8989%" y="101" width="0.1267%" height="15" fill="rgb(223,113,26)"/><text x="67.1489%" y="111.50"></text></g><g><title>generics_of (876,412 samples, 0.46%)</title><rect x="66.5706%" y="149" width="0.4638%" height="15" fill="rgb(206,192,2)"/><text x="66.8206%" y="159.50"></text></g><g><title>predicates_of (567,508 samples, 0.30%)</title><rect x="67.0721%" y="149" width="0.3003%" height="15" fill="rgb(241,108,4)"/><text x="67.3221%" y="159.50"></text></g><g><title>predicates_defined_on (508,568 samples, 0.27%)</title><rect x="67.1033%" y="133" width="0.2691%" height="15" fill="rgb(247,173,49)"/><text x="67.3533%" y="143.50"></text></g><g><title>inferred_outlives_of (291,123 samples, 0.15%)</title><rect x="67.2184%" y="117" width="0.1541%" height="15" fill="rgb(224,114,35)"/><text x="67.4684%" y="127.50"></text></g><g><title>inferred_outlives_crate (269,653 samples, 0.14%)</title><rect x="67.2297%" y="101" width="0.1427%" height="15" fill="rgb(245,159,27)"/><text x="67.4797%" y="111.50"></text></g><g><title>type_collecting (2,610,609 samples, 1.38%)</title><rect x="66.0517%" y="181" width="1.3815%" height="15" fill="rgb(245,172,44)"/><text x="66.3017%" y="191.50"></text></g><g><title>collect_mod_item_types (2,603,239 samples, 1.38%)</title><rect x="66.0556%" y="165" width="1.3776%" height="15" fill="rgb(236,23,11)"/><text x="66.3056%" y="175.50"></text></g><g><title>evaluate_obligation (332,052 samples, 0.18%)</title><rect x="68.3979%" y="149" width="0.1757%" height="15" fill="rgb(205,117,38)"/><text x="68.6479%" y="159.50"></text></g><g><title>object_safety_violations (469,685 samples, 0.25%)</title><rect x="68.6452%" y="149" width="0.2486%" height="15" fill="rgb(237,72,25)"/><text x="68.8952%" y="159.50"></text></g><g><title>param_env (219,482 samples, 0.12%)</title><rect x="68.8937%" y="149" width="0.1161%" height="15" fill="rgb(244,70,9)"/><text x="69.1437%" y="159.50"></text></g><g><title>region_scope_tree (635,704 samples, 0.34%)</title><rect x="69.0218%" y="149" width="0.3364%" height="15" fill="rgb(217,125,39)"/><text x="69.2718%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,404,358 samples, 1.80%)</title><rect x="67.5638%" y="165" width="1.8016%" height="15" fill="rgb(235,36,10)"/><text x="67.8138%" y="175.50">c..</text></g><g><title>adt_sized_constraint (337,105 samples, 0.18%)</title><rect x="70.2842%" y="133" width="0.1784%" height="15" fill="rgb(251,123,47)"/><text x="70.5342%" y="143.50"></text></g><g><title>evaluate_obligation (831,238 samples, 0.44%)</title><rect x="70.0390%" y="149" width="0.4399%" height="15" fill="rgb(221,13,13)"/><text x="70.2890%" y="159.50"></text></g><g><title>param_env (264,141 samples, 0.14%)</title><rect x="70.5520%" y="149" width="0.1398%" height="15" fill="rgb(238,131,9)"/><text x="70.8020%" y="159.50"></text></g><g><title>region_scope_tree (195,893 samples, 0.10%)</title><rect x="70.7284%" y="149" width="0.1037%" height="15" fill="rgb(211,50,8)"/><text x="70.9784%" y="159.50"></text></g><g><title>analysis (133,096,573 samples, 70.43%)</title><rect x="0.4234%" y="213" width="70.4344%" height="15" fill="rgb(245,182,24)"/><text x="0.6734%" y="223.50">analysis</text></g><g><title>type_check_crate (80,065,102 samples, 42.37%)</title><rect x="28.4875%" y="197" width="42.3703%" height="15" fill="rgb(242,14,37)"/><text x="28.7375%" y="207.50">type_check_crate</text></g><g><title>wf_checking (6,464,131 samples, 3.42%)</title><rect x="67.4370%" y="181" width="3.4208%" height="15" fill="rgb(246,228,12)"/><text x="67.6870%" y="191.50">wf_..</text></g><g><title>check_item_well_formed (2,820,139 samples, 1.49%)</title><rect x="69.3654%" y="165" width="1.4924%" height="15" fill="rgb(213,55,15)"/><text x="69.6154%" y="175.50"></text></g><g><title>codegen_crate (397,355 samples, 0.21%)</title><rect x="70.8641%" y="213" width="0.2103%" height="15" fill="rgb(209,9,3)"/><text x="71.1141%" y="223.50"></text></g><g><title>AST_validation (383,754 samples, 0.20%)</title><rect x="71.1799%" y="197" width="0.2031%" height="15" fill="rgb(230,59,30)"/><text x="71.4299%" y="207.50"></text></g><g><title>complete_gated_feature_checking (249,193 samples, 0.13%)</title><rect x="71.3829%" y="197" width="0.1319%" height="15" fill="rgb(209,121,21)"/><text x="71.6329%" y="207.50"></text></g><g><title>metadata_load_macro (372,563 samples, 0.20%)</title><rect x="80.5801%" y="165" width="0.1972%" height="15" fill="rgb(220,109,13)"/><text x="80.8301%" y="175.50"></text></g><g><title>macro_expand_crate (19,706,639 samples, 10.43%)</title><rect x="71.5526%" y="197" width="10.4287%" height="15" fill="rgb(232,18,1)"/><text x="71.8026%" y="207.50">macro_expand_cr..</text></g><g><title>expand_crate (19,679,569 samples, 10.41%)</title><rect x="71.5670%" y="181" width="10.4144%" height="15" fill="rgb(215,41,42)"/><text x="71.8170%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (2,275,195 samples, 1.20%)</title><rect x="80.7773%" y="165" width="1.2040%" height="15" fill="rgb(224,123,36)"/><text x="81.0273%" y="175.50"></text></g><g><title>metadata_register_crate (862,459 samples, 0.46%)</title><rect x="81.5249%" y="149" width="0.4564%" height="15" fill="rgb(240,125,3)"/><text x="81.7749%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (513,236 samples, 0.27%)</title><rect x="81.9845%" y="197" width="0.2716%" height="15" fill="rgb(205,98,50)"/><text x="82.2345%" y="207.50"></text></g><g><title>finalize_macro_resolutions (465,245 samples, 0.25%)</title><rect x="82.3023%" y="181" width="0.2462%" height="15" fill="rgb(205,185,37)"/><text x="82.5523%" y="191.50"></text></g><g><title>late_resolve_crate (6,246,200 samples, 3.31%)</title><rect x="82.5485%" y="181" width="3.3055%" height="15" fill="rgb(238,207,15)"/><text x="82.7985%" y="191.50">lat..</text></g><g><title>configure_and_expand (28,307,426 samples, 14.98%)</title><rect x="71.0743%" y="213" width="14.9802%" height="15" fill="rgb(213,199,42)"/><text x="71.3243%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (7,177,851 samples, 3.80%)</title><rect x="82.2561%" y="197" width="3.7985%" height="15" fill="rgb(235,201,11)"/><text x="82.5061%" y="207.50">reso..</text></g><g><title>drop_ast (285,103 samples, 0.15%)</title><rect x="86.0546%" y="213" width="0.1509%" height="15" fill="rgb(207,46,11)"/><text x="86.3046%" y="223.50"></text></g><g><title>early_lint_checks (620,717 samples, 0.33%)</title><rect x="86.2121%" y="213" width="0.3285%" height="15" fill="rgb(241,35,35)"/><text x="86.4621%" y="223.50"></text></g><g><title>free_global_ctxt (4,502,039 samples, 2.38%)</title><rect x="86.5405%" y="213" width="2.3825%" height="15" fill="rgb(243,32,47)"/><text x="86.7905%" y="223.50">fr..</text></g><g><title>generate_crate_metadata (1,215,683 samples, 0.64%)</title><rect x="88.9230%" y="213" width="0.6433%" height="15" fill="rgb(247,202,23)"/><text x="89.1730%" y="223.50"></text></g><g><title>hir_lowering (8,368,013 samples, 4.43%)</title><rect x="89.5663%" y="213" width="4.4283%" height="15" fill="rgb(219,102,11)"/><text x="89.8163%" y="223.50">hir_l..</text></g><g><title>parse_crate (9,521,446 samples, 5.04%)</title><rect x="94.0232%" y="213" width="5.0387%" height="15" fill="rgb(243,110,44)"/><text x="94.2732%" y="223.50">parse_..</text></g><g><title>prepare_outputs (353,974 samples, 0.19%)</title><rect x="99.0667%" y="213" width="0.1873%" height="15" fill="rgb(222,74,54)"/><text x="99.3167%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (960,391 samples, 0.51%)</title><rect x="99.2540%" y="213" width="0.5082%" height="15" fill="rgb(216,99,12)"/><text x="99.5040%" y="223.50"></text></g><g><title>all (188,965,295 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (188,965,295 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (340,304 samples, 0.18%)</title><rect x="99.8199%" y="213" width="0.1801%" height="15" fill="rgb(213,25,53)"/><text x="100.0699%" y="223.50"></text></g></svg></svg>