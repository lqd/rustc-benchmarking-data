<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (130,120 samples, 0.32%)</title><rect x="7.4062%" y="197" width="0.3191%" height="15" fill="rgb(227,0,7)"/><text x="7.6562%" y="207.50"></text></g><g><title>item_attrs (80,671 samples, 0.20%)</title><rect x="8.0527%" y="165" width="0.1978%" height="15" fill="rgb(217,0,24)"/><text x="8.3027%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (76,891 samples, 0.19%)</title><rect x="8.0620%" y="149" width="0.1885%" height="15" fill="rgb(221,193,54)"/><text x="8.3120%" y="159.50"></text></g><g><title>codegen_fn_attrs (120,402 samples, 0.30%)</title><rect x="7.9775%" y="181" width="0.2952%" height="15" fill="rgb(248,212,6)"/><text x="8.2275%" y="191.50"></text></g><g><title>is_copy_raw (77,650 samples, 0.19%)</title><rect x="9.7397%" y="117" width="0.1904%" height="15" fill="rgb(208,68,35)"/><text x="9.9897%" y="127.50"></text></g><g><title>evaluate_obligation (71,910 samples, 0.18%)</title><rect x="9.7538%" y="101" width="0.1763%" height="15" fill="rgb(232,128,0)"/><text x="10.0038%" y="111.50"></text></g><g><title>adt_drop_tys (108,231 samples, 0.27%)</title><rect x="9.7235%" y="133" width="0.2654%" height="15" fill="rgb(207,160,47)"/><text x="9.9735%" y="143.50"></text></g><g><title>adt_drop_tys (212,182 samples, 0.52%)</title><rect x="9.6912%" y="149" width="0.5203%" height="15" fill="rgb(228,23,34)"/><text x="9.9412%" y="159.50"></text></g><g><title>param_env (62,000 samples, 0.15%)</title><rect x="10.0595%" y="133" width="0.1520%" height="15" fill="rgb(218,30,26)"/><text x="10.3095%" y="143.50"></text></g><g><title>needs_drop_raw (429,715 samples, 1.05%)</title><rect x="9.6344%" y="165" width="1.0537%" height="15" fill="rgb(220,122,19)"/><text x="9.8844%" y="175.50"></text></g><g><title>is_copy_raw (194,373 samples, 0.48%)</title><rect x="10.2115%" y="149" width="0.4766%" height="15" fill="rgb(250,228,42)"/><text x="10.4615%" y="159.50"></text></g><g><title>evaluate_obligation (168,072 samples, 0.41%)</title><rect x="10.2760%" y="133" width="0.4121%" height="15" fill="rgb(240,193,28)"/><text x="10.5260%" y="143.50"></text></g><g><title>predicates_of (42,231 samples, 0.10%)</title><rect x="10.5845%" y="117" width="0.1036%" height="15" fill="rgb(216,20,37)"/><text x="10.8345%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (47,650 samples, 0.12%)</title><rect x="10.7803%" y="149" width="0.1168%" height="15" fill="rgb(206,188,39)"/><text x="11.0303%" y="159.50"></text></g><g><title>impl_parent (218,683 samples, 0.54%)</title><rect x="11.5142%" y="133" width="0.5362%" height="15" fill="rgb(217,207,13)"/><text x="11.7642%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (157,712 samples, 0.39%)</title><rect x="11.6637%" y="117" width="0.3867%" height="15" fill="rgb(231,73,38)"/><text x="11.9137%" y="127.50"></text></g><g><title>specialization_graph_of (1,103,933 samples, 2.71%)</title><rect x="10.9015%" y="149" width="2.7069%" height="15" fill="rgb(225,20,46)"/><text x="11.1515%" y="159.50">sp..</text></g><g><title>impl_trait_ref (635,398 samples, 1.56%)</title><rect x="12.0504%" y="133" width="1.5580%" height="15" fill="rgb(210,31,41)"/><text x="12.3004%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (575,727 samples, 1.41%)</title><rect x="12.1967%" y="117" width="1.4117%" height="15" fill="rgb(221,200,47)"/><text x="12.4467%" y="127.50"></text></g><g><title>resolve_instance (1,213,313 samples, 2.98%)</title><rect x="10.6881%" y="165" width="2.9751%" height="15" fill="rgb(226,26,5)"/><text x="10.9381%" y="175.50">res..</text></g><g><title>thir_body (193,962 samples, 0.48%)</title><rect x="13.6807%" y="165" width="0.4756%" height="15" fill="rgb(249,33,26)"/><text x="13.9307%" y="175.50"></text></g><g><title>mir_const (2,958,214 samples, 7.25%)</title><rect x="6.9103%" y="213" width="7.2537%" height="15" fill="rgb(235,183,28)"/><text x="7.1603%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (2,625,870 samples, 6.44%)</title><rect x="7.7253%" y="197" width="6.4388%" height="15" fill="rgb(221,5,38)"/><text x="7.9753%" y="207.50">unsafety..</text></g><g><title>mir_built (2,402,618 samples, 5.89%)</title><rect x="8.2727%" y="181" width="5.8913%" height="15" fill="rgb(247,18,42)"/><text x="8.5227%" y="191.50">mir_bui..</text></g><g><title>mir_promoted (3,163,876 samples, 7.76%)</title><rect x="6.4269%" y="229" width="7.7580%" height="15" fill="rgb(241,131,45)"/><text x="6.6769%" y="239.50">mir_promoted</text></g><g><title>type_op_normalize_fn_sig (97,781 samples, 0.24%)</title><rect x="14.2320%" y="229" width="0.2398%" height="15" fill="rgb(249,31,29)"/><text x="14.4820%" y="239.50"></text></g><g><title>normalize_projection_ty (54,570 samples, 0.13%)</title><rect x="14.3380%" y="213" width="0.1338%" height="15" fill="rgb(225,111,53)"/><text x="14.5880%" y="223.50"></text></g><g><title>type_op_normalize_predicate (41,660 samples, 0.10%)</title><rect x="14.4718%" y="229" width="0.1022%" height="15" fill="rgb(238,160,17)"/><text x="14.7218%" y="239.50"></text></g><g><title>MIR_borrow_checking (5,400,960 samples, 13.24%)</title><rect x="1.9607%" y="261" width="13.2434%" height="15" fill="rgb(214,148,48)"/><text x="2.2107%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (5,390,980 samples, 13.22%)</title><rect x="1.9852%" y="245" width="13.2189%" height="15" fill="rgb(232,36,49)"/><text x="2.2352%" y="255.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (257,003 samples, 0.63%)</title><rect x="14.5739%" y="229" width="0.6302%" height="15" fill="rgb(209,103,24)"/><text x="14.8239%" y="239.50"></text></g><g><title>hir_module_items (112,872 samples, 0.28%)</title><rect x="15.2154%" y="261" width="0.2768%" height="15" fill="rgb(229,88,8)"/><text x="15.4654%" y="271.50"></text></g><g><title>get_lang_items (90,021 samples, 0.22%)</title><rect x="15.9082%" y="213" width="0.2207%" height="15" fill="rgb(213,181,19)"/><text x="16.1582%" y="223.50"></text></g><g><title>codegen_fn_attrs (218,472 samples, 0.54%)</title><rect x="15.7314%" y="229" width="0.5357%" height="15" fill="rgb(254,191,54)"/><text x="15.9814%" y="239.50"></text></g><g><title>check_mod_attrs (288,403 samples, 0.71%)</title><rect x="15.5607%" y="245" width="0.7072%" height="15" fill="rgb(241,83,37)"/><text x="15.8107%" y="255.50"></text></g><g><title>lookup_deprecation_entry (49,440 samples, 0.12%)</title><rect x="16.5859%" y="229" width="0.1212%" height="15" fill="rgb(233,36,39)"/><text x="16.8359%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (170,782 samples, 0.42%)</title><rect x="16.4104%" y="245" width="0.4188%" height="15" fill="rgb(226,3,54)"/><text x="16.6604%" y="255.50"></text></g><g><title>misc_checking_1 (583,046 samples, 1.43%)</title><rect x="15.4944%" y="261" width="1.4297%" height="15" fill="rgb(245,192,40)"/><text x="15.7444%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (157,102 samples, 0.39%)</title><rect x="16.9294%" y="245" width="0.3852%" height="15" fill="rgb(238,167,29)"/><text x="17.1794%" y="255.50"></text></g><g><title>check_mod_liveness (132,181 samples, 0.32%)</title><rect x="16.9905%" y="229" width="0.3241%" height="15" fill="rgb(232,182,51)"/><text x="17.2405%" y="239.50"></text></g><g><title>type_uninhabited_from (40,831 samples, 0.10%)</title><rect x="17.2145%" y="213" width="0.1001%" height="15" fill="rgb(231,60,39)"/><text x="17.4645%" y="223.50"></text></g><g><title>misc_checking_2 (412,875 samples, 1.01%)</title><rect x="16.9241%" y="261" width="1.0124%" height="15" fill="rgb(208,69,12)"/><text x="17.1741%" y="271.50"></text></g><g><title>match_checking (253,613 samples, 0.62%)</title><rect x="17.3146%" y="245" width="0.6219%" height="15" fill="rgb(235,93,37)"/><text x="17.5646%" y="255.50"></text></g><g><title>check_match (248,753 samples, 0.61%)</title><rect x="17.3265%" y="229" width="0.6100%" height="15" fill="rgb(213,116,39)"/><text x="17.5765%" y="239.50"></text></g><g><title>crate_lints (92,471 samples, 0.23%)</title><rect x="18.1002%" y="229" width="0.2267%" height="15" fill="rgb(222,207,29)"/><text x="18.3502%" y="239.50"></text></g><g><title>lint_checking (143,091 samples, 0.35%)</title><rect x="18.0975%" y="245" width="0.3509%" height="15" fill="rgb(206,96,30)"/><text x="18.3475%" y="255.50"></text></g><g><title>module_lints (49,520 samples, 0.12%)</title><rect x="18.3269%" y="229" width="0.1214%" height="15" fill="rgb(218,138,4)"/><text x="18.5769%" y="239.50"></text></g><g><title>lint_mod (47,750 samples, 0.12%)</title><rect x="18.3313%" y="213" width="0.1171%" height="15" fill="rgb(250,191,14)"/><text x="18.5813%" y="223.50"></text></g><g><title>privacy_checking_modules (79,371 samples, 0.19%)</title><rect x="18.5445%" y="245" width="0.1946%" height="15" fill="rgb(239,60,40)"/><text x="18.7945%" y="255.50"></text></g><g><title>check_mod_privacy (78,051 samples, 0.19%)</title><rect x="18.5478%" y="229" width="0.1914%" height="15" fill="rgb(206,27,48)"/><text x="18.7978%" y="239.50"></text></g><g><title>misc_checking_3 (336,834 samples, 0.83%)</title><rect x="17.9365%" y="261" width="0.8259%" height="15" fill="rgb(225,35,8)"/><text x="18.1865%" y="271.50"></text></g><g><title>impl_parent (167,851 samples, 0.41%)</title><rect x="21.6728%" y="53" width="0.4116%" height="15" fill="rgb(250,213,24)"/><text x="21.9228%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (119,981 samples, 0.29%)</title><rect x="21.7902%" y="37" width="0.2942%" height="15" fill="rgb(247,123,22)"/><text x="22.0402%" y="47.50"></text></g><g><title>impl_trait_ref (607,038 samples, 1.49%)</title><rect x="22.0844%" y="53" width="1.4885%" height="15" fill="rgb(231,138,38)"/><text x="22.3344%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (554,188 samples, 1.36%)</title><rect x="22.2140%" y="37" width="1.3589%" height="15" fill="rgb(231,145,46)"/><text x="22.4640%" y="47.50"></text></g><g><title>coherent_trait (1,082,963 samples, 2.66%)</title><rect x="21.0861%" y="85" width="2.6555%" height="15" fill="rgb(251,118,11)"/><text x="21.3361%" y="95.50">co..</text></g><g><title>specialization_graph_of (1,071,632 samples, 2.63%)</title><rect x="21.1139%" y="69" width="2.6277%" height="15" fill="rgb(217,147,25)"/><text x="21.3639%" y="79.50">sp..</text></g><g><title>trait_impls_of (68,811 samples, 0.17%)</title><rect x="23.5729%" y="53" width="0.1687%" height="15" fill="rgb(247,81,37)"/><text x="23.8229%" y="63.50"></text></g><g><title>adt_destructor (1,095,913 samples, 2.69%)</title><rect x="21.0619%" y="117" width="2.6872%" height="15" fill="rgb(209,12,38)"/><text x="21.3119%" y="127.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (1,094,333 samples, 2.68%)</title><rect x="21.0657%" y="101" width="2.6834%" height="15" fill="rgb(227,1,9)"/><text x="21.3157%" y="111.50">me..</text></g><g><title>adt_def (61,580 samples, 0.15%)</title><rect x="23.7606%" y="101" width="0.1510%" height="15" fill="rgb(248,47,43)"/><text x="24.0106%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (61,030 samples, 0.15%)</title><rect x="23.7620%" y="85" width="0.1496%" height="15" fill="rgb(221,10,30)"/><text x="24.0120%" y="95.50"></text></g><g><title>item_attrs (57,150 samples, 0.14%)</title><rect x="23.7715%" y="69" width="0.1401%" height="15" fill="rgb(210,229,1)"/><text x="24.0215%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (56,550 samples, 0.14%)</title><rect x="23.7729%" y="53" width="0.1387%" height="15" fill="rgb(222,148,37)"/><text x="24.0229%" y="63.50"></text></g><g><title>adt_dtorck_constraint (70,250 samples, 0.17%)</title><rect x="23.7491%" y="117" width="0.1723%" height="15" fill="rgb(234,67,33)"/><text x="23.9991%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,235,644 samples, 3.03%)</title><rect x="20.9405%" y="133" width="3.0299%" height="15" fill="rgb(247,98,35)"/><text x="21.1905%" y="143.50">adt..</text></g><g><title>adt_dtorck_constraint (1,305,665 samples, 3.20%)</title><rect x="20.8038%" y="149" width="3.2016%" height="15" fill="rgb(247,138,52)"/><text x="21.0538%" y="159.50">adt..</text></g><g><title>adt_dtorck_constraint (1,349,195 samples, 3.31%)</title><rect x="20.7372%" y="165" width="3.3083%" height="15" fill="rgb(213,79,30)"/><text x="20.9872%" y="175.50">adt..</text></g><g><title>dropck_outlives (1,442,726 samples, 3.54%)</title><rect x="20.5175%" y="197" width="3.5376%" height="15" fill="rgb(246,177,23)"/><text x="20.7675%" y="207.50">dro..</text></g><g><title>adt_dtorck_constraint (1,400,546 samples, 3.43%)</title><rect x="20.6209%" y="181" width="3.4342%" height="15" fill="rgb(230,62,27)"/><text x="20.8709%" y="191.50">adt..</text></g><g><title>adt_def (305,463 samples, 0.75%)</title><rect x="24.1375%" y="165" width="0.7490%" height="15" fill="rgb(216,154,8)"/><text x="24.3875%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (303,923 samples, 0.75%)</title><rect x="24.1412%" y="149" width="0.7452%" height="15" fill="rgb(244,35,45)"/><text x="24.3912%" y="159.50"></text></g><g><title>item_attrs (290,383 samples, 0.71%)</title><rect x="24.1744%" y="133" width="0.7120%" height="15" fill="rgb(251,115,12)"/><text x="24.4244%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (288,743 samples, 0.71%)</title><rect x="24.1785%" y="117" width="0.7080%" height="15" fill="rgb(240,54,50)"/><text x="24.4285%" y="127.50"></text></g><g><title>adt_def (90,561 samples, 0.22%)</title><rect x="24.8920%" y="149" width="0.2221%" height="15" fill="rgb(233,84,52)"/><text x="25.1420%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (89,961 samples, 0.22%)</title><rect x="24.8935%" y="133" width="0.2206%" height="15" fill="rgb(207,117,47)"/><text x="25.1435%" y="143.50"></text></g><g><title>item_attrs (84,971 samples, 0.21%)</title><rect x="24.9057%" y="117" width="0.2084%" height="15" fill="rgb(249,43,39)"/><text x="25.1557%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (84,211 samples, 0.21%)</title><rect x="24.9076%" y="101" width="0.2065%" height="15" fill="rgb(209,38,44)"/><text x="25.1576%" y="111.50"></text></g><g><title>adt_sized_constraint (94,121 samples, 0.23%)</title><rect x="24.8865%" y="165" width="0.2308%" height="15" fill="rgb(236,212,23)"/><text x="25.1365%" y="175.50"></text></g><g><title>evaluate_obligation (451,055 samples, 1.11%)</title><rect x="24.0551%" y="197" width="1.1060%" height="15" fill="rgb(242,79,21)"/><text x="24.3051%" y="207.50"></text></g><g><title>adt_sized_constraint (429,285 samples, 1.05%)</title><rect x="24.1085%" y="181" width="1.0526%" height="15" fill="rgb(211,96,35)"/><text x="24.3585%" y="191.50"></text></g><g><title>fn_sig (42,120 samples, 0.10%)</title><rect x="25.1811%" y="197" width="0.1033%" height="15" fill="rgb(253,215,40)"/><text x="25.4311%" y="207.50"></text></g><g><title>impl_trait_ref (46,131 samples, 0.11%)</title><rect x="25.3064%" y="197" width="0.1131%" height="15" fill="rgb(211,81,21)"/><text x="25.5564%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (44,071 samples, 0.11%)</title><rect x="25.3114%" y="181" width="0.1081%" height="15" fill="rgb(208,190,38)"/><text x="25.5614%" y="191.50"></text></g><g><title>method_autoderef_steps (110,351 samples, 0.27%)</title><rect x="25.4296%" y="197" width="0.2706%" height="15" fill="rgb(235,213,38)"/><text x="25.6796%" y="207.50"></text></g><g><title>evaluate_obligation (91,991 samples, 0.23%)</title><rect x="25.4746%" y="181" width="0.2256%" height="15" fill="rgb(237,122,38)"/><text x="25.7246%" y="191.50"></text></g><g><title>trait_impls_of (51,181 samples, 0.13%)</title><rect x="25.5747%" y="165" width="0.1255%" height="15" fill="rgb(244,218,35)"/><text x="25.8247%" y="175.50"></text></g><g><title>adt_sized_constraint (48,640 samples, 0.12%)</title><rect x="36.7330%" y="165" width="0.1193%" height="15" fill="rgb(240,68,47)"/><text x="36.9830%" y="175.50"></text></g><g><title>adt_sized_constraint (107,971 samples, 0.26%)</title><rect x="36.6203%" y="181" width="0.2648%" height="15" fill="rgb(210,16,53)"/><text x="36.8703%" y="191.50"></text></g><g><title>associated_item (742,570 samples, 1.82%)</title><rect x="37.6067%" y="165" width="1.8208%" height="15" fill="rgb(235,124,12)"/><text x="37.8567%" y="175.50">a..</text></g><g><title>metadata_decode_entry_associated_item (554,497 samples, 1.36%)</title><rect x="38.0679%" y="149" width="1.3597%" height="15" fill="rgb(224,169,11)"/><text x="38.3179%" y="159.50"></text></g><g><title>associated_items (1,060,002 samples, 2.60%)</title><rect x="36.9088%" y="181" width="2.5992%" height="15" fill="rgb(250,166,2)"/><text x="37.1588%" y="191.50">as..</text></g><g><title>adt_def (41,571 samples, 0.10%)</title><rect x="39.7573%" y="117" width="0.1019%" height="15" fill="rgb(242,216,29)"/><text x="40.0073%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (41,101 samples, 0.10%)</title><rect x="39.7585%" y="101" width="0.1008%" height="15" fill="rgb(230,116,27)"/><text x="40.0085%" y="111.50"></text></g><g><title>adt_dtorck_constraint (51,451 samples, 0.13%)</title><rect x="39.7481%" y="133" width="0.1262%" height="15" fill="rgb(228,99,48)"/><text x="39.9981%" y="143.50"></text></g><g><title>adt_dtorck_constraint (68,161 samples, 0.17%)</title><rect x="39.7245%" y="149" width="0.1671%" height="15" fill="rgb(253,11,6)"/><text x="39.9745%" y="159.50"></text></g><g><title>dropck_outlives (116,441 samples, 0.29%)</title><rect x="39.6143%" y="181" width="0.2855%" height="15" fill="rgb(247,143,39)"/><text x="39.8643%" y="191.50"></text></g><g><title>adt_dtorck_constraint (84,031 samples, 0.21%)</title><rect x="39.6938%" y="165" width="0.2060%" height="15" fill="rgb(236,97,10)"/><text x="39.9438%" y="175.50"></text></g><g><title>generics_of (49,140 samples, 0.12%)</title><rect x="41.5836%" y="165" width="0.1205%" height="15" fill="rgb(233,208,19)"/><text x="41.8336%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (42,150 samples, 0.10%)</title><rect x="41.6008%" y="149" width="0.1034%" height="15" fill="rgb(216,164,2)"/><text x="41.8508%" y="159.50"></text></g><g><title>impl_item_implementor_ids (63,661 samples, 0.16%)</title><rect x="41.7041%" y="165" width="0.1561%" height="15" fill="rgb(220,129,5)"/><text x="41.9541%" y="175.50"></text></g><g><title>associated_items (58,831 samples, 0.14%)</title><rect x="41.7160%" y="149" width="0.1443%" height="15" fill="rgb(242,17,10)"/><text x="41.9660%" y="159.50"></text></g><g><title>impl_trait_ref (49,050 samples, 0.12%)</title><rect x="41.8921%" y="165" width="0.1203%" height="15" fill="rgb(242,107,0)"/><text x="42.1421%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (43,720 samples, 0.11%)</title><rect x="41.9051%" y="149" width="0.1072%" height="15" fill="rgb(251,28,31)"/><text x="42.1551%" y="159.50"></text></g><g><title>predicates_of (118,420 samples, 0.29%)</title><rect x="42.0921%" y="165" width="0.2904%" height="15" fill="rgb(233,223,10)"/><text x="42.3421%" y="175.50"></text></g><g><title>predicates_defined_on (76,760 samples, 0.19%)</title><rect x="42.1942%" y="149" width="0.1882%" height="15" fill="rgb(215,21,27)"/><text x="42.4442%" y="159.50"></text></g><g><title>specializes (336,394 samples, 0.82%)</title><rect x="42.3824%" y="165" width="0.8249%" height="15" fill="rgb(232,23,21)"/><text x="42.6324%" y="175.50"></text></g><g><title>param_env (300,724 samples, 0.74%)</title><rect x="42.4699%" y="149" width="0.7374%" height="15" fill="rgb(244,5,23)"/><text x="42.7199%" y="159.50"></text></g><g><title>def_span (255,874 samples, 0.63%)</title><rect x="42.5799%" y="133" width="0.6274%" height="15" fill="rgb(226,81,46)"/><text x="42.8299%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (252,844 samples, 0.62%)</title><rect x="42.5873%" y="117" width="0.6200%" height="15" fill="rgb(247,70,30)"/><text x="42.8373%" y="127.50"></text></g><g><title>trait_impls_of (613,967 samples, 1.51%)</title><rect x="43.2601%" y="165" width="1.5055%" height="15" fill="rgb(212,68,19)"/><text x="43.5101%" y="175.50"></text></g><g><title>implementations_of_trait (259,871 samples, 0.64%)</title><rect x="44.1284%" y="149" width="0.6372%" height="15" fill="rgb(240,187,13)"/><text x="44.3784%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (138,710 samples, 0.34%)</title><rect x="44.4255%" y="133" width="0.3401%" height="15" fill="rgb(223,113,26)"/><text x="44.6755%" y="143.50"></text></g><g><title>evaluate_obligation (1,994,788 samples, 4.89%)</title><rect x="39.8998%" y="181" width="4.8913%" height="15" fill="rgb(206,192,2)"/><text x="40.1498%" y="191.50">evalua..</text></g><g><title>fn_sig (121,721 samples, 0.30%)</title><rect x="44.8396%" y="181" width="0.2985%" height="15" fill="rgb(241,108,4)"/><text x="45.0896%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (106,761 samples, 0.26%)</title><rect x="44.8763%" y="165" width="0.2618%" height="15" fill="rgb(247,173,49)"/><text x="45.1263%" y="175.50"></text></g><g><title>generics_of (119,912 samples, 0.29%)</title><rect x="45.1381%" y="181" width="0.2940%" height="15" fill="rgb(224,114,35)"/><text x="45.3881%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (89,332 samples, 0.22%)</title><rect x="45.2131%" y="165" width="0.2190%" height="15" fill="rgb(245,159,27)"/><text x="45.4631%" y="175.50"></text></g><g><title>associated_item (64,311 samples, 0.16%)</title><rect x="45.5047%" y="149" width="0.1577%" height="15" fill="rgb(245,172,44)"/><text x="45.7547%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (55,931 samples, 0.14%)</title><rect x="45.5253%" y="133" width="0.1371%" height="15" fill="rgb(236,23,11)"/><text x="45.7753%" y="143.50"></text></g><g><title>impl_item_implementor_ids (108,181 samples, 0.27%)</title><rect x="45.4321%" y="181" width="0.2653%" height="15" fill="rgb(205,117,38)"/><text x="45.6821%" y="191.50"></text></g><g><title>associated_items (96,661 samples, 0.24%)</title><rect x="45.4604%" y="165" width="0.2370%" height="15" fill="rgb(237,72,25)"/><text x="45.7104%" y="175.50"></text></g><g><title>is_copy_raw (435,994 samples, 1.07%)</title><rect x="45.8783%" y="181" width="1.0691%" height="15" fill="rgb(244,70,9)"/><text x="46.1283%" y="191.50"></text></g><g><title>evaluate_obligation (415,754 samples, 1.02%)</title><rect x="45.9279%" y="165" width="1.0194%" height="15" fill="rgb(217,125,39)"/><text x="46.1779%" y="175.50"></text></g><g><title>trait_impls_of (316,483 samples, 0.78%)</title><rect x="46.1713%" y="149" width="0.7760%" height="15" fill="rgb(235,36,10)"/><text x="46.4213%" y="159.50"></text></g><g><title>implementations_of_trait (75,200 samples, 0.18%)</title><rect x="46.7629%" y="133" width="0.1844%" height="15" fill="rgb(251,123,47)"/><text x="47.0129%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (65,020 samples, 0.16%)</title><rect x="46.7879%" y="117" width="0.1594%" height="15" fill="rgb(221,13,13)"/><text x="47.0379%" y="127.50"></text></g><g><title>item_attrs (131,260 samples, 0.32%)</title><rect x="46.9473%" y="181" width="0.3219%" height="15" fill="rgb(238,131,9)"/><text x="47.1973%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (126,810 samples, 0.31%)</title><rect x="46.9583%" y="165" width="0.3109%" height="15" fill="rgb(211,50,8)"/><text x="47.2083%" y="175.50"></text></g><g><title>lint_levels (52,851 samples, 0.13%)</title><rect x="47.2692%" y="181" width="0.1296%" height="15" fill="rgb(245,182,24)"/><text x="47.5192%" y="191.50"></text></g><g><title>evaluate_obligation (190,781 samples, 0.47%)</title><rect x="47.9147%" y="165" width="0.4678%" height="15" fill="rgb(242,14,37)"/><text x="48.1647%" y="175.50"></text></g><g><title>method_autoderef_steps (387,524 samples, 0.95%)</title><rect x="47.5317%" y="181" width="0.9502%" height="15" fill="rgb(246,228,12)"/><text x="47.7817%" y="191.50"></text></g><g><title>explicit_predicates_of (110,300 samples, 0.27%)</title><rect x="49.0912%" y="149" width="0.2705%" height="15" fill="rgb(213,55,15)"/><text x="49.3412%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (76,780 samples, 0.19%)</title><rect x="49.1734%" y="133" width="0.1883%" height="15" fill="rgb(209,9,3)"/><text x="49.4234%" y="143.50"></text></g><g><title>predicates_of (391,664 samples, 0.96%)</title><rect x="48.5329%" y="181" width="0.9604%" height="15" fill="rgb(230,59,30)"/><text x="48.7829%" y="191.50"></text></g><g><title>predicates_defined_on (252,593 samples, 0.62%)</title><rect x="48.8739%" y="165" width="0.6194%" height="15" fill="rgb(209,121,21)"/><text x="49.1239%" y="175.50"></text></g><g><title>inferred_outlives_of (53,672 samples, 0.13%)</title><rect x="49.3617%" y="149" width="0.1316%" height="15" fill="rgb(220,109,13)"/><text x="49.6117%" y="159.50"></text></g><g><title>type_of (72,940 samples, 0.18%)</title><rect x="49.5615%" y="181" width="0.1789%" height="15" fill="rgb(232,18,1)"/><text x="49.8115%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (60,720 samples, 0.15%)</title><rect x="49.5914%" y="165" width="0.1489%" height="15" fill="rgb(215,41,42)"/><text x="49.8414%" y="175.50"></text></g><g><title>typeck (9,771,019 samples, 23.96%)</title><rect x="25.8985%" y="197" width="23.9590%" height="15" fill="rgb(224,123,36)"/><text x="26.1485%" y="207.50">typeck</text></g><g><title>item_bodies_checking (12,629,151 samples, 30.97%)</title><rect x="18.9176%" y="245" width="30.9673%" height="15" fill="rgb(240,125,3)"/><text x="19.1676%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,625,671 samples, 30.96%)</title><rect x="18.9261%" y="229" width="30.9588%" height="15" fill="rgb(205,98,50)"/><text x="19.1761%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (12,617,831 samples, 30.94%)</title><rect x="18.9453%" y="213" width="30.9395%" height="15" fill="rgb(205,185,37)"/><text x="19.1953%" y="223.50">typeck</text></g><g><title>fn_sig (55,730 samples, 0.14%)</title><rect x="50.0590%" y="213" width="0.1367%" height="15" fill="rgb(238,207,15)"/><text x="50.3090%" y="223.50"></text></g><g><title>named_region_map (44,860 samples, 0.11%)</title><rect x="50.3216%" y="197" width="0.1100%" height="15" fill="rgb(213,199,42)"/><text x="50.5716%" y="207.50"></text></g><g><title>resolve_lifetimes (42,930 samples, 0.11%)</title><rect x="50.3264%" y="181" width="0.1053%" height="15" fill="rgb(235,201,11)"/><text x="50.5764%" y="191.50"></text></g><g><title>generics_of (104,571 samples, 0.26%)</title><rect x="50.1957%" y="213" width="0.2564%" height="15" fill="rgb(207,46,11)"/><text x="50.4457%" y="223.50"></text></g><g><title>late_bound_vars_map (54,291 samples, 0.13%)</title><rect x="50.8222%" y="165" width="0.1331%" height="15" fill="rgb(241,35,35)"/><text x="51.0722%" y="175.50"></text></g><g><title>resolve_lifetimes (49,001 samples, 0.12%)</title><rect x="50.8352%" y="149" width="0.1202%" height="15" fill="rgb(243,32,47)"/><text x="51.0852%" y="159.50"></text></g><g><title>explicit_predicates_of (200,292 samples, 0.49%)</title><rect x="50.4909%" y="181" width="0.4911%" height="15" fill="rgb(247,202,23)"/><text x="50.7409%" y="191.50"></text></g><g><title>predicates_of (223,782 samples, 0.55%)</title><rect x="50.4521%" y="213" width="0.5487%" height="15" fill="rgb(219,102,11)"/><text x="50.7021%" y="223.50"></text></g><g><title>predicates_defined_on (219,182 samples, 0.54%)</title><rect x="50.4634%" y="197" width="0.5374%" height="15" fill="rgb(243,110,44)"/><text x="50.7134%" y="207.50"></text></g><g><title>type_collecting (469,976 samples, 1.15%)</title><rect x="49.9005%" y="245" width="1.1524%" height="15" fill="rgb(222,74,54)"/><text x="50.1505%" y="255.50"></text></g><g><title>collect_mod_item_types (458,146 samples, 1.12%)</title><rect x="49.9295%" y="229" width="1.1234%" height="15" fill="rgb(216,99,12)"/><text x="50.1795%" y="239.50"></text></g><g><title>implied_outlives_bounds (133,932 samples, 0.33%)</title><rect x="52.2760%" y="213" width="0.3284%" height="15" fill="rgb(226,22,26)"/><text x="52.5260%" y="223.50"></text></g><g><title>param_env (261,942 samples, 0.64%)</title><rect x="52.6044%" y="213" width="0.6423%" height="15" fill="rgb(217,163,10)"/><text x="52.8544%" y="223.50"></text></g><g><title>predicates_of (48,910 samples, 0.12%)</title><rect x="53.2467%" y="213" width="0.1199%" height="15" fill="rgb(213,25,53)"/><text x="53.4967%" y="223.50"></text></g><g><title>region_scope_tree (74,770 samples, 0.18%)</title><rect x="53.3667%" y="213" width="0.1833%" height="15" fill="rgb(252,105,26)"/><text x="53.6167%" y="223.50"></text></g><g><title>analysis (21,263,837 samples, 52.14%)</title><rect x="1.5662%" y="277" width="52.1400%" height="15" fill="rgb(220,39,43)"/><text x="1.8162%" y="287.50">analysis</text></g><g><title>type_check_crate (14,250,839 samples, 34.94%)</title><rect x="18.7624%" y="261" width="34.9438%" height="15" fill="rgb(229,68,48)"/><text x="19.0124%" y="271.50">type_check_crate</text></g><g><title>wf_checking (1,081,342 samples, 2.65%)</title><rect x="51.0547%" y="245" width="2.6515%" height="15" fill="rgb(252,8,32)"/><text x="51.3047%" y="255.50">wf..</text></g><g><title>check_item_well_formed (1,052,672 samples, 2.58%)</title><rect x="51.1250%" y="229" width="2.5812%" height="15" fill="rgb(223,20,43)"/><text x="51.3750%" y="239.50">ch..</text></g><g><title>trait_impls_of (63,690 samples, 0.16%)</title><rect x="53.5500%" y="213" width="0.1562%" height="15" fill="rgb(229,81,49)"/><text x="53.8000%" y="223.50"></text></g><g><title>codegen_crate (407,964 samples, 1.00%)</title><rect x="53.7355%" y="277" width="1.0003%" height="15" fill="rgb(236,28,36)"/><text x="53.9855%" y="287.50"></text></g><g><title>AST_validation (60,931 samples, 0.15%)</title><rect x="55.2658%" y="261" width="0.1494%" height="15" fill="rgb(249,185,26)"/><text x="55.5158%" y="271.50"></text></g><g><title>crate_injection (106,521 samples, 0.26%)</title><rect x="55.4631%" y="261" width="0.2612%" height="15" fill="rgb(249,174,33)"/><text x="55.7131%" y="271.50"></text></g><g><title>metadata_load_macro (59,761 samples, 0.15%)</title><rect x="77.3328%" y="229" width="0.1465%" height="15" fill="rgb(233,201,37)"/><text x="77.5828%" y="239.50"></text></g><g><title>macro_expand_crate (11,519,328 samples, 28.25%)</title><rect x="55.7243%" y="261" width="28.2460%" height="15" fill="rgb(221,78,26)"/><text x="55.9743%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (11,495,678 samples, 28.19%)</title><rect x="55.7823%" y="245" width="28.1880%" height="15" fill="rgb(250,127,30)"/><text x="56.0323%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (2,647,139 samples, 6.49%)</title><rect x="77.4793%" y="229" width="6.4909%" height="15" fill="rgb(230,49,44)"/><text x="77.7293%" y="239.50">metadata_..</text></g><g><title>metadata_register_crate (954,980 samples, 2.34%)</title><rect x="81.6286%" y="213" width="2.3417%" height="15" fill="rgb(229,67,23)"/><text x="81.8786%" y="223.50">m..</text></g><g><title>metadata_register_crate (75,980 samples, 0.19%)</title><rect x="83.7840%" y="197" width="0.1863%" height="15" fill="rgb(249,83,47)"/><text x="84.0340%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (84,881 samples, 0.21%)</title><rect x="83.9826%" y="261" width="0.2081%" height="15" fill="rgb(215,43,3)"/><text x="84.2326%" y="271.50"></text></g><g><title>finalize_macro_resolutions (327,984 samples, 0.80%)</title><rect x="84.2617%" y="245" width="0.8042%" height="15" fill="rgb(238,154,13)"/><text x="84.5117%" y="255.50"></text></g><g><title>late_resolve_crate (461,615 samples, 1.13%)</title><rect x="85.0659%" y="245" width="1.1319%" height="15" fill="rgb(219,56,2)"/><text x="85.3159%" y="255.50"></text></g><g><title>configure_and_expand (12,879,243 samples, 31.58%)</title><rect x="54.7358%" y="277" width="31.5805%" height="15" fill="rgb(233,0,4)"/><text x="54.9858%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (866,890 samples, 2.13%)</title><rect x="84.1907%" y="261" width="2.1257%" height="15" fill="rgb(235,30,7)"/><text x="84.4407%" y="271.50">r..</text></g><g><title>early_lint_checks (665,678 samples, 1.63%)</title><rect x="86.4415%" y="277" width="1.6323%" height="15" fill="rgb(250,79,13)"/><text x="86.6915%" y="287.50"></text></g><g><title>free_global_ctxt (1,843,931 samples, 4.52%)</title><rect x="88.0738%" y="277" width="4.5214%" height="15" fill="rgb(211,146,34)"/><text x="88.3238%" y="287.50">free_..</text></g><g><title>crate_hash (68,280 samples, 0.17%)</title><rect x="93.0070%" y="261" width="0.1674%" height="15" fill="rgb(228,22,38)"/><text x="93.2570%" y="271.50"></text></g><g><title>generate_crate_metadata (307,194 samples, 0.75%)</title><rect x="92.5952%" y="277" width="0.7533%" height="15" fill="rgb(235,168,5)"/><text x="92.8452%" y="287.50"></text></g><g><title>hir_lowering (593,856 samples, 1.46%)</title><rect x="93.3484%" y="277" width="1.4562%" height="15" fill="rgb(221,155,16)"/><text x="93.5984%" y="287.50"></text></g><g><title>link (45,380 samples, 0.11%)</title><rect x="94.8046%" y="277" width="0.1113%" height="15" fill="rgb(215,215,53)"/><text x="95.0546%" y="287.50"></text></g><g><title>parse_crate (948,570 samples, 2.33%)</title><rect x="94.9159%" y="277" width="2.3259%" height="15" fill="rgb(223,4,10)"/><text x="95.1659%" y="287.50">p..</text></g><g><title>prepare_outputs (314,143 samples, 0.77%)</title><rect x="97.2658%" y="277" width="0.7703%" height="15" fill="rgb(234,103,6)"/><text x="97.5158%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (382,324 samples, 0.94%)</title><rect x="98.0361%" y="277" width="0.9375%" height="15" fill="rgb(227,97,0)"/><text x="98.2861%" y="287.50"></text></g><g><title>setup_global_ctxt (138,601 samples, 0.34%)</title><rect x="99.0004%" y="277" width="0.3399%" height="15" fill="rgb(234,150,53)"/><text x="99.2504%" y="287.50"></text></g><g><title>all (40,782,214 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (40,782,214 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (269,053 samples, 0.66%)</title><rect x="99.3403%" y="277" width="0.6597%" height="15" fill="rgb(237,53,32)"/><text x="99.5903%" y="287.50"></text></g></svg></svg>