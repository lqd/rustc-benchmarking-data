<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (360,893 samples, 0.20%)</title><rect x="9.0028%" y="197" width="0.1950%" height="15" fill="rgb(227,0,7)"/><text x="9.2528%" y="207.50"></text></g><g><title>param_env (502,773 samples, 0.27%)</title><rect x="10.2982%" y="165" width="0.2717%" height="15" fill="rgb(217,0,24)"/><text x="10.5482%" y="175.50"></text></g><g><title>item_attrs (542,255 samples, 0.29%)</title><rect x="10.9587%" y="133" width="0.2931%" height="15" fill="rgb(221,193,54)"/><text x="11.2087%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (526,165 samples, 0.28%)</title><rect x="10.9674%" y="117" width="0.2844%" height="15" fill="rgb(248,212,6)"/><text x="11.2174%" y="127.50"></text></g><g><title>codegen_fn_attrs (724,885 samples, 0.39%)</title><rect x="10.8786%" y="149" width="0.3918%" height="15" fill="rgb(208,68,35)"/><text x="11.1286%" y="159.50"></text></g><g><title>adt_drop_tys (219,641 samples, 0.12%)</title><rect x="13.4566%" y="117" width="0.1187%" height="15" fill="rgb(232,128,0)"/><text x="13.7066%" y="127.50"></text></g><g><title>is_copy_raw (1,639,029 samples, 0.89%)</title><rect x="13.5765%" y="117" width="0.8858%" height="15" fill="rgb(207,160,47)"/><text x="13.8265%" y="127.50"></text></g><g><title>evaluate_obligation (1,357,217 samples, 0.73%)</title><rect x="13.7288%" y="101" width="0.7335%" height="15" fill="rgb(228,23,34)"/><text x="13.9788%" y="111.50"></text></g><g><title>needs_drop_raw (2,128,572 samples, 1.15%)</title><rect x="13.3149%" y="133" width="1.1504%" height="15" fill="rgb(218,30,26)"/><text x="13.5649%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (810,968 samples, 0.44%)</title><rect x="14.5542%" y="117" width="0.4383%" height="15" fill="rgb(220,122,19)"/><text x="14.8042%" y="127.50"></text></g><g><title>evaluate_obligation (250,034 samples, 0.14%)</title><rect x="14.8574%" y="101" width="0.1351%" height="15" fill="rgb(250,228,42)"/><text x="15.1074%" y="111.50"></text></g><g><title>resolve_instance (1,221,957 samples, 0.66%)</title><rect x="14.4659%" y="133" width="0.6604%" height="15" fill="rgb(240,193,28)"/><text x="14.7159%" y="143.50"></text></g><g><title>thir_body (1,316,807 samples, 0.71%)</title><rect x="15.1493%" y="133" width="0.7116%" height="15" fill="rgb(216,20,37)"/><text x="15.3993%" y="143.50"></text></g><g><title>mir_const (11,309,753 samples, 6.11%)</title><rect x="9.7792%" y="181" width="6.1122%" height="15" fill="rgb(206,188,39)"/><text x="10.0292%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (9,846,551 samples, 5.32%)</title><rect x="10.5699%" y="165" width="5.3214%" height="15" fill="rgb(217,207,13)"/><text x="10.8199%" y="175.50">unsafet..</text></g><g><title>mir_built (8,550,568 samples, 4.62%)</title><rect x="11.2703%" y="149" width="4.6210%" height="15" fill="rgb(231,73,38)"/><text x="11.5203%" y="159.50">mir_b..</text></g><g><title>has_structural_eq_impls (247,142 samples, 0.13%)</title><rect x="16.0372%" y="165" width="0.1336%" height="15" fill="rgb(225,20,46)"/><text x="16.2872%" y="175.50"></text></g><g><title>evaluate_obligation (228,532 samples, 0.12%)</title><rect x="16.0472%" y="149" width="0.1235%" height="15" fill="rgb(210,31,41)"/><text x="16.2972%" y="159.50"></text></g><g><title>trait_impls_of (203,262 samples, 0.11%)</title><rect x="16.0609%" y="133" width="0.1098%" height="15" fill="rgb(221,200,47)"/><text x="16.3109%" y="143.50"></text></g><g><title>mir_const (202,204 samples, 0.11%)</title><rect x="16.2074%" y="165" width="0.1093%" height="15" fill="rgb(226,26,5)"/><text x="16.4574%" y="175.50"></text></g><g><title>mir_promoted (13,168,615 samples, 7.12%)</title><rect x="9.2544%" y="197" width="7.1168%" height="15" fill="rgb(249,33,26)"/><text x="9.5044%" y="207.50">mir_promot..</text></g><g><title>mir_const_qualif (887,760 samples, 0.48%)</title><rect x="15.8913%" y="181" width="0.4798%" height="15" fill="rgb(235,183,28)"/><text x="16.1413%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (1,538,191 samples, 0.83%)</title><rect x="16.3711%" y="197" width="0.8313%" height="15" fill="rgb(221,5,38)"/><text x="16.6211%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (1,489,376 samples, 0.80%)</title><rect x="17.2024%" y="197" width="0.8049%" height="15" fill="rgb(247,18,42)"/><text x="17.4524%" y="207.50"></text></g><g><title>normalize_projection_ty (928,379 samples, 0.50%)</title><rect x="17.5056%" y="181" width="0.5017%" height="15" fill="rgb(241,131,45)"/><text x="17.7556%" y="191.50"></text></g><g><title>type_op_normalize_predicate (259,655 samples, 0.14%)</title><rect x="18.0073%" y="197" width="0.1403%" height="15" fill="rgb(249,31,29)"/><text x="18.2573%" y="207.50"></text></g><g><title>type_op_prove_predicate (4,159,059 samples, 2.25%)</title><rect x="18.2036%" y="197" width="2.2477%" height="15" fill="rgb(225,111,53)"/><text x="18.4536%" y="207.50">t..</text></g><g><title>MIR_borrow_checking (36,975,929 samples, 19.98%)</title><rect x="0.4698%" y="229" width="19.9830%" height="15" fill="rgb(238,160,17)"/><text x="0.7198%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (36,875,057 samples, 19.93%)</title><rect x="0.5243%" y="213" width="19.9285%" height="15" fill="rgb(214,148,48)"/><text x="0.7743%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (202,902 samples, 0.11%)</title><rect x="20.4528%" y="229" width="0.1097%" height="15" fill="rgb(232,36,49)"/><text x="20.7028%" y="239.50"></text></g><g><title>codegen_fn_attrs (316,874 samples, 0.17%)</title><rect x="20.7943%" y="197" width="0.1712%" height="15" fill="rgb(209,103,24)"/><text x="21.0443%" y="207.50"></text></g><g><title>check_mod_attrs (562,536 samples, 0.30%)</title><rect x="20.6616%" y="213" width="0.3040%" height="15" fill="rgb(229,88,8)"/><text x="20.9116%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (461,005 samples, 0.25%)</title><rect x="21.0674%" y="213" width="0.2491%" height="15" fill="rgb(213,181,19)"/><text x="21.3174%" y="223.50"></text></g><g><title>misc_checking_1 (1,281,295 samples, 0.69%)</title><rect x="20.6546%" y="229" width="0.6925%" height="15" fill="rgb(254,191,54)"/><text x="20.9046%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (897,700 samples, 0.49%)</title><rect x="21.3480%" y="213" width="0.4851%" height="15" fill="rgb(241,83,37)"/><text x="21.5980%" y="223.50"></text></g><g><title>check_mod_liveness (776,438 samples, 0.42%)</title><rect x="21.4135%" y="197" width="0.4196%" height="15" fill="rgb(233,36,39)"/><text x="21.6635%" y="207.50"></text></g><g><title>type_uninhabited_from (207,431 samples, 0.11%)</title><rect x="21.7210%" y="181" width="0.1121%" height="15" fill="rgb(226,3,54)"/><text x="21.9710%" y="191.50"></text></g><g><title>misc_checking_2 (1,921,411 samples, 1.04%)</title><rect x="21.3471%" y="229" width="1.0384%" height="15" fill="rgb(245,192,40)"/><text x="21.5971%" y="239.50"></text></g><g><title>match_checking (1,022,051 samples, 0.55%)</title><rect x="21.8331%" y="213" width="0.5524%" height="15" fill="rgb(238,167,29)"/><text x="22.0831%" y="223.50"></text></g><g><title>check_match (987,681 samples, 0.53%)</title><rect x="21.8517%" y="197" width="0.5338%" height="15" fill="rgb(232,182,51)"/><text x="22.1017%" y="207.50"></text></g><g><title>check_private_in_public (217,513 samples, 0.12%)</title><rect x="22.3910%" y="213" width="0.1176%" height="15" fill="rgb(231,60,39)"/><text x="22.6410%" y="223.50"></text></g><g><title>death_checking (355,704 samples, 0.19%)</title><rect x="22.5086%" y="213" width="0.1922%" height="15" fill="rgb(208,69,12)"/><text x="22.7586%" y="223.50"></text></g><g><title>eval_to_allocation_raw (524,285 samples, 0.28%)</title><rect x="23.1930%" y="181" width="0.2833%" height="15" fill="rgb(235,93,37)"/><text x="23.4430%" y="191.50"></text></g><g><title>eval_to_allocation_raw (521,775 samples, 0.28%)</title><rect x="23.1944%" y="165" width="0.2820%" height="15" fill="rgb(213,116,39)"/><text x="23.4444%" y="175.50"></text></g><g><title>param_env (256,122 samples, 0.14%)</title><rect x="23.5760%" y="181" width="0.1384%" height="15" fill="rgb(222,207,29)"/><text x="23.8260%" y="191.50"></text></g><g><title>impl_parent (541,025 samples, 0.29%)</title><rect x="24.3615%" y="149" width="0.2924%" height="15" fill="rgb(206,96,30)"/><text x="24.6115%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (328,983 samples, 0.18%)</title><rect x="24.4761%" y="133" width="0.1778%" height="15" fill="rgb(218,138,4)"/><text x="24.7261%" y="143.50"></text></g><g><title>specialization_graph_of (2,743,300 samples, 1.48%)</title><rect x="23.7488%" y="165" width="1.4826%" height="15" fill="rgb(250,191,14)"/><text x="23.9988%" y="175.50"></text></g><g><title>impl_trait_ref (1,068,490 samples, 0.58%)</title><rect x="24.6539%" y="149" width="0.5774%" height="15" fill="rgb(239,60,40)"/><text x="24.9039%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (847,156 samples, 0.46%)</title><rect x="24.7735%" y="133" width="0.4578%" height="15" fill="rgb(206,27,48)"/><text x="25.0235%" y="143.50"></text></g><g><title>resolve_instance (2,810,121 samples, 1.52%)</title><rect x="23.7144%" y="181" width="1.5187%" height="15" fill="rgb(225,35,8)"/><text x="23.9644%" y="191.50"></text></g><g><title>crate_lints (5,932,695 samples, 3.21%)</title><rect x="22.7022%" y="197" width="3.2062%" height="15" fill="rgb(250,213,24)"/><text x="22.9522%" y="207.50">cra..</text></g><g><title>type_of (1,224,145 samples, 0.66%)</title><rect x="25.2469%" y="181" width="0.6616%" height="15" fill="rgb(247,123,22)"/><text x="25.4969%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (963,381 samples, 0.52%)</title><rect x="25.3878%" y="165" width="0.5206%" height="15" fill="rgb(231,138,38)"/><text x="25.6378%" y="175.50"></text></g><g><title>lint_checking (6,933,486 samples, 3.75%)</title><rect x="22.7008%" y="213" width="3.7471%" height="15" fill="rgb(231,145,46)"/><text x="22.9508%" y="223.50">lint..</text></g><g><title>module_lints (998,121 samples, 0.54%)</title><rect x="25.9085%" y="197" width="0.5394%" height="15" fill="rgb(251,118,11)"/><text x="26.1585%" y="207.50"></text></g><g><title>lint_mod (993,881 samples, 0.54%)</title><rect x="25.9108%" y="181" width="0.5371%" height="15" fill="rgb(217,147,25)"/><text x="26.1608%" y="191.50"></text></g><g><title>privacy_access_levels (270,353 samples, 0.15%)</title><rect x="26.4479%" y="213" width="0.1461%" height="15" fill="rgb(247,81,37)"/><text x="26.6979%" y="223.50"></text></g><g><title>privacy_checking_modules (1,341,905 samples, 0.73%)</title><rect x="26.5940%" y="213" width="0.7252%" height="15" fill="rgb(209,12,38)"/><text x="26.8440%" y="223.50"></text></g><g><title>check_mod_privacy (1,339,375 samples, 0.72%)</title><rect x="26.5954%" y="197" width="0.7238%" height="15" fill="rgb(227,1,9)"/><text x="26.8454%" y="207.50"></text></g><g><title>misc_checking_3 (9,143,351 samples, 4.94%)</title><rect x="22.3855%" y="229" width="4.9414%" height="15" fill="rgb(248,47,43)"/><text x="22.6355%" y="239.50">misc_c..</text></g><g><title>impl_parent (1,009,670 samples, 0.55%)</title><rect x="28.1576%" y="165" width="0.5457%" height="15" fill="rgb(221,10,30)"/><text x="28.4076%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (669,965 samples, 0.36%)</title><rect x="28.3412%" y="149" width="0.3621%" height="15" fill="rgb(210,229,1)"/><text x="28.5912%" y="159.50"></text></g><g><title>impl_trait_ref (3,343,941 samples, 1.81%)</title><rect x="28.7033%" y="165" width="1.8072%" height="15" fill="rgb(222,148,37)"/><text x="28.9533%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,985,935 samples, 1.61%)</title><rect x="28.8967%" y="149" width="1.6137%" height="15" fill="rgb(234,67,33)"/><text x="29.1467%" y="159.50"></text></g><g><title>coherent_trait (6,172,487 samples, 3.34%)</title><rect x="27.3800%" y="197" width="3.3358%" height="15" fill="rgb(247,98,35)"/><text x="27.6300%" y="207.50">coh..</text></g><g><title>specialization_graph_of (6,160,027 samples, 3.33%)</title><rect x="27.3867%" y="181" width="3.3291%" height="15" fill="rgb(247,138,52)"/><text x="27.6367%" y="191.50">spe..</text></g><g><title>trait_impls_of (379,945 samples, 0.21%)</title><rect x="30.5104%" y="165" width="0.2053%" height="15" fill="rgb(213,79,30)"/><text x="30.7604%" y="175.50"></text></g><g><title>coherence_checking (6,238,599 samples, 3.37%)</title><rect x="27.3687%" y="213" width="3.3715%" height="15" fill="rgb(246,177,23)"/><text x="27.6187%" y="223.50">coh..</text></g><g><title>associated_item (327,645 samples, 0.18%)</title><rect x="35.2291%" y="149" width="0.1771%" height="15" fill="rgb(230,62,27)"/><text x="35.4791%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (264,294 samples, 0.14%)</title><rect x="35.2633%" y="133" width="0.1428%" height="15" fill="rgb(216,154,8)"/><text x="35.5133%" y="143.50"></text></g><g><title>associated_items (474,917 samples, 0.26%)</title><rect x="35.1639%" y="165" width="0.2567%" height="15" fill="rgb(244,35,45)"/><text x="35.4139%" y="175.50"></text></g><g><title>dropck_outlives (197,392 samples, 0.11%)</title><rect x="35.4429%" y="165" width="0.1067%" height="15" fill="rgb(251,115,12)"/><text x="35.6929%" y="175.50"></text></g><g><title>evaluate_obligation (982,889 samples, 0.53%)</title><rect x="35.5496%" y="165" width="0.5312%" height="15" fill="rgb(240,54,50)"/><text x="35.7996%" y="175.50"></text></g><g><title>trait_impls_of (402,716 samples, 0.22%)</title><rect x="35.8631%" y="149" width="0.2176%" height="15" fill="rgb(233,84,52)"/><text x="36.1131%" y="159.50"></text></g><g><title>item_attrs (377,915 samples, 0.20%)</title><rect x="36.2059%" y="165" width="0.2042%" height="15" fill="rgb(207,117,47)"/><text x="36.4559%" y="175.50"></text></g><g><title>evaluate_obligation (245,881 samples, 0.13%)</title><rect x="36.5964%" y="149" width="0.1329%" height="15" fill="rgb(249,43,39)"/><text x="36.8464%" y="159.50"></text></g><g><title>method_autoderef_steps (552,577 samples, 0.30%)</title><rect x="36.4385%" y="165" width="0.2986%" height="15" fill="rgb(209,38,44)"/><text x="36.6885%" y="175.50"></text></g><g><title>predicates_of (205,752 samples, 0.11%)</title><rect x="36.8028%" y="165" width="0.1112%" height="15" fill="rgb(236,212,23)"/><text x="37.0528%" y="175.50"></text></g><g><title>associated_item (442,106 samples, 0.24%)</title><rect x="51.3529%" y="133" width="0.2389%" height="15" fill="rgb(242,79,21)"/><text x="51.6029%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (352,725 samples, 0.19%)</title><rect x="51.4012%" y="117" width="0.1906%" height="15" fill="rgb(211,96,35)"/><text x="51.6512%" y="127.50"></text></g><g><title>associated_items (626,016 samples, 0.34%)</title><rect x="51.2733%" y="149" width="0.3383%" height="15" fill="rgb(253,215,40)"/><text x="51.5233%" y="159.50"></text></g><g><title>dropck_outlives (750,819 samples, 0.41%)</title><rect x="51.6567%" y="149" width="0.4058%" height="15" fill="rgb(211,81,21)"/><text x="51.9067%" y="159.50"></text></g><g><title>adt_def (460,386 samples, 0.25%)</title><rect x="55.7368%" y="101" width="0.2488%" height="15" fill="rgb(208,190,38)"/><text x="55.9868%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (459,686 samples, 0.25%)</title><rect x="55.7372%" y="85" width="0.2484%" height="15" fill="rgb(235,213,38)"/><text x="55.9872%" y="95.50"></text></g><g><title>item_attrs (447,516 samples, 0.24%)</title><rect x="55.7438%" y="69" width="0.2419%" height="15" fill="rgb(237,122,38)"/><text x="55.9938%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (446,636 samples, 0.24%)</title><rect x="55.7442%" y="53" width="0.2414%" height="15" fill="rgb(244,218,35)"/><text x="55.9942%" y="63.50"></text></g><g><title>adt_sized_constraint (473,276 samples, 0.26%)</title><rect x="55.7347%" y="117" width="0.2558%" height="15" fill="rgb(240,68,47)"/><text x="55.9847%" y="127.50"></text></g><g><title>adt_sized_constraint (624,698 samples, 0.34%)</title><rect x="55.6574%" y="133" width="0.3376%" height="15" fill="rgb(210,16,53)"/><text x="55.9074%" y="143.50"></text></g><g><title>generics_of (982,199 samples, 0.53%)</title><rect x="55.9950%" y="133" width="0.5308%" height="15" fill="rgb(235,124,12)"/><text x="56.2450%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (807,326 samples, 0.44%)</title><rect x="56.0895%" y="117" width="0.4363%" height="15" fill="rgb(224,169,11)"/><text x="56.3395%" y="127.50"></text></g><g><title>impl_trait_ref (1,071,544 samples, 0.58%)</title><rect x="56.5585%" y="133" width="0.5791%" height="15" fill="rgb(250,166,2)"/><text x="56.8085%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (895,592 samples, 0.48%)</title><rect x="56.6536%" y="117" width="0.4840%" height="15" fill="rgb(242,216,29)"/><text x="56.9036%" y="127.50"></text></g><g><title>predicates_of (274,461 samples, 0.15%)</title><rect x="57.1504%" y="133" width="0.1483%" height="15" fill="rgb(230,116,27)"/><text x="57.4004%" y="143.50"></text></g><g><title>specializes (494,673 samples, 0.27%)</title><rect x="57.2987%" y="133" width="0.2673%" height="15" fill="rgb(228,99,48)"/><text x="57.5487%" y="143.50"></text></g><g><title>param_env (294,450 samples, 0.16%)</title><rect x="57.4069%" y="117" width="0.1591%" height="15" fill="rgb(253,11,6)"/><text x="57.6569%" y="127.50"></text></g><g><title>trait_impls_of (582,611 samples, 0.31%)</title><rect x="57.5754%" y="133" width="0.3149%" height="15" fill="rgb(247,143,39)"/><text x="57.8254%" y="143.50"></text></g><g><title>implementations_of_trait (244,973 samples, 0.13%)</title><rect x="57.7579%" y="117" width="0.1324%" height="15" fill="rgb(236,97,10)"/><text x="58.0079%" y="127.50"></text></g><g><title>evaluate_obligation (10,791,240 samples, 5.83%)</title><rect x="52.0664%" y="149" width="5.8319%" height="15" fill="rgb(233,208,19)"/><text x="52.3164%" y="159.50">evaluat..</text></g><g><title>fn_sig (201,943 samples, 0.11%)</title><rect x="57.9133%" y="149" width="0.1091%" height="15" fill="rgb(216,164,2)"/><text x="58.1633%" y="159.50"></text></g><g><title>generics_of (864,470 samples, 0.47%)</title><rect x="58.0224%" y="149" width="0.4672%" height="15" fill="rgb(220,129,5)"/><text x="58.2724%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (658,746 samples, 0.36%)</title><rect x="58.1336%" y="133" width="0.3560%" height="15" fill="rgb(242,17,10)"/><text x="58.3836%" y="143.50"></text></g><g><title>impl_trait_ref (607,445 samples, 0.33%)</title><rect x="58.5410%" y="149" width="0.3283%" height="15" fill="rgb(242,107,0)"/><text x="58.7910%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (448,363 samples, 0.24%)</title><rect x="58.6270%" y="133" width="0.2423%" height="15" fill="rgb(251,28,31)"/><text x="58.8770%" y="143.50"></text></g><g><title>is_copy_raw (429,697 samples, 0.23%)</title><rect x="58.9210%" y="149" width="0.2322%" height="15" fill="rgb(233,223,10)"/><text x="59.1710%" y="159.50"></text></g><g><title>evaluate_obligation (334,426 samples, 0.18%)</title><rect x="58.9725%" y="133" width="0.1807%" height="15" fill="rgb(215,21,27)"/><text x="59.2225%" y="143.50"></text></g><g><title>evaluate_obligation (873,490 samples, 0.47%)</title><rect x="59.6674%" y="133" width="0.4721%" height="15" fill="rgb(232,23,21)"/><text x="59.9174%" y="143.50"></text></g><g><title>method_autoderef_steps (1,598,038 samples, 0.86%)</title><rect x="59.2855%" y="149" width="0.8636%" height="15" fill="rgb(244,5,23)"/><text x="59.5355%" y="159.50"></text></g><g><title>predicates_of (532,434 samples, 0.29%)</title><rect x="60.1679%" y="149" width="0.2877%" height="15" fill="rgb(226,81,46)"/><text x="60.4179%" y="159.50"></text></g><g><title>predicates_defined_on (360,123 samples, 0.19%)</title><rect x="60.2610%" y="133" width="0.1946%" height="15" fill="rgb(247,70,30)"/><text x="60.5110%" y="143.50"></text></g><g><title>typeck (43,996,095 samples, 23.78%)</title><rect x="36.9416%" y="165" width="23.7770%" height="15" fill="rgb(212,68,19)"/><text x="37.1916%" y="175.50">typeck</text></g><g><title>item_bodies_checking (55,481,873 samples, 29.98%)</title><rect x="30.7531%" y="213" width="29.9842%" height="15" fill="rgb(240,187,13)"/><text x="31.0031%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (55,477,433 samples, 29.98%)</title><rect x="30.7555%" y="197" width="29.9818%" height="15" fill="rgb(223,113,26)"/><text x="31.0055%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (55,424,241 samples, 29.95%)</title><rect x="30.7843%" y="181" width="29.9531%" height="15" fill="rgb(206,192,2)"/><text x="31.0343%" y="191.50">typeck</text></g><g><title>layout_of (203,022 samples, 0.11%)</title><rect x="61.3722%" y="69" width="0.1097%" height="15" fill="rgb(241,108,4)"/><text x="61.6222%" y="79.50"></text></g><g><title>layout_of (258,452 samples, 0.14%)</title><rect x="61.3452%" y="101" width="0.1397%" height="15" fill="rgb(247,173,49)"/><text x="61.5952%" y="111.50"></text></g><g><title>layout_of (251,082 samples, 0.14%)</title><rect x="61.3492%" y="85" width="0.1357%" height="15" fill="rgb(224,114,35)"/><text x="61.5992%" y="95.50"></text></g><g><title>layout_of (294,843 samples, 0.16%)</title><rect x="61.3280%" y="117" width="0.1593%" height="15" fill="rgb(245,159,27)"/><text x="61.5780%" y="127.50"></text></g><g><title>layout_of (316,094 samples, 0.17%)</title><rect x="61.3176%" y="133" width="0.1708%" height="15" fill="rgb(245,172,44)"/><text x="61.5676%" y="143.50"></text></g><g><title>layout_of (344,684 samples, 0.19%)</title><rect x="61.3079%" y="149" width="0.1863%" height="15" fill="rgb(236,23,11)"/><text x="61.5579%" y="159.50"></text></g><g><title>layout_of (361,254 samples, 0.20%)</title><rect x="61.3040%" y="165" width="0.1952%" height="15" fill="rgb(205,117,38)"/><text x="61.5540%" y="175.50"></text></g><g><title>layout_of (380,154 samples, 0.21%)</title><rect x="61.2956%" y="181" width="0.2054%" height="15" fill="rgb(237,72,25)"/><text x="61.5456%" y="191.50"></text></g><g><title>mir_borrowck (1,166,673 samples, 0.63%)</title><rect x="64.2461%" y="133" width="0.6305%" height="15" fill="rgb(244,70,9)"/><text x="64.4961%" y="143.50"></text></g><g><title>mir_const (246,004 samples, 0.13%)</title><rect x="65.0034%" y="117" width="0.1329%" height="15" fill="rgb(217,125,39)"/><text x="65.2534%" y="127.50"></text></g><g><title>mir_promoted (484,545 samples, 0.26%)</title><rect x="64.8766%" y="133" width="0.2619%" height="15" fill="rgb(235,36,10)"/><text x="65.1266%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (296,004 samples, 0.16%)</title><rect x="65.1385%" y="133" width="0.1600%" height="15" fill="rgb(251,123,47)"/><text x="65.3885%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (711,868 samples, 0.38%)</title><rect x="65.2984%" y="133" width="0.3847%" height="15" fill="rgb(221,13,13)"/><text x="65.5484%" y="143.50"></text></g><g><title>normalize_projection_ty (473,507 samples, 0.26%)</title><rect x="65.4273%" y="117" width="0.2559%" height="15" fill="rgb(238,131,9)"/><text x="65.6773%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,515,606 samples, 0.82%)</title><rect x="65.6862%" y="133" width="0.8191%" height="15" fill="rgb(211,50,8)"/><text x="65.9362%" y="143.50"></text></g><g><title>mir_borrowck (8,002,928 samples, 4.33%)</title><rect x="62.1811%" y="149" width="4.3250%" height="15" fill="rgb(245,182,24)"/><text x="62.4311%" y="159.50">mir_b..</text></g><g><title>associated_items (261,741 samples, 0.14%)</title><rect x="72.2751%" y="69" width="0.1415%" height="15" fill="rgb(242,14,37)"/><text x="72.5251%" y="79.50"></text></g><g><title>adt_dtorck_constraint (249,752 samples, 0.13%)</title><rect x="72.7684%" y="37" width="0.1350%" height="15" fill="rgb(246,228,12)"/><text x="73.0184%" y="47.50"></text></g><g><title>dropck_outlives (945,810 samples, 0.51%)</title><rect x="72.4369%" y="69" width="0.5111%" height="15" fill="rgb(213,55,15)"/><text x="72.6869%" y="79.50"></text></g><g><title>adt_dtorck_constraint (683,806 samples, 0.37%)</title><rect x="72.5785%" y="53" width="0.3696%" height="15" fill="rgb(209,9,3)"/><text x="72.8285%" y="63.50"></text></g><g><title>evaluate_obligation (1,190,395 samples, 0.64%)</title><rect x="72.9520%" y="69" width="0.6433%" height="15" fill="rgb(230,59,30)"/><text x="73.2020%" y="79.50"></text></g><g><title>is_copy_raw (500,394 samples, 0.27%)</title><rect x="73.7862%" y="69" width="0.2704%" height="15" fill="rgb(209,121,21)"/><text x="74.0362%" y="79.50"></text></g><g><title>evaluate_obligation (352,783 samples, 0.19%)</title><rect x="73.8660%" y="53" width="0.1907%" height="15" fill="rgb(220,109,13)"/><text x="74.1160%" y="63.50"></text></g><g><title>predicates_of (244,311 samples, 0.13%)</title><rect x="74.2681%" y="69" width="0.1320%" height="15" fill="rgb(232,18,1)"/><text x="74.5181%" y="79.50"></text></g><g><title>mir_built (14,553,181 samples, 7.87%)</title><rect x="66.6449%" y="101" width="7.8650%" height="15" fill="rgb(215,41,42)"/><text x="66.8949%" y="111.50">mir_built</text></g><g><title>typeck (14,054,045 samples, 7.60%)</title><rect x="66.9147%" y="85" width="7.5953%" height="15" fill="rgb(224,123,36)"/><text x="67.1647%" y="95.50">typeck</text></g><g><title>needs_drop_raw (226,492 samples, 0.12%)</title><rect x="74.9861%" y="69" width="0.1224%" height="15" fill="rgb(240,125,3)"/><text x="75.2361%" y="79.50"></text></g><g><title>thir_body (277,533 samples, 0.15%)</title><rect x="75.1149%" y="69" width="0.1500%" height="15" fill="rgb(205,98,50)"/><text x="75.3649%" y="79.50"></text></g><g><title>mir_built (1,210,153 samples, 0.65%)</title><rect x="74.6161%" y="85" width="0.6540%" height="15" fill="rgb(205,185,37)"/><text x="74.8661%" y="95.50"></text></g><g><title>mir_built (267,402 samples, 0.14%)</title><rect x="75.3105%" y="69" width="0.1445%" height="15" fill="rgb(238,207,15)"/><text x="75.5605%" y="79.50"></text></g><g><title>mir_const (16,464,971 samples, 8.90%)</title><rect x="66.5573%" y="133" width="8.8982%" height="15" fill="rgb(213,199,42)"/><text x="66.8073%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,336,710 samples, 8.83%)</title><rect x="66.6266%" y="117" width="8.8289%" height="15" fill="rgb(235,201,11)"/><text x="66.8766%" y="127.50">unsafety_che..</text></g><g><title>unsafety_check_result (1,749,649 samples, 0.95%)</title><rect x="74.5100%" y="101" width="0.9456%" height="15" fill="rgb(207,46,11)"/><text x="74.7600%" y="111.50"></text></g><g><title>unsafety_check_result (341,965 samples, 0.18%)</title><rect x="75.2707%" y="85" width="0.1848%" height="15" fill="rgb(241,35,35)"/><text x="75.5207%" y="95.50"></text></g><g><title>mir_promoted (16,568,102 samples, 8.95%)</title><rect x="66.5062%" y="149" width="8.9540%" height="15" fill="rgb(243,32,47)"/><text x="66.7562%" y="159.50">mir_promoted</text></g><g><title>type_of (26,092,597 samples, 14.10%)</title><rect x="61.5146%" y="181" width="14.1013%" height="15" fill="rgb(247,202,23)"/><text x="61.7646%" y="191.50">type_of</text></g><g><title>mir_borrowck (26,077,357 samples, 14.09%)</title><rect x="61.5228%" y="165" width="14.0931%" height="15" fill="rgb(219,102,11)"/><text x="61.7728%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (227,312 samples, 0.12%)</title><rect x="75.4930%" y="149" width="0.1228%" height="15" fill="rgb(243,110,44)"/><text x="75.7430%" y="159.50"></text></g><g><title>adt_dtorck_constraint (282,754 samples, 0.15%)</title><rect x="76.1162%" y="149" width="0.1528%" height="15" fill="rgb(222,74,54)"/><text x="76.3662%" y="159.50"></text></g><g><title>dropck_outlives (345,534 samples, 0.19%)</title><rect x="76.0900%" y="165" width="0.1867%" height="15" fill="rgb(216,99,12)"/><text x="76.3400%" y="175.50"></text></g><g><title>is_copy_raw (216,002 samples, 0.12%)</title><rect x="76.3175%" y="165" width="0.1167%" height="15" fill="rgb(226,22,26)"/><text x="76.5675%" y="175.50"></text></g><g><title>evaluate_obligation (204,722 samples, 0.11%)</title><rect x="76.3236%" y="149" width="0.1106%" height="15" fill="rgb(217,163,10)"/><text x="76.5736%" y="159.50"></text></g><g><title>lint_levels (202,833 samples, 0.11%)</title><rect x="76.4662%" y="165" width="0.1096%" height="15" fill="rgb(213,25,53)"/><text x="76.7162%" y="175.50"></text></g><g><title>item_types_checking (29,413,075 samples, 15.90%)</title><rect x="60.7374%" y="213" width="15.8958%" height="15" fill="rgb(252,105,26)"/><text x="60.9874%" y="223.50">item_types_checking</text></g><g><title>check_mod_item_types (29,409,065 samples, 15.89%)</title><rect x="60.7396%" y="197" width="15.8936%" height="15" fill="rgb(220,39,43)"/><text x="60.9896%" y="207.50">check_mod_item_types</text></g><g><title>typeck (1,882,390 samples, 1.02%)</title><rect x="75.6159%" y="181" width="1.0173%" height="15" fill="rgb(229,68,48)"/><text x="75.8659%" y="191.50"></text></g><g><title>fn_sig (302,293 samples, 0.16%)</title><rect x="76.7621%" y="181" width="0.1634%" height="15" fill="rgb(252,8,32)"/><text x="77.0121%" y="191.50"></text></g><g><title>explicit_predicates_of (466,104 samples, 0.25%)</title><rect x="77.0899%" y="149" width="0.2519%" height="15" fill="rgb(223,20,43)"/><text x="77.3399%" y="159.50"></text></g><g><title>predicates_of (1,140,122 samples, 0.62%)</title><rect x="77.0360%" y="181" width="0.6162%" height="15" fill="rgb(229,81,49)"/><text x="77.2860%" y="191.50"></text></g><g><title>predicates_defined_on (1,100,151 samples, 0.59%)</title><rect x="77.0576%" y="165" width="0.5946%" height="15" fill="rgb(236,28,36)"/><text x="77.3076%" y="175.50"></text></g><g><title>inferred_outlives_of (574,236 samples, 0.31%)</title><rect x="77.3418%" y="149" width="0.3103%" height="15" fill="rgb(249,185,26)"/><text x="77.5918%" y="159.50"></text></g><g><title>inferred_outlives_crate (553,106 samples, 0.30%)</title><rect x="77.3532%" y="133" width="0.2989%" height="15" fill="rgb(249,174,33)"/><text x="77.6032%" y="143.50"></text></g><g><title>type_of (385,723 samples, 0.21%)</title><rect x="77.4437%" y="117" width="0.2085%" height="15" fill="rgb(233,201,37)"/><text x="77.6937%" y="127.50"></text></g><g><title>type_collecting (2,059,663 samples, 1.11%)</title><rect x="76.6351%" y="213" width="1.1131%" height="15" fill="rgb(221,78,26)"/><text x="76.8851%" y="223.50"></text></g><g><title>collect_mod_item_types (2,052,113 samples, 1.11%)</title><rect x="76.6392%" y="197" width="1.1090%" height="15" fill="rgb(250,127,30)"/><text x="76.8892%" y="207.50"></text></g><g><title>evaluate_obligation (638,525 samples, 0.35%)</title><rect x="78.5353%" y="181" width="0.3451%" height="15" fill="rgb(230,49,44)"/><text x="78.7853%" y="191.50"></text></g><g><title>implied_outlives_bounds (279,585 samples, 0.15%)</title><rect x="78.8869%" y="181" width="0.1511%" height="15" fill="rgb(229,67,23)"/><text x="79.1369%" y="191.50"></text></g><g><title>region_scope_tree (436,534 samples, 0.24%)</title><rect x="79.1581%" y="181" width="0.2359%" height="15" fill="rgb(249,83,47)"/><text x="79.4081%" y="191.50"></text></g><g><title>check_impl_item_well_formed (2,926,471 samples, 1.58%)</title><rect x="77.8341%" y="197" width="1.5816%" height="15" fill="rgb(215,43,3)"/><text x="78.0841%" y="207.50"></text></g><g><title>adt_sized_constraint (363,526 samples, 0.20%)</title><rect x="80.2253%" y="165" width="0.1965%" height="15" fill="rgb(238,154,13)"/><text x="80.4753%" y="175.50"></text></g><g><title>trait_impls_of (265,993 samples, 0.14%)</title><rect x="80.4756%" y="165" width="0.1438%" height="15" fill="rgb(219,56,2)"/><text x="80.7256%" y="175.50"></text></g><g><title>evaluate_obligation (1,233,396 samples, 0.67%)</title><rect x="79.9618%" y="181" width="0.6666%" height="15" fill="rgb(233,0,4)"/><text x="80.2118%" y="191.50"></text></g><g><title>object_safety_violations (192,172 samples, 0.10%)</title><rect x="80.6898%" y="181" width="0.1039%" height="15" fill="rgb(235,30,7)"/><text x="80.9398%" y="191.50"></text></g><g><title>param_env (319,452 samples, 0.17%)</title><rect x="80.7936%" y="181" width="0.1726%" height="15" fill="rgb(250,79,13)"/><text x="81.0436%" y="191.50"></text></g><g><title>analysis (149,580,523 samples, 80.84%)</title><rect x="0.2904%" y="245" width="80.8383%" height="15" fill="rgb(211,146,34)"/><text x="0.5404%" y="255.50">analysis</text></g><g><title>type_check_crate (99,553,130 samples, 53.80%)</title><rect x="27.3269%" y="229" width="53.8018%" height="15" fill="rgb(228,22,38)"/><text x="27.5769%" y="239.50">type_check_crate</text></g><g><title>wf_checking (6,248,999 samples, 3.38%)</title><rect x="77.7515%" y="213" width="3.3772%" height="15" fill="rgb(235,168,5)"/><text x="78.0015%" y="223.50">wf_..</text></g><g><title>check_item_well_formed (3,169,776 samples, 1.71%)</title><rect x="79.4156%" y="197" width="1.7131%" height="15" fill="rgb(221,155,16)"/><text x="79.6656%" y="207.50"></text></g><g><title>codegen_crate (427,535 samples, 0.23%)</title><rect x="81.1326%" y="245" width="0.2311%" height="15" fill="rgb(215,215,53)"/><text x="81.3826%" y="255.50"></text></g><g><title>metadata_load_macro (186,571 samples, 0.10%)</title><rect x="85.8043%" y="197" width="0.1008%" height="15" fill="rgb(223,4,10)"/><text x="86.0543%" y="207.50"></text></g><g><title>macro_expand_crate (9,749,878 samples, 5.27%)</title><rect x="81.5751%" y="229" width="5.2692%" height="15" fill="rgb(234,103,6)"/><text x="81.8251%" y="239.50">macro_..</text></g><g><title>expand_crate (9,733,318 samples, 5.26%)</title><rect x="81.5841%" y="213" width="5.2602%" height="15" fill="rgb(227,97,0)"/><text x="81.8341%" y="223.50">expand..</text></g><g><title>metadata_register_crate (1,737,710 samples, 0.94%)</title><rect x="85.9052%" y="197" width="0.9391%" height="15" fill="rgb(234,150,53)"/><text x="86.1552%" y="207.50"></text></g><g><title>metadata_register_crate (587,914 samples, 0.32%)</title><rect x="86.5265%" y="181" width="0.3177%" height="15" fill="rgb(228,201,54)"/><text x="86.7765%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (234,723 samples, 0.13%)</title><rect x="86.8460%" y="229" width="0.1269%" height="15" fill="rgb(222,22,37)"/><text x="87.0960%" y="239.50"></text></g><g><title>late_resolve_crate (2,495,977 samples, 1.35%)</title><rect x="87.0866%" y="213" width="1.3489%" height="15" fill="rgb(237,53,32)"/><text x="87.3366%" y="223.50"></text></g><g><title>configure_and_expand (13,201,906 samples, 7.13%)</title><rect x="81.3637%" y="245" width="7.1347%" height="15" fill="rgb(233,25,53)"/><text x="81.6137%" y="255.50">configure_..</text></g><g><title>resolve_crate (2,822,911 samples, 1.53%)</title><rect x="86.9728%" y="229" width="1.5256%" height="15" fill="rgb(210,40,34)"/><text x="87.2228%" y="239.50"></text></g><g><title>drop_ast (200,622 samples, 0.11%)</title><rect x="88.4984%" y="245" width="0.1084%" height="15" fill="rgb(241,220,44)"/><text x="88.7484%" y="255.50"></text></g><g><title>early_lint_checks (370,794 samples, 0.20%)</title><rect x="88.6194%" y="245" width="0.2004%" height="15" fill="rgb(235,28,35)"/><text x="88.8694%" y="255.50"></text></g><g><title>free_global_ctxt (4,668,912 samples, 2.52%)</title><rect x="88.8198%" y="245" width="2.5232%" height="15" fill="rgb(210,56,17)"/><text x="89.0698%" y="255.50">fr..</text></g><g><title>is_copy_raw (557,225 samples, 0.30%)</title><rect x="95.0962%" y="181" width="0.3011%" height="15" fill="rgb(224,130,29)"/><text x="95.3462%" y="191.50"></text></g><g><title>evaluate_obligation (429,135 samples, 0.23%)</title><rect x="95.1654%" y="165" width="0.2319%" height="15" fill="rgb(235,212,8)"/><text x="95.4154%" y="175.50"></text></g><g><title>needs_drop_raw (676,636 samples, 0.37%)</title><rect x="95.0342%" y="197" width="0.3657%" height="15" fill="rgb(223,33,50)"/><text x="95.2842%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,289,806 samples, 1.78%)</title><rect x="93.6558%" y="213" width="1.7779%" height="15" fill="rgb(219,149,13)"/><text x="93.9058%" y="223.50">m..</text></g><g><title>optimized_mir (5,975,118 samples, 3.23%)</title><rect x="92.2069%" y="229" width="3.2292%" height="15" fill="rgb(250,156,29)"/><text x="92.4569%" y="239.50">opt..</text></g><g><title>generate_crate_metadata (7,690,895 samples, 4.16%)</title><rect x="91.3430%" y="245" width="4.1564%" height="15" fill="rgb(216,193,19)"/><text x="91.5930%" y="255.50">gener..</text></g><g><title>hir_lowering (2,925,122 samples, 1.58%)</title><rect x="95.4994%" y="245" width="1.5808%" height="15" fill="rgb(216,135,14)"/><text x="95.7494%" y="255.50"></text></g><g><title>parse_crate (3,615,150 samples, 1.95%)</title><rect x="97.1154%" y="245" width="1.9537%" height="15" fill="rgb(241,47,5)"/><text x="97.3654%" y="255.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,076,402 samples, 0.58%)</title><rect x="99.1690%" y="245" width="0.5817%" height="15" fill="rgb(233,42,35)"/><text x="99.4190%" y="255.50"></text></g><g><title>all (185,036,735 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(231,13,6)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (185,036,735 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(207,181,40)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (358,054 samples, 0.19%)</title><rect x="99.8065%" y="245" width="0.1935%" height="15" fill="rgb(254,173,49)"/><text x="100.0565%" y="255.50"></text></g></svg></svg>