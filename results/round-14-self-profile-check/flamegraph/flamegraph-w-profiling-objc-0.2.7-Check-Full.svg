<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (262,592 samples, 0.11%)</title><rect x="10.1213%" y="149" width="0.1055%" height="15" fill="rgb(227,0,7)"/><text x="10.3713%" y="159.50"></text></g><g><title>is_sized_raw (311,524 samples, 0.13%)</title><rect x="10.3093%" y="149" width="0.1252%" height="15" fill="rgb(217,0,24)"/><text x="10.5593%" y="159.50"></text></g><g><title>param_env (412,511 samples, 0.17%)</title><rect x="11.8664%" y="117" width="0.1657%" height="15" fill="rgb(221,193,54)"/><text x="12.1164%" y="127.50"></text></g><g><title>item_attrs (454,727 samples, 0.18%)</title><rect x="12.4760%" y="85" width="0.1827%" height="15" fill="rgb(248,212,6)"/><text x="12.7260%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (441,777 samples, 0.18%)</title><rect x="12.4812%" y="69" width="0.1775%" height="15" fill="rgb(208,68,35)"/><text x="12.7312%" y="79.50"></text></g><g><title>codegen_fn_attrs (629,999 samples, 0.25%)</title><rect x="12.4149%" y="101" width="0.2531%" height="15" fill="rgb(232,128,0)"/><text x="12.6649%" y="111.50"></text></g><g><title>is_copy_raw (1,105,105 samples, 0.44%)</title><rect x="15.0283%" y="85" width="0.4440%" height="15" fill="rgb(207,160,47)"/><text x="15.2783%" y="95.50"></text></g><g><title>evaluate_obligation (840,992 samples, 0.34%)</title><rect x="15.1344%" y="69" width="0.3379%" height="15" fill="rgb(228,23,34)"/><text x="15.3844%" y="79.50"></text></g><g><title>adt_drop_tys (327,592 samples, 0.13%)</title><rect x="15.5759%" y="69" width="0.1316%" height="15" fill="rgb(218,30,26)"/><text x="15.8259%" y="79.50"></text></g><g><title>needs_drop_raw (2,158,774 samples, 0.87%)</title><rect x="15.4723%" y="85" width="0.8674%" height="15" fill="rgb(220,122,19)"/><text x="15.7223%" y="95.50"></text></g><g><title>is_copy_raw (1,573,337 samples, 0.63%)</title><rect x="15.7075%" y="69" width="0.6321%" height="15" fill="rgb(250,228,42)"/><text x="15.9575%" y="79.50"></text></g><g><title>evaluate_obligation (1,179,104 samples, 0.47%)</title><rect x="15.8659%" y="53" width="0.4737%" height="15" fill="rgb(240,193,28)"/><text x="16.1159%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (433,586 samples, 0.17%)</title><rect x="16.5505%" y="69" width="0.1742%" height="15" fill="rgb(216,20,37)"/><text x="16.8005%" y="79.50"></text></g><g><title>specialization_graph_of (933,090 samples, 0.37%)</title><rect x="16.7617%" y="69" width="0.3749%" height="15" fill="rgb(206,188,39)"/><text x="17.0117%" y="79.50"></text></g><g><title>impl_trait_ref (488,677 samples, 0.20%)</title><rect x="16.9402%" y="53" width="0.1963%" height="15" fill="rgb(217,207,13)"/><text x="17.1902%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (431,386 samples, 0.17%)</title><rect x="16.9633%" y="37" width="0.1733%" height="15" fill="rgb(231,73,38)"/><text x="17.2133%" y="47.50"></text></g><g><title>resolve_instance (2,120,956 samples, 0.85%)</title><rect x="16.3397%" y="85" width="0.8522%" height="15" fill="rgb(225,20,46)"/><text x="16.5897%" y="95.50"></text></g><g><title>thir_body (2,169,686 samples, 0.87%)</title><rect x="17.2174%" y="85" width="0.8718%" height="15" fill="rgb(210,31,41)"/><text x="17.4674%" y="95.50"></text></g><g><title>mir_const (17,334,926 samples, 6.96%)</title><rect x="11.1473%" y="133" width="6.9649%" height="15" fill="rgb(221,200,47)"/><text x="11.3973%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (15,132,471 samples, 6.08%)</title><rect x="12.0322%" y="117" width="6.0800%" height="15" fill="rgb(226,26,5)"/><text x="12.2822%" y="127.50">unsafety..</text></g><g><title>mir_built (13,549,917 samples, 5.44%)</title><rect x="12.6680%" y="101" width="5.4442%" height="15" fill="rgb(249,33,26)"/><text x="12.9180%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (19,697,987 samples, 7.91%)</title><rect x="10.4345%" y="149" width="7.9144%" height="15" fill="rgb(235,183,28)"/><text x="10.6845%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (589,109 samples, 0.24%)</title><rect x="18.1122%" y="133" width="0.2367%" height="15" fill="rgb(221,5,38)"/><text x="18.3622%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (954,582 samples, 0.38%)</title><rect x="18.3494%" y="149" width="0.3835%" height="15" fill="rgb(247,18,42)"/><text x="18.5994%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (613,878 samples, 0.25%)</title><rect x="18.7329%" y="149" width="0.2466%" height="15" fill="rgb(241,131,45)"/><text x="18.9829%" y="159.50"></text></g><g><title>normalize_projection_ty (408,774 samples, 0.16%)</title><rect x="18.8153%" y="133" width="0.1642%" height="15" fill="rgb(249,31,29)"/><text x="19.0653%" y="143.50"></text></g><g><title>type_op_normalize_ty (655,608 samples, 0.26%)</title><rect x="19.0364%" y="149" width="0.2634%" height="15" fill="rgb(225,111,53)"/><text x="19.2864%" y="159.50"></text></g><g><title>normalize_projection_ty (534,397 samples, 0.21%)</title><rect x="19.0851%" y="133" width="0.2147%" height="15" fill="rgb(238,160,17)"/><text x="19.3351%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,771,026 samples, 1.92%)</title><rect x="19.2998%" y="149" width="1.9169%" height="15" fill="rgb(214,148,48)"/><text x="19.5498%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (51,275,284 samples, 20.60%)</title><rect x="0.6224%" y="181" width="20.6017%" height="15" fill="rgb(232,36,49)"/><text x="0.8724%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (50,946,211 samples, 20.47%)</title><rect x="0.7546%" y="165" width="20.4695%" height="15" fill="rgb(209,103,24)"/><text x="1.0046%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (279,123 samples, 0.11%)</title><rect x="21.2242%" y="181" width="0.1121%" height="15" fill="rgb(229,88,8)"/><text x="21.4742%" y="191.50"></text></g><g><title>hir_module_items (497,605 samples, 0.20%)</title><rect x="21.3363%" y="181" width="0.1999%" height="15" fill="rgb(213,181,19)"/><text x="21.5863%" y="191.50"></text></g><g><title>should_inherit_track_caller (343,473 samples, 0.14%)</title><rect x="21.8429%" y="133" width="0.1380%" height="15" fill="rgb(254,191,54)"/><text x="22.0929%" y="143.50"></text></g><g><title>codegen_fn_attrs (630,998 samples, 0.25%)</title><rect x="21.7349%" y="149" width="0.2535%" height="15" fill="rgb(241,83,37)"/><text x="21.9849%" y="159.50"></text></g><g><title>check_mod_attrs (1,084,071 samples, 0.44%)</title><rect x="21.5529%" y="165" width="0.4356%" height="15" fill="rgb(233,36,39)"/><text x="21.8029%" y="175.50"></text></g><g><title>check_mod_const_bodies (306,682 samples, 0.12%)</title><rect x="21.9885%" y="165" width="0.1232%" height="15" fill="rgb(226,3,54)"/><text x="22.2385%" y="175.50"></text></g><g><title>lookup_deprecation_entry (401,013 samples, 0.16%)</title><rect x="22.4836%" y="149" width="0.1611%" height="15" fill="rgb(245,192,40)"/><text x="22.7336%" y="159.50"></text></g><g><title>stability_index (298,933 samples, 0.12%)</title><rect x="22.5246%" y="133" width="0.1201%" height="15" fill="rgb(238,167,29)"/><text x="22.7746%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,249,214 samples, 0.50%)</title><rect x="22.1903%" y="165" width="0.5019%" height="15" fill="rgb(232,182,51)"/><text x="22.4403%" y="175.50"></text></g><g><title>misc_checking_1 (2,983,954 samples, 1.20%)</title><rect x="21.5365%" y="181" width="1.1989%" height="15" fill="rgb(231,60,39)"/><text x="21.7865%" y="191.50"></text></g><g><title>check_mod_intrinsics (313,464 samples, 0.13%)</title><rect x="22.7411%" y="149" width="0.1259%" height="15" fill="rgb(208,69,12)"/><text x="22.9911%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (1,245,564 samples, 0.50%)</title><rect x="22.7361%" y="165" width="0.5005%" height="15" fill="rgb(235,93,37)"/><text x="22.9861%" y="175.50"></text></g><g><title>check_mod_liveness (919,570 samples, 0.37%)</title><rect x="22.8671%" y="149" width="0.3695%" height="15" fill="rgb(213,116,39)"/><text x="23.1171%" y="159.50"></text></g><g><title>misc_checking_2 (2,153,765 samples, 0.87%)</title><rect x="22.7354%" y="181" width="0.8654%" height="15" fill="rgb(222,207,29)"/><text x="22.9854%" y="191.50"></text></g><g><title>match_checking (906,501 samples, 0.36%)</title><rect x="23.2365%" y="165" width="0.3642%" height="15" fill="rgb(206,96,30)"/><text x="23.4865%" y="175.50"></text></g><g><title>check_match (821,100 samples, 0.33%)</title><rect x="23.2708%" y="149" width="0.3299%" height="15" fill="rgb(218,138,4)"/><text x="23.5208%" y="159.50"></text></g><g><title>check_private_in_public (602,746 samples, 0.24%)</title><rect x="23.6052%" y="165" width="0.2422%" height="15" fill="rgb(250,191,14)"/><text x="23.8552%" y="175.50"></text></g><g><title>codegen_fn_attrs (434,176 samples, 0.17%)</title><rect x="24.1480%" y="149" width="0.1744%" height="15" fill="rgb(239,60,40)"/><text x="24.3980%" y="159.50"></text></g><g><title>should_inherit_track_caller (314,884 samples, 0.13%)</title><rect x="24.1960%" y="133" width="0.1265%" height="15" fill="rgb(206,27,48)"/><text x="24.4460%" y="143.50"></text></g><g><title>death_checking (1,258,425 samples, 0.51%)</title><rect x="23.8474%" y="165" width="0.5056%" height="15" fill="rgb(225,35,8)"/><text x="24.0974%" y="175.50"></text></g><g><title>eval_to_const_value_raw (269,074 samples, 0.11%)</title><rect x="25.7442%" y="133" width="0.1081%" height="15" fill="rgb(250,213,24)"/><text x="25.9942%" y="143.50"></text></g><g><title>eval_to_const_value_raw (264,194 samples, 0.11%)</title><rect x="25.7462%" y="117" width="0.1061%" height="15" fill="rgb(247,123,22)"/><text x="25.9962%" y="127.50"></text></g><g><title>eval_to_allocation_raw (255,694 samples, 0.10%)</title><rect x="25.7496%" y="101" width="0.1027%" height="15" fill="rgb(231,138,38)"/><text x="25.9996%" y="111.50"></text></g><g><title>param_env (903,080 samples, 0.36%)</title><rect x="25.8523%" y="133" width="0.3628%" height="15" fill="rgb(231,145,46)"/><text x="26.1023%" y="143.50"></text></g><g><title>predicates_of (447,212 samples, 0.18%)</title><rect x="26.0355%" y="117" width="0.1797%" height="15" fill="rgb(251,118,11)"/><text x="26.2855%" y="127.50"></text></g><g><title>predicates_defined_on (351,532 samples, 0.14%)</title><rect x="26.0739%" y="101" width="0.1412%" height="15" fill="rgb(217,147,25)"/><text x="26.3239%" y="111.50"></text></g><g><title>crate_lints (5,836,775 samples, 2.35%)</title><rect x="24.3543%" y="149" width="2.3451%" height="15" fill="rgb(247,81,37)"/><text x="24.6043%" y="159.50">c..</text></g><g><title>type_of (1,145,075 samples, 0.46%)</title><rect x="26.2394%" y="133" width="0.4601%" height="15" fill="rgb(209,12,38)"/><text x="26.4894%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (914,443 samples, 0.37%)</title><rect x="26.3321%" y="117" width="0.3674%" height="15" fill="rgb(227,1,9)"/><text x="26.5821%" y="127.50"></text></g><g><title>lint_checking (7,266,741 samples, 2.92%)</title><rect x="24.3530%" y="165" width="2.9197%" height="15" fill="rgb(248,47,43)"/><text x="24.6030%" y="175.50">li..</text></g><g><title>module_lints (1,426,596 samples, 0.57%)</title><rect x="26.6995%" y="149" width="0.5732%" height="15" fill="rgb(221,10,30)"/><text x="26.9495%" y="159.50"></text></g><g><title>lint_mod (1,412,476 samples, 0.57%)</title><rect x="26.7052%" y="133" width="0.5675%" height="15" fill="rgb(210,229,1)"/><text x="26.9552%" y="143.50"></text></g><g><title>privacy_access_levels (915,171 samples, 0.37%)</title><rect x="27.2727%" y="165" width="0.3677%" height="15" fill="rgb(222,148,37)"/><text x="27.5227%" y="175.50"></text></g><g><title>privacy_checking_modules (2,135,984 samples, 0.86%)</title><rect x="27.6404%" y="165" width="0.8582%" height="15" fill="rgb(234,67,33)"/><text x="27.8904%" y="175.50"></text></g><g><title>check_mod_privacy (2,127,554 samples, 0.85%)</title><rect x="27.6438%" y="149" width="0.8548%" height="15" fill="rgb(247,98,35)"/><text x="27.8938%" y="159.50"></text></g><g><title>misc_checking_3 (12,209,877 samples, 4.91%)</title><rect x="23.6007%" y="181" width="4.9058%" height="15" fill="rgb(247,138,52)"/><text x="23.8507%" y="191.50">misc_c..</text></g><g><title>adt_destructor (418,534 samples, 0.17%)</title><rect x="28.6061%" y="133" width="0.1682%" height="15" fill="rgb(213,79,30)"/><text x="28.8561%" y="143.50"></text></g><g><title>coherent_trait (416,084 samples, 0.17%)</title><rect x="28.6070%" y="117" width="0.1672%" height="15" fill="rgb(246,177,23)"/><text x="28.8570%" y="127.50"></text></g><g><title>specialization_graph_of (413,404 samples, 0.17%)</title><rect x="28.6081%" y="101" width="0.1661%" height="15" fill="rgb(230,62,27)"/><text x="28.8581%" y="111.50"></text></g><g><title>impl_parent (2,313,599 samples, 0.93%)</title><rect x="30.5397%" y="117" width="0.9296%" height="15" fill="rgb(216,154,8)"/><text x="30.7897%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,373,546 samples, 0.55%)</title><rect x="30.9174%" y="101" width="0.5519%" height="15" fill="rgb(244,35,45)"/><text x="31.1674%" y="111.50"></text></g><g><title>impl_trait_ref (5,178,488 samples, 2.08%)</title><rect x="31.4693%" y="117" width="2.0806%" height="15" fill="rgb(251,115,12)"/><text x="31.7193%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,235,061 samples, 1.70%)</title><rect x="31.8483%" y="101" width="1.7016%" height="15" fill="rgb(240,54,50)"/><text x="32.0983%" y="111.50"></text></g><g><title>coherent_trait (13,134,727 samples, 5.28%)</title><rect x="28.5885%" y="149" width="5.2774%" height="15" fill="rgb(233,84,52)"/><text x="28.8385%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (12,510,291 samples, 5.03%)</title><rect x="28.8394%" y="133" width="5.0265%" height="15" fill="rgb(207,117,47)"/><text x="29.0894%" y="143.50">specia..</text></g><g><title>trait_impls_of (786,307 samples, 0.32%)</title><rect x="33.5499%" y="117" width="0.3159%" height="15" fill="rgb(249,43,39)"/><text x="33.7999%" y="127.50"></text></g><g><title>coherence_checking (13,284,858 samples, 5.34%)</title><rect x="28.5795%" y="165" width="5.3377%" height="15" fill="rgb(209,38,44)"/><text x="28.8295%" y="175.50">coheren..</text></g><g><title>adt_sized_constraint (375,714 samples, 0.15%)</title><rect x="49.9379%" y="117" width="0.1510%" height="15" fill="rgb(236,212,23)"/><text x="50.1879%" y="127.50"></text></g><g><title>associated_item (796,457 samples, 0.32%)</title><rect x="50.1992%" y="101" width="0.3200%" height="15" fill="rgb(242,79,21)"/><text x="50.4492%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (642,335 samples, 0.26%)</title><rect x="50.2611%" y="85" width="0.2581%" height="15" fill="rgb(211,96,35)"/><text x="50.5111%" y="95.50"></text></g><g><title>associated_items (1,121,559 samples, 0.45%)</title><rect x="50.0899%" y="117" width="0.4506%" height="15" fill="rgb(253,215,40)"/><text x="50.3399%" y="127.50"></text></g><g><title>dropck_outlives (770,062 samples, 0.31%)</title><rect x="50.5659%" y="117" width="0.3094%" height="15" fill="rgb(211,81,21)"/><text x="50.8159%" y="127.50"></text></g><g><title>eval_to_const_value_raw (328,414 samples, 0.13%)</title><rect x="50.8753%" y="117" width="0.1320%" height="15" fill="rgb(208,190,38)"/><text x="51.1253%" y="127.50"></text></g><g><title>eval_to_allocation_raw (322,234 samples, 0.13%)</title><rect x="50.8778%" y="101" width="0.1295%" height="15" fill="rgb(235,213,38)"/><text x="51.1278%" y="111.50"></text></g><g><title>adt_def (444,285 samples, 0.18%)</title><rect x="51.8579%" y="85" width="0.1785%" height="15" fill="rgb(237,122,38)"/><text x="52.1079%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (442,005 samples, 0.18%)</title><rect x="51.8588%" y="69" width="0.1776%" height="15" fill="rgb(244,218,35)"/><text x="52.1088%" y="79.50"></text></g><g><title>item_attrs (411,515 samples, 0.17%)</title><rect x="51.8711%" y="53" width="0.1653%" height="15" fill="rgb(240,68,47)"/><text x="52.1211%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (408,975 samples, 0.16%)</title><rect x="51.8721%" y="37" width="0.1643%" height="15" fill="rgb(210,16,53)"/><text x="52.1221%" y="47.50"></text></g><g><title>adt_sized_constraint (476,795 samples, 0.19%)</title><rect x="51.8516%" y="101" width="0.1916%" height="15" fill="rgb(235,124,12)"/><text x="52.1016%" y="111.50"></text></g><g><title>trait_impls_of (314,881 samples, 0.13%)</title><rect x="52.2071%" y="101" width="0.1265%" height="15" fill="rgb(224,169,11)"/><text x="52.4571%" y="111.50"></text></g><g><title>evaluate_obligation (3,302,630 samples, 1.33%)</title><rect x="51.0073%" y="117" width="1.3270%" height="15" fill="rgb(250,166,2)"/><text x="51.2573%" y="127.50"></text></g><g><title>item_attrs (355,804 samples, 0.14%)</title><rect x="52.6123%" y="117" width="0.1430%" height="15" fill="rgb(242,216,29)"/><text x="52.8623%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (345,374 samples, 0.14%)</title><rect x="52.6165%" y="101" width="0.1388%" height="15" fill="rgb(230,116,27)"/><text x="52.8665%" y="111.50"></text></g><g><title>evaluate_obligation (316,105 samples, 0.13%)</title><rect x="52.9393%" y="101" width="0.1270%" height="15" fill="rgb(228,99,48)"/><text x="53.1893%" y="111.50"></text></g><g><title>method_autoderef_steps (703,165 samples, 0.28%)</title><rect x="52.7895%" y="117" width="0.2825%" height="15" fill="rgb(253,11,6)"/><text x="53.0395%" y="127.50"></text></g><g><title>predicates_of (417,337 samples, 0.17%)</title><rect x="53.1898%" y="117" width="0.1677%" height="15" fill="rgb(247,143,39)"/><text x="53.4398%" y="127.50"></text></g><g><title>predicates_defined_on (294,476 samples, 0.12%)</title><rect x="53.2392%" y="101" width="0.1183%" height="15" fill="rgb(236,97,10)"/><text x="53.4892%" y="111.50"></text></g><g><title>associated_item (267,463 samples, 0.11%)</title><rect x="54.3272%" y="85" width="0.1075%" height="15" fill="rgb(233,208,19)"/><text x="54.5772%" y="95.50"></text></g><g><title>associated_items (377,184 samples, 0.15%)</title><rect x="54.2884%" y="101" width="0.1515%" height="15" fill="rgb(216,164,2)"/><text x="54.5384%" y="111.50"></text></g><g><title>evaluate_obligation (596,626 samples, 0.24%)</title><rect x="54.4782%" y="101" width="0.2397%" height="15" fill="rgb(220,129,5)"/><text x="54.7282%" y="111.50"></text></g><g><title>typeck (3,697,902 samples, 1.49%)</title><rect x="53.4231%" y="117" width="1.4858%" height="15" fill="rgb(242,17,10)"/><text x="53.6731%" y="127.50"></text></g><g><title>item_bodies_checking (52,220,175 samples, 20.98%)</title><rect x="33.9708%" y="165" width="20.9814%" height="15" fill="rgb(242,107,0)"/><text x="34.2208%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (52,215,885 samples, 20.98%)</title><rect x="33.9725%" y="149" width="20.9797%" height="15" fill="rgb(251,28,31)"/><text x="34.2225%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (51,975,723 samples, 20.88%)</title><rect x="34.0690%" y="133" width="20.8832%" height="15" fill="rgb(233,223,10)"/><text x="34.3190%" y="143.50">typeck</text></g><g><title>item_types_checking (8,067,820 samples, 3.24%)</title><rect x="54.9522%" y="165" width="3.2415%" height="15" fill="rgb(215,21,27)"/><text x="55.2022%" y="175.50">ite..</text></g><g><title>check_mod_item_types (8,057,000 samples, 3.24%)</title><rect x="54.9565%" y="149" width="3.2372%" height="15" fill="rgb(232,23,21)"/><text x="55.2065%" y="159.50">che..</text></g><g><title>fn_sig (746,327 samples, 0.30%)</title><rect x="58.5296%" y="133" width="0.2999%" height="15" fill="rgb(244,5,23)"/><text x="58.7796%" y="143.50"></text></g><g><title>named_region_map (466,966 samples, 0.19%)</title><rect x="58.9957%" y="117" width="0.1876%" height="15" fill="rgb(226,81,46)"/><text x="59.2457%" y="127.50"></text></g><g><title>resolve_lifetimes (437,326 samples, 0.18%)</title><rect x="59.0076%" y="101" width="0.1757%" height="15" fill="rgb(247,70,30)"/><text x="59.2576%" y="111.50"></text></g><g><title>generics_of (929,879 samples, 0.37%)</title><rect x="58.8295%" y="133" width="0.3736%" height="15" fill="rgb(212,68,19)"/><text x="59.0795%" y="143.50"></text></g><g><title>explicit_predicates_of (986,491 samples, 0.40%)</title><rect x="59.4781%" y="101" width="0.3964%" height="15" fill="rgb(240,187,13)"/><text x="59.7281%" y="111.50"></text></g><g><title>predicates_of (1,797,473 samples, 0.72%)</title><rect x="59.2897%" y="133" width="0.7222%" height="15" fill="rgb(223,113,26)"/><text x="59.5397%" y="143.50"></text></g><g><title>predicates_defined_on (1,615,930 samples, 0.65%)</title><rect x="59.3626%" y="117" width="0.6493%" height="15" fill="rgb(206,192,2)"/><text x="59.6126%" y="127.50"></text></g><g><title>inferred_outlives_of (342,144 samples, 0.14%)</title><rect x="59.8744%" y="101" width="0.1375%" height="15" fill="rgb(241,108,4)"/><text x="60.1244%" y="111.50"></text></g><g><title>inferred_outlives_crate (288,823 samples, 0.12%)</title><rect x="59.8959%" y="85" width="0.1160%" height="15" fill="rgb(247,173,49)"/><text x="60.1459%" y="95.50"></text></g><g><title>late_bound_vars_map (318,805 samples, 0.13%)</title><rect x="60.2088%" y="117" width="0.1281%" height="15" fill="rgb(224,114,35)"/><text x="60.4588%" y="127.50"></text></g><g><title>resolve_lifetimes (304,475 samples, 0.12%)</title><rect x="60.2145%" y="101" width="0.1223%" height="15" fill="rgb(245,159,27)"/><text x="60.4645%" y="111.50"></text></g><g><title>type_collecting (5,363,150 samples, 2.15%)</title><rect x="58.1963%" y="165" width="2.1548%" height="15" fill="rgb(245,172,44)"/><text x="58.4463%" y="175.50">t..</text></g><g><title>collect_mod_item_types (5,345,600 samples, 2.15%)</title><rect x="58.2034%" y="149" width="2.1478%" height="15" fill="rgb(236,23,11)"/><text x="58.4534%" y="159.50">c..</text></g><g><title>type_of (818,012 samples, 0.33%)</title><rect x="60.0225%" y="133" width="0.3287%" height="15" fill="rgb(205,117,38)"/><text x="60.2725%" y="143.50"></text></g><g><title>mir_const_qualif (530,047 samples, 0.21%)</title><rect x="63.3659%" y="85" width="0.2130%" height="15" fill="rgb(237,72,25)"/><text x="63.6159%" y="95.50"></text></g><g><title>mir_const (472,426 samples, 0.19%)</title><rect x="63.3891%" y="69" width="0.1898%" height="15" fill="rgb(244,70,9)"/><text x="63.6391%" y="79.50"></text></g><g><title>unsafety_check_result (364,255 samples, 0.15%)</title><rect x="63.4325%" y="53" width="0.1464%" height="15" fill="rgb(217,125,39)"/><text x="63.6825%" y="63.50"></text></g><g><title>mir_built (329,115 samples, 0.13%)</title><rect x="63.4466%" y="37" width="0.1322%" height="15" fill="rgb(235,36,10)"/><text x="63.6966%" y="47.50"></text></g><g><title>mir_borrowck (1,143,732 samples, 0.46%)</title><rect x="63.8466%" y="53" width="0.4595%" height="15" fill="rgb(251,123,47)"/><text x="64.0966%" y="63.50"></text></g><g><title>mir_for_ctfe (1,814,530 samples, 0.73%)</title><rect x="63.5789%" y="85" width="0.7291%" height="15" fill="rgb(221,13,13)"/><text x="63.8289%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,646,738 samples, 0.66%)</title><rect x="63.6463%" y="69" width="0.6616%" height="15" fill="rgb(238,131,9)"/><text x="63.8963%" y="79.50"></text></g><g><title>impl_trait_ref (502,589 samples, 0.20%)</title><rect x="65.5662%" y="53" width="0.2019%" height="15" fill="rgb(211,50,8)"/><text x="65.8162%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (457,029 samples, 0.18%)</title><rect x="65.5845%" y="37" width="0.1836%" height="15" fill="rgb(245,182,24)"/><text x="65.8345%" y="47.50"></text></g><g><title>evaluate_obligation (1,491,828 samples, 0.60%)</title><rect x="65.2899%" y="69" width="0.5994%" height="15" fill="rgb(242,14,37)"/><text x="65.5399%" y="79.50"></text></g><g><title>eval_to_const_value_raw (6,779,215 samples, 2.72%)</title><rect x="63.2433%" y="133" width="2.7238%" height="15" fill="rgb(246,228,12)"/><text x="63.4933%" y="143.50">ev..</text></g><g><title>eval_to_const_value_raw (6,769,045 samples, 2.72%)</title><rect x="63.2474%" y="117" width="2.7197%" height="15" fill="rgb(213,55,15)"/><text x="63.4974%" y="127.50">ev..</text></g><g><title>eval_to_allocation_raw (6,745,655 samples, 2.71%)</title><rect x="63.2568%" y="101" width="2.7103%" height="15" fill="rgb(209,9,3)"/><text x="63.5068%" y="111.50">ev..</text></g><g><title>typeck (4,127,147 samples, 1.66%)</title><rect x="64.3089%" y="85" width="1.6582%" height="15" fill="rgb(230,59,30)"/><text x="64.5589%" y="95.50"></text></g><g><title>evaluate_obligation (758,761 samples, 0.30%)</title><rect x="65.9671%" y="133" width="0.3049%" height="15" fill="rgb(209,121,21)"/><text x="66.2171%" y="143.50"></text></g><g><title>implied_outlives_bounds (549,631 samples, 0.22%)</title><rect x="66.2879%" y="133" width="0.2208%" height="15" fill="rgb(220,109,13)"/><text x="66.5379%" y="143.50"></text></g><g><title>param_env (1,597,802 samples, 0.64%)</title><rect x="66.5123%" y="133" width="0.6420%" height="15" fill="rgb(232,18,1)"/><text x="66.7623%" y="143.50"></text></g><g><title>region_scope_tree (767,456 samples, 0.31%)</title><rect x="67.1666%" y="133" width="0.3084%" height="15" fill="rgb(215,41,42)"/><text x="67.4166%" y="143.50"></text></g><g><title>check_impl_item_well_formed (17,122,515 samples, 6.88%)</title><rect x="60.6063%" y="149" width="6.8796%" height="15" fill="rgb(224,123,36)"/><text x="60.8563%" y="159.50">check_imp..</text></g><g><title>mir_borrowck (331,224 samples, 0.13%)</title><rect x="70.6989%" y="53" width="0.1331%" height="15" fill="rgb(240,125,3)"/><text x="70.9489%" y="63.50"></text></g><g><title>mir_for_ctfe (458,516 samples, 0.18%)</title><rect x="70.6480%" y="85" width="0.1842%" height="15" fill="rgb(205,98,50)"/><text x="70.8980%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (422,555 samples, 0.17%)</title><rect x="70.6624%" y="69" width="0.1698%" height="15" fill="rgb(205,185,37)"/><text x="70.9124%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,158,083 samples, 0.47%)</title><rect x="70.4842%" y="133" width="0.4653%" height="15" fill="rgb(238,207,15)"/><text x="70.7342%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,142,693 samples, 0.46%)</title><rect x="70.4904%" y="117" width="0.4591%" height="15" fill="rgb(213,199,42)"/><text x="70.7404%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,140,823 samples, 0.46%)</title><rect x="70.4912%" y="101" width="0.4584%" height="15" fill="rgb(235,201,11)"/><text x="70.7412%" y="111.50"></text></g><g><title>evaluate_obligation (626,171 samples, 0.25%)</title><rect x="70.9496%" y="133" width="0.2516%" height="15" fill="rgb(207,46,11)"/><text x="71.1996%" y="143.50"></text></g><g><title>implied_outlives_bounds (383,465 samples, 0.15%)</title><rect x="71.2227%" y="133" width="0.1541%" height="15" fill="rgb(241,35,35)"/><text x="71.4727%" y="143.50"></text></g><g><title>param_env (955,976 samples, 0.38%)</title><rect x="71.3773%" y="133" width="0.3841%" height="15" fill="rgb(243,32,47)"/><text x="71.6273%" y="143.50"></text></g><g><title>check_item_well_formed (11,168,737 samples, 4.49%)</title><rect x="67.4859%" y="149" width="4.4875%" height="15" fill="rgb(247,202,23)"/><text x="67.7359%" y="159.50">check..</text></g><g><title>analysis (178,794,263 samples, 71.84%)</title><rect x="0.3623%" y="197" width="71.8372%" height="15" fill="rgb(219,102,11)"/><text x="0.6123%" y="207.50">analysis</text></g><g><title>type_check_crate (108,746,518 samples, 43.69%)</title><rect x="28.5065%" y="181" width="43.6929%" height="15" fill="rgb(243,110,44)"/><text x="28.7565%" y="191.50">type_check_crate</text></g><g><title>wf_checking (29,472,401 samples, 11.84%)</title><rect x="60.3578%" y="165" width="11.8416%" height="15" fill="rgb(222,74,54)"/><text x="60.6078%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (562,645 samples, 0.23%)</title><rect x="71.9734%" y="149" width="0.2261%" height="15" fill="rgb(216,99,12)"/><text x="72.2234%" y="159.50"></text></g><g><title>codegen_crate (489,496 samples, 0.20%)</title><rect x="72.2035%" y="197" width="0.1967%" height="15" fill="rgb(226,22,26)"/><text x="72.4535%" y="207.50"></text></g><g><title>AST_validation (329,043 samples, 0.13%)</title><rect x="72.4890%" y="181" width="0.1322%" height="15" fill="rgb(217,163,10)"/><text x="72.7390%" y="191.50"></text></g><g><title>metadata_register_crate (2,481,318 samples, 1.00%)</title><rect x="87.6990%" y="149" width="0.9970%" height="15" fill="rgb(213,25,53)"/><text x="87.9490%" y="159.50"></text></g><g><title>metadata_register_crate (888,428 samples, 0.36%)</title><rect x="88.3390%" y="133" width="0.3570%" height="15" fill="rgb(252,105,26)"/><text x="88.5890%" y="143.50"></text></g><g><title>macro_expand_crate (40,741,967 samples, 16.37%)</title><rect x="72.7139%" y="181" width="16.3696%" height="15" fill="rgb(220,39,43)"/><text x="72.9639%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (40,722,907 samples, 16.36%)</title><rect x="72.7216%" y="165" width="16.3619%" height="15" fill="rgb(229,68,48)"/><text x="72.9716%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (964,581 samples, 0.39%)</title><rect x="88.6960%" y="149" width="0.3876%" height="15" fill="rgb(252,8,32)"/><text x="88.9460%" y="159.50"></text></g><g><title>late_resolve_crate (4,793,813 samples, 1.93%)</title><rect x="89.2233%" y="165" width="1.9261%" height="15" fill="rgb(223,20,43)"/><text x="89.4733%" y="175.50">l..</text></g><g><title>configure_and_expand (46,912,696 samples, 18.85%)</title><rect x="72.4002%" y="197" width="18.8489%" height="15" fill="rgb(229,81,49)"/><text x="72.6502%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,300,579 samples, 2.13%)</title><rect x="89.1194%" y="181" width="2.1297%" height="15" fill="rgb(236,28,36)"/><text x="89.3694%" y="191.50">r..</text></g><g><title>drop_ast (420,674 samples, 0.17%)</title><rect x="91.2491%" y="197" width="0.1690%" height="15" fill="rgb(249,185,26)"/><text x="91.4991%" y="207.50"></text></g><g><title>early_lint_checks (845,029 samples, 0.34%)</title><rect x="91.4249%" y="197" width="0.3395%" height="15" fill="rgb(249,174,33)"/><text x="91.6749%" y="207.50"></text></g><g><title>free_global_ctxt (4,623,012 samples, 1.86%)</title><rect x="91.7644%" y="197" width="1.8575%" height="15" fill="rgb(233,201,37)"/><text x="92.0144%" y="207.50">f..</text></g><g><title>generate_crate_metadata (3,986,725 samples, 1.60%)</title><rect x="93.6218%" y="197" width="1.6018%" height="15" fill="rgb(221,78,26)"/><text x="93.8718%" y="207.50"></text></g><g><title>hir_lowering (9,155,413 samples, 3.68%)</title><rect x="95.2237%" y="197" width="3.6785%" height="15" fill="rgb(250,127,30)"/><text x="95.4737%" y="207.50">hir_..</text></g><g><title>parse_crate (520,055 samples, 0.21%)</title><rect x="98.9353%" y="197" width="0.2090%" height="15" fill="rgb(230,49,44)"/><text x="99.1853%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,317,055 samples, 0.53%)</title><rect x="99.2378%" y="197" width="0.5292%" height="15" fill="rgb(229,67,23)"/><text x="99.4878%" y="207.50"></text></g><g><title>all (248,888,228 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (248,888,228 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (483,135 samples, 0.19%)</title><rect x="99.8059%" y="197" width="0.1941%" height="15" fill="rgb(238,154,13)"/><text x="100.0559%" y="207.50"></text></g></svg></svg>