<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (419,583 samples, 0.14%)</title><rect x="13.6501%" y="133" width="0.1384%" height="15" fill="rgb(227,0,7)"/><text x="13.9001%" y="143.50"></text></g><g><title>is_copy_raw (474,007 samples, 0.16%)</title><rect x="19.6188%" y="69" width="0.1564%" height="15" fill="rgb(217,0,24)"/><text x="19.8688%" y="79.50"></text></g><g><title>evaluate_obligation (385,945 samples, 0.13%)</title><rect x="19.6478%" y="53" width="0.1273%" height="15" fill="rgb(221,193,54)"/><text x="19.8978%" y="63.50"></text></g><g><title>needs_drop_raw (3,068,127 samples, 1.01%)</title><rect x="19.7770%" y="69" width="1.0121%" height="15" fill="rgb(248,212,6)"/><text x="20.0270%" y="79.50"></text></g><g><title>is_copy_raw (2,631,412 samples, 0.87%)</title><rect x="19.9211%" y="53" width="0.8681%" height="15" fill="rgb(208,68,35)"/><text x="20.1711%" y="63.50"></text></g><g><title>evaluate_obligation (2,168,769 samples, 0.72%)</title><rect x="20.0737%" y="37" width="0.7155%" height="15" fill="rgb(232,128,0)"/><text x="20.3237%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,023,648 samples, 0.34%)</title><rect x="21.0028%" y="53" width="0.3377%" height="15" fill="rgb(207,160,47)"/><text x="21.2528%" y="63.50"></text></g><g><title>specialization_graph_of (390,344 samples, 0.13%)</title><rect x="21.3501%" y="53" width="0.1288%" height="15" fill="rgb(228,23,34)"/><text x="21.6001%" y="63.50"></text></g><g><title>resolve_instance (2,138,033 samples, 0.71%)</title><rect x="20.7983%" y="69" width="0.7053%" height="15" fill="rgb(218,30,26)"/><text x="21.0483%" y="79.50"></text></g><g><title>thir_body (3,512,956 samples, 1.16%)</title><rect x="21.5533%" y="69" width="1.1589%" height="15" fill="rgb(220,122,19)"/><text x="21.8033%" y="79.50"></text></g><g><title>mir_const (23,705,519 samples, 7.82%)</title><rect x="14.9253%" y="117" width="7.8202%" height="15" fill="rgb(250,228,42)"/><text x="15.1753%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (20,761,414 samples, 6.85%)</title><rect x="15.8965%" y="101" width="6.8490%" height="15" fill="rgb(240,193,28)"/><text x="16.1465%" y="111.50">unsafety_..</text></g><g><title>mir_built (18,693,538 samples, 6.17%)</title><rect x="16.5787%" y="85" width="6.1668%" height="15" fill="rgb(216,20,37)"/><text x="16.8287%" y="95.50">mir_built</text></g><g><title>mir_const (677,288 samples, 0.22%)</title><rect x="23.0132%" y="101" width="0.2234%" height="15" fill="rgb(206,188,39)"/><text x="23.2632%" y="111.50"></text></g><g><title>unsafety_check_result (503,775 samples, 0.17%)</title><rect x="23.0704%" y="85" width="0.1662%" height="15" fill="rgb(217,207,13)"/><text x="23.3204%" y="95.50"></text></g><g><title>mir_built (421,464 samples, 0.14%)</title><rect x="23.0976%" y="69" width="0.1390%" height="15" fill="rgb(231,73,38)"/><text x="23.3476%" y="79.50"></text></g><g><title>mir_promoted (28,157,151 samples, 9.29%)</title><rect x="13.9651%" y="133" width="9.2888%" height="15" fill="rgb(225,20,46)"/><text x="14.2151%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (1,540,868 samples, 0.51%)</title><rect x="22.7456%" y="117" width="0.5083%" height="15" fill="rgb(210,31,41)"/><text x="22.9956%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (519,116 samples, 0.17%)</title><rect x="23.2549%" y="133" width="0.1713%" height="15" fill="rgb(221,200,47)"/><text x="23.5049%" y="143.50"></text></g><g><title>type_op_normalize_ty (789,557 samples, 0.26%)</title><rect x="23.5291%" y="133" width="0.2605%" height="15" fill="rgb(226,26,5)"/><text x="23.7791%" y="143.50"></text></g><g><title>normalize_projection_ty (630,326 samples, 0.21%)</title><rect x="23.5816%" y="117" width="0.2079%" height="15" fill="rgb(249,33,26)"/><text x="23.8316%" y="127.50"></text></g><g><title>type_op_prove_predicate (5,637,536 samples, 1.86%)</title><rect x="23.7895%" y="133" width="1.8598%" height="15" fill="rgb(235,183,28)"/><text x="24.0395%" y="143.50">t..</text></g><g><title>evaluate_obligation (603,526 samples, 0.20%)</title><rect x="25.4502%" y="117" width="0.1991%" height="15" fill="rgb(221,5,38)"/><text x="25.7002%" y="127.50"></text></g><g><title>MIR_borrow_checking (75,791,417 samples, 25.00%)</title><rect x="0.6495%" y="165" width="25.0029%" height="15" fill="rgb(247,18,42)"/><text x="0.8995%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (75,188,549 samples, 24.80%)</title><rect x="0.8484%" y="149" width="24.8041%" height="15" fill="rgb(241,131,45)"/><text x="1.0984%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (817,409 samples, 0.27%)</title><rect x="25.6525%" y="165" width="0.2697%" height="15" fill="rgb(249,31,29)"/><text x="25.9025%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (581,858 samples, 0.19%)</title><rect x="25.7302%" y="149" width="0.1919%" height="15" fill="rgb(225,111,53)"/><text x="25.9802%" y="159.50"></text></g><g><title>hir_module_items (730,629 samples, 0.24%)</title><rect x="25.9221%" y="165" width="0.2410%" height="15" fill="rgb(238,160,17)"/><text x="26.1721%" y="175.50"></text></g><g><title>codegen_fn_attrs (512,097 samples, 0.17%)</title><rect x="26.6134%" y="101" width="0.1689%" height="15" fill="rgb(214,148,48)"/><text x="26.8634%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,148,425 samples, 0.38%)</title><rect x="26.4134%" y="133" width="0.3789%" height="15" fill="rgb(232,36,49)"/><text x="26.6634%" y="143.50"></text></g><g><title>should_inherit_track_caller (901,413 samples, 0.30%)</title><rect x="26.4949%" y="117" width="0.2974%" height="15" fill="rgb(209,103,24)"/><text x="26.7449%" y="127.50"></text></g><g><title>check_mod_attrs (1,870,232 samples, 0.62%)</title><rect x="26.1753%" y="149" width="0.6170%" height="15" fill="rgb(229,88,8)"/><text x="26.4253%" y="159.50"></text></g><g><title>check_mod_const_bodies (421,585 samples, 0.14%)</title><rect x="26.7923%" y="149" width="0.1391%" height="15" fill="rgb(213,181,19)"/><text x="27.0423%" y="159.50"></text></g><g><title>lookup_deprecation_entry (407,354 samples, 0.13%)</title><rect x="27.1837%" y="133" width="0.1344%" height="15" fill="rgb(254,191,54)"/><text x="27.4337%" y="143.50"></text></g><g><title>stability_index (327,784 samples, 0.11%)</title><rect x="27.2099%" y="117" width="0.1081%" height="15" fill="rgb(241,83,37)"/><text x="27.4599%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,052,991 samples, 0.35%)</title><rect x="27.0113%" y="149" width="0.3474%" height="15" fill="rgb(233,36,39)"/><text x="27.2613%" y="159.50"></text></g><g><title>misc_checking_1 (3,767,482 samples, 1.24%)</title><rect x="26.1633%" y="165" width="1.2429%" height="15" fill="rgb(226,3,54)"/><text x="26.4133%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,123,112 samples, 0.37%)</title><rect x="27.4067%" y="149" width="0.3705%" height="15" fill="rgb(245,192,40)"/><text x="27.6567%" y="159.50"></text></g><g><title>check_mod_liveness (871,969 samples, 0.29%)</title><rect x="27.4896%" y="133" width="0.2877%" height="15" fill="rgb(238,167,29)"/><text x="27.7396%" y="143.50"></text></g><g><title>misc_checking_2 (2,776,632 samples, 0.92%)</title><rect x="27.4062%" y="165" width="0.9160%" height="15" fill="rgb(232,182,51)"/><text x="27.6562%" y="175.50"></text></g><g><title>match_checking (1,651,939 samples, 0.54%)</title><rect x="27.7772%" y="149" width="0.5450%" height="15" fill="rgb(231,60,39)"/><text x="28.0272%" y="159.50"></text></g><g><title>check_match (1,522,129 samples, 0.50%)</title><rect x="27.8201%" y="133" width="0.5021%" height="15" fill="rgb(208,69,12)"/><text x="28.0701%" y="143.50"></text></g><g><title>check_private_in_public (779,049 samples, 0.26%)</title><rect x="28.3259%" y="149" width="0.2570%" height="15" fill="rgb(235,93,37)"/><text x="28.5759%" y="159.50"></text></g><g><title>death_checking (1,419,055 samples, 0.47%)</title><rect x="28.5829%" y="149" width="0.4681%" height="15" fill="rgb(213,116,39)"/><text x="28.8329%" y="159.50"></text></g><g><title>param_env (363,402 samples, 0.12%)</title><rect x="29.3869%" y="117" width="0.1199%" height="15" fill="rgb(222,207,29)"/><text x="29.6369%" y="127.50"></text></g><g><title>crate_lints (1,738,959 samples, 0.57%)</title><rect x="29.0515%" y="133" width="0.5737%" height="15" fill="rgb(206,96,30)"/><text x="29.3015%" y="143.50"></text></g><g><title>type_of (358,915 samples, 0.12%)</title><rect x="29.5068%" y="117" width="0.1184%" height="15" fill="rgb(218,138,4)"/><text x="29.7568%" y="127.50"></text></g><g><title>lint_checking (2,809,111 samples, 0.93%)</title><rect x="29.0510%" y="149" width="0.9267%" height="15" fill="rgb(250,191,14)"/><text x="29.3010%" y="159.50"></text></g><g><title>module_lints (1,068,702 samples, 0.35%)</title><rect x="29.6252%" y="133" width="0.3526%" height="15" fill="rgb(239,60,40)"/><text x="29.8752%" y="143.50"></text></g><g><title>lint_mod (1,059,452 samples, 0.35%)</title><rect x="29.6282%" y="117" width="0.3495%" height="15" fill="rgb(206,27,48)"/><text x="29.8782%" y="127.50"></text></g><g><title>privacy_access_levels (1,330,865 samples, 0.44%)</title><rect x="29.9777%" y="149" width="0.4390%" height="15" fill="rgb(225,35,8)"/><text x="30.2277%" y="159.50"></text></g><g><title>privacy_checking_modules (3,031,874 samples, 1.00%)</title><rect x="30.4168%" y="149" width="1.0002%" height="15" fill="rgb(250,213,24)"/><text x="30.6668%" y="159.50"></text></g><g><title>check_mod_privacy (3,023,834 samples, 1.00%)</title><rect x="30.4194%" y="133" width="0.9975%" height="15" fill="rgb(247,123,22)"/><text x="30.6694%" y="143.50"></text></g><g><title>misc_checking_3 (9,412,605 samples, 3.11%)</title><rect x="28.3222%" y="165" width="3.1051%" height="15" fill="rgb(231,138,38)"/><text x="28.5722%" y="175.50">mis..</text></g><g><title>impl_parent (1,640,307 samples, 0.54%)</title><rect x="32.8375%" y="101" width="0.5411%" height="15" fill="rgb(231,145,46)"/><text x="33.0875%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (884,744 samples, 0.29%)</title><rect x="33.0868%" y="85" width="0.2919%" height="15" fill="rgb(251,118,11)"/><text x="33.3368%" y="95.50"></text></g><g><title>impl_trait_ref (3,319,949 samples, 1.10%)</title><rect x="33.3793%" y="101" width="1.0952%" height="15" fill="rgb(217,147,25)"/><text x="33.6293%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,336,987 samples, 0.77%)</title><rect x="33.7035%" y="85" width="0.7710%" height="15" fill="rgb(247,81,37)"/><text x="33.9535%" y="95.50"></text></g><g><title>trait_impls_of (630,925 samples, 0.21%)</title><rect x="34.5167%" y="101" width="0.2081%" height="15" fill="rgb(209,12,38)"/><text x="34.7667%" y="111.50"></text></g><g><title>coherent_trait (9,727,558 samples, 3.21%)</title><rect x="31.5164%" y="133" width="3.2090%" height="15" fill="rgb(227,1,9)"/><text x="31.7664%" y="143.50">coh..</text></g><g><title>specialization_graph_of (9,462,733 samples, 3.12%)</title><rect x="31.6037%" y="117" width="3.1217%" height="15" fill="rgb(248,47,43)"/><text x="31.8537%" y="127.50">spe..</text></g><g><title>coherence_checking (10,002,422 samples, 3.30%)</title><rect x="31.5026%" y="149" width="3.2997%" height="15" fill="rgb(221,10,30)"/><text x="31.7526%" y="159.50">coh..</text></g><g><title>associated_item (400,284 samples, 0.13%)</title><rect x="53.6363%" y="85" width="0.1321%" height="15" fill="rgb(210,229,1)"/><text x="53.8863%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (360,344 samples, 0.12%)</title><rect x="53.6495%" y="69" width="0.1189%" height="15" fill="rgb(222,148,37)"/><text x="53.8995%" y="79.50"></text></g><g><title>associated_items (487,194 samples, 0.16%)</title><rect x="53.6128%" y="101" width="0.1607%" height="15" fill="rgb(234,67,33)"/><text x="53.8628%" y="111.50"></text></g><g><title>dropck_outlives (692,907 samples, 0.23%)</title><rect x="53.7932%" y="101" width="0.2286%" height="15" fill="rgb(247,98,35)"/><text x="54.0432%" y="111.50"></text></g><g><title>generics_of (374,074 samples, 0.12%)</title><rect x="54.9658%" y="85" width="0.1234%" height="15" fill="rgb(247,138,52)"/><text x="55.2158%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (306,084 samples, 0.10%)</title><rect x="54.9882%" y="69" width="0.1010%" height="15" fill="rgb(213,79,30)"/><text x="55.2382%" y="79.50"></text></g><g><title>evaluate_obligation (3,805,308 samples, 1.26%)</title><rect x="54.0218%" y="101" width="1.2553%" height="15" fill="rgb(246,177,23)"/><text x="54.2718%" y="111.50"></text></g><g><title>method_autoderef_steps (677,717 samples, 0.22%)</title><rect x="55.4928%" y="101" width="0.2236%" height="15" fill="rgb(230,62,27)"/><text x="55.7428%" y="111.50"></text></g><g><title>evaluate_obligation (1,330,721 samples, 0.44%)</title><rect x="59.0893%" y="85" width="0.4390%" height="15" fill="rgb(216,154,8)"/><text x="59.3393%" y="95.50"></text></g><g><title>method_autoderef_steps (385,311 samples, 0.13%)</title><rect x="59.5394%" y="85" width="0.1271%" height="15" fill="rgb(244,35,45)"/><text x="59.7894%" y="95.50"></text></g><g><title>typeck (11,253,405 samples, 3.71%)</title><rect x="55.9859%" y="101" width="3.7124%" height="15" fill="rgb(251,115,12)"/><text x="56.2359%" y="111.50">type..</text></g><g><title>item_bodies_checking (75,377,792 samples, 24.87%)</title><rect x="34.8740%" y="149" width="24.8665%" height="15" fill="rgb(240,54,50)"/><text x="35.1240%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (75,373,992 samples, 24.87%)</title><rect x="34.8753%" y="133" width="24.8652%" height="15" fill="rgb(233,84,52)"/><text x="35.1253%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (74,990,286 samples, 24.74%)</title><rect x="35.0018%" y="117" width="24.7386%" height="15" fill="rgb(207,117,47)"/><text x="35.2518%" y="127.50">typeck</text></g><g><title>item_types_checking (6,271,890 samples, 2.07%)</title><rect x="59.7405%" y="149" width="2.0690%" height="15" fill="rgb(249,43,39)"/><text x="59.9905%" y="159.50">i..</text></g><g><title>check_mod_item_types (6,261,610 samples, 2.07%)</title><rect x="59.7439%" y="133" width="2.0657%" height="15" fill="rgb(209,38,44)"/><text x="59.9939%" y="143.50">c..</text></g><g><title>fn_sig (1,007,350 samples, 0.33%)</title><rect x="62.2658%" y="117" width="0.3323%" height="15" fill="rgb(236,212,23)"/><text x="62.5158%" y="127.50"></text></g><g><title>named_region_map (352,693 samples, 0.12%)</title><rect x="62.7723%" y="101" width="0.1164%" height="15" fill="rgb(242,79,21)"/><text x="63.0223%" y="111.50"></text></g><g><title>generics_of (942,718 samples, 0.31%)</title><rect x="62.5981%" y="117" width="0.3110%" height="15" fill="rgb(211,96,35)"/><text x="62.8481%" y="127.50"></text></g><g><title>impl_trait_ref (399,525 samples, 0.13%)</title><rect x="62.9091%" y="117" width="0.1318%" height="15" fill="rgb(253,215,40)"/><text x="63.1591%" y="127.50"></text></g><g><title>late_bound_vars_map (1,940,606 samples, 0.64%)</title><rect x="63.7067%" y="69" width="0.6402%" height="15" fill="rgb(211,81,21)"/><text x="63.9567%" y="79.50"></text></g><g><title>resolve_lifetimes (1,828,663 samples, 0.60%)</title><rect x="63.7437%" y="53" width="0.6033%" height="15" fill="rgb(208,190,38)"/><text x="63.9937%" y="63.50"></text></g><g><title>lint_levels (382,154 samples, 0.13%)</title><rect x="64.2209%" y="37" width="0.1261%" height="15" fill="rgb(235,213,38)"/><text x="64.4709%" y="47.50"></text></g><g><title>explicit_predicates_of (3,423,668 samples, 1.13%)</title><rect x="63.2505%" y="85" width="1.1294%" height="15" fill="rgb(237,122,38)"/><text x="63.5005%" y="95.50"></text></g><g><title>predicates_of (4,203,423 samples, 1.39%)</title><rect x="63.0409%" y="117" width="1.3867%" height="15" fill="rgb(244,218,35)"/><text x="63.2909%" y="127.50"></text></g><g><title>predicates_defined_on (3,957,311 samples, 1.31%)</title><rect x="63.1221%" y="101" width="1.3055%" height="15" fill="rgb(240,68,47)"/><text x="63.3721%" y="111.50"></text></g><g><title>type_collecting (8,497,304 samples, 2.80%)</title><rect x="61.8106%" y="149" width="2.8032%" height="15" fill="rgb(210,16,53)"/><text x="62.0606%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (8,482,874 samples, 2.80%)</title><rect x="61.8153%" y="133" width="2.7984%" height="15" fill="rgb(235,124,12)"/><text x="62.0653%" y="143.50">co..</text></g><g><title>type_of (524,521 samples, 0.17%)</title><rect x="64.4407%" y="117" width="0.1730%" height="15" fill="rgb(224,169,11)"/><text x="64.6907%" y="127.50"></text></g><g><title>evaluate_obligation (2,411,071 samples, 0.80%)</title><rect x="68.5552%" y="117" width="0.7954%" height="15" fill="rgb(250,166,2)"/><text x="68.8052%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,292,981 samples, 0.43%)</title><rect x="69.3719%" y="117" width="0.4265%" height="15" fill="rgb(242,216,29)"/><text x="69.6219%" y="127.50"></text></g><g><title>param_env (1,919,307 samples, 0.63%)</title><rect x="69.8053%" y="117" width="0.6332%" height="15" fill="rgb(230,116,27)"/><text x="70.0553%" y="127.50"></text></g><g><title>region_scope_tree (1,380,933 samples, 0.46%)</title><rect x="70.4616%" y="117" width="0.4556%" height="15" fill="rgb(228,99,48)"/><text x="70.7116%" y="127.50"></text></g><g><title>check_impl_item_well_formed (18,066,718 samples, 5.96%)</title><rect x="64.9687%" y="133" width="5.9601%" height="15" fill="rgb(253,11,6)"/><text x="65.2187%" y="143.50">check_im..</text></g><g><title>evaluate_obligation (360,461 samples, 0.12%)</title><rect x="74.7997%" y="117" width="0.1189%" height="15" fill="rgb(247,143,39)"/><text x="75.0497%" y="127.50"></text></g><g><title>implied_outlives_bounds (771,385 samples, 0.25%)</title><rect x="74.9622%" y="117" width="0.2545%" height="15" fill="rgb(236,97,10)"/><text x="75.2122%" y="127.50"></text></g><g><title>param_env (1,856,327 samples, 0.61%)</title><rect x="75.2169%" y="117" width="0.6124%" height="15" fill="rgb(233,208,19)"/><text x="75.4669%" y="127.50"></text></g><g><title>predicates_of (408,223 samples, 0.13%)</title><rect x="75.8292%" y="117" width="0.1347%" height="15" fill="rgb(216,164,2)"/><text x="76.0792%" y="127.50"></text></g><g><title>predicates_defined_on (338,593 samples, 0.11%)</title><rect x="75.8522%" y="101" width="0.1117%" height="15" fill="rgb(220,129,5)"/><text x="76.1022%" y="111.50"></text></g><g><title>check_item_well_formed (15,693,071 samples, 5.18%)</title><rect x="70.9287%" y="133" width="5.1770%" height="15" fill="rgb(242,17,10)"/><text x="71.1787%" y="143.50">check_..</text></g><g><title>analysis (231,247,514 samples, 76.29%)</title><rect x="0.3316%" y="181" width="76.2866%" height="15" fill="rgb(242,107,0)"/><text x="0.5816%" y="191.50">analysis</text></g><g><title>type_check_crate (136,987,080 samples, 45.19%)</title><rect x="31.4273%" y="165" width="45.1909%" height="15" fill="rgb(251,28,31)"/><text x="31.6773%" y="175.50">type_check_crate</text></g><g><title>wf_checking (36,364,717 samples, 12.00%)</title><rect x="64.6218%" y="149" width="11.9964%" height="15" fill="rgb(233,223,10)"/><text x="64.8718%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,553,397 samples, 0.51%)</title><rect x="76.1057%" y="133" width="0.5125%" height="15" fill="rgb(215,21,27)"/><text x="76.3557%" y="143.50"></text></g><g><title>codegen_crate (354,984 samples, 0.12%)</title><rect x="76.6213%" y="181" width="0.1171%" height="15" fill="rgb(232,23,21)"/><text x="76.8713%" y="191.50"></text></g><g><title>AST_validation (597,637 samples, 0.20%)</title><rect x="76.8028%" y="165" width="0.1972%" height="15" fill="rgb(244,5,23)"/><text x="77.0528%" y="175.50"></text></g><g><title>macro_expand_crate (36,101,153 samples, 11.91%)</title><rect x="77.0911%" y="165" width="11.9095%" height="15" fill="rgb(226,81,46)"/><text x="77.3411%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (36,088,573 samples, 11.91%)</title><rect x="77.0953%" y="149" width="11.9053%" height="15" fill="rgb(247,70,30)"/><text x="77.3453%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (967,571 samples, 0.32%)</title><rect x="88.6814%" y="133" width="0.3192%" height="15" fill="rgb(212,68,19)"/><text x="88.9314%" y="143.50"></text></g><g><title>finalize_macro_resolutions (350,034 samples, 0.12%)</title><rect x="89.0849%" y="149" width="0.1155%" height="15" fill="rgb(240,187,13)"/><text x="89.3349%" y="159.50"></text></g><g><title>late_resolve_crate (5,400,650 samples, 1.78%)</title><rect x="89.2004%" y="149" width="1.7816%" height="15" fill="rgb(223,113,26)"/><text x="89.4504%" y="159.50">l..</text></g><g><title>configure_and_expand (43,518,556 samples, 14.36%)</title><rect x="76.7384%" y="181" width="14.3564%" height="15" fill="rgb(206,192,2)"/><text x="76.9884%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (6,172,249 samples, 2.04%)</title><rect x="89.0587%" y="165" width="2.0362%" height="15" fill="rgb(241,108,4)"/><text x="89.3087%" y="175.50">r..</text></g><g><title>drop_ast (742,498 samples, 0.24%)</title><rect x="91.0948%" y="181" width="0.2449%" height="15" fill="rgb(247,173,49)"/><text x="91.3448%" y="191.50"></text></g><g><title>early_lint_checks (1,259,774 samples, 0.42%)</title><rect x="91.3453%" y="181" width="0.4156%" height="15" fill="rgb(224,114,35)"/><text x="91.5953%" y="191.50"></text></g><g><title>free_global_ctxt (3,445,448 samples, 1.14%)</title><rect x="91.7609%" y="181" width="1.1366%" height="15" fill="rgb(245,159,27)"/><text x="92.0109%" y="191.50"></text></g><g><title>generate_crate_metadata (4,640,912 samples, 1.53%)</title><rect x="92.8975%" y="181" width="1.5310%" height="15" fill="rgb(245,172,44)"/><text x="93.1475%" y="191.50"></text></g><g><title>hir_lowering (13,032,606 samples, 4.30%)</title><rect x="94.4285%" y="181" width="4.2993%" height="15" fill="rgb(236,23,11)"/><text x="94.6785%" y="191.50">hir_l..</text></g><g><title>parse_crate (1,718,769 samples, 0.57%)</title><rect x="98.7447%" y="181" width="0.5670%" height="15" fill="rgb(205,117,38)"/><text x="98.9947%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,240,674 samples, 0.41%)</title><rect x="99.3872%" y="181" width="0.4093%" height="15" fill="rgb(237,72,25)"/><text x="99.6372%" y="191.50"></text></g><g><title>all (303,130,087 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (303,130,087 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (497,445 samples, 0.16%)</title><rect x="99.8359%" y="181" width="0.1641%" height="15" fill="rgb(235,36,10)"/><text x="100.0859%" y="191.50"></text></g></svg></svg>