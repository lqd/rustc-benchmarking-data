<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (74,550 samples, 0.16%)</title><rect x="7.1534%" y="117" width="0.1613%" height="15" fill="rgb(227,0,7)"/><text x="7.4034%" y="127.50"></text></g><g><title>codegen_fn_attrs (66,610 samples, 0.14%)</title><rect x="7.5707%" y="101" width="0.1441%" height="15" fill="rgb(217,0,24)"/><text x="7.8207%" y="111.50"></text></g><g><title>is_copy_raw (54,631 samples, 0.12%)</title><rect x="8.7284%" y="53" width="0.1182%" height="15" fill="rgb(221,193,54)"/><text x="8.9784%" y="63.50"></text></g><g><title>evaluate_obligation (51,211 samples, 0.11%)</title><rect x="8.7358%" y="37" width="0.1108%" height="15" fill="rgb(248,212,6)"/><text x="8.9858%" y="47.50"></text></g><g><title>adt_drop_tys (69,311 samples, 0.15%)</title><rect x="8.7161%" y="69" width="0.1500%" height="15" fill="rgb(208,68,35)"/><text x="8.9661%" y="79.50"></text></g><g><title>needs_drop_raw (355,134 samples, 0.77%)</title><rect x="8.6743%" y="85" width="0.7684%" height="15" fill="rgb(232,128,0)"/><text x="8.9243%" y="95.50"></text></g><g><title>is_copy_raw (266,493 samples, 0.58%)</title><rect x="8.8661%" y="69" width="0.5766%" height="15" fill="rgb(207,160,47)"/><text x="9.1161%" y="79.50"></text></g><g><title>evaluate_obligation (244,482 samples, 0.53%)</title><rect x="8.9137%" y="53" width="0.5290%" height="15" fill="rgb(228,23,34)"/><text x="9.1637%" y="63.50"></text></g><g><title>trait_impls_of (129,462 samples, 0.28%)</title><rect x="9.1625%" y="37" width="0.2801%" height="15" fill="rgb(218,30,26)"/><text x="9.4125%" y="47.50"></text></g><g><title>resolve_instance (129,213 samples, 0.28%)</title><rect x="9.4426%" y="85" width="0.2796%" height="15" fill="rgb(220,122,19)"/><text x="9.6926%" y="95.50"></text></g><g><title>thir_body (159,942 samples, 0.35%)</title><rect x="9.7375%" y="85" width="0.3460%" height="15" fill="rgb(250,228,42)"/><text x="9.9875%" y="95.50"></text></g><g><title>mir_const (1,605,348 samples, 3.47%)</title><rect x="6.6293%" y="133" width="3.4733%" height="15" fill="rgb(240,193,28)"/><text x="6.8793%" y="143.50">mir..</text></g><g><title>unsafety_check_result (1,288,535 samples, 2.79%)</title><rect x="7.3147%" y="117" width="2.7878%" height="15" fill="rgb(216,20,37)"/><text x="7.5647%" y="127.50">un..</text></g><g><title>mir_built (1,103,595 samples, 2.39%)</title><rect x="7.7148%" y="101" width="2.3877%" height="15" fill="rgb(206,188,39)"/><text x="7.9648%" y="111.50">mi..</text></g><g><title>mir_promoted (1,832,981 samples, 3.97%)</title><rect x="6.1668%" y="149" width="3.9658%" height="15" fill="rgb(217,207,13)"/><text x="6.4168%" y="159.50">mir_..</text></g><g><title>type_op_ascribe_user_type (161,672 samples, 0.35%)</title><rect x="10.1326%" y="149" width="0.3498%" height="15" fill="rgb(231,73,38)"/><text x="10.3826%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (90,550 samples, 0.20%)</title><rect x="10.4824%" y="149" width="0.1959%" height="15" fill="rgb(225,20,46)"/><text x="10.7324%" y="159.50"></text></g><g><title>normalize_projection_ty (46,760 samples, 0.10%)</title><rect x="10.5771%" y="133" width="0.1012%" height="15" fill="rgb(210,31,41)"/><text x="10.8271%" y="143.50"></text></g><g><title>type_op_prove_predicate (316,116 samples, 0.68%)</title><rect x="10.6783%" y="149" width="0.6839%" height="15" fill="rgb(221,200,47)"/><text x="10.9283%" y="159.50"></text></g><g><title>MIR_borrow_checking (4,382,459 samples, 9.48%)</title><rect x="1.8829%" y="181" width="9.4817%" height="15" fill="rgb(226,26,5)"/><text x="2.1329%" y="191.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (4,357,678 samples, 9.43%)</title><rect x="1.9365%" y="165" width="9.4281%" height="15" fill="rgb(249,33,26)"/><text x="2.1865%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (99,351 samples, 0.21%)</title><rect x="11.3803%" y="181" width="0.2150%" height="15" fill="rgb(235,183,28)"/><text x="11.6303%" y="191.50"></text></g><g><title>get_lang_items (65,591 samples, 0.14%)</title><rect x="11.9459%" y="133" width="0.1419%" height="15" fill="rgb(221,5,38)"/><text x="12.1959%" y="143.50"></text></g><g><title>codegen_fn_attrs (56,681 samples, 0.12%)</title><rect x="12.1960%" y="117" width="0.1226%" height="15" fill="rgb(247,18,42)"/><text x="12.4460%" y="127.50"></text></g><g><title>should_inherit_track_caller (109,481 samples, 0.24%)</title><rect x="12.0878%" y="133" width="0.2369%" height="15" fill="rgb(241,131,45)"/><text x="12.3378%" y="143.50"></text></g><g><title>codegen_fn_attrs (259,603 samples, 0.56%)</title><rect x="11.8148%" y="149" width="0.5617%" height="15" fill="rgb(249,31,29)"/><text x="12.0648%" y="159.50"></text></g><g><title>check_mod_attrs (342,944 samples, 0.74%)</title><rect x="11.6348%" y="165" width="0.7420%" height="15" fill="rgb(225,111,53)"/><text x="11.8848%" y="175.50"></text></g><g><title>lookup_deprecation_entry (66,151 samples, 0.14%)</title><rect x="12.6500%" y="149" width="0.1431%" height="15" fill="rgb(238,160,17)"/><text x="12.9000%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (178,082 samples, 0.39%)</title><rect x="12.5108%" y="165" width="0.3853%" height="15" fill="rgb(214,148,48)"/><text x="12.7608%" y="175.50"></text></g><g><title>misc_checking_1 (639,787 samples, 1.38%)</title><rect x="11.5961%" y="181" width="1.3842%" height="15" fill="rgb(232,36,49)"/><text x="11.8461%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (95,432 samples, 0.21%)</title><rect x="12.9830%" y="165" width="0.2065%" height="15" fill="rgb(209,103,24)"/><text x="13.2330%" y="175.50"></text></g><g><title>check_mod_liveness (72,201 samples, 0.16%)</title><rect x="13.0332%" y="149" width="0.1562%" height="15" fill="rgb(229,88,8)"/><text x="13.2832%" y="159.50"></text></g><g><title>misc_checking_2 (201,353 samples, 0.44%)</title><rect x="12.9804%" y="181" width="0.4356%" height="15" fill="rgb(213,181,19)"/><text x="13.2304%" y="191.50"></text></g><g><title>match_checking (104,711 samples, 0.23%)</title><rect x="13.1894%" y="165" width="0.2265%" height="15" fill="rgb(254,191,54)"/><text x="13.4394%" y="175.50"></text></g><g><title>check_match (96,911 samples, 0.21%)</title><rect x="13.2063%" y="149" width="0.2097%" height="15" fill="rgb(241,83,37)"/><text x="13.4563%" y="159.50"></text></g><g><title>check_private_in_public (68,901 samples, 0.15%)</title><rect x="13.4331%" y="165" width="0.1491%" height="15" fill="rgb(233,36,39)"/><text x="13.6831%" y="175.50"></text></g><g><title>death_checking (145,761 samples, 0.32%)</title><rect x="13.5822%" y="165" width="0.3154%" height="15" fill="rgb(226,3,54)"/><text x="13.8322%" y="175.50"></text></g><g><title>param_env (83,281 samples, 0.18%)</title><rect x="15.0942%" y="133" width="0.1802%" height="15" fill="rgb(245,192,40)"/><text x="15.3442%" y="143.50"></text></g><g><title>crate_lints (1,863,471 samples, 4.03%)</title><rect x="13.9009%" y="149" width="4.0317%" height="15" fill="rgb(238,167,29)"/><text x="14.1509%" y="159.50">crat..</text></g><g><title>type_of (1,228,663 samples, 2.66%)</title><rect x="15.2744%" y="133" width="2.6583%" height="15" fill="rgb(232,182,51)"/><text x="15.5244%" y="143.50">ty..</text></g><g><title>metadata_decode_entry_type_of (758,419 samples, 1.64%)</title><rect x="16.2918%" y="117" width="1.6409%" height="15" fill="rgb(231,60,39)"/><text x="16.5418%" y="127.50"></text></g><g><title>lint_checking (1,978,732 samples, 4.28%)</title><rect x="13.8975%" y="165" width="4.2811%" height="15" fill="rgb(208,69,12)"/><text x="14.1475%" y="175.50">lint_..</text></g><g><title>module_lints (113,691 samples, 0.25%)</title><rect x="17.9326%" y="149" width="0.2460%" height="15" fill="rgb(235,93,37)"/><text x="18.1826%" y="159.50"></text></g><g><title>lint_mod (111,451 samples, 0.24%)</title><rect x="17.9375%" y="133" width="0.2411%" height="15" fill="rgb(213,116,39)"/><text x="18.1875%" y="143.50"></text></g><g><title>privacy_access_levels (93,181 samples, 0.20%)</title><rect x="18.1786%" y="165" width="0.2016%" height="15" fill="rgb(222,207,29)"/><text x="18.4286%" y="175.50"></text></g><g><title>privacy_checking_modules (171,502 samples, 0.37%)</title><rect x="18.3802%" y="165" width="0.3711%" height="15" fill="rgb(206,96,30)"/><text x="18.6302%" y="175.50"></text></g><g><title>check_mod_privacy (170,062 samples, 0.37%)</title><rect x="18.3833%" y="149" width="0.3679%" height="15" fill="rgb(218,138,4)"/><text x="18.6333%" y="159.50"></text></g><g><title>misc_checking_3 (2,481,557 samples, 5.37%)</title><rect x="13.4160%" y="181" width="5.3690%" height="15" fill="rgb(250,191,14)"/><text x="13.6660%" y="191.50">misc_ch..</text></g><g><title>impl_parent (895,826 samples, 1.94%)</title><rect x="21.4145%" y="117" width="1.9382%" height="15" fill="rgb(239,60,40)"/><text x="21.6645%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (598,015 samples, 1.29%)</title><rect x="22.0588%" y="101" width="1.2938%" height="15" fill="rgb(206,27,48)"/><text x="22.3088%" y="111.50"></text></g><g><title>impl_trait_ref (3,093,158 samples, 6.69%)</title><rect x="23.3527%" y="117" width="6.6922%" height="15" fill="rgb(225,35,8)"/><text x="23.6027%" y="127.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,797,855 samples, 6.05%)</title><rect x="23.9916%" y="101" width="6.0533%" height="15" fill="rgb(250,213,24)"/><text x="24.2416%" y="111.50">metadata..</text></g><g><title>coherent_trait (5,428,901 samples, 11.75%)</title><rect x="18.8922%" y="149" width="11.7457%" height="15" fill="rgb(247,123,22)"/><text x="19.1422%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (5,417,350 samples, 11.72%)</title><rect x="18.9172%" y="133" width="11.7207%" height="15" fill="rgb(231,138,38)"/><text x="19.1672%" y="143.50">specialization_gr..</text></g><g><title>trait_impls_of (273,024 samples, 0.59%)</title><rect x="30.0473%" y="117" width="0.5907%" height="15" fill="rgb(231,145,46)"/><text x="30.2973%" y="127.50"></text></g><g><title>implementations_of_trait (67,872 samples, 0.15%)</title><rect x="30.4911%" y="101" width="0.1468%" height="15" fill="rgb(251,118,11)"/><text x="30.7411%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (49,011 samples, 0.11%)</title><rect x="30.5319%" y="85" width="0.1060%" height="15" fill="rgb(217,147,25)"/><text x="30.7819%" y="95.50"></text></g><g><title>coherence_checking (5,487,071 samples, 11.87%)</title><rect x="18.8514%" y="165" width="11.8716%" height="15" fill="rgb(247,81,37)"/><text x="19.1014%" y="175.50">coherence_checking</text></g><g><title>associated_items (61,950 samples, 0.13%)</title><rect x="36.7775%" y="117" width="0.1340%" height="15" fill="rgb(209,12,38)"/><text x="37.0275%" y="127.50"></text></g><g><title>dropck_outlives (115,512 samples, 0.25%)</title><rect x="36.9300%" y="117" width="0.2499%" height="15" fill="rgb(227,1,9)"/><text x="37.1800%" y="127.50"></text></g><g><title>adt_dtorck_constraint (54,261 samples, 0.12%)</title><rect x="37.0626%" y="101" width="0.1174%" height="15" fill="rgb(248,47,43)"/><text x="37.3126%" y="111.50"></text></g><g><title>evaluate_obligation (278,554 samples, 0.60%)</title><rect x="37.1800%" y="117" width="0.6027%" height="15" fill="rgb(221,10,30)"/><text x="37.4300%" y="127.50"></text></g><g><title>trait_impls_of (49,820 samples, 0.11%)</title><rect x="37.6748%" y="101" width="0.1078%" height="15" fill="rgb(210,229,1)"/><text x="37.9248%" y="111.50"></text></g><g><title>item_attrs (83,460 samples, 0.18%)</title><rect x="38.0517%" y="117" width="0.1806%" height="15" fill="rgb(222,148,37)"/><text x="38.3017%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (81,280 samples, 0.18%)</title><rect x="38.0564%" y="101" width="0.1759%" height="15" fill="rgb(234,67,33)"/><text x="38.3064%" y="111.50"></text></g><g><title>evaluate_obligation (62,061 samples, 0.13%)</title><rect x="38.4406%" y="101" width="0.1343%" height="15" fill="rgb(247,98,35)"/><text x="38.6906%" y="111.50"></text></g><g><title>object_safety_violations (155,392 samples, 0.34%)</title><rect x="38.3513%" y="117" width="0.3362%" height="15" fill="rgb(247,138,52)"/><text x="38.6013%" y="127.50"></text></g><g><title>predicates_of (82,961 samples, 0.18%)</title><rect x="38.7083%" y="117" width="0.1795%" height="15" fill="rgb(213,79,30)"/><text x="38.9583%" y="127.50"></text></g><g><title>predicates_defined_on (61,571 samples, 0.13%)</title><rect x="38.7546%" y="101" width="0.1332%" height="15" fill="rgb(246,177,23)"/><text x="39.0046%" y="111.50"></text></g><g><title>item_bodies_checking (3,807,943 samples, 8.24%)</title><rect x="30.7682%" y="165" width="8.2387%" height="15" fill="rgb(230,62,27)"/><text x="31.0182%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (3,806,013 samples, 8.23%)</title><rect x="30.7724%" y="149" width="8.2345%" height="15" fill="rgb(216,154,8)"/><text x="31.0224%" y="159.50">typeck_item..</text></g><g><title>typeck (3,787,213 samples, 8.19%)</title><rect x="30.8131%" y="133" width="8.1938%" height="15" fill="rgb(244,35,45)"/><text x="31.0631%" y="143.50">typeck</text></g><g><title>item_types_checking (444,275 samples, 0.96%)</title><rect x="39.0069%" y="165" width="0.9612%" height="15" fill="rgb(251,115,12)"/><text x="39.2569%" y="175.50"></text></g><g><title>check_mod_item_types (442,115 samples, 0.96%)</title><rect x="39.0116%" y="149" width="0.9565%" height="15" fill="rgb(240,54,50)"/><text x="39.2616%" y="159.50"></text></g><g><title>fn_sig (84,361 samples, 0.18%)</title><rect x="40.2441%" y="133" width="0.1825%" height="15" fill="rgb(233,84,52)"/><text x="40.4941%" y="143.50"></text></g><g><title>generics_of (76,632 samples, 0.17%)</title><rect x="40.4266%" y="133" width="0.1658%" height="15" fill="rgb(207,117,47)"/><text x="40.6766%" y="143.50"></text></g><g><title>late_bound_vars_map (134,552 samples, 0.29%)</title><rect x="41.0853%" y="85" width="0.2911%" height="15" fill="rgb(249,43,39)"/><text x="41.3353%" y="95.50"></text></g><g><title>resolve_lifetimes (128,692 samples, 0.28%)</title><rect x="41.0980%" y="69" width="0.2784%" height="15" fill="rgb(209,38,44)"/><text x="41.3480%" y="79.50"></text></g><g><title>explicit_predicates_of (325,895 samples, 0.71%)</title><rect x="40.7384%" y="101" width="0.7051%" height="15" fill="rgb(236,212,23)"/><text x="40.9884%" y="111.50"></text></g><g><title>predicates_of (574,347 samples, 1.24%)</title><rect x="40.6416%" y="133" width="1.2426%" height="15" fill="rgb(242,79,21)"/><text x="40.8916%" y="143.50"></text></g><g><title>predicates_defined_on (556,787 samples, 1.20%)</title><rect x="40.6796%" y="117" width="1.2046%" height="15" fill="rgb(211,96,35)"/><text x="40.9296%" y="127.50"></text></g><g><title>inferred_outlives_of (203,682 samples, 0.44%)</title><rect x="41.4435%" y="101" width="0.4407%" height="15" fill="rgb(253,215,40)"/><text x="41.6935%" y="111.50"></text></g><g><title>inferred_outlives_crate (190,372 samples, 0.41%)</title><rect x="41.4723%" y="85" width="0.4119%" height="15" fill="rgb(211,81,21)"/><text x="41.7223%" y="95.50"></text></g><g><title>type_of (119,032 samples, 0.26%)</title><rect x="41.6267%" y="69" width="0.2575%" height="15" fill="rgb(208,190,38)"/><text x="41.8767%" y="79.50"></text></g><g><title>type_collecting (968,981 samples, 2.10%)</title><rect x="39.9709%" y="165" width="2.0964%" height="15" fill="rgb(235,213,38)"/><text x="40.2209%" y="175.50">t..</text></g><g><title>collect_mod_item_types (961,561 samples, 2.08%)</title><rect x="39.9870%" y="149" width="2.0804%" height="15" fill="rgb(237,122,38)"/><text x="40.2370%" y="159.50">c..</text></g><g><title>evaluate_obligation (209,233 samples, 0.45%)</title><rect x="43.3718%" y="133" width="0.4527%" height="15" fill="rgb(244,218,35)"/><text x="43.6218%" y="143.50"></text></g><g><title>implied_outlives_bounds (96,991 samples, 0.21%)</title><rect x="43.8245%" y="133" width="0.2098%" height="15" fill="rgb(240,68,47)"/><text x="44.0745%" y="143.50"></text></g><g><title>param_env (71,600 samples, 0.15%)</title><rect x="44.0343%" y="133" width="0.1549%" height="15" fill="rgb(210,16,53)"/><text x="44.2843%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,005,699 samples, 2.18%)</title><rect x="42.1949%" y="149" width="2.1759%" height="15" fill="rgb(235,124,12)"/><text x="42.4449%" y="159.50">c..</text></g><g><title>region_scope_tree (60,770 samples, 0.13%)</title><rect x="44.2393%" y="133" width="0.1315%" height="15" fill="rgb(224,169,11)"/><text x="44.4893%" y="143.50"></text></g><g><title>evaluate_obligation (113,482 samples, 0.25%)</title><rect x="46.3579%" y="133" width="0.2455%" height="15" fill="rgb(250,166,2)"/><text x="46.6079%" y="143.50"></text></g><g><title>implied_outlives_bounds (48,822 samples, 0.11%)</title><rect x="46.6137%" y="133" width="0.1056%" height="15" fill="rgb(242,216,29)"/><text x="46.8637%" y="143.50"></text></g><g><title>param_env (292,383 samples, 0.63%)</title><rect x="46.7193%" y="133" width="0.6326%" height="15" fill="rgb(230,116,27)"/><text x="46.9693%" y="143.50"></text></g><g><title>check_item_well_formed (1,515,838 samples, 3.28%)</title><rect x="44.3708%" y="149" width="3.2796%" height="15" fill="rgb(228,99,48)"/><text x="44.6208%" y="159.50">che..</text></g><g><title>variances_of (60,181 samples, 0.13%)</title><rect x="47.5202%" y="133" width="0.1302%" height="15" fill="rgb(253,11,6)"/><text x="47.7702%" y="143.50"></text></g><g><title>crate_variances (56,130 samples, 0.12%)</title><rect x="47.5290%" y="117" width="0.1214%" height="15" fill="rgb(247,143,39)"/><text x="47.7790%" y="127.50"></text></g><g><title>implied_outlives_bounds (69,021 samples, 0.15%)</title><rect x="47.7500%" y="133" width="0.1493%" height="15" fill="rgb(236,97,10)"/><text x="48.0000%" y="143.50"></text></g><g><title>analysis (21,410,368 samples, 46.32%)</title><rect x="1.5885%" y="197" width="46.3225%" height="15" fill="rgb(233,208,19)"/><text x="1.8385%" y="207.50">analysis</text></g><g><title>type_check_crate (13,462,110 samples, 29.13%)</title><rect x="18.7850%" y="181" width="29.1260%" height="15" fill="rgb(216,164,2)"/><text x="19.0350%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,699,850 samples, 5.84%)</title><rect x="42.0697%" y="165" width="5.8413%" height="15" fill="rgb(220,129,5)"/><text x="42.3197%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (120,441 samples, 0.26%)</title><rect x="47.6504%" y="149" width="0.2606%" height="15" fill="rgb(242,17,10)"/><text x="47.9004%" y="159.50"></text></g><g><title>codegen_crate (399,134 samples, 0.86%)</title><rect x="47.9395%" y="197" width="0.8635%" height="15" fill="rgb(242,107,0)"/><text x="48.1895%" y="207.50"></text></g><g><title>AST_validation (113,991 samples, 0.25%)</title><rect x="49.3362%" y="181" width="0.2466%" height="15" fill="rgb(251,28,31)"/><text x="49.5862%" y="191.50"></text></g><g><title>crate_injection (100,521 samples, 0.22%)</title><rect x="49.6432%" y="181" width="0.2175%" height="15" fill="rgb(233,223,10)"/><text x="49.8932%" y="191.50"></text></g><g><title>metadata_load_macro (75,080 samples, 0.16%)</title><rect x="71.4716%" y="149" width="0.1624%" height="15" fill="rgb(215,21,27)"/><text x="71.7216%" y="159.50"></text></g><g><title>macro_expand_crate (12,744,553 samples, 27.57%)</title><rect x="49.8607%" y="181" width="27.5736%" height="15" fill="rgb(232,23,21)"/><text x="50.1107%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,728,383 samples, 27.54%)</title><rect x="49.8957%" y="165" width="27.5386%" height="15" fill="rgb(244,5,23)"/><text x="50.1457%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,680,880 samples, 5.80%)</title><rect x="71.6340%" y="149" width="5.8002%" height="15" fill="rgb(226,81,46)"/><text x="71.8840%" y="159.50">metadat..</text></g><g><title>metadata_register_crate (976,182 samples, 2.11%)</title><rect x="75.3222%" y="133" width="2.1120%" height="15" fill="rgb(247,70,30)"/><text x="75.5722%" y="143.50">m..</text></g><g><title>metadata_register_crate (79,431 samples, 0.17%)</title><rect x="77.2624%" y="117" width="0.1719%" height="15" fill="rgb(212,68,19)"/><text x="77.5124%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (187,412 samples, 0.41%)</title><rect x="77.4432%" y="181" width="0.4055%" height="15" fill="rgb(240,187,13)"/><text x="77.6932%" y="191.50"></text></g><g><title>finalize_macro_resolutions (46,310 samples, 0.10%)</title><rect x="77.9212%" y="165" width="0.1002%" height="15" fill="rgb(223,113,26)"/><text x="78.1712%" y="175.50"></text></g><g><title>late_resolve_crate (1,351,965 samples, 2.93%)</title><rect x="78.0214%" y="165" width="2.9251%" height="15" fill="rgb(206,192,2)"/><text x="78.2714%" y="175.50">la..</text></g><g><title>configure_and_expand (14,898,507 samples, 32.23%)</title><rect x="48.8031%" y="197" width="32.2338%" height="15" fill="rgb(241,108,4)"/><text x="49.0531%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,473,547 samples, 3.19%)</title><rect x="77.8487%" y="181" width="3.1881%" height="15" fill="rgb(247,173,49)"/><text x="78.0987%" y="191.50">res..</text></g><g><title>drop_ast (61,230 samples, 0.13%)</title><rect x="81.0368%" y="197" width="0.1325%" height="15" fill="rgb(224,114,35)"/><text x="81.2868%" y="207.50"></text></g><g><title>early_lint_checks (138,212 samples, 0.30%)</title><rect x="81.1979%" y="197" width="0.2990%" height="15" fill="rgb(245,159,27)"/><text x="81.4479%" y="207.50"></text></g><g><title>free_global_ctxt (2,801,191 samples, 6.06%)</title><rect x="81.4969%" y="197" width="6.0605%" height="15" fill="rgb(245,172,44)"/><text x="81.7469%" y="207.50">free_glo..</text></g><g><title>crate_hash (66,021 samples, 0.14%)</title><rect x="88.4860%" y="181" width="0.1428%" height="15" fill="rgb(236,23,11)"/><text x="88.7360%" y="191.50"></text></g><g><title>generate_crate_metadata (588,047 samples, 1.27%)</title><rect x="87.5574%" y="197" width="1.2723%" height="15" fill="rgb(205,117,38)"/><text x="87.8074%" y="207.50"></text></g><g><title>hir_lowering (863,570 samples, 1.87%)</title><rect x="88.8297%" y="197" width="1.8684%" height="15" fill="rgb(237,72,25)"/><text x="89.0797%" y="207.50">h..</text></g><g><title>link (49,111 samples, 0.11%)</title><rect x="90.6981%" y="197" width="0.1063%" height="15" fill="rgb(244,70,9)"/><text x="90.9481%" y="207.50"></text></g><g><title>parse_crate (3,225,246 samples, 6.98%)</title><rect x="90.8043%" y="197" width="6.9780%" height="15" fill="rgb(217,125,39)"/><text x="91.0543%" y="207.50">parse_cra..</text></g><g><title>prepare_outputs (195,342 samples, 0.42%)</title><rect x="97.8065%" y="197" width="0.4226%" height="15" fill="rgb(235,36,10)"/><text x="98.0565%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (428,585 samples, 0.93%)</title><rect x="98.2291%" y="197" width="0.9273%" height="15" fill="rgb(251,123,47)"/><text x="98.4791%" y="207.50"></text></g><g><title>setup_global_ctxt (92,271 samples, 0.20%)</title><rect x="99.1840%" y="197" width="0.1996%" height="15" fill="rgb(221,13,13)"/><text x="99.4340%" y="207.50"></text></g><g><title>all (46,220,206 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (46,220,206 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (284,893 samples, 0.62%)</title><rect x="99.3836%" y="197" width="0.6164%" height="15" fill="rgb(245,182,24)"/><text x="99.6336%" y="207.50"></text></g></svg></svg>