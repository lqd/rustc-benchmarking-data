<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (110,183 samples, 0.16%)</title><rect x="7.2299%" y="149" width="0.1644%" height="15" fill="rgb(227,0,7)"/><text x="7.4799%" y="159.50"></text></g><g><title>item_attrs (120,251 samples, 0.18%)</title><rect x="7.6924%" y="117" width="0.1794%" height="15" fill="rgb(217,0,24)"/><text x="7.9424%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (117,601 samples, 0.18%)</title><rect x="7.6964%" y="101" width="0.1755%" height="15" fill="rgb(221,193,54)"/><text x="7.9464%" y="111.50"></text></g><g><title>codegen_fn_attrs (167,711 samples, 0.25%)</title><rect x="7.6307%" y="133" width="0.2502%" height="15" fill="rgb(248,212,6)"/><text x="7.8807%" y="143.50"></text></g><g><title>adt_drop_tys (99,920 samples, 0.15%)</title><rect x="9.3039%" y="101" width="0.1491%" height="15" fill="rgb(208,68,35)"/><text x="9.5539%" y="111.50"></text></g><g><title>needs_drop_raw (237,962 samples, 0.36%)</title><rect x="9.2735%" y="117" width="0.3550%" height="15" fill="rgb(232,128,0)"/><text x="9.5235%" y="127.50"></text></g><g><title>is_copy_raw (117,662 samples, 0.18%)</title><rect x="9.4530%" y="101" width="0.1755%" height="15" fill="rgb(207,160,47)"/><text x="9.7030%" y="111.50"></text></g><g><title>evaluate_obligation (95,612 samples, 0.14%)</title><rect x="9.4859%" y="85" width="0.1426%" height="15" fill="rgb(228,23,34)"/><text x="9.7359%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (108,651 samples, 0.16%)</title><rect x="9.7175%" y="101" width="0.1621%" height="15" fill="rgb(218,30,26)"/><text x="9.9675%" y="111.50"></text></g><g><title>specialization_graph_of (338,704 samples, 0.51%)</title><rect x="9.9079%" y="101" width="0.5053%" height="15" fill="rgb(220,122,19)"/><text x="10.1579%" y="111.50"></text></g><g><title>impl_trait_ref (196,724 samples, 0.29%)</title><rect x="10.1197%" y="85" width="0.2935%" height="15" fill="rgb(250,228,42)"/><text x="10.3697%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (177,034 samples, 0.26%)</title><rect x="10.1491%" y="69" width="0.2641%" height="15" fill="rgb(240,193,28)"/><text x="10.3991%" y="79.50"></text></g><g><title>resolve_instance (571,396 samples, 0.85%)</title><rect x="9.6285%" y="117" width="0.8525%" height="15" fill="rgb(216,20,37)"/><text x="9.8785%" y="127.50"></text></g><g><title>thir_body (382,725 samples, 0.57%)</title><rect x="10.4970%" y="117" width="0.5710%" height="15" fill="rgb(206,188,39)"/><text x="10.7470%" y="127.50"></text></g><g><title>mir_const (2,884,265 samples, 4.30%)</title><rect x="6.7741%" y="165" width="4.3031%" height="15" fill="rgb(217,207,13)"/><text x="7.0241%" y="175.50">mir_c..</text></g><g><title>unsafety_check_result (2,468,596 samples, 3.68%)</title><rect x="7.3943%" y="149" width="3.6829%" height="15" fill="rgb(231,73,38)"/><text x="7.6443%" y="159.50">unsa..</text></g><g><title>mir_built (2,142,445 samples, 3.20%)</title><rect x="7.8809%" y="133" width="3.1963%" height="15" fill="rgb(225,20,46)"/><text x="8.1309%" y="143.50">mir..</text></g><g><title>mir_promoted (3,164,846 samples, 4.72%)</title><rect x="6.3745%" y="181" width="4.7217%" height="15" fill="rgb(210,31,41)"/><text x="6.6245%" y="191.50">mir_pr..</text></g><g><title>type_op_normalize_fn_sig (78,371 samples, 0.12%)</title><rect x="11.1107%" y="181" width="0.1169%" height="15" fill="rgb(221,200,47)"/><text x="11.3607%" y="191.50"></text></g><g><title>type_op_normalize_predicate (117,251 samples, 0.17%)</title><rect x="11.2277%" y="181" width="0.1749%" height="15" fill="rgb(226,26,5)"/><text x="11.4777%" y="191.50"></text></g><g><title>MIR_borrow_checking (7,028,057 samples, 10.49%)</title><rect x="1.4768%" y="213" width="10.4853%" height="15" fill="rgb(249,33,26)"/><text x="1.7268%" y="223.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (7,001,836 samples, 10.45%)</title><rect x="1.5159%" y="197" width="10.4461%" height="15" fill="rgb(235,183,28)"/><text x="1.7659%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (375,003 samples, 0.56%)</title><rect x="11.4026%" y="181" width="0.5595%" height="15" fill="rgb(221,5,38)"/><text x="11.6526%" y="191.50"></text></g><g><title>hir_module_items (164,891 samples, 0.25%)</title><rect x="11.9776%" y="213" width="0.2460%" height="15" fill="rgb(247,18,42)"/><text x="12.2276%" y="223.50"></text></g><g><title>codegen_fn_attrs (218,494 samples, 0.33%)</title><rect x="12.5256%" y="181" width="0.3260%" height="15" fill="rgb(241,131,45)"/><text x="12.7756%" y="191.50"></text></g><g><title>check_mod_attrs (387,385 samples, 0.58%)</title><rect x="12.2739%" y="197" width="0.5779%" height="15" fill="rgb(249,31,29)"/><text x="12.5239%" y="207.50"></text></g><g><title>check_mod_const_bodies (76,330 samples, 0.11%)</title><rect x="12.8519%" y="197" width="0.1139%" height="15" fill="rgb(225,111,53)"/><text x="13.1019%" y="207.50"></text></g><g><title>lint_levels (97,411 samples, 0.15%)</title><rect x="13.1985%" y="181" width="0.1453%" height="15" fill="rgb(238,160,17)"/><text x="13.4485%" y="191.50"></text></g><g><title>lookup_deprecation_entry (75,301 samples, 0.11%)</title><rect x="13.3438%" y="181" width="0.1123%" height="15" fill="rgb(214,148,48)"/><text x="13.5938%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (321,454 samples, 0.48%)</title><rect x="13.0409%" y="197" width="0.4796%" height="15" fill="rgb(232,36,49)"/><text x="13.2909%" y="207.50"></text></g><g><title>misc_checking_1 (921,430 samples, 1.37%)</title><rect x="12.2242%" y="213" width="1.3747%" height="15" fill="rgb(209,103,24)"/><text x="12.4742%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (183,002 samples, 0.27%)</title><rect x="13.6011%" y="197" width="0.2730%" height="15" fill="rgb(229,88,8)"/><text x="13.8511%" y="207.50"></text></g><g><title>check_mod_liveness (147,670 samples, 0.22%)</title><rect x="13.6538%" y="181" width="0.2203%" height="15" fill="rgb(213,181,19)"/><text x="13.9038%" y="191.50"></text></g><g><title>misc_checking_2 (373,085 samples, 0.56%)</title><rect x="13.5989%" y="213" width="0.5566%" height="15" fill="rgb(254,191,54)"/><text x="13.8489%" y="223.50"></text></g><g><title>match_checking (188,613 samples, 0.28%)</title><rect x="13.8741%" y="197" width="0.2814%" height="15" fill="rgb(241,83,37)"/><text x="14.1241%" y="207.50"></text></g><g><title>check_match (179,713 samples, 0.27%)</title><rect x="13.8874%" y="181" width="0.2681%" height="15" fill="rgb(233,36,39)"/><text x="14.1374%" y="191.50"></text></g><g><title>death_checking (68,910 samples, 0.10%)</title><rect x="14.2257%" y="197" width="0.1028%" height="15" fill="rgb(226,3,54)"/><text x="14.4757%" y="207.50"></text></g><g><title>crate_lints (154,081 samples, 0.23%)</title><rect x="14.3303%" y="181" width="0.2299%" height="15" fill="rgb(245,192,40)"/><text x="14.5803%" y="191.50"></text></g><g><title>lint_checking (279,803 samples, 0.42%)</title><rect x="14.3285%" y="197" width="0.4174%" height="15" fill="rgb(238,167,29)"/><text x="14.5785%" y="207.50"></text></g><g><title>module_lints (124,562 samples, 0.19%)</title><rect x="14.5601%" y="181" width="0.1858%" height="15" fill="rgb(232,182,51)"/><text x="14.8101%" y="191.50"></text></g><g><title>lint_mod (122,122 samples, 0.18%)</title><rect x="14.5638%" y="165" width="0.1822%" height="15" fill="rgb(231,60,39)"/><text x="14.8138%" y="175.50"></text></g><g><title>privacy_checking_modules (122,151 samples, 0.18%)</title><rect x="14.8163%" y="197" width="0.1822%" height="15" fill="rgb(208,69,12)"/><text x="15.0663%" y="207.50"></text></g><g><title>check_mod_privacy (120,491 samples, 0.18%)</title><rect x="14.8188%" y="181" width="0.1798%" height="15" fill="rgb(235,93,37)"/><text x="15.0688%" y="191.50"></text></g><g><title>misc_checking_3 (579,656 samples, 0.86%)</title><rect x="14.1555%" y="213" width="0.8648%" height="15" fill="rgb(213,116,39)"/><text x="14.4055%" y="223.50"></text></g><g><title>associated_item (498,425 samples, 0.74%)</title><rect x="30.4520%" y="133" width="0.7436%" height="15" fill="rgb(222,207,29)"/><text x="30.7020%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (374,904 samples, 0.56%)</title><rect x="30.6363%" y="117" width="0.5593%" height="15" fill="rgb(206,96,30)"/><text x="30.8863%" y="127.50"></text></g><g><title>associated_items (725,617 samples, 1.08%)</title><rect x="30.1530%" y="149" width="1.0826%" height="15" fill="rgb(218,138,4)"/><text x="30.4030%" y="159.50"></text></g><g><title>generics_of (1,019,014 samples, 1.52%)</title><rect x="39.2343%" y="133" width="1.5203%" height="15" fill="rgb(250,191,14)"/><text x="39.4843%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (682,636 samples, 1.02%)</title><rect x="39.7361%" y="117" width="1.0184%" height="15" fill="rgb(239,60,40)"/><text x="39.9861%" y="127.50"></text></g><g><title>impl_item_implementor_ids (144,761 samples, 0.22%)</title><rect x="40.7546%" y="133" width="0.2160%" height="15" fill="rgb(206,27,48)"/><text x="41.0046%" y="143.50"></text></g><g><title>associated_items (126,691 samples, 0.19%)</title><rect x="40.7815%" y="117" width="0.1890%" height="15" fill="rgb(225,35,8)"/><text x="41.0315%" y="127.50"></text></g><g><title>impl_polarity (212,283 samples, 0.32%)</title><rect x="40.9705%" y="133" width="0.3167%" height="15" fill="rgb(250,213,24)"/><text x="41.2205%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_polarity (101,613 samples, 0.15%)</title><rect x="41.1356%" y="117" width="0.1516%" height="15" fill="rgb(247,123,22)"/><text x="41.3856%" y="127.50"></text></g><g><title>impl_trait_ref (1,403,452 samples, 2.09%)</title><rect x="41.2872%" y="133" width="2.0938%" height="15" fill="rgb(231,138,38)"/><text x="41.5372%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,080,501 samples, 1.61%)</title><rect x="41.7690%" y="117" width="1.6120%" height="15" fill="rgb(231,145,46)"/><text x="42.0190%" y="127.50"></text></g><g><title>issue33140_self_ty (80,510 samples, 0.12%)</title><rect x="43.3811%" y="133" width="0.1201%" height="15" fill="rgb(251,118,11)"/><text x="43.6311%" y="143.50"></text></g><g><title>opt_def_kind (195,592 samples, 0.29%)</title><rect x="43.9989%" y="117" width="0.2918%" height="15" fill="rgb(217,147,25)"/><text x="44.2489%" y="127.50"></text></g><g><title>metadata_decode_entry_opt_def_kind (101,221 samples, 0.15%)</title><rect x="44.1397%" y="101" width="0.1510%" height="15" fill="rgb(247,81,37)"/><text x="44.3897%" y="111.50"></text></g><g><title>explicit_predicates_of (178,672 samples, 0.27%)</title><rect x="44.7849%" y="101" width="0.2666%" height="15" fill="rgb(209,12,38)"/><text x="45.0349%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (70,971 samples, 0.11%)</title><rect x="44.9456%" y="85" width="0.1059%" height="15" fill="rgb(227,1,9)"/><text x="45.1956%" y="95.50"></text></g><g><title>predicates_of (1,182,452 samples, 1.76%)</title><rect x="43.5242%" y="133" width="1.7641%" height="15" fill="rgb(248,47,43)"/><text x="43.7742%" y="143.50"></text></g><g><title>predicates_defined_on (668,708 samples, 1.00%)</title><rect x="44.2907%" y="117" width="0.9977%" height="15" fill="rgb(221,10,30)"/><text x="44.5407%" y="127.50"></text></g><g><title>inferred_outlives_of (158,792 samples, 0.24%)</title><rect x="45.0514%" y="101" width="0.2369%" height="15" fill="rgb(210,229,1)"/><text x="45.3014%" y="111.50"></text></g><g><title>specializes (3,192,692 samples, 4.76%)</title><rect x="45.2883%" y="133" width="4.7632%" height="15" fill="rgb(222,148,37)"/><text x="45.5383%" y="143.50">specia..</text></g><g><title>param_env (1,944,768 samples, 2.90%)</title><rect x="47.1501%" y="117" width="2.9014%" height="15" fill="rgb(234,67,33)"/><text x="47.4001%" y="127.50">pa..</text></g><g><title>def_span (799,076 samples, 1.19%)</title><rect x="48.8594%" y="101" width="1.1922%" height="15" fill="rgb(247,98,35)"/><text x="49.1094%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (699,076 samples, 1.04%)</title><rect x="49.0086%" y="85" width="1.0430%" height="15" fill="rgb(247,138,52)"/><text x="49.2586%" y="95.50"></text></g><g><title>trait_impls_of (706,425 samples, 1.05%)</title><rect x="50.0925%" y="133" width="1.0539%" height="15" fill="rgb(213,79,30)"/><text x="50.3425%" y="143.50"></text></g><g><title>implementations_of_trait (283,102 samples, 0.42%)</title><rect x="50.7241%" y="117" width="0.4224%" height="15" fill="rgb(246,177,23)"/><text x="50.9741%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (261,301 samples, 0.39%)</title><rect x="50.7566%" y="101" width="0.3898%" height="15" fill="rgb(230,62,27)"/><text x="51.0066%" y="111.50"></text></g><g><title>evaluate_obligation (13,289,406 samples, 19.83%)</title><rect x="31.3649%" y="149" width="19.8267%" height="15" fill="rgb(216,154,8)"/><text x="31.6149%" y="159.50">evaluate_obligation</text></g><g><title>fn_sig (119,850 samples, 0.18%)</title><rect x="51.2284%" y="149" width="0.1788%" height="15" fill="rgb(244,35,45)"/><text x="51.4784%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (103,290 samples, 0.15%)</title><rect x="51.2532%" y="133" width="0.1541%" height="15" fill="rgb(251,115,12)"/><text x="51.5032%" y="143.50"></text></g><g><title>generics_of (179,871 samples, 0.27%)</title><rect x="51.4073%" y="149" width="0.2684%" height="15" fill="rgb(240,54,50)"/><text x="51.6573%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (119,291 samples, 0.18%)</title><rect x="51.4976%" y="133" width="0.1780%" height="15" fill="rgb(233,84,52)"/><text x="51.7476%" y="143.50"></text></g><g><title>impl_item_implementor_ids (120,423 samples, 0.18%)</title><rect x="51.6756%" y="149" width="0.1797%" height="15" fill="rgb(207,117,47)"/><text x="51.9256%" y="159.50"></text></g><g><title>associated_items (100,712 samples, 0.15%)</title><rect x="51.7050%" y="133" width="0.1503%" height="15" fill="rgb(249,43,39)"/><text x="51.9550%" y="143.50"></text></g><g><title>impl_trait_ref (122,832 samples, 0.18%)</title><rect x="51.8861%" y="149" width="0.1833%" height="15" fill="rgb(209,38,44)"/><text x="52.1361%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (99,031 samples, 0.15%)</title><rect x="51.9216%" y="133" width="0.1477%" height="15" fill="rgb(236,212,23)"/><text x="52.1716%" y="143.50"></text></g><g><title>item_attrs (259,515 samples, 0.39%)</title><rect x="52.0814%" y="149" width="0.3872%" height="15" fill="rgb(242,79,21)"/><text x="52.3314%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (242,585 samples, 0.36%)</title><rect x="52.1066%" y="133" width="0.3619%" height="15" fill="rgb(211,96,35)"/><text x="52.3566%" y="143.50"></text></g><g><title>explicit_predicates_of (108,552 samples, 0.16%)</title><rect x="53.1041%" y="117" width="0.1620%" height="15" fill="rgb(253,215,40)"/><text x="53.3541%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (74,161 samples, 0.11%)</title><rect x="53.1554%" y="101" width="0.1106%" height="15" fill="rgb(211,81,21)"/><text x="53.4054%" y="111.50"></text></g><g><title>predicates_of (460,578 samples, 0.69%)</title><rect x="52.6835%" y="149" width="0.6871%" height="15" fill="rgb(208,190,38)"/><text x="52.9335%" y="159.50"></text></g><g><title>predicates_defined_on (275,465 samples, 0.41%)</title><rect x="52.9597%" y="133" width="0.4110%" height="15" fill="rgb(235,213,38)"/><text x="53.2097%" y="143.50"></text></g><g><title>inferred_outlives_of (70,161 samples, 0.10%)</title><rect x="53.2660%" y="117" width="0.1047%" height="15" fill="rgb(237,122,38)"/><text x="53.5160%" y="127.50"></text></g><g><title>specializes (181,133 samples, 0.27%)</title><rect x="53.3707%" y="149" width="0.2702%" height="15" fill="rgb(244,218,35)"/><text x="53.6207%" y="159.50"></text></g><g><title>param_env (90,242 samples, 0.13%)</title><rect x="53.5063%" y="133" width="0.1346%" height="15" fill="rgb(240,68,47)"/><text x="53.7563%" y="143.50"></text></g><g><title>type_of (78,670 samples, 0.12%)</title><rect x="53.6784%" y="149" width="0.1174%" height="15" fill="rgb(210,16,53)"/><text x="53.9284%" y="159.50"></text></g><g><title>adt_def (75,501 samples, 0.11%)</title><rect x="59.7756%" y="117" width="0.1126%" height="15" fill="rgb(235,124,12)"/><text x="60.0256%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (72,581 samples, 0.11%)</title><rect x="59.7800%" y="101" width="0.1083%" height="15" fill="rgb(224,169,11)"/><text x="60.0300%" y="111.50"></text></g><g><title>adt_sized_constraint (168,913 samples, 0.25%)</title><rect x="59.7482%" y="133" width="0.2520%" height="15" fill="rgb(250,166,2)"/><text x="59.9982%" y="143.50"></text></g><g><title>associated_item (456,634 samples, 0.68%)</title><rect x="60.2205%" y="117" width="0.6813%" height="15" fill="rgb(242,216,29)"/><text x="60.4705%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (365,904 samples, 0.55%)</title><rect x="60.3558%" y="101" width="0.5459%" height="15" fill="rgb(230,116,27)"/><text x="60.6058%" y="111.50"></text></g><g><title>associated_items (629,726 samples, 0.94%)</title><rect x="60.0045%" y="133" width="0.9395%" height="15" fill="rgb(228,99,48)"/><text x="60.2545%" y="143.50"></text></g><g><title>coherent_trait (128,032 samples, 0.19%)</title><rect x="61.2458%" y="53" width="0.1910%" height="15" fill="rgb(253,11,6)"/><text x="61.4958%" y="63.50"></text></g><g><title>specialization_graph_of (121,182 samples, 0.18%)</title><rect x="61.2560%" y="37" width="0.1808%" height="15" fill="rgb(247,143,39)"/><text x="61.5060%" y="47.50"></text></g><g><title>adt_destructor (139,472 samples, 0.21%)</title><rect x="61.2330%" y="85" width="0.2081%" height="15" fill="rgb(236,97,10)"/><text x="61.4830%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (137,602 samples, 0.21%)</title><rect x="61.2358%" y="69" width="0.2053%" height="15" fill="rgb(233,208,19)"/><text x="61.4858%" y="79.50"></text></g><g><title>adt_dtorck_constraint (223,402 samples, 0.33%)</title><rect x="61.1331%" y="101" width="0.3333%" height="15" fill="rgb(216,164,2)"/><text x="61.3831%" y="111.50"></text></g><g><title>dropck_outlives (335,625 samples, 0.50%)</title><rect x="60.9867%" y="133" width="0.5007%" height="15" fill="rgb(220,129,5)"/><text x="61.2367%" y="143.50"></text></g><g><title>adt_dtorck_constraint (269,193 samples, 0.40%)</title><rect x="61.0858%" y="117" width="0.4016%" height="15" fill="rgb(242,17,10)"/><text x="61.3358%" y="127.50"></text></g><g><title>generics_of (508,825 samples, 0.76%)</title><rect x="64.4373%" y="117" width="0.7591%" height="15" fill="rgb(242,107,0)"/><text x="64.6873%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (376,964 samples, 0.56%)</title><rect x="64.6340%" y="101" width="0.5624%" height="15" fill="rgb(251,28,31)"/><text x="64.8840%" y="111.50"></text></g><g><title>impl_item_implementor_ids (67,651 samples, 0.10%)</title><rect x="65.1964%" y="117" width="0.1009%" height="15" fill="rgb(233,223,10)"/><text x="65.4464%" y="127.50"></text></g><g><title>impl_trait_ref (778,556 samples, 1.16%)</title><rect x="65.3757%" y="117" width="1.1615%" height="15" fill="rgb(215,21,27)"/><text x="65.6257%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (655,303 samples, 0.98%)</title><rect x="65.5595%" y="101" width="0.9777%" height="15" fill="rgb(232,23,21)"/><text x="65.8095%" y="111.50"></text></g><g><title>explicit_predicates_of (86,812 samples, 0.13%)</title><rect x="66.9147%" y="85" width="0.1295%" height="15" fill="rgb(244,5,23)"/><text x="67.1647%" y="95.50"></text></g><g><title>predicates_of (368,255 samples, 0.55%)</title><rect x="66.5753%" y="117" width="0.5494%" height="15" fill="rgb(226,81,46)"/><text x="66.8253%" y="127.50"></text></g><g><title>predicates_defined_on (217,614 samples, 0.32%)</title><rect x="66.8001%" y="101" width="0.3247%" height="15" fill="rgb(247,70,30)"/><text x="67.0501%" y="111.50"></text></g><g><title>specializes (948,431 samples, 1.41%)</title><rect x="67.1247%" y="117" width="1.4150%" height="15" fill="rgb(212,68,19)"/><text x="67.3747%" y="127.50"></text></g><g><title>param_env (538,948 samples, 0.80%)</title><rect x="67.7356%" y="101" width="0.8041%" height="15" fill="rgb(240,187,13)"/><text x="67.9856%" y="111.50"></text></g><g><title>def_span (260,773 samples, 0.39%)</title><rect x="68.1507%" y="85" width="0.3891%" height="15" fill="rgb(223,113,26)"/><text x="68.4007%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (235,333 samples, 0.35%)</title><rect x="68.1886%" y="69" width="0.3511%" height="15" fill="rgb(206,192,2)"/><text x="68.4386%" y="79.50"></text></g><g><title>trait_impls_of (371,547 samples, 0.55%)</title><rect x="68.5527%" y="117" width="0.5543%" height="15" fill="rgb(241,108,4)"/><text x="68.8027%" y="127.50"></text></g><g><title>implementations_of_trait (126,215 samples, 0.19%)</title><rect x="68.9187%" y="101" width="0.1883%" height="15" fill="rgb(247,173,49)"/><text x="69.1687%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (116,995 samples, 0.17%)</title><rect x="68.9325%" y="85" width="0.1745%" height="15" fill="rgb(224,114,35)"/><text x="69.1825%" y="95.50"></text></g><g><title>evaluate_obligation (5,139,837 samples, 7.67%)</title><rect x="61.4874%" y="133" width="7.6682%" height="15" fill="rgb(245,159,27)"/><text x="61.7374%" y="143.50">evaluate_o..</text></g><g><title>fn_sig (106,021 samples, 0.16%)</title><rect x="69.1686%" y="133" width="0.1582%" height="15" fill="rgb(245,172,44)"/><text x="69.4186%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (98,631 samples, 0.15%)</title><rect x="69.1796%" y="117" width="0.1471%" height="15" fill="rgb(236,23,11)"/><text x="69.4296%" y="127.50"></text></g><g><title>is_copy_raw (273,493 samples, 0.41%)</title><rect x="69.5974%" y="133" width="0.4080%" height="15" fill="rgb(205,117,38)"/><text x="69.8474%" y="143.50"></text></g><g><title>evaluate_obligation (245,883 samples, 0.37%)</title><rect x="69.6385%" y="117" width="0.3668%" height="15" fill="rgb(237,72,25)"/><text x="69.8885%" y="127.50"></text></g><g><title>trait_impls_of (76,441 samples, 0.11%)</title><rect x="69.8913%" y="101" width="0.1140%" height="15" fill="rgb(244,70,9)"/><text x="70.1413%" y="111.50"></text></g><g><title>method_autoderef_steps (190,822 samples, 0.28%)</title><rect x="70.0300%" y="133" width="0.2847%" height="15" fill="rgb(217,125,39)"/><text x="70.2800%" y="143.50"></text></g><g><title>evaluate_obligation (118,561 samples, 0.18%)</title><rect x="70.1378%" y="117" width="0.1769%" height="15" fill="rgb(235,36,10)"/><text x="70.3878%" y="127.50"></text></g><g><title>explicit_predicates_of (133,983 samples, 0.20%)</title><rect x="70.5143%" y="101" width="0.1999%" height="15" fill="rgb(251,123,47)"/><text x="70.7643%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (111,943 samples, 0.17%)</title><rect x="70.5472%" y="85" width="0.1670%" height="15" fill="rgb(221,13,13)"/><text x="70.7972%" y="95.50"></text></g><g><title>predicates_of (277,684 samples, 0.41%)</title><rect x="70.3492%" y="133" width="0.4143%" height="15" fill="rgb(238,131,9)"/><text x="70.5992%" y="143.50"></text></g><g><title>predicates_defined_on (224,694 samples, 0.34%)</title><rect x="70.4282%" y="117" width="0.3352%" height="15" fill="rgb(211,50,8)"/><text x="70.6782%" y="127.50"></text></g><g><title>typeck (11,581,479 samples, 17.28%)</title><rect x="53.7957%" y="149" width="17.2786%" height="15" fill="rgb(245,182,24)"/><text x="54.0457%" y="159.50">typeck</text></g><g><title>item_bodies_checking (37,521,105 samples, 55.98%)</title><rect x="15.1221%" y="197" width="55.9783%" height="15" fill="rgb(242,14,37)"/><text x="15.3721%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (37,517,595 samples, 55.97%)</title><rect x="15.1274%" y="181" width="55.9731%" height="15" fill="rgb(246,228,12)"/><text x="15.3774%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (37,485,803 samples, 55.93%)</title><rect x="15.1748%" y="165" width="55.9257%" height="15" fill="rgb(213,55,15)"/><text x="15.4248%" y="175.50">typeck</text></g><g><title>fn_sig (132,581 samples, 0.20%)</title><rect x="71.3266%" y="165" width="0.1978%" height="15" fill="rgb(209,9,3)"/><text x="71.5766%" y="175.50"></text></g><g><title>named_region_map (181,302 samples, 0.27%)</title><rect x="71.6444%" y="149" width="0.2705%" height="15" fill="rgb(230,59,30)"/><text x="71.8944%" y="159.50"></text></g><g><title>resolve_lifetimes (167,502 samples, 0.25%)</title><rect x="71.6650%" y="133" width="0.2499%" height="15" fill="rgb(209,121,21)"/><text x="71.9150%" y="143.50"></text></g><g><title>generics_of (278,254 samples, 0.42%)</title><rect x="71.5244%" y="165" width="0.4151%" height="15" fill="rgb(220,109,13)"/><text x="71.7744%" y="175.50"></text></g><g><title>predicates_of (78,670 samples, 0.12%)</title><rect x="71.9395%" y="165" width="0.1174%" height="15" fill="rgb(232,18,1)"/><text x="72.1895%" y="175.50"></text></g><g><title>type_collecting (658,527 samples, 0.98%)</title><rect x="71.1146%" y="197" width="0.9825%" height="15" fill="rgb(215,41,42)"/><text x="71.3646%" y="207.50"></text></g><g><title>collect_mod_item_types (636,047 samples, 0.95%)</title><rect x="71.1482%" y="181" width="0.9489%" height="15" fill="rgb(224,123,36)"/><text x="71.3982%" y="191.50"></text></g><g><title>evaluate_obligation (77,821 samples, 0.12%)</title><rect x="73.2504%" y="165" width="0.1161%" height="15" fill="rgb(240,125,3)"/><text x="73.5004%" y="175.50"></text></g><g><title>implied_outlives_bounds (100,331 samples, 0.15%)</title><rect x="73.3665%" y="165" width="0.1497%" height="15" fill="rgb(205,98,50)"/><text x="73.6165%" y="175.50"></text></g><g><title>param_env (276,983 samples, 0.41%)</title><rect x="73.5162%" y="165" width="0.4132%" height="15" fill="rgb(205,185,37)"/><text x="73.7662%" y="175.50"></text></g><g><title>analysis (49,049,483 samples, 73.18%)</title><rect x="1.1084%" y="229" width="73.1777%" height="15" fill="rgb(238,207,15)"/><text x="1.3584%" y="239.50">analysis</text></g><g><title>type_check_crate (39,724,599 samples, 59.27%)</title><rect x="15.0203%" y="213" width="59.2657%" height="15" fill="rgb(213,199,42)"/><text x="15.2703%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,465,406 samples, 2.19%)</title><rect x="72.0998%" y="197" width="2.1863%" height="15" fill="rgb(235,201,11)"/><text x="72.3498%" y="207.50">w..</text></g><g><title>check_item_well_formed (1,391,816 samples, 2.08%)</title><rect x="72.2096%" y="181" width="2.0765%" height="15" fill="rgb(207,46,11)"/><text x="72.4596%" y="191.50">c..</text></g><g><title>region_scope_tree (239,054 samples, 0.36%)</title><rect x="73.9294%" y="165" width="0.3566%" height="15" fill="rgb(241,35,35)"/><text x="74.1794%" y="175.50"></text></g><g><title>codegen_crate (268,983 samples, 0.40%)</title><rect x="74.3007%" y="229" width="0.4013%" height="15" fill="rgb(243,32,47)"/><text x="74.5507%" y="239.50"></text></g><g><title>AST_validation (109,391 samples, 0.16%)</title><rect x="74.9942%" y="213" width="0.1632%" height="15" fill="rgb(247,202,23)"/><text x="75.2442%" y="223.50"></text></g><g><title>crate_injection (89,341 samples, 0.13%)</title><rect x="75.2156%" y="213" width="0.1333%" height="15" fill="rgb(219,102,11)"/><text x="75.4656%" y="223.50"></text></g><g><title>metadata_load_macro (85,971 samples, 0.13%)</title><rect x="86.9835%" y="181" width="0.1283%" height="15" fill="rgb(243,110,44)"/><text x="87.2335%" y="191.50"></text></g><g><title>metadata_register_crate (185,392 samples, 0.28%)</title><rect x="87.1117%" y="181" width="0.2766%" height="15" fill="rgb(222,74,54)"/><text x="87.3617%" y="191.50"></text></g><g><title>macro_expand_crate (8,165,851 samples, 12.18%)</title><rect x="75.3488%" y="213" width="12.1828%" height="15" fill="rgb(216,99,12)"/><text x="75.5988%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (8,142,090 samples, 12.15%)</title><rect x="75.3843%" y="197" width="12.1473%" height="15" fill="rgb(226,22,26)"/><text x="75.6343%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (96,040 samples, 0.14%)</title><rect x="87.3883%" y="181" width="0.1433%" height="15" fill="rgb(217,163,10)"/><text x="87.6383%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (83,581 samples, 0.12%)</title><rect x="87.5379%" y="213" width="0.1247%" height="15" fill="rgb(213,25,53)"/><text x="87.7879%" y="223.50"></text></g><g><title>finalize_imports (329,744 samples, 0.49%)</title><rect x="87.6774%" y="197" width="0.4920%" height="15" fill="rgb(252,105,26)"/><text x="87.9274%" y="207.50"></text></g><g><title>late_resolve_crate (1,611,738 samples, 2.40%)</title><rect x="88.1996%" y="197" width="2.4046%" height="15" fill="rgb(220,39,43)"/><text x="88.4496%" y="207.50">la..</text></g><g><title>configure_and_expand (10,748,999 samples, 16.04%)</title><rect x="74.7020%" y="229" width="16.0366%" height="15" fill="rgb(229,68,48)"/><text x="74.9520%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,061,783 samples, 3.08%)</title><rect x="87.6626%" y="213" width="3.0760%" height="15" fill="rgb(252,8,32)"/><text x="87.9126%" y="223.50">res..</text></g><g><title>drop_ast (120,052 samples, 0.18%)</title><rect x="90.7386%" y="229" width="0.1791%" height="15" fill="rgb(223,20,43)"/><text x="90.9886%" y="239.50"></text></g><g><title>early_lint_checks (244,263 samples, 0.36%)</title><rect x="90.9387%" y="229" width="0.3644%" height="15" fill="rgb(229,81,49)"/><text x="91.1887%" y="239.50"></text></g><g><title>free_global_ctxt (1,621,738 samples, 2.42%)</title><rect x="91.3031%" y="229" width="2.4195%" height="15" fill="rgb(236,28,36)"/><text x="91.5531%" y="239.50">fr..</text></g><g><title>generate_crate_metadata (328,224 samples, 0.49%)</title><rect x="93.7226%" y="229" width="0.4897%" height="15" fill="rgb(249,185,26)"/><text x="93.9726%" y="239.50"></text></g><g><title>hir_lowering (1,456,626 samples, 2.17%)</title><rect x="94.2123%" y="229" width="2.1732%" height="15" fill="rgb(249,174,33)"/><text x="94.4623%" y="239.50">h..</text></g><g><title>parse_crate (1,123,653 samples, 1.68%)</title><rect x="96.4441%" y="229" width="1.6764%" height="15" fill="rgb(233,201,37)"/><text x="96.6941%" y="239.50"></text></g><g><title>prepare_outputs (294,633 samples, 0.44%)</title><rect x="98.1426%" y="229" width="0.4396%" height="15" fill="rgb(221,78,26)"/><text x="98.3926%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (561,987 samples, 0.84%)</title><rect x="98.5822%" y="229" width="0.8384%" height="15" fill="rgb(250,127,30)"/><text x="98.8322%" y="239.50"></text></g><g><title>setup_global_ctxt (136,922 samples, 0.20%)</title><rect x="99.4362%" y="229" width="0.2043%" height="15" fill="rgb(230,49,44)"/><text x="99.6862%" y="239.50"></text></g><g><title>all (67,027,921 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (67,027,921 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (241,002 samples, 0.36%)</title><rect x="99.6404%" y="229" width="0.3596%" height="15" fill="rgb(215,43,3)"/><text x="99.8904%" y="239.50"></text></g></svg></svg>