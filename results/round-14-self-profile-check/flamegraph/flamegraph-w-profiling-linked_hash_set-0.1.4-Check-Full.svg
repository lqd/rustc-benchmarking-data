<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (498,769 samples, 0.38%)</title><rect x="10.1775%" y="101" width="0.3767%" height="15" fill="rgb(227,0,7)"/><text x="10.4275%" y="111.50"></text></g><g><title>item_attrs (281,913 samples, 0.21%)</title><rect x="10.9645%" y="69" width="0.2129%" height="15" fill="rgb(217,0,24)"/><text x="11.2145%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (271,503 samples, 0.21%)</title><rect x="10.9723%" y="53" width="0.2050%" height="15" fill="rgb(221,193,54)"/><text x="11.2223%" y="63.50"></text></g><g><title>codegen_fn_attrs (372,464 samples, 0.28%)</title><rect x="10.9035%" y="85" width="0.2813%" height="15" fill="rgb(248,212,6)"/><text x="11.1535%" y="95.50"></text></g><g><title>is_copy_raw (167,303 samples, 0.13%)</title><rect x="12.9756%" y="37" width="0.1264%" height="15" fill="rgb(208,68,35)"/><text x="13.2256%" y="47.50"></text></g><g><title>adt_drop_tys (391,645 samples, 0.30%)</title><rect x="12.8660%" y="53" width="0.2958%" height="15" fill="rgb(232,128,0)"/><text x="13.1160%" y="63.50"></text></g><g><title>needs_drop_raw (1,201,366 samples, 0.91%)</title><rect x="12.7550%" y="69" width="0.9073%" height="15" fill="rgb(207,160,47)"/><text x="13.0050%" y="79.50"></text></g><g><title>is_copy_raw (662,740 samples, 0.50%)</title><rect x="13.1618%" y="53" width="0.5005%" height="15" fill="rgb(228,23,34)"/><text x="13.4118%" y="63.50"></text></g><g><title>evaluate_obligation (499,966 samples, 0.38%)</title><rect x="13.2848%" y="37" width="0.3776%" height="15" fill="rgb(218,30,26)"/><text x="13.5348%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (934,713 samples, 0.71%)</title><rect x="13.9550%" y="53" width="0.7059%" height="15" fill="rgb(220,122,19)"/><text x="14.2050%" y="63.50"></text></g><g><title>resolve_instance (1,523,757 samples, 1.15%)</title><rect x="13.6623%" y="69" width="1.1508%" height="15" fill="rgb(250,228,42)"/><text x="13.9123%" y="79.50"></text></g><g><title>thir_body (655,819 samples, 0.50%)</title><rect x="14.8396%" y="69" width="0.4953%" height="15" fill="rgb(240,193,28)"/><text x="15.0896%" y="79.50"></text></g><g><title>mir_const (7,675,770 samples, 5.80%)</title><rect x="9.5667%" y="117" width="5.7969%" height="15" fill="rgb(216,20,37)"/><text x="9.8167%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (6,368,255 samples, 4.81%)</title><rect x="10.5542%" y="101" width="4.8095%" height="15" fill="rgb(206,188,39)"/><text x="10.8042%" y="111.50">unsafe..</text></g><g><title>mir_built (5,533,245 samples, 4.18%)</title><rect x="11.1848%" y="85" width="4.1788%" height="15" fill="rgb(217,207,13)"/><text x="11.4348%" y="95.50">mir_b..</text></g><g><title>mir_promoted (8,473,455 samples, 6.40%)</title><rect x="9.0034%" y="133" width="6.3994%" height="15" fill="rgb(231,73,38)"/><text x="9.2534%" y="143.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (221,413 samples, 0.17%)</title><rect x="15.4028%" y="133" width="0.1672%" height="15" fill="rgb(225,20,46)"/><text x="15.6528%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (512,832 samples, 0.39%)</title><rect x="15.5700%" y="133" width="0.3873%" height="15" fill="rgb(210,31,41)"/><text x="15.8200%" y="143.50"></text></g><g><title>normalize_projection_ty (288,211 samples, 0.22%)</title><rect x="15.7396%" y="117" width="0.2177%" height="15" fill="rgb(221,200,47)"/><text x="15.9896%" y="127.50"></text></g><g><title>type_op_normalize_predicate (496,336 samples, 0.37%)</title><rect x="15.9573%" y="133" width="0.3748%" height="15" fill="rgb(226,26,5)"/><text x="16.2073%" y="143.50"></text></g><g><title>normalize_projection_ty (239,423 samples, 0.18%)</title><rect x="16.1513%" y="117" width="0.1808%" height="15" fill="rgb(249,33,26)"/><text x="16.4013%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,000,819 samples, 3.02%)</title><rect x="16.3471%" y="133" width="3.0215%" height="15" fill="rgb(235,183,28)"/><text x="16.5971%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (24,540,282 samples, 18.53%)</title><rect x="0.8373%" y="165" width="18.5334%" height="15" fill="rgb(221,5,38)"/><text x="1.0873%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,400,472 samples, 18.43%)</title><rect x="0.9429%" y="149" width="18.4278%" height="15" fill="rgb(247,18,42)"/><text x="1.1929%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (303,943 samples, 0.23%)</title><rect x="19.3953%" y="165" width="0.2295%" height="15" fill="rgb(241,131,45)"/><text x="19.6453%" y="175.50"></text></g><g><title>get_lang_items (187,912 samples, 0.14%)</title><rect x="20.0067%" y="117" width="0.1419%" height="15" fill="rgb(249,31,29)"/><text x="20.2567%" y="127.50"></text></g><g><title>item_attrs (188,172 samples, 0.14%)</title><rect x="20.3495%" y="85" width="0.1421%" height="15" fill="rgb(225,111,53)"/><text x="20.5995%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (179,832 samples, 0.14%)</title><rect x="20.3558%" y="69" width="0.1358%" height="15" fill="rgb(238,160,17)"/><text x="20.6058%" y="79.50"></text></g><g><title>codegen_fn_attrs (299,103 samples, 0.23%)</title><rect x="20.3221%" y="101" width="0.2259%" height="15" fill="rgb(214,148,48)"/><text x="20.5721%" y="111.50"></text></g><g><title>should_inherit_track_caller (544,475 samples, 0.41%)</title><rect x="20.1486%" y="117" width="0.4112%" height="15" fill="rgb(232,36,49)"/><text x="20.3986%" y="127.50"></text></g><g><title>codegen_fn_attrs (904,219 samples, 0.68%)</title><rect x="19.9013%" y="133" width="0.6829%" height="15" fill="rgb(209,103,24)"/><text x="20.1513%" y="143.50"></text></g><g><title>check_mod_attrs (1,237,293 samples, 0.93%)</title><rect x="19.6501%" y="149" width="0.9344%" height="15" fill="rgb(229,88,8)"/><text x="19.9001%" y="159.50"></text></g><g><title>check_mod_const_bodies (236,773 samples, 0.18%)</title><rect x="20.5845%" y="149" width="0.1788%" height="15" fill="rgb(213,181,19)"/><text x="20.8345%" y="159.50"></text></g><g><title>lookup_deprecation_entry (232,243 samples, 0.18%)</title><rect x="21.0949%" y="133" width="0.1754%" height="15" fill="rgb(254,191,54)"/><text x="21.3449%" y="143.50"></text></g><g><title>stability_index (152,061 samples, 0.11%)</title><rect x="21.1555%" y="117" width="0.1148%" height="15" fill="rgb(241,83,37)"/><text x="21.4055%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (691,247 samples, 0.52%)</title><rect x="20.8468%" y="149" width="0.5220%" height="15" fill="rgb(233,36,39)"/><text x="21.0968%" y="159.50"></text></g><g><title>misc_checking_1 (2,378,526 samples, 1.80%)</title><rect x="19.6251%" y="165" width="1.7963%" height="15" fill="rgb(226,3,54)"/><text x="19.8751%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (428,854 samples, 0.32%)</title><rect x="21.4224%" y="149" width="0.3239%" height="15" fill="rgb(245,192,40)"/><text x="21.6724%" y="159.50"></text></g><g><title>check_mod_liveness (372,154 samples, 0.28%)</title><rect x="21.4652%" y="133" width="0.2811%" height="15" fill="rgb(238,167,29)"/><text x="21.7152%" y="143.50"></text></g><g><title>type_uninhabited_from (155,972 samples, 0.12%)</title><rect x="21.6285%" y="117" width="0.1178%" height="15" fill="rgb(232,182,51)"/><text x="21.8785%" y="127.50"></text></g><g><title>misc_checking_2 (811,609 samples, 0.61%)</title><rect x="21.4214%" y="165" width="0.6129%" height="15" fill="rgb(231,60,39)"/><text x="21.6714%" y="175.50"></text></g><g><title>match_checking (381,405 samples, 0.29%)</title><rect x="21.7463%" y="149" width="0.2880%" height="15" fill="rgb(208,69,12)"/><text x="21.9963%" y="159.50"></text></g><g><title>check_match (349,704 samples, 0.26%)</title><rect x="21.7702%" y="133" width="0.2641%" height="15" fill="rgb(235,93,37)"/><text x="22.0202%" y="143.50"></text></g><g><title>check_private_in_public (189,832 samples, 0.14%)</title><rect x="22.0417%" y="149" width="0.1434%" height="15" fill="rgb(213,116,39)"/><text x="22.2917%" y="159.50"></text></g><g><title>death_checking (245,783 samples, 0.19%)</title><rect x="22.1851%" y="149" width="0.1856%" height="15" fill="rgb(222,207,29)"/><text x="22.4351%" y="159.50"></text></g><g><title>crate_lints (1,814,810 samples, 1.37%)</title><rect x="22.3718%" y="133" width="1.3706%" height="15" fill="rgb(206,96,30)"/><text x="22.6218%" y="143.50"></text></g><g><title>type_of (1,083,224 samples, 0.82%)</title><rect x="22.9243%" y="117" width="0.8181%" height="15" fill="rgb(218,138,4)"/><text x="23.1743%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (850,300 samples, 0.64%)</title><rect x="23.1002%" y="101" width="0.6422%" height="15" fill="rgb(250,191,14)"/><text x="23.3502%" y="111.50"></text></g><g><title>lint_checking (2,028,813 samples, 1.53%)</title><rect x="22.3707%" y="149" width="1.5322%" height="15" fill="rgb(239,60,40)"/><text x="22.6207%" y="159.50"></text></g><g><title>module_lints (212,523 samples, 0.16%)</title><rect x="23.7424%" y="133" width="0.1605%" height="15" fill="rgb(206,27,48)"/><text x="23.9924%" y="143.50"></text></g><g><title>lint_mod (210,113 samples, 0.16%)</title><rect x="23.7442%" y="117" width="0.1587%" height="15" fill="rgb(225,35,8)"/><text x="23.9942%" y="127.50"></text></g><g><title>privacy_access_levels (260,003 samples, 0.20%)</title><rect x="23.9029%" y="149" width="0.1964%" height="15" fill="rgb(250,213,24)"/><text x="24.1529%" y="159.50"></text></g><g><title>privacy_checking_modules (773,418 samples, 0.58%)</title><rect x="24.0992%" y="149" width="0.5841%" height="15" fill="rgb(247,123,22)"/><text x="24.3492%" y="159.50"></text></g><g><title>check_mod_privacy (771,468 samples, 0.58%)</title><rect x="24.1007%" y="133" width="0.5826%" height="15" fill="rgb(231,138,38)"/><text x="24.3507%" y="143.50"></text></g><g><title>misc_checking_3 (3,524,399 samples, 2.66%)</title><rect x="22.0344%" y="165" width="2.6617%" height="15" fill="rgb(231,145,46)"/><text x="22.2844%" y="175.50">mi..</text></g><g><title>generics_of (205,412 samples, 0.16%)</title><rect x="30.1252%" y="101" width="0.1551%" height="15" fill="rgb(251,118,11)"/><text x="30.3752%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (153,982 samples, 0.12%)</title><rect x="30.1640%" y="85" width="0.1163%" height="15" fill="rgb(217,147,25)"/><text x="30.4140%" y="95.50"></text></g><g><title>impl_parent (3,114,391 samples, 2.35%)</title><rect x="30.2803%" y="101" width="2.3521%" height="15" fill="rgb(247,81,37)"/><text x="30.5303%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,857,161 samples, 1.40%)</title><rect x="31.2298%" y="85" width="1.4026%" height="15" fill="rgb(209,12,38)"/><text x="31.4798%" y="95.50"></text></g><g><title>impl_trait_ref (8,267,619 samples, 6.24%)</title><rect x="32.6324%" y="101" width="6.2439%" height="15" fill="rgb(227,1,9)"/><text x="32.8824%" y="111.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,829,825 samples, 5.16%)</title><rect x="33.7182%" y="85" width="5.1580%" height="15" fill="rgb(248,47,43)"/><text x="33.9682%" y="95.50">metada..</text></g><g><title>item_attrs (1,101,431 samples, 0.83%)</title><rect x="38.8763%" y="101" width="0.8318%" height="15" fill="rgb(221,10,30)"/><text x="39.1263%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,042,241 samples, 0.79%)</title><rect x="38.9210%" y="85" width="0.7871%" height="15" fill="rgb(210,229,1)"/><text x="39.1710%" y="95.50"></text></g><g><title>explicit_predicates_of (288,923 samples, 0.22%)</title><rect x="39.9966%" y="69" width="0.2182%" height="15" fill="rgb(222,148,37)"/><text x="40.2466%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (241,493 samples, 0.18%)</title><rect x="40.0324%" y="53" width="0.1824%" height="15" fill="rgb(234,67,33)"/><text x="40.2824%" y="63.50"></text></g><g><title>predicates_of (783,230 samples, 0.59%)</title><rect x="39.7081%" y="101" width="0.5915%" height="15" fill="rgb(247,98,35)"/><text x="39.9581%" y="111.50"></text></g><g><title>predicates_defined_on (528,746 samples, 0.40%)</title><rect x="39.9003%" y="85" width="0.3993%" height="15" fill="rgb(247,138,52)"/><text x="40.1503%" y="95.50"></text></g><g><title>trait_impls_of (1,108,770 samples, 0.84%)</title><rect x="40.3008%" y="101" width="0.8374%" height="15" fill="rgb(213,79,30)"/><text x="40.5508%" y="111.50"></text></g><g><title>implementations_of_trait (308,002 samples, 0.23%)</title><rect x="40.9056%" y="85" width="0.2326%" height="15" fill="rgb(246,177,23)"/><text x="41.1556%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (240,091 samples, 0.18%)</title><rect x="40.9569%" y="69" width="0.1813%" height="15" fill="rgb(230,62,27)"/><text x="41.2069%" y="79.50"></text></g><g><title>coherent_trait (21,846,382 samples, 16.50%)</title><rect x="24.7620%" y="133" width="16.4989%" height="15" fill="rgb(216,154,8)"/><text x="25.0120%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (21,815,142 samples, 16.48%)</title><rect x="24.7856%" y="117" width="16.4753%" height="15" fill="rgb(244,35,45)"/><text x="25.0356%" y="127.50">specialization_graph_of</text></g><g><title>type_of (162,521 samples, 0.12%)</title><rect x="41.1382%" y="101" width="0.1227%" height="15" fill="rgb(251,115,12)"/><text x="41.3882%" y="111.50"></text></g><g><title>coherence_checking (21,986,204 samples, 16.60%)</title><rect x="24.7413%" y="149" width="16.6045%" height="15" fill="rgb(240,54,50)"/><text x="24.9913%" y="159.50">coherence_checking</text></g><g><title>associated_items (176,852 samples, 0.13%)</title><rect x="52.2103%" y="101" width="0.1336%" height="15" fill="rgb(233,84,52)"/><text x="52.4603%" y="111.50"></text></g><g><title>adt_dtorck_constraint (168,442 samples, 0.13%)</title><rect x="52.7415%" y="53" width="0.1272%" height="15" fill="rgb(207,117,47)"/><text x="52.9915%" y="63.50"></text></g><g><title>adt_dtorck_constraint (211,722 samples, 0.16%)</title><rect x="52.7195%" y="69" width="0.1599%" height="15" fill="rgb(249,43,39)"/><text x="52.9695%" y="79.50"></text></g><g><title>adt_dtorck_constraint (319,072 samples, 0.24%)</title><rect x="52.6480%" y="85" width="0.2410%" height="15" fill="rgb(209,38,44)"/><text x="52.8980%" y="95.50"></text></g><g><title>dropck_outlives (691,877 samples, 0.52%)</title><rect x="52.3895%" y="101" width="0.5225%" height="15" fill="rgb(236,212,23)"/><text x="52.6395%" y="111.50"></text></g><g><title>evaluate_obligation (1,471,607 samples, 1.11%)</title><rect x="52.9120%" y="101" width="1.1114%" height="15" fill="rgb(242,79,21)"/><text x="53.1620%" y="111.50"></text></g><g><title>method_autoderef_steps (681,198 samples, 0.51%)</title><rect x="54.2626%" y="101" width="0.5145%" height="15" fill="rgb(211,96,35)"/><text x="54.5126%" y="111.50"></text></g><g><title>evaluate_obligation (329,695 samples, 0.25%)</title><rect x="54.5281%" y="85" width="0.2490%" height="15" fill="rgb(253,215,40)"/><text x="54.7781%" y="95.50"></text></g><g><title>predicates_of (202,342 samples, 0.15%)</title><rect x="54.8137%" y="101" width="0.1528%" height="15" fill="rgb(211,81,21)"/><text x="55.0637%" y="111.50"></text></g><g><title>predicates_defined_on (144,861 samples, 0.11%)</title><rect x="54.8571%" y="85" width="0.1094%" height="15" fill="rgb(208,190,38)"/><text x="55.1071%" y="95.50"></text></g><g><title>evaluate_obligation (332,262 samples, 0.25%)</title><rect x="57.8723%" y="85" width="0.2509%" height="15" fill="rgb(235,213,38)"/><text x="58.1223%" y="95.50"></text></g><g><title>is_copy_raw (270,213 samples, 0.20%)</title><rect x="58.2253%" y="85" width="0.2041%" height="15" fill="rgb(237,122,38)"/><text x="58.4753%" y="95.50"></text></g><g><title>typeck (4,769,093 samples, 3.60%)</title><rect x="55.0169%" y="101" width="3.6017%" height="15" fill="rgb(244,218,35)"/><text x="55.2669%" y="111.50">type..</text></g><g><title>item_bodies_checking (22,815,874 samples, 17.23%)</title><rect x="41.4152%" y="149" width="17.2311%" height="15" fill="rgb(240,68,47)"/><text x="41.6652%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,812,244 samples, 17.23%)</title><rect x="41.4179%" y="133" width="17.2283%" height="15" fill="rgb(210,16,53)"/><text x="41.6679%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (22,722,813 samples, 17.16%)</title><rect x="41.4855%" y="117" width="17.1608%" height="15" fill="rgb(235,124,12)"/><text x="41.7355%" y="127.50">typeck</text></g><g><title>impl_trait_ref (138,880 samples, 0.10%)</title><rect x="60.7600%" y="69" width="0.1049%" height="15" fill="rgb(224,169,11)"/><text x="61.0100%" y="79.50"></text></g><g><title>adt_destructor (310,984 samples, 0.23%)</title><rect x="60.6527%" y="117" width="0.2349%" height="15" fill="rgb(250,166,2)"/><text x="60.9027%" y="127.50"></text></g><g><title>coherent_trait (306,333 samples, 0.23%)</title><rect x="60.6562%" y="101" width="0.2313%" height="15" fill="rgb(242,216,29)"/><text x="60.9062%" y="111.50"></text></g><g><title>specialization_graph_of (304,633 samples, 0.23%)</title><rect x="60.6575%" y="85" width="0.2301%" height="15" fill="rgb(230,116,27)"/><text x="60.9075%" y="95.50"></text></g><g><title>item_types_checking (3,311,697 samples, 2.50%)</title><rect x="58.6463%" y="149" width="2.5011%" height="15" fill="rgb(228,99,48)"/><text x="58.8963%" y="159.50">it..</text></g><g><title>check_mod_item_types (3,309,227 samples, 2.50%)</title><rect x="58.6481%" y="133" width="2.4992%" height="15" fill="rgb(253,11,6)"/><text x="58.8981%" y="143.50">ch..</text></g><g><title>fn_sig (444,936 samples, 0.34%)</title><rect x="61.6021%" y="117" width="0.3360%" height="15" fill="rgb(247,143,39)"/><text x="61.8521%" y="127.50"></text></g><g><title>is_late_bound_map (784,906 samples, 0.59%)</title><rect x="62.1786%" y="101" width="0.5928%" height="15" fill="rgb(236,97,10)"/><text x="62.4286%" y="111.50"></text></g><g><title>resolve_lifetimes (729,046 samples, 0.55%)</title><rect x="62.2208%" y="85" width="0.5506%" height="15" fill="rgb(233,208,19)"/><text x="62.4708%" y="95.50"></text></g><g><title>lint_levels (150,972 samples, 0.11%)</title><rect x="62.6574%" y="69" width="0.1140%" height="15" fill="rgb(216,164,2)"/><text x="62.9074%" y="79.50"></text></g><g><title>generics_of (1,213,260 samples, 0.92%)</title><rect x="61.9381%" y="117" width="0.9163%" height="15" fill="rgb(220,129,5)"/><text x="62.1881%" y="127.50"></text></g><g><title>impl_trait_ref (163,363 samples, 0.12%)</title><rect x="62.8544%" y="117" width="0.1234%" height="15" fill="rgb(242,17,10)"/><text x="63.1044%" y="127.50"></text></g><g><title>late_bound_vars_map (447,815 samples, 0.34%)</title><rect x="63.6956%" y="69" width="0.3382%" height="15" fill="rgb(242,107,0)"/><text x="63.9456%" y="79.50"></text></g><g><title>resolve_lifetimes (422,982 samples, 0.32%)</title><rect x="63.7143%" y="53" width="0.3194%" height="15" fill="rgb(251,28,31)"/><text x="63.9643%" y="63.50"></text></g><g><title>explicit_predicates_of (1,133,042 samples, 0.86%)</title><rect x="63.2008%" y="85" width="0.8557%" height="15" fill="rgb(233,223,10)"/><text x="63.4508%" y="95.50"></text></g><g><title>predicates_of (2,047,573 samples, 1.55%)</title><rect x="62.9778%" y="117" width="1.5464%" height="15" fill="rgb(215,21,27)"/><text x="63.2278%" y="127.50"></text></g><g><title>predicates_defined_on (1,936,751 samples, 1.46%)</title><rect x="63.0615%" y="101" width="1.4627%" height="15" fill="rgb(232,23,21)"/><text x="63.3115%" y="111.50"></text></g><g><title>inferred_outlives_of (619,186 samples, 0.47%)</title><rect x="64.0565%" y="85" width="0.4676%" height="15" fill="rgb(244,5,23)"/><text x="64.3065%" y="95.50"></text></g><g><title>inferred_outlives_crate (572,516 samples, 0.43%)</title><rect x="64.0918%" y="69" width="0.4324%" height="15" fill="rgb(226,81,46)"/><text x="64.3418%" y="79.50"></text></g><g><title>type_of (300,174 samples, 0.23%)</title><rect x="64.2974%" y="53" width="0.2267%" height="15" fill="rgb(247,70,30)"/><text x="64.5474%" y="63.50"></text></g><g><title>type_collecting (4,885,885 samples, 3.69%)</title><rect x="61.1487%" y="149" width="3.6899%" height="15" fill="rgb(212,68,19)"/><text x="61.3987%" y="159.50">type..</text></g><g><title>collect_mod_item_types (4,872,825 samples, 3.68%)</title><rect x="61.1586%" y="133" width="3.6801%" height="15" fill="rgb(240,187,13)"/><text x="61.4086%" y="143.50">coll..</text></g><g><title>type_of (416,426 samples, 0.31%)</title><rect x="64.5241%" y="117" width="0.3145%" height="15" fill="rgb(223,113,26)"/><text x="64.7741%" y="127.50"></text></g><g><title>evaluate_obligation (752,191 samples, 0.57%)</title><rect x="67.6239%" y="117" width="0.5681%" height="15" fill="rgb(206,192,2)"/><text x="67.8739%" y="127.50"></text></g><g><title>implied_outlives_bounds (443,554 samples, 0.33%)</title><rect x="68.1949%" y="117" width="0.3350%" height="15" fill="rgb(241,108,4)"/><text x="68.4449%" y="127.50"></text></g><g><title>param_env (631,867 samples, 0.48%)</title><rect x="68.5298%" y="117" width="0.4772%" height="15" fill="rgb(247,173,49)"/><text x="68.7798%" y="127.50"></text></g><g><title>region_scope_tree (279,125 samples, 0.21%)</title><rect x="69.0341%" y="117" width="0.2108%" height="15" fill="rgb(224,114,35)"/><text x="69.2841%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,619,338 samples, 4.24%)</title><rect x="65.0257%" y="133" width="4.2439%" height="15" fill="rgb(245,159,27)"/><text x="65.2757%" y="143.50">check..</text></g><g><title>implied_outlives_bounds (209,622 samples, 0.16%)</title><rect x="71.5064%" y="117" width="0.1583%" height="15" fill="rgb(245,172,44)"/><text x="71.7564%" y="127.50"></text></g><g><title>param_env (406,516 samples, 0.31%)</title><rect x="71.6647%" y="117" width="0.3070%" height="15" fill="rgb(236,23,11)"/><text x="71.9147%" y="127.50"></text></g><g><title>trait_impls_of (144,771 samples, 0.11%)</title><rect x="72.0727%" y="117" width="0.1093%" height="15" fill="rgb(205,117,38)"/><text x="72.3227%" y="127.50"></text></g><g><title>analysis (95,045,945 samples, 71.78%)</title><rect x="0.4920%" y="181" width="71.7809%" height="15" fill="rgb(237,72,25)"/><text x="0.7420%" y="191.50">analysis</text></g><g><title>type_check_crate (62,997,070 samples, 47.58%)</title><rect x="24.6961%" y="165" width="47.5769%" height="15" fill="rgb(244,70,9)"/><text x="24.9461%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,838,519 samples, 7.43%)</title><rect x="64.8426%" y="149" width="7.4303%" height="15" fill="rgb(217,125,39)"/><text x="65.0926%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (3,976,748 samples, 3.00%)</title><rect x="69.2696%" y="133" width="3.0033%" height="15" fill="rgb(235,36,10)"/><text x="69.5196%" y="143.50">che..</text></g><g><title>codegen_crate (334,204 samples, 0.25%)</title><rect x="72.2807%" y="181" width="0.2524%" height="15" fill="rgb(251,123,47)"/><text x="72.5307%" y="191.50"></text></g><g><title>AST_validation (190,332 samples, 0.14%)</title><rect x="72.6958%" y="165" width="0.1437%" height="15" fill="rgb(221,13,13)"/><text x="72.9458%" y="175.50"></text></g><g><title>macro_expand_crate (12,189,006 samples, 9.21%)</title><rect x="72.9668%" y="165" width="9.2054%" height="15" fill="rgb(238,131,9)"/><text x="73.2168%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (12,165,596 samples, 9.19%)</title><rect x="72.9844%" y="149" width="9.1877%" height="15" fill="rgb(211,50,8)"/><text x="73.2344%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,298,726 samples, 1.74%)</title><rect x="80.4361%" y="133" width="1.7361%" height="15" fill="rgb(245,182,24)"/><text x="80.6861%" y="143.50"></text></g><g><title>metadata_register_crate (841,259 samples, 0.64%)</title><rect x="81.5369%" y="117" width="0.6353%" height="15" fill="rgb(242,14,37)"/><text x="81.7869%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (443,875 samples, 0.34%)</title><rect x="82.1755%" y="165" width="0.3352%" height="15" fill="rgb(246,228,12)"/><text x="82.4255%" y="175.50"></text></g><g><title>late_resolve_crate (2,115,413 samples, 1.60%)</title><rect x="82.5857%" y="149" width="1.5976%" height="15" fill="rgb(213,55,15)"/><text x="82.8357%" y="159.50"></text></g><g><title>configure_and_expand (15,583,303 samples, 11.77%)</title><rect x="72.5331%" y="181" width="11.7689%" height="15" fill="rgb(209,9,3)"/><text x="72.7831%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (2,371,826 samples, 1.79%)</title><rect x="82.5107%" y="165" width="1.7913%" height="15" fill="rgb(230,59,30)"/><text x="82.7607%" y="175.50">r..</text></g><g><title>drop_ast (366,434 samples, 0.28%)</title><rect x="84.3019%" y="181" width="0.2767%" height="15" fill="rgb(209,121,21)"/><text x="84.5519%" y="191.50"></text></g><g><title>early_lint_checks (518,796 samples, 0.39%)</title><rect x="84.5906%" y="181" width="0.3918%" height="15" fill="rgb(220,109,13)"/><text x="84.8406%" y="191.50"></text></g><g><title>free_global_ctxt (3,552,969 samples, 2.68%)</title><rect x="84.9824%" y="181" width="2.6833%" height="15" fill="rgb(232,18,1)"/><text x="85.2324%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (1,165,964 samples, 0.88%)</title><rect x="87.6656%" y="181" width="0.8806%" height="15" fill="rgb(215,41,42)"/><text x="87.9156%" y="191.50"></text></g><g><title>hir_lowering (4,722,593 samples, 3.57%)</title><rect x="88.5462%" y="181" width="3.5666%" height="15" fill="rgb(224,123,36)"/><text x="88.7962%" y="191.50">hir_..</text></g><g><title>parse_crate (8,779,208 samples, 6.63%)</title><rect x="92.1548%" y="181" width="6.6303%" height="15" fill="rgb(240,125,3)"/><text x="92.4048%" y="191.50">parse_cra..</text></g><g><title>prepare_outputs (278,453 samples, 0.21%)</title><rect x="98.7919%" y="181" width="0.2103%" height="15" fill="rgb(205,98,50)"/><text x="99.0419%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (811,489 samples, 0.61%)</title><rect x="99.0022%" y="181" width="0.6129%" height="15" fill="rgb(205,185,37)"/><text x="99.2522%" y="191.50"></text></g><g><title>all (132,411,171 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (132,411,171 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (380,824 samples, 0.29%)</title><rect x="99.7124%" y="181" width="0.2876%" height="15" fill="rgb(235,201,11)"/><text x="99.9624%" y="191.50"></text></g></svg></svg>