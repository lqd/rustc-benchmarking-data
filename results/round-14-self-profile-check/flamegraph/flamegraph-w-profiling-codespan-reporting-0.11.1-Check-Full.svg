<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (491,357 samples, 0.12%)</title><rect x="16.3111%" y="165" width="0.1183%" height="15" fill="rgb(227,0,7)"/><text x="16.5611%" y="175.50"></text></g><g><title>param_env (632,487 samples, 0.15%)</title><rect x="18.0307%" y="133" width="0.1523%" height="15" fill="rgb(217,0,24)"/><text x="18.2807%" y="143.50"></text></g><g><title>item_attrs (601,369 samples, 0.14%)</title><rect x="18.6783%" y="101" width="0.1448%" height="15" fill="rgb(221,193,54)"/><text x="18.9283%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (582,209 samples, 0.14%)</title><rect x="18.6829%" y="85" width="0.1402%" height="15" fill="rgb(248,212,6)"/><text x="18.9329%" y="95.50"></text></g><g><title>codegen_fn_attrs (806,781 samples, 0.19%)</title><rect x="18.6373%" y="117" width="0.1942%" height="15" fill="rgb(208,68,35)"/><text x="18.8873%" y="127.50"></text></g><g><title>adt_drop_tys (710,244 samples, 0.17%)</title><rect x="22.3063%" y="85" width="0.1710%" height="15" fill="rgb(232,128,0)"/><text x="22.5563%" y="95.50"></text></g><g><title>is_copy_raw (3,472,981 samples, 0.84%)</title><rect x="22.4774%" y="85" width="0.8362%" height="15" fill="rgb(207,160,47)"/><text x="22.7274%" y="95.50"></text></g><g><title>evaluate_obligation (2,849,052 samples, 0.69%)</title><rect x="22.6276%" y="69" width="0.6859%" height="15" fill="rgb(228,23,34)"/><text x="22.8776%" y="79.50"></text></g><g><title>needs_drop_raw (4,944,158 samples, 1.19%)</title><rect x="22.1944%" y="101" width="1.1904%" height="15" fill="rgb(218,30,26)"/><text x="22.4444%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,208,301 samples, 0.29%)</title><rect x="23.5269%" y="85" width="0.2909%" height="15" fill="rgb(220,122,19)"/><text x="23.7769%" y="95.50"></text></g><g><title>specialization_graph_of (675,559 samples, 0.16%)</title><rect x="23.8863%" y="85" width="0.1627%" height="15" fill="rgb(250,228,42)"/><text x="24.1363%" y="95.50"></text></g><g><title>resolve_instance (2,895,466 samples, 0.70%)</title><rect x="23.3925%" y="101" width="0.6971%" height="15" fill="rgb(240,193,28)"/><text x="23.6425%" y="111.50"></text></g><g><title>thir_body (4,676,644 samples, 1.13%)</title><rect x="24.1124%" y="101" width="1.1260%" height="15" fill="rgb(216,20,37)"/><text x="24.3624%" y="111.50"></text></g><g><title>mir_const (33,149,766 samples, 7.98%)</title><rect x="17.2984%" y="149" width="7.9813%" height="15" fill="rgb(206,188,39)"/><text x="17.5484%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (29,475,793 samples, 7.10%)</title><rect x="18.1829%" y="133" width="7.0967%" height="15" fill="rgb(217,207,13)"/><text x="18.4329%" y="143.50">unsafety_c..</text></g><g><title>mir_built (26,781,997 samples, 6.45%)</title><rect x="18.8315%" y="117" width="6.4481%" height="15" fill="rgb(231,73,38)"/><text x="19.0815%" y="127.50">mir_built</text></g><g><title>mir_promoted (36,722,812 samples, 8.84%)</title><rect x="16.5083%" y="165" width="8.8415%" height="15" fill="rgb(225,20,46)"/><text x="16.7583%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,020,120 samples, 0.25%)</title><rect x="25.3499%" y="165" width="0.2456%" height="15" fill="rgb(210,31,41)"/><text x="25.5999%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (4,207,147 samples, 1.01%)</title><rect x="25.5955%" y="165" width="1.0129%" height="15" fill="rgb(221,200,47)"/><text x="25.8455%" y="175.50"></text></g><g><title>normalize_projection_ty (2,711,718 samples, 0.65%)</title><rect x="25.9556%" y="149" width="0.6529%" height="15" fill="rgb(226,26,5)"/><text x="26.2056%" y="159.50"></text></g><g><title>type_op_normalize_predicate (2,534,675 samples, 0.61%)</title><rect x="26.6084%" y="165" width="0.6103%" height="15" fill="rgb(249,33,26)"/><text x="26.8584%" y="175.50"></text></g><g><title>normalize_projection_ty (1,245,137 samples, 0.30%)</title><rect x="26.9189%" y="149" width="0.2998%" height="15" fill="rgb(235,183,28)"/><text x="27.1689%" y="159.50"></text></g><g><title>type_op_prove_predicate (12,781,650 samples, 3.08%)</title><rect x="27.2798%" y="165" width="3.0774%" height="15" fill="rgb(221,5,38)"/><text x="27.5298%" y="175.50">typ..</text></g><g><title>MIR_borrow_checking (124,379,153 samples, 29.95%)</title><rect x="0.4154%" y="197" width="29.9460%" height="15" fill="rgb(247,18,42)"/><text x="0.6654%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (124,055,810 samples, 29.87%)</title><rect x="0.4933%" y="181" width="29.8682%" height="15" fill="rgb(241,131,45)"/><text x="0.7433%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (476,735 samples, 0.11%)</title><rect x="30.4167%" y="197" width="0.1148%" height="15" fill="rgb(249,31,29)"/><text x="30.6667%" y="207.50"></text></g><g><title>codegen_fn_attrs (664,567 samples, 0.16%)</title><rect x="30.7503%" y="165" width="0.1600%" height="15" fill="rgb(225,111,53)"/><text x="31.0003%" y="175.50"></text></g><g><title>should_inherit_track_caller (567,186 samples, 0.14%)</title><rect x="30.7738%" y="149" width="0.1366%" height="15" fill="rgb(238,160,17)"/><text x="31.0238%" y="159.50"></text></g><g><title>check_mod_attrs (1,542,448 samples, 0.37%)</title><rect x="30.5390%" y="181" width="0.3714%" height="15" fill="rgb(214,148,48)"/><text x="30.7890%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (852,648 samples, 0.21%)</title><rect x="31.0406%" y="181" width="0.2053%" height="15" fill="rgb(232,36,49)"/><text x="31.2906%" y="191.50"></text></g><g><title>misc_checking_1 (3,045,683 samples, 0.73%)</title><rect x="30.5315%" y="197" width="0.7333%" height="15" fill="rgb(209,103,24)"/><text x="30.7815%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,880,421 samples, 0.45%)</title><rect x="31.2654%" y="181" width="0.4527%" height="15" fill="rgb(229,88,8)"/><text x="31.5154%" y="191.50"></text></g><g><title>check_mod_liveness (1,550,429 samples, 0.37%)</title><rect x="31.3448%" y="165" width="0.3733%" height="15" fill="rgb(213,181,19)"/><text x="31.5948%" y="175.50"></text></g><g><title>misc_checking_2 (4,998,826 samples, 1.20%)</title><rect x="31.2648%" y="197" width="1.2035%" height="15" fill="rgb(254,191,54)"/><text x="31.5148%" y="207.50"></text></g><g><title>match_checking (3,116,265 samples, 0.75%)</title><rect x="31.7181%" y="181" width="0.7503%" height="15" fill="rgb(241,83,37)"/><text x="31.9681%" y="191.50"></text></g><g><title>check_match (3,028,635 samples, 0.73%)</title><rect x="31.7392%" y="165" width="0.7292%" height="15" fill="rgb(233,36,39)"/><text x="31.9892%" y="175.50"></text></g><g><title>check_private_in_public (596,607 samples, 0.14%)</title><rect x="32.4711%" y="181" width="0.1436%" height="15" fill="rgb(226,3,54)"/><text x="32.7211%" y="191.50"></text></g><g><title>death_checking (1,456,626 samples, 0.35%)</title><rect x="32.6147%" y="181" width="0.3507%" height="15" fill="rgb(245,192,40)"/><text x="32.8647%" y="191.50"></text></g><g><title>crate_lints (3,621,920 samples, 0.87%)</title><rect x="32.9658%" y="165" width="0.8720%" height="15" fill="rgb(238,167,29)"/><text x="33.2158%" y="175.50"></text></g><g><title>type_of (1,163,931 samples, 0.28%)</title><rect x="33.5576%" y="149" width="0.2802%" height="15" fill="rgb(232,182,51)"/><text x="33.8076%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (929,706 samples, 0.22%)</title><rect x="33.6140%" y="133" width="0.2238%" height="15" fill="rgb(231,60,39)"/><text x="33.8640%" y="143.50"></text></g><g><title>lint_checking (5,736,543 samples, 1.38%)</title><rect x="32.9654%" y="181" width="1.3812%" height="15" fill="rgb(208,69,12)"/><text x="33.2154%" y="191.50"></text></g><g><title>module_lints (2,112,923 samples, 0.51%)</title><rect x="33.8379%" y="165" width="0.5087%" height="15" fill="rgb(235,93,37)"/><text x="34.0879%" y="175.50"></text></g><g><title>lint_mod (2,104,023 samples, 0.51%)</title><rect x="33.8400%" y="149" width="0.5066%" height="15" fill="rgb(213,116,39)"/><text x="34.0900%" y="159.50"></text></g><g><title>privacy_access_levels (833,449 samples, 0.20%)</title><rect x="34.3466%" y="181" width="0.2007%" height="15" fill="rgb(222,207,29)"/><text x="34.5966%" y="191.50"></text></g><g><title>privacy_checking_modules (3,635,131 samples, 0.88%)</title><rect x="34.5473%" y="181" width="0.8752%" height="15" fill="rgb(206,96,30)"/><text x="34.7973%" y="191.50"></text></g><g><title>check_mod_privacy (3,629,321 samples, 0.87%)</title><rect x="34.5487%" y="165" width="0.8738%" height="15" fill="rgb(218,138,4)"/><text x="34.7987%" y="175.50"></text></g><g><title>misc_checking_3 (12,308,966 samples, 2.96%)</title><rect x="32.4684%" y="197" width="2.9636%" height="15" fill="rgb(250,191,14)"/><text x="32.7184%" y="207.50">mis..</text></g><g><title>impl_parent (3,042,445 samples, 0.73%)</title><rect x="36.7562%" y="133" width="0.7325%" height="15" fill="rgb(239,60,40)"/><text x="37.0062%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,654,224 samples, 0.40%)</title><rect x="37.0904%" y="117" width="0.3983%" height="15" fill="rgb(206,27,48)"/><text x="37.3404%" y="127.50"></text></g><g><title>impl_trait_ref (5,998,860 samples, 1.44%)</title><rect x="37.4887%" y="133" width="1.4443%" height="15" fill="rgb(225,35,8)"/><text x="37.7387%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,563,403 samples, 1.10%)</title><rect x="37.8343%" y="117" width="1.0987%" height="15" fill="rgb(250,213,24)"/><text x="38.0843%" y="127.50"></text></g><g><title>trait_impls_of (1,067,750 samples, 0.26%)</title><rect x="38.9497%" y="133" width="0.2571%" height="15" fill="rgb(247,123,22)"/><text x="39.1997%" y="143.50"></text></g><g><title>coherent_trait (15,500,962 samples, 3.73%)</title><rect x="35.4751%" y="165" width="3.7321%" height="15" fill="rgb(231,138,38)"/><text x="35.7251%" y="175.50">cohe..</text></g><g><title>specialization_graph_of (14,990,607 samples, 3.61%)</title><rect x="35.5980%" y="149" width="3.6092%" height="15" fill="rgb(231,145,46)"/><text x="35.8480%" y="159.50">spec..</text></g><g><title>coherence_checking (15,610,112 samples, 3.76%)</title><rect x="35.4685%" y="181" width="3.7584%" height="15" fill="rgb(251,118,11)"/><text x="35.7185%" y="191.50">cohe..</text></g><g><title>associated_items (558,247 samples, 0.13%)</title><rect x="53.4291%" y="133" width="0.1344%" height="15" fill="rgb(217,147,25)"/><text x="53.6791%" y="143.50"></text></g><g><title>dropck_outlives (749,839 samples, 0.18%)</title><rect x="53.5856%" y="133" width="0.1805%" height="15" fill="rgb(247,81,37)"/><text x="53.8356%" y="143.50"></text></g><g><title>evaluate_obligation (2,529,926 samples, 0.61%)</title><rect x="53.7673%" y="133" width="0.6091%" height="15" fill="rgb(209,12,38)"/><text x="54.0173%" y="143.50"></text></g><g><title>method_autoderef_steps (504,987 samples, 0.12%)</title><rect x="54.5877%" y="133" width="0.1216%" height="15" fill="rgb(227,1,9)"/><text x="54.8377%" y="143.50"></text></g><g><title>dropck_outlives (1,286,545 samples, 0.31%)</title><rect x="69.9675%" y="117" width="0.3098%" height="15" fill="rgb(248,47,43)"/><text x="70.2175%" y="127.50"></text></g><g><title>generics_of (459,424 samples, 0.11%)</title><rect x="71.8267%" y="101" width="0.1106%" height="15" fill="rgb(221,10,30)"/><text x="72.0767%" y="111.50"></text></g><g><title>predicates_of (496,126 samples, 0.12%)</title><rect x="72.0107%" y="101" width="0.1194%" height="15" fill="rgb(210,229,1)"/><text x="72.2607%" y="111.50"></text></g><g><title>evaluate_obligation (8,143,027 samples, 1.96%)</title><rect x="70.2780%" y="117" width="1.9605%" height="15" fill="rgb(222,148,37)"/><text x="70.5280%" y="127.50">e..</text></g><g><title>generics_of (1,133,572 samples, 0.27%)</title><rect x="72.2828%" y="117" width="0.2729%" height="15" fill="rgb(234,67,33)"/><text x="72.5328%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (932,250 samples, 0.22%)</title><rect x="72.3312%" y="101" width="0.2245%" height="15" fill="rgb(247,98,35)"/><text x="72.5812%" y="111.50"></text></g><g><title>method_autoderef_steps (1,631,661 samples, 0.39%)</title><rect x="72.8246%" y="117" width="0.3928%" height="15" fill="rgb(247,138,52)"/><text x="73.0746%" y="127.50"></text></g><g><title>evaluate_obligation (771,092 samples, 0.19%)</title><rect x="73.0318%" y="101" width="0.1857%" height="15" fill="rgb(213,79,30)"/><text x="73.2818%" y="111.50"></text></g><g><title>predicates_of (417,574 samples, 0.10%)</title><rect x="73.2276%" y="117" width="0.1005%" height="15" fill="rgb(246,177,23)"/><text x="73.4776%" y="127.50"></text></g><g><title>typeck (77,072,953 samples, 18.56%)</title><rect x="54.8598%" y="133" width="18.5564%" height="15" fill="rgb(230,62,27)"/><text x="55.1098%" y="143.50">typeck</text></g><g><title>item_bodies_checking (142,044,158 samples, 34.20%)</title><rect x="39.2411%" y="181" width="34.1991%" height="15" fill="rgb(216,154,8)"/><text x="39.4911%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (142,039,698 samples, 34.20%)</title><rect x="39.2422%" y="165" width="34.1980%" height="15" fill="rgb(244,35,45)"/><text x="39.4922%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (141,840,668 samples, 34.15%)</title><rect x="39.2901%" y="149" width="34.1501%" height="15" fill="rgb(251,115,12)"/><text x="39.5401%" y="159.50">typeck</text></g><g><title>mir_borrowck (1,285,904 samples, 0.31%)</title><rect x="74.8392%" y="117" width="0.3096%" height="15" fill="rgb(240,54,50)"/><text x="75.0892%" y="127.50"></text></g><g><title>needs_drop_raw (447,155 samples, 0.11%)</title><rect x="75.3083%" y="53" width="0.1077%" height="15" fill="rgb(233,84,52)"/><text x="75.5583%" y="63.50"></text></g><g><title>specialization_graph_of (737,378 samples, 0.18%)</title><rect x="75.5248%" y="37" width="0.1775%" height="15" fill="rgb(207,117,47)"/><text x="75.7748%" y="47.50"></text></g><g><title>resolve_instance (1,204,643 samples, 0.29%)</title><rect x="75.4160%" y="53" width="0.2900%" height="15" fill="rgb(249,43,39)"/><text x="75.6660%" y="63.50"></text></g><g><title>associated_items (417,124 samples, 0.10%)</title><rect x="76.8808%" y="37" width="0.1004%" height="15" fill="rgb(209,38,44)"/><text x="77.1308%" y="47.50"></text></g><g><title>evaluate_obligation (2,720,715 samples, 0.66%)</title><rect x="77.0403%" y="37" width="0.6550%" height="15" fill="rgb(236,212,23)"/><text x="77.2903%" y="47.50"></text></g><g><title>mir_built (11,229,563 samples, 2.70%)</title><rect x="75.2506%" y="69" width="2.7037%" height="15" fill="rgb(242,79,21)"/><text x="75.5006%" y="79.50">mi..</text></g><g><title>typeck (9,238,631 samples, 2.22%)</title><rect x="75.7299%" y="53" width="2.2243%" height="15" fill="rgb(211,96,35)"/><text x="75.9799%" y="63.50">t..</text></g><g><title>mir_const (12,060,272 samples, 2.90%)</title><rect x="75.1685%" y="101" width="2.9037%" height="15" fill="rgb(253,215,40)"/><text x="75.4185%" y="111.50">mi..</text></g><g><title>unsafety_check_result (11,870,090 samples, 2.86%)</title><rect x="75.2143%" y="85" width="2.8579%" height="15" fill="rgb(211,81,21)"/><text x="75.4643%" y="95.50">un..</text></g><g><title>unsafety_check_result (489,574 samples, 0.12%)</title><rect x="77.9543%" y="69" width="0.1179%" height="15" fill="rgb(208,190,38)"/><text x="78.2043%" y="79.50"></text></g><g><title>mir_promoted (12,149,563 samples, 2.93%)</title><rect x="75.1488%" y="117" width="2.9252%" height="15" fill="rgb(235,213,38)"/><text x="75.3988%" y="127.50">mi..</text></g><g><title>type_op_normalize_predicate (847,921 samples, 0.20%)</title><rect x="78.1042%" y="117" width="0.2041%" height="15" fill="rgb(237,122,38)"/><text x="78.3542%" y="127.50"></text></g><g><title>type_of (18,030,109 samples, 4.34%)</title><rect x="74.2702%" y="149" width="4.3410%" height="15" fill="rgb(244,218,35)"/><text x="74.5202%" y="159.50">type_..</text></g><g><title>mir_borrowck (17,986,388 samples, 4.33%)</title><rect x="74.2808%" y="133" width="4.3305%" height="15" fill="rgb(240,68,47)"/><text x="74.5308%" y="143.50">mir_b..</text></g><g><title>type_op_prove_predicate (1,237,002 samples, 0.30%)</title><rect x="78.3134%" y="117" width="0.2978%" height="15" fill="rgb(210,16,53)"/><text x="78.5634%" y="127.50"></text></g><g><title>item_types_checking (21,543,758 samples, 5.19%)</title><rect x="73.4402%" y="181" width="5.1870%" height="15" fill="rgb(235,124,12)"/><text x="73.6902%" y="191.50">item_t..</text></g><g><title>check_mod_item_types (21,532,798 samples, 5.18%)</title><rect x="73.4429%" y="165" width="5.1843%" height="15" fill="rgb(224,169,11)"/><text x="73.6929%" y="175.50">check_..</text></g><g><title>fn_sig (660,223 samples, 0.16%)</title><rect x="78.7922%" y="149" width="0.1590%" height="15" fill="rgb(250,166,2)"/><text x="79.0422%" y="159.50"></text></g><g><title>resolve_lifetimes (550,447 samples, 0.13%)</title><rect x="79.0159%" y="117" width="0.1325%" height="15" fill="rgb(242,216,29)"/><text x="79.2659%" y="127.50"></text></g><g><title>is_late_bound_map (568,247 samples, 0.14%)</title><rect x="79.0125%" y="133" width="0.1368%" height="15" fill="rgb(230,116,27)"/><text x="79.2625%" y="143.50"></text></g><g><title>generics_of (1,140,741 samples, 0.27%)</title><rect x="78.9512%" y="149" width="0.2746%" height="15" fill="rgb(228,99,48)"/><text x="79.2012%" y="159.50"></text></g><g><title>late_bound_vars_map (1,085,941 samples, 0.26%)</title><rect x="79.4181%" y="101" width="0.2615%" height="15" fill="rgb(253,11,6)"/><text x="79.6681%" y="111.50"></text></g><g><title>resolve_lifetimes (1,073,261 samples, 0.26%)</title><rect x="79.4212%" y="85" width="0.2584%" height="15" fill="rgb(247,143,39)"/><text x="79.6712%" y="95.50"></text></g><g><title>lint_levels (887,720 samples, 0.21%)</title><rect x="79.4659%" y="69" width="0.2137%" height="15" fill="rgb(236,97,10)"/><text x="79.7159%" y="79.50"></text></g><g><title>explicit_predicates_of (1,415,442 samples, 0.34%)</title><rect x="79.3461%" y="117" width="0.3408%" height="15" fill="rgb(233,208,19)"/><text x="79.5961%" y="127.50"></text></g><g><title>predicates_of (2,557,005 samples, 0.62%)</title><rect x="79.2678%" y="149" width="0.6156%" height="15" fill="rgb(216,164,2)"/><text x="79.5178%" y="159.50"></text></g><g><title>predicates_defined_on (2,433,884 samples, 0.59%)</title><rect x="79.2974%" y="133" width="0.5860%" height="15" fill="rgb(220,129,5)"/><text x="79.5474%" y="143.50"></text></g><g><title>inferred_outlives_of (816,008 samples, 0.20%)</title><rect x="79.6869%" y="117" width="0.1965%" height="15" fill="rgb(242,17,10)"/><text x="79.9369%" y="127.50"></text></g><g><title>inferred_outlives_crate (765,818 samples, 0.18%)</title><rect x="79.6990%" y="101" width="0.1844%" height="15" fill="rgb(242,107,0)"/><text x="79.9490%" y="111.50"></text></g><g><title>type_of (483,694 samples, 0.12%)</title><rect x="79.7669%" y="85" width="0.1165%" height="15" fill="rgb(251,28,31)"/><text x="80.0169%" y="95.50"></text></g><g><title>type_collecting (5,428,440 samples, 1.31%)</title><rect x="78.6282%" y="181" width="1.3070%" height="15" fill="rgb(233,223,10)"/><text x="78.8782%" y="191.50"></text></g><g><title>collect_mod_item_types (5,412,380 samples, 1.30%)</title><rect x="78.6320%" y="165" width="1.3031%" height="15" fill="rgb(215,21,27)"/><text x="78.8820%" y="175.50"></text></g><g><title>evaluate_obligation (1,032,198 samples, 0.25%)</title><rect x="81.1326%" y="149" width="0.2485%" height="15" fill="rgb(232,23,21)"/><text x="81.3826%" y="159.50"></text></g><g><title>implied_outlives_bounds (547,815 samples, 0.13%)</title><rect x="81.3813%" y="149" width="0.1319%" height="15" fill="rgb(244,5,23)"/><text x="81.6313%" y="159.50"></text></g><g><title>object_safety_violations (756,848 samples, 0.18%)</title><rect x="81.5132%" y="149" width="0.1822%" height="15" fill="rgb(226,81,46)"/><text x="81.7632%" y="159.50"></text></g><g><title>param_env (653,095 samples, 0.16%)</title><rect x="81.6954%" y="149" width="0.1572%" height="15" fill="rgb(247,70,30)"/><text x="81.9454%" y="159.50"></text></g><g><title>region_scope_tree (1,498,273 samples, 0.36%)</title><rect x="81.8602%" y="149" width="0.3607%" height="15" fill="rgb(212,68,19)"/><text x="82.1102%" y="159.50"></text></g><g><title>check_impl_item_well_formed (9,067,712 samples, 2.18%)</title><rect x="80.0538%" y="165" width="2.1832%" height="15" fill="rgb(240,187,13)"/><text x="80.3038%" y="175.50">c..</text></g><g><title>evaluate_obligation (596,054 samples, 0.14%)</title><rect x="82.8628%" y="149" width="0.1435%" height="15" fill="rgb(223,113,26)"/><text x="83.1128%" y="159.50"></text></g><g><title>param_env (501,799 samples, 0.12%)</title><rect x="83.1644%" y="149" width="0.1208%" height="15" fill="rgb(206,192,2)"/><text x="83.4144%" y="159.50"></text></g><g><title>check_item_well_formed (4,692,384 samples, 1.13%)</title><rect x="82.2369%" y="165" width="1.1298%" height="15" fill="rgb(241,108,4)"/><text x="82.4869%" y="175.50"></text></g><g><title>analysis (346,057,132 samples, 83.32%)</title><rect x="0.2045%" y="213" width="83.3181%" height="15" fill="rgb(247,173,49)"/><text x="0.4545%" y="223.50">analysis</text></g><g><title>type_check_crate (199,741,706 samples, 48.09%)</title><rect x="35.4319%" y="197" width="48.0906%" height="15" fill="rgb(224,114,35)"/><text x="35.6819%" y="207.50">type_check_crate</text></g><g><title>wf_checking (14,886,685 samples, 3.58%)</title><rect x="79.9383%" y="181" width="3.5842%" height="15" fill="rgb(245,159,27)"/><text x="80.1883%" y="191.50">wf_c..</text></g><g><title>check_trait_item_well_formed (647,167 samples, 0.16%)</title><rect x="83.3667%" y="165" width="0.1558%" height="15" fill="rgb(245,172,44)"/><text x="83.6167%" y="175.50"></text></g><g><title>metadata_register_crate (2,657,320 samples, 0.64%)</title><rect x="92.6102%" y="165" width="0.6398%" height="15" fill="rgb(236,23,11)"/><text x="92.8602%" y="175.50"></text></g><g><title>metadata_register_crate (957,219 samples, 0.23%)</title><rect x="93.0196%" y="149" width="0.2305%" height="15" fill="rgb(205,117,38)"/><text x="93.2696%" y="159.50"></text></g><g><title>macro_expand_crate (40,139,643 samples, 9.66%)</title><rect x="83.8130%" y="197" width="9.6642%" height="15" fill="rgb(237,72,25)"/><text x="84.0630%" y="207.50">macro_expand_c..</text></g><g><title>expand_crate (40,120,483 samples, 9.66%)</title><rect x="83.8176%" y="181" width="9.6596%" height="15" fill="rgb(244,70,9)"/><text x="84.0676%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (943,541 samples, 0.23%)</title><rect x="93.2500%" y="165" width="0.2272%" height="15" fill="rgb(217,125,39)"/><text x="93.5000%" y="175.50"></text></g><g><title>late_resolve_crate (4,389,119 samples, 1.06%)</title><rect x="93.5750%" y="181" width="1.0567%" height="15" fill="rgb(235,36,10)"/><text x="93.8250%" y="191.50"></text></g><g><title>configure_and_expand (46,020,378 samples, 11.08%)</title><rect x="83.6231%" y="213" width="11.0800%" height="15" fill="rgb(251,123,47)"/><text x="83.8731%" y="223.50">configure_and_ex..</text></g><g><title>resolve_crate (4,993,176 samples, 1.20%)</title><rect x="93.5010%" y="197" width="1.2022%" height="15" fill="rgb(221,13,13)"/><text x="93.7510%" y="207.50"></text></g><g><title>drop_ast (468,475 samples, 0.11%)</title><rect x="94.7031%" y="213" width="0.1128%" height="15" fill="rgb(238,131,9)"/><text x="94.9531%" y="223.50"></text></g><g><title>early_lint_checks (1,101,552 samples, 0.27%)</title><rect x="94.8209%" y="213" width="0.2652%" height="15" fill="rgb(211,50,8)"/><text x="95.0709%" y="223.50"></text></g><g><title>free_global_ctxt (6,003,926 samples, 1.45%)</title><rect x="95.0861%" y="213" width="1.4455%" height="15" fill="rgb(245,182,24)"/><text x="95.3361%" y="223.50"></text></g><g><title>generate_crate_metadata (2,527,048 samples, 0.61%)</title><rect x="96.5316%" y="213" width="0.6084%" height="15" fill="rgb(242,14,37)"/><text x="96.7816%" y="223.50"></text></g><g><title>hir_lowering (9,410,134 samples, 2.27%)</title><rect x="97.1400%" y="213" width="2.2656%" height="15" fill="rgb(246,228,12)"/><text x="97.3900%" y="223.50">h..</text></g><g><title>self_profile_alloc_query_strings (1,358,265 samples, 0.33%)</title><rect x="99.5398%" y="213" width="0.3270%" height="15" fill="rgb(213,55,15)"/><text x="99.7898%" y="223.50"></text></g><g><title>all (415,344,657 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (415,344,657 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (460,385 samples, 0.11%)</title><rect x="99.8892%" y="213" width="0.1108%" height="15" fill="rgb(209,121,21)"/><text x="100.1392%" y="223.50"></text></g></svg></svg>