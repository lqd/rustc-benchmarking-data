<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (154,291 samples, 0.18%)</title><rect x="7.0822%" y="213" width="0.1843%" height="15" fill="rgb(227,0,7)"/><text x="7.3322%" y="223.50"></text></g><g><title>item_attrs (157,413 samples, 0.19%)</title><rect x="7.5645%" y="181" width="0.1881%" height="15" fill="rgb(217,0,24)"/><text x="7.8145%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (151,622 samples, 0.18%)</title><rect x="7.5714%" y="165" width="0.1812%" height="15" fill="rgb(221,193,54)"/><text x="7.8214%" y="175.50"></text></g><g><title>codegen_fn_attrs (243,294 samples, 0.29%)</title><rect x="7.4783%" y="197" width="0.2907%" height="15" fill="rgb(248,212,6)"/><text x="7.7283%" y="207.50"></text></g><g><title>is_copy_raw (86,680 samples, 0.10%)</title><rect x="9.0447%" y="181" width="0.1036%" height="15" fill="rgb(208,68,35)"/><text x="9.2947%" y="191.50"></text></g><g><title>adt_drop_tys (195,432 samples, 0.23%)</title><rect x="9.1913%" y="165" width="0.2335%" height="15" fill="rgb(232,128,0)"/><text x="9.4413%" y="175.50"></text></g><g><title>needs_drop_raw (516,686 samples, 0.62%)</title><rect x="9.1483%" y="181" width="0.6173%" height="15" fill="rgb(207,160,47)"/><text x="9.3983%" y="191.50"></text></g><g><title>is_copy_raw (285,244 samples, 0.34%)</title><rect x="9.4248%" y="165" width="0.3408%" height="15" fill="rgb(228,23,34)"/><text x="9.6748%" y="175.50"></text></g><g><title>evaluate_obligation (244,774 samples, 0.29%)</title><rect x="9.4732%" y="149" width="0.2924%" height="15" fill="rgb(218,30,26)"/><text x="9.7232%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (105,323 samples, 0.13%)</title><rect x="9.8931%" y="165" width="0.1258%" height="15" fill="rgb(220,122,19)"/><text x="10.1431%" y="175.50"></text></g><g><title>impl_parent (773,547 samples, 0.92%)</title><rect x="11.4329%" y="149" width="0.9242%" height="15" fill="rgb(250,228,42)"/><text x="11.6829%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (503,865 samples, 0.60%)</title><rect x="11.7551%" y="133" width="0.6020%" height="15" fill="rgb(240,193,28)"/><text x="12.0051%" y="143.50"></text></g><g><title>specialization_graph_of (4,211,047 samples, 5.03%)</title><rect x="10.0623%" y="165" width="5.0312%" height="15" fill="rgb(216,20,37)"/><text x="10.3123%" y="175.50">specia..</text></g><g><title>impl_trait_ref (2,290,309 samples, 2.74%)</title><rect x="12.3571%" y="149" width="2.7364%" height="15" fill="rgb(206,188,39)"/><text x="12.6071%" y="159.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,027,536 samples, 2.42%)</title><rect x="12.6711%" y="133" width="2.4224%" height="15" fill="rgb(217,207,13)"/><text x="12.9211%" y="143.50">me..</text></g><g><title>resolve_instance (4,490,740 samples, 5.37%)</title><rect x="9.7656%" y="181" width="5.3654%" height="15" fill="rgb(231,73,38)"/><text x="10.0156%" y="191.50">resolve..</text></g><g><title>thir_body (433,415 samples, 0.52%)</title><rect x="15.1425%" y="181" width="0.5178%" height="15" fill="rgb(225,20,46)"/><text x="15.3925%" y="191.50"></text></g><g><title>mir_const (7,519,296 samples, 8.98%)</title><rect x="6.6923%" y="229" width="8.9838%" height="15" fill="rgb(210,31,41)"/><text x="6.9423%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (7,038,629 samples, 8.41%)</title><rect x="7.2666%" y="213" width="8.4095%" height="15" fill="rgb(221,200,47)"/><text x="7.5166%" y="223.50">unsafety_che..</text></g><g><title>mir_built (6,615,474 samples, 7.90%)</title><rect x="7.7721%" y="197" width="7.9039%" height="15" fill="rgb(226,26,5)"/><text x="8.0221%" y="207.50">mir_built</text></g><g><title>has_structural_eq_impls (213,942 samples, 0.26%)</title><rect x="15.9107%" y="213" width="0.2556%" height="15" fill="rgb(249,33,26)"/><text x="16.1607%" y="223.50"></text></g><g><title>evaluate_obligation (186,842 samples, 0.22%)</title><rect x="15.9431%" y="197" width="0.2232%" height="15" fill="rgb(235,183,28)"/><text x="16.1931%" y="207.50"></text></g><g><title>trait_impls_of (156,782 samples, 0.19%)</title><rect x="15.9790%" y="181" width="0.1873%" height="15" fill="rgb(221,5,38)"/><text x="16.2290%" y="191.50"></text></g><g><title>is_freeze_raw (133,593 samples, 0.16%)</title><rect x="16.1678%" y="213" width="0.1596%" height="15" fill="rgb(247,18,42)"/><text x="16.4178%" y="223.50"></text></g><g><title>evaluate_obligation (127,773 samples, 0.15%)</title><rect x="16.1747%" y="197" width="0.1527%" height="15" fill="rgb(241,131,45)"/><text x="16.4247%" y="207.50"></text></g><g><title>mir_const (222,461 samples, 0.27%)</title><rect x="16.3287%" y="213" width="0.2658%" height="15" fill="rgb(249,31,29)"/><text x="16.5787%" y="223.50"></text></g><g><title>unsafety_check_result (180,221 samples, 0.22%)</title><rect x="16.3792%" y="197" width="0.2153%" height="15" fill="rgb(225,111,53)"/><text x="16.6292%" y="207.50"></text></g><g><title>mir_built (161,041 samples, 0.19%)</title><rect x="16.4021%" y="181" width="0.1924%" height="15" fill="rgb(238,160,17)"/><text x="16.6521%" y="191.50"></text></g><g><title>mir_promoted (8,726,949 samples, 10.43%)</title><rect x="6.2420%" y="245" width="10.4266%" height="15" fill="rgb(214,148,48)"/><text x="6.4920%" y="255.50">mir_promoted</text></g><g><title>mir_const_qualif (830,809 samples, 0.99%)</title><rect x="15.6761%" y="229" width="0.9926%" height="15" fill="rgb(232,36,49)"/><text x="15.9261%" y="239.50"></text></g><g><title>type_op_ascribe_user_type (221,112 samples, 0.26%)</title><rect x="16.6744%" y="245" width="0.2642%" height="15" fill="rgb(209,103,24)"/><text x="16.9244%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (101,382 samples, 0.12%)</title><rect x="16.9386%" y="245" width="0.1211%" height="15" fill="rgb(229,88,8)"/><text x="17.1886%" y="255.50"></text></g><g><title>type_op_prove_predicate (715,007 samples, 0.85%)</title><rect x="17.1344%" y="245" width="0.8543%" height="15" fill="rgb(213,181,19)"/><text x="17.3844%" y="255.50"></text></g><g><title>MIR_borrow_checking (14,379,689 samples, 17.18%)</title><rect x="0.8177%" y="277" width="17.1803%" height="15" fill="rgb(254,191,54)"/><text x="1.0677%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,332,118 samples, 17.12%)</title><rect x="0.8746%" y="261" width="17.1235%" height="15" fill="rgb(241,83,37)"/><text x="1.1246%" y="271.50">mir_borrowck</text></g><g><title>MIR_effect_checking (193,372 samples, 0.23%)</title><rect x="17.9980%" y="277" width="0.2310%" height="15" fill="rgb(233,36,39)"/><text x="18.2480%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (157,402 samples, 0.19%)</title><rect x="18.0410%" y="261" width="0.1881%" height="15" fill="rgb(226,3,54)"/><text x="18.2910%" y="271.50"></text></g><g><title>hir_module_items (104,341 samples, 0.12%)</title><rect x="18.2291%" y="277" width="0.1247%" height="15" fill="rgb(245,192,40)"/><text x="18.4791%" y="287.50"></text></g><g><title>codegen_fn_attrs (231,663 samples, 0.28%)</title><rect x="18.5013%" y="245" width="0.2768%" height="15" fill="rgb(238,167,29)"/><text x="18.7513%" y="255.50"></text></g><g><title>check_mod_attrs (336,143 samples, 0.40%)</title><rect x="18.3766%" y="261" width="0.4016%" height="15" fill="rgb(232,182,51)"/><text x="18.6266%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (236,962 samples, 0.28%)</title><rect x="18.8798%" y="261" width="0.2831%" height="15" fill="rgb(231,60,39)"/><text x="19.1298%" y="271.50"></text></g><g><title>misc_checking_1 (708,508 samples, 0.85%)</title><rect x="18.3547%" y="277" width="0.8465%" height="15" fill="rgb(208,69,12)"/><text x="18.6047%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (226,312 samples, 0.27%)</title><rect x="19.2032%" y="261" width="0.2704%" height="15" fill="rgb(235,93,37)"/><text x="19.4532%" y="271.50"></text></g><g><title>check_mod_liveness (180,162 samples, 0.22%)</title><rect x="19.2583%" y="245" width="0.2153%" height="15" fill="rgb(213,116,39)"/><text x="19.5083%" y="255.50"></text></g><g><title>misc_checking_2 (415,104 samples, 0.50%)</title><rect x="19.2012%" y="277" width="0.4960%" height="15" fill="rgb(222,207,29)"/><text x="19.4512%" y="287.50"></text></g><g><title>match_checking (187,122 samples, 0.22%)</title><rect x="19.4736%" y="261" width="0.2236%" height="15" fill="rgb(206,96,30)"/><text x="19.7236%" y="271.50"></text></g><g><title>check_match (174,062 samples, 0.21%)</title><rect x="19.4892%" y="245" width="0.2080%" height="15" fill="rgb(218,138,4)"/><text x="19.7392%" y="255.50"></text></g><g><title>death_checking (142,821 samples, 0.17%)</title><rect x="19.8002%" y="261" width="0.1706%" height="15" fill="rgb(250,191,14)"/><text x="20.0502%" y="271.50"></text></g><g><title>fn_abi_of_instance (141,141 samples, 0.17%)</title><rect x="20.6455%" y="133" width="0.1686%" height="15" fill="rgb(239,60,40)"/><text x="20.8955%" y="143.50"></text></g><g><title>fn_abi_of_instance (145,611 samples, 0.17%)</title><rect x="21.1403%" y="69" width="0.1740%" height="15" fill="rgb(206,27,48)"/><text x="21.3903%" y="79.50"></text></g><g><title>eval_to_const_value_raw (305,784 samples, 0.37%)</title><rect x="21.0616%" y="117" width="0.3653%" height="15" fill="rgb(225,35,8)"/><text x="21.3116%" y="127.50"></text></g><g><title>eval_to_const_value_raw (305,204 samples, 0.36%)</title><rect x="21.0623%" y="101" width="0.3646%" height="15" fill="rgb(250,213,24)"/><text x="21.3123%" y="111.50"></text></g><g><title>eval_to_allocation_raw (301,504 samples, 0.36%)</title><rect x="21.0668%" y="85" width="0.3602%" height="15" fill="rgb(247,123,22)"/><text x="21.3168%" y="95.50"></text></g><g><title>eval_to_const_value_raw (857,459 samples, 1.02%)</title><rect x="20.4068%" y="181" width="1.0245%" height="15" fill="rgb(231,138,38)"/><text x="20.6568%" y="191.50"></text></g><g><title>eval_to_const_value_raw (855,009 samples, 1.02%)</title><rect x="20.4097%" y="165" width="1.0215%" height="15" fill="rgb(231,145,46)"/><text x="20.6597%" y="175.50"></text></g><g><title>eval_to_allocation_raw (851,789 samples, 1.02%)</title><rect x="20.4136%" y="149" width="1.0177%" height="15" fill="rgb(251,118,11)"/><text x="20.6636%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (312,324 samples, 0.37%)</title><rect x="21.0581%" y="133" width="0.3732%" height="15" fill="rgb(217,147,25)"/><text x="21.3081%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,016,321 samples, 1.21%)</title><rect x="20.2197%" y="229" width="1.2143%" height="15" fill="rgb(247,81,37)"/><text x="20.4697%" y="239.50"></text></g><g><title>eval_to_allocation_raw (1,012,271 samples, 1.21%)</title><rect x="20.2245%" y="213" width="1.2094%" height="15" fill="rgb(209,12,38)"/><text x="20.4745%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (872,789 samples, 1.04%)</title><rect x="20.3912%" y="197" width="1.0428%" height="15" fill="rgb(227,1,9)"/><text x="20.6412%" y="207.50"></text></g><g><title>param_env (124,492 samples, 0.15%)</title><rect x="21.4818%" y="229" width="0.1487%" height="15" fill="rgb(248,47,43)"/><text x="21.7318%" y="239.50"></text></g><g><title>impl_parent (960,311 samples, 1.15%)</title><rect x="22.8605%" y="197" width="1.1473%" height="15" fill="rgb(221,10,30)"/><text x="23.1105%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (458,606 samples, 0.55%)</title><rect x="23.4599%" y="181" width="0.5479%" height="15" fill="rgb(210,229,1)"/><text x="23.7099%" y="191.50"></text></g><g><title>specialization_graph_of (3,700,182 samples, 4.42%)</title><rect x="21.6875%" y="213" width="4.4208%" height="15" fill="rgb(222,148,37)"/><text x="21.9375%" y="223.50">speci..</text></g><g><title>impl_trait_ref (1,758,101 samples, 2.10%)</title><rect x="24.0079%" y="197" width="2.1005%" height="15" fill="rgb(234,67,33)"/><text x="24.2579%" y="207.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,500,817 samples, 1.79%)</title><rect x="24.3153%" y="181" width="1.7931%" height="15" fill="rgb(247,98,35)"/><text x="24.5653%" y="191.50">m..</text></g><g><title>resolve_instance (3,750,772 samples, 4.48%)</title><rect x="21.6306%" y="229" width="4.4813%" height="15" fill="rgb(247,138,52)"/><text x="21.8806%" y="239.50">resol..</text></g><g><title>crate_lints (5,144,888 samples, 6.15%)</title><rect x="19.9739%" y="245" width="6.1469%" height="15" fill="rgb(213,79,30)"/><text x="20.2239%" y="255.50">crate_li..</text></g><g><title>lint_checking (5,322,530 samples, 6.36%)</title><rect x="19.9708%" y="261" width="6.3592%" height="15" fill="rgb(246,177,23)"/><text x="20.2208%" y="271.50">lint_che..</text></g><g><title>module_lints (175,102 samples, 0.21%)</title><rect x="26.1208%" y="245" width="0.2092%" height="15" fill="rgb(230,62,27)"/><text x="26.3708%" y="255.50"></text></g><g><title>lint_mod (170,142 samples, 0.20%)</title><rect x="26.1267%" y="229" width="0.2033%" height="15" fill="rgb(216,154,8)"/><text x="26.3767%" y="239.50"></text></g><g><title>privacy_checking_modules (348,133 samples, 0.42%)</title><rect x="26.4079%" y="261" width="0.4159%" height="15" fill="rgb(244,35,45)"/><text x="26.6579%" y="271.50"></text></g><g><title>check_mod_privacy (344,913 samples, 0.41%)</title><rect x="26.4118%" y="245" width="0.4121%" height="15" fill="rgb(251,115,12)"/><text x="26.6618%" y="255.50"></text></g><g><title>misc_checking_3 (5,973,276 samples, 7.14%)</title><rect x="19.6971%" y="277" width="7.1366%" height="15" fill="rgb(240,54,50)"/><text x="19.9471%" y="287.50">misc_check..</text></g><g><title>impl_trait_ref (153,481 samples, 0.18%)</title><rect x="27.0863%" y="213" width="0.1834%" height="15" fill="rgb(233,84,52)"/><text x="27.3363%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (146,281 samples, 0.17%)</title><rect x="27.0949%" y="197" width="0.1748%" height="15" fill="rgb(207,117,47)"/><text x="27.3449%" y="207.50"></text></g><g><title>coherent_trait (360,474 samples, 0.43%)</title><rect x="26.9103%" y="245" width="0.4307%" height="15" fill="rgb(249,43,39)"/><text x="27.1603%" y="255.50"></text></g><g><title>specialization_graph_of (353,794 samples, 0.42%)</title><rect x="26.9183%" y="229" width="0.4227%" height="15" fill="rgb(209,38,44)"/><text x="27.1683%" y="239.50"></text></g><g><title>coherence_checking (407,804 samples, 0.49%)</title><rect x="26.8972%" y="261" width="0.4872%" height="15" fill="rgb(236,212,23)"/><text x="27.1472%" y="271.50"></text></g><g><title>associated_item (867,047 samples, 1.04%)</title><rect x="37.4070%" y="197" width="1.0359%" height="15" fill="rgb(242,79,21)"/><text x="37.6570%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (729,037 samples, 0.87%)</title><rect x="37.5719%" y="181" width="0.8710%" height="15" fill="rgb(211,96,35)"/><text x="37.8219%" y="191.50"></text></g><g><title>associated_items (1,113,681 samples, 1.33%)</title><rect x="37.1562%" y="213" width="1.3306%" height="15" fill="rgb(253,215,40)"/><text x="37.4062%" y="223.50"></text></g><g><title>adt_dtorck_constraint (87,252 samples, 0.10%)</title><rect x="38.7203%" y="181" width="0.1042%" height="15" fill="rgb(211,81,21)"/><text x="38.9703%" y="191.50"></text></g><g><title>dropck_outlives (220,313 samples, 0.26%)</title><rect x="38.5793%" y="213" width="0.2632%" height="15" fill="rgb(208,190,38)"/><text x="38.8293%" y="223.50"></text></g><g><title>adt_dtorck_constraint (154,603 samples, 0.18%)</title><rect x="38.6578%" y="197" width="0.1847%" height="15" fill="rgb(235,213,38)"/><text x="38.9078%" y="207.50"></text></g><g><title>fn_abi_of_instance (87,441 samples, 0.10%)</title><rect x="38.9221%" y="165" width="0.1045%" height="15" fill="rgb(237,122,38)"/><text x="39.1721%" y="175.50"></text></g><g><title>eval_to_const_value_raw (221,902 samples, 0.27%)</title><rect x="38.8425%" y="213" width="0.2651%" height="15" fill="rgb(244,218,35)"/><text x="39.0925%" y="223.50"></text></g><g><title>eval_to_const_value_raw (220,062 samples, 0.26%)</title><rect x="38.8447%" y="197" width="0.2629%" height="15" fill="rgb(240,68,47)"/><text x="39.0947%" y="207.50"></text></g><g><title>eval_to_allocation_raw (215,341 samples, 0.26%)</title><rect x="38.8503%" y="181" width="0.2573%" height="15" fill="rgb(210,16,53)"/><text x="39.1003%" y="191.50"></text></g><g><title>adt_def (87,723 samples, 0.10%)</title><rect x="41.0797%" y="181" width="0.1048%" height="15" fill="rgb(235,124,12)"/><text x="41.3297%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (84,773 samples, 0.10%)</title><rect x="41.0832%" y="165" width="0.1013%" height="15" fill="rgb(224,169,11)"/><text x="41.3332%" y="175.50"></text></g><g><title>adt_sized_constraint (164,433 samples, 0.20%)</title><rect x="41.0609%" y="197" width="0.1965%" height="15" fill="rgb(250,166,2)"/><text x="41.3109%" y="207.50"></text></g><g><title>generics_of (571,847 samples, 0.68%)</title><rect x="41.2583%" y="197" width="0.6832%" height="15" fill="rgb(242,216,29)"/><text x="41.5083%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (247,053 samples, 0.30%)</title><rect x="41.6464%" y="181" width="0.2952%" height="15" fill="rgb(230,116,27)"/><text x="41.8964%" y="191.50"></text></g><g><title>impl_trait_ref (543,824 samples, 0.65%)</title><rect x="42.0169%" y="197" width="0.6497%" height="15" fill="rgb(228,99,48)"/><text x="42.2669%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (462,803 samples, 0.55%)</title><rect x="42.1137%" y="181" width="0.5529%" height="15" fill="rgb(253,11,6)"/><text x="42.3637%" y="191.50"></text></g><g><title>predicates_of (294,654 samples, 0.35%)</title><rect x="42.6961%" y="197" width="0.3520%" height="15" fill="rgb(247,143,39)"/><text x="42.9461%" y="207.50"></text></g><g><title>predicates_defined_on (175,552 samples, 0.21%)</title><rect x="42.8384%" y="181" width="0.2097%" height="15" fill="rgb(236,97,10)"/><text x="43.0884%" y="191.50"></text></g><g><title>specializes (541,708 samples, 0.65%)</title><rect x="43.0481%" y="197" width="0.6472%" height="15" fill="rgb(233,208,19)"/><text x="43.2981%" y="207.50"></text></g><g><title>param_env (308,926 samples, 0.37%)</title><rect x="43.3262%" y="181" width="0.3691%" height="15" fill="rgb(216,164,2)"/><text x="43.5762%" y="191.50"></text></g><g><title>def_span (105,042 samples, 0.13%)</title><rect x="43.5698%" y="165" width="0.1255%" height="15" fill="rgb(220,129,5)"/><text x="43.8198%" y="175.50"></text></g><g><title>metadata_decode_entry_def_span (87,222 samples, 0.10%)</title><rect x="43.5911%" y="149" width="0.1042%" height="15" fill="rgb(242,17,10)"/><text x="43.8411%" y="159.50"></text></g><g><title>trait_impls_of (773,360 samples, 0.92%)</title><rect x="43.7208%" y="197" width="0.9240%" height="15" fill="rgb(242,107,0)"/><text x="43.9708%" y="207.50"></text></g><g><title>implementations_of_trait (267,132 samples, 0.32%)</title><rect x="44.3257%" y="181" width="0.3192%" height="15" fill="rgb(251,28,31)"/><text x="44.5757%" y="191.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (176,070 samples, 0.21%)</title><rect x="44.4345%" y="165" width="0.2104%" height="15" fill="rgb(233,223,10)"/><text x="44.6845%" y="175.50"></text></g><g><title>evaluate_obligation (4,644,217 samples, 5.55%)</title><rect x="39.1076%" y="213" width="5.5487%" height="15" fill="rgb(215,21,27)"/><text x="39.3576%" y="223.50">evaluat..</text></g><g><title>fn_sig (140,030 samples, 0.17%)</title><rect x="44.6840%" y="213" width="0.1673%" height="15" fill="rgb(232,23,21)"/><text x="44.9340%" y="223.50"></text></g><g><title>metadata_decode_entry_fn_sig (124,890 samples, 0.15%)</title><rect x="44.7021%" y="197" width="0.1492%" height="15" fill="rgb(244,5,23)"/><text x="44.9521%" y="207.50"></text></g><g><title>generics_of (155,114 samples, 0.19%)</title><rect x="44.8513%" y="213" width="0.1853%" height="15" fill="rgb(226,81,46)"/><text x="45.1013%" y="223.50"></text></g><g><title>metadata_decode_entry_generics_of (110,062 samples, 0.13%)</title><rect x="44.9051%" y="197" width="0.1315%" height="15" fill="rgb(247,70,30)"/><text x="45.1551%" y="207.50"></text></g><g><title>impl_item_implementor_ids (87,021 samples, 0.10%)</title><rect x="45.0366%" y="213" width="0.1040%" height="15" fill="rgb(212,68,19)"/><text x="45.2866%" y="223.50"></text></g><g><title>impl_trait_ref (92,120 samples, 0.11%)</title><rect x="45.1516%" y="213" width="0.1101%" height="15" fill="rgb(240,187,13)"/><text x="45.4016%" y="223.50"></text></g><g><title>item_attrs (234,705 samples, 0.28%)</title><rect x="45.2944%" y="213" width="0.2804%" height="15" fill="rgb(223,113,26)"/><text x="45.5444%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (224,645 samples, 0.27%)</title><rect x="45.3064%" y="197" width="0.2684%" height="15" fill="rgb(206,192,2)"/><text x="45.5564%" y="207.50"></text></g><g><title>method_autoderef_steps (157,860 samples, 0.19%)</title><rect x="45.6577%" y="213" width="0.1886%" height="15" fill="rgb(241,108,4)"/><text x="45.9077%" y="223.50"></text></g><g><title>explicit_predicates_of (122,731 samples, 0.15%)</title><rect x="46.1927%" y="181" width="0.1466%" height="15" fill="rgb(247,173,49)"/><text x="46.4427%" y="191.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (91,501 samples, 0.11%)</title><rect x="46.2301%" y="165" width="0.1093%" height="15" fill="rgb(224,114,35)"/><text x="46.4801%" y="175.50"></text></g><g><title>predicates_of (390,254 samples, 0.47%)</title><rect x="45.9487%" y="213" width="0.4663%" height="15" fill="rgb(245,159,27)"/><text x="46.1987%" y="223.50"></text></g><g><title>predicates_defined_on (277,733 samples, 0.33%)</title><rect x="46.0832%" y="197" width="0.3318%" height="15" fill="rgb(245,172,44)"/><text x="46.3332%" y="207.50"></text></g><g><title>type_of (98,461 samples, 0.12%)</title><rect x="46.5731%" y="213" width="0.1176%" height="15" fill="rgb(236,23,11)"/><text x="46.8231%" y="223.50"></text></g><g><title>item_bodies_checking (16,179,888 samples, 19.33%)</title><rect x="27.4100%" y="261" width="19.3311%" height="15" fill="rgb(205,117,38)"/><text x="27.6600%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,176,358 samples, 19.33%)</title><rect x="27.4143%" y="245" width="19.3269%" height="15" fill="rgb(237,72,25)"/><text x="27.6643%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (16,146,228 samples, 19.29%)</title><rect x="27.4503%" y="229" width="19.2909%" height="15" fill="rgb(244,70,9)"/><text x="27.7003%" y="239.50">typeck</text></g><g><title>layout_of (90,661 samples, 0.11%)</title><rect x="47.2182%" y="181" width="0.1083%" height="15" fill="rgb(217,125,39)"/><text x="47.4682%" y="191.50"></text></g><g><title>layout_of (139,101 samples, 0.17%)</title><rect x="47.1930%" y="197" width="0.1662%" height="15" fill="rgb(235,36,10)"/><text x="47.4430%" y="207.50"></text></g><g><title>layout_of (204,833 samples, 0.24%)</title><rect x="47.1367%" y="213" width="0.2447%" height="15" fill="rgb(251,123,47)"/><text x="47.3867%" y="223.50"></text></g><g><title>layout_of (234,193 samples, 0.28%)</title><rect x="47.1084%" y="229" width="0.2798%" height="15" fill="rgb(221,13,13)"/><text x="47.3584%" y="239.50"></text></g><g><title>eval_to_const_value_raw (143,121 samples, 0.17%)</title><rect x="48.9310%" y="69" width="0.1710%" height="15" fill="rgb(238,131,9)"/><text x="49.1810%" y="79.50"></text></g><g><title>eval_to_const_value_raw (127,941 samples, 0.15%)</title><rect x="48.9492%" y="53" width="0.1529%" height="15" fill="rgb(211,50,8)"/><text x="49.1992%" y="63.50"></text></g><g><title>eval_to_allocation_raw (126,261 samples, 0.15%)</title><rect x="48.9512%" y="37" width="0.1509%" height="15" fill="rgb(245,182,24)"/><text x="49.2012%" y="47.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (165,321 samples, 0.20%)</title><rect x="48.9141%" y="85" width="0.1975%" height="15" fill="rgb(242,14,37)"/><text x="49.1641%" y="95.50"></text></g><g><title>adt_drop_tys (266,673 samples, 0.32%)</title><rect x="48.7939%" y="101" width="0.3186%" height="15" fill="rgb(246,228,12)"/><text x="49.0439%" y="111.50"></text></g><g><title>adt_drop_tys (293,734 samples, 0.35%)</title><rect x="48.7859%" y="117" width="0.3509%" height="15" fill="rgb(213,55,15)"/><text x="49.0359%" y="127.50"></text></g><g><title>needs_drop_raw (582,626 samples, 0.70%)</title><rect x="48.7743%" y="133" width="0.6961%" height="15" fill="rgb(209,9,3)"/><text x="49.0243%" y="143.50"></text></g><g><title>is_copy_raw (279,172 samples, 0.33%)</title><rect x="49.1369%" y="117" width="0.3335%" height="15" fill="rgb(230,59,30)"/><text x="49.3869%" y="127.50"></text></g><g><title>evaluate_obligation (269,382 samples, 0.32%)</title><rect x="49.1486%" y="101" width="0.3218%" height="15" fill="rgb(209,121,21)"/><text x="49.3986%" y="111.50"></text></g><g><title>trait_impls_of (200,252 samples, 0.24%)</title><rect x="49.2312%" y="85" width="0.2393%" height="15" fill="rgb(220,109,13)"/><text x="49.4812%" y="95.50"></text></g><g><title>associated_item (124,110 samples, 0.15%)</title><rect x="50.7982%" y="101" width="0.1483%" height="15" fill="rgb(232,18,1)"/><text x="51.0482%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (92,030 samples, 0.11%)</title><rect x="50.8366%" y="85" width="0.1100%" height="15" fill="rgb(215,41,42)"/><text x="51.0866%" y="95.50"></text></g><g><title>associated_items (173,142 samples, 0.21%)</title><rect x="50.7467%" y="117" width="0.2069%" height="15" fill="rgb(224,123,36)"/><text x="50.9967%" y="127.50"></text></g><g><title>dropck_outlives (83,792 samples, 0.10%)</title><rect x="50.9762%" y="117" width="0.1001%" height="15" fill="rgb(240,125,3)"/><text x="51.2262%" y="127.50"></text></g><g><title>adt_def (116,991 samples, 0.14%)</title><rect x="51.1987%" y="85" width="0.1398%" height="15" fill="rgb(205,98,50)"/><text x="51.4487%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (115,281 samples, 0.14%)</title><rect x="51.2007%" y="69" width="0.1377%" height="15" fill="rgb(205,185,37)"/><text x="51.4507%" y="79.50"></text></g><g><title>item_attrs (99,271 samples, 0.12%)</title><rect x="51.2199%" y="53" width="0.1186%" height="15" fill="rgb(238,207,15)"/><text x="51.4699%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (97,441 samples, 0.12%)</title><rect x="51.2220%" y="37" width="0.1164%" height="15" fill="rgb(213,199,42)"/><text x="51.4720%" y="47.50"></text></g><g><title>adt_sized_constraint (145,571 samples, 0.17%)</title><rect x="51.1885%" y="101" width="0.1739%" height="15" fill="rgb(235,201,11)"/><text x="51.4385%" y="111.50"></text></g><g><title>evaluate_obligation (480,295 samples, 0.57%)</title><rect x="51.0763%" y="117" width="0.5738%" height="15" fill="rgb(207,46,11)"/><text x="51.3263%" y="127.50"></text></g><g><title>trait_impls_of (211,202 samples, 0.25%)</title><rect x="51.3978%" y="101" width="0.2523%" height="15" fill="rgb(241,35,35)"/><text x="51.6478%" y="111.50"></text></g><g><title>mir_const (3,000,894 samples, 3.59%)</title><rect x="48.3957%" y="181" width="3.5854%" height="15" fill="rgb(243,32,47)"/><text x="48.6457%" y="191.50">mir_..</text></g><g><title>unsafety_check_result (2,888,562 samples, 3.45%)</title><rect x="48.5299%" y="165" width="3.4511%" height="15" fill="rgb(247,202,23)"/><text x="48.7799%" y="175.50">uns..</text></g><g><title>mir_built (2,821,432 samples, 3.37%)</title><rect x="48.6101%" y="149" width="3.3709%" height="15" fill="rgb(219,102,11)"/><text x="48.8601%" y="159.50">mir..</text></g><g><title>typeck (1,948,631 samples, 2.33%)</title><rect x="49.6529%" y="133" width="2.3282%" height="15" fill="rgb(243,110,44)"/><text x="49.9029%" y="143.50">t..</text></g><g><title>mir_promoted (3,094,944 samples, 3.70%)</title><rect x="48.2898%" y="197" width="3.6977%" height="15" fill="rgb(222,74,54)"/><text x="48.5398%" y="207.50">mir_..</text></g><g><title>type_op_prove_predicate (126,542 samples, 0.15%)</title><rect x="52.1249%" y="197" width="0.1512%" height="15" fill="rgb(216,99,12)"/><text x="52.3749%" y="207.50"></text></g><g><title>type_of (4,091,545 samples, 4.89%)</title><rect x="47.3955%" y="229" width="4.8884%" height="15" fill="rgb(226,22,26)"/><text x="47.6455%" y="239.50">type_of</text></g><g><title>mir_borrowck (4,088,015 samples, 4.88%)</title><rect x="47.3997%" y="213" width="4.8842%" height="15" fill="rgb(217,163,10)"/><text x="47.6497%" y="223.50">mir_bo..</text></g><g><title>impl_trait_ref (242,862 samples, 0.29%)</title><rect x="53.2954%" y="101" width="0.2902%" height="15" fill="rgb(213,25,53)"/><text x="53.5454%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (219,372 samples, 0.26%)</title><rect x="53.3235%" y="85" width="0.2621%" height="15" fill="rgb(252,105,26)"/><text x="53.5735%" y="95.50"></text></g><g><title>coherent_trait (437,944 samples, 0.52%)</title><rect x="53.1014%" y="133" width="0.5232%" height="15" fill="rgb(220,39,43)"/><text x="53.3514%" y="143.50"></text></g><g><title>specialization_graph_of (436,394 samples, 0.52%)</title><rect x="53.1033%" y="117" width="0.5214%" height="15" fill="rgb(229,68,48)"/><text x="53.3533%" y="127.50"></text></g><g><title>adt_destructor (451,774 samples, 0.54%)</title><rect x="53.0913%" y="165" width="0.5398%" height="15" fill="rgb(252,8,32)"/><text x="53.3413%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_destructor (450,724 samples, 0.54%)</title><rect x="53.0926%" y="149" width="0.5385%" height="15" fill="rgb(223,20,43)"/><text x="53.3426%" y="159.50"></text></g><g><title>adt_dtorck_constraint (579,688 samples, 0.69%)</title><rect x="53.0433%" y="181" width="0.6926%" height="15" fill="rgb(229,81,49)"/><text x="53.2933%" y="191.50"></text></g><g><title>dropck_outlives (658,698 samples, 0.79%)</title><rect x="52.9686%" y="213" width="0.7870%" height="15" fill="rgb(236,28,36)"/><text x="53.2186%" y="223.50"></text></g><g><title>adt_dtorck_constraint (630,318 samples, 0.75%)</title><rect x="53.0025%" y="197" width="0.7531%" height="15" fill="rgb(249,185,26)"/><text x="53.2525%" y="207.50"></text></g><g><title>evaluate_obligation (89,211 samples, 0.11%)</title><rect x="53.7555%" y="213" width="0.1066%" height="15" fill="rgb(249,174,33)"/><text x="54.0055%" y="223.50"></text></g><g><title>item_types_checking (6,071,128 samples, 7.25%)</title><rect x="46.7412%" y="261" width="7.2536%" height="15" fill="rgb(233,201,37)"/><text x="46.9912%" y="271.50">item_types..</text></g><g><title>check_mod_item_types (6,065,988 samples, 7.25%)</title><rect x="46.7473%" y="245" width="7.2474%" height="15" fill="rgb(221,78,26)"/><text x="46.9973%" y="255.50">check_mod_..</text></g><g><title>typeck (1,431,935 samples, 1.71%)</title><rect x="52.2839%" y="229" width="1.7108%" height="15" fill="rgb(250,127,30)"/><text x="52.5339%" y="239.50"></text></g><g><title>lint_levels (86,650 samples, 0.10%)</title><rect x="53.9947%" y="261" width="0.1035%" height="15" fill="rgb(230,49,44)"/><text x="54.2447%" y="271.50"></text></g><g><title>late_bound_vars_map (85,271 samples, 0.10%)</title><rect x="54.3718%" y="213" width="0.1019%" height="15" fill="rgb(229,67,23)"/><text x="54.6218%" y="223.50"></text></g><g><title>fn_sig (200,953 samples, 0.24%)</title><rect x="54.2571%" y="229" width="0.2401%" height="15" fill="rgb(249,83,47)"/><text x="54.5071%" y="239.50"></text></g><g><title>generics_of (111,992 samples, 0.13%)</title><rect x="54.4971%" y="229" width="0.1338%" height="15" fill="rgb(215,43,3)"/><text x="54.7471%" y="239.50"></text></g><g><title>predicates_of (154,290 samples, 0.18%)</title><rect x="54.6572%" y="229" width="0.1843%" height="15" fill="rgb(238,154,13)"/><text x="54.9072%" y="239.50"></text></g><g><title>predicates_defined_on (136,640 samples, 0.16%)</title><rect x="54.6783%" y="213" width="0.1633%" height="15" fill="rgb(219,56,2)"/><text x="54.9283%" y="223.50"></text></g><g><title>type_collecting (700,348 samples, 0.84%)</title><rect x="54.0996%" y="261" width="0.8367%" height="15" fill="rgb(233,0,4)"/><text x="54.3496%" y="271.50"></text></g><g><title>collect_mod_item_types (692,718 samples, 0.83%)</title><rect x="54.1087%" y="245" width="0.8276%" height="15" fill="rgb(235,30,7)"/><text x="54.3587%" y="255.50"></text></g><g><title>evaluate_obligation (127,982 samples, 0.15%)</title><rect x="55.2121%" y="229" width="0.1529%" height="15" fill="rgb(250,79,13)"/><text x="55.4621%" y="239.50"></text></g><g><title>check_impl_item_well_formed (399,664 samples, 0.48%)</title><rect x="55.0170%" y="245" width="0.4775%" height="15" fill="rgb(211,146,34)"/><text x="55.2670%" y="255.50"></text></g><g><title>adt_sized_constraint (143,140 samples, 0.17%)</title><rect x="56.4573%" y="213" width="0.1710%" height="15" fill="rgb(228,22,38)"/><text x="56.7073%" y="223.50"></text></g><g><title>evaluate_obligation (494,557 samples, 0.59%)</title><rect x="56.1497%" y="229" width="0.5909%" height="15" fill="rgb(235,168,5)"/><text x="56.3997%" y="239.50"></text></g><g><title>implied_outlives_bounds (98,452 samples, 0.12%)</title><rect x="56.7453%" y="229" width="0.1176%" height="15" fill="rgb(221,155,16)"/><text x="56.9953%" y="239.50"></text></g><g><title>param_env (206,502 samples, 0.25%)</title><rect x="56.8637%" y="229" width="0.2467%" height="15" fill="rgb(215,215,53)"/><text x="57.1137%" y="239.50"></text></g><g><title>region_scope_tree (99,001 samples, 0.12%)</title><rect x="57.1485%" y="229" width="0.1183%" height="15" fill="rgb(223,4,10)"/><text x="57.3985%" y="239.50"></text></g><g><title>check_item_well_formed (1,501,797 samples, 1.79%)</title><rect x="55.4945%" y="245" width="1.7943%" height="15" fill="rgb(234,103,6)"/><text x="55.7445%" y="255.50">c..</text></g><g><title>analysis (47,443,374 samples, 56.68%)</title><rect x="0.6363%" y="293" width="56.6836%" height="15" fill="rgb(227,97,0)"/><text x="0.8863%" y="303.50">analysis</text></g><g><title>type_check_crate (25,516,442 samples, 30.49%)</title><rect x="26.8338%" y="277" width="30.4861%" height="15" fill="rgb(234,150,53)"/><text x="27.0838%" y="287.50">type_check_crate</text></g><g><title>wf_checking (1,991,862 samples, 2.38%)</title><rect x="54.9401%" y="261" width="2.3798%" height="15" fill="rgb(228,201,54)"/><text x="55.1901%" y="271.50">wf..</text></g><g><title>codegen_crate (416,415 samples, 0.50%)</title><rect x="57.3326%" y="293" width="0.4975%" height="15" fill="rgb(222,22,37)"/><text x="57.5826%" y="303.50"></text></g><g><title>AST_validation (121,381 samples, 0.15%)</title><rect x="58.0963%" y="277" width="0.1450%" height="15" fill="rgb(237,53,32)"/><text x="58.3463%" y="287.50"></text></g><g><title>crate_injection (89,121 samples, 0.11%)</title><rect x="58.2823%" y="277" width="0.1065%" height="15" fill="rgb(233,25,53)"/><text x="58.5323%" y="287.50"></text></g><g><title>metadata_load_macro (701,455 samples, 0.84%)</title><rect x="83.2790%" y="245" width="0.8381%" height="15" fill="rgb(210,40,34)"/><text x="83.5290%" y="255.50"></text></g><g><title>metadata_register_crate (3,604,440 samples, 4.31%)</title><rect x="84.1170%" y="245" width="4.3065%" height="15" fill="rgb(241,220,44)"/><text x="84.3670%" y="255.50">metad..</text></g><g><title>metadata_register_crate (990,411 samples, 1.18%)</title><rect x="87.2402%" y="229" width="1.1833%" height="15" fill="rgb(235,28,35)"/><text x="87.4902%" y="239.50"></text></g><g><title>macro_expand_crate (25,204,279 samples, 30.11%)</title><rect x="58.3888%" y="277" width="30.1131%" height="15" fill="rgb(210,56,17)"/><text x="58.6388%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (25,180,979 samples, 30.09%)</title><rect x="58.4166%" y="261" width="30.0853%" height="15" fill="rgb(224,130,29)"/><text x="58.6666%" y="271.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (373,224 samples, 0.45%)</title><rect x="88.5032%" y="277" width="0.4459%" height="15" fill="rgb(235,212,8)"/><text x="88.7532%" y="287.50"></text></g><g><title>pre_AST_expansion_lint_checks (125,042 samples, 0.15%)</title><rect x="88.9492%" y="277" width="0.1494%" height="15" fill="rgb(223,33,50)"/><text x="89.1992%" y="287.50"></text></g><g><title>finalize_imports (231,303 samples, 0.28%)</title><rect x="89.1060%" y="261" width="0.2764%" height="15" fill="rgb(219,149,13)"/><text x="89.3560%" y="271.50"></text></g><g><title>late_resolve_crate (1,689,729 samples, 2.02%)</title><rect x="89.4300%" y="261" width="2.0188%" height="15" fill="rgb(250,156,29)"/><text x="89.6800%" y="271.50">l..</text></g><g><title>metadata_register_crate (91,581 samples, 0.11%)</title><rect x="91.3394%" y="245" width="0.1094%" height="15" fill="rgb(216,193,19)"/><text x="91.5894%" y="255.50"></text></g><g><title>configure_and_expand (28,192,992 samples, 33.68%)</title><rect x="57.8301%" y="293" width="33.6839%" height="15" fill="rgb(216,135,14)"/><text x="58.0801%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (2,021,762 samples, 2.42%)</title><rect x="89.0986%" y="277" width="2.4155%" height="15" fill="rgb(241,47,5)"/><text x="89.3486%" y="287.50">re..</text></g><g><title>drop_ast (93,281 samples, 0.11%)</title><rect x="91.5141%" y="293" width="0.1114%" height="15" fill="rgb(233,42,35)"/><text x="91.7641%" y="303.50"></text></g><g><title>early_lint_checks (165,822 samples, 0.20%)</title><rect x="91.6472%" y="293" width="0.1981%" height="15" fill="rgb(231,13,6)"/><text x="91.8972%" y="303.50"></text></g><g><title>free_global_ctxt (3,284,216 samples, 3.92%)</title><rect x="91.8454%" y="293" width="3.9239%" height="15" fill="rgb(207,181,40)"/><text x="92.0954%" y="303.50">free..</text></g><g><title>generate_crate_metadata (178,111 samples, 0.21%)</title><rect x="95.7692%" y="293" width="0.2128%" height="15" fill="rgb(254,173,49)"/><text x="96.0192%" y="303.50"></text></g><g><title>hir_lowering (1,038,531 samples, 1.24%)</title><rect x="95.9820%" y="293" width="1.2408%" height="15" fill="rgb(221,1,38)"/><text x="96.2320%" y="303.50"></text></g><g><title>parse_crate (1,101,532 samples, 1.32%)</title><rect x="97.2855%" y="293" width="1.3161%" height="15" fill="rgb(206,124,46)"/><text x="97.5355%" y="303.50"></text></g><g><title>prepare_outputs (174,522 samples, 0.21%)</title><rect x="98.6133%" y="293" width="0.2085%" height="15" fill="rgb(249,21,11)"/><text x="98.8633%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (635,767 samples, 0.76%)</title><rect x="98.8218%" y="293" width="0.7596%" height="15" fill="rgb(222,201,40)"/><text x="99.0718%" y="303.50"></text></g><g><title>all (83,698,604 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(235,61,29)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (83,698,604 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(219,207,3)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (264,812 samples, 0.32%)</title><rect x="99.6836%" y="293" width="0.3164%" height="15" fill="rgb(222,56,46)"/><text x="99.9336%" y="303.50"></text></g></svg></svg>