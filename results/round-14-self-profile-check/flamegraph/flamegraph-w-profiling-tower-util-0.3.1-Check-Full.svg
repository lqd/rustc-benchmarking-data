<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (478,429 samples, 0.16%)</title><rect x="7.2071%" y="149" width="0.1576%" height="15" fill="rgb(227,0,7)"/><text x="7.4571%" y="159.50"></text></g><g><title>is_copy_raw (3,204,456 samples, 1.06%)</title><rect x="10.2429%" y="69" width="1.0556%" height="15" fill="rgb(217,0,24)"/><text x="10.4929%" y="79.50"></text></g><g><title>evaluate_obligation (2,670,033 samples, 0.88%)</title><rect x="10.4189%" y="53" width="0.8796%" height="15" fill="rgb(221,193,54)"/><text x="10.6689%" y="63.50"></text></g><g><title>needs_drop_raw (3,841,289 samples, 1.27%)</title><rect x="10.0457%" y="85" width="1.2654%" height="15" fill="rgb(248,212,6)"/><text x="10.2957%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (616,015 samples, 0.20%)</title><rect x="11.4155%" y="69" width="0.2029%" height="15" fill="rgb(208,68,35)"/><text x="11.6655%" y="79.50"></text></g><g><title>resolve_instance (1,210,022 samples, 0.40%)</title><rect x="11.3111%" y="85" width="0.3986%" height="15" fill="rgb(232,128,0)"/><text x="11.5611%" y="95.50"></text></g><g><title>thir_body (1,317,013 samples, 0.43%)</title><rect x="11.7237%" y="85" width="0.4339%" height="15" fill="rgb(207,160,47)"/><text x="11.9737%" y="95.50"></text></g><g><title>mir_const (13,321,288 samples, 4.39%)</title><rect x="7.8472%" y="133" width="4.3884%" height="15" fill="rgb(228,23,34)"/><text x="8.0972%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (11,781,981 samples, 3.88%)</title><rect x="8.3543%" y="117" width="3.8813%" height="15" fill="rgb(218,30,26)"/><text x="8.6043%" y="127.50">unsa..</text></g><g><title>mir_built (10,801,497 samples, 3.56%)</title><rect x="8.6773%" y="101" width="3.5583%" height="15" fill="rgb(220,122,19)"/><text x="8.9273%" y="111.50">mir_..</text></g><g><title>mir_promoted (14,724,647 samples, 4.85%)</title><rect x="7.4629%" y="149" width="4.8507%" height="15" fill="rgb(250,228,42)"/><text x="7.7129%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (2,085,274 samples, 0.69%)</title><rect x="12.3136%" y="149" width="0.6869%" height="15" fill="rgb(240,193,28)"/><text x="12.5636%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,552,307 samples, 0.51%)</title><rect x="13.0005%" y="149" width="0.5114%" height="15" fill="rgb(216,20,37)"/><text x="13.2505%" y="159.50"></text></g><g><title>normalize_projection_ty (892,488 samples, 0.29%)</title><rect x="13.2179%" y="133" width="0.2940%" height="15" fill="rgb(206,188,39)"/><text x="13.4679%" y="143.50"></text></g><g><title>type_op_normalize_predicate (581,497 samples, 0.19%)</title><rect x="13.5119%" y="149" width="0.1916%" height="15" fill="rgb(217,207,13)"/><text x="13.7619%" y="159.50"></text></g><g><title>type_op_normalize_ty (1,201,117 samples, 0.40%)</title><rect x="13.7034%" y="149" width="0.3957%" height="15" fill="rgb(231,73,38)"/><text x="13.9534%" y="159.50"></text></g><g><title>normalize_projection_ty (665,378 samples, 0.22%)</title><rect x="13.8799%" y="133" width="0.2192%" height="15" fill="rgb(225,20,46)"/><text x="14.1299%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,122,281 samples, 2.35%)</title><rect x="14.0991%" y="149" width="2.3463%" height="15" fill="rgb(210,31,41)"/><text x="14.3491%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (48,777,522 samples, 16.07%)</title><rect x="0.3807%" y="181" width="16.0686%" height="15" fill="rgb(221,200,47)"/><text x="0.6307%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (48,568,098 samples, 16.00%)</title><rect x="0.4497%" y="165" width="15.9997%" height="15" fill="rgb(226,26,5)"/><text x="0.6997%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (383,805 samples, 0.13%)</title><rect x="16.5248%" y="181" width="0.1264%" height="15" fill="rgb(249,33,26)"/><text x="16.7748%" y="191.50"></text></g><g><title>codegen_fn_attrs (550,958 samples, 0.18%)</title><rect x="16.8107%" y="149" width="0.1815%" height="15" fill="rgb(235,183,28)"/><text x="17.0607%" y="159.50"></text></g><g><title>check_mod_attrs (987,823 samples, 0.33%)</title><rect x="16.6668%" y="165" width="0.3254%" height="15" fill="rgb(221,5,38)"/><text x="16.9168%" y="175.50"></text></g><g><title>lookup_deprecation_entry (323,173 samples, 0.11%)</title><rect x="17.2448%" y="149" width="0.1065%" height="15" fill="rgb(247,18,42)"/><text x="17.4948%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (777,395 samples, 0.26%)</title><rect x="17.1233%" y="165" width="0.2561%" height="15" fill="rgb(241,131,45)"/><text x="17.3733%" y="175.50"></text></g><g><title>misc_checking_1 (2,334,076 samples, 0.77%)</title><rect x="16.6514%" y="181" width="0.7689%" height="15" fill="rgb(249,31,29)"/><text x="16.9014%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (853,999 samples, 0.28%)</title><rect x="17.4209%" y="165" width="0.2813%" height="15" fill="rgb(225,111,53)"/><text x="17.6709%" y="175.50"></text></g><g><title>check_mod_liveness (689,226 samples, 0.23%)</title><rect x="17.4751%" y="149" width="0.2270%" height="15" fill="rgb(238,160,17)"/><text x="17.7251%" y="159.50"></text></g><g><title>misc_checking_2 (1,781,890 samples, 0.59%)</title><rect x="17.4203%" y="181" width="0.5870%" height="15" fill="rgb(214,148,48)"/><text x="17.6703%" y="191.50"></text></g><g><title>match_checking (926,101 samples, 0.31%)</title><rect x="17.7022%" y="165" width="0.3051%" height="15" fill="rgb(232,36,49)"/><text x="17.9522%" y="175.50"></text></g><g><title>check_match (868,270 samples, 0.29%)</title><rect x="17.7212%" y="149" width="0.2860%" height="15" fill="rgb(209,103,24)"/><text x="17.9712%" y="159.50"></text></g><g><title>check_private_in_public (579,036 samples, 0.19%)</title><rect x="18.0110%" y="165" width="0.1908%" height="15" fill="rgb(229,88,8)"/><text x="18.2610%" y="175.50"></text></g><g><title>death_checking (937,980 samples, 0.31%)</title><rect x="18.2017%" y="165" width="0.3090%" height="15" fill="rgb(213,181,19)"/><text x="18.4517%" y="175.50"></text></g><g><title>param_env (816,637 samples, 0.27%)</title><rect x="19.3105%" y="133" width="0.2690%" height="15" fill="rgb(254,191,54)"/><text x="19.5605%" y="143.50"></text></g><g><title>predicates_of (367,106 samples, 0.12%)</title><rect x="19.4586%" y="117" width="0.1209%" height="15" fill="rgb(241,83,37)"/><text x="19.7086%" y="127.50"></text></g><g><title>crate_lints (4,491,960 samples, 1.48%)</title><rect x="18.5113%" y="149" width="1.4798%" height="15" fill="rgb(233,36,39)"/><text x="18.7613%" y="159.50"></text></g><g><title>type_of (1,244,005 samples, 0.41%)</title><rect x="19.5813%" y="133" width="0.4098%" height="15" fill="rgb(226,3,54)"/><text x="19.8313%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (968,822 samples, 0.32%)</title><rect x="19.6719%" y="117" width="0.3192%" height="15" fill="rgb(245,192,40)"/><text x="19.9219%" y="127.50"></text></g><g><title>lint_checking (5,482,001 samples, 1.81%)</title><rect x="18.5107%" y="165" width="1.8059%" height="15" fill="rgb(238,167,29)"/><text x="18.7607%" y="175.50">l..</text></g><g><title>module_lints (988,391 samples, 0.33%)</title><rect x="19.9911%" y="149" width="0.3256%" height="15" fill="rgb(232,182,51)"/><text x="20.2411%" y="159.50"></text></g><g><title>lint_mod (972,971 samples, 0.32%)</title><rect x="19.9961%" y="133" width="0.3205%" height="15" fill="rgb(231,60,39)"/><text x="20.2461%" y="143.50"></text></g><g><title>privacy_access_levels (594,587 samples, 0.20%)</title><rect x="20.3167%" y="165" width="0.1959%" height="15" fill="rgb(208,69,12)"/><text x="20.5667%" y="175.50"></text></g><g><title>privacy_checking_modules (2,445,357 samples, 0.81%)</title><rect x="20.5125%" y="165" width="0.8056%" height="15" fill="rgb(235,93,37)"/><text x="20.7625%" y="175.50"></text></g><g><title>check_mod_privacy (2,430,997 samples, 0.80%)</title><rect x="20.5173%" y="149" width="0.8008%" height="15" fill="rgb(213,116,39)"/><text x="20.7673%" y="159.50"></text></g><g><title>misc_checking_3 (10,078,432 samples, 3.32%)</title><rect x="18.0073%" y="181" width="3.3201%" height="15" fill="rgb(222,207,29)"/><text x="18.2573%" y="191.50">mis..</text></g><g><title>adt_destructor (318,294 samples, 0.10%)</title><rect x="21.4041%" y="133" width="0.1049%" height="15" fill="rgb(206,96,30)"/><text x="21.6541%" y="143.50"></text></g><g><title>coherent_trait (306,774 samples, 0.10%)</title><rect x="21.4079%" y="117" width="0.1011%" height="15" fill="rgb(218,138,4)"/><text x="21.6579%" y="127.50"></text></g><g><title>specialization_graph_of (305,604 samples, 0.10%)</title><rect x="21.4083%" y="101" width="0.1007%" height="15" fill="rgb(250,191,14)"/><text x="21.6583%" y="111.50"></text></g><g><title>impl_parent (2,143,428 samples, 0.71%)</title><rect x="22.6324%" y="117" width="0.7061%" height="15" fill="rgb(239,60,40)"/><text x="22.8824%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,154,167 samples, 0.38%)</title><rect x="22.9583%" y="101" width="0.3802%" height="15" fill="rgb(206,27,48)"/><text x="23.2083%" y="111.50"></text></g><g><title>impl_trait_ref (4,861,935 samples, 1.60%)</title><rect x="23.3385%" y="117" width="1.6017%" height="15" fill="rgb(225,35,8)"/><text x="23.5885%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,900,735 samples, 1.29%)</title><rect x="23.6551%" y="101" width="1.2850%" height="15" fill="rgb(250,213,24)"/><text x="23.9051%" y="111.50"></text></g><g><title>coherent_trait (11,599,580 samples, 3.82%)</title><rect x="21.3862%" y="149" width="3.8212%" height="15" fill="rgb(247,123,22)"/><text x="21.6362%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (11,120,875 samples, 3.66%)</title><rect x="21.5439%" y="133" width="3.6635%" height="15" fill="rgb(231,138,38)"/><text x="21.7939%" y="143.50">spec..</text></g><g><title>trait_impls_of (762,797 samples, 0.25%)</title><rect x="24.9562%" y="117" width="0.2513%" height="15" fill="rgb(231,145,46)"/><text x="25.2062%" y="127.50"></text></g><g><title>coherence_checking (11,760,851 samples, 3.87%)</title><rect x="21.3759%" y="165" width="3.8743%" height="15" fill="rgb(251,118,11)"/><text x="21.6259%" y="175.50">cohe..</text></g><g><title>associated_items (397,995 samples, 0.13%)</title><rect x="39.1495%" y="117" width="0.1311%" height="15" fill="rgb(217,147,25)"/><text x="39.3995%" y="127.50"></text></g><g><title>adt_def (428,604 samples, 0.14%)</title><rect x="39.9001%" y="85" width="0.1412%" height="15" fill="rgb(247,81,37)"/><text x="40.1501%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (425,894 samples, 0.14%)</title><rect x="39.9010%" y="69" width="0.1403%" height="15" fill="rgb(209,12,38)"/><text x="40.1510%" y="79.50"></text></g><g><title>item_attrs (391,893 samples, 0.13%)</title><rect x="39.9122%" y="53" width="0.1291%" height="15" fill="rgb(227,1,9)"/><text x="40.1622%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (389,053 samples, 0.13%)</title><rect x="39.9131%" y="37" width="0.1282%" height="15" fill="rgb(248,47,43)"/><text x="40.1631%" y="47.50"></text></g><g><title>adt_dtorck_constraint (440,816 samples, 0.15%)</title><rect x="40.0511%" y="85" width="0.1452%" height="15" fill="rgb(221,10,30)"/><text x="40.3011%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,078,422 samples, 0.36%)</title><rect x="39.8603%" y="101" width="0.3553%" height="15" fill="rgb(210,229,1)"/><text x="40.1103%" y="111.50"></text></g><g><title>dropck_outlives (3,027,947 samples, 1.00%)</title><rect x="39.3148%" y="117" width="0.9975%" height="15" fill="rgb(222,148,37)"/><text x="39.5648%" y="127.50"></text></g><g><title>evaluate_obligation (2,430,984 samples, 0.80%)</title><rect x="40.3123%" y="117" width="0.8008%" height="15" fill="rgb(234,67,33)"/><text x="40.5623%" y="127.50"></text></g><g><title>method_autoderef_steps (2,446,270 samples, 0.81%)</title><rect x="41.3791%" y="117" width="0.8059%" height="15" fill="rgb(247,98,35)"/><text x="41.6291%" y="127.50"></text></g><g><title>evaluate_obligation (878,862 samples, 0.29%)</title><rect x="41.8954%" y="101" width="0.2895%" height="15" fill="rgb(247,138,52)"/><text x="42.1454%" y="111.50"></text></g><g><title>predicates_of (404,536 samples, 0.13%)</title><rect x="42.2187%" y="117" width="0.1333%" height="15" fill="rgb(213,79,30)"/><text x="42.4687%" y="127.50"></text></g><g><title>typeck (724,088 samples, 0.24%)</title><rect x="42.3892%" y="117" width="0.2385%" height="15" fill="rgb(246,177,23)"/><text x="42.6392%" y="127.50"></text></g><g><title>item_bodies_checking (52,720,145 samples, 17.37%)</title><rect x="25.2835%" y="165" width="17.3674%" height="15" fill="rgb(230,62,27)"/><text x="25.5335%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (52,716,455 samples, 17.37%)</title><rect x="25.2847%" y="149" width="17.3662%" height="15" fill="rgb(216,154,8)"/><text x="25.5347%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (52,554,124 samples, 17.31%)</title><rect x="25.3382%" y="133" width="17.3128%" height="15" fill="rgb(244,35,45)"/><text x="25.5882%" y="143.50">typeck</text></g><g><title>item_types_checking (5,100,197 samples, 1.68%)</title><rect x="42.6509%" y="165" width="1.6801%" height="15" fill="rgb(251,115,12)"/><text x="42.9009%" y="175.50"></text></g><g><title>check_mod_item_types (5,083,637 samples, 1.67%)</title><rect x="42.6564%" y="149" width="1.6747%" height="15" fill="rgb(240,54,50)"/><text x="42.9064%" y="159.50"></text></g><g><title>fn_sig (552,774 samples, 0.18%)</title><rect x="44.5755%" y="133" width="0.1821%" height="15" fill="rgb(233,84,52)"/><text x="44.8255%" y="143.50"></text></g><g><title>is_late_bound_map (675,638 samples, 0.22%)</title><rect x="44.8487%" y="117" width="0.2226%" height="15" fill="rgb(207,117,47)"/><text x="45.0987%" y="127.50"></text></g><g><title>resolve_lifetimes (653,227 samples, 0.22%)</title><rect x="44.8560%" y="101" width="0.2152%" height="15" fill="rgb(249,43,39)"/><text x="45.1060%" y="111.50"></text></g><g><title>lint_levels (449,955 samples, 0.15%)</title><rect x="44.9230%" y="85" width="0.1482%" height="15" fill="rgb(209,38,44)"/><text x="45.1730%" y="95.50"></text></g><g><title>generics_of (1,182,953 samples, 0.39%)</title><rect x="44.7576%" y="133" width="0.3897%" height="15" fill="rgb(236,212,23)"/><text x="45.0076%" y="143.50"></text></g><g><title>late_bound_vars_map (733,678 samples, 0.24%)</title><rect x="45.6055%" y="85" width="0.2417%" height="15" fill="rgb(242,79,21)"/><text x="45.8555%" y="95.50"></text></g><g><title>resolve_lifetimes (682,367 samples, 0.22%)</title><rect x="45.6224%" y="69" width="0.2248%" height="15" fill="rgb(211,96,35)"/><text x="45.8724%" y="79.50"></text></g><g><title>explicit_predicates_of (1,928,600 samples, 0.64%)</title><rect x="45.3029%" y="101" width="0.6353%" height="15" fill="rgb(253,215,40)"/><text x="45.5529%" y="111.50"></text></g><g><title>predicates_of (3,462,710 samples, 1.14%)</title><rect x="45.1714%" y="133" width="1.1407%" height="15" fill="rgb(211,81,21)"/><text x="45.4214%" y="143.50"></text></g><g><title>predicates_defined_on (3,314,150 samples, 1.09%)</title><rect x="45.2203%" y="117" width="1.0918%" height="15" fill="rgb(208,190,38)"/><text x="45.4703%" y="127.50"></text></g><g><title>inferred_outlives_of (1,135,003 samples, 0.37%)</title><rect x="45.9382%" y="101" width="0.3739%" height="15" fill="rgb(235,213,38)"/><text x="46.1882%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,077,302 samples, 0.35%)</title><rect x="45.9572%" y="85" width="0.3549%" height="15" fill="rgb(237,122,38)"/><text x="46.2072%" y="95.50"></text></g><g><title>type_of (696,625 samples, 0.23%)</title><rect x="46.0826%" y="69" width="0.2295%" height="15" fill="rgb(244,218,35)"/><text x="46.3326%" y="79.50"></text></g><g><title>type_collecting (6,872,817 samples, 2.26%)</title><rect x="44.3337%" y="165" width="2.2641%" height="15" fill="rgb(240,68,47)"/><text x="44.5837%" y="175.50">t..</text></g><g><title>collect_mod_item_types (6,853,517 samples, 2.26%)</title><rect x="44.3400%" y="149" width="2.2577%" height="15" fill="rgb(210,16,53)"/><text x="44.5900%" y="159.50">c..</text></g><g><title>type_of (810,437 samples, 0.27%)</title><rect x="46.3308%" y="133" width="0.2670%" height="15" fill="rgb(235,124,12)"/><text x="46.5808%" y="143.50"></text></g><g><title>evaluate_obligation (2,064,941 samples, 0.68%)</title><rect x="49.3238%" y="133" width="0.6802%" height="15" fill="rgb(224,169,11)"/><text x="49.5738%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,145,190 samples, 0.38%)</title><rect x="50.0258%" y="133" width="0.3773%" height="15" fill="rgb(250,166,2)"/><text x="50.2758%" y="143.50"></text></g><g><title>param_env (1,038,267 samples, 0.34%)</title><rect x="50.4046%" y="133" width="0.3420%" height="15" fill="rgb(242,216,29)"/><text x="50.6546%" y="143.50"></text></g><g><title>region_scope_tree (538,099 samples, 0.18%)</title><rect x="50.7550%" y="133" width="0.1773%" height="15" fill="rgb(230,116,27)"/><text x="51.0050%" y="143.50"></text></g><g><title>check_impl_item_well_formed (12,600,816 samples, 4.15%)</title><rect x="46.7935%" y="149" width="4.1511%" height="15" fill="rgb(228,99,48)"/><text x="47.0435%" y="159.50">check..</text></g><g><title>implied_outlives_bounds (373,104 samples, 0.12%)</title><rect x="53.4428%" y="133" width="0.1229%" height="15" fill="rgb(253,11,6)"/><text x="53.6928%" y="143.50"></text></g><g><title>object_safety_violations (896,059 samples, 0.30%)</title><rect x="53.5672%" y="133" width="0.2952%" height="15" fill="rgb(247,143,39)"/><text x="53.8172%" y="143.50"></text></g><g><title>param_env (1,222,408 samples, 0.40%)</title><rect x="53.8626%" y="133" width="0.4027%" height="15" fill="rgb(236,97,10)"/><text x="54.1126%" y="143.50"></text></g><g><title>check_item_well_formed (10,696,833 samples, 3.52%)</title><rect x="50.9446%" y="149" width="3.5238%" height="15" fill="rgb(233,208,19)"/><text x="51.1946%" y="159.50">che..</text></g><g><title>analysis (165,407,667 samples, 54.49%)</title><rect x="0.2076%" y="197" width="54.4898%" height="15" fill="rgb(216,164,2)"/><text x="0.4576%" y="207.50">analysis</text></g><g><title>type_check_crate (101,296,965 samples, 33.37%)</title><rect x="21.3274%" y="181" width="33.3700%" height="15" fill="rgb(220,129,5)"/><text x="21.5774%" y="191.50">type_check_crate</text></g><g><title>wf_checking (24,578,242 samples, 8.10%)</title><rect x="46.6006%" y="165" width="8.0967%" height="15" fill="rgb(242,17,10)"/><text x="46.8506%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (694,988 samples, 0.23%)</title><rect x="54.4684%" y="149" width="0.2289%" height="15" fill="rgb(242,107,0)"/><text x="54.7184%" y="159.50"></text></g><g><title>codegen_crate (423,365 samples, 0.14%)</title><rect x="54.6994%" y="197" width="0.1395%" height="15" fill="rgb(251,28,31)"/><text x="54.9494%" y="207.50"></text></g><g><title>AST_validation (460,795 samples, 0.15%)</title><rect x="54.8825%" y="181" width="0.1518%" height="15" fill="rgb(233,223,10)"/><text x="55.1325%" y="191.50"></text></g><g><title>metadata_load_macro (520,635 samples, 0.17%)</title><rect x="88.6905%" y="149" width="0.1715%" height="15" fill="rgb(215,21,27)"/><text x="88.9405%" y="159.50"></text></g><g><title>metadata_register_crate (11,457,477 samples, 3.77%)</title><rect x="88.8620%" y="149" width="3.7744%" height="15" fill="rgb(232,23,21)"/><text x="89.1120%" y="159.50">meta..</text></g><g><title>metadata_register_crate (8,470,115 samples, 2.79%)</title><rect x="89.8462%" y="133" width="2.7903%" height="15" fill="rgb(244,5,23)"/><text x="90.0962%" y="143.50">me..</text></g><g><title>macro_expand_crate (114,386,310 samples, 37.68%)</title><rect x="55.0977%" y="181" width="37.6820%" height="15" fill="rgb(226,81,46)"/><text x="55.3477%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (114,375,940 samples, 37.68%)</title><rect x="55.1011%" y="165" width="37.6785%" height="15" fill="rgb(247,70,30)"/><text x="55.3511%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (434,747 samples, 0.14%)</title><rect x="92.6365%" y="149" width="0.1432%" height="15" fill="rgb(212,68,19)"/><text x="92.8865%" y="159.50"></text></g><g><title>late_resolve_crate (2,760,700 samples, 0.91%)</title><rect x="92.9311%" y="165" width="0.9094%" height="15" fill="rgb(240,187,13)"/><text x="93.1811%" y="175.50"></text></g><g><title>configure_and_expand (118,626,837 samples, 39.08%)</title><rect x="54.8388%" y="197" width="39.0789%" height="15" fill="rgb(223,113,26)"/><text x="55.0888%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,366,707 samples, 1.11%)</title><rect x="92.8087%" y="181" width="1.1091%" height="15" fill="rgb(206,192,2)"/><text x="93.0587%" y="191.50"></text></g><g><title>drop_ast (363,554 samples, 0.12%)</title><rect x="93.9178%" y="197" width="0.1198%" height="15" fill="rgb(241,108,4)"/><text x="94.1678%" y="207.50"></text></g><g><title>early_lint_checks (882,130 samples, 0.29%)</title><rect x="94.0440%" y="197" width="0.2906%" height="15" fill="rgb(247,173,49)"/><text x="94.2940%" y="207.50"></text></g><g><title>free_global_ctxt (4,094,155 samples, 1.35%)</title><rect x="94.3346%" y="197" width="1.3487%" height="15" fill="rgb(224,114,35)"/><text x="94.5846%" y="207.50"></text></g><g><title>generate_crate_metadata (4,244,247 samples, 1.40%)</title><rect x="95.6834%" y="197" width="1.3982%" height="15" fill="rgb(245,159,27)"/><text x="95.9334%" y="207.50"></text></g><g><title>hir_lowering (6,515,172 samples, 2.15%)</title><rect x="97.0815%" y="197" width="2.1463%" height="15" fill="rgb(245,172,44)"/><text x="97.3315%" y="207.50">h..</text></g><g><title>parse_crate (441,295 samples, 0.15%)</title><rect x="99.2537%" y="197" width="0.1454%" height="15" fill="rgb(236,23,11)"/><text x="99.5037%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,054,152 samples, 0.35%)</title><rect x="99.4756%" y="197" width="0.3473%" height="15" fill="rgb(205,117,38)"/><text x="99.7256%" y="207.50"></text></g><g><title>all (303,557,230 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (303,557,230 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (449,295 samples, 0.15%)</title><rect x="99.8520%" y="197" width="0.1480%" height="15" fill="rgb(217,125,39)"/><text x="100.1020%" y="207.50"></text></g></svg></svg>