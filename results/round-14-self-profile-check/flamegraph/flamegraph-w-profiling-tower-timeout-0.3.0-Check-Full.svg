<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (75,740 samples, 0.12%)</title><rect x="6.5482%" y="149" width="0.1183%" height="15" fill="rgb(227,0,7)"/><text x="6.7982%" y="159.50"></text></g><g><title>codegen_fn_attrs (79,110 samples, 0.12%)</title><rect x="7.8858%" y="101" width="0.1236%" height="15" fill="rgb(217,0,24)"/><text x="8.1358%" y="111.50"></text></g><g><title>adt_drop_tys (92,610 samples, 0.14%)</title><rect x="9.3366%" y="69" width="0.1446%" height="15" fill="rgb(221,193,54)"/><text x="9.5866%" y="79.50"></text></g><g><title>is_copy_raw (662,378 samples, 1.03%)</title><rect x="9.4812%" y="69" width="1.0345%" height="15" fill="rgb(248,212,6)"/><text x="9.7312%" y="79.50"></text></g><g><title>evaluate_obligation (573,386 samples, 0.90%)</title><rect x="9.6202%" y="53" width="0.8955%" height="15" fill="rgb(208,68,35)"/><text x="9.8702%" y="63.50"></text></g><g><title>trait_impls_of (145,892 samples, 0.23%)</title><rect x="10.2879%" y="37" width="0.2279%" height="15" fill="rgb(232,128,0)"/><text x="10.5379%" y="47.50"></text></g><g><title>needs_drop_raw (821,599 samples, 1.28%)</title><rect x="9.2360%" y="85" width="1.2832%" height="15" fill="rgb(207,160,47)"/><text x="9.4860%" y="95.50"></text></g><g><title>resolve_instance (150,404 samples, 0.23%)</title><rect x="10.5192%" y="85" width="0.2349%" height="15" fill="rgb(228,23,34)"/><text x="10.7692%" y="95.50"></text></g><g><title>thir_body (239,221 samples, 0.37%)</title><rect x="10.7667%" y="85" width="0.3736%" height="15" fill="rgb(218,30,26)"/><text x="11.0167%" y="95.50"></text></g><g><title>mir_const (2,562,667 samples, 4.00%)</title><rect x="7.1701%" y="133" width="4.0024%" height="15" fill="rgb(220,122,19)"/><text x="7.4201%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (2,245,965 samples, 3.51%)</title><rect x="7.6647%" y="117" width="3.5078%" height="15" fill="rgb(250,228,42)"/><text x="7.9147%" y="127.50">uns..</text></g><g><title>mir_built (2,025,262 samples, 3.16%)</title><rect x="8.0094%" y="101" width="3.1631%" height="15" fill="rgb(240,193,28)"/><text x="8.2594%" y="111.50">mir..</text></g><g><title>mir_promoted (2,873,053 samples, 4.49%)</title><rect x="6.7486%" y="149" width="4.4872%" height="15" fill="rgb(216,20,37)"/><text x="6.9986%" y="159.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (320,176 samples, 0.50%)</title><rect x="11.2358%" y="149" width="0.5001%" height="15" fill="rgb(206,188,39)"/><text x="11.4858%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (66,471 samples, 0.10%)</title><rect x="11.7358%" y="149" width="0.1038%" height="15" fill="rgb(217,207,13)"/><text x="11.9858%" y="159.50"></text></g><g><title>type_op_normalize_ty (163,531 samples, 0.26%)</title><rect x="11.8939%" y="149" width="0.2554%" height="15" fill="rgb(231,73,38)"/><text x="12.1439%" y="159.50"></text></g><g><title>normalize_projection_ty (118,541 samples, 0.19%)</title><rect x="11.9642%" y="133" width="0.1851%" height="15" fill="rgb(225,20,46)"/><text x="12.2142%" y="143.50"></text></g><g><title>type_op_prove_predicate (883,832 samples, 1.38%)</title><rect x="12.1493%" y="149" width="1.3804%" height="15" fill="rgb(210,31,41)"/><text x="12.3993%" y="159.50"></text></g><g><title>MIR_borrow_checking (8,143,100 samples, 12.72%)</title><rect x="0.8194%" y="181" width="12.7180%" height="15" fill="rgb(221,200,47)"/><text x="1.0694%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,108,179 samples, 12.66%)</title><rect x="0.8740%" y="165" width="12.6635%" height="15" fill="rgb(226,26,5)"/><text x="1.1240%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (109,762 samples, 0.17%)</title><rect x="13.5375%" y="181" width="0.1714%" height="15" fill="rgb(249,33,26)"/><text x="13.7875%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (81,231 samples, 0.13%)</title><rect x="13.5820%" y="165" width="0.1269%" height="15" fill="rgb(235,183,28)"/><text x="13.8320%" y="175.50"></text></g><g><title>hir_module_items (116,811 samples, 0.18%)</title><rect x="13.7089%" y="181" width="0.1824%" height="15" fill="rgb(221,5,38)"/><text x="13.9589%" y="191.50"></text></g><g><title>get_lang_items (65,951 samples, 0.10%)</title><rect x="14.3133%" y="101" width="0.1030%" height="15" fill="rgb(247,18,42)"/><text x="14.5633%" y="111.50"></text></g><g><title>codegen_fn_attrs (193,422 samples, 0.30%)</title><rect x="14.2660%" y="117" width="0.3021%" height="15" fill="rgb(241,131,45)"/><text x="14.5160%" y="127.50"></text></g><g><title>codegen_fn_attrs (306,092 samples, 0.48%)</title><rect x="14.0950%" y="149" width="0.4781%" height="15" fill="rgb(249,31,29)"/><text x="14.3450%" y="159.50"></text></g><g><title>should_inherit_track_caller (277,782 samples, 0.43%)</title><rect x="14.1392%" y="133" width="0.4338%" height="15" fill="rgb(225,111,53)"/><text x="14.3892%" y="143.50"></text></g><g><title>check_mod_attrs (413,553 samples, 0.65%)</title><rect x="13.9274%" y="165" width="0.6459%" height="15" fill="rgb(238,160,17)"/><text x="14.1774%" y="175.50"></text></g><g><title>lookup_deprecation_entry (95,990 samples, 0.15%)</title><rect x="14.8649%" y="149" width="0.1499%" height="15" fill="rgb(214,148,48)"/><text x="15.1149%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (261,893 samples, 0.41%)</title><rect x="14.7119%" y="165" width="0.4090%" height="15" fill="rgb(232,36,49)"/><text x="14.9619%" y="175.50"></text></g><g><title>misc_checking_1 (827,719 samples, 1.29%)</title><rect x="13.8919%" y="181" width="1.2927%" height="15" fill="rgb(209,103,24)"/><text x="14.1419%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (151,022 samples, 0.24%)</title><rect x="15.1867%" y="165" width="0.2359%" height="15" fill="rgb(229,88,8)"/><text x="15.4367%" y="175.50"></text></g><g><title>check_mod_liveness (111,682 samples, 0.17%)</title><rect x="15.2482%" y="149" width="0.1744%" height="15" fill="rgb(213,181,19)"/><text x="15.4982%" y="159.50"></text></g><g><title>misc_checking_2 (347,384 samples, 0.54%)</title><rect x="15.1846%" y="181" width="0.5426%" height="15" fill="rgb(254,191,54)"/><text x="15.4346%" y="191.50"></text></g><g><title>match_checking (195,032 samples, 0.30%)</title><rect x="15.4226%" y="165" width="0.3046%" height="15" fill="rgb(241,83,37)"/><text x="15.6726%" y="175.50"></text></g><g><title>check_match (183,842 samples, 0.29%)</title><rect x="15.4401%" y="149" width="0.2871%" height="15" fill="rgb(233,36,39)"/><text x="15.6901%" y="159.50"></text></g><g><title>check_private_in_public (131,051 samples, 0.20%)</title><rect x="15.7406%" y="165" width="0.2047%" height="15" fill="rgb(226,3,54)"/><text x="15.9906%" y="175.50"></text></g><g><title>death_checking (220,633 samples, 0.34%)</title><rect x="15.9453%" y="165" width="0.3446%" height="15" fill="rgb(245,192,40)"/><text x="16.1953%" y="175.50"></text></g><g><title>eval_to_const_value_raw (153,411 samples, 0.24%)</title><rect x="17.1410%" y="133" width="0.2396%" height="15" fill="rgb(238,167,29)"/><text x="17.3910%" y="143.50"></text></g><g><title>eval_to_const_value_raw (144,521 samples, 0.23%)</title><rect x="17.1549%" y="117" width="0.2257%" height="15" fill="rgb(232,182,51)"/><text x="17.4049%" y="127.50"></text></g><g><title>eval_to_allocation_raw (138,801 samples, 0.22%)</title><rect x="17.1638%" y="101" width="0.2168%" height="15" fill="rgb(231,60,39)"/><text x="17.4138%" y="111.50"></text></g><g><title>param_env (168,202 samples, 0.26%)</title><rect x="17.3806%" y="133" width="0.2627%" height="15" fill="rgb(208,69,12)"/><text x="17.6306%" y="143.50"></text></g><g><title>predicates_of (74,420 samples, 0.12%)</title><rect x="17.5271%" y="117" width="0.1162%" height="15" fill="rgb(235,93,37)"/><text x="17.7771%" y="127.50"></text></g><g><title>crate_lints (1,924,541 samples, 3.01%)</title><rect x="16.2922%" y="149" width="3.0058%" height="15" fill="rgb(213,116,39)"/><text x="16.5422%" y="159.50">cra..</text></g><g><title>type_of (1,057,085 samples, 1.65%)</title><rect x="17.6470%" y="133" width="1.6510%" height="15" fill="rgb(222,207,29)"/><text x="17.8970%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (810,573 samples, 1.27%)</title><rect x="18.0320%" y="117" width="1.2660%" height="15" fill="rgb(206,96,30)"/><text x="18.2820%" y="127.50"></text></g><g><title>lint_checking (2,090,403 samples, 3.26%)</title><rect x="16.2899%" y="165" width="3.2648%" height="15" fill="rgb(218,138,4)"/><text x="16.5399%" y="175.50">lin..</text></g><g><title>module_lints (164,412 samples, 0.26%)</title><rect x="19.2979%" y="149" width="0.2568%" height="15" fill="rgb(250,191,14)"/><text x="19.5479%" y="159.50"></text></g><g><title>lint_mod (160,132 samples, 0.25%)</title><rect x="19.3046%" y="133" width="0.2501%" height="15" fill="rgb(239,60,40)"/><text x="19.5546%" y="143.50"></text></g><g><title>privacy_access_levels (115,701 samples, 0.18%)</title><rect x="19.5547%" y="165" width="0.1807%" height="15" fill="rgb(206,27,48)"/><text x="19.8047%" y="175.50"></text></g><g><title>privacy_checking_modules (376,024 samples, 0.59%)</title><rect x="19.7354%" y="165" width="0.5873%" height="15" fill="rgb(225,35,8)"/><text x="19.9854%" y="175.50"></text></g><g><title>check_mod_privacy (372,374 samples, 0.58%)</title><rect x="19.7411%" y="149" width="0.5816%" height="15" fill="rgb(250,213,24)"/><text x="19.9911%" y="159.50"></text></g><g><title>misc_checking_3 (2,952,432 samples, 4.61%)</title><rect x="15.7272%" y="181" width="4.6112%" height="15" fill="rgb(247,123,22)"/><text x="15.9772%" y="191.50">misc_..</text></g><g><title>adt_sized_constraint (69,311 samples, 0.11%)</title><rect x="23.9874%" y="69" width="0.1083%" height="15" fill="rgb(231,138,38)"/><text x="24.2374%" y="79.50"></text></g><g><title>adt_sized_constraint (77,331 samples, 0.12%)</title><rect x="23.9801%" y="85" width="0.1208%" height="15" fill="rgb(231,145,46)"/><text x="24.2301%" y="95.50"></text></g><g><title>adt_sized_constraint (90,861 samples, 0.14%)</title><rect x="23.9618%" y="117" width="0.1419%" height="15" fill="rgb(251,118,11)"/><text x="24.2118%" y="127.50"></text></g><g><title>adt_sized_constraint (87,741 samples, 0.14%)</title><rect x="23.9667%" y="101" width="0.1370%" height="15" fill="rgb(217,147,25)"/><text x="24.2167%" y="111.50"></text></g><g><title>impl_parent (1,441,614 samples, 2.25%)</title><rect x="24.1038%" y="117" width="2.2515%" height="15" fill="rgb(247,81,37)"/><text x="24.3538%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (915,619 samples, 1.43%)</title><rect x="24.9253%" y="101" width="1.4300%" height="15" fill="rgb(209,12,38)"/><text x="25.1753%" y="111.50"></text></g><g><title>impl_trait_ref (4,190,434 samples, 6.54%)</title><rect x="26.3553%" y="117" width="6.5447%" height="15" fill="rgb(227,1,9)"/><text x="26.6053%" y="127.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,434,616 samples, 5.36%)</title><rect x="27.5357%" y="101" width="5.3642%" height="15" fill="rgb(248,47,43)"/><text x="27.7857%" y="111.50">metadat..</text></g><g><title>coherent_trait (8,624,336 samples, 13.47%)</title><rect x="20.4212%" y="149" width="13.4696%" height="15" fill="rgb(221,10,30)"/><text x="20.6712%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (8,607,596 samples, 13.44%)</title><rect x="20.4473%" y="133" width="13.4435%" height="15" fill="rgb(210,229,1)"/><text x="20.6973%" y="143.50">specialization_graph..</text></g><g><title>trait_impls_of (596,656 samples, 0.93%)</title><rect x="32.9589%" y="117" width="0.9319%" height="15" fill="rgb(222,148,37)"/><text x="33.2089%" y="127.50"></text></g><g><title>implementations_of_trait (176,452 samples, 0.28%)</title><rect x="33.6152%" y="101" width="0.2756%" height="15" fill="rgb(234,67,33)"/><text x="33.8652%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (118,782 samples, 0.19%)</title><rect x="33.7053%" y="85" width="0.1855%" height="15" fill="rgb(247,98,35)"/><text x="33.9553%" y="95.50"></text></g><g><title>coherence_checking (8,680,216 samples, 13.56%)</title><rect x="20.3921%" y="165" width="13.5569%" height="15" fill="rgb(247,138,52)"/><text x="20.6421%" y="175.50">coherence_checking</text></g><g><title>associated_item (88,371 samples, 0.14%)</title><rect x="44.2971%" y="101" width="0.1380%" height="15" fill="rgb(213,79,30)"/><text x="44.5471%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (69,561 samples, 0.11%)</title><rect x="44.3265%" y="85" width="0.1086%" height="15" fill="rgb(246,177,23)"/><text x="44.5765%" y="95.50"></text></g><g><title>associated_items (154,081 samples, 0.24%)</title><rect x="44.2114%" y="117" width="0.2406%" height="15" fill="rgb(230,62,27)"/><text x="44.4614%" y="127.50"></text></g><g><title>adt_def (219,842 samples, 0.34%)</title><rect x="45.0481%" y="69" width="0.3434%" height="15" fill="rgb(216,154,8)"/><text x="45.2981%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (217,682 samples, 0.34%)</title><rect x="45.0515%" y="53" width="0.3400%" height="15" fill="rgb(244,35,45)"/><text x="45.3015%" y="63.50"></text></g><g><title>adt_def (64,890 samples, 0.10%)</title><rect x="45.4258%" y="53" width="0.1013%" height="15" fill="rgb(251,115,12)"/><text x="45.6758%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (64,030 samples, 0.10%)</title><rect x="45.4271%" y="37" width="0.1000%" height="15" fill="rgb(240,54,50)"/><text x="45.6771%" y="47.50"></text></g><g><title>adt_dtorck_constraint (75,731 samples, 0.12%)</title><rect x="45.5619%" y="37" width="0.1183%" height="15" fill="rgb(233,84,52)"/><text x="45.8119%" y="47.50"></text></g><g><title>adt_dtorck_constraint (97,821 samples, 0.15%)</title><rect x="45.5366%" y="53" width="0.1528%" height="15" fill="rgb(207,117,47)"/><text x="45.7866%" y="63.50"></text></g><g><title>adt_dtorck_constraint (187,291 samples, 0.29%)</title><rect x="45.4101%" y="69" width="0.2925%" height="15" fill="rgb(249,43,39)"/><text x="45.6601%" y="79.50"></text></g><g><title>adt_dtorck_constraint (467,525 samples, 0.73%)</title><rect x="45.0102%" y="85" width="0.7302%" height="15" fill="rgb(209,38,44)"/><text x="45.2602%" y="95.50"></text></g><g><title>adt_dtorck_constraint (616,638 samples, 0.96%)</title><rect x="44.8367%" y="101" width="0.9631%" height="15" fill="rgb(236,212,23)"/><text x="45.0867%" y="111.50"></text></g><g><title>dropck_outlives (853,890 samples, 1.33%)</title><rect x="44.5097%" y="117" width="1.3336%" height="15" fill="rgb(242,79,21)"/><text x="44.7597%" y="127.50"></text></g><g><title>evaluate_obligation (446,019 samples, 0.70%)</title><rect x="45.8433%" y="117" width="0.6966%" height="15" fill="rgb(211,96,35)"/><text x="46.0933%" y="127.50"></text></g><g><title>trait_impls_of (102,352 samples, 0.16%)</title><rect x="46.3801%" y="101" width="0.1599%" height="15" fill="rgb(253,215,40)"/><text x="46.6301%" y="111.50"></text></g><g><title>item_attrs (104,090 samples, 0.16%)</title><rect x="46.7610%" y="117" width="0.1626%" height="15" fill="rgb(211,81,21)"/><text x="47.0110%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (100,260 samples, 0.16%)</title><rect x="46.7670%" y="101" width="0.1566%" height="15" fill="rgb(208,190,38)"/><text x="47.0170%" y="111.50"></text></g><g><title>method_autoderef_steps (392,332 samples, 0.61%)</title><rect x="46.9648%" y="117" width="0.6128%" height="15" fill="rgb(235,213,38)"/><text x="47.2148%" y="127.50"></text></g><g><title>evaluate_obligation (150,012 samples, 0.23%)</title><rect x="47.3432%" y="101" width="0.2343%" height="15" fill="rgb(237,122,38)"/><text x="47.5932%" y="111.50"></text></g><g><title>predicates_of (118,740 samples, 0.19%)</title><rect x="47.6318%" y="117" width="0.1855%" height="15" fill="rgb(244,218,35)"/><text x="47.8818%" y="127.50"></text></g><g><title>predicates_defined_on (87,000 samples, 0.14%)</title><rect x="47.6813%" y="101" width="0.1359%" height="15" fill="rgb(240,68,47)"/><text x="47.9313%" y="111.50"></text></g><g><title>item_bodies_checking (8,938,940 samples, 13.96%)</title><rect x="33.9913%" y="165" width="13.9610%" height="15" fill="rgb(210,16,53)"/><text x="34.2413%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (8,936,290 samples, 13.96%)</title><rect x="33.9954%" y="149" width="13.9568%" height="15" fill="rgb(235,124,12)"/><text x="34.2454%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (8,909,569 samples, 13.92%)</title><rect x="34.0371%" y="133" width="13.9151%" height="15" fill="rgb(224,169,11)"/><text x="34.2871%" y="143.50">typeck</text></g><g><title>adt_destructor (325,734 samples, 0.51%)</title><rect x="49.3035%" y="133" width="0.5087%" height="15" fill="rgb(250,166,2)"/><text x="49.5535%" y="143.50"></text></g><g><title>coherent_trait (320,774 samples, 0.50%)</title><rect x="49.3112%" y="117" width="0.5010%" height="15" fill="rgb(242,216,29)"/><text x="49.5612%" y="127.50"></text></g><g><title>specialization_graph_of (319,274 samples, 0.50%)</title><rect x="49.3135%" y="101" width="0.4986%" height="15" fill="rgb(230,116,27)"/><text x="49.5635%" y="111.50"></text></g><g><title>impl_trait_ref (160,542 samples, 0.25%)</title><rect x="49.5615%" y="85" width="0.2507%" height="15" fill="rgb(228,99,48)"/><text x="49.8115%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (139,382 samples, 0.22%)</title><rect x="49.5945%" y="69" width="0.2177%" height="15" fill="rgb(253,11,6)"/><text x="49.8445%" y="79.50"></text></g><g><title>item_types_checking (1,372,935 samples, 2.14%)</title><rect x="47.9522%" y="165" width="2.1443%" height="15" fill="rgb(247,143,39)"/><text x="48.2022%" y="175.50">i..</text></g><g><title>check_mod_item_types (1,367,425 samples, 2.14%)</title><rect x="47.9609%" y="149" width="2.1357%" height="15" fill="rgb(236,97,10)"/><text x="48.2109%" y="159.50">c..</text></g><g><title>typeck (82,351 samples, 0.13%)</title><rect x="49.9679%" y="133" width="0.1286%" height="15" fill="rgb(233,208,19)"/><text x="50.2179%" y="143.50"></text></g><g><title>fn_sig (156,650 samples, 0.24%)</title><rect x="50.3474%" y="133" width="0.2447%" height="15" fill="rgb(216,164,2)"/><text x="50.5974%" y="143.50"></text></g><g><title>generics_of (163,712 samples, 0.26%)</title><rect x="50.5921%" y="133" width="0.2557%" height="15" fill="rgb(220,129,5)"/><text x="50.8421%" y="143.50"></text></g><g><title>late_bound_vars_map (193,762 samples, 0.30%)</title><rect x="51.3314%" y="85" width="0.3026%" height="15" fill="rgb(242,17,10)"/><text x="51.5814%" y="95.50"></text></g><g><title>resolve_lifetimes (188,132 samples, 0.29%)</title><rect x="51.3402%" y="69" width="0.2938%" height="15" fill="rgb(242,107,0)"/><text x="51.5902%" y="79.50"></text></g><g><title>lint_levels (86,871 samples, 0.14%)</title><rect x="51.4984%" y="53" width="0.1357%" height="15" fill="rgb(251,28,31)"/><text x="51.7484%" y="63.50"></text></g><g><title>type_of (180,192 samples, 0.28%)</title><rect x="51.6497%" y="85" width="0.2814%" height="15" fill="rgb(233,223,10)"/><text x="51.8997%" y="95.50"></text></g><g><title>explicit_predicates_of (629,646 samples, 0.98%)</title><rect x="51.0299%" y="101" width="0.9834%" height="15" fill="rgb(215,21,27)"/><text x="51.2799%" y="111.50"></text></g><g><title>predicates_of (1,002,240 samples, 1.57%)</title><rect x="50.9093%" y="133" width="1.5653%" height="15" fill="rgb(232,23,21)"/><text x="51.1593%" y="143.50"></text></g><g><title>predicates_defined_on (972,860 samples, 1.52%)</title><rect x="50.9551%" y="117" width="1.5194%" height="15" fill="rgb(244,5,23)"/><text x="51.2051%" y="127.50"></text></g><g><title>inferred_outlives_of (295,363 samples, 0.46%)</title><rect x="52.0133%" y="101" width="0.4613%" height="15" fill="rgb(226,81,46)"/><text x="52.2633%" y="111.50"></text></g><g><title>inferred_outlives_crate (278,823 samples, 0.44%)</title><rect x="52.0391%" y="85" width="0.4355%" height="15" fill="rgb(247,70,30)"/><text x="52.2891%" y="95.50"></text></g><g><title>type_of (150,192 samples, 0.23%)</title><rect x="52.2400%" y="69" width="0.2346%" height="15" fill="rgb(212,68,19)"/><text x="52.4900%" y="79.50"></text></g><g><title>type_collecting (1,624,298 samples, 2.54%)</title><rect x="50.1002%" y="165" width="2.5369%" height="15" fill="rgb(240,187,13)"/><text x="50.3502%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (1,614,507 samples, 2.52%)</title><rect x="50.1155%" y="149" width="2.5216%" height="15" fill="rgb(223,113,26)"/><text x="50.3655%" y="159.50">co..</text></g><g><title>type_of (100,071 samples, 0.16%)</title><rect x="52.4808%" y="133" width="0.1563%" height="15" fill="rgb(206,192,2)"/><text x="52.7308%" y="143.50"></text></g><g><title>evaluate_obligation (515,246 samples, 0.80%)</title><rect x="54.6167%" y="133" width="0.8047%" height="15" fill="rgb(241,108,4)"/><text x="54.8667%" y="143.50"></text></g><g><title>implied_outlives_bounds (172,263 samples, 0.27%)</title><rect x="55.4645%" y="133" width="0.2690%" height="15" fill="rgb(247,173,49)"/><text x="55.7145%" y="143.50"></text></g><g><title>param_env (145,943 samples, 0.23%)</title><rect x="55.7502%" y="133" width="0.2279%" height="15" fill="rgb(224,114,35)"/><text x="56.0002%" y="143.50"></text></g><g><title>region_scope_tree (110,391 samples, 0.17%)</title><rect x="56.0283%" y="133" width="0.1724%" height="15" fill="rgb(245,159,27)"/><text x="56.2783%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,185,433 samples, 3.41%)</title><rect x="52.7932%" y="149" width="3.4132%" height="15" fill="rgb(245,172,44)"/><text x="53.0432%" y="159.50">che..</text></g><g><title>evaluate_obligation (141,412 samples, 0.22%)</title><rect x="58.1082%" y="133" width="0.2209%" height="15" fill="rgb(236,23,11)"/><text x="58.3582%" y="143.50"></text></g><g><title>implied_outlives_bounds (126,083 samples, 0.20%)</title><rect x="58.4271%" y="133" width="0.1969%" height="15" fill="rgb(205,117,38)"/><text x="58.6771%" y="143.50"></text></g><g><title>evaluate_obligation (126,331 samples, 0.20%)</title><rect x="58.8501%" y="117" width="0.1973%" height="15" fill="rgb(237,72,25)"/><text x="59.1001%" y="127.50"></text></g><g><title>layout_of (96,250 samples, 0.15%)</title><rect x="59.1059%" y="117" width="0.1503%" height="15" fill="rgb(244,70,9)"/><text x="59.3559%" y="127.50"></text></g><g><title>object_safety_violations (479,255 samples, 0.75%)</title><rect x="58.6335%" y="133" width="0.7485%" height="15" fill="rgb(217,125,39)"/><text x="58.8835%" y="143.50"></text></g><g><title>param_env (214,694 samples, 0.34%)</title><rect x="59.3830%" y="133" width="0.3353%" height="15" fill="rgb(235,36,10)"/><text x="59.6330%" y="143.50"></text></g><g><title>predicates_of (129,431 samples, 0.20%)</title><rect x="59.7184%" y="133" width="0.2021%" height="15" fill="rgb(251,123,47)"/><text x="59.9684%" y="143.50"></text></g><g><title>predicates_defined_on (91,720 samples, 0.14%)</title><rect x="59.7773%" y="117" width="0.1432%" height="15" fill="rgb(221,13,13)"/><text x="60.0273%" y="127.50"></text></g><g><title>trait_impls_of (84,911 samples, 0.13%)</title><rect x="59.9600%" y="133" width="0.1326%" height="15" fill="rgb(238,131,9)"/><text x="60.2100%" y="143.50"></text></g><g><title>analysis (38,163,393 samples, 59.60%)</title><rect x="0.5841%" y="197" width="59.6042%" height="15" fill="rgb(211,50,8)"/><text x="0.8341%" y="207.50">analysis</text></g><g><title>type_check_crate (25,515,143 samples, 39.85%)</title><rect x="20.3384%" y="181" width="39.8500%" height="15" fill="rgb(245,182,24)"/><text x="20.5884%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,833,494 samples, 7.55%)</title><rect x="52.6393%" y="165" width="7.5490%" height="15" fill="rgb(242,14,37)"/><text x="52.8893%" y="175.50">wf_checking</text></g><g><title>check_item_well_formed (2,549,529 samples, 3.98%)</title><rect x="56.2064%" y="149" width="3.9819%" height="15" fill="rgb(246,228,12)"/><text x="56.4564%" y="159.50">chec..</text></g><g><title>codegen_crate (408,694 samples, 0.64%)</title><rect x="60.1985%" y="197" width="0.6383%" height="15" fill="rgb(213,55,15)"/><text x="60.4485%" y="207.50"></text></g><g><title>AST_validation (99,541 samples, 0.16%)</title><rect x="61.0306%" y="181" width="0.1555%" height="15" fill="rgb(209,9,3)"/><text x="61.2806%" y="191.50"></text></g><g><title>metadata_load_macro (221,652 samples, 0.35%)</title><rect x="78.4680%" y="149" width="0.3462%" height="15" fill="rgb(230,59,30)"/><text x="78.7180%" y="159.50"></text></g><g><title>metadata_register_crate (5,248,998 samples, 8.20%)</title><rect x="78.8142%" y="149" width="8.1980%" height="15" fill="rgb(209,121,21)"/><text x="79.0642%" y="159.50">metadata_re..</text></g><g><title>metadata_register_crate (3,880,861 samples, 6.06%)</title><rect x="80.9510%" y="133" width="6.0612%" height="15" fill="rgb(220,109,13)"/><text x="81.2010%" y="143.50">metadata..</text></g><g><title>macro_expand_crate (16,480,703 samples, 25.74%)</title><rect x="61.3228%" y="181" width="25.7398%" height="15" fill="rgb(232,18,1)"/><text x="61.5728%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (16,464,443 samples, 25.71%)</title><rect x="61.3482%" y="165" width="25.7144%" height="15" fill="rgb(215,41,42)"/><text x="61.5982%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (75,401 samples, 0.12%)</title><rect x="87.0680%" y="181" width="0.1178%" height="15" fill="rgb(224,123,36)"/><text x="87.3180%" y="191.50"></text></g><g><title>late_resolve_crate (940,820 samples, 1.47%)</title><rect x="87.3454%" y="165" width="1.4694%" height="15" fill="rgb(240,125,3)"/><text x="87.5954%" y="175.50"></text></g><g><title>configure_and_expand (17,974,009 samples, 28.07%)</title><rect x="60.8368%" y="197" width="28.0721%" height="15" fill="rgb(205,98,50)"/><text x="61.0868%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,103,252 samples, 1.72%)</title><rect x="87.1858%" y="181" width="1.7231%" height="15" fill="rgb(205,185,37)"/><text x="87.4358%" y="191.50"></text></g><g><title>drop_ast (69,561 samples, 0.11%)</title><rect x="88.9089%" y="197" width="0.1086%" height="15" fill="rgb(238,207,15)"/><text x="89.1589%" y="207.50"></text></g><g><title>early_lint_checks (206,802 samples, 0.32%)</title><rect x="89.0467%" y="197" width="0.3230%" height="15" fill="rgb(213,199,42)"/><text x="89.2967%" y="207.50"></text></g><g><title>free_global_ctxt (2,866,743 samples, 4.48%)</title><rect x="89.3697%" y="197" width="4.4773%" height="15" fill="rgb(235,201,11)"/><text x="89.6197%" y="207.50">free_..</text></g><g><title>crate_hash (72,011 samples, 0.11%)</title><rect x="95.2563%" y="181" width="0.1125%" height="15" fill="rgb(207,46,11)"/><text x="95.5063%" y="191.50"></text></g><g><title>generate_crate_metadata (1,111,742 samples, 1.74%)</title><rect x="93.8470%" y="197" width="1.7363%" height="15" fill="rgb(241,35,35)"/><text x="94.0970%" y="207.50"></text></g><g><title>hir_lowering (1,180,633 samples, 1.84%)</title><rect x="95.5834%" y="197" width="1.8439%" height="15" fill="rgb(243,32,47)"/><text x="95.8334%" y="207.50">h..</text></g><g><title>link (65,180 samples, 0.10%)</title><rect x="97.4273%" y="197" width="0.1018%" height="15" fill="rgb(247,202,23)"/><text x="97.6773%" y="207.50"></text></g><g><title>parse_crate (458,865 samples, 0.72%)</title><rect x="97.5291%" y="197" width="0.7167%" height="15" fill="rgb(219,102,11)"/><text x="97.7791%" y="207.50"></text></g><g><title>prepare_outputs (199,733 samples, 0.31%)</title><rect x="98.2559%" y="197" width="0.3119%" height="15" fill="rgb(243,110,44)"/><text x="98.5059%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (534,166 samples, 0.83%)</title><rect x="98.5678%" y="197" width="0.8343%" height="15" fill="rgb(222,74,54)"/><text x="98.8178%" y="207.50"></text></g><g><title>setup_global_ctxt (76,350 samples, 0.12%)</title><rect x="99.4186%" y="197" width="0.1192%" height="15" fill="rgb(216,99,12)"/><text x="99.6686%" y="207.50"></text></g><g><title>all (64,028,011 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (64,028,011 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (295,894 samples, 0.46%)</title><rect x="99.5379%" y="197" width="0.4621%" height="15" fill="rgb(213,25,53)"/><text x="99.7879%" y="207.50"></text></g></svg></svg>