<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (377,895 samples, 0.13%)</title><rect x="6.6727%" y="213" width="0.1313%" height="15" fill="rgb(227,0,7)"/><text x="6.9227%" y="223.50"></text></g><g><title>item_attrs (321,513 samples, 0.11%)</title><rect x="7.0489%" y="181" width="0.1117%" height="15" fill="rgb(217,0,24)"/><text x="7.2989%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (310,893 samples, 0.11%)</title><rect x="7.0525%" y="165" width="0.1080%" height="15" fill="rgb(221,193,54)"/><text x="7.3025%" y="175.50"></text></g><g><title>codegen_fn_attrs (428,224 samples, 0.15%)</title><rect x="7.0168%" y="197" width="0.1488%" height="15" fill="rgb(248,212,6)"/><text x="7.2668%" y="207.50"></text></g><g><title>needs_drop_raw (1,117,651 samples, 0.39%)</title><rect x="8.3919%" y="181" width="0.3882%" height="15" fill="rgb(208,68,35)"/><text x="8.6419%" y="191.50"></text></g><g><title>is_copy_raw (869,659 samples, 0.30%)</title><rect x="8.4780%" y="165" width="0.3021%" height="15" fill="rgb(232,128,0)"/><text x="8.7280%" y="175.50"></text></g><g><title>evaluate_obligation (708,698 samples, 0.25%)</title><rect x="8.5339%" y="149" width="0.2462%" height="15" fill="rgb(207,160,47)"/><text x="8.7839%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (687,367 samples, 0.24%)</title><rect x="8.8569%" y="165" width="0.2388%" height="15" fill="rgb(228,23,34)"/><text x="9.1069%" y="175.50"></text></g><g><title>specialization_graph_of (328,444 samples, 0.11%)</title><rect x="9.1153%" y="165" width="0.1141%" height="15" fill="rgb(218,30,26)"/><text x="9.3653%" y="175.50"></text></g><g><title>resolve_instance (1,383,266 samples, 0.48%)</title><rect x="8.7801%" y="181" width="0.4805%" height="15" fill="rgb(220,122,19)"/><text x="9.0301%" y="191.50"></text></g><g><title>thir_body (1,344,467 samples, 0.47%)</title><rect x="9.2756%" y="181" width="0.4670%" height="15" fill="rgb(250,228,42)"/><text x="9.5256%" y="191.50"></text></g><g><title>mir_const (9,819,970 samples, 3.41%)</title><rect x="6.3393%" y="229" width="3.4111%" height="15" fill="rgb(240,193,28)"/><text x="6.5893%" y="239.50">mir..</text></g><g><title>unsafety_check_result (8,482,146 samples, 2.95%)</title><rect x="6.8040%" y="213" width="2.9464%" height="15" fill="rgb(216,20,37)"/><text x="7.0540%" y="223.50">un..</text></g><g><title>mir_built (7,441,158 samples, 2.58%)</title><rect x="7.1656%" y="197" width="2.5848%" height="15" fill="rgb(206,188,39)"/><text x="7.4156%" y="207.50">mi..</text></g><g><title>mir_promoted (10,894,835 samples, 3.78%)</title><rect x="6.0074%" y="245" width="3.7845%" height="15" fill="rgb(217,207,13)"/><text x="6.2574%" y="255.50">mir_..</text></g><g><title>type_op_ascribe_user_type (804,210 samples, 0.28%)</title><rect x="9.7919%" y="245" width="0.2794%" height="15" fill="rgb(231,73,38)"/><text x="10.0419%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (607,428 samples, 0.21%)</title><rect x="10.0713%" y="245" width="0.2110%" height="15" fill="rgb(225,20,46)"/><text x="10.3213%" y="255.50"></text></g><g><title>normalize_projection_ty (392,027 samples, 0.14%)</title><rect x="10.1461%" y="229" width="0.1362%" height="15" fill="rgb(210,31,41)"/><text x="10.3961%" y="239.50"></text></g><g><title>type_op_prove_predicate (3,023,686 samples, 1.05%)</title><rect x="10.3036%" y="245" width="1.0503%" height="15" fill="rgb(221,200,47)"/><text x="10.5536%" y="255.50"></text></g><g><title>MIR_borrow_checking (31,461,569 samples, 10.93%)</title><rect x="0.4269%" y="277" width="10.9287%" height="15" fill="rgb(226,26,5)"/><text x="0.6769%" y="287.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (31,281,017 samples, 10.87%)</title><rect x="0.4897%" y="261" width="10.8660%" height="15" fill="rgb(249,33,26)"/><text x="0.7397%" y="271.50">mir_borrowck</text></g><g><title>hir_module_items (304,145 samples, 0.11%)</title><rect x="11.4131%" y="277" width="0.1056%" height="15" fill="rgb(235,183,28)"/><text x="11.6631%" y="287.50"></text></g><g><title>codegen_fn_attrs (483,044 samples, 0.17%)</title><rect x="11.6874%" y="245" width="0.1678%" height="15" fill="rgb(221,5,38)"/><text x="11.9374%" y="255.50"></text></g><g><title>check_mod_attrs (915,800 samples, 0.32%)</title><rect x="11.5371%" y="261" width="0.3181%" height="15" fill="rgb(247,18,42)"/><text x="11.7871%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (634,497 samples, 0.22%)</title><rect x="11.9862%" y="261" width="0.2204%" height="15" fill="rgb(241,131,45)"/><text x="12.2362%" y="271.50"></text></g><g><title>misc_checking_1 (2,082,383 samples, 0.72%)</title><rect x="11.5189%" y="277" width="0.7233%" height="15" fill="rgb(249,31,29)"/><text x="11.7689%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (1,339,735 samples, 0.47%)</title><rect x="12.2428%" y="261" width="0.4654%" height="15" fill="rgb(225,111,53)"/><text x="12.4928%" y="271.50"></text></g><g><title>check_mod_liveness (1,120,494 samples, 0.39%)</title><rect x="12.3189%" y="245" width="0.3892%" height="15" fill="rgb(238,160,17)"/><text x="12.5689%" y="255.50"></text></g><g><title>misc_checking_2 (2,646,740 samples, 0.92%)</title><rect x="12.2423%" y="277" width="0.9194%" height="15" fill="rgb(214,148,48)"/><text x="12.4923%" y="287.50"></text></g><g><title>match_checking (1,305,515 samples, 0.45%)</title><rect x="12.7082%" y="261" width="0.4535%" height="15" fill="rgb(232,36,49)"/><text x="12.9582%" y="271.50"></text></g><g><title>check_match (1,231,073 samples, 0.43%)</title><rect x="12.7340%" y="245" width="0.4276%" height="15" fill="rgb(209,103,24)"/><text x="12.9840%" y="255.50"></text></g><g><title>check_private_in_public (418,694 samples, 0.15%)</title><rect x="13.1647%" y="261" width="0.1454%" height="15" fill="rgb(229,88,8)"/><text x="13.4147%" y="271.50"></text></g><g><title>death_checking (860,590 samples, 0.30%)</title><rect x="13.3101%" y="261" width="0.2989%" height="15" fill="rgb(213,181,19)"/><text x="13.5601%" y="271.50"></text></g><g><title>param_env (941,580 samples, 0.33%)</title><rect x="14.1520%" y="229" width="0.3271%" height="15" fill="rgb(254,191,54)"/><text x="14.4020%" y="239.50"></text></g><g><title>predicates_of (369,565 samples, 0.13%)</title><rect x="14.3507%" y="213" width="0.1284%" height="15" fill="rgb(241,83,37)"/><text x="14.6007%" y="223.50"></text></g><g><title>predicates_defined_on (299,135 samples, 0.10%)</title><rect x="14.3752%" y="197" width="0.1039%" height="15" fill="rgb(233,36,39)"/><text x="14.6252%" y="207.50"></text></g><g><title>crate_lints (3,932,994 samples, 1.37%)</title><rect x="13.6095%" y="245" width="1.3662%" height="15" fill="rgb(226,3,54)"/><text x="13.8595%" y="255.50"></text></g><g><title>type_of (1,325,783 samples, 0.46%)</title><rect x="14.5152%" y="229" width="0.4605%" height="15" fill="rgb(245,192,40)"/><text x="14.7652%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (1,040,880 samples, 0.36%)</title><rect x="14.6142%" y="213" width="0.3616%" height="15" fill="rgb(238,167,29)"/><text x="14.8642%" y="223.50"></text></g><g><title>layout_of (330,833 samples, 0.11%)</title><rect x="15.4261%" y="197" width="0.1149%" height="15" fill="rgb(232,182,51)"/><text x="15.6761%" y="207.50"></text></g><g><title>lint_checking (5,562,082 samples, 1.93%)</title><rect x="13.6090%" y="261" width="1.9321%" height="15" fill="rgb(231,60,39)"/><text x="13.8590%" y="271.50">l..</text></g><g><title>module_lints (1,627,598 samples, 0.57%)</title><rect x="14.9757%" y="245" width="0.5654%" height="15" fill="rgb(208,69,12)"/><text x="15.2257%" y="255.50"></text></g><g><title>lint_mod (1,610,208 samples, 0.56%)</title><rect x="14.9818%" y="229" width="0.5593%" height="15" fill="rgb(235,93,37)"/><text x="15.2318%" y="239.50"></text></g><g><title>layout_of (354,973 samples, 0.12%)</title><rect x="15.4178%" y="213" width="0.1233%" height="15" fill="rgb(213,116,39)"/><text x="15.6678%" y="223.50"></text></g><g><title>privacy_access_levels (927,951 samples, 0.32%)</title><rect x="15.5411%" y="261" width="0.3223%" height="15" fill="rgb(222,207,29)"/><text x="15.7911%" y="271.50"></text></g><g><title>privacy_checking_modules (2,275,905 samples, 0.79%)</title><rect x="15.8634%" y="261" width="0.7906%" height="15" fill="rgb(206,96,30)"/><text x="16.1134%" y="271.50"></text></g><g><title>check_mod_privacy (2,262,025 samples, 0.79%)</title><rect x="15.8683%" y="245" width="0.7858%" height="15" fill="rgb(218,138,4)"/><text x="16.1183%" y="255.50"></text></g><g><title>misc_checking_3 (10,071,032 samples, 3.50%)</title><rect x="13.1617%" y="277" width="3.4983%" height="15" fill="rgb(250,191,14)"/><text x="13.4117%" y="287.50">mis..</text></g><g><title>impl_parent (1,932,290 samples, 0.67%)</title><rect x="17.7760%" y="213" width="0.6712%" height="15" fill="rgb(239,60,40)"/><text x="18.0260%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,232,822 samples, 0.43%)</title><rect x="18.0190%" y="197" width="0.4282%" height="15" fill="rgb(206,27,48)"/><text x="18.2690%" y="207.50"></text></g><g><title>impl_trait_ref (4,906,973 samples, 1.70%)</title><rect x="18.4472%" y="213" width="1.7045%" height="15" fill="rgb(225,35,8)"/><text x="18.6972%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,172,504 samples, 1.45%)</title><rect x="18.7024%" y="197" width="1.4494%" height="15" fill="rgb(250,213,24)"/><text x="18.9524%" y="207.50"></text></g><g><title>trait_impls_of (883,079 samples, 0.31%)</title><rect x="20.1595%" y="213" width="0.3068%" height="15" fill="rgb(247,123,22)"/><text x="20.4095%" y="223.50"></text></g><g><title>coherent_trait (10,783,000 samples, 3.75%)</title><rect x="16.7208%" y="245" width="3.7456%" height="15" fill="rgb(231,138,38)"/><text x="16.9708%" y="255.50">cohe..</text></g><g><title>specialization_graph_of (10,768,250 samples, 3.74%)</title><rect x="16.7260%" y="229" width="3.7405%" height="15" fill="rgb(231,145,46)"/><text x="16.9760%" y="239.50">spec..</text></g><g><title>coherence_checking (10,875,901 samples, 3.78%)</title><rect x="16.7144%" y="261" width="3.7779%" height="15" fill="rgb(251,118,11)"/><text x="16.9644%" y="271.50">cohe..</text></g><g><title>trait_impls_of (430,945 samples, 0.15%)</title><rect x="27.7029%" y="197" width="0.1497%" height="15" fill="rgb(217,147,25)"/><text x="27.9529%" y="207.50"></text></g><g><title>evaluate_obligation (2,828,902 samples, 0.98%)</title><rect x="26.8744%" y="213" width="0.9827%" height="15" fill="rgb(247,81,37)"/><text x="27.1244%" y="223.50"></text></g><g><title>method_autoderef_steps (356,394 samples, 0.12%)</title><rect x="28.0237%" y="213" width="0.1238%" height="15" fill="rgb(209,12,38)"/><text x="28.2737%" y="223.50"></text></g><g><title>evaluate_obligation (1,346,235 samples, 0.47%)</title><rect x="32.6508%" y="197" width="0.4676%" height="15" fill="rgb(227,1,9)"/><text x="32.9008%" y="207.50"></text></g><g><title>method_autoderef_steps (458,666 samples, 0.16%)</title><rect x="33.3435%" y="197" width="0.1593%" height="15" fill="rgb(248,47,43)"/><text x="33.5935%" y="207.50"></text></g><g><title>typeck (15,011,767 samples, 5.21%)</title><rect x="28.3227%" y="213" width="5.2146%" height="15" fill="rgb(221,10,30)"/><text x="28.5727%" y="223.50">typeck</text></g><g><title>item_bodies_checking (37,553,408 samples, 13.04%)</title><rect x="20.5074%" y="261" width="13.0448%" height="15" fill="rgb(210,229,1)"/><text x="20.7574%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (37,550,097 samples, 13.04%)</title><rect x="20.5086%" y="245" width="13.0436%" height="15" fill="rgb(222,148,37)"/><text x="20.7586%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (37,425,795 samples, 13.00%)</title><rect x="20.5517%" y="229" width="13.0005%" height="15" fill="rgb(234,67,33)"/><text x="20.8017%" y="239.50">typeck</text></g><g><title>explicit_item_bounds (641,071 samples, 0.22%)</title><rect x="34.5242%" y="229" width="0.2227%" height="15" fill="rgb(247,98,35)"/><text x="34.7742%" y="239.50"></text></g><g><title>implied_outlives_bounds (367,804 samples, 0.13%)</title><rect x="41.8208%" y="181" width="0.1278%" height="15" fill="rgb(247,138,52)"/><text x="42.0708%" y="191.50"></text></g><g><title>mir_const (604,970 samples, 0.21%)</title><rect x="43.2293%" y="149" width="0.2101%" height="15" fill="rgb(213,79,30)"/><text x="43.4793%" y="159.50"></text></g><g><title>param_env (316,923 samples, 0.11%)</title><rect x="43.3294%" y="133" width="0.1101%" height="15" fill="rgb(246,177,23)"/><text x="43.5794%" y="143.50"></text></g><g><title>mir_promoted (876,284 samples, 0.30%)</title><rect x="43.1407%" y="165" width="0.3044%" height="15" fill="rgb(230,62,27)"/><text x="43.3907%" y="175.50"></text></g><g><title>type_op_prove_predicate (362,936 samples, 0.13%)</title><rect x="43.4877%" y="165" width="0.1261%" height="15" fill="rgb(216,154,8)"/><text x="43.7377%" y="175.50"></text></g><g><title>mir_borrowck (4,646,565 samples, 1.61%)</title><rect x="42.0001%" y="181" width="1.6141%" height="15" fill="rgb(244,35,45)"/><text x="42.2501%" y="191.50"></text></g><g><title>mir_const (1,063,180 samples, 0.37%)</title><rect x="43.9264%" y="165" width="0.3693%" height="15" fill="rgb(251,115,12)"/><text x="44.1764%" y="175.50"></text></g><g><title>mir_promoted (1,982,693 samples, 0.69%)</title><rect x="43.6142%" y="181" width="0.6887%" height="15" fill="rgb(240,54,50)"/><text x="43.8642%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (1,842,556 samples, 0.64%)</title><rect x="44.3029%" y="181" width="0.6400%" height="15" fill="rgb(233,84,52)"/><text x="44.5529%" y="191.50"></text></g><g><title>normalize_projection_ty (1,198,817 samples, 0.42%)</title><rect x="44.5265%" y="165" width="0.4164%" height="15" fill="rgb(207,117,47)"/><text x="44.7765%" y="175.50"></text></g><g><title>type_op_normalize_predicate (294,204 samples, 0.10%)</title><rect x="44.9429%" y="181" width="0.1022%" height="15" fill="rgb(249,43,39)"/><text x="45.1929%" y="191.50"></text></g><g><title>mir_borrowck (27,883,951 samples, 9.69%)</title><rect x="36.8034%" y="197" width="9.6859%" height="15" fill="rgb(209,38,44)"/><text x="37.0534%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (3,986,148 samples, 1.38%)</title><rect x="45.1047%" y="181" width="1.3847%" height="15" fill="rgb(236,212,23)"/><text x="45.3547%" y="191.50"></text></g><g><title>evaluate_obligation (421,804 samples, 0.15%)</title><rect x="46.3428%" y="165" width="0.1465%" height="15" fill="rgb(242,79,21)"/><text x="46.5928%" y="175.50"></text></g><g><title>needs_drop_raw (453,310 samples, 0.16%)</title><rect x="47.1025%" y="133" width="0.1575%" height="15" fill="rgb(211,96,35)"/><text x="47.3525%" y="143.50"></text></g><g><title>associated_item (402,003 samples, 0.14%)</title><rect x="60.7698%" y="101" width="0.1396%" height="15" fill="rgb(253,215,40)"/><text x="61.0198%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (319,023 samples, 0.11%)</title><rect x="60.7986%" y="85" width="0.1108%" height="15" fill="rgb(211,81,21)"/><text x="61.0486%" y="95.50"></text></g><g><title>associated_items (594,105 samples, 0.21%)</title><rect x="60.7158%" y="117" width="0.2064%" height="15" fill="rgb(208,190,38)"/><text x="60.9658%" y="127.50"></text></g><g><title>coherent_trait (432,215 samples, 0.15%)</title><rect x="61.2730%" y="53" width="0.1501%" height="15" fill="rgb(235,213,38)"/><text x="61.5230%" y="63.50"></text></g><g><title>specialization_graph_of (429,775 samples, 0.15%)</title><rect x="61.2738%" y="37" width="0.1493%" height="15" fill="rgb(237,122,38)"/><text x="61.5238%" y="47.50"></text></g><g><title>adt_destructor (462,995 samples, 0.16%)</title><rect x="61.2655%" y="85" width="0.1608%" height="15" fill="rgb(244,218,35)"/><text x="61.5155%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (456,735 samples, 0.16%)</title><rect x="61.2676%" y="69" width="0.1587%" height="15" fill="rgb(240,68,47)"/><text x="61.5176%" y="79.50"></text></g><g><title>adt_dtorck_constraint (426,075 samples, 0.15%)</title><rect x="61.4263%" y="85" width="0.1480%" height="15" fill="rgb(210,16,53)"/><text x="61.6763%" y="95.50"></text></g><g><title>dropck_outlives (1,870,718 samples, 0.65%)</title><rect x="60.9397%" y="117" width="0.6498%" height="15" fill="rgb(235,124,12)"/><text x="61.1897%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,140,823 samples, 0.40%)</title><rect x="61.1932%" y="101" width="0.3963%" height="15" fill="rgb(224,169,11)"/><text x="61.4432%" y="111.50"></text></g><g><title>trait_impls_of (307,967 samples, 0.11%)</title><rect x="63.1007%" y="101" width="0.1070%" height="15" fill="rgb(250,166,2)"/><text x="63.3507%" y="111.50"></text></g><g><title>evaluate_obligation (4,689,123 samples, 1.63%)</title><rect x="61.5916%" y="117" width="1.6288%" height="15" fill="rgb(242,216,29)"/><text x="61.8416%" y="127.50"></text></g><g><title>implied_outlives_bounds (401,603 samples, 0.14%)</title><rect x="63.3732%" y="117" width="0.1395%" height="15" fill="rgb(230,116,27)"/><text x="63.6232%" y="127.50"></text></g><g><title>is_copy_raw (2,121,123 samples, 0.74%)</title><rect x="63.5329%" y="117" width="0.7368%" height="15" fill="rgb(228,99,48)"/><text x="63.7829%" y="127.50"></text></g><g><title>evaluate_obligation (1,634,939 samples, 0.57%)</title><rect x="63.7018%" y="101" width="0.5679%" height="15" fill="rgb(253,11,6)"/><text x="63.9518%" y="111.50"></text></g><g><title>item_attrs (776,247 samples, 0.27%)</title><rect x="64.2697%" y="117" width="0.2696%" height="15" fill="rgb(247,143,39)"/><text x="64.5197%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (761,707 samples, 0.26%)</title><rect x="64.2747%" y="101" width="0.2646%" height="15" fill="rgb(236,97,10)"/><text x="64.5247%" y="111.50"></text></g><g><title>method_autoderef_steps (317,164 samples, 0.11%)</title><rect x="64.6300%" y="117" width="0.1102%" height="15" fill="rgb(233,208,19)"/><text x="64.8800%" y="127.50"></text></g><g><title>predicates_of (667,099 samples, 0.23%)</title><rect x="64.8464%" y="117" width="0.2317%" height="15" fill="rgb(216,164,2)"/><text x="65.0964%" y="127.50"></text></g><g><title>predicates_defined_on (550,159 samples, 0.19%)</title><rect x="64.8871%" y="101" width="0.1911%" height="15" fill="rgb(220,129,5)"/><text x="65.1371%" y="111.50"></text></g><g><title>inferred_outlives_of (312,606 samples, 0.11%)</title><rect x="64.9696%" y="85" width="0.1086%" height="15" fill="rgb(242,17,10)"/><text x="65.2196%" y="95.50"></text></g><g><title>mir_built (53,304,213 samples, 18.52%)</title><rect x="46.7467%" y="149" width="18.5161%" height="15" fill="rgb(242,107,0)"/><text x="46.9967%" y="159.50">mir_built</text></g><g><title>typeck (51,483,210 samples, 17.88%)</title><rect x="47.3792%" y="133" width="17.8835%" height="15" fill="rgb(251,28,31)"/><text x="47.6292%" y="143.50">typeck</text></g><g><title>adt_drop_tys (357,062 samples, 0.12%)</title><rect x="66.7446%" y="101" width="0.1240%" height="15" fill="rgb(233,223,10)"/><text x="66.9946%" y="111.50"></text></g><g><title>needs_drop_raw (799,737 samples, 0.28%)</title><rect x="66.6747%" y="117" width="0.2778%" height="15" fill="rgb(215,21,27)"/><text x="66.9247%" y="127.50"></text></g><g><title>param_env (433,045 samples, 0.15%)</title><rect x="67.2811%" y="101" width="0.1504%" height="15" fill="rgb(232,23,21)"/><text x="67.5311%" y="111.50"></text></g><g><title>thir_body (1,332,733 samples, 0.46%)</title><rect x="66.9724%" y="117" width="0.4629%" height="15" fill="rgb(244,5,23)"/><text x="67.2224%" y="127.50"></text></g><g><title>mir_built (5,645,954 samples, 1.96%)</title><rect x="65.4956%" y="133" width="1.9612%" height="15" fill="rgb(226,81,46)"/><text x="65.7456%" y="143.50">m..</text></g><g><title>param_env (314,305 samples, 0.11%)</title><rect x="67.8733%" y="85" width="0.1092%" height="15" fill="rgb(247,70,30)"/><text x="68.1233%" y="95.50"></text></g><g><title>thir_body (485,426 samples, 0.17%)</title><rect x="67.8175%" y="101" width="0.1686%" height="15" fill="rgb(212,68,19)"/><text x="68.0675%" y="111.50"></text></g><g><title>mir_built (1,134,491 samples, 0.39%)</title><rect x="67.6022%" y="117" width="0.3941%" height="15" fill="rgb(240,187,13)"/><text x="67.8522%" y="127.50"></text></g><g><title>mir_const (61,742,236 samples, 21.45%)</title><rect x="46.5841%" y="181" width="21.4472%" height="15" fill="rgb(223,113,26)"/><text x="46.8341%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (61,403,710 samples, 21.33%)</title><rect x="46.7017%" y="165" width="21.3296%" height="15" fill="rgb(206,192,2)"/><text x="46.9517%" y="175.50">unsafety_check_result</text></g><g><title>unsafety_check_result (7,969,996 samples, 2.77%)</title><rect x="65.2628%" y="149" width="2.7685%" height="15" fill="rgb(241,108,4)"/><text x="65.5128%" y="159.50">un..</text></g><g><title>unsafety_check_result (1,646,407 samples, 0.57%)</title><rect x="67.4594%" y="133" width="0.5719%" height="15" fill="rgb(247,173,49)"/><text x="67.7094%" y="143.50"></text></g><g><title>mir_promoted (62,049,399 samples, 21.55%)</title><rect x="46.4893%" y="197" width="21.5539%" height="15" fill="rgb(224,114,35)"/><text x="46.7393%" y="207.50">mir_promoted</text></g><g><title>type_of (97,524,295 samples, 33.88%)</title><rect x="34.7973%" y="229" width="33.8766%" height="15" fill="rgb(245,159,27)"/><text x="35.0473%" y="239.50">type_of</text></g><g><title>mir_borrowck (97,462,634 samples, 33.86%)</title><rect x="34.8187%" y="213" width="33.8552%" height="15" fill="rgb(245,172,44)"/><text x="35.0687%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,297,888 samples, 0.45%)</title><rect x="68.2231%" y="197" width="0.4508%" height="15" fill="rgb(236,23,11)"/><text x="68.4731%" y="207.50"></text></g><g><title>impl_trait_ref (458,515 samples, 0.16%)</title><rect x="69.0040%" y="197" width="0.1593%" height="15" fill="rgb(205,117,38)"/><text x="69.2540%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (408,674 samples, 0.14%)</title><rect x="69.0213%" y="181" width="0.1420%" height="15" fill="rgb(237,72,25)"/><text x="69.2713%" y="191.50"></text></g><g><title>evaluate_obligation (1,464,817 samples, 0.51%)</title><rect x="68.7717%" y="213" width="0.5088%" height="15" fill="rgb(244,70,9)"/><text x="69.0217%" y="223.50"></text></g><g><title>item_types_checking (102,916,975 samples, 35.75%)</title><rect x="33.5522%" y="261" width="35.7499%" height="15" fill="rgb(217,125,39)"/><text x="33.8022%" y="271.50">item_types_checking</text></g><g><title>check_mod_item_types (102,875,703 samples, 35.74%)</title><rect x="33.5665%" y="245" width="35.7355%" height="15" fill="rgb(235,36,10)"/><text x="33.8165%" y="255.50">check_mod_item_types</text></g><g><title>typeck (1,808,190 samples, 0.63%)</title><rect x="68.6740%" y="229" width="0.6281%" height="15" fill="rgb(251,123,47)"/><text x="68.9240%" y="239.50"></text></g><g><title>fn_sig (688,977 samples, 0.24%)</title><rect x="69.4534%" y="229" width="0.2393%" height="15" fill="rgb(221,13,13)"/><text x="69.7034%" y="239.50"></text></g><g><title>generics_of (472,415 samples, 0.16%)</title><rect x="69.6927%" y="229" width="0.1641%" height="15" fill="rgb(238,131,9)"/><text x="69.9427%" y="239.50"></text></g><g><title>late_bound_vars_map (634,739 samples, 0.22%)</title><rect x="70.0269%" y="181" width="0.2205%" height="15" fill="rgb(211,50,8)"/><text x="70.2769%" y="191.50"></text></g><g><title>resolve_lifetimes (615,929 samples, 0.21%)</title><rect x="70.0334%" y="165" width="0.2140%" height="15" fill="rgb(245,182,24)"/><text x="70.2834%" y="175.50"></text></g><g><title>explicit_predicates_of (957,342 samples, 0.33%)</title><rect x="69.9307%" y="197" width="0.3325%" height="15" fill="rgb(242,14,37)"/><text x="70.1807%" y="207.50"></text></g><g><title>predicates_of (1,411,977 samples, 0.49%)</title><rect x="69.8711%" y="229" width="0.4905%" height="15" fill="rgb(246,228,12)"/><text x="70.1211%" y="239.50"></text></g><g><title>predicates_defined_on (1,344,847 samples, 0.47%)</title><rect x="69.8944%" y="213" width="0.4672%" height="15" fill="rgb(213,55,15)"/><text x="70.1444%" y="223.50"></text></g><g><title>type_collecting (3,123,294 samples, 1.08%)</title><rect x="69.3051%" y="261" width="1.0849%" height="15" fill="rgb(209,9,3)"/><text x="69.5551%" y="271.50"></text></g><g><title>collect_mod_item_types (3,103,994 samples, 1.08%)</title><rect x="69.3118%" y="245" width="1.0782%" height="15" fill="rgb(230,59,30)"/><text x="69.5618%" y="255.50"></text></g><g><title>evaluate_obligation (922,338 samples, 0.32%)</title><rect x="71.5394%" y="229" width="0.3204%" height="15" fill="rgb(209,121,21)"/><text x="71.7894%" y="239.50"></text></g><g><title>implied_outlives_bounds (312,145 samples, 0.11%)</title><rect x="71.8657%" y="229" width="0.1084%" height="15" fill="rgb(220,109,13)"/><text x="72.1157%" y="239.50"></text></g><g><title>param_env (304,094 samples, 0.11%)</title><rect x="71.9741%" y="229" width="0.1056%" height="15" fill="rgb(232,18,1)"/><text x="72.2241%" y="239.50"></text></g><g><title>region_scope_tree (696,316 samples, 0.24%)</title><rect x="72.0941%" y="229" width="0.2419%" height="15" fill="rgb(215,41,42)"/><text x="72.3441%" y="239.50"></text></g><g><title>check_impl_item_well_formed (5,025,647 samples, 1.75%)</title><rect x="70.5914%" y="245" width="1.7457%" height="15" fill="rgb(224,123,36)"/><text x="70.8414%" y="255.50"></text></g><g><title>adt_sized_constraint (420,765 samples, 0.15%)</title><rect x="72.9615%" y="213" width="0.1462%" height="15" fill="rgb(240,125,3)"/><text x="73.2115%" y="223.50"></text></g><g><title>evaluate_obligation (795,237 samples, 0.28%)</title><rect x="72.8434%" y="229" width="0.2762%" height="15" fill="rgb(205,98,50)"/><text x="73.0934%" y="239.50"></text></g><g><title>param_env (360,271 samples, 0.13%)</title><rect x="73.1761%" y="229" width="0.1251%" height="15" fill="rgb(205,185,37)"/><text x="73.4261%" y="239.50"></text></g><g><title>analysis (210,911,785 samples, 73.26%)</title><rect x="0.2494%" y="293" width="73.2636%" height="15" fill="rgb(238,207,15)"/><text x="0.4994%" y="303.50">analysis</text></g><g><title>type_check_crate (163,668,970 samples, 56.85%)</title><rect x="16.6600%" y="277" width="56.8531%" height="15" fill="rgb(213,199,42)"/><text x="16.9100%" y="287.50">type_check_crate</text></g><g><title>wf_checking (8,976,900 samples, 3.12%)</title><rect x="70.3948%" y="261" width="3.1183%" height="15" fill="rgb(235,201,11)"/><text x="70.6448%" y="271.50">wf_..</text></g><g><title>check_item_well_formed (3,385,058 samples, 1.18%)</title><rect x="72.3372%" y="245" width="1.1759%" height="15" fill="rgb(207,46,11)"/><text x="72.5872%" y="255.50"></text></g><g><title>codegen_crate (658,488 samples, 0.23%)</title><rect x="73.5162%" y="293" width="0.2287%" height="15" fill="rgb(241,35,35)"/><text x="73.7662%" y="303.50"></text></g><g><title>metadata_register_crate (7,942,759 samples, 2.76%)</title><rect x="83.4554%" y="245" width="2.7590%" height="15" fill="rgb(243,32,47)"/><text x="83.7054%" y="255.50">me..</text></g><g><title>metadata_register_crate (5,695,071 samples, 1.98%)</title><rect x="84.2362%" y="229" width="1.9783%" height="15" fill="rgb(247,202,23)"/><text x="84.4862%" y="239.50">m..</text></g><g><title>metadata_register_crate (3,926,054 samples, 1.36%)</title><rect x="84.8507%" y="213" width="1.3638%" height="15" fill="rgb(219,102,11)"/><text x="85.1007%" y="223.50"></text></g><g><title>macro_expand_crate (36,137,292 samples, 12.55%)</title><rect x="73.9289%" y="277" width="12.5529%" height="15" fill="rgb(243,110,44)"/><text x="74.1789%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (36,126,322 samples, 12.55%)</title><rect x="73.9327%" y="261" width="12.5491%" height="15" fill="rgb(222,74,54)"/><text x="74.1827%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (769,700 samples, 0.27%)</title><rect x="86.2144%" y="245" width="0.2674%" height="15" fill="rgb(216,99,12)"/><text x="86.4644%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (364,064 samples, 0.13%)</title><rect x="86.4828%" y="277" width="0.1265%" height="15" fill="rgb(226,22,26)"/><text x="86.7328%" y="287.50"></text></g><g><title>late_resolve_crate (2,595,788 samples, 0.90%)</title><rect x="86.7071%" y="261" width="0.9017%" height="15" fill="rgb(217,163,10)"/><text x="86.9571%" y="271.50"></text></g><g><title>configure_and_expand (40,098,345 samples, 13.93%)</title><rect x="73.7449%" y="293" width="13.9288%" height="15" fill="rgb(213,25,53)"/><text x="73.9949%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (3,064,323 samples, 1.06%)</title><rect x="86.6093%" y="277" width="1.0644%" height="15" fill="rgb(252,105,26)"/><text x="86.8593%" y="287.50"></text></g><g><title>early_lint_checks (539,716 samples, 0.19%)</title><rect x="87.7748%" y="293" width="0.1875%" height="15" fill="rgb(220,39,43)"/><text x="88.0248%" y="303.50"></text></g><g><title>free_global_ctxt (4,874,415 samples, 1.69%)</title><rect x="87.9623%" y="293" width="1.6932%" height="15" fill="rgb(229,68,48)"/><text x="88.2123%" y="303.50"></text></g><g><title>is_copy_raw (1,222,312 samples, 0.42%)</title><rect x="96.4570%" y="229" width="0.4246%" height="15" fill="rgb(252,8,32)"/><text x="96.7070%" y="239.50"></text></g><g><title>evaluate_obligation (941,517 samples, 0.33%)</title><rect x="96.5546%" y="213" width="0.3271%" height="15" fill="rgb(223,20,43)"/><text x="96.8046%" y="223.50"></text></g><g><title>needs_drop_raw (1,533,533 samples, 0.53%)</title><rect x="96.3490%" y="245" width="0.5327%" height="15" fill="rgb(229,81,49)"/><text x="96.5990%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,882,031 samples, 3.43%)</title><rect x="93.5569%" y="261" width="3.4327%" height="15" fill="rgb(236,28,36)"/><text x="93.8069%" y="271.50">mir..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (291,932 samples, 0.10%)</title><rect x="96.8881%" y="245" width="0.1014%" height="15" fill="rgb(249,185,26)"/><text x="97.1381%" y="255.50"></text></g><g><title>optimized_mir (17,658,467 samples, 6.13%)</title><rect x="90.8690%" y="277" width="6.1340%" height="15" fill="rgb(249,174,33)"/><text x="91.1190%" y="287.50">optimize..</text></g><g><title>generate_crate_metadata (21,223,266 samples, 7.37%)</title><rect x="89.6555%" y="293" width="7.3722%" height="15" fill="rgb(233,201,37)"/><text x="89.9055%" y="303.50">generate_c..</text></g><g><title>hir_lowering (5,571,932 samples, 1.94%)</title><rect x="97.0278%" y="293" width="1.9355%" height="15" fill="rgb(221,78,26)"/><text x="97.2778%" y="303.50">h..</text></g><g><title>parse_crate (815,639 samples, 0.28%)</title><rect x="98.9904%" y="293" width="0.2833%" height="15" fill="rgb(250,127,30)"/><text x="99.2404%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (1,237,943 samples, 0.43%)</title><rect x="99.3497%" y="293" width="0.4300%" height="15" fill="rgb(230,49,44)"/><text x="99.5997%" y="303.50"></text></g><g><title>all (287,880,702 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (287,880,702 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (562,816 samples, 0.20%)</title><rect x="99.8045%" y="293" width="0.1955%" height="15" fill="rgb(215,43,3)"/><text x="100.0545%" y="303.50"></text></g></svg></svg>