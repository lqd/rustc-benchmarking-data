<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (194,472 samples, 0.27%)</title><rect x="7.1142%" y="117" width="0.2742%" height="15" fill="rgb(227,0,7)"/><text x="7.3642%" y="127.50"></text></g><g><title>item_attrs (102,981 samples, 0.15%)</title><rect x="7.6344%" y="85" width="0.1452%" height="15" fill="rgb(217,0,24)"/><text x="7.8844%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (99,311 samples, 0.14%)</title><rect x="7.6395%" y="69" width="0.1400%" height="15" fill="rgb(221,193,54)"/><text x="7.8895%" y="79.50"></text></g><g><title>codegen_fn_attrs (146,512 samples, 0.21%)</title><rect x="7.5802%" y="101" width="0.2066%" height="15" fill="rgb(248,212,6)"/><text x="7.8302%" y="111.50"></text></g><g><title>is_copy_raw (73,460 samples, 0.10%)</title><rect x="9.0240%" y="53" width="0.1036%" height="15" fill="rgb(208,68,35)"/><text x="9.2740%" y="63.50"></text></g><g><title>adt_drop_tys (191,222 samples, 0.27%)</title><rect x="8.9294%" y="69" width="0.2697%" height="15" fill="rgb(232,128,0)"/><text x="9.1794%" y="79.50"></text></g><g><title>needs_drop_raw (662,206 samples, 0.93%)</title><rect x="8.8693%" y="85" width="0.9338%" height="15" fill="rgb(207,160,47)"/><text x="9.1193%" y="95.50"></text></g><g><title>is_copy_raw (428,393 samples, 0.60%)</title><rect x="9.1991%" y="69" width="0.6041%" height="15" fill="rgb(228,23,34)"/><text x="9.4491%" y="79.50"></text></g><g><title>evaluate_obligation (387,492 samples, 0.55%)</title><rect x="9.2567%" y="53" width="0.5464%" height="15" fill="rgb(218,30,26)"/><text x="9.5067%" y="63.50"></text></g><g><title>trait_impls_of (136,341 samples, 0.19%)</title><rect x="9.6109%" y="37" width="0.1923%" height="15" fill="rgb(220,122,19)"/><text x="9.8609%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (92,091 samples, 0.13%)</title><rect x="9.9856%" y="69" width="0.1299%" height="15" fill="rgb(250,228,42)"/><text x="10.2356%" y="79.50"></text></g><g><title>resolve_instance (322,303 samples, 0.45%)</title><rect x="9.8032%" y="85" width="0.4545%" height="15" fill="rgb(240,193,28)"/><text x="10.0532%" y="95.50"></text></g><g><title>thir_body (224,072 samples, 0.32%)</title><rect x="10.2695%" y="85" width="0.3160%" height="15" fill="rgb(216,20,37)"/><text x="10.5195%" y="95.50"></text></g><g><title>mir_const (2,760,160 samples, 3.89%)</title><rect x="6.7002%" y="133" width="3.8924%" height="15" fill="rgb(206,188,39)"/><text x="6.9502%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (2,272,104 samples, 3.20%)</title><rect x="7.3885%" y="117" width="3.2041%" height="15" fill="rgb(217,207,13)"/><text x="7.6385%" y="127.50">uns..</text></g><g><title>mir_built (1,989,651 samples, 2.81%)</title><rect x="7.7868%" y="101" width="2.8058%" height="15" fill="rgb(231,73,38)"/><text x="8.0368%" y="111.50">mi..</text></g><g><title>mir_promoted (3,236,735 samples, 4.56%)</title><rect x="6.2999%" y="149" width="4.5644%" height="15" fill="rgb(225,20,46)"/><text x="6.5499%" y="159.50">mir_p..</text></g><g><title>mir_const_qualif (192,712 samples, 0.27%)</title><rect x="10.5926%" y="133" width="0.2718%" height="15" fill="rgb(210,31,41)"/><text x="10.8426%" y="143.50"></text></g><g><title>mir_const (140,322 samples, 0.20%)</title><rect x="10.6665%" y="117" width="0.1979%" height="15" fill="rgb(221,200,47)"/><text x="10.9165%" y="127.50"></text></g><g><title>unsafety_check_result (98,261 samples, 0.14%)</title><rect x="10.7258%" y="101" width="0.1386%" height="15" fill="rgb(226,26,5)"/><text x="10.9758%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (214,512 samples, 0.30%)</title><rect x="10.8644%" y="149" width="0.3025%" height="15" fill="rgb(249,33,26)"/><text x="11.1144%" y="159.50"></text></g><g><title>type_op_prove_predicate (753,926 samples, 1.06%)</title><rect x="11.1669%" y="149" width="1.0632%" height="15" fill="rgb(235,183,28)"/><text x="11.4169%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,862,367 samples, 11.09%)</title><rect x="1.1481%" y="181" width="11.0875%" height="15" fill="rgb(221,5,38)"/><text x="1.3981%" y="191.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (7,821,857 samples, 11.03%)</title><rect x="1.2053%" y="165" width="11.0303%" height="15" fill="rgb(247,18,42)"/><text x="1.4553%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (119,781 samples, 0.17%)</title><rect x="12.2356%" y="181" width="0.1689%" height="15" fill="rgb(241,131,45)"/><text x="12.4856%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (98,001 samples, 0.14%)</title><rect x="12.2663%" y="165" width="0.1382%" height="15" fill="rgb(249,31,29)"/><text x="12.5163%" y="175.50"></text></g><g><title>hir_module_items (148,132 samples, 0.21%)</title><rect x="12.4045%" y="181" width="0.2089%" height="15" fill="rgb(225,111,53)"/><text x="12.6545%" y="191.50"></text></g><g><title>get_lang_items (84,481 samples, 0.12%)</title><rect x="13.1744%" y="101" width="0.1191%" height="15" fill="rgb(238,160,17)"/><text x="13.4244%" y="111.50"></text></g><g><title>item_attrs (184,161 samples, 0.26%)</title><rect x="13.2935%" y="101" width="0.2597%" height="15" fill="rgb(214,148,48)"/><text x="13.5435%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (172,401 samples, 0.24%)</title><rect x="13.3101%" y="85" width="0.2431%" height="15" fill="rgb(232,36,49)"/><text x="13.5601%" y="95.50"></text></g><g><title>codegen_fn_attrs (413,144 samples, 0.58%)</title><rect x="13.1035%" y="117" width="0.5826%" height="15" fill="rgb(209,103,24)"/><text x="13.3535%" y="127.50"></text></g><g><title>codegen_fn_attrs (591,617 samples, 0.83%)</title><rect x="12.8603%" y="149" width="0.8343%" height="15" fill="rgb(229,88,8)"/><text x="13.1103%" y="159.50"></text></g><g><title>should_inherit_track_caller (536,945 samples, 0.76%)</title><rect x="12.9374%" y="133" width="0.7572%" height="15" fill="rgb(213,181,19)"/><text x="13.1874%" y="143.50"></text></g><g><title>check_mod_attrs (736,478 samples, 1.04%)</title><rect x="12.6566%" y="165" width="1.0386%" height="15" fill="rgb(254,191,54)"/><text x="12.9066%" y="175.50"></text></g><g><title>check_mod_const_bodies (87,661 samples, 0.12%)</title><rect x="13.6952%" y="165" width="0.1236%" height="15" fill="rgb(241,83,37)"/><text x="13.9452%" y="175.50"></text></g><g><title>lint_levels (76,930 samples, 0.11%)</title><rect x="14.1165%" y="149" width="0.1085%" height="15" fill="rgb(233,36,39)"/><text x="14.3665%" y="159.50"></text></g><g><title>lookup_deprecation_entry (133,872 samples, 0.19%)</title><rect x="14.2249%" y="149" width="0.1888%" height="15" fill="rgb(226,3,54)"/><text x="14.4749%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (472,665 samples, 0.67%)</title><rect x="13.8810%" y="165" width="0.6665%" height="15" fill="rgb(245,192,40)"/><text x="14.1310%" y="175.50"></text></g><g><title>misc_checking_1 (1,411,125 samples, 1.99%)</title><rect x="12.6142%" y="181" width="1.9900%" height="15" fill="rgb(238,167,29)"/><text x="12.8642%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (139,632 samples, 0.20%)</title><rect x="14.6062%" y="165" width="0.1969%" height="15" fill="rgb(232,182,51)"/><text x="14.8562%" y="175.50"></text></g><g><title>check_mod_liveness (112,232 samples, 0.16%)</title><rect x="14.6448%" y="149" width="0.1583%" height="15" fill="rgb(231,60,39)"/><text x="14.8948%" y="159.50"></text></g><g><title>misc_checking_2 (296,763 samples, 0.42%)</title><rect x="14.6041%" y="181" width="0.4185%" height="15" fill="rgb(208,69,12)"/><text x="14.8541%" y="191.50"></text></g><g><title>match_checking (155,671 samples, 0.22%)</title><rect x="14.8031%" y="165" width="0.2195%" height="15" fill="rgb(235,93,37)"/><text x="15.0531%" y="175.50"></text></g><g><title>check_match (144,841 samples, 0.20%)</title><rect x="14.8184%" y="149" width="0.2043%" height="15" fill="rgb(213,116,39)"/><text x="15.0684%" y="159.50"></text></g><g><title>check_private_in_public (76,681 samples, 0.11%)</title><rect x="15.0348%" y="165" width="0.1081%" height="15" fill="rgb(222,207,29)"/><text x="15.2848%" y="175.50"></text></g><g><title>death_checking (139,881 samples, 0.20%)</title><rect x="15.1429%" y="165" width="0.1973%" height="15" fill="rgb(206,96,30)"/><text x="15.3929%" y="175.50"></text></g><g><title>eval_to_const_value_raw (140,432 samples, 0.20%)</title><rect x="15.9827%" y="133" width="0.1980%" height="15" fill="rgb(218,138,4)"/><text x="16.2327%" y="143.50"></text></g><g><title>eval_to_const_value_raw (132,622 samples, 0.19%)</title><rect x="15.9937%" y="117" width="0.1870%" height="15" fill="rgb(250,191,14)"/><text x="16.2437%" y="127.50"></text></g><g><title>eval_to_allocation_raw (127,442 samples, 0.18%)</title><rect x="16.0010%" y="101" width="0.1797%" height="15" fill="rgb(239,60,40)"/><text x="16.2510%" y="111.50"></text></g><g><title>crate_lints (1,684,828 samples, 2.38%)</title><rect x="15.3426%" y="149" width="2.3759%" height="15" fill="rgb(206,27,48)"/><text x="15.5926%" y="159.50">cr..</text></g><g><title>type_of (1,035,374 samples, 1.46%)</title><rect x="16.2584%" y="133" width="1.4601%" height="15" fill="rgb(225,35,8)"/><text x="16.5084%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (802,281 samples, 1.13%)</title><rect x="16.5872%" y="117" width="1.1314%" height="15" fill="rgb(250,213,24)"/><text x="16.8372%" y="127.50"></text></g><g><title>lint_checking (1,787,109 samples, 2.52%)</title><rect x="15.3402%" y="165" width="2.5202%" height="15" fill="rgb(247,123,22)"/><text x="15.5902%" y="175.50">li..</text></g><g><title>module_lints (100,591 samples, 0.14%)</title><rect x="17.7185%" y="149" width="0.1419%" height="15" fill="rgb(231,138,38)"/><text x="17.9685%" y="159.50"></text></g><g><title>lint_mod (98,401 samples, 0.14%)</title><rect x="17.7216%" y="133" width="0.1388%" height="15" fill="rgb(231,145,46)"/><text x="17.9716%" y="143.50"></text></g><g><title>privacy_access_levels (92,721 samples, 0.13%)</title><rect x="17.8604%" y="165" width="0.1308%" height="15" fill="rgb(251,118,11)"/><text x="18.1104%" y="175.50"></text></g><g><title>privacy_checking_modules (257,143 samples, 0.36%)</title><rect x="17.9911%" y="165" width="0.3626%" height="15" fill="rgb(217,147,25)"/><text x="18.2411%" y="175.50"></text></g><g><title>check_mod_privacy (255,783 samples, 0.36%)</title><rect x="17.9930%" y="149" width="0.3607%" height="15" fill="rgb(247,81,37)"/><text x="18.2430%" y="159.50"></text></g><g><title>misc_checking_3 (2,371,926 samples, 3.34%)</title><rect x="15.0226%" y="181" width="3.3449%" height="15" fill="rgb(209,12,38)"/><text x="15.2726%" y="191.50">mis..</text></g><g><title>impl_parent (1,893,727 samples, 2.67%)</title><rect x="23.5060%" y="117" width="2.6705%" height="15" fill="rgb(227,1,9)"/><text x="23.7560%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,062,314 samples, 1.50%)</title><rect x="24.6784%" y="101" width="1.4981%" height="15" fill="rgb(248,47,43)"/><text x="24.9284%" y="111.50"></text></g><g><title>impl_trait_ref (6,521,627 samples, 9.20%)</title><rect x="26.1765%" y="117" width="9.1968%" height="15" fill="rgb(221,10,30)"/><text x="26.4265%" y="127.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,675,270 samples, 8.00%)</title><rect x="27.3700%" y="101" width="8.0032%" height="15" fill="rgb(210,229,1)"/><text x="27.6200%" y="111.50">metadata_de..</text></g><g><title>trait_impls_of (752,888 samples, 1.06%)</title><rect x="35.4212%" y="117" width="1.0617%" height="15" fill="rgb(222,148,37)"/><text x="35.6712%" y="127.50"></text></g><g><title>implementations_of_trait (210,323 samples, 0.30%)</title><rect x="36.1863%" y="101" width="0.2966%" height="15" fill="rgb(234,67,33)"/><text x="36.4363%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (146,810 samples, 0.21%)</title><rect x="36.2759%" y="85" width="0.2070%" height="15" fill="rgb(247,98,35)"/><text x="36.5259%" y="95.50"></text></g><g><title>coherent_trait (12,785,871 samples, 18.03%)</title><rect x="18.4541%" y="149" width="18.0305%" height="15" fill="rgb(247,138,52)"/><text x="18.7041%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (12,762,941 samples, 18.00%)</title><rect x="18.4864%" y="133" width="17.9982%" height="15" fill="rgb(213,79,30)"/><text x="18.7364%" y="143.50">specialization_graph_of</text></g><g><title>coherence_checking (12,899,142 samples, 18.19%)</title><rect x="18.4192%" y="165" width="18.1903%" height="15" fill="rgb(246,177,23)"/><text x="18.6692%" y="175.50">coherence_checking</text></g><g><title>associated_item (168,804 samples, 0.24%)</title><rect x="45.2962%" y="101" width="0.2380%" height="15" fill="rgb(230,62,27)"/><text x="45.5462%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (132,022 samples, 0.19%)</title><rect x="45.3481%" y="85" width="0.1862%" height="15" fill="rgb(216,154,8)"/><text x="45.5981%" y="95.50"></text></g><g><title>associated_items (258,854 samples, 0.37%)</title><rect x="45.1889%" y="117" width="0.3650%" height="15" fill="rgb(244,35,45)"/><text x="45.4389%" y="127.50"></text></g><g><title>adt_def (87,561 samples, 0.12%)</title><rect x="45.8780%" y="85" width="0.1235%" height="15" fill="rgb(251,115,12)"/><text x="46.1280%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (86,951 samples, 0.12%)</title><rect x="45.8789%" y="69" width="0.1226%" height="15" fill="rgb(240,54,50)"/><text x="46.1289%" y="79.50"></text></g><g><title>adt_dtorck_constraint (111,451 samples, 0.16%)</title><rect x="46.1248%" y="69" width="0.1572%" height="15" fill="rgb(233,84,52)"/><text x="46.3748%" y="79.50"></text></g><g><title>adt_dtorck_constraint (197,382 samples, 0.28%)</title><rect x="46.0191%" y="85" width="0.2783%" height="15" fill="rgb(207,117,47)"/><text x="46.2691%" y="95.50"></text></g><g><title>dropck_outlives (495,147 samples, 0.70%)</title><rect x="45.6208%" y="117" width="0.6983%" height="15" fill="rgb(249,43,39)"/><text x="45.8708%" y="127.50"></text></g><g><title>adt_dtorck_constraint (345,034 samples, 0.49%)</title><rect x="45.8325%" y="101" width="0.4866%" height="15" fill="rgb(209,38,44)"/><text x="46.0825%" y="111.50"></text></g><g><title>adt_sized_constraint (78,660 samples, 0.11%)</title><rect x="46.8646%" y="101" width="0.1109%" height="15" fill="rgb(236,212,23)"/><text x="47.1146%" y="111.50"></text></g><g><title>predicates_of (81,940 samples, 0.12%)</title><rect x="47.0126%" y="101" width="0.1156%" height="15" fill="rgb(242,79,21)"/><text x="47.2626%" y="111.50"></text></g><g><title>evaluate_obligation (598,435 samples, 0.84%)</title><rect x="46.3191%" y="117" width="0.8439%" height="15" fill="rgb(211,96,35)"/><text x="46.5691%" y="127.50"></text></g><g><title>fn_sig (74,334 samples, 0.10%)</title><rect x="47.1863%" y="117" width="0.1048%" height="15" fill="rgb(253,215,40)"/><text x="47.4363%" y="127.50"></text></g><g><title>item_attrs (108,330 samples, 0.15%)</title><rect x="47.4109%" y="117" width="0.1528%" height="15" fill="rgb(211,81,21)"/><text x="47.6609%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (102,810 samples, 0.14%)</title><rect x="47.4186%" y="101" width="0.1450%" height="15" fill="rgb(208,190,38)"/><text x="47.6686%" y="111.50"></text></g><g><title>method_autoderef_steps (231,681 samples, 0.33%)</title><rect x="47.6263%" y="117" width="0.3267%" height="15" fill="rgb(235,213,38)"/><text x="47.8763%" y="127.50"></text></g><g><title>evaluate_obligation (115,321 samples, 0.16%)</title><rect x="47.7904%" y="101" width="0.1626%" height="15" fill="rgb(237,122,38)"/><text x="48.0404%" y="111.50"></text></g><g><title>object_safety_violations (149,262 samples, 0.21%)</title><rect x="47.9530%" y="117" width="0.2105%" height="15" fill="rgb(244,218,35)"/><text x="48.2030%" y="127.50"></text></g><g><title>predicates_of (163,042 samples, 0.23%)</title><rect x="48.2036%" y="117" width="0.2299%" height="15" fill="rgb(240,68,47)"/><text x="48.4536%" y="127.50"></text></g><g><title>predicates_defined_on (124,531 samples, 0.18%)</title><rect x="48.2579%" y="101" width="0.1756%" height="15" fill="rgb(210,16,53)"/><text x="48.5079%" y="111.50"></text></g><g><title>item_bodies_checking (8,417,212 samples, 11.87%)</title><rect x="36.6668%" y="165" width="11.8699%" height="15" fill="rgb(235,124,12)"/><text x="36.9168%" y="175.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (8,415,322 samples, 11.87%)</title><rect x="36.6694%" y="149" width="11.8672%" height="15" fill="rgb(224,169,11)"/><text x="36.9194%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (8,385,072 samples, 11.82%)</title><rect x="36.7121%" y="133" width="11.8246%" height="15" fill="rgb(250,166,2)"/><text x="36.9621%" y="143.50">typeck</text></g><g><title>impl_parent (80,821 samples, 0.11%)</title><rect x="49.3029%" y="85" width="0.1140%" height="15" fill="rgb(242,216,29)"/><text x="49.5529%" y="95.50"></text></g><g><title>impl_trait_ref (227,654 samples, 0.32%)</title><rect x="49.4168%" y="85" width="0.3210%" height="15" fill="rgb(230,116,27)"/><text x="49.6668%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (196,304 samples, 0.28%)</title><rect x="49.4610%" y="69" width="0.2768%" height="15" fill="rgb(228,99,48)"/><text x="49.7110%" y="79.50"></text></g><g><title>adt_destructor (493,525 samples, 0.70%)</title><rect x="49.1159%" y="133" width="0.6960%" height="15" fill="rgb(253,11,6)"/><text x="49.3659%" y="143.50"></text></g><g><title>coherent_trait (486,685 samples, 0.69%)</title><rect x="49.1255%" y="117" width="0.6863%" height="15" fill="rgb(247,143,39)"/><text x="49.3755%" y="127.50"></text></g><g><title>specialization_graph_of (484,305 samples, 0.68%)</title><rect x="49.1289%" y="101" width="0.6830%" height="15" fill="rgb(236,97,10)"/><text x="49.3789%" y="111.50"></text></g><g><title>generics_of (347,845 samples, 0.49%)</title><rect x="52.0972%" y="101" width="0.4905%" height="15" fill="rgb(233,208,19)"/><text x="52.3472%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (261,064 samples, 0.37%)</title><rect x="52.2195%" y="85" width="0.3682%" height="15" fill="rgb(216,164,2)"/><text x="52.4695%" y="95.50"></text></g><g><title>impl_trait_ref (879,269 samples, 1.24%)</title><rect x="52.6500%" y="101" width="1.2399%" height="15" fill="rgb(220,129,5)"/><text x="52.9000%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (436,665 samples, 0.62%)</title><rect x="53.2741%" y="85" width="0.6158%" height="15" fill="rgb(242,17,10)"/><text x="53.5241%" y="95.50"></text></g><g><title>predicates_of (122,492 samples, 0.17%)</title><rect x="53.9063%" y="101" width="0.1727%" height="15" fill="rgb(242,107,0)"/><text x="54.1563%" y="111.50"></text></g><g><title>predicates_defined_on (75,992 samples, 0.11%)</title><rect x="53.9719%" y="85" width="0.1072%" height="15" fill="rgb(251,28,31)"/><text x="54.2219%" y="95.50"></text></g><g><title>specializes (529,276 samples, 0.75%)</title><rect x="54.0790%" y="101" width="0.7464%" height="15" fill="rgb(233,223,10)"/><text x="54.3290%" y="111.50"></text></g><g><title>param_env (388,935 samples, 0.55%)</title><rect x="54.2769%" y="85" width="0.5485%" height="15" fill="rgb(215,21,27)"/><text x="54.5269%" y="95.50"></text></g><g><title>def_span (273,375 samples, 0.39%)</title><rect x="54.4399%" y="69" width="0.3855%" height="15" fill="rgb(232,23,21)"/><text x="54.6899%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (260,635 samples, 0.37%)</title><rect x="54.4579%" y="53" width="0.3675%" height="15" fill="rgb(244,5,23)"/><text x="54.7079%" y="63.50"></text></g><g><title>evaluate_obligation (2,908,203 samples, 4.10%)</title><rect x="50.8423%" y="117" width="4.1011%" height="15" fill="rgb(226,81,46)"/><text x="51.0923%" y="127.50">eval..</text></g><g><title>item_types_checking (4,712,483 samples, 6.65%)</title><rect x="48.5367%" y="165" width="6.6455%" height="15" fill="rgb(247,70,30)"/><text x="48.7867%" y="175.50">item_type..</text></g><g><title>check_mod_item_types (4,708,423 samples, 6.64%)</title><rect x="48.5424%" y="149" width="6.6398%" height="15" fill="rgb(212,68,19)"/><text x="48.7924%" y="159.50">check_mod..</text></g><g><title>typeck (3,695,881 samples, 5.21%)</title><rect x="49.9703%" y="133" width="5.2119%" height="15" fill="rgb(240,187,13)"/><text x="50.2203%" y="143.50">typeck</text></g><g><title>fn_sig (250,621 samples, 0.35%)</title><rect x="55.4940%" y="133" width="0.3534%" height="15" fill="rgb(223,113,26)"/><text x="55.7440%" y="143.50"></text></g><g><title>type_of (75,651 samples, 0.11%)</title><rect x="55.7407%" y="117" width="0.1067%" height="15" fill="rgb(206,192,2)"/><text x="55.9907%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (71,531 samples, 0.10%)</title><rect x="55.7465%" y="101" width="0.1009%" height="15" fill="rgb(241,108,4)"/><text x="55.9965%" y="111.50"></text></g><g><title>generics_of (172,023 samples, 0.24%)</title><rect x="55.8474%" y="133" width="0.2426%" height="15" fill="rgb(247,173,49)"/><text x="56.0974%" y="143.50"></text></g><g><title>late_bound_vars_map (321,872 samples, 0.45%)</title><rect x="56.6074%" y="85" width="0.4539%" height="15" fill="rgb(224,114,35)"/><text x="56.8574%" y="95.50"></text></g><g><title>resolve_lifetimes (297,962 samples, 0.42%)</title><rect x="56.6411%" y="69" width="0.4202%" height="15" fill="rgb(245,159,27)"/><text x="56.8911%" y="79.50"></text></g><g><title>explicit_predicates_of (541,286 samples, 0.76%)</title><rect x="56.3141%" y="101" width="0.7633%" height="15" fill="rgb(245,172,44)"/><text x="56.5641%" y="111.50"></text></g><g><title>predicates_of (890,091 samples, 1.26%)</title><rect x="56.1629%" y="133" width="1.2552%" height="15" fill="rgb(236,23,11)"/><text x="56.4129%" y="143.50"></text></g><g><title>predicates_defined_on (850,819 samples, 1.20%)</title><rect x="56.2183%" y="117" width="1.1998%" height="15" fill="rgb(205,117,38)"/><text x="56.4683%" y="127.50"></text></g><g><title>inferred_outlives_of (241,532 samples, 0.34%)</title><rect x="57.0775%" y="101" width="0.3406%" height="15" fill="rgb(237,72,25)"/><text x="57.3275%" y="111.50"></text></g><g><title>inferred_outlives_crate (223,172 samples, 0.31%)</title><rect x="57.1034%" y="85" width="0.3147%" height="15" fill="rgb(244,70,9)"/><text x="57.3534%" y="95.50"></text></g><g><title>type_of (94,481 samples, 0.13%)</title><rect x="57.2848%" y="69" width="0.1332%" height="15" fill="rgb(217,125,39)"/><text x="57.5348%" y="79.50"></text></g><g><title>type_collecting (1,703,479 samples, 2.40%)</title><rect x="55.1837%" y="165" width="2.4022%" height="15" fill="rgb(235,36,10)"/><text x="55.4337%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (1,693,619 samples, 2.39%)</title><rect x="55.1976%" y="149" width="2.3883%" height="15" fill="rgb(251,123,47)"/><text x="55.4476%" y="159.50">co..</text></g><g><title>type_of (119,040 samples, 0.17%)</title><rect x="57.4181%" y="133" width="0.1679%" height="15" fill="rgb(221,13,13)"/><text x="57.6681%" y="143.50"></text></g><g><title>evaluate_obligation (712,607 samples, 1.00%)</title><rect x="61.0133%" y="133" width="1.0049%" height="15" fill="rgb(238,131,9)"/><text x="61.2633%" y="143.50"></text></g><g><title>implied_outlives_bounds (417,132 samples, 0.59%)</title><rect x="62.0182%" y="133" width="0.5882%" height="15" fill="rgb(211,50,8)"/><text x="62.2682%" y="143.50"></text></g><g><title>param_env (303,394 samples, 0.43%)</title><rect x="62.6064%" y="133" width="0.4278%" height="15" fill="rgb(245,182,24)"/><text x="62.8564%" y="143.50"></text></g><g><title>predicates_of (76,631 samples, 0.11%)</title><rect x="63.0343%" y="133" width="0.1081%" height="15" fill="rgb(242,14,37)"/><text x="63.2843%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,997,175 samples, 5.64%)</title><rect x="57.8130%" y="149" width="5.6368%" height="15" fill="rgb(246,228,12)"/><text x="58.0630%" y="159.50">check_i..</text></g><g><title>region_scope_tree (218,043 samples, 0.31%)</title><rect x="63.1423%" y="133" width="0.3075%" height="15" fill="rgb(213,55,15)"/><text x="63.3923%" y="143.50"></text></g><g><title>adt_sized_constraint (74,051 samples, 0.10%)</title><rect x="65.6463%" y="85" width="0.1044%" height="15" fill="rgb(209,9,3)"/><text x="65.8963%" y="95.50"></text></g><g><title>adt_sized_constraint (100,191 samples, 0.14%)</title><rect x="65.6227%" y="101" width="0.1413%" height="15" fill="rgb(230,59,30)"/><text x="65.8727%" y="111.50"></text></g><g><title>adt_sized_constraint (164,041 samples, 0.23%)</title><rect x="65.5370%" y="117" width="0.2313%" height="15" fill="rgb(209,121,21)"/><text x="65.7870%" y="127.50"></text></g><g><title>adt_sized_constraint (229,501 samples, 0.32%)</title><rect x="65.4473%" y="133" width="0.3236%" height="15" fill="rgb(220,109,13)"/><text x="65.6973%" y="143.50"></text></g><g><title>evaluate_obligation (82,421 samples, 0.12%)</title><rect x="65.7709%" y="133" width="0.1162%" height="15" fill="rgb(232,18,1)"/><text x="66.0209%" y="143.50"></text></g><g><title>implied_outlives_bounds (97,862 samples, 0.14%)</title><rect x="65.9033%" y="133" width="0.1380%" height="15" fill="rgb(215,41,42)"/><text x="66.1533%" y="143.50"></text></g><g><title>param_env (311,654 samples, 0.44%)</title><rect x="66.0413%" y="133" width="0.4395%" height="15" fill="rgb(224,123,36)"/><text x="66.2913%" y="143.50"></text></g><g><title>predicates_of (92,621 samples, 0.13%)</title><rect x="66.4808%" y="133" width="0.1306%" height="15" fill="rgb(240,125,3)"/><text x="66.7308%" y="143.50"></text></g><g><title>analysis (46,789,087 samples, 65.98%)</title><rect x="0.8374%" y="197" width="65.9816%" height="15" fill="rgb(205,98,50)"/><text x="1.0874%" y="207.50">analysis</text></g><g><title>type_check_crate (34,358,070 samples, 48.45%)</title><rect x="18.3675%" y="181" width="48.4515%" height="15" fill="rgb(205,185,37)"/><text x="18.6175%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,545,252 samples, 9.23%)</title><rect x="57.5890%" y="165" width="9.2301%" height="15" fill="rgb(238,207,15)"/><text x="57.8390%" y="175.50">wf_checking</text></g><g><title>check_item_well_formed (2,389,196 samples, 3.37%)</title><rect x="63.4498%" y="149" width="3.3692%" height="15" fill="rgb(213,199,42)"/><text x="63.6998%" y="159.50">che..</text></g><g><title>variances_of (103,932 samples, 0.15%)</title><rect x="66.6725%" y="133" width="0.1466%" height="15" fill="rgb(235,201,11)"/><text x="66.9225%" y="143.50"></text></g><g><title>crate_variances (98,172 samples, 0.14%)</title><rect x="66.6806%" y="117" width="0.1384%" height="15" fill="rgb(207,46,11)"/><text x="66.9306%" y="127.50"></text></g><g><title>codegen_crate (368,434 samples, 0.52%)</title><rect x="66.8334%" y="197" width="0.5196%" height="15" fill="rgb(241,35,35)"/><text x="67.0834%" y="207.50"></text></g><g><title>AST_validation (80,361 samples, 0.11%)</title><rect x="67.6231%" y="181" width="0.1133%" height="15" fill="rgb(243,32,47)"/><text x="67.8731%" y="191.50"></text></g><g><title>metadata_load_macro (75,441 samples, 0.11%)</title><rect x="80.9370%" y="149" width="0.1064%" height="15" fill="rgb(247,202,23)"/><text x="81.1870%" y="159.50"></text></g><g><title>macro_expand_crate (11,687,949 samples, 16.48%)</title><rect x="67.8807%" y="181" width="16.4823%" height="15" fill="rgb(219,102,11)"/><text x="68.1307%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (11,674,149 samples, 16.46%)</title><rect x="67.9002%" y="165" width="16.4628%" height="15" fill="rgb(243,110,44)"/><text x="68.1502%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,353,986 samples, 3.32%)</title><rect x="81.0434%" y="149" width="3.3196%" height="15" fill="rgb(222,74,54)"/><text x="81.2934%" y="159.50">met..</text></g><g><title>metadata_register_crate (872,219 samples, 1.23%)</title><rect x="83.1330%" y="133" width="1.2300%" height="15" fill="rgb(216,99,12)"/><text x="83.3830%" y="143.50"></text></g><g><title>metadata_register_crate (71,330 samples, 0.10%)</title><rect x="84.2624%" y="117" width="0.1006%" height="15" fill="rgb(226,22,26)"/><text x="84.5124%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (127,291 samples, 0.18%)</title><rect x="84.3690%" y="181" width="0.1795%" height="15" fill="rgb(217,163,10)"/><text x="84.6190%" y="191.50"></text></g><g><title>late_resolve_crate (1,726,939 samples, 2.44%)</title><rect x="84.6602%" y="165" width="2.4353%" height="15" fill="rgb(213,25,53)"/><text x="84.9102%" y="175.50">la..</text></g><g><title>configure_and_expand (14,074,456 samples, 19.85%)</title><rect x="67.3530%" y="197" width="19.8477%" height="15" fill="rgb(252,105,26)"/><text x="67.6030%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,880,731 samples, 2.65%)</title><rect x="84.5485%" y="181" width="2.6522%" height="15" fill="rgb(220,39,43)"/><text x="84.7985%" y="191.50">re..</text></g><g><title>drop_ast (115,911 samples, 0.16%)</title><rect x="87.2007%" y="197" width="0.1635%" height="15" fill="rgb(229,68,48)"/><text x="87.4507%" y="207.50"></text></g><g><title>early_lint_checks (223,353 samples, 0.31%)</title><rect x="87.3848%" y="197" width="0.3150%" height="15" fill="rgb(252,8,32)"/><text x="87.6348%" y="207.50"></text></g><g><title>free_global_ctxt (2,867,552 samples, 4.04%)</title><rect x="87.6998%" y="197" width="4.0438%" height="15" fill="rgb(223,20,43)"/><text x="87.9498%" y="207.50">free..</text></g><g><title>generate_crate_metadata (628,777 samples, 0.89%)</title><rect x="91.7436%" y="197" width="0.8867%" height="15" fill="rgb(229,81,49)"/><text x="91.9936%" y="207.50"></text></g><g><title>hir_lowering (1,731,939 samples, 2.44%)</title><rect x="92.6303%" y="197" width="2.4424%" height="15" fill="rgb(236,28,36)"/><text x="92.8803%" y="207.50">hi..</text></g><g><title>parse_crate (2,240,435 samples, 3.16%)</title><rect x="95.1293%" y="197" width="3.1594%" height="15" fill="rgb(249,185,26)"/><text x="95.3793%" y="207.50">par..</text></g><g><title>prepare_outputs (283,723 samples, 0.40%)</title><rect x="98.3011%" y="197" width="0.4001%" height="15" fill="rgb(249,174,33)"/><text x="98.5511%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (496,945 samples, 0.70%)</title><rect x="98.7012%" y="197" width="0.7008%" height="15" fill="rgb(233,201,37)"/><text x="98.9512%" y="207.50"></text></g><g><title>setup_global_ctxt (121,081 samples, 0.17%)</title><rect x="99.4160%" y="197" width="0.1707%" height="15" fill="rgb(221,78,26)"/><text x="99.6660%" y="207.50"></text></g><g><title>all (70,912,274 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (70,912,274 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (293,024 samples, 0.41%)</title><rect x="99.5868%" y="197" width="0.4132%" height="15" fill="rgb(229,67,23)"/><text x="99.8368%" y="207.50"></text></g></svg></svg>