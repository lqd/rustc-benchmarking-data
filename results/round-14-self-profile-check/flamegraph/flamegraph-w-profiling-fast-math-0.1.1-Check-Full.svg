<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (98,941 samples, 0.15%)</title><rect x="6.0089%" y="101" width="0.1492%" height="15" fill="rgb(227,0,7)"/><text x="6.2589%" y="111.50"></text></g><g><title>item_attrs (98,450 samples, 0.15%)</title><rect x="6.3964%" y="69" width="0.1485%" height="15" fill="rgb(217,0,24)"/><text x="6.6464%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,390 samples, 0.14%)</title><rect x="6.4010%" y="53" width="0.1439%" height="15" fill="rgb(221,193,54)"/><text x="6.6510%" y="63.50"></text></g><g><title>codegen_fn_attrs (139,480 samples, 0.21%)</title><rect x="6.3394%" y="85" width="0.2104%" height="15" fill="rgb(248,212,6)"/><text x="6.5894%" y="95.50"></text></g><g><title>resolve_instance (83,450 samples, 0.13%)</title><rect x="7.7425%" y="69" width="0.1259%" height="15" fill="rgb(208,68,35)"/><text x="7.9925%" y="79.50"></text></g><g><title>thir_body (347,504 samples, 0.52%)</title><rect x="7.8792%" y="69" width="0.5241%" height="15" fill="rgb(232,128,0)"/><text x="8.1292%" y="79.50"></text></g><g><title>mir_const (1,880,316 samples, 2.84%)</title><rect x="5.5793%" y="117" width="2.8359%" height="15" fill="rgb(207,160,47)"/><text x="5.8293%" y="127.50">mi..</text></g><g><title>unsafety_check_result (1,496,502 samples, 2.26%)</title><rect x="6.1581%" y="101" width="2.2571%" height="15" fill="rgb(228,23,34)"/><text x="6.4081%" y="111.50">u..</text></g><g><title>mir_built (1,236,818 samples, 1.87%)</title><rect x="6.5498%" y="85" width="1.8654%" height="15" fill="rgb(218,30,26)"/><text x="6.7998%" y="95.50">m..</text></g><g><title>thir_body (89,441 samples, 0.13%)</title><rect x="8.8087%" y="53" width="0.1349%" height="15" fill="rgb(220,122,19)"/><text x="9.0587%" y="63.50"></text></g><g><title>mir_promoted (2,506,682 samples, 3.78%)</title><rect x="5.1666%" y="133" width="3.7806%" height="15" fill="rgb(250,228,42)"/><text x="5.4166%" y="143.50">mir_..</text></g><g><title>mir_const_qualif (352,743 samples, 0.53%)</title><rect x="8.4152%" y="117" width="0.5320%" height="15" fill="rgb(240,193,28)"/><text x="8.6652%" y="127.50"></text></g><g><title>mir_const (280,443 samples, 0.42%)</title><rect x="8.5242%" y="101" width="0.4230%" height="15" fill="rgb(216,20,37)"/><text x="8.7742%" y="111.50"></text></g><g><title>unsafety_check_result (217,053 samples, 0.33%)</title><rect x="8.6198%" y="85" width="0.3274%" height="15" fill="rgb(206,188,39)"/><text x="8.8698%" y="95.50"></text></g><g><title>mir_built (196,323 samples, 0.30%)</title><rect x="8.6511%" y="69" width="0.2961%" height="15" fill="rgb(217,207,13)"/><text x="8.9011%" y="79.50"></text></g><g><title>type_op_ascribe_user_type (81,331 samples, 0.12%)</title><rect x="8.9472%" y="133" width="0.1227%" height="15" fill="rgb(231,73,38)"/><text x="9.1972%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,262,828 samples, 7.94%)</title><rect x="1.2905%" y="165" width="7.9375%" height="15" fill="rgb(225,20,46)"/><text x="1.5405%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (5,215,278 samples, 7.87%)</title><rect x="1.3622%" y="149" width="7.8658%" height="15" fill="rgb(210,31,41)"/><text x="1.6122%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (218,183 samples, 0.33%)</title><rect x="9.2280%" y="165" width="0.3291%" height="15" fill="rgb(221,200,47)"/><text x="9.4780%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (190,423 samples, 0.29%)</title><rect x="9.2699%" y="149" width="0.2872%" height="15" fill="rgb(226,26,5)"/><text x="9.5199%" y="159.50"></text></g><g><title>hir_module_items (164,692 samples, 0.25%)</title><rect x="9.5571%" y="165" width="0.2484%" height="15" fill="rgb(249,33,26)"/><text x="9.8071%" y="175.50"></text></g><g><title>should_inherit_track_caller (88,281 samples, 0.13%)</title><rect x="10.3205%" y="117" width="0.1331%" height="15" fill="rgb(235,183,28)"/><text x="10.5705%" y="127.50"></text></g><g><title>codegen_fn_attrs (250,413 samples, 0.38%)</title><rect x="10.1227%" y="133" width="0.3777%" height="15" fill="rgb(221,5,38)"/><text x="10.3727%" y="143.50"></text></g><g><title>check_mod_attrs (423,295 samples, 0.64%)</title><rect x="9.8622%" y="149" width="0.6384%" height="15" fill="rgb(247,18,42)"/><text x="10.1122%" y="159.50"></text></g><g><title>check_mod_const_bodies (88,851 samples, 0.13%)</title><rect x="10.5006%" y="149" width="0.1340%" height="15" fill="rgb(241,131,45)"/><text x="10.7506%" y="159.50"></text></g><g><title>lint_levels (85,721 samples, 0.13%)</title><rect x="10.9531%" y="133" width="0.1293%" height="15" fill="rgb(249,31,29)"/><text x="11.2031%" y="143.50"></text></g><g><title>lookup_deprecation_entry (112,301 samples, 0.17%)</title><rect x="11.0823%" y="133" width="0.1694%" height="15" fill="rgb(225,111,53)"/><text x="11.3323%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (403,035 samples, 0.61%)</title><rect x="10.7154%" y="149" width="0.6079%" height="15" fill="rgb(238,160,17)"/><text x="10.9654%" y="159.50"></text></g><g><title>looking_for_derive_registrar (72,470 samples, 0.11%)</title><rect x="11.3264%" y="149" width="0.1093%" height="15" fill="rgb(214,148,48)"/><text x="11.5764%" y="159.50"></text></g><g><title>misc_checking_1 (1,084,422 samples, 1.64%)</title><rect x="9.8061%" y="165" width="1.6355%" height="15" fill="rgb(232,36,49)"/><text x="10.0561%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (154,432 samples, 0.23%)</title><rect x="11.4436%" y="149" width="0.2329%" height="15" fill="rgb(209,103,24)"/><text x="11.6936%" y="159.50"></text></g><g><title>check_mod_liveness (117,852 samples, 0.18%)</title><rect x="11.4988%" y="133" width="0.1777%" height="15" fill="rgb(229,88,8)"/><text x="11.7488%" y="143.50"></text></g><g><title>misc_checking_2 (319,324 samples, 0.48%)</title><rect x="11.4417%" y="165" width="0.4816%" height="15" fill="rgb(213,181,19)"/><text x="11.6917%" y="175.50"></text></g><g><title>match_checking (163,592 samples, 0.25%)</title><rect x="11.6765%" y="149" width="0.2467%" height="15" fill="rgb(254,191,54)"/><text x="11.9265%" y="159.50"></text></g><g><title>check_match (150,842 samples, 0.23%)</title><rect x="11.6958%" y="133" width="0.2275%" height="15" fill="rgb(241,83,37)"/><text x="11.9458%" y="143.50"></text></g><g><title>death_checking (172,962 samples, 0.26%)</title><rect x="12.0221%" y="149" width="0.2609%" height="15" fill="rgb(233,36,39)"/><text x="12.2721%" y="159.50"></text></g><g><title>mir_for_ctfe (88,231 samples, 0.13%)</title><rect x="12.8287%" y="69" width="0.1331%" height="15" fill="rgb(226,3,54)"/><text x="13.0787%" y="79.50"></text></g><g><title>eval_to_const_value_raw (310,495 samples, 0.47%)</title><rect x="12.5345%" y="117" width="0.4683%" height="15" fill="rgb(245,192,40)"/><text x="12.7845%" y="127.50"></text></g><g><title>eval_to_const_value_raw (298,145 samples, 0.45%)</title><rect x="12.5532%" y="101" width="0.4497%" height="15" fill="rgb(238,167,29)"/><text x="12.8032%" y="111.50"></text></g><g><title>eval_to_allocation_raw (283,164 samples, 0.43%)</title><rect x="12.5758%" y="85" width="0.4271%" height="15" fill="rgb(232,182,51)"/><text x="12.8258%" y="95.50"></text></g><g><title>param_env (193,942 samples, 0.29%)</title><rect x="13.0028%" y="117" width="0.2925%" height="15" fill="rgb(231,60,39)"/><text x="13.2528%" y="127.50"></text></g><g><title>predicates_of (97,141 samples, 0.15%)</title><rect x="13.1488%" y="101" width="0.1465%" height="15" fill="rgb(208,69,12)"/><text x="13.3988%" y="111.50"></text></g><g><title>predicates_defined_on (82,291 samples, 0.12%)</title><rect x="13.1712%" y="85" width="0.1241%" height="15" fill="rgb(235,93,37)"/><text x="13.4212%" y="95.50"></text></g><g><title>crate_lints (672,748 samples, 1.01%)</title><rect x="12.2850%" y="133" width="1.0147%" height="15" fill="rgb(213,116,39)"/><text x="12.5350%" y="143.50"></text></g><g><title>lint_checking (796,429 samples, 1.20%)</title><rect x="12.2830%" y="149" width="1.2012%" height="15" fill="rgb(222,207,29)"/><text x="12.5330%" y="159.50"></text></g><g><title>module_lints (122,341 samples, 0.18%)</title><rect x="13.2997%" y="133" width="0.1845%" height="15" fill="rgb(206,96,30)"/><text x="13.5497%" y="143.50"></text></g><g><title>lint_mod (118,791 samples, 0.18%)</title><rect x="13.3050%" y="117" width="0.1792%" height="15" fill="rgb(218,138,4)"/><text x="13.5550%" y="127.50"></text></g><g><title>privacy_checking_modules (123,482 samples, 0.19%)</title><rect x="13.5701%" y="149" width="0.1862%" height="15" fill="rgb(250,191,14)"/><text x="13.8201%" y="159.50"></text></g><g><title>check_mod_privacy (120,722 samples, 0.18%)</title><rect x="13.5743%" y="133" width="0.1821%" height="15" fill="rgb(239,60,40)"/><text x="13.8243%" y="143.50"></text></g><g><title>misc_checking_3 (1,230,824 samples, 1.86%)</title><rect x="11.9233%" y="165" width="1.8564%" height="15" fill="rgb(206,27,48)"/><text x="12.1733%" y="175.50">m..</text></g><g><title>adt_destructor (79,121 samples, 0.12%)</title><rect x="13.9313%" y="117" width="0.1193%" height="15" fill="rgb(225,35,8)"/><text x="14.1813%" y="127.50"></text></g><g><title>param_env (158,602 samples, 0.24%)</title><rect x="14.0507%" y="117" width="0.2392%" height="15" fill="rgb(250,213,24)"/><text x="14.3007%" y="127.50"></text></g><g><title>impl_parent (453,066 samples, 0.68%)</title><rect x="15.5515%" y="101" width="0.6833%" height="15" fill="rgb(247,123,22)"/><text x="15.8015%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (260,031 samples, 0.39%)</title><rect x="15.8427%" y="85" width="0.3922%" height="15" fill="rgb(231,138,38)"/><text x="16.0927%" y="95.50"></text></g><g><title>impl_trait_ref (1,323,152 samples, 2.00%)</title><rect x="16.2349%" y="101" width="1.9956%" height="15" fill="rgb(231,145,46)"/><text x="16.4849%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,122,031 samples, 1.69%)</title><rect x="16.5382%" y="85" width="1.6923%" height="15" fill="rgb(251,118,11)"/><text x="16.7882%" y="95.50"></text></g><g><title>coherent_trait (3,063,374 samples, 4.62%)</title><rect x="13.8802%" y="133" width="4.6202%" height="15" fill="rgb(217,147,25)"/><text x="14.1302%" y="143.50">coher..</text></g><g><title>specialization_graph_of (2,791,720 samples, 4.21%)</title><rect x="14.2899%" y="117" width="4.2105%" height="15" fill="rgb(247,81,37)"/><text x="14.5399%" y="127.50">speci..</text></g><g><title>trait_impls_of (178,981 samples, 0.27%)</title><rect x="18.2305%" y="101" width="0.2699%" height="15" fill="rgb(209,12,38)"/><text x="18.4805%" y="111.50"></text></g><g><title>coherence_checking (3,135,885 samples, 4.73%)</title><rect x="13.8478%" y="149" width="4.7296%" height="15" fill="rgb(227,1,9)"/><text x="14.0978%" y="159.50">cohere..</text></g><g><title>associated_item (349,805 samples, 0.53%)</title><rect x="26.7533%" y="85" width="0.5276%" height="15" fill="rgb(248,47,43)"/><text x="27.0033%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (281,905 samples, 0.43%)</title><rect x="26.8557%" y="69" width="0.4252%" height="15" fill="rgb(221,10,30)"/><text x="27.1057%" y="79.50"></text></g><g><title>associated_items (478,445 samples, 0.72%)</title><rect x="26.6118%" y="101" width="0.7216%" height="15" fill="rgb(210,229,1)"/><text x="26.8618%" y="111.50"></text></g><g><title>generics_of (874,980 samples, 1.32%)</title><rect x="31.8827%" y="85" width="1.3197%" height="15" fill="rgb(222,148,37)"/><text x="32.1327%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (640,340 samples, 0.97%)</title><rect x="32.2365%" y="69" width="0.9658%" height="15" fill="rgb(234,67,33)"/><text x="32.4865%" y="79.50"></text></g><g><title>impl_item_implementor_ids (79,450 samples, 0.12%)</title><rect x="33.2023%" y="85" width="0.1198%" height="15" fill="rgb(247,98,35)"/><text x="33.4523%" y="95.50"></text></g><g><title>associated_items (67,260 samples, 0.10%)</title><rect x="33.2207%" y="69" width="0.1014%" height="15" fill="rgb(247,138,52)"/><text x="33.4707%" y="79.50"></text></g><g><title>impl_trait_ref (1,113,963 samples, 1.68%)</title><rect x="33.4069%" y="85" width="1.6801%" height="15" fill="rgb(213,79,30)"/><text x="33.6569%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (879,700 samples, 1.33%)</title><rect x="33.7602%" y="69" width="1.3268%" height="15" fill="rgb(246,177,23)"/><text x="34.0102%" y="79.50"></text></g><g><title>predicates_of (359,503 samples, 0.54%)</title><rect x="35.1450%" y="85" width="0.5422%" height="15" fill="rgb(230,62,27)"/><text x="35.3950%" y="95.50"></text></g><g><title>predicates_defined_on (201,631 samples, 0.30%)</title><rect x="35.3831%" y="69" width="0.3041%" height="15" fill="rgb(216,154,8)"/><text x="35.6331%" y="79.50"></text></g><g><title>specializes (761,317 samples, 1.15%)</title><rect x="35.6872%" y="85" width="1.1482%" height="15" fill="rgb(244,35,45)"/><text x="35.9372%" y="95.50"></text></g><g><title>param_env (455,915 samples, 0.69%)</title><rect x="36.1478%" y="69" width="0.6876%" height="15" fill="rgb(251,115,12)"/><text x="36.3978%" y="79.50"></text></g><g><title>def_span (164,253 samples, 0.25%)</title><rect x="36.5877%" y="53" width="0.2477%" height="15" fill="rgb(240,54,50)"/><text x="36.8377%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (140,863 samples, 0.21%)</title><rect x="36.6230%" y="37" width="0.2125%" height="15" fill="rgb(233,84,52)"/><text x="36.8730%" y="47.50"></text></g><g><title>trait_impls_of (380,334 samples, 0.57%)</title><rect x="36.8622%" y="85" width="0.5736%" height="15" fill="rgb(207,117,47)"/><text x="37.1122%" y="95.50"></text></g><g><title>implementations_of_trait (139,622 samples, 0.21%)</title><rect x="37.2253%" y="69" width="0.2106%" height="15" fill="rgb(249,43,39)"/><text x="37.4753%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (124,901 samples, 0.19%)</title><rect x="37.2475%" y="53" width="0.1884%" height="15" fill="rgb(209,38,44)"/><text x="37.4975%" y="63.50"></text></g><g><title>evaluate_obligation (6,689,174 samples, 10.09%)</title><rect x="27.4183%" y="101" width="10.0888%" height="15" fill="rgb(236,212,23)"/><text x="27.6683%" y="111.50">evaluate_obliga..</text></g><g><title>generics_of (309,662 samples, 0.47%)</title><rect x="37.6137%" y="101" width="0.4670%" height="15" fill="rgb(242,79,21)"/><text x="37.8637%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (240,531 samples, 0.36%)</title><rect x="37.7180%" y="85" width="0.3628%" height="15" fill="rgb(211,96,35)"/><text x="37.9680%" y="95.50"></text></g><g><title>impl_item_implementor_ids (91,502 samples, 0.14%)</title><rect x="38.0808%" y="101" width="0.1380%" height="15" fill="rgb(253,215,40)"/><text x="38.3308%" y="111.50"></text></g><g><title>associated_items (80,302 samples, 0.12%)</title><rect x="38.0977%" y="85" width="0.1211%" height="15" fill="rgb(211,81,21)"/><text x="38.3477%" y="95.50"></text></g><g><title>impl_trait_ref (174,101 samples, 0.26%)</title><rect x="38.2259%" y="101" width="0.2626%" height="15" fill="rgb(208,190,38)"/><text x="38.4759%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (122,901 samples, 0.19%)</title><rect x="38.3031%" y="85" width="0.1854%" height="15" fill="rgb(235,213,38)"/><text x="38.5531%" y="95.50"></text></g><g><title>method_autoderef_steps (71,021 samples, 0.11%)</title><rect x="38.6045%" y="101" width="0.1071%" height="15" fill="rgb(237,122,38)"/><text x="38.8545%" y="111.50"></text></g><g><title>predicates_of (225,845 samples, 0.34%)</title><rect x="38.7318%" y="101" width="0.3406%" height="15" fill="rgb(244,218,35)"/><text x="38.9818%" y="111.50"></text></g><g><title>predicates_defined_on (132,444 samples, 0.20%)</title><rect x="38.8726%" y="85" width="0.1998%" height="15" fill="rgb(240,68,47)"/><text x="39.1226%" y="95.50"></text></g><g><title>specializes (83,752 samples, 0.13%)</title><rect x="39.0724%" y="101" width="0.1263%" height="15" fill="rgb(210,16,53)"/><text x="39.3224%" y="111.50"></text></g><g><title>item_bodies_checking (13,699,583 samples, 20.66%)</title><rect x="18.6232%" y="149" width="20.6620%" height="15" fill="rgb(235,124,12)"/><text x="18.8732%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,695,913 samples, 20.66%)</title><rect x="18.6287%" y="133" width="20.6565%" height="15" fill="rgb(224,169,11)"/><text x="18.8787%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (13,670,342 samples, 20.62%)</title><rect x="18.6673%" y="117" width="20.6179%" height="15" fill="rgb(250,166,2)"/><text x="18.9173%" y="127.50">typeck</text></g><g><title>generics_of (1,226,726 samples, 1.85%)</title><rect x="49.9131%" y="85" width="1.8502%" height="15" fill="rgb(242,216,29)"/><text x="50.1631%" y="95.50">g..</text></g><g><title>metadata_decode_entry_generics_of (823,140 samples, 1.24%)</title><rect x="50.5218%" y="69" width="1.2415%" height="15" fill="rgb(230,116,27)"/><text x="50.7718%" y="79.50"></text></g><g><title>impl_polarity (219,152 samples, 0.33%)</title><rect x="51.8143%" y="85" width="0.3305%" height="15" fill="rgb(228,99,48)"/><text x="52.0643%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_polarity (85,870 samples, 0.13%)</title><rect x="52.0153%" y="69" width="0.1295%" height="15" fill="rgb(253,11,6)"/><text x="52.2653%" y="79.50"></text></g><g><title>impl_trait_ref (1,946,919 samples, 2.94%)</title><rect x="52.1448%" y="85" width="2.9364%" height="15" fill="rgb(247,143,39)"/><text x="52.3948%" y="95.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,532,823 samples, 2.31%)</title><rect x="52.7694%" y="69" width="2.3118%" height="15" fill="rgb(236,97,10)"/><text x="53.0194%" y="79.50">m..</text></g><g><title>issue33140_self_ty (69,400 samples, 0.10%)</title><rect x="55.0812%" y="85" width="0.1047%" height="15" fill="rgb(233,208,19)"/><text x="55.3312%" y="95.50"></text></g><g><title>opt_def_kind (218,392 samples, 0.33%)</title><rect x="55.7467%" y="69" width="0.3294%" height="15" fill="rgb(216,164,2)"/><text x="55.9967%" y="79.50"></text></g><g><title>metadata_decode_entry_opt_def_kind (92,670 samples, 0.14%)</title><rect x="55.9363%" y="53" width="0.1398%" height="15" fill="rgb(220,129,5)"/><text x="56.1863%" y="63.50"></text></g><g><title>explicit_predicates_of (216,323 samples, 0.33%)</title><rect x="56.5946%" y="53" width="0.3263%" height="15" fill="rgb(242,17,10)"/><text x="56.8446%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (75,542 samples, 0.11%)</title><rect x="56.8070%" y="37" width="0.1139%" height="15" fill="rgb(242,107,0)"/><text x="57.0570%" y="47.50"></text></g><g><title>predicates_of (1,340,492 samples, 2.02%)</title><rect x="55.1928%" y="85" width="2.0218%" height="15" fill="rgb(251,28,31)"/><text x="55.4428%" y="95.50">p..</text></g><g><title>predicates_defined_on (754,806 samples, 1.14%)</title><rect x="56.0761%" y="69" width="1.1384%" height="15" fill="rgb(233,223,10)"/><text x="56.3261%" y="79.50"></text></g><g><title>inferred_outlives_of (194,670 samples, 0.29%)</title><rect x="56.9209%" y="53" width="0.2936%" height="15" fill="rgb(215,21,27)"/><text x="57.1709%" y="63.50"></text></g><g><title>metadata_decode_entry_inferred_outlives_of (70,570 samples, 0.11%)</title><rect x="57.1081%" y="37" width="0.1064%" height="15" fill="rgb(232,23,21)"/><text x="57.3581%" y="47.50"></text></g><g><title>specializes (4,088,829 samples, 6.17%)</title><rect x="57.2145%" y="85" width="6.1669%" height="15" fill="rgb(244,5,23)"/><text x="57.4645%" y="95.50">speciali..</text></g><g><title>param_env (2,375,297 samples, 3.58%)</title><rect x="59.7989%" y="69" width="3.5825%" height="15" fill="rgb(226,81,46)"/><text x="60.0489%" y="79.50">para..</text></g><g><title>def_span (1,044,222 samples, 1.57%)</title><rect x="61.8065%" y="53" width="1.5749%" height="15" fill="rgb(247,70,30)"/><text x="62.0565%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (907,561 samples, 1.37%)</title><rect x="62.0126%" y="37" width="1.3688%" height="15" fill="rgb(212,68,19)"/><text x="62.2626%" y="47.50"></text></g><g><title>trait_impls_of (213,743 samples, 0.32%)</title><rect x="63.3903%" y="85" width="0.3224%" height="15" fill="rgb(240,187,13)"/><text x="63.6403%" y="95.50"></text></g><g><title>implementations_of_trait (103,302 samples, 0.16%)</title><rect x="63.5569%" y="69" width="0.1558%" height="15" fill="rgb(223,113,26)"/><text x="63.8069%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (97,091 samples, 0.15%)</title><rect x="63.5663%" y="53" width="0.1464%" height="15" fill="rgb(206,192,2)"/><text x="63.8163%" y="63.50"></text></g><g><title>evaluate_obligation (14,804,926 samples, 22.33%)</title><rect x="41.4359%" y="101" width="22.3291%" height="15" fill="rgb(241,108,4)"/><text x="41.6859%" y="111.50">evaluate_obligation</text></g><g><title>associated_item (95,001 samples, 0.14%)</title><rect x="63.8511%" y="69" width="0.1433%" height="15" fill="rgb(247,173,49)"/><text x="64.1011%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (93,811 samples, 0.14%)</title><rect x="63.8529%" y="53" width="0.1415%" height="15" fill="rgb(224,114,35)"/><text x="64.1029%" y="63.50"></text></g><g><title>impl_item_implementor_ids (108,871 samples, 0.16%)</title><rect x="63.8319%" y="101" width="0.1642%" height="15" fill="rgb(245,159,27)"/><text x="64.0819%" y="111.50"></text></g><g><title>associated_items (99,821 samples, 0.15%)</title><rect x="63.8456%" y="85" width="0.1506%" height="15" fill="rgb(245,172,44)"/><text x="64.0956%" y="95.50"></text></g><g><title>item_types_checking (16,529,494 samples, 24.93%)</title><rect x="39.2852%" y="149" width="24.9301%" height="15" fill="rgb(236,23,11)"/><text x="39.5352%" y="159.50">item_types_checking</text></g><g><title>check_mod_item_types (16,520,344 samples, 24.92%)</title><rect x="39.2990%" y="133" width="24.9163%" height="15" fill="rgb(205,117,38)"/><text x="39.5490%" y="143.50">check_mod_item_types</text></g><g><title>typeck (16,379,392 samples, 24.70%)</title><rect x="39.5116%" y="117" width="24.7037%" height="15" fill="rgb(237,72,25)"/><text x="39.7616%" y="127.50">typeck</text></g><g><title>fn_sig (236,493 samples, 0.36%)</title><rect x="64.4989%" y="117" width="0.3567%" height="15" fill="rgb(244,70,9)"/><text x="64.7489%" y="127.50"></text></g><g><title>late_bound_vars_map (146,203 samples, 0.22%)</title><rect x="64.6350%" y="101" width="0.2205%" height="15" fill="rgb(217,125,39)"/><text x="64.8850%" y="111.50"></text></g><g><title>resolve_lifetimes (125,643 samples, 0.19%)</title><rect x="64.6660%" y="85" width="0.1895%" height="15" fill="rgb(235,36,10)"/><text x="64.9160%" y="95.50"></text></g><g><title>generics_of (95,082 samples, 0.14%)</title><rect x="64.8555%" y="117" width="0.1434%" height="15" fill="rgb(251,123,47)"/><text x="65.1055%" y="127.50"></text></g><g><title>explicit_predicates_of (71,971 samples, 0.11%)</title><rect x="65.1556%" y="85" width="0.1085%" height="15" fill="rgb(221,13,13)"/><text x="65.4056%" y="95.50"></text></g><g><title>predicates_of (193,592 samples, 0.29%)</title><rect x="65.0331%" y="117" width="0.2920%" height="15" fill="rgb(238,131,9)"/><text x="65.2831%" y="127.50"></text></g><g><title>predicates_defined_on (161,621 samples, 0.24%)</title><rect x="65.0813%" y="101" width="0.2438%" height="15" fill="rgb(211,50,8)"/><text x="65.3313%" y="111.50"></text></g><g><title>type_collecting (803,949 samples, 1.21%)</title><rect x="64.2183%" y="149" width="1.2125%" height="15" fill="rgb(245,182,24)"/><text x="64.4683%" y="159.50"></text></g><g><title>collect_mod_item_types (784,729 samples, 1.18%)</title><rect x="64.2473%" y="133" width="1.1835%" height="15" fill="rgb(242,14,37)"/><text x="64.4973%" y="143.50"></text></g><g><title>type_of (70,110 samples, 0.11%)</title><rect x="65.3251%" y="117" width="0.1057%" height="15" fill="rgb(246,228,12)"/><text x="65.5751%" y="127.50"></text></g><g><title>evaluate_obligation (119,681 samples, 0.18%)</title><rect x="65.8301%" y="117" width="0.1805%" height="15" fill="rgb(213,55,15)"/><text x="66.0801%" y="127.50"></text></g><g><title>check_impl_item_well_formed (359,924 samples, 0.54%)</title><rect x="65.5764%" y="133" width="0.5428%" height="15" fill="rgb(209,9,3)"/><text x="65.8264%" y="143.50"></text></g><g><title>evaluate_obligation (110,121 samples, 0.17%)</title><rect x="67.1085%" y="117" width="0.1661%" height="15" fill="rgb(230,59,30)"/><text x="67.3585%" y="127.50"></text></g><g><title>implied_outlives_bounds (84,491 samples, 0.13%)</title><rect x="67.2792%" y="117" width="0.1274%" height="15" fill="rgb(209,121,21)"/><text x="67.5292%" y="127.50"></text></g><g><title>param_env (164,882 samples, 0.25%)</title><rect x="67.4067%" y="117" width="0.2487%" height="15" fill="rgb(220,109,13)"/><text x="67.6567%" y="127.50"></text></g><g><title>region_scope_tree (216,233 samples, 0.33%)</title><rect x="67.7371%" y="117" width="0.3261%" height="15" fill="rgb(232,18,1)"/><text x="67.9871%" y="127.50"></text></g><g><title>analysis (44,545,017 samples, 67.18%)</title><rect x="0.9417%" y="181" width="67.1837%" height="15" fill="rgb(215,41,42)"/><text x="1.1917%" y="191.50">analysis</text></g><g><title>type_check_crate (36,033,031 samples, 54.35%)</title><rect x="13.7796%" y="165" width="54.3458%" height="15" fill="rgb(224,123,36)"/><text x="14.0296%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,784,290 samples, 2.69%)</title><rect x="65.4343%" y="149" width="2.6911%" height="15" fill="rgb(240,125,3)"/><text x="65.6843%" y="159.50">wf..</text></g><g><title>check_item_well_formed (1,330,135 samples, 2.01%)</title><rect x="66.1193%" y="133" width="2.0061%" height="15" fill="rgb(205,98,50)"/><text x="66.3693%" y="143.50">c..</text></g><g><title>codegen_crate (492,856 samples, 0.74%)</title><rect x="68.1389%" y="181" width="0.7433%" height="15" fill="rgb(205,185,37)"/><text x="68.3889%" y="191.50"></text></g><g><title>AST_validation (105,912 samples, 0.16%)</title><rect x="69.1655%" y="165" width="0.1597%" height="15" fill="rgb(238,207,15)"/><text x="69.4155%" y="175.50"></text></g><g><title>crate_injection (72,941 samples, 0.11%)</title><rect x="69.4124%" y="165" width="0.1100%" height="15" fill="rgb(213,199,42)"/><text x="69.6624%" y="175.50"></text></g><g><title>metadata_load_macro (293,692 samples, 0.44%)</title><rect x="87.7545%" y="133" width="0.4430%" height="15" fill="rgb(235,201,11)"/><text x="88.0045%" y="143.50"></text></g><g><title>metadata_register_crate (198,863 samples, 0.30%)</title><rect x="88.1974%" y="133" width="0.2999%" height="15" fill="rgb(207,46,11)"/><text x="88.4474%" y="143.50"></text></g><g><title>macro_expand_crate (12,857,603 samples, 19.39%)</title><rect x="69.5224%" y="165" width="19.3921%" height="15" fill="rgb(241,35,35)"/><text x="69.7724%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (12,834,973 samples, 19.36%)</title><rect x="69.5565%" y="149" width="19.3580%" height="15" fill="rgb(243,32,47)"/><text x="69.8065%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (276,603 samples, 0.42%)</title><rect x="88.4973%" y="133" width="0.4172%" height="15" fill="rgb(247,202,23)"/><text x="88.7473%" y="143.50"></text></g><g><title>finalize_imports (84,541 samples, 0.13%)</title><rect x="88.9988%" y="149" width="0.1275%" height="15" fill="rgb(219,102,11)"/><text x="89.2488%" y="159.50"></text></g><g><title>finalize_macro_resolutions (178,692 samples, 0.27%)</title><rect x="89.1263%" y="149" width="0.2695%" height="15" fill="rgb(243,110,44)"/><text x="89.3763%" y="159.50"></text></g><g><title>late_resolve_crate (910,300 samples, 1.37%)</title><rect x="89.3958%" y="149" width="1.3729%" height="15" fill="rgb(222,74,54)"/><text x="89.6458%" y="159.50"></text></g><g><title>configure_and_expand (14,608,553 samples, 22.03%)</title><rect x="68.8823%" y="181" width="22.0329%" height="15" fill="rgb(216,99,12)"/><text x="69.1323%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,279,474 samples, 1.93%)</title><rect x="88.9854%" y="165" width="1.9297%" height="15" fill="rgb(226,22,26)"/><text x="89.2354%" y="175.50">r..</text></g><g><title>drop_ast (150,802 samples, 0.23%)</title><rect x="90.9152%" y="181" width="0.2274%" height="15" fill="rgb(217,163,10)"/><text x="91.1652%" y="191.50"></text></g><g><title>early_lint_checks (290,124 samples, 0.44%)</title><rect x="91.1682%" y="181" width="0.4376%" height="15" fill="rgb(213,25,53)"/><text x="91.4182%" y="191.50"></text></g><g><title>free_global_ctxt (1,687,999 samples, 2.55%)</title><rect x="91.6057%" y="181" width="2.5459%" height="15" fill="rgb(252,105,26)"/><text x="91.8557%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (526,415 samples, 0.79%)</title><rect x="94.1516%" y="181" width="0.7940%" height="15" fill="rgb(220,39,43)"/><text x="94.4016%" y="191.50"></text></g><g><title>hir_lowering (1,574,957 samples, 2.38%)</title><rect x="94.9456%" y="181" width="2.3754%" height="15" fill="rgb(229,68,48)"/><text x="95.1956%" y="191.50">hi..</text></g><g><title>parse_crate (352,794 samples, 0.53%)</title><rect x="97.3896%" y="181" width="0.5321%" height="15" fill="rgb(252,8,32)"/><text x="97.6396%" y="191.50"></text></g><g><title>prepare_outputs (255,613 samples, 0.39%)</title><rect x="97.9328%" y="181" width="0.3855%" height="15" fill="rgb(223,20,43)"/><text x="98.1828%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (672,247 samples, 1.01%)</title><rect x="98.3184%" y="181" width="1.0139%" height="15" fill="rgb(229,81,49)"/><text x="98.5684%" y="191.50"></text></g><g><title>setup_global_ctxt (121,222 samples, 0.18%)</title><rect x="99.3483%" y="181" width="0.1828%" height="15" fill="rgb(236,28,36)"/><text x="99.5983%" y="191.50"></text></g><g><title>all (66,303,289 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (66,303,289 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (310,863 samples, 0.47%)</title><rect x="99.5311%" y="181" width="0.4689%" height="15" fill="rgb(233,201,37)"/><text x="99.7811%" y="191.50"></text></g></svg></svg>