<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (1,149,179 samples, 0.25%)</title><rect x="8.2944%" y="149" width="0.2468%" height="15" fill="rgb(227,0,7)"/><text x="8.5444%" y="159.50"></text></g><g><title>evaluate_obligation (710,877 samples, 0.15%)</title><rect x="8.3886%" y="133" width="0.1527%" height="15" fill="rgb(217,0,24)"/><text x="8.6386%" y="143.50"></text></g><g><title>is_copy_raw (5,945,646 samples, 1.28%)</title><rect x="11.6062%" y="69" width="1.2770%" height="15" fill="rgb(221,193,54)"/><text x="11.8562%" y="79.50"></text></g><g><title>evaluate_obligation (4,991,309 samples, 1.07%)</title><rect x="11.8112%" y="53" width="1.0721%" height="15" fill="rgb(248,212,6)"/><text x="12.0612%" y="63.50"></text></g><g><title>needs_drop_raw (6,968,865 samples, 1.50%)</title><rect x="11.4033%" y="85" width="1.4968%" height="15" fill="rgb(208,68,35)"/><text x="11.6533%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (968,833 samples, 0.21%)</title><rect x="13.0381%" y="69" width="0.2081%" height="15" fill="rgb(232,128,0)"/><text x="13.2881%" y="79.50"></text></g><g><title>resolve_instance (2,054,922 samples, 0.44%)</title><rect x="12.9001%" y="85" width="0.4414%" height="15" fill="rgb(207,160,47)"/><text x="13.1501%" y="95.50"></text></g><g><title>thir_body (2,212,854 samples, 0.48%)</title><rect x="13.3600%" y="85" width="0.4753%" height="15" fill="rgb(228,23,34)"/><text x="13.6100%" y="95.50"></text></g><g><title>mir_const (23,017,376 samples, 4.94%)</title><rect x="8.9878%" y="133" width="4.9438%" height="15" fill="rgb(218,30,26)"/><text x="9.2378%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (20,736,771 samples, 4.45%)</title><rect x="9.4776%" y="117" width="4.4540%" height="15" fill="rgb(220,122,19)"/><text x="9.7276%" y="127.50">unsaf..</text></g><g><title>mir_built (19,224,842 samples, 4.13%)</title><rect x="9.8024%" y="101" width="4.1292%" height="15" fill="rgb(250,228,42)"/><text x="10.0524%" y="111.50">mir_..</text></g><g><title>mir_promoted (25,631,593 samples, 5.51%)</title><rect x="8.5413%" y="149" width="5.5053%" height="15" fill="rgb(240,193,28)"/><text x="8.7913%" y="159.50">mir_pro..</text></g><g><title>mir_const_qualif (535,289 samples, 0.11%)</title><rect x="13.9316%" y="133" width="0.1150%" height="15" fill="rgb(216,20,37)"/><text x="14.1816%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (4,740,432 samples, 1.02%)</title><rect x="14.0466%" y="149" width="1.0182%" height="15" fill="rgb(206,188,39)"/><text x="14.2966%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,376,794 samples, 0.51%)</title><rect x="15.0647%" y="149" width="0.5105%" height="15" fill="rgb(217,207,13)"/><text x="15.3147%" y="159.50"></text></g><g><title>normalize_projection_ty (1,042,922 samples, 0.22%)</title><rect x="15.3512%" y="133" width="0.2240%" height="15" fill="rgb(231,73,38)"/><text x="15.6012%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,113,728 samples, 0.24%)</title><rect x="15.5752%" y="149" width="0.2392%" height="15" fill="rgb(225,20,46)"/><text x="15.8252%" y="159.50"></text></g><g><title>type_op_normalize_ty (4,080,175 samples, 0.88%)</title><rect x="15.8144%" y="149" width="0.8764%" height="15" fill="rgb(210,31,41)"/><text x="16.0644%" y="159.50"></text></g><g><title>normalize_projection_ty (2,523,141 samples, 0.54%)</title><rect x="16.1489%" y="133" width="0.5419%" height="15" fill="rgb(221,200,47)"/><text x="16.3989%" y="143.50"></text></g><g><title>type_op_prove_predicate (14,740,355 samples, 3.17%)</title><rect x="16.6908%" y="149" width="3.1660%" height="15" fill="rgb(226,26,5)"/><text x="16.9408%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (89,942,385 samples, 19.32%)</title><rect x="0.5398%" y="181" width="19.3183%" height="15" fill="rgb(249,33,26)"/><text x="0.7898%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (89,492,957 samples, 19.22%)</title><rect x="0.6363%" y="165" width="19.2218%" height="15" fill="rgb(235,183,28)"/><text x="0.8863%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (1,078,503 samples, 0.23%)</title><rect x="19.9550%" y="181" width="0.2316%" height="15" fill="rgb(221,5,38)"/><text x="20.2050%" y="191.50"></text></g><g><title>codegen_fn_attrs (909,939 samples, 0.20%)</title><rect x="20.3842%" y="149" width="0.1954%" height="15" fill="rgb(247,18,42)"/><text x="20.6342%" y="159.50"></text></g><g><title>check_mod_attrs (1,773,658 samples, 0.38%)</title><rect x="20.1987%" y="165" width="0.3810%" height="15" fill="rgb(241,131,45)"/><text x="20.4487%" y="175.50"></text></g><g><title>check_mod_const_bodies (469,025 samples, 0.10%)</title><rect x="20.5797%" y="165" width="0.1007%" height="15" fill="rgb(249,31,29)"/><text x="20.8297%" y="175.50"></text></g><g><title>lookup_deprecation_entry (693,226 samples, 0.15%)</title><rect x="20.9828%" y="149" width="0.1489%" height="15" fill="rgb(225,111,53)"/><text x="21.2328%" y="159.50"></text></g><g><title>stability_index (556,516 samples, 0.12%)</title><rect x="21.0121%" y="133" width="0.1195%" height="15" fill="rgb(238,160,17)"/><text x="21.2621%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,753,741 samples, 0.38%)</title><rect x="20.7720%" y="165" width="0.3767%" height="15" fill="rgb(214,148,48)"/><text x="21.0220%" y="175.50"></text></g><g><title>misc_checking_1 (4,723,002 samples, 1.01%)</title><rect x="20.1867%" y="181" width="1.0144%" height="15" fill="rgb(232,36,49)"/><text x="20.4367%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,847,640 samples, 0.40%)</title><rect x="21.2015%" y="165" width="0.3968%" height="15" fill="rgb(209,103,24)"/><text x="21.4515%" y="175.50"></text></g><g><title>check_mod_liveness (1,521,235 samples, 0.33%)</title><rect x="21.2716%" y="149" width="0.3267%" height="15" fill="rgb(229,88,8)"/><text x="21.5216%" y="159.50"></text></g><g><title>misc_checking_2 (3,204,196 samples, 0.69%)</title><rect x="21.2012%" y="181" width="0.6882%" height="15" fill="rgb(213,181,19)"/><text x="21.4512%" y="191.50"></text></g><g><title>match_checking (1,354,836 samples, 0.29%)</title><rect x="21.5984%" y="165" width="0.2910%" height="15" fill="rgb(254,191,54)"/><text x="21.8484%" y="175.50"></text></g><g><title>check_match (1,234,333 samples, 0.27%)</title><rect x="21.6243%" y="149" width="0.2651%" height="15" fill="rgb(241,83,37)"/><text x="21.8743%" y="159.50"></text></g><g><title>check_private_in_public (1,367,025 samples, 0.29%)</title><rect x="21.8921%" y="165" width="0.2936%" height="15" fill="rgb(233,36,39)"/><text x="22.1421%" y="175.50"></text></g><g><title>death_checking (1,894,341 samples, 0.41%)</title><rect x="22.1857%" y="165" width="0.4069%" height="15" fill="rgb(226,3,54)"/><text x="22.4357%" y="175.50"></text></g><g><title>eval_to_const_value_raw (616,299 samples, 0.13%)</title><rect x="22.9154%" y="133" width="0.1324%" height="15" fill="rgb(245,192,40)"/><text x="23.1654%" y="143.50"></text></g><g><title>eval_to_const_value_raw (595,768 samples, 0.13%)</title><rect x="22.9198%" y="117" width="0.1280%" height="15" fill="rgb(238,167,29)"/><text x="23.1698%" y="127.50"></text></g><g><title>eval_to_allocation_raw (570,138 samples, 0.12%)</title><rect x="22.9253%" y="101" width="0.1225%" height="15" fill="rgb(232,182,51)"/><text x="23.1753%" y="111.50"></text></g><g><title>param_env (1,389,356 samples, 0.30%)</title><rect x="23.0478%" y="133" width="0.2984%" height="15" fill="rgb(231,60,39)"/><text x="23.2978%" y="143.50"></text></g><g><title>predicates_of (559,196 samples, 0.12%)</title><rect x="23.2261%" y="117" width="0.1201%" height="15" fill="rgb(208,69,12)"/><text x="23.4761%" y="127.50"></text></g><g><title>crate_lints (3,962,424 samples, 0.85%)</title><rect x="22.5931%" y="149" width="0.8511%" height="15" fill="rgb(235,93,37)"/><text x="22.8431%" y="159.50"></text></g><g><title>layout_of (568,324 samples, 0.12%)</title><rect x="23.7908%" y="101" width="0.1221%" height="15" fill="rgb(213,116,39)"/><text x="24.0408%" y="111.50"></text></g><g><title>lint_checking (6,155,268 samples, 1.32%)</title><rect x="22.5926%" y="165" width="1.3221%" height="15" fill="rgb(222,207,29)"/><text x="22.8426%" y="175.50"></text></g><g><title>module_lints (2,190,434 samples, 0.47%)</title><rect x="23.4441%" y="149" width="0.4705%" height="15" fill="rgb(206,96,30)"/><text x="23.6941%" y="159.50"></text></g><g><title>lint_mod (2,172,204 samples, 0.47%)</title><rect x="23.4481%" y="133" width="0.4666%" height="15" fill="rgb(218,138,4)"/><text x="23.6981%" y="143.50"></text></g><g><title>layout_of (650,375 samples, 0.14%)</title><rect x="23.7749%" y="117" width="0.1397%" height="15" fill="rgb(250,191,14)"/><text x="24.0249%" y="127.50"></text></g><g><title>privacy_access_levels (2,385,256 samples, 0.51%)</title><rect x="23.9146%" y="165" width="0.5123%" height="15" fill="rgb(239,60,40)"/><text x="24.1646%" y="175.50"></text></g><g><title>privacy_checking_modules (7,407,953 samples, 1.59%)</title><rect x="24.4269%" y="165" width="1.5911%" height="15" fill="rgb(206,27,48)"/><text x="24.6769%" y="175.50"></text></g><g><title>check_mod_privacy (7,388,863 samples, 1.59%)</title><rect x="24.4310%" y="149" width="1.5870%" height="15" fill="rgb(225,35,8)"/><text x="24.6810%" y="159.50"></text></g><g><title>misc_checking_3 (19,262,574 samples, 4.14%)</title><rect x="21.8894%" y="181" width="4.1373%" height="15" fill="rgb(250,213,24)"/><text x="22.1394%" y="191.50">misc_..</text></g><g><title>impl_parent (476,524 samples, 0.10%)</title><rect x="26.4453%" y="117" width="0.1024%" height="15" fill="rgb(247,123,22)"/><text x="26.6953%" y="127.50"></text></g><g><title>impl_trait_ref (1,282,473 samples, 0.28%)</title><rect x="26.5476%" y="117" width="0.2755%" height="15" fill="rgb(231,138,38)"/><text x="26.7976%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,113,032 samples, 0.24%)</title><rect x="26.5840%" y="101" width="0.2391%" height="15" fill="rgb(231,145,46)"/><text x="26.8340%" y="111.50"></text></g><g><title>coherent_trait (3,630,789 samples, 0.78%)</title><rect x="26.0976%" y="149" width="0.7798%" height="15" fill="rgb(251,118,11)"/><text x="26.3476%" y="159.50"></text></g><g><title>specialization_graph_of (3,591,988 samples, 0.77%)</title><rect x="26.1059%" y="133" width="0.7715%" height="15" fill="rgb(217,147,25)"/><text x="26.3559%" y="143.50"></text></g><g><title>coherence_checking (4,086,215 samples, 0.88%)</title><rect x="26.0906%" y="165" width="0.8777%" height="15" fill="rgb(247,81,37)"/><text x="26.3406%" y="175.50"></text></g><g><title>dropck_outlives (2,650,578 samples, 0.57%)</title><rect x="42.8526%" y="117" width="0.5693%" height="15" fill="rgb(209,12,38)"/><text x="43.1026%" y="127.50"></text></g><g><title>evaluate_obligation (3,974,970 samples, 0.85%)</title><rect x="43.4233%" y="117" width="0.8538%" height="15" fill="rgb(227,1,9)"/><text x="43.6733%" y="127.50"></text></g><g><title>evaluate_obligation (1,578,695 samples, 0.34%)</title><rect x="44.9606%" y="101" width="0.3391%" height="15" fill="rgb(248,47,43)"/><text x="45.2106%" y="111.50"></text></g><g><title>method_autoderef_steps (4,125,225 samples, 0.89%)</title><rect x="44.4205%" y="117" width="0.8860%" height="15" fill="rgb(221,10,30)"/><text x="44.6705%" y="127.50"></text></g><g><title>typeck (3,599,700 samples, 0.77%)</title><rect x="45.4366%" y="117" width="0.7732%" height="15" fill="rgb(210,229,1)"/><text x="45.6866%" y="127.50"></text></g><g><title>item_bodies_checking (89,380,328 samples, 19.20%)</title><rect x="27.0346%" y="165" width="19.1976%" height="15" fill="rgb(222,148,37)"/><text x="27.2846%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (89,376,808 samples, 19.20%)</title><rect x="27.0354%" y="149" width="19.1968%" height="15" fill="rgb(234,67,33)"/><text x="27.2854%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (89,047,386 samples, 19.13%)</title><rect x="27.1061%" y="133" width="19.1261%" height="15" fill="rgb(247,98,35)"/><text x="27.3561%" y="143.50">typeck</text></g><g><title>mir_const (6,324,860 samples, 1.36%)</title><rect x="51.2444%" y="85" width="1.3585%" height="15" fill="rgb(247,138,52)"/><text x="51.4944%" y="95.50"></text></g><g><title>unsafety_check_result (6,009,596 samples, 1.29%)</title><rect x="51.3121%" y="69" width="1.2908%" height="15" fill="rgb(213,79,30)"/><text x="51.5621%" y="79.50"></text></g><g><title>mir_built (5,928,386 samples, 1.27%)</title><rect x="51.3296%" y="53" width="1.2733%" height="15" fill="rgb(246,177,23)"/><text x="51.5796%" y="63.50"></text></g><g><title>typeck (5,028,306 samples, 1.08%)</title><rect x="51.5229%" y="37" width="1.0800%" height="15" fill="rgb(230,62,27)"/><text x="51.7729%" y="47.50"></text></g><g><title>mir_promoted (6,460,921 samples, 1.39%)</title><rect x="51.2178%" y="101" width="1.3877%" height="15" fill="rgb(216,154,8)"/><text x="51.4678%" y="111.50"></text></g><g><title>type_of (9,495,993 samples, 2.04%)</title><rect x="50.6970%" y="133" width="2.0396%" height="15" fill="rgb(244,35,45)"/><text x="50.9470%" y="143.50">t..</text></g><g><title>mir_borrowck (9,467,183 samples, 2.03%)</title><rect x="50.7032%" y="117" width="2.0334%" height="15" fill="rgb(251,115,12)"/><text x="50.9532%" y="127.50">m..</text></g><g><title>item_types_checking (30,702,891 samples, 6.59%)</title><rect x="46.2322%" y="165" width="6.5945%" height="15" fill="rgb(240,54,50)"/><text x="46.4822%" y="175.50">item_type..</text></g><g><title>check_mod_item_types (30,681,760 samples, 6.59%)</title><rect x="46.2368%" y="149" width="6.5900%" height="15" fill="rgb(233,84,52)"/><text x="46.4868%" y="159.50">check_mod..</text></g><g><title>fn_sig (1,188,196 samples, 0.26%)</title><rect x="53.2596%" y="133" width="0.2552%" height="15" fill="rgb(207,117,47)"/><text x="53.5096%" y="143.50"></text></g><g><title>is_late_bound_map (1,828,299 samples, 0.39%)</title><rect x="53.6680%" y="117" width="0.3927%" height="15" fill="rgb(249,43,39)"/><text x="53.9180%" y="127.50"></text></g><g><title>resolve_lifetimes (1,789,429 samples, 0.38%)</title><rect x="53.6763%" y="101" width="0.3843%" height="15" fill="rgb(209,38,44)"/><text x="53.9263%" y="111.50"></text></g><g><title>lint_levels (1,465,167 samples, 0.31%)</title><rect x="53.7460%" y="85" width="0.3147%" height="15" fill="rgb(236,212,23)"/><text x="53.9960%" y="95.50"></text></g><g><title>generics_of (2,826,301 samples, 0.61%)</title><rect x="53.5148%" y="133" width="0.6070%" height="15" fill="rgb(242,79,21)"/><text x="53.7648%" y="143.50"></text></g><g><title>late_bound_vars_map (2,293,331 samples, 0.49%)</title><rect x="55.4035%" y="85" width="0.4926%" height="15" fill="rgb(211,96,35)"/><text x="55.6535%" y="95.50"></text></g><g><title>resolve_lifetimes (2,150,865 samples, 0.46%)</title><rect x="55.4341%" y="69" width="0.4620%" height="15" fill="rgb(253,215,40)"/><text x="55.6841%" y="79.50"></text></g><g><title>type_param_predicates (1,005,095 samples, 0.22%)</title><rect x="55.9475%" y="85" width="0.2159%" height="15" fill="rgb(211,81,21)"/><text x="56.1975%" y="95.50"></text></g><g><title>explicit_predicates_of (7,996,887 samples, 1.72%)</title><rect x="54.4459%" y="101" width="1.7176%" height="15" fill="rgb(208,190,38)"/><text x="54.6959%" y="111.50"></text></g><g><title>named_region_map (500,347 samples, 0.11%)</title><rect x="56.6038%" y="53" width="0.1075%" height="15" fill="rgb(235,213,38)"/><text x="56.8538%" y="63.50"></text></g><g><title>resolve_lifetimes (470,045 samples, 0.10%)</title><rect x="56.6103%" y="37" width="0.1010%" height="15" fill="rgb(237,122,38)"/><text x="56.8603%" y="47.50"></text></g><g><title>predicates_of (12,465,775 samples, 2.68%)</title><rect x="54.2247%" y="133" width="2.6775%" height="15" fill="rgb(244,218,35)"/><text x="54.4747%" y="143.50">pr..</text></g><g><title>predicates_defined_on (12,079,633 samples, 2.59%)</title><rect x="54.3076%" y="117" width="2.5945%" height="15" fill="rgb(240,68,47)"/><text x="54.5576%" y="127.50">pr..</text></g><g><title>inferred_outlives_of (3,438,759 samples, 0.74%)</title><rect x="56.1635%" y="101" width="0.7386%" height="15" fill="rgb(210,16,53)"/><text x="56.4135%" y="111.50"></text></g><g><title>inferred_outlives_crate (3,281,586 samples, 0.70%)</title><rect x="56.1973%" y="85" width="0.7048%" height="15" fill="rgb(235,124,12)"/><text x="56.4473%" y="95.50"></text></g><g><title>type_of (2,270,925 samples, 0.49%)</title><rect x="56.4144%" y="69" width="0.4878%" height="15" fill="rgb(224,169,11)"/><text x="56.6644%" y="79.50"></text></g><g><title>type_param_predicates (681,969 samples, 0.15%)</title><rect x="56.7556%" y="53" width="0.1465%" height="15" fill="rgb(250,166,2)"/><text x="57.0056%" y="63.50"></text></g><g><title>type_param_predicates (578,407 samples, 0.12%)</title><rect x="56.7779%" y="37" width="0.1242%" height="15" fill="rgb(242,216,29)"/><text x="57.0279%" y="47.50"></text></g><g><title>type_collecting (20,584,247 samples, 4.42%)</title><rect x="52.8295%" y="165" width="4.4212%" height="15" fill="rgb(230,116,27)"/><text x="53.0795%" y="175.50">type_..</text></g><g><title>collect_mod_item_types (20,561,207 samples, 4.42%)</title><rect x="52.8345%" y="149" width="4.4162%" height="15" fill="rgb(228,99,48)"/><text x="53.0845%" y="159.50">colle..</text></g><g><title>type_of (1,512,066 samples, 0.32%)</title><rect x="56.9259%" y="133" width="0.3248%" height="15" fill="rgb(253,11,6)"/><text x="57.1759%" y="143.50"></text></g><g><title>type_param_predicates (499,877 samples, 0.11%)</title><rect x="57.1433%" y="117" width="0.1074%" height="15" fill="rgb(247,143,39)"/><text x="57.3933%" y="127.50"></text></g><g><title>evaluate_obligation (3,174,080 samples, 0.68%)</title><rect x="61.6360%" y="133" width="0.6817%" height="15" fill="rgb(236,97,10)"/><text x="61.8860%" y="143.50"></text></g><g><title>implied_outlives_bounds (2,501,966 samples, 0.54%)</title><rect x="62.3504%" y="133" width="0.5374%" height="15" fill="rgb(233,208,19)"/><text x="62.6004%" y="143.50"></text></g><g><title>param_env (3,809,464 samples, 0.82%)</title><rect x="63.0011%" y="133" width="0.8182%" height="15" fill="rgb(216,164,2)"/><text x="63.2511%" y="143.50"></text></g><g><title>region_scope_tree (949,644 samples, 0.20%)</title><rect x="63.8246%" y="133" width="0.2040%" height="15" fill="rgb(220,129,5)"/><text x="64.0746%" y="143.50"></text></g><g><title>check_impl_item_well_formed (30,017,857 samples, 6.45%)</title><rect x="57.5821%" y="149" width="6.4474%" height="15" fill="rgb(242,17,10)"/><text x="57.8321%" y="159.50">check_im..</text></g><g><title>implied_outlives_bounds (1,302,858 samples, 0.28%)</title><rect x="69.4872%" y="133" width="0.2798%" height="15" fill="rgb(242,107,0)"/><text x="69.7372%" y="143.50"></text></g><g><title>param_env (4,540,551 samples, 0.98%)</title><rect x="69.8142%" y="133" width="0.9752%" height="15" fill="rgb(251,28,31)"/><text x="70.0642%" y="143.50"></text></g><g><title>check_item_well_formed (32,460,259 samples, 6.97%)</title><rect x="64.0295%" y="149" width="6.9720%" height="15" fill="rgb(233,223,10)"/><text x="64.2795%" y="159.50">check_ite..</text></g><g><title>variances_of (478,915 samples, 0.10%)</title><rect x="70.8986%" y="133" width="0.1029%" height="15" fill="rgb(215,21,27)"/><text x="71.1486%" y="143.50"></text></g><g><title>analysis (331,168,584 samples, 71.13%)</title><rect x="0.2879%" y="197" width="71.1302%" height="15" fill="rgb(232,23,21)"/><text x="0.5379%" y="207.50">analysis</text></g><g><title>type_check_crate (211,333,827 samples, 45.39%)</title><rect x="26.0267%" y="181" width="45.3914%" height="15" fill="rgb(244,5,23)"/><text x="26.2767%" y="191.50">type_check_crate</text></g><g><title>wf_checking (65,941,869 samples, 14.16%)</title><rect x="57.2548%" y="165" width="14.1634%" height="15" fill="rgb(226,81,46)"/><text x="57.5048%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,939,731 samples, 0.42%)</title><rect x="71.0015%" y="149" width="0.4166%" height="15" fill="rgb(247,70,30)"/><text x="71.2515%" y="159.50"></text></g><g><title>AST_validation (1,188,853 samples, 0.26%)</title><rect x="71.5357%" y="181" width="0.2553%" height="15" fill="rgb(212,68,19)"/><text x="71.7857%" y="191.50"></text></g><g><title>metadata_load_macro (665,847 samples, 0.14%)</title><rect x="88.4313%" y="149" width="0.1430%" height="15" fill="rgb(240,187,13)"/><text x="88.6813%" y="159.50"></text></g><g><title>metadata_register_crate (619,296 samples, 0.13%)</title><rect x="88.5743%" y="149" width="0.1330%" height="15" fill="rgb(223,113,26)"/><text x="88.8243%" y="159.50"></text></g><g><title>macro_expand_crate (79,797,852 samples, 17.14%)</title><rect x="71.8641%" y="181" width="17.1394%" height="15" fill="rgb(206,192,2)"/><text x="72.1141%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (79,773,712 samples, 17.13%)</title><rect x="71.8692%" y="165" width="17.1342%" height="15" fill="rgb(241,108,4)"/><text x="72.1192%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,378,758 samples, 0.30%)</title><rect x="88.7073%" y="149" width="0.2961%" height="15" fill="rgb(247,173,49)"/><text x="88.9573%" y="159.50"></text></g><g><title>late_resolve_crate (6,506,682 samples, 1.40%)</title><rect x="89.1796%" y="165" width="1.3975%" height="15" fill="rgb(224,114,35)"/><text x="89.4296%" y="175.50"></text></g><g><title>configure_and_expand (89,562,661 samples, 19.24%)</title><rect x="71.4949%" y="197" width="19.2368%" height="15" fill="rgb(245,159,27)"/><text x="71.7449%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,863,148 samples, 1.69%)</title><rect x="89.0428%" y="181" width="1.6889%" height="15" fill="rgb(245,172,44)"/><text x="89.2928%" y="191.50"></text></g><g><title>drop_ast (1,127,833 samples, 0.24%)</title><rect x="90.7317%" y="197" width="0.2422%" height="15" fill="rgb(236,23,11)"/><text x="90.9817%" y="207.50"></text></g><g><title>early_lint_checks (3,235,215 samples, 0.69%)</title><rect x="90.9778%" y="197" width="0.6949%" height="15" fill="rgb(205,117,38)"/><text x="91.2278%" y="207.50"></text></g><g><title>free_global_ctxt (3,337,847 samples, 0.72%)</title><rect x="91.6727%" y="197" width="0.7169%" height="15" fill="rgb(237,72,25)"/><text x="91.9227%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (467,045 samples, 0.10%)</title><rect x="94.7631%" y="165" width="0.1003%" height="15" fill="rgb(244,70,9)"/><text x="95.0131%" y="175.50"></text></g><g><title>optimized_mir (791,759 samples, 0.17%)</title><rect x="94.6937%" y="181" width="0.1701%" height="15" fill="rgb(217,125,39)"/><text x="94.9437%" y="191.50"></text></g><g><title>generate_crate_metadata (11,624,688 samples, 2.50%)</title><rect x="92.3896%" y="197" width="2.4968%" height="15" fill="rgb(235,36,10)"/><text x="92.6396%" y="207.50">ge..</text></g><g><title>hir_lowering (18,454,255 samples, 3.96%)</title><rect x="94.8864%" y="197" width="3.9637%" height="15" fill="rgb(251,123,47)"/><text x="95.1364%" y="207.50">hir_..</text></g><g><title>parse_crate (2,134,194 samples, 0.46%)</title><rect x="98.9402%" y="197" width="0.4584%" height="15" fill="rgb(221,13,13)"/><text x="99.1902%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,625,798 samples, 0.35%)</title><rect x="99.4505%" y="197" width="0.3492%" height="15" fill="rgb(238,131,9)"/><text x="99.7005%" y="207.50"></text></g><g><title>all (465,580,931 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (465,580,931 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (803,569 samples, 0.17%)</title><rect x="99.8274%" y="197" width="0.1726%" height="15" fill="rgb(242,14,37)"/><text x="100.0774%" y="207.50"></text></g></svg></svg>