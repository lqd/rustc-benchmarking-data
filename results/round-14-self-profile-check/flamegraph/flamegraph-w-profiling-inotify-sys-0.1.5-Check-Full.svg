<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (80,110 samples, 0.15%)</title><rect x="5.1179%" y="149" width="0.1459%" height="15" fill="rgb(227,0,7)"/><text x="5.3679%" y="159.50"></text></g><g><title>adt_drop_tys (69,981 samples, 0.13%)</title><rect x="5.9860%" y="69" width="0.1275%" height="15" fill="rgb(217,0,24)"/><text x="6.2360%" y="79.50"></text></g><g><title>needs_drop_raw (100,481 samples, 0.18%)</title><rect x="5.9706%" y="85" width="0.1830%" height="15" fill="rgb(221,193,54)"/><text x="6.2206%" y="95.50"></text></g><g><title>mir_const (397,975 samples, 0.72%)</title><rect x="5.5434%" y="133" width="0.7248%" height="15" fill="rgb(248,212,6)"/><text x="5.7934%" y="143.50"></text></g><g><title>unsafety_check_result (326,704 samples, 0.60%)</title><rect x="5.6732%" y="117" width="0.5950%" height="15" fill="rgb(208,68,35)"/><text x="5.9232%" y="127.50"></text></g><g><title>mir_built (302,424 samples, 0.55%)</title><rect x="5.7174%" y="101" width="0.5508%" height="15" fill="rgb(232,128,0)"/><text x="5.9674%" y="111.50"></text></g><g><title>thir_body (97,311 samples, 0.18%)</title><rect x="7.2861%" y="69" width="0.1772%" height="15" fill="rgb(207,160,47)"/><text x="7.5361%" y="79.50"></text></g><g><title>mir_promoted (1,212,595 samples, 2.21%)</title><rect x="5.2638%" y="149" width="2.2085%" height="15" fill="rgb(228,23,34)"/><text x="5.5138%" y="159.50">m..</text></g><g><title>mir_const_qualif (661,108 samples, 1.20%)</title><rect x="6.2682%" y="133" width="1.2040%" height="15" fill="rgb(218,30,26)"/><text x="6.5182%" y="143.50"></text></g><g><title>mir_const (549,668 samples, 1.00%)</title><rect x="6.4712%" y="117" width="1.0011%" height="15" fill="rgb(220,122,19)"/><text x="6.7212%" y="127.50"></text></g><g><title>unsafety_check_result (391,776 samples, 0.71%)</title><rect x="6.7588%" y="101" width="0.7135%" height="15" fill="rgb(250,228,42)"/><text x="7.0088%" y="111.50"></text></g><g><title>mir_built (324,474 samples, 0.59%)</title><rect x="6.8813%" y="85" width="0.5910%" height="15" fill="rgb(240,193,28)"/><text x="7.1313%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (113,311 samples, 0.21%)</title><rect x="7.4723%" y="149" width="0.2064%" height="15" fill="rgb(216,20,37)"/><text x="7.7223%" y="159.50"></text></g><g><title>type_op_prove_predicate (122,363 samples, 0.22%)</title><rect x="7.6787%" y="149" width="0.2229%" height="15" fill="rgb(206,188,39)"/><text x="7.9287%" y="159.50"></text></g><g><title>MIR_borrow_checking (3,324,677 samples, 6.06%)</title><rect x="1.8525%" y="181" width="6.0551%" height="15" fill="rgb(217,207,13)"/><text x="2.1025%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (3,288,977 samples, 5.99%)</title><rect x="1.9175%" y="165" width="5.9901%" height="15" fill="rgb(231,73,38)"/><text x="2.1675%" y="175.50">mir_borr..</text></g><g><title>MIR_effect_checking (347,744 samples, 0.63%)</title><rect x="7.9076%" y="181" width="0.6333%" height="15" fill="rgb(225,20,46)"/><text x="8.1576%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (312,924 samples, 0.57%)</title><rect x="7.9710%" y="165" width="0.5699%" height="15" fill="rgb(210,31,41)"/><text x="8.2210%" y="175.50"></text></g><g><title>hir_module_items (156,812 samples, 0.29%)</title><rect x="8.5409%" y="181" width="0.2856%" height="15" fill="rgb(221,200,47)"/><text x="8.7909%" y="191.50"></text></g><g><title>get_lang_items (64,011 samples, 0.12%)</title><rect x="9.3467%" y="101" width="0.1166%" height="15" fill="rgb(226,26,5)"/><text x="9.5967%" y="111.50"></text></g><g><title>codegen_fn_attrs (175,582 samples, 0.32%)</title><rect x="9.2981%" y="117" width="0.3198%" height="15" fill="rgb(249,33,26)"/><text x="9.5481%" y="127.50"></text></g><g><title>codegen_fn_attrs (271,763 samples, 0.49%)</title><rect x="9.1272%" y="149" width="0.4950%" height="15" fill="rgb(235,183,28)"/><text x="9.3772%" y="159.50"></text></g><g><title>should_inherit_track_caller (233,632 samples, 0.43%)</title><rect x="9.1967%" y="133" width="0.4255%" height="15" fill="rgb(221,5,38)"/><text x="9.4467%" y="143.50"></text></g><g><title>check_mod_attrs (404,805 samples, 0.74%)</title><rect x="8.8855%" y="165" width="0.7373%" height="15" fill="rgb(247,18,42)"/><text x="9.1355%" y="175.50"></text></g><g><title>lookup_deprecation_entry (80,251 samples, 0.15%)</title><rect x="9.8636%" y="149" width="0.1462%" height="15" fill="rgb(241,131,45)"/><text x="10.1136%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (187,402 samples, 0.34%)</title><rect x="9.7469%" y="165" width="0.3413%" height="15" fill="rgb(249,31,29)"/><text x="9.9969%" y="175.50"></text></g><g><title>misc_checking_1 (752,848 samples, 1.37%)</title><rect x="8.8273%" y="181" width="1.3711%" height="15" fill="rgb(225,111,53)"/><text x="9.0773%" y="191.50"></text></g><g><title>misc_checking_2 (146,242 samples, 0.27%)</title><rect x="10.1985%" y="181" width="0.2663%" height="15" fill="rgb(238,160,17)"/><text x="10.4485%" y="191.50"></text></g><g><title>match_checking (102,372 samples, 0.19%)</title><rect x="10.2784%" y="165" width="0.1864%" height="15" fill="rgb(214,148,48)"/><text x="10.5284%" y="175.50"></text></g><g><title>check_match (93,482 samples, 0.17%)</title><rect x="10.2945%" y="149" width="0.1703%" height="15" fill="rgb(232,36,49)"/><text x="10.5445%" y="159.50"></text></g><g><title>death_checking (155,472 samples, 0.28%)</title><rect x="10.5663%" y="165" width="0.2832%" height="15" fill="rgb(209,103,24)"/><text x="10.8163%" y="175.50"></text></g><g><title>mir_for_ctfe (119,121 samples, 0.22%)</title><rect x="12.2251%" y="85" width="0.2170%" height="15" fill="rgb(229,88,8)"/><text x="12.4751%" y="95.50"></text></g><g><title>eval_to_const_value_raw (76,651 samples, 0.14%)</title><rect x="12.4846%" y="69" width="0.1396%" height="15" fill="rgb(213,181,19)"/><text x="12.7346%" y="79.50"></text></g><g><title>eval_to_const_value_raw (74,121 samples, 0.13%)</title><rect x="12.4892%" y="53" width="0.1350%" height="15" fill="rgb(254,191,54)"/><text x="12.7392%" y="63.50"></text></g><g><title>eval_to_allocation_raw (68,921 samples, 0.13%)</title><rect x="12.4987%" y="37" width="0.1255%" height="15" fill="rgb(241,83,37)"/><text x="12.7487%" y="47.50"></text></g><g><title>eval_to_const_value_raw (457,206 samples, 0.83%)</title><rect x="11.8131%" y="133" width="0.8327%" height="15" fill="rgb(233,36,39)"/><text x="12.0631%" y="143.50"></text></g><g><title>eval_to_const_value_raw (437,306 samples, 0.80%)</title><rect x="11.8493%" y="117" width="0.7964%" height="15" fill="rgb(226,3,54)"/><text x="12.0993%" y="127.50"></text></g><g><title>eval_to_allocation_raw (413,596 samples, 0.75%)</title><rect x="11.8925%" y="101" width="0.7533%" height="15" fill="rgb(245,192,40)"/><text x="12.1425%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (111,852 samples, 0.20%)</title><rect x="12.4421%" y="85" width="0.2037%" height="15" fill="rgb(238,167,29)"/><text x="12.6921%" y="95.50"></text></g><g><title>param_env (65,142 samples, 0.12%)</title><rect x="12.6458%" y="133" width="0.1186%" height="15" fill="rgb(232,182,51)"/><text x="12.8958%" y="143.50"></text></g><g><title>crate_lints (2,113,674 samples, 3.85%)</title><rect x="10.8520%" y="149" width="3.8495%" height="15" fill="rgb(231,60,39)"/><text x="11.1020%" y="159.50">crat..</text></g><g><title>type_of (1,048,332 samples, 1.91%)</title><rect x="12.7922%" y="133" width="1.9093%" height="15" fill="rgb(208,69,12)"/><text x="13.0422%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (817,130 samples, 1.49%)</title><rect x="13.2133%" y="117" width="1.4882%" height="15" fill="rgb(235,93,37)"/><text x="13.4633%" y="127.50"></text></g><g><title>lint_checking (2,178,655 samples, 3.97%)</title><rect x="10.8494%" y="165" width="3.9679%" height="15" fill="rgb(213,116,39)"/><text x="11.0994%" y="175.50">lint..</text></g><g><title>module_lints (63,601 samples, 0.12%)</title><rect x="14.7015%" y="149" width="0.1158%" height="15" fill="rgb(222,207,29)"/><text x="14.9515%" y="159.50"></text></g><g><title>lint_mod (61,781 samples, 0.11%)</title><rect x="14.7048%" y="133" width="0.1125%" height="15" fill="rgb(206,96,30)"/><text x="14.9548%" y="143.50"></text></g><g><title>privacy_access_levels (55,861 samples, 0.10%)</title><rect x="14.8173%" y="165" width="0.1017%" height="15" fill="rgb(218,138,4)"/><text x="15.0673%" y="175.50"></text></g><g><title>privacy_checking_modules (84,401 samples, 0.15%)</title><rect x="14.9191%" y="165" width="0.1537%" height="15" fill="rgb(250,191,14)"/><text x="15.1691%" y="175.50"></text></g><g><title>check_mod_privacy (82,861 samples, 0.15%)</title><rect x="14.9219%" y="149" width="0.1509%" height="15" fill="rgb(239,60,40)"/><text x="15.1719%" y="159.50"></text></g><g><title>misc_checking_3 (2,541,209 samples, 4.63%)</title><rect x="10.4648%" y="181" width="4.6282%" height="15" fill="rgb(206,27,48)"/><text x="10.7148%" y="191.50">misc_..</text></g><g><title>impl_trait_ref (147,882 samples, 0.27%)</title><rect x="15.4710%" y="85" width="0.2693%" height="15" fill="rgb(225,35,8)"/><text x="15.7210%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (129,632 samples, 0.24%)</title><rect x="15.5042%" y="69" width="0.2361%" height="15" fill="rgb(250,213,24)"/><text x="15.7542%" y="79.50"></text></g><g><title>adt_destructor (299,694 samples, 0.55%)</title><rect x="15.2407%" y="133" width="0.5458%" height="15" fill="rgb(247,123,22)"/><text x="15.4907%" y="143.50"></text></g><g><title>coherent_trait (291,904 samples, 0.53%)</title><rect x="15.2549%" y="117" width="0.5316%" height="15" fill="rgb(231,138,38)"/><text x="15.5049%" y="127.50"></text></g><g><title>specialization_graph_of (290,744 samples, 0.53%)</title><rect x="15.2570%" y="101" width="0.5295%" height="15" fill="rgb(231,145,46)"/><text x="15.5070%" y="111.50"></text></g><g><title>is_copy_raw (151,551 samples, 0.28%)</title><rect x="15.7865%" y="133" width="0.2760%" height="15" fill="rgb(251,118,11)"/><text x="16.0365%" y="143.50"></text></g><g><title>evaluate_obligation (125,271 samples, 0.23%)</title><rect x="15.8344%" y="117" width="0.2282%" height="15" fill="rgb(217,147,25)"/><text x="16.0844%" y="127.50"></text></g><g><title>param_env (100,022 samples, 0.18%)</title><rect x="16.0625%" y="133" width="0.1822%" height="15" fill="rgb(247,81,37)"/><text x="16.3125%" y="143.50"></text></g><g><title>impl_parent (1,801,612 samples, 3.28%)</title><rect x="22.1522%" y="117" width="3.2812%" height="15" fill="rgb(209,12,38)"/><text x="22.4022%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,076,304 samples, 1.96%)</title><rect x="23.4731%" y="101" width="1.9602%" height="15" fill="rgb(227,1,9)"/><text x="23.7231%" y="111.50">m..</text></g><g><title>impl_trait_ref (4,663,813 samples, 8.49%)</title><rect x="25.4334%" y="117" width="8.4940%" height="15" fill="rgb(248,47,43)"/><text x="25.6834%" y="127.50">impl_trait_r..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,942,606 samples, 7.18%)</title><rect x="26.7469%" y="101" width="7.1805%" height="15" fill="rgb(221,10,30)"/><text x="26.9969%" y="111.50">metadata_d..</text></g><g><title>coherent_trait (10,979,772 samples, 20.00%)</title><rect x="15.1779%" y="149" width="19.9970%" height="15" fill="rgb(210,229,1)"/><text x="15.4279%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (10,394,025 samples, 18.93%)</title><rect x="16.2447%" y="133" width="18.9302%" height="15" fill="rgb(222,148,37)"/><text x="16.4947%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (682,708 samples, 1.24%)</title><rect x="33.9315%" y="117" width="1.2434%" height="15" fill="rgb(234,67,33)"/><text x="34.1815%" y="127.50"></text></g><g><title>implementations_of_trait (146,400 samples, 0.27%)</title><rect x="34.9083%" y="101" width="0.2666%" height="15" fill="rgb(247,98,35)"/><text x="35.1583%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (129,890 samples, 0.24%)</title><rect x="34.9383%" y="85" width="0.2366%" height="15" fill="rgb(247,138,52)"/><text x="35.1883%" y="95.50"></text></g><g><title>coherence_checking (11,042,953 samples, 20.11%)</title><rect x="15.1499%" y="165" width="20.1121%" height="15" fill="rgb(213,79,30)"/><text x="15.3999%" y="175.50">coherence_checking</text></g><g><title>evaluate_obligation (84,421 samples, 0.15%)</title><rect x="37.6595%" y="117" width="0.1538%" height="15" fill="rgb(246,177,23)"/><text x="37.9095%" y="127.50"></text></g><g><title>object_safety_violations (149,702 samples, 0.27%)</title><rect x="37.9609%" y="117" width="0.2726%" height="15" fill="rgb(230,62,27)"/><text x="38.2109%" y="127.50"></text></g><g><title>explicit_predicates_of (61,312 samples, 0.11%)</title><rect x="38.2751%" y="85" width="0.1117%" height="15" fill="rgb(216,154,8)"/><text x="38.5251%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (58,492 samples, 0.11%)</title><rect x="38.2802%" y="69" width="0.1065%" height="15" fill="rgb(244,35,45)"/><text x="38.5302%" y="79.50"></text></g><g><title>predicates_of (86,142 samples, 0.16%)</title><rect x="38.2398%" y="117" width="0.1569%" height="15" fill="rgb(251,115,12)"/><text x="38.4898%" y="127.50"></text></g><g><title>predicates_defined_on (75,152 samples, 0.14%)</title><rect x="38.2598%" y="101" width="0.1369%" height="15" fill="rgb(240,54,50)"/><text x="38.5098%" y="111.50"></text></g><g><title>item_bodies_checking (1,738,859 samples, 3.17%)</title><rect x="35.3014%" y="165" width="3.1669%" height="15" fill="rgb(233,84,52)"/><text x="35.5514%" y="175.50">ite..</text></g><g><title>typeck_item_bodies (1,737,329 samples, 3.16%)</title><rect x="35.3042%" y="149" width="3.1641%" height="15" fill="rgb(207,117,47)"/><text x="35.5542%" y="159.50">typ..</text></g><g><title>typeck (1,732,799 samples, 3.16%)</title><rect x="35.3125%" y="133" width="3.1559%" height="15" fill="rgb(249,43,39)"/><text x="35.5625%" y="143.50">typ..</text></g><g><title>specializes (77,441 samples, 0.14%)</title><rect x="40.1612%" y="101" width="0.1410%" height="15" fill="rgb(209,38,44)"/><text x="40.4112%" y="111.50"></text></g><g><title>param_env (66,431 samples, 0.12%)</title><rect x="40.1812%" y="85" width="0.1210%" height="15" fill="rgb(236,212,23)"/><text x="40.4312%" y="95.50"></text></g><g><title>def_span (54,930 samples, 0.10%)</title><rect x="40.2022%" y="69" width="0.1000%" height="15" fill="rgb(242,79,21)"/><text x="40.4522%" y="79.50"></text></g><g><title>evaluate_obligation (252,573 samples, 0.46%)</title><rect x="39.9149%" y="117" width="0.4600%" height="15" fill="rgb(211,96,35)"/><text x="40.1649%" y="127.50"></text></g><g><title>item_types_checking (1,101,602 samples, 2.01%)</title><rect x="38.4683%" y="165" width="2.0063%" height="15" fill="rgb(253,215,40)"/><text x="38.7183%" y="175.50">i..</text></g><g><title>check_mod_item_types (1,099,382 samples, 2.00%)</title><rect x="38.4724%" y="149" width="2.0023%" height="15" fill="rgb(211,81,21)"/><text x="38.7224%" y="159.50">c..</text></g><g><title>typeck (972,291 samples, 1.77%)</title><rect x="38.7038%" y="133" width="1.7708%" height="15" fill="rgb(208,190,38)"/><text x="38.9538%" y="143.50">t..</text></g><g><title>fn_sig (140,010 samples, 0.25%)</title><rect x="40.7127%" y="133" width="0.2550%" height="15" fill="rgb(235,213,38)"/><text x="40.9627%" y="143.50"></text></g><g><title>named_region_map (140,541 samples, 0.26%)</title><rect x="41.0581%" y="117" width="0.2560%" height="15" fill="rgb(237,122,38)"/><text x="41.3081%" y="127.50"></text></g><g><title>resolve_lifetimes (138,061 samples, 0.25%)</title><rect x="41.0626%" y="101" width="0.2514%" height="15" fill="rgb(244,218,35)"/><text x="41.3126%" y="111.50"></text></g><g><title>lint_levels (69,630 samples, 0.13%)</title><rect x="41.1873%" y="85" width="0.1268%" height="15" fill="rgb(240,68,47)"/><text x="41.4373%" y="95.50"></text></g><g><title>generics_of (202,214 samples, 0.37%)</title><rect x="40.9677%" y="133" width="0.3683%" height="15" fill="rgb(210,16,53)"/><text x="41.2177%" y="143.50"></text></g><g><title>explicit_predicates_of (64,530 samples, 0.12%)</title><rect x="41.5343%" y="101" width="0.1175%" height="15" fill="rgb(235,124,12)"/><text x="41.7843%" y="111.50"></text></g><g><title>predicates_of (177,632 samples, 0.32%)</title><rect x="41.4004%" y="133" width="0.3235%" height="15" fill="rgb(224,169,11)"/><text x="41.6504%" y="143.50"></text></g><g><title>predicates_defined_on (151,661 samples, 0.28%)</title><rect x="41.4477%" y="117" width="0.2762%" height="15" fill="rgb(250,166,2)"/><text x="41.6977%" y="127.50"></text></g><g><title>type_collecting (805,178 samples, 1.47%)</title><rect x="40.4765%" y="165" width="1.4664%" height="15" fill="rgb(242,216,29)"/><text x="40.7265%" y="175.50"></text></g><g><title>collect_mod_item_types (796,058 samples, 1.45%)</title><rect x="40.4931%" y="149" width="1.4498%" height="15" fill="rgb(230,116,27)"/><text x="40.7431%" y="159.50"></text></g><g><title>type_of (120,261 samples, 0.22%)</title><rect x="41.7239%" y="133" width="0.2190%" height="15" fill="rgb(228,99,48)"/><text x="41.9739%" y="143.50"></text></g><g><title>evaluate_obligation (105,961 samples, 0.19%)</title><rect x="42.2012%" y="133" width="0.1930%" height="15" fill="rgb(253,11,6)"/><text x="42.4512%" y="143.50"></text></g><g><title>check_impl_item_well_formed (288,123 samples, 0.52%)</title><rect x="42.0111%" y="149" width="0.5247%" height="15" fill="rgb(247,143,39)"/><text x="42.2611%" y="159.50"></text></g><g><title>param_env (90,070 samples, 0.16%)</title><rect x="43.2642%" y="133" width="0.1640%" height="15" fill="rgb(236,97,10)"/><text x="43.5142%" y="143.50"></text></g><g><title>analysis (23,109,837 samples, 42.09%)</title><rect x="1.5174%" y="197" width="42.0890%" height="15" fill="rgb(233,208,19)"/><text x="1.7674%" y="207.50">analysis</text></g><g><title>type_check_crate (15,655,874 samples, 28.51%)</title><rect x="15.0930%" y="181" width="28.5134%" height="15" fill="rgb(216,164,2)"/><text x="15.3430%" y="191.50">type_check_crate</text></g><g><title>wf_checking (910,910 samples, 1.66%)</title><rect x="41.9474%" y="165" width="1.6590%" height="15" fill="rgb(220,129,5)"/><text x="42.1974%" y="175.50"></text></g><g><title>check_item_well_formed (587,816 samples, 1.07%)</title><rect x="42.5359%" y="149" width="1.0706%" height="15" fill="rgb(242,17,10)"/><text x="42.7859%" y="159.50"></text></g><g><title>codegen_crate (380,014 samples, 0.69%)</title><rect x="43.6254%" y="197" width="0.6921%" height="15" fill="rgb(242,107,0)"/><text x="43.8754%" y="207.50"></text></g><g><title>AST_validation (107,461 samples, 0.20%)</title><rect x="44.7331%" y="181" width="0.1957%" height="15" fill="rgb(251,28,31)"/><text x="44.9831%" y="191.50"></text></g><g><title>crate_injection (93,371 samples, 0.17%)</title><rect x="45.0254%" y="181" width="0.1701%" height="15" fill="rgb(233,223,10)"/><text x="45.2754%" y="191.50"></text></g><g><title>metadata_load_macro (120,341 samples, 0.22%)</title><rect x="78.0079%" y="149" width="0.2192%" height="15" fill="rgb(215,21,27)"/><text x="78.2579%" y="159.50"></text></g><g><title>macro_expand_crate (20,819,642 samples, 37.92%)</title><rect x="45.1955%" y="181" width="37.9180%" height="15" fill="rgb(232,23,21)"/><text x="45.4455%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (20,792,581 samples, 37.87%)</title><rect x="45.2448%" y="165" width="37.8687%" height="15" fill="rgb(244,5,23)"/><text x="45.4948%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,682,959 samples, 4.89%)</title><rect x="78.2271%" y="149" width="4.8864%" height="15" fill="rgb(226,81,46)"/><text x="78.4771%" y="159.50">metada..</text></g><g><title>metadata_register_crate (987,982 samples, 1.80%)</title><rect x="81.3141%" y="133" width="1.7994%" height="15" fill="rgb(247,70,30)"/><text x="81.5641%" y="143.50">m..</text></g><g><title>metadata_register_crate (77,811 samples, 0.14%)</title><rect x="82.9717%" y="117" width="0.1417%" height="15" fill="rgb(212,68,19)"/><text x="83.2217%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (124,421 samples, 0.23%)</title><rect x="83.1248%" y="181" width="0.2266%" height="15" fill="rgb(240,187,13)"/><text x="83.3748%" y="191.50"></text></g><g><title>finalize_macro_resolutions (210,292 samples, 0.38%)</title><rect x="83.4227%" y="165" width="0.3830%" height="15" fill="rgb(223,113,26)"/><text x="83.6727%" y="175.50"></text></g><g><title>late_resolve_crate (1,099,372 samples, 2.00%)</title><rect x="83.8057%" y="165" width="2.0022%" height="15" fill="rgb(206,192,2)"/><text x="84.0557%" y="175.50">l..</text></g><g><title>configure_and_expand (22,869,454 samples, 41.65%)</title><rect x="44.3175%" y="197" width="41.6512%" height="15" fill="rgb(241,108,4)"/><text x="44.5675%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,437,086 samples, 2.62%)</title><rect x="83.3514%" y="181" width="2.6173%" height="15" fill="rgb(247,173,49)"/><text x="83.6014%" y="191.50">re..</text></g><g><title>drop_ast (76,860 samples, 0.14%)</title><rect x="85.9687%" y="197" width="0.1400%" height="15" fill="rgb(224,114,35)"/><text x="86.2187%" y="207.50"></text></g><g><title>early_lint_checks (264,703 samples, 0.48%)</title><rect x="86.1368%" y="197" width="0.4821%" height="15" fill="rgb(245,159,27)"/><text x="86.3868%" y="207.50"></text></g><g><title>free_global_ctxt (2,500,977 samples, 4.55%)</title><rect x="86.6189%" y="197" width="4.5549%" height="15" fill="rgb(245,172,44)"/><text x="86.8689%" y="207.50">free_..</text></g><g><title>crate_hash (66,671 samples, 0.12%)</title><rect x="91.9264%" y="181" width="0.1214%" height="15" fill="rgb(236,23,11)"/><text x="92.1764%" y="191.50"></text></g><g><title>generate_crate_metadata (555,486 samples, 1.01%)</title><rect x="91.1739%" y="197" width="1.0117%" height="15" fill="rgb(205,117,38)"/><text x="91.4239%" y="207.50"></text></g><g><title>hir_lowering (1,122,823 samples, 2.04%)</title><rect x="92.1855%" y="197" width="2.0450%" height="15" fill="rgb(237,72,25)"/><text x="92.4355%" y="207.50">h..</text></g><g><title>parse_crate (1,822,670 samples, 3.32%)</title><rect x="94.3184%" y="197" width="3.3196%" height="15" fill="rgb(244,70,9)"/><text x="94.5684%" y="207.50">par..</text></g><g><title>prepare_outputs (338,894 samples, 0.62%)</title><rect x="97.6565%" y="197" width="0.6172%" height="15" fill="rgb(217,125,39)"/><text x="97.9065%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (480,525 samples, 0.88%)</title><rect x="98.2737%" y="197" width="0.8752%" height="15" fill="rgb(235,36,10)"/><text x="98.5237%" y="207.50"></text></g><g><title>setup_global_ctxt (148,732 samples, 0.27%)</title><rect x="99.1685%" y="197" width="0.2709%" height="15" fill="rgb(251,123,47)"/><text x="99.4185%" y="207.50"></text></g><g><title>all (54,907,050 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (54,907,050 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (307,833 samples, 0.56%)</title><rect x="99.4394%" y="197" width="0.5606%" height="15" fill="rgb(211,50,8)"/><text x="99.6894%" y="207.50"></text></g></svg></svg>