<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (700,437 samples, 0.20%)</title><rect x="18.1211%" y="101" width="0.2021%" height="15" fill="rgb(227,0,7)"/><text x="18.3711%" y="111.50"></text></g><g><title>item_attrs (657,246 samples, 0.19%)</title><rect x="18.9439%" y="69" width="0.1897%" height="15" fill="rgb(217,0,24)"/><text x="19.1939%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (635,416 samples, 0.18%)</title><rect x="18.9502%" y="53" width="0.1834%" height="15" fill="rgb(221,193,54)"/><text x="19.2002%" y="63.50"></text></g><g><title>codegen_fn_attrs (905,879 samples, 0.26%)</title><rect x="18.8852%" y="85" width="0.2614%" height="15" fill="rgb(248,212,6)"/><text x="19.1352%" y="95.50"></text></g><g><title>is_copy_raw (399,252 samples, 0.12%)</title><rect x="23.1746%" y="69" width="0.1152%" height="15" fill="rgb(208,68,35)"/><text x="23.4246%" y="79.50"></text></g><g><title>adt_drop_tys (470,524 samples, 0.14%)</title><rect x="23.4011%" y="37" width="0.1358%" height="15" fill="rgb(232,128,0)"/><text x="23.6511%" y="47.50"></text></g><g><title>adt_drop_tys (1,017,229 samples, 0.29%)</title><rect x="23.3812%" y="53" width="0.2935%" height="15" fill="rgb(207,160,47)"/><text x="23.6312%" y="63.50"></text></g><g><title>is_copy_raw (2,589,274 samples, 0.75%)</title><rect x="23.6764%" y="53" width="0.7472%" height="15" fill="rgb(228,23,34)"/><text x="23.9264%" y="63.50"></text></g><g><title>evaluate_obligation (2,149,671 samples, 0.62%)</title><rect x="23.8032%" y="37" width="0.6203%" height="15" fill="rgb(218,30,26)"/><text x="24.0532%" y="47.50"></text></g><g><title>needs_drop_raw (3,944,526 samples, 1.14%)</title><rect x="23.2916%" y="69" width="1.1382%" height="15" fill="rgb(220,122,19)"/><text x="23.5416%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (675,890 samples, 0.20%)</title><rect x="24.5899%" y="53" width="0.1950%" height="15" fill="rgb(250,228,42)"/><text x="24.8399%" y="63.50"></text></g><g><title>specialization_graph_of (409,514 samples, 0.12%)</title><rect x="24.8340%" y="53" width="0.1182%" height="15" fill="rgb(240,193,28)"/><text x="25.0840%" y="63.50"></text></g><g><title>resolve_instance (1,943,362 samples, 0.56%)</title><rect x="24.4387%" y="69" width="0.5608%" height="15" fill="rgb(216,20,37)"/><text x="24.6887%" y="79.50"></text></g><g><title>thir_body (5,132,925 samples, 1.48%)</title><rect x="25.0351%" y="69" width="1.4811%" height="15" fill="rgb(206,188,39)"/><text x="25.2851%" y="79.50"></text></g><g><title>mir_const (32,714,350 samples, 9.44%)</title><rect x="17.0986%" y="117" width="9.4399%" height="15" fill="rgb(217,207,13)"/><text x="17.3486%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (28,470,626 samples, 8.22%)</title><rect x="18.3232%" y="101" width="8.2154%" height="15" fill="rgb(231,73,38)"/><text x="18.5732%" y="111.50">unsafety_ch..</text></g><g><title>mir_built (25,613,623 samples, 7.39%)</title><rect x="19.1476%" y="85" width="7.3910%" height="15" fill="rgb(225,20,46)"/><text x="19.3976%" y="95.50">mir_built</text></g><g><title>mir_promoted (37,401,328 samples, 10.79%)</title><rect x="16.0294%" y="133" width="10.7924%" height="15" fill="rgb(210,31,41)"/><text x="16.2794%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (981,482 samples, 0.28%)</title><rect x="26.5386%" y="117" width="0.2832%" height="15" fill="rgb(221,200,47)"/><text x="26.7886%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (1,141,989 samples, 0.33%)</title><rect x="26.8233%" y="133" width="0.3295%" height="15" fill="rgb(226,26,5)"/><text x="27.0733%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,758,697 samples, 0.51%)</title><rect x="27.1528%" y="133" width="0.5075%" height="15" fill="rgb(249,33,26)"/><text x="27.4028%" y="143.50"></text></g><g><title>normalize_projection_ty (1,137,849 samples, 0.33%)</title><rect x="27.3320%" y="117" width="0.3283%" height="15" fill="rgb(235,183,28)"/><text x="27.5820%" y="127.50"></text></g><g><title>type_op_normalize_predicate (447,552 samples, 0.13%)</title><rect x="27.6603%" y="133" width="0.1291%" height="15" fill="rgb(221,5,38)"/><text x="27.9103%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,826,750 samples, 1.97%)</title><rect x="27.7909%" y="133" width="1.9699%" height="15" fill="rgb(247,18,42)"/><text x="28.0409%" y="143.50">t..</text></g><g><title>evaluate_obligation (389,734 samples, 0.11%)</title><rect x="29.6483%" y="117" width="0.1125%" height="15" fill="rgb(241,131,45)"/><text x="29.8983%" y="127.50"></text></g><g><title>MIR_borrow_checking (101,343,629 samples, 29.24%)</title><rect x="0.5260%" y="165" width="29.2434%" height="15" fill="rgb(249,31,29)"/><text x="0.7760%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (100,886,707 samples, 29.11%)</title><rect x="0.6578%" y="149" width="29.1115%" height="15" fill="rgb(225,111,53)"/><text x="0.9078%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (380,704 samples, 0.11%)</title><rect x="29.7693%" y="165" width="0.1099%" height="15" fill="rgb(238,160,17)"/><text x="30.0193%" y="175.50"></text></g><g><title>hir_module_items (549,097 samples, 0.16%)</title><rect x="29.8792%" y="165" width="0.1584%" height="15" fill="rgb(214,148,48)"/><text x="30.1292%" y="175.50"></text></g><g><title>should_inherit_track_caller (458,896 samples, 0.13%)</title><rect x="30.3729%" y="117" width="0.1324%" height="15" fill="rgb(232,36,49)"/><text x="30.6229%" y="127.50"></text></g><g><title>codegen_fn_attrs (727,088 samples, 0.21%)</title><rect x="30.3010%" y="133" width="0.2098%" height="15" fill="rgb(209,103,24)"/><text x="30.5510%" y="143.50"></text></g><g><title>check_mod_attrs (1,609,528 samples, 0.46%)</title><rect x="30.0464%" y="149" width="0.4644%" height="15" fill="rgb(229,88,8)"/><text x="30.2964%" y="159.50"></text></g><g><title>check_mod_const_bodies (375,375 samples, 0.11%)</title><rect x="30.5108%" y="149" width="0.1083%" height="15" fill="rgb(213,181,19)"/><text x="30.7608%" y="159.50"></text></g><g><title>lookup_deprecation_entry (372,403 samples, 0.11%)</title><rect x="30.8106%" y="133" width="0.1075%" height="15" fill="rgb(254,191,54)"/><text x="31.0606%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (960,421 samples, 0.28%)</title><rect x="30.6850%" y="149" width="0.2771%" height="15" fill="rgb(241,83,37)"/><text x="30.9350%" y="159.50"></text></g><g><title>misc_checking_1 (3,298,037 samples, 0.95%)</title><rect x="30.0377%" y="165" width="0.9517%" height="15" fill="rgb(233,36,39)"/><text x="30.2877%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,022,752 samples, 0.58%)</title><rect x="30.9900%" y="149" width="0.5837%" height="15" fill="rgb(226,3,54)"/><text x="31.2400%" y="159.50"></text></g><g><title>check_mod_liveness (1,682,418 samples, 0.49%)</title><rect x="31.0882%" y="133" width="0.4855%" height="15" fill="rgb(245,192,40)"/><text x="31.3382%" y="143.50"></text></g><g><title>type_uninhabited_from (525,504 samples, 0.15%)</title><rect x="31.4220%" y="117" width="0.1516%" height="15" fill="rgb(238,167,29)"/><text x="31.6720%" y="127.50"></text></g><g><title>type_uninhabited_from (409,843 samples, 0.12%)</title><rect x="31.4554%" y="101" width="0.1183%" height="15" fill="rgb(232,182,51)"/><text x="31.7054%" y="111.50"></text></g><g><title>misc_checking_2 (4,859,513 samples, 1.40%)</title><rect x="30.9894%" y="165" width="1.4022%" height="15" fill="rgb(231,60,39)"/><text x="31.2394%" y="175.50"></text></g><g><title>match_checking (2,834,641 samples, 0.82%)</title><rect x="31.5737%" y="149" width="0.8180%" height="15" fill="rgb(208,69,12)"/><text x="31.8237%" y="159.50"></text></g><g><title>check_match (2,723,331 samples, 0.79%)</title><rect x="31.6058%" y="133" width="0.7858%" height="15" fill="rgb(235,93,37)"/><text x="31.8558%" y="143.50"></text></g><g><title>check_private_in_public (570,497 samples, 0.16%)</title><rect x="32.3952%" y="149" width="0.1646%" height="15" fill="rgb(213,116,39)"/><text x="32.6452%" y="159.50"></text></g><g><title>death_checking (1,722,749 samples, 0.50%)</title><rect x="32.5598%" y="149" width="0.4971%" height="15" fill="rgb(222,207,29)"/><text x="32.8098%" y="159.50"></text></g><g><title>fn_abi_of_instance (456,895 samples, 0.13%)</title><rect x="33.7632%" y="85" width="0.1318%" height="15" fill="rgb(206,96,30)"/><text x="34.0132%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,153,072 samples, 0.33%)</title><rect x="33.6392%" y="117" width="0.3327%" height="15" fill="rgb(218,138,4)"/><text x="33.8892%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,148,212 samples, 0.33%)</title><rect x="33.6406%" y="101" width="0.3313%" height="15" fill="rgb(250,191,14)"/><text x="33.8906%" y="111.50"></text></g><g><title>param_env (488,966 samples, 0.14%)</title><rect x="34.0245%" y="117" width="0.1411%" height="15" fill="rgb(239,60,40)"/><text x="34.2745%" y="127.50"></text></g><g><title>crate_lints (5,272,588 samples, 1.52%)</title><rect x="33.0577%" y="133" width="1.5214%" height="15" fill="rgb(206,27,48)"/><text x="33.3077%" y="143.50"></text></g><g><title>type_of (1,334,116 samples, 0.38%)</title><rect x="34.1941%" y="117" width="0.3850%" height="15" fill="rgb(225,35,8)"/><text x="34.4441%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,064,574 samples, 0.31%)</title><rect x="34.2719%" y="101" width="0.3072%" height="15" fill="rgb(250,213,24)"/><text x="34.5219%" y="111.50"></text></g><g><title>lint_checking (7,359,221 samples, 2.12%)</title><rect x="33.0569%" y="149" width="2.1236%" height="15" fill="rgb(247,123,22)"/><text x="33.3069%" y="159.50">l..</text></g><g><title>module_lints (2,084,063 samples, 0.60%)</title><rect x="34.5791%" y="133" width="0.6014%" height="15" fill="rgb(231,138,38)"/><text x="34.8291%" y="143.50"></text></g><g><title>lint_mod (2,074,373 samples, 0.60%)</title><rect x="34.5819%" y="117" width="0.5986%" height="15" fill="rgb(231,145,46)"/><text x="34.8319%" y="127.50"></text></g><g><title>privacy_access_levels (1,135,583 samples, 0.33%)</title><rect x="35.1805%" y="149" width="0.3277%" height="15" fill="rgb(251,118,11)"/><text x="35.4305%" y="159.50"></text></g><g><title>privacy_checking_modules (3,117,594 samples, 0.90%)</title><rect x="35.5081%" y="149" width="0.8996%" height="15" fill="rgb(217,147,25)"/><text x="35.7581%" y="159.50"></text></g><g><title>check_mod_privacy (3,112,014 samples, 0.90%)</title><rect x="35.5098%" y="133" width="0.8980%" height="15" fill="rgb(247,81,37)"/><text x="35.7598%" y="143.50"></text></g><g><title>misc_checking_3 (13,947,364 samples, 4.02%)</title><rect x="32.3916%" y="165" width="4.0246%" height="15" fill="rgb(209,12,38)"/><text x="32.6416%" y="175.50">misc..</text></g><g><title>impl_parent (3,322,160 samples, 0.96%)</title><rect x="38.4045%" y="101" width="0.9586%" height="15" fill="rgb(227,1,9)"/><text x="38.6545%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,922,077 samples, 0.55%)</title><rect x="38.8085%" y="85" width="0.5546%" height="15" fill="rgb(248,47,43)"/><text x="39.0585%" y="95.50"></text></g><g><title>impl_trait_ref (6,494,960 samples, 1.87%)</title><rect x="39.3632%" y="101" width="1.8742%" height="15" fill="rgb(221,10,30)"/><text x="39.6132%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,109,160 samples, 1.47%)</title><rect x="39.7630%" y="85" width="1.4743%" height="15" fill="rgb(210,229,1)"/><text x="40.0130%" y="95.50"></text></g><g><title>trait_impls_of (1,254,004 samples, 0.36%)</title><rect x="41.2566%" y="101" width="0.3619%" height="15" fill="rgb(222,148,37)"/><text x="41.5066%" y="111.50"></text></g><g><title>implementations_of_trait (372,314 samples, 0.11%)</title><rect x="41.5110%" y="85" width="0.1074%" height="15" fill="rgb(234,67,33)"/><text x="41.7610%" y="95.50"></text></g><g><title>coherent_trait (17,807,258 samples, 5.14%)</title><rect x="36.4823%" y="133" width="5.1384%" height="15" fill="rgb(247,98,35)"/><text x="36.7323%" y="143.50">cohere..</text></g><g><title>specialization_graph_of (17,131,951 samples, 4.94%)</title><rect x="36.6771%" y="117" width="4.9435%" height="15" fill="rgb(247,138,52)"/><text x="36.9271%" y="127.50">specia..</text></g><g><title>coherence_checking (17,933,228 samples, 5.17%)</title><rect x="36.4736%" y="149" width="5.1747%" height="15" fill="rgb(213,79,30)"/><text x="36.7236%" y="159.50">cohere..</text></g><g><title>associated_item (1,263,745 samples, 0.36%)</title><rect x="56.4513%" y="85" width="0.3647%" height="15" fill="rgb(246,177,23)"/><text x="56.7013%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,161,113 samples, 0.34%)</title><rect x="56.4809%" y="69" width="0.3350%" height="15" fill="rgb(230,62,27)"/><text x="56.7309%" y="79.50"></text></g><g><title>associated_items (1,532,498 samples, 0.44%)</title><rect x="56.3851%" y="101" width="0.4422%" height="15" fill="rgb(216,154,8)"/><text x="56.6351%" y="111.50"></text></g><g><title>dropck_outlives (1,082,125 samples, 0.31%)</title><rect x="56.8681%" y="101" width="0.3123%" height="15" fill="rgb(244,35,45)"/><text x="57.1181%" y="111.50"></text></g><g><title>predicates_of (476,349 samples, 0.14%)</title><rect x="58.2880%" y="85" width="0.1375%" height="15" fill="rgb(251,115,12)"/><text x="58.5380%" y="95.50"></text></g><g><title>trait_impls_of (619,709 samples, 0.18%)</title><rect x="58.5296%" y="85" width="0.1788%" height="15" fill="rgb(240,54,50)"/><text x="58.7796%" y="95.50"></text></g><g><title>evaluate_obligation (5,300,648 samples, 1.53%)</title><rect x="57.1804%" y="101" width="1.5295%" height="15" fill="rgb(233,84,52)"/><text x="57.4304%" y="111.50"></text></g><g><title>evaluate_obligation (388,176 samples, 0.11%)</title><rect x="59.2129%" y="85" width="0.1120%" height="15" fill="rgb(207,117,47)"/><text x="59.4629%" y="95.50"></text></g><g><title>method_autoderef_steps (768,806 samples, 0.22%)</title><rect x="59.1066%" y="101" width="0.2218%" height="15" fill="rgb(249,43,39)"/><text x="59.3566%" y="111.50"></text></g><g><title>predicates_of (762,008 samples, 0.22%)</title><rect x="59.3917%" y="101" width="0.2199%" height="15" fill="rgb(209,38,44)"/><text x="59.6417%" y="111.50"></text></g><g><title>predicates_defined_on (519,406 samples, 0.15%)</title><rect x="59.4617%" y="85" width="0.1499%" height="15" fill="rgb(236,212,23)"/><text x="59.7117%" y="95.50"></text></g><g><title>dropck_outlives (449,974 samples, 0.13%)</title><rect x="74.0581%" y="85" width="0.1298%" height="15" fill="rgb(242,79,21)"/><text x="74.3081%" y="95.50"></text></g><g><title>evaluate_obligation (2,230,480 samples, 0.64%)</title><rect x="74.1879%" y="85" width="0.6436%" height="15" fill="rgb(211,96,35)"/><text x="74.4379%" y="95.50"></text></g><g><title>method_autoderef_steps (443,156 samples, 0.13%)</title><rect x="75.0597%" y="85" width="0.1279%" height="15" fill="rgb(253,215,40)"/><text x="75.3097%" y="95.50"></text></g><g><title>typeck (54,103,558 samples, 15.61%)</title><rect x="59.6741%" y="101" width="15.6119%" height="15" fill="rgb(211,81,21)"/><text x="59.9241%" y="111.50">typeck</text></g><g><title>item_bodies_checking (116,650,058 samples, 33.66%)</title><rect x="41.6676%" y="149" width="33.6601%" height="15" fill="rgb(208,190,38)"/><text x="41.9176%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (116,645,838 samples, 33.66%)</title><rect x="41.6688%" y="133" width="33.6589%" height="15" fill="rgb(235,213,38)"/><text x="41.9188%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (116,357,077 samples, 33.58%)</title><rect x="41.7522%" y="117" width="33.5756%" height="15" fill="rgb(237,122,38)"/><text x="42.0022%" y="127.50">typeck</text></g><g><title>associated_items (489,016 samples, 0.14%)</title><rect x="76.3911%" y="101" width="0.1411%" height="15" fill="rgb(244,218,35)"/><text x="76.6411%" y="111.50"></text></g><g><title>adt_dtorck_constraint (425,386 samples, 0.12%)</title><rect x="76.6467%" y="69" width="0.1227%" height="15" fill="rgb(240,68,47)"/><text x="76.8967%" y="79.50"></text></g><g><title>dropck_outlives (848,530 samples, 0.24%)</title><rect x="76.5341%" y="101" width="0.2448%" height="15" fill="rgb(210,16,53)"/><text x="76.7841%" y="111.50"></text></g><g><title>adt_dtorck_constraint (745,519 samples, 0.22%)</title><rect x="76.5638%" y="85" width="0.2151%" height="15" fill="rgb(235,124,12)"/><text x="76.8138%" y="95.50"></text></g><g><title>item_types_checking (5,937,376 samples, 1.71%)</title><rect x="75.3278%" y="149" width="1.7133%" height="15" fill="rgb(224,169,11)"/><text x="75.5778%" y="159.50"></text></g><g><title>check_mod_item_types (5,929,525 samples, 1.71%)</title><rect x="75.3300%" y="133" width="1.7110%" height="15" fill="rgb(250,166,2)"/><text x="75.5800%" y="143.50"></text></g><g><title>typeck (3,869,962 samples, 1.12%)</title><rect x="75.9243%" y="117" width="1.1167%" height="15" fill="rgb(242,216,29)"/><text x="76.1743%" y="127.50"></text></g><g><title>fn_sig (888,790 samples, 0.26%)</title><rect x="77.2465%" y="117" width="0.2565%" height="15" fill="rgb(230,116,27)"/><text x="77.4965%" y="127.50"></text></g><g><title>named_region_map (1,215,895 samples, 0.35%)</title><rect x="77.6367%" y="101" width="0.3509%" height="15" fill="rgb(228,99,48)"/><text x="77.8867%" y="111.50"></text></g><g><title>resolve_lifetimes (1,169,465 samples, 0.34%)</title><rect x="77.6501%" y="85" width="0.3375%" height="15" fill="rgb(253,11,6)"/><text x="77.9001%" y="95.50"></text></g><g><title>lint_levels (772,189 samples, 0.22%)</title><rect x="77.7647%" y="69" width="0.2228%" height="15" fill="rgb(247,143,39)"/><text x="78.0147%" y="79.50"></text></g><g><title>generics_of (1,711,293 samples, 0.49%)</title><rect x="77.5029%" y="117" width="0.4938%" height="15" fill="rgb(236,97,10)"/><text x="77.7529%" y="127.50"></text></g><g><title>explicit_predicates_of (494,525 samples, 0.14%)</title><rect x="78.1275%" y="85" width="0.1427%" height="15" fill="rgb(233,208,19)"/><text x="78.3775%" y="95.50"></text></g><g><title>predicates_of (1,507,253 samples, 0.43%)</title><rect x="78.0251%" y="117" width="0.4349%" height="15" fill="rgb(216,164,2)"/><text x="78.2751%" y="127.50"></text></g><g><title>predicates_defined_on (1,371,973 samples, 0.40%)</title><rect x="78.0641%" y="101" width="0.3959%" height="15" fill="rgb(220,129,5)"/><text x="78.3141%" y="111.50"></text></g><g><title>inferred_outlives_of (657,667 samples, 0.19%)</title><rect x="78.2702%" y="85" width="0.1898%" height="15" fill="rgb(242,17,10)"/><text x="78.5202%" y="95.50"></text></g><g><title>inferred_outlives_crate (601,327 samples, 0.17%)</title><rect x="78.2865%" y="69" width="0.1735%" height="15" fill="rgb(242,107,0)"/><text x="78.5365%" y="79.50"></text></g><g><title>type_of (405,335 samples, 0.12%)</title><rect x="78.3430%" y="53" width="0.1170%" height="15" fill="rgb(251,28,31)"/><text x="78.5930%" y="63.50"></text></g><g><title>type_collecting (5,112,596 samples, 1.48%)</title><rect x="77.0422%" y="149" width="1.4753%" height="15" fill="rgb(233,223,10)"/><text x="77.2922%" y="159.50"></text></g><g><title>collect_mod_item_types (5,096,616 samples, 1.47%)</title><rect x="77.0469%" y="133" width="1.4707%" height="15" fill="rgb(215,21,27)"/><text x="77.2969%" y="143.50"></text></g><g><title>evaluate_obligation (755,906 samples, 0.22%)</title><rect x="79.7579%" y="117" width="0.2181%" height="15" fill="rgb(232,23,21)"/><text x="80.0079%" y="127.50"></text></g><g><title>implied_outlives_bounds (364,444 samples, 0.11%)</title><rect x="79.9760%" y="117" width="0.1052%" height="15" fill="rgb(244,5,23)"/><text x="80.2260%" y="127.50"></text></g><g><title>param_env (650,425 samples, 0.19%)</title><rect x="80.0812%" y="117" width="0.1877%" height="15" fill="rgb(226,81,46)"/><text x="80.3312%" y="127.50"></text></g><g><title>check_impl_item_well_formed (6,919,737 samples, 2.00%)</title><rect x="78.6732%" y="133" width="1.9967%" height="15" fill="rgb(247,70,30)"/><text x="78.9232%" y="143.50">c..</text></g><g><title>region_scope_tree (1,370,688 samples, 0.40%)</title><rect x="80.2744%" y="117" width="0.3955%" height="15" fill="rgb(212,68,19)"/><text x="80.5244%" y="127.50"></text></g><g><title>adt_sized_constraint (498,414 samples, 0.14%)</title><rect x="81.8995%" y="101" width="0.1438%" height="15" fill="rgb(240,187,13)"/><text x="82.1495%" y="111.50"></text></g><g><title>evaluate_obligation (2,434,898 samples, 0.70%)</title><rect x="81.4543%" y="117" width="0.7026%" height="15" fill="rgb(223,113,26)"/><text x="81.7043%" y="127.50"></text></g><g><title>object_safety_violations (721,178 samples, 0.21%)</title><rect x="82.2127%" y="117" width="0.2081%" height="15" fill="rgb(206,192,2)"/><text x="82.4627%" y="127.50"></text></g><g><title>param_env (643,286 samples, 0.19%)</title><rect x="82.4208%" y="117" width="0.1856%" height="15" fill="rgb(241,108,4)"/><text x="82.6708%" y="127.50"></text></g><g><title>region_scope_tree (406,004 samples, 0.12%)</title><rect x="82.6469%" y="117" width="0.1172%" height="15" fill="rgb(247,173,49)"/><text x="82.8969%" y="127.50"></text></g><g><title>analysis (286,092,159 samples, 82.55%)</title><rect x="0.2614%" y="181" width="82.5538%" height="15" fill="rgb(224,114,35)"/><text x="0.5114%" y="191.50">analysis</text></g><g><title>type_check_crate (160,796,686 samples, 46.40%)</title><rect x="36.4162%" y="165" width="46.3989%" height="15" fill="rgb(245,159,27)"/><text x="36.6662%" y="175.50">type_check_crate</text></g><g><title>wf_checking (14,873,164 samples, 4.29%)</title><rect x="78.5234%" y="149" width="4.2917%" height="15" fill="rgb(245,172,44)"/><text x="78.7734%" y="159.50">wf_ch..</text></g><g><title>check_item_well_formed (7,434,372 samples, 2.15%)</title><rect x="80.6699%" y="133" width="2.1452%" height="15" fill="rgb(236,23,11)"/><text x="80.9199%" y="143.50">c..</text></g><g><title>codegen_crate (627,217 samples, 0.18%)</title><rect x="82.8168%" y="181" width="0.1810%" height="15" fill="rgb(205,117,38)"/><text x="83.0668%" y="191.50"></text></g><g><title>metadata_register_crate (1,355,516 samples, 0.39%)</title><rect x="90.0353%" y="133" width="0.3911%" height="15" fill="rgb(237,72,25)"/><text x="90.2853%" y="143.50"></text></g><g><title>metadata_register_crate (487,915 samples, 0.14%)</title><rect x="90.2856%" y="117" width="0.1408%" height="15" fill="rgb(244,70,9)"/><text x="90.5356%" y="127.50"></text></g><g><title>macro_expand_crate (25,442,171 samples, 7.34%)</title><rect x="83.1966%" y="165" width="7.3415%" height="15" fill="rgb(217,125,39)"/><text x="83.4466%" y="175.50">macro_expa..</text></g><g><title>expand_crate (25,431,431 samples, 7.34%)</title><rect x="83.1997%" y="149" width="7.3384%" height="15" fill="rgb(235,36,10)"/><text x="83.4497%" y="159.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (387,035 samples, 0.11%)</title><rect x="90.4264%" y="133" width="0.1117%" height="15" fill="rgb(251,123,47)"/><text x="90.6764%" y="143.50"></text></g><g><title>late_resolve_crate (8,053,759 samples, 2.32%)</title><rect x="90.6680%" y="149" width="2.3240%" height="15" fill="rgb(221,13,13)"/><text x="90.9180%" y="159.50">l..</text></g><g><title>configure_and_expand (34,980,686 samples, 10.09%)</title><rect x="82.9978%" y="181" width="10.0939%" height="15" fill="rgb(238,131,9)"/><text x="83.2478%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (8,812,937 samples, 2.54%)</title><rect x="90.5487%" y="165" width="2.5430%" height="15" fill="rgb(211,50,8)"/><text x="90.7987%" y="175.50">re..</text></g><g><title>drop_ast (536,976 samples, 0.15%)</title><rect x="93.0917%" y="181" width="0.1549%" height="15" fill="rgb(245,182,24)"/><text x="93.3417%" y="191.50"></text></g><g><title>early_lint_checks (1,143,142 samples, 0.33%)</title><rect x="93.2525%" y="181" width="0.3299%" height="15" fill="rgb(242,14,37)"/><text x="93.5025%" y="191.50"></text></g><g><title>free_global_ctxt (5,841,064 samples, 1.69%)</title><rect x="93.5824%" y="181" width="1.6855%" height="15" fill="rgb(246,228,12)"/><text x="93.8324%" y="191.50"></text></g><g><title>generate_crate_metadata (2,563,029 samples, 0.74%)</title><rect x="95.2679%" y="181" width="0.7396%" height="15" fill="rgb(213,55,15)"/><text x="95.5179%" y="191.50"></text></g><g><title>hir_lowering (9,728,998 samples, 2.81%)</title><rect x="96.0075%" y="181" width="2.8074%" height="15" fill="rgb(209,9,3)"/><text x="96.2575%" y="191.50">hi..</text></g><g><title>self_profile_alloc_query_strings (1,512,067 samples, 0.44%)</title><rect x="98.9546%" y="181" width="0.4363%" height="15" fill="rgb(230,59,30)"/><text x="99.2046%" y="191.50"></text></g><g><title>all (346,552,576 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (346,552,576 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (2,017,672 samples, 0.58%)</title><rect x="99.4178%" y="181" width="0.5822%" height="15" fill="rgb(232,18,1)"/><text x="99.6678%" y="191.50"></text></g></svg></svg>