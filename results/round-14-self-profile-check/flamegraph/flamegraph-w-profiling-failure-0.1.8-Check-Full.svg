<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (564,549 samples, 0.34%)</title><rect x="9.8564%" y="133" width="0.3408%" height="15" fill="rgb(227,0,7)"/><text x="10.1064%" y="143.50"></text></g><g><title>param_env (243,573 samples, 0.15%)</title><rect x="11.6780%" y="101" width="0.1471%" height="15" fill="rgb(217,0,24)"/><text x="11.9280%" y="111.50"></text></g><g><title>codegen_fn_attrs (248,011 samples, 0.15%)</title><rect x="12.1629%" y="85" width="0.1497%" height="15" fill="rgb(221,193,54)"/><text x="12.4129%" y="95.50"></text></g><g><title>adt_drop_tys (251,151 samples, 0.15%)</title><rect x="14.3785%" y="53" width="0.1516%" height="15" fill="rgb(248,212,6)"/><text x="14.6285%" y="63.50"></text></g><g><title>needs_drop_raw (1,496,670 samples, 0.90%)</title><rect x="14.2830%" y="69" width="0.9036%" height="15" fill="rgb(208,68,35)"/><text x="14.5330%" y="79.50"></text></g><g><title>is_copy_raw (1,087,304 samples, 0.66%)</title><rect x="14.5301%" y="53" width="0.6564%" height="15" fill="rgb(232,128,0)"/><text x="14.7801%" y="63.50"></text></g><g><title>evaluate_obligation (843,514 samples, 0.51%)</title><rect x="14.6773%" y="37" width="0.5093%" height="15" fill="rgb(207,160,47)"/><text x="14.9273%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (532,074 samples, 0.32%)</title><rect x="15.3372%" y="53" width="0.3212%" height="15" fill="rgb(228,23,34)"/><text x="15.5872%" y="63.50"></text></g><g><title>resolve_instance (1,113,582 samples, 0.67%)</title><rect x="15.1866%" y="69" width="0.6723%" height="15" fill="rgb(218,30,26)"/><text x="15.4366%" y="79.50"></text></g><g><title>thir_body (1,019,323 samples, 0.62%)</title><rect x="15.8909%" y="69" width="0.6154%" height="15" fill="rgb(220,122,19)"/><text x="16.1409%" y="79.50"></text></g><g><title>mir_const (9,145,596 samples, 5.52%)</title><rect x="11.0040%" y="117" width="5.5215%" height="15" fill="rgb(250,228,42)"/><text x="11.2540%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (7,785,635 samples, 4.70%)</title><rect x="11.8250%" y="101" width="4.7004%" height="15" fill="rgb(240,193,28)"/><text x="12.0750%" y="111.50">unsaf..</text></g><g><title>mir_built (6,978,017 samples, 4.21%)</title><rect x="12.3126%" y="85" width="4.2128%" height="15" fill="rgb(216,20,37)"/><text x="12.5626%" y="95.50">mir_b..</text></g><g><title>mir_const_qualif (329,433 samples, 0.20%)</title><rect x="16.5254%" y="117" width="0.1989%" height="15" fill="rgb(206,188,39)"/><text x="16.7754%" y="127.50"></text></g><g><title>mir_promoted (10,589,933 samples, 6.39%)</title><rect x="10.3311%" y="133" width="6.3935%" height="15" fill="rgb(217,207,13)"/><text x="10.5811%" y="143.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (710,629 samples, 0.43%)</title><rect x="16.7245%" y="133" width="0.4290%" height="15" fill="rgb(231,73,38)"/><text x="16.9745%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (216,834 samples, 0.13%)</title><rect x="17.1536%" y="133" width="0.1309%" height="15" fill="rgb(225,20,46)"/><text x="17.4036%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,693,717 samples, 2.23%)</title><rect x="17.2845%" y="133" width="2.2300%" height="15" fill="rgb(210,31,41)"/><text x="17.5345%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (31,269,499 samples, 18.88%)</title><rect x="0.6398%" y="165" width="18.8784%" height="15" fill="rgb(221,200,47)"/><text x="0.8898%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,057,145 samples, 18.75%)</title><rect x="0.7680%" y="149" width="18.7502%" height="15" fill="rgb(226,26,5)"/><text x="1.0180%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (182,962 samples, 0.11%)</title><rect x="19.5182%" y="165" width="0.1105%" height="15" fill="rgb(249,33,26)"/><text x="19.7682%" y="175.50"></text></g><g><title>hir_module_items (262,083 samples, 0.16%)</title><rect x="19.6286%" y="165" width="0.1582%" height="15" fill="rgb(235,183,28)"/><text x="19.8786%" y="175.50"></text></g><g><title>should_inherit_track_caller (284,783 samples, 0.17%)</title><rect x="20.1267%" y="117" width="0.1719%" height="15" fill="rgb(221,5,38)"/><text x="20.3767%" y="127.50"></text></g><g><title>codegen_fn_attrs (545,075 samples, 0.33%)</title><rect x="19.9825%" y="133" width="0.3291%" height="15" fill="rgb(247,18,42)"/><text x="20.2325%" y="143.50"></text></g><g><title>check_mod_attrs (826,850 samples, 0.50%)</title><rect x="19.8124%" y="149" width="0.4992%" height="15" fill="rgb(241,131,45)"/><text x="20.0624%" y="159.50"></text></g><g><title>check_mod_const_bodies (166,721 samples, 0.10%)</title><rect x="20.3116%" y="149" width="0.1007%" height="15" fill="rgb(249,31,29)"/><text x="20.5616%" y="159.50"></text></g><g><title>lookup_deprecation_entry (189,812 samples, 0.11%)</title><rect x="20.7017%" y="133" width="0.1146%" height="15" fill="rgb(225,111,53)"/><text x="20.9517%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (665,518 samples, 0.40%)</title><rect x="20.4740%" y="149" width="0.4018%" height="15" fill="rgb(238,160,17)"/><text x="20.7240%" y="159.50"></text></g><g><title>misc_checking_1 (1,882,931 samples, 1.14%)</title><rect x="19.7871%" y="165" width="1.1368%" height="15" fill="rgb(214,148,48)"/><text x="20.0371%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (676,897 samples, 0.41%)</title><rect x="20.9249%" y="149" width="0.4087%" height="15" fill="rgb(232,36,49)"/><text x="21.1749%" y="159.50"></text></g><g><title>check_mod_liveness (569,494 samples, 0.34%)</title><rect x="20.9897%" y="133" width="0.3438%" height="15" fill="rgb(209,103,24)"/><text x="21.2397%" y="143.50"></text></g><g><title>type_uninhabited_from (255,484 samples, 0.15%)</title><rect x="21.1793%" y="117" width="0.1542%" height="15" fill="rgb(229,88,8)"/><text x="21.4293%" y="127.50"></text></g><g><title>type_uninhabited_from (208,683 samples, 0.13%)</title><rect x="21.2075%" y="101" width="0.1260%" height="15" fill="rgb(213,181,19)"/><text x="21.4575%" y="111.50"></text></g><g><title>type_uninhabited_from (185,603 samples, 0.11%)</title><rect x="21.2215%" y="85" width="0.1121%" height="15" fill="rgb(254,191,54)"/><text x="21.4715%" y="95.50"></text></g><g><title>type_uninhabited_from (170,693 samples, 0.10%)</title><rect x="21.2305%" y="69" width="0.1031%" height="15" fill="rgb(241,83,37)"/><text x="21.4805%" y="79.50"></text></g><g><title>misc_checking_2 (1,304,594 samples, 0.79%)</title><rect x="20.9239%" y="165" width="0.7876%" height="15" fill="rgb(233,36,39)"/><text x="21.1739%" y="175.50"></text></g><g><title>match_checking (626,107 samples, 0.38%)</title><rect x="21.3335%" y="149" width="0.3780%" height="15" fill="rgb(226,3,54)"/><text x="21.5835%" y="159.50"></text></g><g><title>check_match (574,676 samples, 0.35%)</title><rect x="21.3646%" y="133" width="0.3469%" height="15" fill="rgb(245,192,40)"/><text x="21.6146%" y="143.50"></text></g><g><title>check_private_in_public (562,476 samples, 0.34%)</title><rect x="21.7182%" y="149" width="0.3396%" height="15" fill="rgb(238,167,29)"/><text x="21.9682%" y="159.50"></text></g><g><title>death_checking (762,039 samples, 0.46%)</title><rect x="22.0578%" y="149" width="0.4601%" height="15" fill="rgb(232,182,51)"/><text x="22.3078%" y="159.50"></text></g><g><title>item_attrs (167,202 samples, 0.10%)</title><rect x="22.4169%" y="133" width="0.1009%" height="15" fill="rgb(231,60,39)"/><text x="22.6669%" y="143.50"></text></g><g><title>eval_to_allocation_raw (198,702 samples, 0.12%)</title><rect x="23.1748%" y="117" width="0.1200%" height="15" fill="rgb(208,69,12)"/><text x="23.4248%" y="127.50"></text></g><g><title>eval_to_allocation_raw (197,852 samples, 0.12%)</title><rect x="23.1753%" y="101" width="0.1194%" height="15" fill="rgb(235,93,37)"/><text x="23.4253%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (173,722 samples, 0.10%)</title><rect x="23.1899%" y="85" width="0.1049%" height="15" fill="rgb(213,116,39)"/><text x="23.4399%" y="95.50"></text></g><g><title>eval_to_const_value_raw (211,933 samples, 0.13%)</title><rect x="23.2948%" y="117" width="0.1280%" height="15" fill="rgb(222,207,29)"/><text x="23.5448%" y="127.50"></text></g><g><title>eval_to_const_value_raw (202,672 samples, 0.12%)</title><rect x="23.3004%" y="101" width="0.1224%" height="15" fill="rgb(206,96,30)"/><text x="23.5504%" y="111.50"></text></g><g><title>eval_to_allocation_raw (195,962 samples, 0.12%)</title><rect x="23.3044%" y="85" width="0.1183%" height="15" fill="rgb(218,138,4)"/><text x="23.5544%" y="95.50"></text></g><g><title>param_env (659,065 samples, 0.40%)</title><rect x="23.4227%" y="117" width="0.3979%" height="15" fill="rgb(250,191,14)"/><text x="23.6727%" y="127.50"></text></g><g><title>predicates_of (307,232 samples, 0.19%)</title><rect x="23.6352%" y="101" width="0.1855%" height="15" fill="rgb(239,60,40)"/><text x="23.8852%" y="111.50"></text></g><g><title>predicates_defined_on (249,111 samples, 0.15%)</title><rect x="23.6703%" y="85" width="0.1504%" height="15" fill="rgb(206,27,48)"/><text x="23.9203%" y="95.50"></text></g><g><title>crate_lints (3,797,372 samples, 2.29%)</title><rect x="22.5191%" y="133" width="2.2926%" height="15" fill="rgb(225,35,8)"/><text x="22.7691%" y="143.50">c..</text></g><g><title>type_of (1,638,686 samples, 0.99%)</title><rect x="23.8224%" y="117" width="0.9893%" height="15" fill="rgb(250,213,24)"/><text x="24.0724%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,297,495 samples, 0.78%)</title><rect x="24.0284%" y="101" width="0.7833%" height="15" fill="rgb(247,123,22)"/><text x="24.2784%" y="111.50"></text></g><g><title>lint_checking (4,209,156 samples, 2.54%)</title><rect x="22.5179%" y="149" width="2.5412%" height="15" fill="rgb(231,138,38)"/><text x="22.7679%" y="159.50">li..</text></g><g><title>module_lints (409,704 samples, 0.25%)</title><rect x="24.8117%" y="133" width="0.2474%" height="15" fill="rgb(231,145,46)"/><text x="25.0617%" y="143.50"></text></g><g><title>lint_mod (398,544 samples, 0.24%)</title><rect x="24.8185%" y="117" width="0.2406%" height="15" fill="rgb(251,118,11)"/><text x="25.0685%" y="127.50"></text></g><g><title>privacy_access_levels (353,834 samples, 0.21%)</title><rect x="25.0591%" y="149" width="0.2136%" height="15" fill="rgb(217,147,25)"/><text x="25.3091%" y="159.50"></text></g><g><title>privacy_checking_modules (1,536,747 samples, 0.93%)</title><rect x="25.2727%" y="149" width="0.9278%" height="15" fill="rgb(247,81,37)"/><text x="25.5227%" y="159.50"></text></g><g><title>check_mod_privacy (1,526,926 samples, 0.92%)</title><rect x="25.2786%" y="133" width="0.9219%" height="15" fill="rgb(209,12,38)"/><text x="25.5286%" y="143.50"></text></g><g><title>misc_checking_3 (7,454,322 samples, 4.50%)</title><rect x="21.7115%" y="165" width="4.5004%" height="15" fill="rgb(227,1,9)"/><text x="21.9615%" y="175.50">misc_..</text></g><g><title>adt_destructor (318,553 samples, 0.19%)</title><rect x="26.3290%" y="117" width="0.1923%" height="15" fill="rgb(248,47,43)"/><text x="26.5790%" y="127.50"></text></g><g><title>coherent_trait (314,783 samples, 0.19%)</title><rect x="26.3313%" y="101" width="0.1900%" height="15" fill="rgb(221,10,30)"/><text x="26.5813%" y="111.50"></text></g><g><title>specialization_graph_of (312,863 samples, 0.19%)</title><rect x="26.3324%" y="85" width="0.1889%" height="15" fill="rgb(210,229,1)"/><text x="26.5824%" y="95.50"></text></g><g><title>evaluate_obligation (185,952 samples, 0.11%)</title><rect x="26.6190%" y="101" width="0.1123%" height="15" fill="rgb(222,148,37)"/><text x="26.8690%" y="111.50"></text></g><g><title>object_safety_violations (505,686 samples, 0.31%)</title><rect x="26.5371%" y="117" width="0.3053%" height="15" fill="rgb(234,67,33)"/><text x="26.7871%" y="127.50"></text></g><g><title>impl_parent (4,345,325 samples, 2.62%)</title><rect x="31.6568%" y="101" width="2.6234%" height="15" fill="rgb(247,98,35)"/><text x="31.9068%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (2,541,852 samples, 1.53%)</title><rect x="32.7456%" y="85" width="1.5346%" height="15" fill="rgb(247,138,52)"/><text x="32.9956%" y="95.50"></text></g><g><title>impl_trait_ref (8,946,820 samples, 5.40%)</title><rect x="34.2831%" y="101" width="5.4015%" height="15" fill="rgb(213,79,30)"/><text x="34.5331%" y="111.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,766,671 samples, 4.09%)</title><rect x="35.5994%" y="85" width="4.0853%" height="15" fill="rgb(246,177,23)"/><text x="35.8494%" y="95.50">meta..</text></g><g><title>trait_impls_of (1,531,545 samples, 0.92%)</title><rect x="39.7568%" y="101" width="0.9246%" height="15" fill="rgb(230,62,27)"/><text x="40.0068%" y="111.50"></text></g><g><title>implementations_of_trait (429,474 samples, 0.26%)</title><rect x="40.4222%" y="85" width="0.2593%" height="15" fill="rgb(216,154,8)"/><text x="40.6722%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (333,402 samples, 0.20%)</title><rect x="40.4802%" y="69" width="0.2013%" height="15" fill="rgb(244,35,45)"/><text x="40.7302%" y="79.50"></text></g><g><title>coherent_trait (23,832,785 samples, 14.39%)</title><rect x="26.2967%" y="133" width="14.3886%" height="15" fill="rgb(251,115,12)"/><text x="26.5467%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (22,889,485 samples, 13.82%)</title><rect x="26.8662%" y="117" width="13.8191%" height="15" fill="rgb(240,54,50)"/><text x="27.1162%" y="127.50">specialization_graph_..</text></g><g><title>coherence_checking (23,947,447 samples, 14.46%)</title><rect x="26.2795%" y="149" width="14.4578%" height="15" fill="rgb(233,84,52)"/><text x="26.5295%" y="159.50">coherence_checking</text></g><g><title>associated_item (460,685 samples, 0.28%)</title><rect x="52.3879%" y="85" width="0.2781%" height="15" fill="rgb(207,117,47)"/><text x="52.6379%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (443,455 samples, 0.27%)</title><rect x="52.3983%" y="69" width="0.2677%" height="15" fill="rgb(249,43,39)"/><text x="52.6483%" y="79.50"></text></g><g><title>associated_items (531,266 samples, 0.32%)</title><rect x="52.3564%" y="101" width="0.3207%" height="15" fill="rgb(209,38,44)"/><text x="52.6064%" y="111.50"></text></g><g><title>adt_dtorck_constraint (169,182 samples, 0.10%)</title><rect x="53.1069%" y="53" width="0.1021%" height="15" fill="rgb(236,212,23)"/><text x="53.3569%" y="63.50"></text></g><g><title>adt_dtorck_constraint (204,562 samples, 0.12%)</title><rect x="53.0933%" y="69" width="0.1235%" height="15" fill="rgb(242,79,21)"/><text x="53.3433%" y="79.50"></text></g><g><title>dropck_outlives (898,517 samples, 0.54%)</title><rect x="52.7026%" y="101" width="0.5425%" height="15" fill="rgb(211,96,35)"/><text x="52.9526%" y="111.50"></text></g><g><title>adt_dtorck_constraint (427,666 samples, 0.26%)</title><rect x="52.9869%" y="85" width="0.2582%" height="15" fill="rgb(253,215,40)"/><text x="53.2369%" y="95.50"></text></g><g><title>evaluate_obligation (1,820,180 samples, 1.10%)</title><rect x="53.2451%" y="101" width="1.0989%" height="15" fill="rgb(211,81,21)"/><text x="53.4951%" y="111.50"></text></g><g><title>method_autoderef_steps (392,294 samples, 0.24%)</title><rect x="54.5489%" y="101" width="0.2368%" height="15" fill="rgb(208,190,38)"/><text x="54.7989%" y="111.50"></text></g><g><title>evaluate_obligation (183,363 samples, 0.11%)</title><rect x="54.6750%" y="85" width="0.1107%" height="15" fill="rgb(235,213,38)"/><text x="54.9250%" y="95.50"></text></g><g><title>predicates_of (201,630 samples, 0.12%)</title><rect x="54.8310%" y="101" width="0.1217%" height="15" fill="rgb(237,122,38)"/><text x="55.0810%" y="111.50"></text></g><g><title>associated_items (238,162 samples, 0.14%)</title><rect x="57.5092%" y="85" width="0.1438%" height="15" fill="rgb(244,218,35)"/><text x="57.7592%" y="95.50"></text></g><g><title>dropck_outlives (201,143 samples, 0.12%)</title><rect x="57.6627%" y="85" width="0.1214%" height="15" fill="rgb(240,68,47)"/><text x="57.9127%" y="95.50"></text></g><g><title>evaluate_obligation (626,155 samples, 0.38%)</title><rect x="57.7841%" y="85" width="0.3780%" height="15" fill="rgb(210,16,53)"/><text x="58.0341%" y="95.50"></text></g><g><title>is_copy_raw (168,290 samples, 0.10%)</title><rect x="58.2821%" y="85" width="0.1016%" height="15" fill="rgb(235,124,12)"/><text x="58.5321%" y="95.50"></text></g><g><title>method_autoderef_steps (297,363 samples, 0.18%)</title><rect x="58.4169%" y="85" width="0.1795%" height="15" fill="rgb(224,169,11)"/><text x="58.6669%" y="95.50"></text></g><g><title>evaluate_obligation (170,693 samples, 0.10%)</title><rect x="58.4934%" y="69" width="0.1031%" height="15" fill="rgb(250,166,2)"/><text x="58.7434%" y="79.50"></text></g><g><title>typeck (6,148,348 samples, 3.71%)</title><rect x="54.9909%" y="101" width="3.7120%" height="15" fill="rgb(242,216,29)"/><text x="55.2409%" y="111.50">type..</text></g><g><title>item_bodies_checking (29,748,242 samples, 17.96%)</title><rect x="40.7705%" y="149" width="17.9599%" height="15" fill="rgb(230,116,27)"/><text x="41.0205%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,745,482 samples, 17.96%)</title><rect x="40.7722%" y="133" width="17.9583%" height="15" fill="rgb(228,99,48)"/><text x="41.0222%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (29,605,702 samples, 17.87%)</title><rect x="40.8566%" y="117" width="17.8739%" height="15" fill="rgb(253,11,6)"/><text x="41.1066%" y="127.50">typeck</text></g><g><title>item_types_checking (1,970,561 samples, 1.19%)</title><rect x="58.7305%" y="149" width="1.1897%" height="15" fill="rgb(247,143,39)"/><text x="58.9805%" y="159.50"></text></g><g><title>check_mod_item_types (1,957,821 samples, 1.18%)</title><rect x="58.7382%" y="133" width="1.1820%" height="15" fill="rgb(236,97,10)"/><text x="58.9882%" y="143.50"></text></g><g><title>typeck (259,983 samples, 0.16%)</title><rect x="59.7632%" y="117" width="0.1570%" height="15" fill="rgb(233,208,19)"/><text x="60.0132%" y="127.50"></text></g><g><title>fn_sig (641,656 samples, 0.39%)</title><rect x="60.1916%" y="117" width="0.3874%" height="15" fill="rgb(216,164,2)"/><text x="60.4416%" y="127.50"></text></g><g><title>named_region_map (228,121 samples, 0.14%)</title><rect x="60.7137%" y="101" width="0.1377%" height="15" fill="rgb(220,129,5)"/><text x="60.9637%" y="111.50"></text></g><g><title>resolve_lifetimes (205,711 samples, 0.12%)</title><rect x="60.7272%" y="85" width="0.1242%" height="15" fill="rgb(242,17,10)"/><text x="60.9772%" y="95.50"></text></g><g><title>generics_of (473,704 samples, 0.29%)</title><rect x="60.5790%" y="117" width="0.2860%" height="15" fill="rgb(242,107,0)"/><text x="60.8290%" y="127.50"></text></g><g><title>late_bound_vars_map (269,305 samples, 0.16%)</title><rect x="61.3002%" y="69" width="0.1626%" height="15" fill="rgb(251,28,31)"/><text x="61.5502%" y="79.50"></text></g><g><title>resolve_lifetimes (247,864 samples, 0.15%)</title><rect x="61.3132%" y="53" width="0.1496%" height="15" fill="rgb(233,223,10)"/><text x="61.5632%" y="63.50"></text></g><g><title>explicit_predicates_of (727,432 samples, 0.44%)</title><rect x="61.0533%" y="85" width="0.4392%" height="15" fill="rgb(215,21,27)"/><text x="61.3033%" y="95.50"></text></g><g><title>predicates_of (1,257,986 samples, 0.76%)</title><rect x="60.9204%" y="117" width="0.7595%" height="15" fill="rgb(232,23,21)"/><text x="61.1704%" y="127.50"></text></g><g><title>predicates_defined_on (1,171,885 samples, 0.71%)</title><rect x="60.9724%" y="101" width="0.7075%" height="15" fill="rgb(244,5,23)"/><text x="61.2224%" y="111.50"></text></g><g><title>inferred_outlives_of (310,423 samples, 0.19%)</title><rect x="61.4925%" y="85" width="0.1874%" height="15" fill="rgb(226,81,46)"/><text x="61.7425%" y="95.50"></text></g><g><title>inferred_outlives_crate (275,853 samples, 0.17%)</title><rect x="61.5134%" y="69" width="0.1665%" height="15" fill="rgb(247,70,30)"/><text x="61.7634%" y="79.50"></text></g><g><title>type_collecting (3,578,040 samples, 2.16%)</title><rect x="59.9236%" y="149" width="2.1602%" height="15" fill="rgb(212,68,19)"/><text x="60.1736%" y="159.50">t..</text></g><g><title>collect_mod_item_types (3,560,600 samples, 2.15%)</title><rect x="59.9341%" y="133" width="2.1496%" height="15" fill="rgb(240,187,13)"/><text x="60.1841%" y="143.50">c..</text></g><g><title>type_of (583,517 samples, 0.35%)</title><rect x="61.7315%" y="117" width="0.3523%" height="15" fill="rgb(223,113,26)"/><text x="61.9815%" y="127.50"></text></g><g><title>evaluate_obligation (606,737 samples, 0.37%)</title><rect x="64.4483%" y="117" width="0.3663%" height="15" fill="rgb(206,192,2)"/><text x="64.6983%" y="127.50"></text></g><g><title>implied_outlives_bounds (557,733 samples, 0.34%)</title><rect x="64.8169%" y="117" width="0.3367%" height="15" fill="rgb(241,108,4)"/><text x="65.0669%" y="127.50"></text></g><g><title>param_env (523,705 samples, 0.32%)</title><rect x="65.1536%" y="117" width="0.3162%" height="15" fill="rgb(247,173,49)"/><text x="65.4036%" y="127.50"></text></g><g><title>region_scope_tree (405,284 samples, 0.24%)</title><rect x="65.4892%" y="117" width="0.2447%" height="15" fill="rgb(224,114,35)"/><text x="65.7392%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,767,802 samples, 3.48%)</title><rect x="62.2879%" y="133" width="3.4822%" height="15" fill="rgb(245,159,27)"/><text x="62.5379%" y="143.50">che..</text></g><g><title>adt_sized_constraint (191,763 samples, 0.12%)</title><rect x="67.8074%" y="101" width="0.1158%" height="15" fill="rgb(245,172,44)"/><text x="68.0574%" y="111.50"></text></g><g><title>trait_impls_of (219,923 samples, 0.13%)</title><rect x="67.9795%" y="101" width="0.1328%" height="15" fill="rgb(236,23,11)"/><text x="68.2295%" y="111.50"></text></g><g><title>evaluate_obligation (1,224,542 samples, 0.74%)</title><rect x="67.3755%" y="117" width="0.7393%" height="15" fill="rgb(205,117,38)"/><text x="67.6255%" y="127.50"></text></g><g><title>implied_outlives_bounds (173,952 samples, 0.11%)</title><rect x="68.1341%" y="117" width="0.1050%" height="15" fill="rgb(237,72,25)"/><text x="68.3841%" y="127.50"></text></g><g><title>object_safety_violations (261,383 samples, 0.16%)</title><rect x="68.2392%" y="117" width="0.1578%" height="15" fill="rgb(244,70,9)"/><text x="68.4892%" y="127.50"></text></g><g><title>param_env (450,011 samples, 0.27%)</title><rect x="68.3970%" y="117" width="0.2717%" height="15" fill="rgb(217,125,39)"/><text x="68.6470%" y="127.50"></text></g><g><title>check_item_well_formed (5,075,226 samples, 3.06%)</title><rect x="65.7701%" y="133" width="3.0641%" height="15" fill="rgb(235,36,10)"/><text x="66.0201%" y="143.50">che..</text></g><g><title>implied_outlives_bounds (185,362 samples, 0.11%)</title><rect x="69.3387%" y="117" width="0.1119%" height="15" fill="rgb(251,123,47)"/><text x="69.5887%" y="127.50"></text></g><g><title>analysis (114,424,745 samples, 69.08%)</title><rect x="0.4433%" y="181" width="69.0818%" height="15" fill="rgb(221,13,13)"/><text x="0.6933%" y="191.50">analysis</text></g><g><title>type_check_crate (71,742,520 samples, 43.31%)</title><rect x="26.2119%" y="165" width="43.3132%" height="15" fill="rgb(238,131,9)"/><text x="26.4619%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,316,628 samples, 7.44%)</title><rect x="62.0892%" y="149" width="7.4359%" height="15" fill="rgb(211,50,8)"/><text x="62.3392%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,144,534 samples, 0.69%)</title><rect x="68.8341%" y="133" width="0.6910%" height="15" fill="rgb(245,182,24)"/><text x="69.0841%" y="143.50"></text></g><g><title>codegen_crate (597,877 samples, 0.36%)</title><rect x="69.5309%" y="181" width="0.3610%" height="15" fill="rgb(242,14,37)"/><text x="69.7809%" y="191.50"></text></g><g><title>AST_validation (235,553 samples, 0.14%)</title><rect x="70.0102%" y="165" width="0.1422%" height="15" fill="rgb(246,228,12)"/><text x="70.2602%" y="175.50"></text></g><g><title>metadata_load_macro (226,343 samples, 0.14%)</title><rect x="84.5173%" y="133" width="0.1367%" height="15" fill="rgb(213,55,15)"/><text x="84.7673%" y="143.50"></text></g><g><title>metadata_register_crate (9,411,025 samples, 5.68%)</title><rect x="84.6539%" y="133" width="5.6817%" height="15" fill="rgb(209,9,3)"/><text x="84.9039%" y="143.50">metadat..</text></g><g><title>metadata_register_crate (1,168,992 samples, 0.71%)</title><rect x="89.6299%" y="117" width="0.7058%" height="15" fill="rgb(230,59,30)"/><text x="89.8799%" y="127.50"></text></g><g><title>macro_expand_crate (33,712,066 samples, 20.35%)</title><rect x="70.2445%" y="165" width="20.3530%" height="15" fill="rgb(209,121,21)"/><text x="70.4945%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (33,698,546 samples, 20.34%)</title><rect x="70.2527%" y="149" width="20.3449%" height="15" fill="rgb(220,109,13)"/><text x="70.5027%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (433,855 samples, 0.26%)</title><rect x="90.3356%" y="133" width="0.2619%" height="15" fill="rgb(232,18,1)"/><text x="90.5856%" y="143.50"></text></g><g><title>late_resolve_crate (1,439,396 samples, 0.87%)</title><rect x="90.8324%" y="149" width="0.8690%" height="15" fill="rgb(215,41,42)"/><text x="91.0824%" y="159.50"></text></g><g><title>configure_and_expand (36,258,975 samples, 21.89%)</title><rect x="69.8918%" y="181" width="21.8907%" height="15" fill="rgb(224,123,36)"/><text x="70.1418%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,827,240 samples, 1.10%)</title><rect x="90.6793%" y="165" width="1.1032%" height="15" fill="rgb(240,125,3)"/><text x="90.9293%" y="175.50"></text></g><g><title>drop_ast (284,863 samples, 0.17%)</title><rect x="91.7825%" y="181" width="0.1720%" height="15" fill="rgb(205,98,50)"/><text x="92.0325%" y="191.50"></text></g><g><title>early_lint_checks (380,254 samples, 0.23%)</title><rect x="91.9676%" y="181" width="0.2296%" height="15" fill="rgb(205,185,37)"/><text x="92.2176%" y="191.50"></text></g><g><title>free_global_ctxt (4,187,586 samples, 2.53%)</title><rect x="92.1972%" y="181" width="2.5282%" height="15" fill="rgb(238,207,15)"/><text x="92.4472%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (1,736,370 samples, 1.05%)</title><rect x="94.7254%" y="181" width="1.0483%" height="15" fill="rgb(213,199,42)"/><text x="94.9754%" y="191.50"></text></g><g><title>hir_lowering (3,433,458 samples, 2.07%)</title><rect x="95.7737%" y="181" width="2.0729%" height="15" fill="rgb(235,201,11)"/><text x="96.0237%" y="191.50">h..</text></g><g><title>parse_crate (1,738,229 samples, 1.05%)</title><rect x="97.8814%" y="181" width="1.0494%" height="15" fill="rgb(207,46,11)"/><text x="98.1314%" y="191.50"></text></g><g><title>prepare_outputs (169,532 samples, 0.10%)</title><rect x="98.9355%" y="181" width="0.1024%" height="15" fill="rgb(241,35,35)"/><text x="99.1855%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,119,822 samples, 0.68%)</title><rect x="99.0378%" y="181" width="0.6761%" height="15" fill="rgb(243,32,47)"/><text x="99.2878%" y="191.50"></text></g><g><title>all (165,636,566 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (165,636,566 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (376,234 samples, 0.23%)</title><rect x="99.7729%" y="181" width="0.2271%" height="15" fill="rgb(243,110,44)"/><text x="100.0229%" y="191.50"></text></g></svg></svg>