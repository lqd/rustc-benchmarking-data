<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (245,453 samples, 0.14%)</title><rect x="11.6977%" y="149" width="0.1394%" height="15" fill="rgb(227,0,7)"/><text x="11.9477%" y="159.50"></text></g><g><title>param_env (478,894 samples, 0.27%)</title><rect x="13.5035%" y="117" width="0.2719%" height="15" fill="rgb(217,0,24)"/><text x="13.7535%" y="127.50"></text></g><g><title>item_attrs (343,554 samples, 0.20%)</title><rect x="14.2693%" y="85" width="0.1951%" height="15" fill="rgb(221,193,54)"/><text x="14.5193%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (330,423 samples, 0.19%)</title><rect x="14.2768%" y="69" width="0.1876%" height="15" fill="rgb(248,212,6)"/><text x="14.5268%" y="79.50"></text></g><g><title>codegen_fn_attrs (494,476 samples, 0.28%)</title><rect x="14.1995%" y="101" width="0.2808%" height="15" fill="rgb(208,68,35)"/><text x="14.4495%" y="111.50"></text></g><g><title>adt_drop_tys (356,195 samples, 0.20%)</title><rect x="17.1337%" y="69" width="0.2023%" height="15" fill="rgb(232,128,0)"/><text x="17.3837%" y="79.50"></text></g><g><title>needs_drop_raw (1,875,297 samples, 1.06%)</title><rect x="17.0318%" y="85" width="1.0648%" height="15" fill="rgb(207,160,47)"/><text x="17.2818%" y="95.50"></text></g><g><title>is_copy_raw (1,339,631 samples, 0.76%)</title><rect x="17.3359%" y="69" width="0.7607%" height="15" fill="rgb(228,23,34)"/><text x="17.5859%" y="79.50"></text></g><g><title>evaluate_obligation (1,107,956 samples, 0.63%)</title><rect x="17.4675%" y="53" width="0.6291%" height="15" fill="rgb(218,30,26)"/><text x="17.7175%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (522,320 samples, 0.30%)</title><rect x="18.3196%" y="69" width="0.2966%" height="15" fill="rgb(220,122,19)"/><text x="18.5696%" y="79.50"></text></g><g><title>impl_parent (192,341 samples, 0.11%)</title><rect x="18.9047%" y="53" width="0.1092%" height="15" fill="rgb(250,228,42)"/><text x="19.1547%" y="63.50"></text></g><g><title>specialization_graph_of (1,013,081 samples, 0.58%)</title><rect x="18.7192%" y="69" width="0.5752%" height="15" fill="rgb(240,193,28)"/><text x="18.9692%" y="79.50"></text></g><g><title>impl_trait_ref (494,044 samples, 0.28%)</title><rect x="19.0139%" y="53" width="0.2805%" height="15" fill="rgb(216,20,37)"/><text x="19.2639%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (427,603 samples, 0.24%)</title><rect x="19.0516%" y="37" width="0.2428%" height="15" fill="rgb(206,188,39)"/><text x="19.3016%" y="47.50"></text></g><g><title>resolve_instance (2,225,886 samples, 1.26%)</title><rect x="18.0966%" y="85" width="1.2639%" height="15" fill="rgb(217,207,13)"/><text x="18.3466%" y="95.50"></text></g><g><title>thir_body (1,584,584 samples, 0.90%)</title><rect x="19.4019%" y="85" width="0.8997%" height="15" fill="rgb(231,73,38)"/><text x="19.6519%" y="95.50"></text></g><g><title>mir_const (13,425,709 samples, 7.62%)</title><rect x="12.7013%" y="133" width="7.6233%" height="15" fill="rgb(225,20,46)"/><text x="12.9513%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (11,534,103 samples, 6.55%)</title><rect x="13.7754%" y="117" width="6.5492%" height="15" fill="rgb(210,31,41)"/><text x="14.0254%" y="127.50">unsafety_..</text></g><g><title>mir_built (10,292,747 samples, 5.84%)</title><rect x="14.4802%" y="101" width="5.8443%" height="15" fill="rgb(221,200,47)"/><text x="14.7302%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (15,104,766 samples, 8.58%)</title><rect x="11.9090%" y="149" width="8.5766%" height="15" fill="rgb(226,26,5)"/><text x="12.1590%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (283,625 samples, 0.16%)</title><rect x="20.3246%" y="133" width="0.1610%" height="15" fill="rgb(249,33,26)"/><text x="20.5746%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (626,408 samples, 0.36%)</title><rect x="20.4858%" y="149" width="0.3557%" height="15" fill="rgb(235,183,28)"/><text x="20.7358%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (387,444 samples, 0.22%)</title><rect x="20.8415%" y="149" width="0.2200%" height="15" fill="rgb(221,5,38)"/><text x="21.0915%" y="159.50"></text></g><g><title>normalize_projection_ty (262,152 samples, 0.15%)</title><rect x="20.9126%" y="133" width="0.1489%" height="15" fill="rgb(247,18,42)"/><text x="21.1626%" y="143.50"></text></g><g><title>type_op_normalize_predicate (183,223 samples, 0.10%)</title><rect x="21.0615%" y="149" width="0.1040%" height="15" fill="rgb(241,131,45)"/><text x="21.3115%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,975,368 samples, 1.69%)</title><rect x="21.1655%" y="149" width="1.6894%" height="15" fill="rgb(249,31,29)"/><text x="21.4155%" y="159.50"></text></g><g><title>MIR_borrow_checking (39,073,665 samples, 22.19%)</title><rect x="0.6799%" y="181" width="22.1864%" height="15" fill="rgb(225,111,53)"/><text x="0.9299%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (38,842,022 samples, 22.05%)</title><rect x="0.8114%" y="165" width="22.0549%" height="15" fill="rgb(238,160,17)"/><text x="1.0614%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (192,622 samples, 0.11%)</title><rect x="22.8663%" y="181" width="0.1094%" height="15" fill="rgb(214,148,48)"/><text x="23.1163%" y="191.50"></text></g><g><title>hir_module_items (255,133 samples, 0.14%)</title><rect x="22.9757%" y="181" width="0.1449%" height="15" fill="rgb(232,36,49)"/><text x="23.2257%" y="191.50"></text></g><g><title>codegen_fn_attrs (319,593 samples, 0.18%)</title><rect x="23.4573%" y="117" width="0.1815%" height="15" fill="rgb(209,103,24)"/><text x="23.7073%" y="127.50"></text></g><g><title>codegen_fn_attrs (566,389 samples, 0.32%)</title><rect x="23.3244%" y="149" width="0.3216%" height="15" fill="rgb(229,88,8)"/><text x="23.5744%" y="159.50"></text></g><g><title>should_inherit_track_caller (471,717 samples, 0.27%)</title><rect x="23.3782%" y="133" width="0.2678%" height="15" fill="rgb(213,181,19)"/><text x="23.6282%" y="143.50"></text></g><g><title>check_mod_attrs (895,341 samples, 0.51%)</title><rect x="23.1378%" y="165" width="0.5084%" height="15" fill="rgb(254,191,54)"/><text x="23.3878%" y="175.50"></text></g><g><title>check_mod_const_bodies (178,560 samples, 0.10%)</title><rect x="23.6462%" y="165" width="0.1014%" height="15" fill="rgb(241,83,37)"/><text x="23.8962%" y="175.50"></text></g><g><title>lookup_deprecation_entry (195,422 samples, 0.11%)</title><rect x="23.9417%" y="149" width="0.1110%" height="15" fill="rgb(233,36,39)"/><text x="24.1917%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (557,797 samples, 0.32%)</title><rect x="23.8122%" y="165" width="0.3167%" height="15" fill="rgb(226,3,54)"/><text x="24.0622%" y="175.50"></text></g><g><title>misc_checking_1 (1,857,751 samples, 1.05%)</title><rect x="23.1209%" y="181" width="1.0548%" height="15" fill="rgb(245,192,40)"/><text x="23.3709%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (718,848 samples, 0.41%)</title><rect x="24.1766%" y="165" width="0.4082%" height="15" fill="rgb(238,167,29)"/><text x="24.4266%" y="175.50"></text></g><g><title>check_mod_liveness (577,087 samples, 0.33%)</title><rect x="24.2571%" y="149" width="0.3277%" height="15" fill="rgb(232,182,51)"/><text x="24.5071%" y="159.50"></text></g><g><title>misc_checking_2 (1,772,960 samples, 1.01%)</title><rect x="24.1757%" y="181" width="1.0067%" height="15" fill="rgb(231,60,39)"/><text x="24.4257%" y="191.50"></text></g><g><title>match_checking (1,052,512 samples, 0.60%)</title><rect x="24.5848%" y="165" width="0.5976%" height="15" fill="rgb(208,69,12)"/><text x="24.8348%" y="175.50"></text></g><g><title>check_match (995,281 samples, 0.57%)</title><rect x="24.6173%" y="149" width="0.5651%" height="15" fill="rgb(235,93,37)"/><text x="24.8673%" y="159.50"></text></g><g><title>check_private_in_public (312,083 samples, 0.18%)</title><rect x="25.1881%" y="165" width="0.1772%" height="15" fill="rgb(213,116,39)"/><text x="25.4381%" y="175.50"></text></g><g><title>death_checking (682,557 samples, 0.39%)</title><rect x="25.3653%" y="165" width="0.3876%" height="15" fill="rgb(222,207,29)"/><text x="25.6153%" y="175.50"></text></g><g><title>param_env (660,198 samples, 0.37%)</title><rect x="26.4866%" y="133" width="0.3749%" height="15" fill="rgb(206,96,30)"/><text x="26.7366%" y="143.50"></text></g><g><title>predicates_of (328,153 samples, 0.19%)</title><rect x="26.6752%" y="117" width="0.1863%" height="15" fill="rgb(218,138,4)"/><text x="26.9252%" y="127.50"></text></g><g><title>predicates_defined_on (258,072 samples, 0.15%)</title><rect x="26.7150%" y="101" width="0.1465%" height="15" fill="rgb(250,191,14)"/><text x="26.9650%" y="111.50"></text></g><g><title>crate_lints (3,365,477 samples, 1.91%)</title><rect x="25.7538%" y="149" width="1.9110%" height="15" fill="rgb(239,60,40)"/><text x="26.0038%" y="159.50">c..</text></g><g><title>type_of (1,340,894 samples, 0.76%)</title><rect x="26.9033%" y="133" width="0.7614%" height="15" fill="rgb(206,27,48)"/><text x="27.1533%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (879,461 samples, 0.50%)</title><rect x="27.1653%" y="117" width="0.4994%" height="15" fill="rgb(225,35,8)"/><text x="27.4153%" y="127.50"></text></g><g><title>lint_checking (4,082,135 samples, 2.32%)</title><rect x="25.7529%" y="165" width="2.3179%" height="15" fill="rgb(250,213,24)"/><text x="26.0029%" y="175.50">l..</text></g><g><title>module_lints (715,088 samples, 0.41%)</title><rect x="27.6647%" y="149" width="0.4060%" height="15" fill="rgb(247,123,22)"/><text x="27.9147%" y="159.50"></text></g><g><title>lint_mod (706,198 samples, 0.40%)</title><rect x="27.6698%" y="133" width="0.4010%" height="15" fill="rgb(231,138,38)"/><text x="27.9198%" y="143.50"></text></g><g><title>privacy_access_levels (477,836 samples, 0.27%)</title><rect x="28.0707%" y="165" width="0.2713%" height="15" fill="rgb(231,145,46)"/><text x="28.3207%" y="175.50"></text></g><g><title>privacy_checking_modules (1,259,664 samples, 0.72%)</title><rect x="28.3421%" y="165" width="0.7153%" height="15" fill="rgb(251,118,11)"/><text x="28.5921%" y="175.50"></text></g><g><title>check_mod_privacy (1,253,344 samples, 0.71%)</title><rect x="28.3457%" y="149" width="0.7117%" height="15" fill="rgb(217,147,25)"/><text x="28.5957%" y="159.50"></text></g><g><title>misc_checking_3 (6,845,556 samples, 3.89%)</title><rect x="25.1824%" y="181" width="3.8870%" height="15" fill="rgb(247,81,37)"/><text x="25.4324%" y="191.50">misc..</text></g><g><title>impl_parent (2,679,438 samples, 1.52%)</title><rect x="31.5317%" y="117" width="1.5214%" height="15" fill="rgb(209,12,38)"/><text x="31.7817%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,520,637 samples, 0.86%)</title><rect x="32.1896%" y="101" width="0.8634%" height="15" fill="rgb(227,1,9)"/><text x="32.4396%" y="111.50"></text></g><g><title>impl_trait_ref (5,418,804 samples, 3.08%)</title><rect x="33.0531%" y="117" width="3.0769%" height="15" fill="rgb(248,47,43)"/><text x="33.3031%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,410,954 samples, 2.50%)</title><rect x="33.6253%" y="101" width="2.5046%" height="15" fill="rgb(221,10,30)"/><text x="33.8753%" y="111.50">me..</text></g><g><title>trait_impls_of (879,299 samples, 0.50%)</title><rect x="36.1823%" y="117" width="0.4993%" height="15" fill="rgb(210,229,1)"/><text x="36.4323%" y="127.50"></text></g><g><title>implementations_of_trait (284,843 samples, 0.16%)</title><rect x="36.5198%" y="101" width="0.1617%" height="15" fill="rgb(222,148,37)"/><text x="36.7698%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (209,023 samples, 0.12%)</title><rect x="36.5629%" y="85" width="0.1187%" height="15" fill="rgb(234,67,33)"/><text x="36.8129%" y="95.50"></text></g><g><title>coherent_trait (13,261,027 samples, 7.53%)</title><rect x="29.1573%" y="149" width="7.5297%" height="15" fill="rgb(247,98,35)"/><text x="29.4073%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (13,232,986 samples, 7.51%)</title><rect x="29.1732%" y="133" width="7.5138%" height="15" fill="rgb(247,138,52)"/><text x="29.4232%" y="143.50">specializa..</text></g><g><title>coherence_checking (13,356,939 samples, 7.58%)</title><rect x="29.1424%" y="165" width="7.5842%" height="15" fill="rgb(213,79,30)"/><text x="29.3924%" y="175.50">coherence_..</text></g><g><title>associated_item (423,243 samples, 0.24%)</title><rect x="49.3864%" y="101" width="0.2403%" height="15" fill="rgb(246,177,23)"/><text x="49.6364%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (335,231 samples, 0.19%)</title><rect x="49.4363%" y="85" width="0.1903%" height="15" fill="rgb(230,62,27)"/><text x="49.6863%" y="95.50"></text></g><g><title>associated_items (626,844 samples, 0.36%)</title><rect x="49.2899%" y="117" width="0.3559%" height="15" fill="rgb(216,154,8)"/><text x="49.5399%" y="127.50"></text></g><g><title>adt_dtorck_constraint (243,763 samples, 0.14%)</title><rect x="49.9392%" y="69" width="0.1384%" height="15" fill="rgb(244,35,45)"/><text x="50.1892%" y="79.50"></text></g><g><title>adt_dtorck_constraint (310,524 samples, 0.18%)</title><rect x="49.9083%" y="85" width="0.1763%" height="15" fill="rgb(251,115,12)"/><text x="50.1583%" y="95.50"></text></g><g><title>dropck_outlives (732,260 samples, 0.42%)</title><rect x="49.6858%" y="117" width="0.4158%" height="15" fill="rgb(240,54,50)"/><text x="49.9358%" y="127.50"></text></g><g><title>adt_dtorck_constraint (457,018 samples, 0.26%)</title><rect x="49.8421%" y="101" width="0.2595%" height="15" fill="rgb(233,84,52)"/><text x="50.0921%" y="111.50"></text></g><g><title>predicates_of (233,002 samples, 0.13%)</title><rect x="50.9794%" y="101" width="0.1323%" height="15" fill="rgb(207,117,47)"/><text x="51.2294%" y="111.50"></text></g><g><title>trait_impls_of (268,153 samples, 0.15%)</title><rect x="51.1878%" y="101" width="0.1523%" height="15" fill="rgb(249,43,39)"/><text x="51.4378%" y="111.50"></text></g><g><title>evaluate_obligation (2,182,937 samples, 1.24%)</title><rect x="50.1016%" y="117" width="1.2395%" height="15" fill="rgb(209,38,44)"/><text x="50.3516%" y="127.50"></text></g><g><title>item_attrs (224,763 samples, 0.13%)</title><rect x="51.5761%" y="117" width="0.1276%" height="15" fill="rgb(236,212,23)"/><text x="51.8261%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (213,693 samples, 0.12%)</title><rect x="51.5824%" y="101" width="0.1213%" height="15" fill="rgb(242,79,21)"/><text x="51.8324%" y="111.50"></text></g><g><title>evaluate_obligation (195,410 samples, 0.11%)</title><rect x="51.8947%" y="101" width="0.1110%" height="15" fill="rgb(211,96,35)"/><text x="52.1447%" y="111.50"></text></g><g><title>method_autoderef_steps (453,463 samples, 0.26%)</title><rect x="51.7598%" y="117" width="0.2575%" height="15" fill="rgb(253,215,40)"/><text x="52.0098%" y="127.50"></text></g><g><title>predicates_of (343,441 samples, 0.20%)</title><rect x="52.0852%" y="117" width="0.1950%" height="15" fill="rgb(211,81,21)"/><text x="52.3352%" y="127.50"></text></g><g><title>predicates_defined_on (244,330 samples, 0.14%)</title><rect x="52.1415%" y="101" width="0.1387%" height="15" fill="rgb(208,190,38)"/><text x="52.3915%" y="111.50"></text></g><g><title>associated_items (197,751 samples, 0.11%)</title><rect x="57.5425%" y="101" width="0.1123%" height="15" fill="rgb(235,213,38)"/><text x="57.7925%" y="111.50"></text></g><g><title>evaluate_obligation (2,035,717 samples, 1.16%)</title><rect x="57.7764%" y="101" width="1.1559%" height="15" fill="rgb(237,122,38)"/><text x="58.0264%" y="111.50"></text></g><g><title>trait_impls_of (547,795 samples, 0.31%)</title><rect x="58.6213%" y="85" width="0.3110%" height="15" fill="rgb(244,218,35)"/><text x="58.8713%" y="95.50"></text></g><g><title>implementations_of_trait (330,864 samples, 0.19%)</title><rect x="58.7445%" y="69" width="0.1879%" height="15" fill="rgb(240,68,47)"/><text x="58.9945%" y="79.50"></text></g><g><title>is_copy_raw (244,662 samples, 0.14%)</title><rect x="59.0558%" y="101" width="0.1389%" height="15" fill="rgb(210,16,53)"/><text x="59.3058%" y="111.50"></text></g><g><title>evaluate_obligation (189,782 samples, 0.11%)</title><rect x="59.0870%" y="85" width="0.1078%" height="15" fill="rgb(235,124,12)"/><text x="59.3370%" y="95.50"></text></g><g><title>predicates_of (180,533 samples, 0.10%)</title><rect x="59.3817%" y="101" width="0.1025%" height="15" fill="rgb(224,169,11)"/><text x="59.6317%" y="111.50"></text></g><g><title>typeck (12,690,381 samples, 7.21%)</title><rect x="52.3483%" y="117" width="7.2057%" height="15" fill="rgb(250,166,2)"/><text x="52.5983%" y="127.50">typeck</text></g><g><title>item_bodies_checking (40,238,638 samples, 22.85%)</title><rect x="36.7517%" y="165" width="22.8479%" height="15" fill="rgb(242,216,29)"/><text x="37.0017%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (40,234,458 samples, 22.85%)</title><rect x="36.7541%" y="149" width="22.8455%" height="15" fill="rgb(230,116,27)"/><text x="37.0041%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (40,095,847 samples, 22.77%)</title><rect x="36.8328%" y="133" width="22.7668%" height="15" fill="rgb(228,99,48)"/><text x="37.0828%" y="143.50">typeck</text></g><g><title>generics_of (475,535 samples, 0.27%)</title><rect x="61.9205%" y="101" width="0.2700%" height="15" fill="rgb(253,11,6)"/><text x="62.1705%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (342,265 samples, 0.19%)</title><rect x="61.9961%" y="85" width="0.1943%" height="15" fill="rgb(247,143,39)"/><text x="62.2461%" y="95.50"></text></g><g><title>impl_trait_ref (884,570 samples, 0.50%)</title><rect x="62.2600%" y="101" width="0.5023%" height="15" fill="rgb(236,97,10)"/><text x="62.5100%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (745,359 samples, 0.42%)</title><rect x="62.3391%" y="85" width="0.4232%" height="15" fill="rgb(233,208,19)"/><text x="62.5891%" y="95.50"></text></g><g><title>explicit_predicates_of (315,735 samples, 0.18%)</title><rect x="63.0377%" y="69" width="0.1793%" height="15" fill="rgb(216,164,2)"/><text x="63.2877%" y="79.50"></text></g><g><title>predicates_of (860,562 samples, 0.49%)</title><rect x="62.7824%" y="101" width="0.4886%" height="15" fill="rgb(220,129,5)"/><text x="63.0324%" y="111.50"></text></g><g><title>predicates_defined_on (577,048 samples, 0.33%)</title><rect x="62.9434%" y="85" width="0.3277%" height="15" fill="rgb(242,17,10)"/><text x="63.1934%" y="95.50"></text></g><g><title>specializes (1,984,534 samples, 1.13%)</title><rect x="63.2711%" y="101" width="1.1268%" height="15" fill="rgb(242,107,0)"/><text x="63.5211%" y="111.50"></text></g><g><title>param_env (1,208,345 samples, 0.69%)</title><rect x="63.7118%" y="85" width="0.6861%" height="15" fill="rgb(251,28,31)"/><text x="63.9618%" y="95.50"></text></g><g><title>def_span (614,869 samples, 0.35%)</title><rect x="64.0488%" y="69" width="0.3491%" height="15" fill="rgb(233,223,10)"/><text x="64.2988%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (551,318 samples, 0.31%)</title><rect x="64.0849%" y="53" width="0.3130%" height="15" fill="rgb(215,21,27)"/><text x="64.3349%" y="63.50"></text></g><g><title>evaluate_obligation (6,428,361 samples, 3.65%)</title><rect x="60.7915%" y="117" width="3.6501%" height="15" fill="rgb(232,23,21)"/><text x="61.0415%" y="127.50">eval..</text></g><g><title>typeck (7,558,264 samples, 4.29%)</title><rect x="60.2737%" y="133" width="4.2917%" height="15" fill="rgb(244,5,23)"/><text x="60.5237%" y="143.50">typeck</text></g><g><title>item_types_checking (8,746,348 samples, 4.97%)</title><rect x="59.5996%" y="165" width="4.9663%" height="15" fill="rgb(226,81,46)"/><text x="59.8496%" y="175.50">item_t..</text></g><g><title>check_mod_item_types (8,737,888 samples, 4.96%)</title><rect x="59.6044%" y="149" width="4.9615%" height="15" fill="rgb(247,70,30)"/><text x="59.8544%" y="159.50">check_..</text></g><g><title>fn_sig (646,728 samples, 0.37%)</title><rect x="64.7925%" y="133" width="0.3672%" height="15" fill="rgb(212,68,19)"/><text x="65.0425%" y="143.50"></text></g><g><title>is_late_bound_map (433,804 samples, 0.25%)</title><rect x="65.2667%" y="117" width="0.2463%" height="15" fill="rgb(240,187,13)"/><text x="65.5167%" y="127.50"></text></g><g><title>resolve_lifetimes (412,094 samples, 0.23%)</title><rect x="65.2790%" y="101" width="0.2340%" height="15" fill="rgb(223,113,26)"/><text x="65.5290%" y="111.50"></text></g><g><title>lint_levels (205,512 samples, 0.12%)</title><rect x="65.3963%" y="85" width="0.1167%" height="15" fill="rgb(206,192,2)"/><text x="65.6463%" y="95.50"></text></g><g><title>named_region_map (283,232 samples, 0.16%)</title><rect x="65.5130%" y="117" width="0.1608%" height="15" fill="rgb(241,108,4)"/><text x="65.7630%" y="127.50"></text></g><g><title>resolve_lifetimes (256,152 samples, 0.15%)</title><rect x="65.5284%" y="101" width="0.1454%" height="15" fill="rgb(247,173,49)"/><text x="65.7784%" y="111.50"></text></g><g><title>generics_of (925,630 samples, 0.53%)</title><rect x="65.1597%" y="133" width="0.5256%" height="15" fill="rgb(224,114,35)"/><text x="65.4097%" y="143.50"></text></g><g><title>explicit_predicates_of (270,425 samples, 0.15%)</title><rect x="65.8318%" y="101" width="0.1536%" height="15" fill="rgb(245,159,27)"/><text x="66.0818%" y="111.50"></text></g><g><title>predicates_of (688,798 samples, 0.39%)</title><rect x="65.7318%" y="133" width="0.3911%" height="15" fill="rgb(245,172,44)"/><text x="65.9818%" y="143.50"></text></g><g><title>predicates_defined_on (622,478 samples, 0.35%)</title><rect x="65.7695%" y="117" width="0.3534%" height="15" fill="rgb(236,23,11)"/><text x="66.0195%" y="127.50"></text></g><g><title>inferred_outlives_of (242,302 samples, 0.14%)</title><rect x="65.9854%" y="101" width="0.1376%" height="15" fill="rgb(205,117,38)"/><text x="66.2354%" y="111.50"></text></g><g><title>inferred_outlives_crate (215,162 samples, 0.12%)</title><rect x="66.0008%" y="85" width="0.1222%" height="15" fill="rgb(237,72,25)"/><text x="66.2508%" y="95.50"></text></g><g><title>type_collecting (2,897,962 samples, 1.65%)</title><rect x="64.5696%" y="165" width="1.6455%" height="15" fill="rgb(244,70,9)"/><text x="64.8196%" y="175.50"></text></g><g><title>collect_mod_item_types (2,881,992 samples, 1.64%)</title><rect x="64.5787%" y="149" width="1.6364%" height="15" fill="rgb(217,125,39)"/><text x="64.8287%" y="159.50"></text></g><g><title>evaluate_obligation (432,466 samples, 0.25%)</title><rect x="67.6681%" y="133" width="0.2456%" height="15" fill="rgb(235,36,10)"/><text x="67.9181%" y="143.50"></text></g><g><title>implied_outlives_bounds (252,813 samples, 0.14%)</title><rect x="67.9136%" y="133" width="0.1435%" height="15" fill="rgb(251,123,47)"/><text x="68.1636%" y="143.50"></text></g><g><title>object_safety_violations (479,655 samples, 0.27%)</title><rect x="68.0572%" y="133" width="0.2724%" height="15" fill="rgb(221,13,13)"/><text x="68.3072%" y="143.50"></text></g><g><title>param_env (337,164 samples, 0.19%)</title><rect x="68.3295%" y="133" width="0.1914%" height="15" fill="rgb(238,131,9)"/><text x="68.5795%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,185,949 samples, 2.38%)</title><rect x="66.3783%" y="149" width="2.3768%" height="15" fill="rgb(211,50,8)"/><text x="66.6283%" y="159.50">ch..</text></g><g><title>region_scope_tree (396,914 samples, 0.23%)</title><rect x="68.5297%" y="133" width="0.2254%" height="15" fill="rgb(245,182,24)"/><text x="68.7797%" y="143.50"></text></g><g><title>adt_sized_constraint (196,123 samples, 0.11%)</title><rect x="69.8729%" y="117" width="0.1114%" height="15" fill="rgb(242,14,37)"/><text x="70.1229%" y="127.50"></text></g><g><title>evaluate_obligation (613,636 samples, 0.35%)</title><rect x="69.6491%" y="133" width="0.3484%" height="15" fill="rgb(246,228,12)"/><text x="69.8991%" y="143.50"></text></g><g><title>param_env (335,233 samples, 0.19%)</title><rect x="70.0689%" y="133" width="0.1903%" height="15" fill="rgb(213,55,15)"/><text x="70.3189%" y="143.50"></text></g><g><title>check_item_well_formed (3,059,132 samples, 1.74%)</title><rect x="68.7551%" y="149" width="1.7370%" height="15" fill="rgb(209,9,3)"/><text x="69.0051%" y="159.50"></text></g><g><title>evaluate_obligation (194,242 samples, 0.11%)</title><rect x="70.5417%" y="133" width="0.1103%" height="15" fill="rgb(230,59,30)"/><text x="70.7917%" y="143.50"></text></g><g><title>adt_sized_constraint (184,582 samples, 0.10%)</title><rect x="70.5471%" y="117" width="0.1048%" height="15" fill="rgb(209,121,21)"/><text x="70.7971%" y="127.50"></text></g><g><title>analysis (123,663,407 samples, 70.22%)</title><rect x="0.4722%" y="197" width="70.2173%" height="15" fill="rgb(220,109,13)"/><text x="0.7222%" y="207.50">analysis</text></g><g><title>type_check_crate (73,299,376 samples, 41.62%)</title><rect x="29.0694%" y="181" width="41.6201%" height="15" fill="rgb(232,18,1)"/><text x="29.3194%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,871,267 samples, 4.47%)</title><rect x="66.2201%" y="165" width="4.4694%" height="15" fill="rgb(215,41,42)"/><text x="66.4701%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (347,664 samples, 0.20%)</title><rect x="70.4921%" y="149" width="0.1974%" height="15" fill="rgb(224,123,36)"/><text x="70.7421%" y="159.50"></text></g><g><title>codegen_crate (400,095 samples, 0.23%)</title><rect x="70.6963%" y="197" width="0.2272%" height="15" fill="rgb(240,125,3)"/><text x="70.9463%" y="207.50"></text></g><g><title>AST_validation (177,592 samples, 0.10%)</title><rect x="71.0470%" y="181" width="0.1008%" height="15" fill="rgb(205,98,50)"/><text x="71.2970%" y="191.50"></text></g><g><title>metadata_load_macro (291,035 samples, 0.17%)</title><rect x="88.3390%" y="149" width="0.1653%" height="15" fill="rgb(205,185,37)"/><text x="88.5890%" y="159.50"></text></g><g><title>metadata_register_crate (2,758,510 samples, 1.57%)</title><rect x="88.5042%" y="149" width="1.5663%" height="15" fill="rgb(238,207,15)"/><text x="88.7542%" y="159.50"></text></g><g><title>metadata_register_crate (939,619 samples, 0.53%)</title><rect x="89.5370%" y="133" width="0.5335%" height="15" fill="rgb(213,199,42)"/><text x="89.7870%" y="143.50"></text></g><g><title>macro_expand_crate (33,589,204 samples, 19.07%)</title><rect x="71.2543%" y="181" width="19.0723%" height="15" fill="rgb(235,201,11)"/><text x="71.5043%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (33,574,354 samples, 19.06%)</title><rect x="71.2627%" y="165" width="19.0639%" height="15" fill="rgb(207,46,11)"/><text x="71.5127%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (450,886 samples, 0.26%)</title><rect x="90.0706%" y="149" width="0.2560%" height="15" fill="rgb(241,35,35)"/><text x="90.3206%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (186,412 samples, 0.11%)</title><rect x="90.3295%" y="181" width="0.1058%" height="15" fill="rgb(243,32,47)"/><text x="90.5795%" y="191.50"></text></g><g><title>late_resolve_crate (2,179,575 samples, 1.24%)</title><rect x="90.6007%" y="165" width="1.2376%" height="15" fill="rgb(247,202,23)"/><text x="90.8507%" y="175.50"></text></g><g><title>configure_and_expand (36,980,991 samples, 21.00%)</title><rect x="70.9234%" y="197" width="20.9982%" height="15" fill="rgb(219,102,11)"/><text x="71.1734%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,617,569 samples, 1.49%)</title><rect x="90.4353%" y="181" width="1.4863%" height="15" fill="rgb(243,110,44)"/><text x="90.6853%" y="191.50"></text></g><g><title>drop_ast (227,003 samples, 0.13%)</title><rect x="91.9216%" y="197" width="0.1289%" height="15" fill="rgb(222,74,54)"/><text x="92.1716%" y="207.50"></text></g><g><title>early_lint_checks (503,235 samples, 0.29%)</title><rect x="92.0639%" y="197" width="0.2857%" height="15" fill="rgb(216,99,12)"/><text x="92.3139%" y="207.50"></text></g><g><title>free_global_ctxt (4,117,135 samples, 2.34%)</title><rect x="92.3497%" y="197" width="2.3378%" height="15" fill="rgb(226,22,26)"/><text x="92.5997%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,533,508 samples, 0.87%)</title><rect x="94.6874%" y="197" width="0.8707%" height="15" fill="rgb(217,163,10)"/><text x="94.9374%" y="207.50"></text></g><g><title>hir_lowering (3,893,583 samples, 2.21%)</title><rect x="95.5582%" y="197" width="2.2108%" height="15" fill="rgb(213,25,53)"/><text x="95.8082%" y="207.50">h..</text></g><g><title>parse_crate (1,966,122 samples, 1.12%)</title><rect x="97.8026%" y="197" width="1.1164%" height="15" fill="rgb(252,105,26)"/><text x="98.0526%" y="207.50"></text></g><g><title>prepare_outputs (220,763 samples, 0.13%)</title><rect x="98.9249%" y="197" width="0.1254%" height="15" fill="rgb(220,39,43)"/><text x="99.1749%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,167,913 samples, 0.66%)</title><rect x="99.0502%" y="197" width="0.6632%" height="15" fill="rgb(229,68,48)"/><text x="99.3002%" y="207.50"></text></g><g><title>all (176,115,190 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (176,115,190 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (402,174 samples, 0.23%)</title><rect x="99.7716%" y="197" width="0.2284%" height="15" fill="rgb(229,81,49)"/><text x="100.0216%" y="207.50"></text></g></svg></svg>