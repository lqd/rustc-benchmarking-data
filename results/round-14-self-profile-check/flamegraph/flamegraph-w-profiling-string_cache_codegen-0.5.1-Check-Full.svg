<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (337,392 samples, 0.26%)</title><rect x="10.3576%" y="117" width="0.2564%" height="15" fill="rgb(227,0,7)"/><text x="10.6076%" y="127.50"></text></g><g><title>item_attrs (259,273 samples, 0.20%)</title><rect x="10.9423%" y="85" width="0.1970%" height="15" fill="rgb(217,0,24)"/><text x="11.1923%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (249,963 samples, 0.19%)</title><rect x="10.9494%" y="69" width="0.1900%" height="15" fill="rgb(221,193,54)"/><text x="11.1994%" y="79.50"></text></g><g><title>codegen_fn_attrs (382,763 samples, 0.29%)</title><rect x="10.8657%" y="101" width="0.2909%" height="15" fill="rgb(248,212,6)"/><text x="11.1157%" y="111.50"></text></g><g><title>adt_drop_tys (210,721 samples, 0.16%)</title><rect x="13.2925%" y="37" width="0.1601%" height="15" fill="rgb(208,68,35)"/><text x="13.5425%" y="47.50"></text></g><g><title>adt_drop_tys (485,504 samples, 0.37%)</title><rect x="13.2678%" y="53" width="0.3689%" height="15" fill="rgb(232,128,0)"/><text x="13.5178%" y="63.50"></text></g><g><title>param_env (138,041 samples, 0.10%)</title><rect x="13.6955%" y="53" width="0.1049%" height="15" fill="rgb(207,160,47)"/><text x="13.9455%" y="63.50"></text></g><g><title>adt_drop_tys (745,637 samples, 0.57%)</title><rect x="13.2359%" y="69" width="0.5666%" height="15" fill="rgb(228,23,34)"/><text x="13.4859%" y="79.50"></text></g><g><title>is_copy_raw (587,878 samples, 0.45%)</title><rect x="13.8026%" y="69" width="0.4467%" height="15" fill="rgb(218,30,26)"/><text x="14.0526%" y="79.50"></text></g><g><title>evaluate_obligation (491,487 samples, 0.37%)</title><rect x="13.8758%" y="53" width="0.3735%" height="15" fill="rgb(220,122,19)"/><text x="14.1258%" y="63.50"></text></g><g><title>needs_drop_raw (1,454,127 samples, 1.11%)</title><rect x="13.1595%" y="85" width="1.1050%" height="15" fill="rgb(250,228,42)"/><text x="13.4095%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (418,175 samples, 0.32%)</title><rect x="14.3841%" y="69" width="0.3178%" height="15" fill="rgb(240,193,28)"/><text x="14.6341%" y="79.50"></text></g><g><title>impl_parent (287,081 samples, 0.22%)</title><rect x="14.9968%" y="53" width="0.2182%" height="15" fill="rgb(216,20,37)"/><text x="15.2468%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (206,580 samples, 0.16%)</title><rect x="15.0579%" y="37" width="0.1570%" height="15" fill="rgb(206,188,39)"/><text x="15.3079%" y="47.50"></text></g><g><title>specialization_graph_of (1,351,814 samples, 1.03%)</title><rect x="14.7208%" y="69" width="1.0273%" height="15" fill="rgb(217,207,13)"/><text x="14.9708%" y="79.50"></text></g><g><title>impl_trait_ref (701,638 samples, 0.53%)</title><rect x="15.2149%" y="53" width="0.5332%" height="15" fill="rgb(231,73,38)"/><text x="15.4649%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (618,797 samples, 0.47%)</title><rect x="15.2779%" y="37" width="0.4702%" height="15" fill="rgb(225,20,46)"/><text x="15.5279%" y="47.50"></text></g><g><title>resolve_instance (2,009,331 samples, 1.53%)</title><rect x="14.2645%" y="85" width="1.5269%" height="15" fill="rgb(210,31,41)"/><text x="14.5145%" y="95.50"></text></g><g><title>thir_body (912,679 samples, 0.69%)</title><rect x="15.8022%" y="85" width="0.6936%" height="15" fill="rgb(221,200,47)"/><text x="16.0522%" y="95.50"></text></g><g><title>mir_const (8,645,655 samples, 6.57%)</title><rect x="9.9418%" y="133" width="6.5700%" height="15" fill="rgb(226,26,5)"/><text x="10.1918%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,761,114 samples, 5.90%)</title><rect x="10.6140%" y="117" width="5.8979%" height="15" fill="rgb(249,33,26)"/><text x="10.8640%" y="127.50">unsafet..</text></g><g><title>mir_built (7,047,215 samples, 5.36%)</title><rect x="11.1565%" y="101" width="5.3553%" height="15" fill="rgb(235,183,28)"/><text x="11.4065%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (9,183,001 samples, 6.98%)</title><rect x="9.5444%" y="149" width="6.9784%" height="15" fill="rgb(221,5,38)"/><text x="9.7944%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (185,921 samples, 0.14%)</title><rect x="16.5274%" y="149" width="0.1413%" height="15" fill="rgb(247,18,42)"/><text x="16.7774%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (640,008 samples, 0.49%)</title><rect x="16.6687%" y="149" width="0.4864%" height="15" fill="rgb(241,131,45)"/><text x="16.9187%" y="159.50"></text></g><g><title>normalize_projection_ty (398,966 samples, 0.30%)</title><rect x="16.8519%" y="133" width="0.3032%" height="15" fill="rgb(249,31,29)"/><text x="17.1019%" y="143.50"></text></g><g><title>type_op_normalize_predicate (606,740 samples, 0.46%)</title><rect x="17.1551%" y="149" width="0.4611%" height="15" fill="rgb(225,111,53)"/><text x="17.4051%" y="159.50"></text></g><g><title>normalize_projection_ty (334,523 samples, 0.25%)</title><rect x="17.3620%" y="133" width="0.2542%" height="15" fill="rgb(238,160,17)"/><text x="17.6120%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,287,971 samples, 1.74%)</title><rect x="17.6322%" y="149" width="1.7387%" height="15" fill="rgb(214,148,48)"/><text x="17.8822%" y="159.50"></text></g><g><title>MIR_borrow_checking (24,698,795 samples, 18.77%)</title><rect x="0.6069%" y="181" width="18.7692%" height="15" fill="rgb(232,36,49)"/><text x="0.8569%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,665,234 samples, 18.74%)</title><rect x="0.6324%" y="165" width="18.7437%" height="15" fill="rgb(209,103,24)"/><text x="0.8824%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (149,701 samples, 0.11%)</title><rect x="19.5861%" y="149" width="0.1138%" height="15" fill="rgb(229,88,8)"/><text x="19.8361%" y="159.50"></text></g><g><title>check_mod_attrs (298,173 samples, 0.23%)</title><rect x="19.4734%" y="165" width="0.2266%" height="15" fill="rgb(213,181,19)"/><text x="19.7234%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (244,303 samples, 0.19%)</title><rect x="19.7765%" y="165" width="0.1857%" height="15" fill="rgb(254,191,54)"/><text x="20.0265%" y="175.50"></text></g><g><title>misc_checking_1 (689,857 samples, 0.52%)</title><rect x="19.4608%" y="181" width="0.5242%" height="15" fill="rgb(241,83,37)"/><text x="19.7108%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (438,714 samples, 0.33%)</title><rect x="19.9864%" y="165" width="0.3334%" height="15" fill="rgb(233,36,39)"/><text x="20.2364%" y="175.50"></text></g><g><title>check_mod_liveness (371,164 samples, 0.28%)</title><rect x="20.0377%" y="149" width="0.2821%" height="15" fill="rgb(226,3,54)"/><text x="20.2877%" y="159.50"></text></g><g><title>misc_checking_2 (825,179 samples, 0.63%)</title><rect x="19.9851%" y="181" width="0.6271%" height="15" fill="rgb(245,192,40)"/><text x="20.2351%" y="191.50"></text></g><g><title>match_checking (384,734 samples, 0.29%)</title><rect x="20.3198%" y="165" width="0.2924%" height="15" fill="rgb(238,167,29)"/><text x="20.5698%" y="175.50"></text></g><g><title>check_match (373,564 samples, 0.28%)</title><rect x="20.3282%" y="149" width="0.2839%" height="15" fill="rgb(232,182,51)"/><text x="20.5782%" y="159.50"></text></g><g><title>death_checking (145,392 samples, 0.11%)</title><rect x="20.6890%" y="165" width="0.1105%" height="15" fill="rgb(231,60,39)"/><text x="20.9390%" y="175.50"></text></g><g><title>impl_parent (763,866 samples, 0.58%)</title><rect x="22.2525%" y="101" width="0.5805%" height="15" fill="rgb(208,69,12)"/><text x="22.5025%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (497,484 samples, 0.38%)</title><rect x="22.4549%" y="85" width="0.3780%" height="15" fill="rgb(235,93,37)"/><text x="22.7049%" y="95.50"></text></g><g><title>specialization_graph_of (3,858,712 samples, 2.93%)</title><rect x="21.4557%" y="117" width="2.9323%" height="15" fill="rgb(213,116,39)"/><text x="21.7057%" y="127.50">sp..</text></g><g><title>impl_trait_ref (2,046,380 samples, 1.56%)</title><rect x="22.8330%" y="101" width="1.5551%" height="15" fill="rgb(222,207,29)"/><text x="23.0830%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,561,914 samples, 1.19%)</title><rect x="23.2011%" y="85" width="1.1869%" height="15" fill="rgb(206,96,30)"/><text x="23.4511%" y="95.50"></text></g><g><title>resolve_instance (3,921,403 samples, 2.98%)</title><rect x="21.4101%" y="133" width="2.9800%" height="15" fill="rgb(218,138,4)"/><text x="21.6601%" y="143.50">res..</text></g><g><title>crate_lints (7,320,231 samples, 5.56%)</title><rect x="20.8012%" y="149" width="5.5628%" height="15" fill="rgb(250,191,14)"/><text x="21.0512%" y="159.50">crate_l..</text></g><g><title>type_of (2,585,894 samples, 1.97%)</title><rect x="24.3989%" y="133" width="1.9651%" height="15" fill="rgb(239,60,40)"/><text x="24.6489%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (2,313,140 samples, 1.76%)</title><rect x="24.6062%" y="117" width="1.7578%" height="15" fill="rgb(206,27,48)"/><text x="24.8562%" y="127.50"></text></g><g><title>lint_checking (7,722,365 samples, 5.87%)</title><rect x="20.7995%" y="165" width="5.8684%" height="15" fill="rgb(225,35,8)"/><text x="21.0495%" y="175.50">lint_ch..</text></g><g><title>module_lints (399,874 samples, 0.30%)</title><rect x="26.3640%" y="149" width="0.3039%" height="15" fill="rgb(250,213,24)"/><text x="26.6140%" y="159.50"></text></g><g><title>lint_mod (394,624 samples, 0.30%)</title><rect x="26.3680%" y="133" width="0.2999%" height="15" fill="rgb(247,123,22)"/><text x="26.6180%" y="143.50"></text></g><g><title>privacy_checking_modules (597,787 samples, 0.45%)</title><rect x="26.7595%" y="165" width="0.4543%" height="15" fill="rgb(231,138,38)"/><text x="27.0095%" y="175.50"></text></g><g><title>check_mod_privacy (595,677 samples, 0.45%)</title><rect x="26.7612%" y="149" width="0.4527%" height="15" fill="rgb(231,145,46)"/><text x="27.0112%" y="159.50"></text></g><g><title>misc_checking_3 (8,698,377 samples, 6.61%)</title><rect x="20.6121%" y="181" width="6.6101%" height="15" fill="rgb(251,118,11)"/><text x="20.8621%" y="191.50">misc_chec..</text></g><g><title>associated_item (176,651 samples, 0.13%)</title><rect x="29.5694%" y="101" width="0.1342%" height="15" fill="rgb(217,147,25)"/><text x="29.8194%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (140,340 samples, 0.11%)</title><rect x="29.5970%" y="85" width="0.1066%" height="15" fill="rgb(247,81,37)"/><text x="29.8470%" y="95.50"></text></g><g><title>associated_items (251,532 samples, 0.19%)</title><rect x="29.5222%" y="117" width="0.1911%" height="15" fill="rgb(209,12,38)"/><text x="29.7722%" y="127.50"></text></g><g><title>adt_def (243,763 samples, 0.19%)</title><rect x="29.8205%" y="85" width="0.1852%" height="15" fill="rgb(227,1,9)"/><text x="30.0705%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (241,803 samples, 0.18%)</title><rect x="29.8220%" y="69" width="0.1838%" height="15" fill="rgb(248,47,43)"/><text x="30.0720%" y="79.50"></text></g><g><title>item_attrs (215,932 samples, 0.16%)</title><rect x="29.8416%" y="53" width="0.1641%" height="15" fill="rgb(221,10,30)"/><text x="30.0916%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (213,862 samples, 0.16%)</title><rect x="29.8432%" y="37" width="0.1625%" height="15" fill="rgb(210,229,1)"/><text x="30.0932%" y="47.50"></text></g><g><title>adt_dtorck_constraint (223,601 samples, 0.17%)</title><rect x="30.2502%" y="37" width="0.1699%" height="15" fill="rgb(222,148,37)"/><text x="30.5002%" y="47.50"></text></g><g><title>adt_dtorck_constraint (343,432 samples, 0.26%)</title><rect x="30.1725%" y="53" width="0.2610%" height="15" fill="rgb(234,67,33)"/><text x="30.4225%" y="63.50"></text></g><g><title>adt_dtorck_constraint (478,434 samples, 0.36%)</title><rect x="30.0994%" y="69" width="0.3636%" height="15" fill="rgb(247,98,35)"/><text x="30.3494%" y="79.50"></text></g><g><title>adt_dtorck_constraint (607,104 samples, 0.46%)</title><rect x="30.0208%" y="85" width="0.4614%" height="15" fill="rgb(247,138,52)"/><text x="30.2708%" y="95.50"></text></g><g><title>dropck_outlives (1,018,688 samples, 0.77%)</title><rect x="29.7338%" y="117" width="0.7741%" height="15" fill="rgb(213,79,30)"/><text x="29.9838%" y="127.50"></text></g><g><title>adt_dtorck_constraint (951,648 samples, 0.72%)</title><rect x="29.7848%" y="101" width="0.7232%" height="15" fill="rgb(246,177,23)"/><text x="30.0348%" y="111.50"></text></g><g><title>adt_sized_constraint (205,802 samples, 0.16%)</title><rect x="30.9528%" y="69" width="0.1564%" height="15" fill="rgb(230,62,27)"/><text x="31.2028%" y="79.50"></text></g><g><title>adt_sized_constraint (235,182 samples, 0.18%)</title><rect x="30.9314%" y="85" width="0.1787%" height="15" fill="rgb(216,154,8)"/><text x="31.1814%" y="95.50"></text></g><g><title>adt_sized_constraint (344,083 samples, 0.26%)</title><rect x="30.8511%" y="101" width="0.2615%" height="15" fill="rgb(244,35,45)"/><text x="31.1011%" y="111.50"></text></g><g><title>trait_impls_of (648,228 samples, 0.49%)</title><rect x="31.3125%" y="101" width="0.4926%" height="15" fill="rgb(251,115,12)"/><text x="31.5625%" y="111.50"></text></g><g><title>implementations_of_trait (270,776 samples, 0.21%)</title><rect x="31.5993%" y="85" width="0.2058%" height="15" fill="rgb(240,54,50)"/><text x="31.8493%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (143,244 samples, 0.11%)</title><rect x="31.6962%" y="69" width="0.1089%" height="15" fill="rgb(233,84,52)"/><text x="31.9462%" y="79.50"></text></g><g><title>evaluate_obligation (1,707,810 samples, 1.30%)</title><rect x="30.5080%" y="117" width="1.2978%" height="15" fill="rgb(207,117,47)"/><text x="30.7580%" y="127.50"></text></g><g><title>method_autoderef_steps (158,832 samples, 0.12%)</title><rect x="32.1212%" y="117" width="0.1207%" height="15" fill="rgb(249,43,39)"/><text x="32.3712%" y="127.50"></text></g><g><title>predicates_of (189,350 samples, 0.14%)</title><rect x="32.2600%" y="117" width="0.1439%" height="15" fill="rgb(209,38,44)"/><text x="32.5100%" y="127.50"></text></g><g><title>adt_sized_constraint (161,692 samples, 0.12%)</title><rect x="47.1885%" y="101" width="0.1229%" height="15" fill="rgb(236,212,23)"/><text x="47.4385%" y="111.50"></text></g><g><title>associated_item (387,052 samples, 0.29%)</title><rect x="47.4277%" y="85" width="0.2941%" height="15" fill="rgb(242,79,21)"/><text x="47.6777%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (309,492 samples, 0.24%)</title><rect x="47.4866%" y="69" width="0.2352%" height="15" fill="rgb(211,96,35)"/><text x="47.7366%" y="79.50"></text></g><g><title>associated_items (565,305 samples, 0.43%)</title><rect x="47.3166%" y="101" width="0.4296%" height="15" fill="rgb(253,215,40)"/><text x="47.5666%" y="111.50"></text></g><g><title>adt_dtorck_constraint (159,461 samples, 0.12%)</title><rect x="48.0336%" y="53" width="0.1212%" height="15" fill="rgb(211,81,21)"/><text x="48.2836%" y="63.50"></text></g><g><title>adt_dtorck_constraint (197,602 samples, 0.15%)</title><rect x="48.0136%" y="69" width="0.1502%" height="15" fill="rgb(208,190,38)"/><text x="48.2636%" y="79.50"></text></g><g><title>adt_dtorck_constraint (327,115 samples, 0.25%)</title><rect x="47.9524%" y="85" width="0.2486%" height="15" fill="rgb(235,213,38)"/><text x="48.2024%" y="95.50"></text></g><g><title>dropck_outlives (546,566 samples, 0.42%)</title><rect x="47.8101%" y="101" width="0.4153%" height="15" fill="rgb(237,122,38)"/><text x="48.0601%" y="111.50"></text></g><g><title>predicates_of (164,303 samples, 0.12%)</title><rect x="49.8015%" y="85" width="0.1249%" height="15" fill="rgb(244,218,35)"/><text x="50.0515%" y="95.50"></text></g><g><title>trait_impls_of (1,135,204 samples, 0.86%)</title><rect x="50.0055%" y="85" width="0.8627%" height="15" fill="rgb(240,68,47)"/><text x="50.2555%" y="95.50"></text></g><g><title>implementations_of_trait (371,295 samples, 0.28%)</title><rect x="50.5860%" y="69" width="0.2822%" height="15" fill="rgb(210,16,53)"/><text x="50.8360%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (231,721 samples, 0.18%)</title><rect x="50.6921%" y="53" width="0.1761%" height="15" fill="rgb(235,124,12)"/><text x="50.9421%" y="63.50"></text></g><g><title>evaluate_obligation (3,478,339 samples, 2.64%)</title><rect x="48.2254%" y="101" width="2.6433%" height="15" fill="rgb(224,169,11)"/><text x="48.4754%" y="111.50">ev..</text></g><g><title>fn_sig (183,863 samples, 0.14%)</title><rect x="50.8930%" y="101" width="0.1397%" height="15" fill="rgb(250,166,2)"/><text x="51.1430%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (164,293 samples, 0.12%)</title><rect x="50.9079%" y="85" width="0.1249%" height="15" fill="rgb(242,216,29)"/><text x="51.1579%" y="95.50"></text></g><g><title>generics_of (149,341 samples, 0.11%)</title><rect x="51.0327%" y="101" width="0.1135%" height="15" fill="rgb(230,116,27)"/><text x="51.2827%" y="111.50"></text></g><g><title>impl_item_implementor_ids (388,945 samples, 0.30%)</title><rect x="51.1466%" y="101" width="0.2956%" height="15" fill="rgb(228,99,48)"/><text x="51.3966%" y="111.50"></text></g><g><title>associated_items (367,805 samples, 0.28%)</title><rect x="51.1627%" y="85" width="0.2795%" height="15" fill="rgb(253,11,6)"/><text x="51.4127%" y="95.50"></text></g><g><title>associated_item_def_ids (257,764 samples, 0.20%)</title><rect x="51.2463%" y="69" width="0.1959%" height="15" fill="rgb(247,143,39)"/><text x="51.4963%" y="79.50"></text></g><g><title>is_copy_raw (257,643 samples, 0.20%)</title><rect x="51.5218%" y="101" width="0.1958%" height="15" fill="rgb(236,97,10)"/><text x="51.7718%" y="111.50"></text></g><g><title>evaluate_obligation (215,363 samples, 0.16%)</title><rect x="51.5540%" y="85" width="0.1637%" height="15" fill="rgb(233,208,19)"/><text x="51.8040%" y="95.50"></text></g><g><title>method_autoderef_steps (510,244 samples, 0.39%)</title><rect x="51.9505%" y="101" width="0.3877%" height="15" fill="rgb(216,164,2)"/><text x="52.2005%" y="111.50"></text></g><g><title>evaluate_obligation (241,101 samples, 0.18%)</title><rect x="52.1551%" y="85" width="0.1832%" height="15" fill="rgb(220,129,5)"/><text x="52.4051%" y="95.50"></text></g><g><title>explicit_predicates_of (174,071 samples, 0.13%)</title><rect x="52.5855%" y="69" width="0.1323%" height="15" fill="rgb(242,17,10)"/><text x="52.8355%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (137,551 samples, 0.10%)</title><rect x="52.6132%" y="53" width="0.1045%" height="15" fill="rgb(242,107,0)"/><text x="52.8632%" y="63.50"></text></g><g><title>predicates_of (534,118 samples, 0.41%)</title><rect x="52.3557%" y="101" width="0.4059%" height="15" fill="rgb(251,28,31)"/><text x="52.6057%" y="111.50"></text></g><g><title>predicates_defined_on (357,223 samples, 0.27%)</title><rect x="52.4901%" y="85" width="0.2715%" height="15" fill="rgb(233,223,10)"/><text x="52.7401%" y="95.50"></text></g><g><title>trait_impls_of (147,332 samples, 0.11%)</title><rect x="52.7734%" y="101" width="0.1120%" height="15" fill="rgb(215,21,27)"/><text x="53.0234%" y="111.50"></text></g><g><title>typeck (27,011,631 samples, 20.53%)</title><rect x="32.5005%" y="117" width="20.5268%" height="15" fill="rgb(232,23,21)"/><text x="32.7505%" y="127.50">typeck</text></g><g><title>item_bodies_checking (33,926,888 samples, 25.78%)</title><rect x="27.2720%" y="165" width="25.7818%" height="15" fill="rgb(244,5,23)"/><text x="27.5220%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (33,924,238 samples, 25.78%)</title><rect x="27.2740%" y="149" width="25.7798%" height="15" fill="rgb(226,81,46)"/><text x="27.5240%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (33,907,048 samples, 25.77%)</title><rect x="27.2871%" y="133" width="25.7668%" height="15" fill="rgb(247,70,30)"/><text x="27.5371%" y="143.50">typeck</text></g><g><title>impl_trait_ref (340,414 samples, 0.26%)</title><rect x="53.2540%" y="85" width="0.2587%" height="15" fill="rgb(212,68,19)"/><text x="53.5040%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (317,062 samples, 0.24%)</title><rect x="53.2717%" y="69" width="0.2409%" height="15" fill="rgb(240,187,13)"/><text x="53.5217%" y="79.50"></text></g><g><title>adt_destructor (589,987 samples, 0.45%)</title><rect x="53.0934%" y="133" width="0.4483%" height="15" fill="rgb(223,113,26)"/><text x="53.3434%" y="143.50"></text></g><g><title>coherent_trait (585,917 samples, 0.45%)</title><rect x="53.0965%" y="117" width="0.4453%" height="15" fill="rgb(206,192,2)"/><text x="53.3465%" y="127.50"></text></g><g><title>specialization_graph_of (582,447 samples, 0.44%)</title><rect x="53.0991%" y="101" width="0.4426%" height="15" fill="rgb(241,108,4)"/><text x="53.3491%" y="111.50"></text></g><g><title>item_types_checking (667,338 samples, 0.51%)</title><rect x="53.0538%" y="165" width="0.5071%" height="15" fill="rgb(247,173,49)"/><text x="53.3038%" y="175.50"></text></g><g><title>check_mod_item_types (666,018 samples, 0.51%)</title><rect x="53.0548%" y="149" width="0.5061%" height="15" fill="rgb(224,114,35)"/><text x="53.3048%" y="159.50"></text></g><g><title>named_region_map (138,891 samples, 0.11%)</title><rect x="53.7149%" y="117" width="0.1055%" height="15" fill="rgb(245,159,27)"/><text x="53.9649%" y="127.50"></text></g><g><title>generics_of (177,762 samples, 0.14%)</title><rect x="53.6897%" y="133" width="0.1351%" height="15" fill="rgb(245,172,44)"/><text x="53.9397%" y="143.50"></text></g><g><title>explicit_predicates_of (153,071 samples, 0.12%)</title><rect x="53.8436%" y="101" width="0.1163%" height="15" fill="rgb(236,23,11)"/><text x="54.0936%" y="111.50"></text></g><g><title>predicates_of (331,993 samples, 0.25%)</title><rect x="53.8251%" y="133" width="0.2523%" height="15" fill="rgb(205,117,38)"/><text x="54.0751%" y="143.50"></text></g><g><title>predicates_defined_on (325,103 samples, 0.25%)</title><rect x="53.8303%" y="117" width="0.2471%" height="15" fill="rgb(237,72,25)"/><text x="54.0803%" y="127.50"></text></g><g><title>inferred_outlives_of (154,522 samples, 0.12%)</title><rect x="53.9599%" y="101" width="0.1174%" height="15" fill="rgb(244,70,9)"/><text x="54.2099%" y="111.50"></text></g><g><title>inferred_outlives_crate (145,422 samples, 0.11%)</title><rect x="53.9668%" y="85" width="0.1105%" height="15" fill="rgb(217,125,39)"/><text x="54.2168%" y="95.50"></text></g><g><title>type_collecting (725,548 samples, 0.55%)</title><rect x="53.5624%" y="165" width="0.5514%" height="15" fill="rgb(235,36,10)"/><text x="53.8124%" y="175.50"></text></g><g><title>collect_mod_item_types (715,378 samples, 0.54%)</title><rect x="53.5701%" y="149" width="0.5436%" height="15" fill="rgb(251,123,47)"/><text x="53.8201%" y="159.50"></text></g><g><title>evaluate_obligation (253,253 samples, 0.19%)</title><rect x="54.4115%" y="133" width="0.1925%" height="15" fill="rgb(221,13,13)"/><text x="54.6615%" y="143.50"></text></g><g><title>param_env (203,642 samples, 0.15%)</title><rect x="54.6647%" y="133" width="0.1548%" height="15" fill="rgb(238,131,9)"/><text x="54.9147%" y="143.50"></text></g><g><title>region_scope_tree (206,172 samples, 0.16%)</title><rect x="54.8497%" y="133" width="0.1567%" height="15" fill="rgb(211,50,8)"/><text x="55.0997%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,177,253 samples, 0.89%)</title><rect x="54.1501%" y="149" width="0.8946%" height="15" fill="rgb(245,182,24)"/><text x="54.4001%" y="159.50"></text></g><g><title>adt_sized_constraint (138,322 samples, 0.11%)</title><rect x="55.2280%" y="117" width="0.1051%" height="15" fill="rgb(242,14,37)"/><text x="55.4780%" y="127.50"></text></g><g><title>evaluate_obligation (210,382 samples, 0.16%)</title><rect x="55.1740%" y="133" width="0.1599%" height="15" fill="rgb(246,228,12)"/><text x="55.4240%" y="143.50"></text></g><g><title>analysis (72,414,876 samples, 55.03%)</title><rect x="0.4419%" y="197" width="55.0298%" height="15" fill="rgb(213,55,15)"/><text x="0.6919%" y="207.50">analysis</text></g><g><title>type_check_crate (37,174,114 samples, 28.25%)</title><rect x="27.2222%" y="181" width="28.2495%" height="15" fill="rgb(209,9,3)"/><text x="27.4722%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,785,059 samples, 1.36%)</title><rect x="54.1152%" y="165" width="1.3565%" height="15" fill="rgb(230,59,30)"/><text x="54.3652%" y="175.50"></text></g><g><title>check_item_well_formed (561,906 samples, 0.43%)</title><rect x="55.0447%" y="149" width="0.4270%" height="15" fill="rgb(209,121,21)"/><text x="55.2947%" y="159.50"></text></g><g><title>codegen_crate (787,679 samples, 0.60%)</title><rect x="55.4790%" y="197" width="0.5986%" height="15" fill="rgb(220,109,13)"/><text x="55.7290%" y="207.50"></text></g><g><title>metadata_load_macro (830,627 samples, 0.63%)</title><rect x="87.6919%" y="149" width="0.6312%" height="15" fill="rgb(232,18,1)"/><text x="87.9419%" y="159.50"></text></g><g><title>macro_expand_crate (44,781,769 samples, 34.03%)</title><rect x="56.3777%" y="181" width="34.0307%" height="15" fill="rgb(215,41,42)"/><text x="56.6277%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (44,769,829 samples, 34.02%)</title><rect x="56.3868%" y="165" width="34.0216%" height="15" fill="rgb(224,123,36)"/><text x="56.6368%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,744,101 samples, 2.09%)</title><rect x="88.3231%" y="149" width="2.0853%" height="15" fill="rgb(240,125,3)"/><text x="88.5731%" y="159.50">m..</text></g><g><title>metadata_register_crate (954,249 samples, 0.73%)</title><rect x="89.6833%" y="133" width="0.7252%" height="15" fill="rgb(205,98,50)"/><text x="89.9333%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (133,601 samples, 0.10%)</title><rect x="90.4117%" y="181" width="0.1015%" height="15" fill="rgb(205,185,37)"/><text x="90.6617%" y="191.50"></text></g><g><title>finalize_imports (141,971 samples, 0.11%)</title><rect x="90.5164%" y="165" width="0.1079%" height="15" fill="rgb(238,207,15)"/><text x="90.7664%" y="175.50"></text></g><g><title>finalize_macro_resolutions (314,324 samples, 0.24%)</title><rect x="90.6243%" y="165" width="0.2389%" height="15" fill="rgb(213,199,42)"/><text x="90.8743%" y="175.50"></text></g><g><title>late_resolve_crate (2,157,764 samples, 1.64%)</title><rect x="90.8632%" y="165" width="1.6397%" height="15" fill="rgb(235,201,11)"/><text x="91.1132%" y="175.50"></text></g><g><title>metadata_register_crate (462,395 samples, 0.35%)</title><rect x="92.1515%" y="149" width="0.3514%" height="15" fill="rgb(207,46,11)"/><text x="92.4015%" y="159.50"></text></g><g><title>metadata_register_crate (371,083 samples, 0.28%)</title><rect x="92.2209%" y="133" width="0.2820%" height="15" fill="rgb(241,35,35)"/><text x="92.4709%" y="143.50"></text></g><g><title>metadata_register_crate (206,122 samples, 0.16%)</title><rect x="92.3463%" y="117" width="0.1566%" height="15" fill="rgb(243,32,47)"/><text x="92.5963%" y="127.50"></text></g><g><title>configure_and_expand (48,010,726 samples, 36.48%)</title><rect x="56.0776%" y="197" width="36.4845%" height="15" fill="rgb(247,202,23)"/><text x="56.3276%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,696,140 samples, 2.05%)</title><rect x="90.5132%" y="181" width="2.0489%" height="15" fill="rgb(219,102,11)"/><text x="90.7632%" y="191.50">r..</text></g><g><title>early_lint_checks (330,984 samples, 0.25%)</title><rect x="92.6737%" y="197" width="0.2515%" height="15" fill="rgb(243,110,44)"/><text x="92.9237%" y="207.50"></text></g><g><title>free_global_ctxt (3,863,473 samples, 2.94%)</title><rect x="92.9252%" y="197" width="2.9359%" height="15" fill="rgb(222,74,54)"/><text x="93.1752%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (520,566 samples, 0.40%)</title><rect x="95.8611%" y="197" width="0.3956%" height="15" fill="rgb(216,99,12)"/><text x="96.1111%" y="207.50"></text></g><g><title>hir_lowering (1,706,829 samples, 1.30%)</title><rect x="96.2567%" y="197" width="1.2971%" height="15" fill="rgb(226,22,26)"/><text x="96.5067%" y="207.50"></text></g><g><title>parse_crate (1,960,412 samples, 1.49%)</title><rect x="97.5921%" y="197" width="1.4898%" height="15" fill="rgb(217,163,10)"/><text x="97.8421%" y="207.50"></text></g><g><title>prepare_outputs (183,242 samples, 0.14%)</title><rect x="99.0878%" y="197" width="0.1392%" height="15" fill="rgb(213,25,53)"/><text x="99.3378%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (590,617 samples, 0.45%)</title><rect x="99.2270%" y="197" width="0.4488%" height="15" fill="rgb(252,105,26)"/><text x="99.4770%" y="207.50"></text></g><g><title>all (131,592,206 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (131,592,206 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (303,903 samples, 0.23%)</title><rect x="99.7691%" y="197" width="0.2309%" height="15" fill="rgb(252,8,32)"/><text x="100.0191%" y="207.50"></text></g></svg></svg>