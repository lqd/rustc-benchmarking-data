<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (486,756 samples, 0.20%)</title><rect x="14.2937%" y="133" width="0.2020%" height="15" fill="rgb(227,0,7)"/><text x="14.5437%" y="143.50"></text></g><g><title>param_env (432,428 samples, 0.18%)</title><rect x="16.2165%" y="101" width="0.1794%" height="15" fill="rgb(217,0,24)"/><text x="16.4665%" y="111.50"></text></g><g><title>item_attrs (292,480 samples, 0.12%)</title><rect x="16.8965%" y="69" width="0.1214%" height="15" fill="rgb(221,193,54)"/><text x="17.1465%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (278,010 samples, 0.12%)</title><rect x="16.9025%" y="53" width="0.1154%" height="15" fill="rgb(248,212,6)"/><text x="17.1525%" y="63.50"></text></g><g><title>codegen_fn_attrs (466,591 samples, 0.19%)</title><rect x="16.8356%" y="85" width="0.1936%" height="15" fill="rgb(208,68,35)"/><text x="17.0856%" y="95.50"></text></g><g><title>adt_drop_tys (260,933 samples, 0.11%)</title><rect x="20.1922%" y="53" width="0.1083%" height="15" fill="rgb(232,128,0)"/><text x="20.4422%" y="63.50"></text></g><g><title>needs_drop_raw (2,151,354 samples, 0.89%)</title><rect x="20.0988%" y="69" width="0.8927%" height="15" fill="rgb(207,160,47)"/><text x="20.3488%" y="79.50"></text></g><g><title>is_copy_raw (1,665,471 samples, 0.69%)</title><rect x="20.3005%" y="53" width="0.6911%" height="15" fill="rgb(228,23,34)"/><text x="20.5505%" y="63.50"></text></g><g><title>evaluate_obligation (1,361,621 samples, 0.57%)</title><rect x="20.4266%" y="37" width="0.5650%" height="15" fill="rgb(218,30,26)"/><text x="20.6766%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (510,695 samples, 0.21%)</title><rect x="21.1342%" y="53" width="0.2119%" height="15" fill="rgb(220,122,19)"/><text x="21.3842%" y="63.50"></text></g><g><title>specialization_graph_of (479,945 samples, 0.20%)</title><rect x="21.3717%" y="53" width="0.1992%" height="15" fill="rgb(250,228,42)"/><text x="21.6217%" y="63.50"></text></g><g><title>resolve_instance (1,480,436 samples, 0.61%)</title><rect x="21.0038%" y="69" width="0.6143%" height="15" fill="rgb(240,193,28)"/><text x="21.2538%" y="79.50"></text></g><g><title>thir_body (2,715,966 samples, 1.13%)</title><rect x="21.6526%" y="69" width="1.1270%" height="15" fill="rgb(216,20,37)"/><text x="21.9026%" y="79.50"></text></g><g><title>mir_const (17,839,945 samples, 7.40%)</title><rect x="15.3994%" y="117" width="7.4031%" height="15" fill="rgb(206,188,39)"/><text x="15.6494%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (15,438,585 samples, 6.41%)</title><rect x="16.3959%" y="101" width="6.4066%" height="15" fill="rgb(217,207,13)"/><text x="16.6459%" y="111.50">unsafety..</text></g><g><title>mir_built (13,912,555 samples, 5.77%)</title><rect x="17.0292%" y="85" width="5.7733%" height="15" fill="rgb(231,73,38)"/><text x="17.2792%" y="95.50">mir_bui..</text></g><g><title>thir_body (261,793 samples, 0.11%)</title><rect x="23.3921%" y="53" width="0.1086%" height="15" fill="rgb(225,20,46)"/><text x="23.6421%" y="63.50"></text></g><g><title>mir_const (894,949 samples, 0.37%)</title><rect x="23.1319%" y="101" width="0.3714%" height="15" fill="rgb(210,31,41)"/><text x="23.3819%" y="111.50"></text></g><g><title>unsafety_check_result (706,058 samples, 0.29%)</title><rect x="23.2103%" y="85" width="0.2930%" height="15" fill="rgb(221,200,47)"/><text x="23.4603%" y="95.50"></text></g><g><title>mir_built (612,157 samples, 0.25%)</title><rect x="23.2492%" y="69" width="0.2540%" height="15" fill="rgb(226,26,5)"/><text x="23.4992%" y="79.50"></text></g><g><title>mir_const_qualif (1,702,601 samples, 0.71%)</title><rect x="22.8025%" y="117" width="0.7065%" height="15" fill="rgb(249,33,26)"/><text x="23.0525%" y="127.50"></text></g><g><title>mir_promoted (21,522,154 samples, 8.93%)</title><rect x="14.5781%" y="133" width="8.9311%" height="15" fill="rgb(235,183,28)"/><text x="14.8281%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (496,047 samples, 0.21%)</title><rect x="23.5093%" y="133" width="0.2058%" height="15" fill="rgb(221,5,38)"/><text x="23.7593%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (921,238 samples, 0.38%)</title><rect x="23.7151%" y="133" width="0.3823%" height="15" fill="rgb(247,18,42)"/><text x="23.9651%" y="143.50"></text></g><g><title>normalize_projection_ty (591,502 samples, 0.25%)</title><rect x="23.8520%" y="117" width="0.2455%" height="15" fill="rgb(241,131,45)"/><text x="24.1020%" y="127.50"></text></g><g><title>type_op_normalize_predicate (766,607 samples, 0.32%)</title><rect x="24.0974%" y="133" width="0.3181%" height="15" fill="rgb(249,31,29)"/><text x="24.3474%" y="143.50"></text></g><g><title>normalize_projection_ty (446,823 samples, 0.19%)</title><rect x="24.2301%" y="117" width="0.1854%" height="15" fill="rgb(225,111,53)"/><text x="24.4801%" y="127.50"></text></g><g><title>type_op_prove_predicate (5,756,263 samples, 2.39%)</title><rect x="24.4362%" y="133" width="2.3887%" height="15" fill="rgb(238,160,17)"/><text x="24.6862%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (63,189,451 samples, 26.22%)</title><rect x="0.6133%" y="165" width="26.2218%" height="15" fill="rgb(214,148,48)"/><text x="0.8633%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (62,875,761 samples, 26.09%)</title><rect x="0.7434%" y="149" width="26.0916%" height="15" fill="rgb(232,36,49)"/><text x="0.9934%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (543,706 samples, 0.23%)</title><rect x="26.8351%" y="165" width="0.2256%" height="15" fill="rgb(209,103,24)"/><text x="27.0851%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (430,021 samples, 0.18%)</title><rect x="26.8822%" y="149" width="0.1784%" height="15" fill="rgb(229,88,8)"/><text x="27.1322%" y="159.50"></text></g><g><title>hir_module_items (349,063 samples, 0.14%)</title><rect x="27.0607%" y="165" width="0.1449%" height="15" fill="rgb(213,181,19)"/><text x="27.3107%" y="175.50"></text></g><g><title>codegen_fn_attrs (417,675 samples, 0.17%)</title><rect x="27.4550%" y="133" width="0.1733%" height="15" fill="rgb(254,191,54)"/><text x="27.7050%" y="143.50"></text></g><g><title>check_mod_attrs (974,680 samples, 0.40%)</title><rect x="27.2239%" y="149" width="0.4045%" height="15" fill="rgb(241,83,37)"/><text x="27.4739%" y="159.50"></text></g><g><title>lookup_deprecation_entry (268,644 samples, 0.11%)</title><rect x="27.9271%" y="133" width="0.1115%" height="15" fill="rgb(233,36,39)"/><text x="28.1771%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (648,479 samples, 0.27%)</title><rect x="27.8039%" y="149" width="0.2691%" height="15" fill="rgb(226,3,54)"/><text x="28.0539%" y="159.50"></text></g><g><title>misc_checking_1 (2,193,985 samples, 0.91%)</title><rect x="27.2058%" y="165" width="0.9104%" height="15" fill="rgb(245,192,40)"/><text x="27.4558%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,431,806 samples, 0.59%)</title><rect x="28.1172%" y="149" width="0.5942%" height="15" fill="rgb(238,167,29)"/><text x="28.3672%" y="159.50"></text></g><g><title>check_mod_liveness (1,177,722 samples, 0.49%)</title><rect x="28.2227%" y="133" width="0.4887%" height="15" fill="rgb(232,182,51)"/><text x="28.4727%" y="143.50"></text></g><g><title>mir_borrowck (765,689 samples, 0.32%)</title><rect x="29.7288%" y="37" width="0.3177%" height="15" fill="rgb(231,60,39)"/><text x="29.9788%" y="47.50"></text></g><g><title>mir_for_ctfe (1,109,112 samples, 0.46%)</title><rect x="29.5876%" y="69" width="0.4602%" height="15" fill="rgb(208,69,12)"/><text x="29.8376%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,018,771 samples, 0.42%)</title><rect x="29.6251%" y="53" width="0.4228%" height="15" fill="rgb(235,93,37)"/><text x="29.8751%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,502,117 samples, 0.62%)</title><rect x="29.4755%" y="117" width="0.6233%" height="15" fill="rgb(213,116,39)"/><text x="29.7255%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,490,447 samples, 0.62%)</title><rect x="29.4803%" y="101" width="0.6185%" height="15" fill="rgb(222,207,29)"/><text x="29.7303%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,473,907 samples, 0.61%)</title><rect x="29.4872%" y="85" width="0.6116%" height="15" fill="rgb(206,96,30)"/><text x="29.7372%" y="95.50"></text></g><g><title>mir_const_qualif (366,103 samples, 0.15%)</title><rect x="30.1062%" y="117" width="0.1519%" height="15" fill="rgb(218,138,4)"/><text x="30.3562%" y="127.50"></text></g><g><title>mir_const (293,032 samples, 0.12%)</title><rect x="30.1365%" y="101" width="0.1216%" height="15" fill="rgb(250,191,14)"/><text x="30.3865%" y="111.50"></text></g><g><title>misc_checking_2 (5,412,341 samples, 2.25%)</title><rect x="28.1162%" y="165" width="2.2460%" height="15" fill="rgb(239,60,40)"/><text x="28.3662%" y="175.50">m..</text></g><g><title>match_checking (3,978,105 samples, 1.65%)</title><rect x="28.7114%" y="149" width="1.6508%" height="15" fill="rgb(206,27,48)"/><text x="28.9614%" y="159.50"></text></g><g><title>check_match (3,895,014 samples, 1.62%)</title><rect x="28.7459%" y="133" width="1.6163%" height="15" fill="rgb(225,35,8)"/><text x="28.9959%" y="143.50"></text></g><g><title>check_private_in_public (405,735 samples, 0.17%)</title><rect x="30.3666%" y="149" width="0.1684%" height="15" fill="rgb(250,213,24)"/><text x="30.6166%" y="159.50"></text></g><g><title>death_checking (975,241 samples, 0.40%)</title><rect x="30.5350%" y="149" width="0.4047%" height="15" fill="rgb(247,123,22)"/><text x="30.7850%" y="159.50"></text></g><g><title>eval_to_const_value_raw (418,863 samples, 0.17%)</title><rect x="31.5712%" y="69" width="0.1738%" height="15" fill="rgb(231,138,38)"/><text x="31.8212%" y="79.50"></text></g><g><title>eval_to_const_value_raw (411,953 samples, 0.17%)</title><rect x="31.5740%" y="53" width="0.1709%" height="15" fill="rgb(231,145,46)"/><text x="31.8240%" y="63.50"></text></g><g><title>eval_to_allocation_raw (401,923 samples, 0.17%)</title><rect x="31.5782%" y="37" width="0.1668%" height="15" fill="rgb(251,118,11)"/><text x="31.8282%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (460,854 samples, 0.19%)</title><rect x="31.5572%" y="85" width="0.1912%" height="15" fill="rgb(217,147,25)"/><text x="31.8072%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,249,026 samples, 0.52%)</title><rect x="31.3858%" y="117" width="0.5183%" height="15" fill="rgb(247,81,37)"/><text x="31.6358%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,242,635 samples, 0.52%)</title><rect x="31.3884%" y="101" width="0.5157%" height="15" fill="rgb(209,12,38)"/><text x="31.6384%" y="111.50"></text></g><g><title>vtable_allocation (375,164 samples, 0.16%)</title><rect x="31.7484%" y="85" width="0.1557%" height="15" fill="rgb(227,1,9)"/><text x="31.9984%" y="95.50"></text></g><g><title>eval_to_const_value_raw (312,253 samples, 0.13%)</title><rect x="31.9041%" y="117" width="0.1296%" height="15" fill="rgb(248,47,43)"/><text x="32.1541%" y="127.50"></text></g><g><title>eval_to_const_value_raw (302,223 samples, 0.13%)</title><rect x="31.9083%" y="101" width="0.1254%" height="15" fill="rgb(221,10,30)"/><text x="32.1583%" y="111.50"></text></g><g><title>eval_to_allocation_raw (284,112 samples, 0.12%)</title><rect x="31.9158%" y="85" width="0.1179%" height="15" fill="rgb(210,229,1)"/><text x="32.1658%" y="95.50"></text></g><g><title>param_env (601,069 samples, 0.25%)</title><rect x="32.0337%" y="117" width="0.2494%" height="15" fill="rgb(222,148,37)"/><text x="32.2837%" y="127.50"></text></g><g><title>predicates_of (273,924 samples, 0.11%)</title><rect x="32.1694%" y="101" width="0.1137%" height="15" fill="rgb(234,67,33)"/><text x="32.4194%" y="111.50"></text></g><g><title>crate_lints (3,643,282 samples, 1.51%)</title><rect x="30.9406%" y="133" width="1.5119%" height="15" fill="rgb(247,98,35)"/><text x="31.1906%" y="143.50"></text></g><g><title>type_of (393,763 samples, 0.16%)</title><rect x="32.2891%" y="117" width="0.1634%" height="15" fill="rgb(247,138,52)"/><text x="32.5391%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (307,132 samples, 0.13%)</title><rect x="32.3250%" y="101" width="0.1275%" height="15" fill="rgb(213,79,30)"/><text x="32.5750%" y="111.50"></text></g><g><title>lint_checking (4,966,767 samples, 2.06%)</title><rect x="30.9397%" y="149" width="2.0611%" height="15" fill="rgb(246,177,23)"/><text x="31.1897%" y="159.50">l..</text></g><g><title>module_lints (1,321,175 samples, 0.55%)</title><rect x="32.4525%" y="133" width="0.5482%" height="15" fill="rgb(230,62,27)"/><text x="32.7025%" y="143.50"></text></g><g><title>lint_mod (1,307,545 samples, 0.54%)</title><rect x="32.4581%" y="117" width="0.5426%" height="15" fill="rgb(216,154,8)"/><text x="32.7081%" y="127.50"></text></g><g><title>privacy_access_levels (774,808 samples, 0.32%)</title><rect x="33.0007%" y="149" width="0.3215%" height="15" fill="rgb(244,35,45)"/><text x="33.2507%" y="159.50"></text></g><g><title>privacy_checking_modules (2,129,644 samples, 0.88%)</title><rect x="33.3222%" y="149" width="0.8837%" height="15" fill="rgb(251,115,12)"/><text x="33.5722%" y="159.50"></text></g><g><title>check_mod_privacy (2,119,874 samples, 0.88%)</title><rect x="33.3263%" y="133" width="0.8797%" height="15" fill="rgb(240,54,50)"/><text x="33.5763%" y="143.50"></text></g><g><title>misc_checking_3 (9,284,715 samples, 3.85%)</title><rect x="30.3622%" y="165" width="3.8529%" height="15" fill="rgb(233,84,52)"/><text x="30.6122%" y="175.50">misc..</text></g><g><title>impl_parent (1,509,901 samples, 0.63%)</title><rect x="35.3310%" y="101" width="0.6266%" height="15" fill="rgb(207,117,47)"/><text x="35.5810%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (737,684 samples, 0.31%)</title><rect x="35.6514%" y="85" width="0.3061%" height="15" fill="rgb(249,43,39)"/><text x="35.9014%" y="95.50"></text></g><g><title>impl_trait_ref (2,534,123 samples, 1.05%)</title><rect x="35.9580%" y="101" width="1.0516%" height="15" fill="rgb(209,38,44)"/><text x="36.2080%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,998,923 samples, 0.83%)</title><rect x="36.1801%" y="85" width="0.8295%" height="15" fill="rgb(236,212,23)"/><text x="36.4301%" y="95.50"></text></g><g><title>trait_impls_of (439,253 samples, 0.18%)</title><rect x="37.0429%" y="101" width="0.1823%" height="15" fill="rgb(242,79,21)"/><text x="37.2929%" y="111.50"></text></g><g><title>coherent_trait (7,091,340 samples, 2.94%)</title><rect x="34.2830%" y="133" width="2.9427%" height="15" fill="rgb(211,96,35)"/><text x="34.5330%" y="143.50">co..</text></g><g><title>specialization_graph_of (6,722,026 samples, 2.79%)</title><rect x="34.4363%" y="117" width="2.7894%" height="15" fill="rgb(253,215,40)"/><text x="34.6863%" y="127.50">sp..</text></g><g><title>coherence_checking (7,192,221 samples, 2.98%)</title><rect x="34.2739%" y="149" width="2.9846%" height="15" fill="rgb(211,81,21)"/><text x="34.5239%" y="159.50">coh..</text></g><g><title>associated_item (324,514 samples, 0.13%)</title><rect x="47.8190%" y="85" width="0.1347%" height="15" fill="rgb(208,190,38)"/><text x="48.0690%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (257,833 samples, 0.11%)</title><rect x="47.8466%" y="69" width="0.1070%" height="15" fill="rgb(235,213,38)"/><text x="48.0966%" y="79.50"></text></g><g><title>associated_items (438,264 samples, 0.18%)</title><rect x="47.7781%" y="101" width="0.1819%" height="15" fill="rgb(237,122,38)"/><text x="48.0281%" y="111.50"></text></g><g><title>dropck_outlives (295,342 samples, 0.12%)</title><rect x="47.9785%" y="101" width="0.1226%" height="15" fill="rgb(244,218,35)"/><text x="48.2285%" y="111.50"></text></g><g><title>generics_of (614,728 samples, 0.26%)</title><rect x="48.9151%" y="85" width="0.2551%" height="15" fill="rgb(240,68,47)"/><text x="49.1651%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (499,578 samples, 0.21%)</title><rect x="48.9629%" y="69" width="0.2073%" height="15" fill="rgb(210,16,53)"/><text x="49.2129%" y="79.50"></text></g><g><title>specializes (436,796 samples, 0.18%)</title><rect x="49.3349%" y="85" width="0.1813%" height="15" fill="rgb(235,124,12)"/><text x="49.5849%" y="95.50"></text></g><g><title>param_env (254,384 samples, 0.11%)</title><rect x="49.4106%" y="69" width="0.1056%" height="15" fill="rgb(224,169,11)"/><text x="49.6606%" y="79.50"></text></g><g><title>evaluate_obligation (3,521,449 samples, 1.46%)</title><rect x="48.1018%" y="101" width="1.4613%" height="15" fill="rgb(250,166,2)"/><text x="48.3518%" y="111.50"></text></g><g><title>predicates_of (289,993 samples, 0.12%)</title><rect x="49.8492%" y="101" width="0.1203%" height="15" fill="rgb(242,216,29)"/><text x="50.0992%" y="111.50"></text></g><g><title>associated_item (269,984 samples, 0.11%)</title><rect x="63.6315%" y="69" width="0.1120%" height="15" fill="rgb(230,116,27)"/><text x="63.8815%" y="79.50"></text></g><g><title>associated_items (381,105 samples, 0.16%)</title><rect x="63.5936%" y="85" width="0.1581%" height="15" fill="rgb(228,99,48)"/><text x="63.8436%" y="95.50"></text></g><g><title>dropck_outlives (299,415 samples, 0.12%)</title><rect x="63.7746%" y="85" width="0.1242%" height="15" fill="rgb(253,11,6)"/><text x="64.0246%" y="95.50"></text></g><g><title>evaluate_obligation (2,191,586 samples, 0.91%)</title><rect x="63.8988%" y="85" width="0.9094%" height="15" fill="rgb(247,143,39)"/><text x="64.1488%" y="95.50"></text></g><g><title>is_copy_raw (482,724 samples, 0.20%)</title><rect x="65.0203%" y="85" width="0.2003%" height="15" fill="rgb(236,97,10)"/><text x="65.2703%" y="95.50"></text></g><g><title>evaluate_obligation (354,713 samples, 0.15%)</title><rect x="65.0735%" y="69" width="0.1472%" height="15" fill="rgb(233,208,19)"/><text x="65.3235%" y="79.50"></text></g><g><title>method_autoderef_steps (306,000 samples, 0.13%)</title><rect x="65.2581%" y="85" width="0.1270%" height="15" fill="rgb(216,164,2)"/><text x="65.5081%" y="95.50"></text></g><g><title>predicates_of (337,717 samples, 0.14%)</title><rect x="65.3951%" y="85" width="0.1401%" height="15" fill="rgb(220,129,5)"/><text x="65.6451%" y="95.50"></text></g><g><title>typeck (37,722,614 samples, 15.65%)</title><rect x="50.0165%" y="101" width="15.6538%" height="15" fill="rgb(242,17,10)"/><text x="50.2665%" y="111.50">typeck</text></g><g><title>item_bodies_checking (68,470,631 samples, 28.41%)</title><rect x="37.2766%" y="149" width="28.4133%" height="15" fill="rgb(242,107,0)"/><text x="37.5266%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (68,466,681 samples, 28.41%)</title><rect x="37.2782%" y="133" width="28.4117%" height="15" fill="rgb(251,28,31)"/><text x="37.5282%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (68,316,326 samples, 28.35%)</title><rect x="37.3406%" y="117" width="28.3493%" height="15" fill="rgb(233,223,10)"/><text x="37.5906%" y="127.50">typeck</text></g><g><title>generics_of (359,323 samples, 0.15%)</title><rect x="67.7518%" y="85" width="0.1491%" height="15" fill="rgb(215,21,27)"/><text x="68.0018%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (273,513 samples, 0.11%)</title><rect x="67.7874%" y="69" width="0.1135%" height="15" fill="rgb(232,23,21)"/><text x="68.0374%" y="79.50"></text></g><g><title>impl_trait_ref (458,587 samples, 0.19%)</title><rect x="67.9248%" y="85" width="0.1903%" height="15" fill="rgb(244,5,23)"/><text x="68.1748%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (373,954 samples, 0.16%)</title><rect x="67.9599%" y="69" width="0.1552%" height="15" fill="rgb(226,81,46)"/><text x="68.2099%" y="79.50"></text></g><g><title>predicates_of (368,725 samples, 0.15%)</title><rect x="68.1203%" y="85" width="0.1530%" height="15" fill="rgb(247,70,30)"/><text x="68.3703%" y="95.50"></text></g><g><title>specializes (365,614 samples, 0.15%)</title><rect x="68.2733%" y="85" width="0.1517%" height="15" fill="rgb(212,68,19)"/><text x="68.5233%" y="95.50"></text></g><g><title>evaluate_obligation (2,624,881 samples, 1.09%)</title><rect x="67.3802%" y="101" width="1.0892%" height="15" fill="rgb(240,187,13)"/><text x="67.6302%" y="111.50"></text></g><g><title>item_types_checking (6,967,009 samples, 2.89%)</title><rect x="65.6899%" y="149" width="2.8911%" height="15" fill="rgb(223,113,26)"/><text x="65.9399%" y="159.50">it..</text></g><g><title>check_mod_item_types (6,952,629 samples, 2.89%)</title><rect x="65.6959%" y="133" width="2.8851%" height="15" fill="rgb(206,192,2)"/><text x="65.9459%" y="143.50">ch..</text></g><g><title>typeck (5,896,106 samples, 2.45%)</title><rect x="66.1343%" y="117" width="2.4467%" height="15" fill="rgb(241,108,4)"/><text x="66.3843%" y="127.50">ty..</text></g><g><title>fn_sig (561,855 samples, 0.23%)</title><rect x="68.8182%" y="117" width="0.2332%" height="15" fill="rgb(247,173,49)"/><text x="69.0682%" y="127.50"></text></g><g><title>is_late_bound_map (444,976 samples, 0.18%)</title><rect x="69.1519%" y="101" width="0.1847%" height="15" fill="rgb(224,114,35)"/><text x="69.4019%" y="111.50"></text></g><g><title>resolve_lifetimes (405,755 samples, 0.17%)</title><rect x="69.1682%" y="85" width="0.1684%" height="15" fill="rgb(245,159,27)"/><text x="69.4182%" y="95.50"></text></g><g><title>lint_levels (531,096 samples, 0.22%)</title><rect x="69.5451%" y="69" width="0.2204%" height="15" fill="rgb(245,172,44)"/><text x="69.7951%" y="79.50"></text></g><g><title>named_region_map (1,033,892 samples, 0.43%)</title><rect x="69.3366%" y="101" width="0.4290%" height="15" fill="rgb(236,23,11)"/><text x="69.5866%" y="111.50"></text></g><g><title>resolve_lifetimes (998,201 samples, 0.41%)</title><rect x="69.3514%" y="85" width="0.4142%" height="15" fill="rgb(205,117,38)"/><text x="69.6014%" y="95.50"></text></g><g><title>generics_of (1,741,584 samples, 0.72%)</title><rect x="69.0514%" y="117" width="0.7227%" height="15" fill="rgb(237,72,25)"/><text x="69.3014%" y="127.50"></text></g><g><title>explicit_predicates_of (328,362 samples, 0.14%)</title><rect x="69.9108%" y="85" width="0.1363%" height="15" fill="rgb(244,70,9)"/><text x="70.1608%" y="95.50"></text></g><g><title>predicates_of (1,128,702 samples, 0.47%)</title><rect x="69.8005%" y="117" width="0.4684%" height="15" fill="rgb(217,125,39)"/><text x="70.0505%" y="127.50"></text></g><g><title>predicates_defined_on (1,023,720 samples, 0.42%)</title><rect x="69.8441%" y="101" width="0.4248%" height="15" fill="rgb(235,36,10)"/><text x="70.0941%" y="111.50"></text></g><g><title>inferred_outlives_of (534,506 samples, 0.22%)</title><rect x="70.0471%" y="85" width="0.2218%" height="15" fill="rgb(251,123,47)"/><text x="70.2971%" y="95.50"></text></g><g><title>inferred_outlives_crate (499,796 samples, 0.21%)</title><rect x="70.0615%" y="69" width="0.2074%" height="15" fill="rgb(221,13,13)"/><text x="70.3115%" y="79.50"></text></g><g><title>type_of (316,465 samples, 0.13%)</title><rect x="70.1376%" y="53" width="0.1313%" height="15" fill="rgb(238,131,9)"/><text x="70.3876%" y="63.50"></text></g><g><title>type_collecting (4,326,829 samples, 1.80%)</title><rect x="68.5831%" y="149" width="1.7955%" height="15" fill="rgb(211,50,8)"/><text x="68.8331%" y="159.50">t..</text></g><g><title>collect_mod_item_types (4,302,159 samples, 1.79%)</title><rect x="68.5933%" y="133" width="1.7853%" height="15" fill="rgb(245,182,24)"/><text x="68.8433%" y="143.50">c..</text></g><g><title>type_of (264,405 samples, 0.11%)</title><rect x="70.2689%" y="117" width="0.1097%" height="15" fill="rgb(242,14,37)"/><text x="70.5189%" y="127.50"></text></g><g><title>evaluate_obligation (355,656 samples, 0.15%)</title><rect x="71.0770%" y="117" width="0.1476%" height="15" fill="rgb(246,228,12)"/><text x="71.3270%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,220,701 samples, 0.92%)</title><rect x="70.5352%" y="133" width="0.9215%" height="15" fill="rgb(213,55,15)"/><text x="70.7852%" y="143.50"></text></g><g><title>evaluate_obligation (472,197 samples, 0.20%)</title><rect x="72.7269%" y="117" width="0.1959%" height="15" fill="rgb(209,9,3)"/><text x="72.9769%" y="127.50"></text></g><g><title>implied_outlives_bounds (283,553 samples, 0.12%)</title><rect x="72.9333%" y="117" width="0.1177%" height="15" fill="rgb(230,59,30)"/><text x="73.1833%" y="127.50"></text></g><g><title>object_safety_violations (479,175 samples, 0.20%)</title><rect x="73.0558%" y="117" width="0.1988%" height="15" fill="rgb(209,121,21)"/><text x="73.3058%" y="127.50"></text></g><g><title>param_env (613,325 samples, 0.25%)</title><rect x="73.2546%" y="117" width="0.2545%" height="15" fill="rgb(220,109,13)"/><text x="73.5046%" y="127.50"></text></g><g><title>region_scope_tree (765,966 samples, 0.32%)</title><rect x="73.5483%" y="117" width="0.3179%" height="15" fill="rgb(232,18,1)"/><text x="73.7983%" y="127.50"></text></g><g><title>analysis (177,244,427 samples, 73.55%)</title><rect x="0.3662%" y="181" width="73.5513%" height="15" fill="rgb(215,41,42)"/><text x="0.6162%" y="191.50">analysis</text></g><g><title>type_check_crate (95,675,198 samples, 39.70%)</title><rect x="34.2151%" y="165" width="39.7024%" height="15" fill="rgb(224,123,36)"/><text x="34.4651%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,513,015 samples, 3.53%)</title><rect x="70.3849%" y="149" width="3.5327%" height="15" fill="rgb(240,125,3)"/><text x="70.6349%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (5,930,028 samples, 2.46%)</title><rect x="71.4568%" y="133" width="2.4608%" height="15" fill="rgb(205,98,50)"/><text x="71.7068%" y="143.50">ch..</text></g><g><title>codegen_crate (287,764 samples, 0.12%)</title><rect x="73.9212%" y="181" width="0.1194%" height="15" fill="rgb(205,185,37)"/><text x="74.1712%" y="191.50"></text></g><g><title>AST_validation (478,216 samples, 0.20%)</title><rect x="74.1180%" y="165" width="0.1984%" height="15" fill="rgb(238,207,15)"/><text x="74.3680%" y="175.50"></text></g><g><title>complete_gated_feature_checking (245,013 samples, 0.10%)</title><rect x="74.3165%" y="165" width="0.1017%" height="15" fill="rgb(213,199,42)"/><text x="74.5665%" y="175.50"></text></g><g><title>metadata_load_macro (405,503 samples, 0.17%)</title><rect x="88.9634%" y="133" width="0.1683%" height="15" fill="rgb(235,201,11)"/><text x="89.2134%" y="143.50"></text></g><g><title>metadata_register_crate (465,405 samples, 0.19%)</title><rect x="89.1316%" y="133" width="0.1931%" height="15" fill="rgb(207,46,11)"/><text x="89.3816%" y="143.50"></text></g><g><title>macro_expand_crate (37,001,587 samples, 15.35%)</title><rect x="74.4470%" y="165" width="15.3546%" height="15" fill="rgb(241,35,35)"/><text x="74.6970%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (36,978,327 samples, 15.34%)</title><rect x="74.4566%" y="149" width="15.3449%" height="15" fill="rgb(243,32,47)"/><text x="74.7066%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,148,954 samples, 0.48%)</title><rect x="89.3248%" y="133" width="0.4768%" height="15" fill="rgb(247,202,23)"/><text x="89.5748%" y="143.50"></text></g><g><title>finalize_macro_resolutions (463,985 samples, 0.19%)</title><rect x="89.9661%" y="149" width="0.1925%" height="15" fill="rgb(219,102,11)"/><text x="90.2161%" y="159.50"></text></g><g><title>late_resolve_crate (7,007,789 samples, 2.91%)</title><rect x="90.1587%" y="149" width="2.9080%" height="15" fill="rgb(243,110,44)"/><text x="90.4087%" y="159.50">la..</text></g><g><title>configure_and_expand (46,292,032 samples, 19.21%)</title><rect x="74.0406%" y="181" width="19.2099%" height="15" fill="rgb(222,74,54)"/><text x="74.2906%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (8,126,641 samples, 3.37%)</title><rect x="89.8781%" y="165" width="3.3723%" height="15" fill="rgb(216,99,12)"/><text x="90.1281%" y="175.50">res..</text></g><g><title>drop_ast (388,984 samples, 0.16%)</title><rect x="93.2504%" y="181" width="0.1614%" height="15" fill="rgb(226,22,26)"/><text x="93.5004%" y="191.50"></text></g><g><title>early_lint_checks (845,700 samples, 0.35%)</title><rect x="93.4201%" y="181" width="0.3509%" height="15" fill="rgb(217,163,10)"/><text x="93.6701%" y="191.50"></text></g><g><title>free_global_ctxt (3,322,257 samples, 1.38%)</title><rect x="93.7710%" y="181" width="1.3786%" height="15" fill="rgb(213,25,53)"/><text x="94.0210%" y="191.50"></text></g><g><title>generate_crate_metadata (2,388,336 samples, 0.99%)</title><rect x="95.1496%" y="181" width="0.9911%" height="15" fill="rgb(252,105,26)"/><text x="95.3996%" y="191.50"></text></g><g><title>hir_lowering (6,690,416 samples, 2.78%)</title><rect x="96.1407%" y="181" width="2.7763%" height="15" fill="rgb(220,39,43)"/><text x="96.3907%" y="191.50">hi..</text></g><g><title>parse_crate (647,037 samples, 0.27%)</title><rect x="98.9395%" y="181" width="0.2685%" height="15" fill="rgb(229,68,48)"/><text x="99.1895%" y="191.50"></text></g><g><title>prepare_outputs (298,923 samples, 0.12%)</title><rect x="99.2112%" y="181" width="0.1240%" height="15" fill="rgb(252,8,32)"/><text x="99.4612%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,061,302 samples, 0.44%)</title><rect x="99.3353%" y="181" width="0.4404%" height="15" fill="rgb(223,20,43)"/><text x="99.5853%" y="191.50"></text></g><g><title>all (240,980,595 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (240,980,595 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (436,504 samples, 0.18%)</title><rect x="99.8189%" y="181" width="0.1811%" height="15" fill="rgb(249,185,26)"/><text x="100.0689%" y="191.50"></text></g></svg></svg>