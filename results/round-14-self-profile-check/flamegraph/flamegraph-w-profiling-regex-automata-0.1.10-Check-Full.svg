<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,129,604 samples, 0.13%)</title><rect x="17.6769%" y="101" width="0.1272%" height="15" fill="rgb(227,0,7)"/><text x="17.9269%" y="111.50"></text></g><g><title>item_attrs (1,244,486 samples, 0.14%)</title><rect x="18.4286%" y="69" width="0.1401%" height="15" fill="rgb(217,0,24)"/><text x="18.6786%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,195,536 samples, 0.13%)</title><rect x="18.4341%" y="53" width="0.1346%" height="15" fill="rgb(221,193,54)"/><text x="18.6841%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,725,014 samples, 0.19%)</title><rect x="18.3826%" y="85" width="0.1942%" height="15" fill="rgb(248,212,6)"/><text x="18.6326%" y="95.50"></text></g><g><title>adt_drop_tys (1,054,349 samples, 0.12%)</title><rect x="22.2025%" y="53" width="0.1187%" height="15" fill="rgb(208,68,35)"/><text x="22.4525%" y="63.50"></text></g><g><title>needs_drop_raw (8,022,155 samples, 0.90%)</title><rect x="22.0841%" y="69" width="0.9030%" height="15" fill="rgb(232,128,0)"/><text x="22.3341%" y="79.50"></text></g><g><title>is_copy_raw (5,915,914 samples, 0.67%)</title><rect x="22.3212%" y="53" width="0.6659%" height="15" fill="rgb(207,160,47)"/><text x="22.5712%" y="63.50"></text></g><g><title>evaluate_obligation (4,799,671 samples, 0.54%)</title><rect x="22.4468%" y="37" width="0.5403%" height="15" fill="rgb(228,23,34)"/><text x="22.6968%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (3,365,296 samples, 0.38%)</title><rect x="23.2205%" y="53" width="0.3788%" height="15" fill="rgb(218,30,26)"/><text x="23.4705%" y="63.50"></text></g><g><title>resolve_instance (6,858,420 samples, 0.77%)</title><rect x="22.9916%" y="69" width="0.7720%" height="15" fill="rgb(220,122,19)"/><text x="23.2416%" y="79.50"></text></g><g><title>thir_body (12,121,956 samples, 1.36%)</title><rect x="23.7935%" y="69" width="1.3645%" height="15" fill="rgb(250,228,42)"/><text x="24.0435%" y="79.50"></text></g><g><title>mir_const (74,911,628 samples, 8.43%)</title><rect x="16.7457%" y="117" width="8.4323%" height="15" fill="rgb(240,193,28)"/><text x="16.9957%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (65,509,847 samples, 7.37%)</title><rect x="17.8040%" y="101" width="7.3740%" height="15" fill="rgb(216,20,37)"/><text x="18.0540%" y="111.50">unsafety_c..</text></g><g><title>mir_built (58,644,432 samples, 6.60%)</title><rect x="18.5768%" y="85" width="6.6012%" height="15" fill="rgb(206,188,39)"/><text x="18.8268%" y="95.50">mir_built</text></g><g><title>mir_const_qualif (1,039,142 samples, 0.12%)</title><rect x="25.1781%" y="117" width="0.1170%" height="15" fill="rgb(217,207,13)"/><text x="25.4281%" y="127.50"></text></g><g><title>mir_promoted (83,953,563 samples, 9.45%)</title><rect x="15.8452%" y="133" width="9.4501%" height="15" fill="rgb(231,73,38)"/><text x="16.0952%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (3,655,959 samples, 0.41%)</title><rect x="25.2962%" y="133" width="0.4115%" height="15" fill="rgb(225,20,46)"/><text x="25.5462%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (8,378,046 samples, 0.94%)</title><rect x="25.7077%" y="133" width="0.9431%" height="15" fill="rgb(210,31,41)"/><text x="25.9577%" y="143.50"></text></g><g><title>normalize_projection_ty (5,551,815 samples, 0.62%)</title><rect x="26.0258%" y="117" width="0.6249%" height="15" fill="rgb(221,200,47)"/><text x="26.2758%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,289,382 samples, 0.15%)</title><rect x="26.6508%" y="133" width="0.1451%" height="15" fill="rgb(226,26,5)"/><text x="26.9008%" y="143.50"></text></g><g><title>type_op_prove_predicate (23,405,201 samples, 2.63%)</title><rect x="26.8044%" y="133" width="2.6346%" height="15" fill="rgb(249,33,26)"/><text x="27.0544%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (257,768,561 samples, 29.02%)</title><rect x="0.4262%" y="165" width="29.0154%" height="15" fill="rgb(235,183,28)"/><text x="0.6762%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (256,531,502 samples, 28.88%)</title><rect x="0.5654%" y="149" width="28.8762%" height="15" fill="rgb(221,5,38)"/><text x="0.8154%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,495,590 samples, 0.17%)</title><rect x="29.5263%" y="165" width="0.1683%" height="15" fill="rgb(247,18,42)"/><text x="29.7763%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,492,406 samples, 0.17%)</title><rect x="29.9138%" y="133" width="0.1680%" height="15" fill="rgb(241,131,45)"/><text x="30.1638%" y="143.50"></text></g><g><title>check_mod_attrs (3,380,148 samples, 0.38%)</title><rect x="29.7013%" y="149" width="0.3805%" height="15" fill="rgb(249,31,29)"/><text x="29.9513%" y="159.50"></text></g><g><title>check_mod_const_bodies (981,217 samples, 0.11%)</title><rect x="30.0818%" y="149" width="0.1104%" height="15" fill="rgb(225,111,53)"/><text x="30.3318%" y="159.50"></text></g><g><title>lint_levels (1,302,054 samples, 0.15%)</title><rect x="30.3749%" y="133" width="0.1466%" height="15" fill="rgb(238,160,17)"/><text x="30.6249%" y="143.50"></text></g><g><title>lookup_deprecation_entry (982,723 samples, 0.11%)</title><rect x="30.5215%" y="133" width="0.1106%" height="15" fill="rgb(214,148,48)"/><text x="30.7715%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,421,690 samples, 0.39%)</title><rect x="30.2689%" y="149" width="0.3852%" height="15" fill="rgb(232,36,49)"/><text x="30.5189%" y="159.50"></text></g><g><title>misc_checking_1 (8,737,787 samples, 0.98%)</title><rect x="29.6947%" y="165" width="0.9836%" height="15" fill="rgb(209,103,24)"/><text x="29.9447%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,826,014 samples, 0.54%)</title><rect x="30.6785%" y="149" width="0.5432%" height="15" fill="rgb(229,88,8)"/><text x="30.9285%" y="159.50"></text></g><g><title>check_mod_liveness (3,956,974 samples, 0.45%)</title><rect x="30.7763%" y="133" width="0.4454%" height="15" fill="rgb(213,181,19)"/><text x="31.0263%" y="143.50"></text></g><g><title>misc_checking_2 (10,464,517 samples, 1.18%)</title><rect x="30.6783%" y="165" width="1.1779%" height="15" fill="rgb(254,191,54)"/><text x="30.9283%" y="175.50"></text></g><g><title>match_checking (5,636,283 samples, 0.63%)</title><rect x="31.2217%" y="149" width="0.6344%" height="15" fill="rgb(241,83,37)"/><text x="31.4717%" y="159.50"></text></g><g><title>check_match (5,332,218 samples, 0.60%)</title><rect x="31.2560%" y="133" width="0.6002%" height="15" fill="rgb(233,36,39)"/><text x="31.5060%" y="143.50"></text></g><g><title>check_private_in_public (1,649,479 samples, 0.19%)</title><rect x="31.8578%" y="149" width="0.1857%" height="15" fill="rgb(226,3,54)"/><text x="32.1078%" y="159.50"></text></g><g><title>death_checking (3,372,868 samples, 0.38%)</title><rect x="32.0435%" y="149" width="0.3797%" height="15" fill="rgb(245,192,40)"/><text x="32.2935%" y="159.50"></text></g><g><title>param_env (933,341 samples, 0.11%)</title><rect x="32.9099%" y="117" width="0.1051%" height="15" fill="rgb(238,167,29)"/><text x="33.1599%" y="127.50"></text></g><g><title>crate_lints (6,757,725 samples, 0.76%)</title><rect x="32.4235%" y="133" width="0.7607%" height="15" fill="rgb(232,182,51)"/><text x="32.6735%" y="143.50"></text></g><g><title>type_of (1,263,046 samples, 0.14%)</title><rect x="33.0420%" y="117" width="0.1422%" height="15" fill="rgb(231,60,39)"/><text x="33.2920%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,013,725 samples, 0.11%)</title><rect x="33.0700%" y="101" width="0.1141%" height="15" fill="rgb(208,69,12)"/><text x="33.3200%" y="111.50"></text></g><g><title>lint_checking (11,852,443 samples, 1.33%)</title><rect x="32.4232%" y="149" width="1.3342%" height="15" fill="rgb(235,93,37)"/><text x="32.6732%" y="159.50"></text></g><g><title>module_lints (5,092,107 samples, 0.57%)</title><rect x="33.1841%" y="133" width="0.5732%" height="15" fill="rgb(213,116,39)"/><text x="33.4341%" y="143.50"></text></g><g><title>lint_mod (5,071,297 samples, 0.57%)</title><rect x="33.1865%" y="117" width="0.5708%" height="15" fill="rgb(222,207,29)"/><text x="33.4365%" y="127.50"></text></g><g><title>privacy_access_levels (2,591,278 samples, 0.29%)</title><rect x="33.7573%" y="149" width="0.2917%" height="15" fill="rgb(206,96,30)"/><text x="34.0073%" y="159.50"></text></g><g><title>privacy_checking_modules (8,780,918 samples, 0.99%)</title><rect x="34.0490%" y="149" width="0.9884%" height="15" fill="rgb(218,138,4)"/><text x="34.2990%" y="159.50"></text></g><g><title>check_mod_privacy (8,764,517 samples, 0.99%)</title><rect x="34.0508%" y="133" width="0.9866%" height="15" fill="rgb(250,191,14)"/><text x="34.3008%" y="143.50"></text></g><g><title>misc_checking_3 (28,345,397 samples, 3.19%)</title><rect x="31.8562%" y="165" width="3.1907%" height="15" fill="rgb(239,60,40)"/><text x="32.1062%" y="175.50">mis..</text></g><g><title>impl_parent (3,263,844 samples, 0.37%)</title><rect x="35.7690%" y="101" width="0.3674%" height="15" fill="rgb(206,27,48)"/><text x="36.0190%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,761,857 samples, 0.20%)</title><rect x="35.9381%" y="85" width="0.1983%" height="15" fill="rgb(225,35,8)"/><text x="36.1881%" y="95.50"></text></g><g><title>impl_trait_ref (6,471,953 samples, 0.73%)</title><rect x="36.1364%" y="101" width="0.7285%" height="15" fill="rgb(250,213,24)"/><text x="36.3864%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,039,128 samples, 0.57%)</title><rect x="36.2977%" y="85" width="0.5672%" height="15" fill="rgb(247,123,22)"/><text x="36.5477%" y="95.50"></text></g><g><title>trait_impls_of (1,090,221 samples, 0.12%)</title><rect x="36.8947%" y="101" width="0.1227%" height="15" fill="rgb(231,138,38)"/><text x="37.1447%" y="111.50"></text></g><g><title>coherent_trait (17,013,280 samples, 1.92%)</title><rect x="35.1046%" y="133" width="1.9151%" height="15" fill="rgb(231,145,46)"/><text x="35.3546%" y="143.50">c..</text></g><g><title>specialization_graph_of (16,306,803 samples, 1.84%)</title><rect x="35.1841%" y="117" width="1.8356%" height="15" fill="rgb(251,118,11)"/><text x="35.4341%" y="127.50">s..</text></g><g><title>coherence_checking (17,342,914 samples, 1.95%)</title><rect x="35.1013%" y="149" width="1.9522%" height="15" fill="rgb(217,147,25)"/><text x="35.3513%" y="159.50">c..</text></g><g><title>associated_item (1,104,698 samples, 0.12%)</title><rect x="61.7232%" y="85" width="0.1243%" height="15" fill="rgb(247,81,37)"/><text x="61.9732%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (898,207 samples, 0.10%)</title><rect x="61.7465%" y="69" width="0.1011%" height="15" fill="rgb(209,12,38)"/><text x="61.9965%" y="79.50"></text></g><g><title>associated_items (1,654,456 samples, 0.19%)</title><rect x="61.6717%" y="101" width="0.1862%" height="15" fill="rgb(227,1,9)"/><text x="61.9217%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,373,137 samples, 0.15%)</title><rect x="62.0784%" y="85" width="0.1546%" height="15" fill="rgb(248,47,43)"/><text x="62.3284%" y="95.50"></text></g><g><title>dropck_outlives (3,063,561 samples, 0.34%)</title><rect x="61.8896%" y="101" width="0.3448%" height="15" fill="rgb(221,10,30)"/><text x="62.1396%" y="111.50"></text></g><g><title>generics_of (1,028,551 samples, 0.12%)</title><rect x="63.8400%" y="85" width="0.1158%" height="15" fill="rgb(210,229,1)"/><text x="64.0900%" y="95.50"></text></g><g><title>evaluate_obligation (17,381,365 samples, 1.96%)</title><rect x="62.3101%" y="101" width="1.9565%" height="15" fill="rgb(222,148,37)"/><text x="62.5601%" y="111.50">e..</text></g><g><title>generics_of (934,404 samples, 0.11%)</title><rect x="64.3221%" y="101" width="0.1052%" height="15" fill="rgb(234,67,33)"/><text x="64.5721%" y="111.50"></text></g><g><title>evaluate_obligation (1,681,344 samples, 0.19%)</title><rect x="64.8026%" y="85" width="0.1893%" height="15" fill="rgb(247,98,35)"/><text x="65.0526%" y="95.50"></text></g><g><title>method_autoderef_steps (3,544,145 samples, 0.40%)</title><rect x="64.5959%" y="101" width="0.3989%" height="15" fill="rgb(247,138,52)"/><text x="64.8459%" y="111.50"></text></g><g><title>predicates_of (1,517,208 samples, 0.17%)</title><rect x="65.0778%" y="101" width="0.1708%" height="15" fill="rgb(213,79,30)"/><text x="65.3278%" y="111.50"></text></g><g><title>predicates_defined_on (1,101,941 samples, 0.12%)</title><rect x="65.1246%" y="85" width="0.1240%" height="15" fill="rgb(246,177,23)"/><text x="65.3746%" y="95.50"></text></g><g><title>evaluate_obligation (7,411,597 samples, 0.83%)</title><rect x="72.8224%" y="85" width="0.8343%" height="15" fill="rgb(230,62,27)"/><text x="73.0724%" y="95.50"></text></g><g><title>generics_of (909,058 samples, 0.10%)</title><rect x="73.6756%" y="85" width="0.1023%" height="15" fill="rgb(216,154,8)"/><text x="73.9256%" y="95.50"></text></g><g><title>method_autoderef_steps (1,443,415 samples, 0.16%)</title><rect x="73.8851%" y="85" width="0.1625%" height="15" fill="rgb(244,35,45)"/><text x="74.1351%" y="95.50"></text></g><g><title>typeck (78,219,171 samples, 8.80%)</title><rect x="65.3192%" y="101" width="8.8047%" height="15" fill="rgb(251,115,12)"/><text x="65.5692%" y="111.50">typeck</text></g><g><title>item_bodies_checking (329,414,272 samples, 37.08%)</title><rect x="37.0800%" y="149" width="37.0801%" height="15" fill="rgb(240,54,50)"/><text x="37.3300%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (329,409,592 samples, 37.08%)</title><rect x="37.0805%" y="133" width="37.0796%" height="15" fill="rgb(233,84,52)"/><text x="37.3305%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (328,572,038 samples, 36.99%)</title><rect x="37.1748%" y="117" width="36.9853%" height="15" fill="rgb(207,117,47)"/><text x="37.4248%" y="127.50">typeck</text></g><g><title>item_types_checking (8,320,443 samples, 0.94%)</title><rect x="74.1601%" y="149" width="0.9366%" height="15" fill="rgb(249,43,39)"/><text x="74.4101%" y="159.50"></text></g><g><title>check_mod_item_types (8,302,033 samples, 0.93%)</title><rect x="74.1622%" y="133" width="0.9345%" height="15" fill="rgb(209,38,44)"/><text x="74.4122%" y="143.50"></text></g><g><title>fn_sig (2,220,081 samples, 0.25%)</title><rect x="75.3409%" y="117" width="0.2499%" height="15" fill="rgb(236,212,23)"/><text x="75.5909%" y="127.50"></text></g><g><title>named_region_map (1,026,742 samples, 0.12%)</title><rect x="75.7591%" y="101" width="0.1156%" height="15" fill="rgb(242,79,21)"/><text x="76.0091%" y="111.50"></text></g><g><title>generics_of (2,599,817 samples, 0.29%)</title><rect x="75.5908%" y="117" width="0.2926%" height="15" fill="rgb(211,96,35)"/><text x="75.8408%" y="127.50"></text></g><g><title>late_bound_vars_map (1,059,540 samples, 0.12%)</title><rect x="76.1283%" y="69" width="0.1193%" height="15" fill="rgb(253,215,40)"/><text x="76.3783%" y="79.50"></text></g><g><title>resolve_lifetimes (1,011,750 samples, 0.11%)</title><rect x="76.1337%" y="53" width="0.1139%" height="15" fill="rgb(211,81,21)"/><text x="76.3837%" y="63.50"></text></g><g><title>explicit_predicates_of (2,020,308 samples, 0.23%)</title><rect x="76.0295%" y="85" width="0.2274%" height="15" fill="rgb(208,190,38)"/><text x="76.2795%" y="95.50"></text></g><g><title>predicates_of (4,453,503 samples, 0.50%)</title><rect x="75.9202%" y="117" width="0.5013%" height="15" fill="rgb(235,213,38)"/><text x="76.1702%" y="127.50"></text></g><g><title>predicates_defined_on (4,079,641 samples, 0.46%)</title><rect x="75.9623%" y="101" width="0.4592%" height="15" fill="rgb(237,122,38)"/><text x="76.2123%" y="111.50"></text></g><g><title>inferred_outlives_of (1,462,056 samples, 0.16%)</title><rect x="76.2569%" y="85" width="0.1646%" height="15" fill="rgb(244,218,35)"/><text x="76.5069%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,330,144 samples, 0.15%)</title><rect x="76.2717%" y="69" width="0.1497%" height="15" fill="rgb(240,68,47)"/><text x="76.5217%" y="79.50"></text></g><g><title>type_collecting (12,352,178 samples, 1.39%)</title><rect x="75.0979%" y="149" width="1.3904%" height="15" fill="rgb(210,16,53)"/><text x="75.3479%" y="159.50"></text></g><g><title>collect_mod_item_types (12,316,558 samples, 1.39%)</title><rect x="75.1019%" y="133" width="1.3864%" height="15" fill="rgb(235,124,12)"/><text x="75.3519%" y="143.50"></text></g><g><title>evaluate_obligation (3,086,921 samples, 0.35%)</title><rect x="78.9347%" y="117" width="0.3475%" height="15" fill="rgb(224,169,11)"/><text x="79.1847%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,796,498 samples, 0.20%)</title><rect x="79.2845%" y="117" width="0.2022%" height="15" fill="rgb(250,166,2)"/><text x="79.5345%" y="127.50"></text></g><g><title>param_env (3,877,824 samples, 0.44%)</title><rect x="79.4867%" y="117" width="0.4365%" height="15" fill="rgb(242,216,29)"/><text x="79.7367%" y="127.50"></text></g><g><title>region_scope_tree (4,011,203 samples, 0.45%)</title><rect x="79.9319%" y="117" width="0.4515%" height="15" fill="rgb(230,116,27)"/><text x="80.1819%" y="127.50"></text></g><g><title>check_impl_item_well_formed (33,022,193 samples, 3.72%)</title><rect x="76.6761%" y="133" width="3.7171%" height="15" fill="rgb(228,99,48)"/><text x="76.9261%" y="143.50">chec..</text></g><g><title>evaluate_obligation (1,897,965 samples, 0.21%)</title><rect x="81.4021%" y="117" width="0.2136%" height="15" fill="rgb(253,11,6)"/><text x="81.6521%" y="127.50"></text></g><g><title>param_env (1,935,801 samples, 0.22%)</title><rect x="81.6854%" y="117" width="0.2179%" height="15" fill="rgb(247,143,39)"/><text x="81.9354%" y="127.50"></text></g><g><title>check_item_well_formed (14,528,399 samples, 1.64%)</title><rect x="80.3932%" y="133" width="1.6354%" height="15" fill="rgb(236,97,10)"/><text x="80.6432%" y="143.50"></text></g><g><title>analysis (728,601,914 samples, 82.01%)</title><rect x="0.1712%" y="181" width="82.0142%" height="15" fill="rgb(233,208,19)"/><text x="0.4212%" y="191.50">analysis</text></g><g><title>type_check_crate (418,772,371 samples, 47.14%)</title><rect x="35.0469%" y="165" width="47.1386%" height="15" fill="rgb(216,164,2)"/><text x="35.2969%" y="175.50">type_check_crate</text></g><g><title>wf_checking (50,555,615 samples, 5.69%)</title><rect x="76.4948%" y="149" width="5.6907%" height="15" fill="rgb(220,129,5)"/><text x="76.7448%" y="159.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,393,847 samples, 0.16%)</title><rect x="82.0286%" y="133" width="0.1569%" height="15" fill="rgb(242,17,10)"/><text x="82.2786%" y="143.50"></text></g><g><title>AST_validation (1,045,261 samples, 0.12%)</title><rect x="82.2805%" y="165" width="0.1177%" height="15" fill="rgb(242,107,0)"/><text x="82.5305%" y="175.50"></text></g><g><title>metadata_register_crate (1,273,376 samples, 0.14%)</title><rect x="92.1515%" y="133" width="0.1433%" height="15" fill="rgb(251,28,31)"/><text x="92.4015%" y="143.50"></text></g><g><title>macro_expand_crate (89,991,686 samples, 10.13%)</title><rect x="82.4688%" y="165" width="10.1298%" height="15" fill="rgb(233,223,10)"/><text x="82.7188%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (89,976,135 samples, 10.13%)</title><rect x="82.4705%" y="149" width="10.1281%" height="15" fill="rgb(215,21,27)"/><text x="82.7205%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,698,329 samples, 0.30%)</title><rect x="92.2949%" y="133" width="0.3037%" height="15" fill="rgb(232,23,21)"/><text x="92.5449%" y="143.50"></text></g><g><title>late_resolve_crate (11,977,484 samples, 1.35%)</title><rect x="92.6971%" y="149" width="1.3482%" height="15" fill="rgb(244,5,23)"/><text x="92.9471%" y="159.50"></text></g><g><title>configure_and_expand (106,119,496 samples, 11.95%)</title><rect x="82.2553%" y="181" width="11.9452%" height="15" fill="rgb(226,81,46)"/><text x="82.5053%" y="191.50">configure_and_expa..</text></g><g><title>resolve_crate (14,160,489 samples, 1.59%)</title><rect x="92.6065%" y="165" width="1.5940%" height="15" fill="rgb(247,70,30)"/><text x="92.8565%" y="175.50"></text></g><g><title>drop_ast (2,062,603 samples, 0.23%)</title><rect x="94.2005%" y="181" width="0.2322%" height="15" fill="rgb(212,68,19)"/><text x="94.4505%" y="191.50"></text></g><g><title>early_lint_checks (3,694,751 samples, 0.42%)</title><rect x="94.4346%" y="181" width="0.4159%" height="15" fill="rgb(240,187,13)"/><text x="94.6846%" y="191.50"></text></g><g><title>free_global_ctxt (9,221,003 samples, 1.04%)</title><rect x="94.8505%" y="181" width="1.0380%" height="15" fill="rgb(223,113,26)"/><text x="95.1005%" y="191.50"></text></g><g><title>generate_crate_metadata (6,954,207 samples, 0.78%)</title><rect x="95.8885%" y="181" width="0.7828%" height="15" fill="rgb(206,192,2)"/><text x="96.1385%" y="191.50"></text></g><g><title>hir_lowering (25,382,404 samples, 2.86%)</title><rect x="96.6713%" y="181" width="2.8571%" height="15" fill="rgb(241,108,4)"/><text x="96.9213%" y="191.50">hi..</text></g><g><title>self_profile_alloc_query_strings (2,304,776 samples, 0.26%)</title><rect x="99.6478%" y="181" width="0.2594%" height="15" fill="rgb(247,173,49)"/><text x="99.8978%" y="191.50"></text></g><g><title>all (888,384,590 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (888,384,590 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>