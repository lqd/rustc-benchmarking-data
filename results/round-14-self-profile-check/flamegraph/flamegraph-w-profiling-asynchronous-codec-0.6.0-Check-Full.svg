<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (292,702 samples, 0.15%)</title><rect x="10.1393%" y="149" width="0.1464%" height="15" fill="rgb(227,0,7)"/><text x="10.3893%" y="159.50"></text></g><g><title>item_attrs (236,083 samples, 0.12%)</title><rect x="10.6462%" y="117" width="0.1181%" height="15" fill="rgb(217,0,24)"/><text x="10.8962%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (228,243 samples, 0.11%)</title><rect x="10.6502%" y="101" width="0.1141%" height="15" fill="rgb(221,193,54)"/><text x="10.9002%" y="111.50"></text></g><g><title>codegen_fn_attrs (328,074 samples, 0.16%)</title><rect x="10.6079%" y="133" width="0.1641%" height="15" fill="rgb(248,212,6)"/><text x="10.8579%" y="143.50"></text></g><g><title>is_copy_raw (1,731,356 samples, 0.87%)</title><rect x="12.8933%" y="101" width="0.8659%" height="15" fill="rgb(208,68,35)"/><text x="13.1433%" y="111.50"></text></g><g><title>evaluate_obligation (1,465,855 samples, 0.73%)</title><rect x="13.0260%" y="85" width="0.7331%" height="15" fill="rgb(232,128,0)"/><text x="13.2760%" y="95.50"></text></g><g><title>needs_drop_raw (2,168,623 samples, 1.08%)</title><rect x="12.6753%" y="117" width="1.0846%" height="15" fill="rgb(207,160,47)"/><text x="12.9253%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,074,943 samples, 0.54%)</title><rect x="13.9439%" y="101" width="0.5376%" height="15" fill="rgb(228,23,34)"/><text x="14.1939%" y="111.50"></text></g><g><title>resolve_instance (1,618,538 samples, 0.81%)</title><rect x="13.7598%" y="117" width="0.8095%" height="15" fill="rgb(218,30,26)"/><text x="14.0098%" y="127.50"></text></g><g><title>thir_body (1,294,286 samples, 0.65%)</title><rect x="14.5882%" y="117" width="0.6473%" height="15" fill="rgb(220,122,19)"/><text x="14.8382%" y="127.50"></text></g><g><title>mir_const (11,403,907 samples, 5.70%)</title><rect x="9.5724%" y="165" width="5.7033%" height="15" fill="rgb(250,228,42)"/><text x="9.8224%" y="175.50">mir_con..</text></g><g><title>unsafety_check_result (9,977,666 samples, 4.99%)</title><rect x="10.2857%" y="149" width="4.9900%" height="15" fill="rgb(240,193,28)"/><text x="10.5357%" y="159.50">unsafe..</text></g><g><title>mir_built (9,005,260 samples, 4.50%)</title><rect x="10.7720%" y="133" width="4.5037%" height="15" fill="rgb(216,20,37)"/><text x="11.0220%" y="143.50">mir_b..</text></g><g><title>mir_promoted (12,664,820 samples, 6.33%)</title><rect x="9.0455%" y="181" width="6.3339%" height="15" fill="rgb(206,188,39)"/><text x="9.2955%" y="191.50">mir_prom..</text></g><g><title>mir_const_qualif (207,441 samples, 0.10%)</title><rect x="15.2757%" y="165" width="0.1037%" height="15" fill="rgb(217,207,13)"/><text x="15.5257%" y="175.50"></text></g><g><title>type_op_ascribe_user_type (919,470 samples, 0.46%)</title><rect x="15.3794%" y="181" width="0.4598%" height="15" fill="rgb(231,73,38)"/><text x="15.6294%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (1,498,538 samples, 0.75%)</title><rect x="15.8393%" y="181" width="0.7494%" height="15" fill="rgb(225,20,46)"/><text x="16.0893%" y="191.50"></text></g><g><title>normalize_projection_ty (1,027,361 samples, 0.51%)</title><rect x="16.0749%" y="165" width="0.5138%" height="15" fill="rgb(210,31,41)"/><text x="16.3249%" y="175.50"></text></g><g><title>type_op_normalize_ty (605,723 samples, 0.30%)</title><rect x="16.6567%" y="181" width="0.3029%" height="15" fill="rgb(221,200,47)"/><text x="16.9067%" y="191.50"></text></g><g><title>normalize_projection_ty (397,912 samples, 0.20%)</title><rect x="16.7607%" y="165" width="0.1990%" height="15" fill="rgb(226,26,5)"/><text x="17.0107%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,551,700 samples, 2.28%)</title><rect x="16.9597%" y="181" width="2.2764%" height="15" fill="rgb(249,33,26)"/><text x="17.2097%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (37,281,493 samples, 18.65%)</title><rect x="0.5939%" y="213" width="18.6452%" height="15" fill="rgb(235,183,28)"/><text x="0.8439%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (37,075,050 samples, 18.54%)</title><rect x="0.6971%" y="197" width="18.5420%" height="15" fill="rgb(221,5,38)"/><text x="0.9471%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (309,605 samples, 0.15%)</title><rect x="19.3204%" y="213" width="0.1548%" height="15" fill="rgb(247,18,42)"/><text x="19.5704%" y="223.50"></text></g><g><title>should_inherit_track_caller (236,512 samples, 0.12%)</title><rect x="19.7506%" y="165" width="0.1183%" height="15" fill="rgb(241,131,45)"/><text x="20.0006%" y="175.50"></text></g><g><title>codegen_fn_attrs (422,915 samples, 0.21%)</title><rect x="19.6648%" y="181" width="0.2115%" height="15" fill="rgb(249,31,29)"/><text x="19.9148%" y="191.50"></text></g><g><title>check_mod_attrs (765,317 samples, 0.38%)</title><rect x="19.4936%" y="197" width="0.3828%" height="15" fill="rgb(225,111,53)"/><text x="19.7436%" y="207.50"></text></g><g><title>lookup_deprecation_entry (250,312 samples, 0.13%)</title><rect x="20.1721%" y="181" width="0.1252%" height="15" fill="rgb(238,160,17)"/><text x="20.4221%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (597,968 samples, 0.30%)</title><rect x="20.0335%" y="197" width="0.2991%" height="15" fill="rgb(214,148,48)"/><text x="20.2835%" y="207.50"></text></g><g><title>misc_checking_1 (1,808,729 samples, 0.90%)</title><rect x="19.4756%" y="213" width="0.9046%" height="15" fill="rgb(232,36,49)"/><text x="19.7256%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (660,897 samples, 0.33%)</title><rect x="20.3809%" y="197" width="0.3305%" height="15" fill="rgb(209,103,24)"/><text x="20.6309%" y="207.50"></text></g><g><title>check_mod_liveness (529,875 samples, 0.27%)</title><rect x="20.4464%" y="181" width="0.2650%" height="15" fill="rgb(229,88,8)"/><text x="20.6964%" y="191.50"></text></g><g><title>misc_checking_2 (1,275,744 samples, 0.64%)</title><rect x="20.3801%" y="213" width="0.6380%" height="15" fill="rgb(213,181,19)"/><text x="20.6301%" y="223.50"></text></g><g><title>match_checking (613,367 samples, 0.31%)</title><rect x="20.7114%" y="197" width="0.3068%" height="15" fill="rgb(254,191,54)"/><text x="20.9614%" y="207.50"></text></g><g><title>check_match (562,235 samples, 0.28%)</title><rect x="20.7370%" y="181" width="0.2812%" height="15" fill="rgb(241,83,37)"/><text x="20.9870%" y="191.50"></text></g><g><title>check_private_in_public (429,035 samples, 0.21%)</title><rect x="21.0221%" y="197" width="0.2146%" height="15" fill="rgb(233,36,39)"/><text x="21.2721%" y="207.50"></text></g><g><title>death_checking (1,158,163 samples, 0.58%)</title><rect x="21.2367%" y="197" width="0.5792%" height="15" fill="rgb(226,3,54)"/><text x="21.4867%" y="207.50"></text></g><g><title>item_attrs (429,854 samples, 0.21%)</title><rect x="21.6009%" y="181" width="0.2150%" height="15" fill="rgb(245,192,40)"/><text x="21.8509%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (429,104 samples, 0.21%)</title><rect x="21.6013%" y="165" width="0.2146%" height="15" fill="rgb(238,167,29)"/><text x="21.8513%" y="175.50"></text></g><g><title>param_env (727,720 samples, 0.36%)</title><rect x="22.5560%" y="165" width="0.3639%" height="15" fill="rgb(232,182,51)"/><text x="22.8060%" y="175.50"></text></g><g><title>predicates_of (334,174 samples, 0.17%)</title><rect x="22.7529%" y="149" width="0.1671%" height="15" fill="rgb(231,60,39)"/><text x="23.0029%" y="159.50"></text></g><g><title>predicates_defined_on (273,174 samples, 0.14%)</title><rect x="22.7834%" y="133" width="0.1366%" height="15" fill="rgb(208,69,12)"/><text x="23.0334%" y="143.50"></text></g><g><title>crate_lints (3,500,288 samples, 1.75%)</title><rect x="21.8166%" y="181" width="1.7506%" height="15" fill="rgb(235,93,37)"/><text x="22.0666%" y="191.50"></text></g><g><title>type_of (1,286,913 samples, 0.64%)</title><rect x="22.9236%" y="165" width="0.6436%" height="15" fill="rgb(213,116,39)"/><text x="23.1736%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (1,000,121 samples, 0.50%)</title><rect x="23.0670%" y="149" width="0.5002%" height="15" fill="rgb(222,207,29)"/><text x="23.3170%" y="159.50"></text></g><g><title>lint_checking (4,119,945 samples, 2.06%)</title><rect x="21.8159%" y="197" width="2.0605%" height="15" fill="rgb(206,96,30)"/><text x="22.0659%" y="207.50">l..</text></g><g><title>module_lints (618,217 samples, 0.31%)</title><rect x="23.5672%" y="181" width="0.3092%" height="15" fill="rgb(218,138,4)"/><text x="23.8172%" y="191.50"></text></g><g><title>lint_mod (607,927 samples, 0.30%)</title><rect x="23.5723%" y="165" width="0.3040%" height="15" fill="rgb(250,191,14)"/><text x="23.8223%" y="175.50"></text></g><g><title>privacy_access_levels (415,914 samples, 0.21%)</title><rect x="23.8764%" y="197" width="0.2080%" height="15" fill="rgb(239,60,40)"/><text x="24.1264%" y="207.50"></text></g><g><title>privacy_checking_modules (1,582,418 samples, 0.79%)</title><rect x="24.0844%" y="197" width="0.7914%" height="15" fill="rgb(206,27,48)"/><text x="24.3344%" y="207.50"></text></g><g><title>check_mod_privacy (1,573,297 samples, 0.79%)</title><rect x="24.0889%" y="181" width="0.7868%" height="15" fill="rgb(225,35,8)"/><text x="24.3389%" y="191.50"></text></g><g><title>misc_checking_3 (7,731,475 samples, 3.87%)</title><rect x="21.0182%" y="213" width="3.8667%" height="15" fill="rgb(250,213,24)"/><text x="21.2682%" y="223.50">misc..</text></g><g><title>impl_parent (1,224,742 samples, 0.61%)</title><rect x="25.9839%" y="149" width="0.6125%" height="15" fill="rgb(247,123,22)"/><text x="26.2339%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (811,730 samples, 0.41%)</title><rect x="26.1905%" y="133" width="0.4060%" height="15" fill="rgb(231,138,38)"/><text x="26.4405%" y="143.50"></text></g><g><title>impl_trait_ref (3,669,283 samples, 1.84%)</title><rect x="26.5965%" y="149" width="1.8351%" height="15" fill="rgb(231,145,46)"/><text x="26.8465%" y="159.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,274,103 samples, 1.64%)</title><rect x="26.7941%" y="133" width="1.6374%" height="15" fill="rgb(251,118,11)"/><text x="27.0441%" y="143.50"></text></g><g><title>coherent_trait (7,425,252 samples, 3.71%)</title><rect x="24.9647%" y="181" width="3.7135%" height="15" fill="rgb(217,147,25)"/><text x="25.2147%" y="191.50">cohe..</text></g><g><title>specialization_graph_of (7,405,372 samples, 3.70%)</title><rect x="24.9746%" y="165" width="3.7036%" height="15" fill="rgb(247,81,37)"/><text x="25.2246%" y="175.50">spec..</text></g><g><title>trait_impls_of (450,875 samples, 0.23%)</title><rect x="28.4527%" y="149" width="0.2255%" height="15" fill="rgb(209,12,38)"/><text x="28.7027%" y="159.50"></text></g><g><title>orphan_check_crate (205,522 samples, 0.10%)</title><rect x="28.7065%" y="181" width="0.1028%" height="15" fill="rgb(227,1,9)"/><text x="28.9565%" y="191.50"></text></g><g><title>coherence_checking (7,719,864 samples, 3.86%)</title><rect x="24.9556%" y="197" width="3.8609%" height="15" fill="rgb(248,47,43)"/><text x="25.2056%" y="207.50">cohe..</text></g><g><title>associated_item (734,919 samples, 0.37%)</title><rect x="43.6653%" y="133" width="0.3675%" height="15" fill="rgb(221,10,30)"/><text x="43.9153%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (382,065 samples, 0.19%)</title><rect x="43.8418%" y="117" width="0.1911%" height="15" fill="rgb(210,229,1)"/><text x="44.0918%" y="127.50"></text></g><g><title>associated_items (963,631 samples, 0.48%)</title><rect x="43.5683%" y="149" width="0.4819%" height="15" fill="rgb(222,148,37)"/><text x="43.8183%" y="159.50"></text></g><g><title>adt_dtorck_constraint (286,605 samples, 0.14%)</title><rect x="44.3518%" y="133" width="0.1433%" height="15" fill="rgb(234,67,33)"/><text x="44.6018%" y="143.50"></text></g><g><title>dropck_outlives (861,581 samples, 0.43%)</title><rect x="44.0997%" y="149" width="0.4309%" height="15" fill="rgb(247,98,35)"/><text x="44.3497%" y="159.50"></text></g><g><title>mir_borrowck (384,844 samples, 0.19%)</title><rect x="44.7854%" y="85" width="0.1925%" height="15" fill="rgb(247,138,52)"/><text x="45.0354%" y="95.50"></text></g><g><title>mir_for_ctfe (539,725 samples, 0.27%)</title><rect x="44.7110%" y="117" width="0.2699%" height="15" fill="rgb(213,79,30)"/><text x="44.9610%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (488,705 samples, 0.24%)</title><rect x="44.7365%" y="101" width="0.2444%" height="15" fill="rgb(246,177,23)"/><text x="44.9865%" y="111.50"></text></g><g><title>mir_for_ctfe (224,283 samples, 0.11%)</title><rect x="45.1135%" y="53" width="0.1122%" height="15" fill="rgb(230,62,27)"/><text x="45.3635%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (201,112 samples, 0.10%)</title><rect x="45.1251%" y="37" width="0.1006%" height="15" fill="rgb(216,154,8)"/><text x="45.3751%" y="47.50"></text></g><g><title>eval_to_const_value_raw (477,665 samples, 0.24%)</title><rect x="44.9875%" y="101" width="0.2389%" height="15" fill="rgb(244,35,45)"/><text x="45.2375%" y="111.50"></text></g><g><title>eval_to_const_value_raw (475,485 samples, 0.24%)</title><rect x="44.9886%" y="85" width="0.2378%" height="15" fill="rgb(251,115,12)"/><text x="45.2386%" y="95.50"></text></g><g><title>eval_to_allocation_raw (469,145 samples, 0.23%)</title><rect x="44.9918%" y="69" width="0.2346%" height="15" fill="rgb(240,54,50)"/><text x="45.2418%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,377,735 samples, 0.69%)</title><rect x="44.5386%" y="133" width="0.6890%" height="15" fill="rgb(233,84,52)"/><text x="44.7886%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (492,546 samples, 0.25%)</title><rect x="44.9813%" y="117" width="0.2463%" height="15" fill="rgb(207,117,47)"/><text x="45.2313%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,426,365 samples, 0.71%)</title><rect x="44.5306%" y="149" width="0.7134%" height="15" fill="rgb(249,43,39)"/><text x="44.7806%" y="159.50"></text></g><g><title>trait_impls_of (550,945 samples, 0.28%)</title><rect x="46.4476%" y="133" width="0.2755%" height="15" fill="rgb(209,38,44)"/><text x="46.6976%" y="143.50"></text></g><g><title>implementations_of_trait (232,791 samples, 0.12%)</title><rect x="46.6067%" y="117" width="0.1164%" height="15" fill="rgb(236,212,23)"/><text x="46.8567%" y="127.50"></text></g><g><title>evaluate_obligation (2,959,712 samples, 1.48%)</title><rect x="45.2440%" y="149" width="1.4802%" height="15" fill="rgb(242,79,21)"/><text x="45.4940%" y="159.50"></text></g><g><title>evaluate_obligation (728,056 samples, 0.36%)</title><rect x="47.7128%" y="133" width="0.3641%" height="15" fill="rgb(211,96,35)"/><text x="47.9628%" y="143.50"></text></g><g><title>method_autoderef_steps (2,088,361 samples, 1.04%)</title><rect x="47.0411%" y="149" width="1.0444%" height="15" fill="rgb(253,215,40)"/><text x="47.2911%" y="159.50"></text></g><g><title>predicates_of (351,639 samples, 0.18%)</title><rect x="48.1973%" y="149" width="0.1759%" height="15" fill="rgb(211,81,21)"/><text x="48.4473%" y="159.50"></text></g><g><title>predicates_defined_on (237,518 samples, 0.12%)</title><rect x="48.2544%" y="133" width="0.1188%" height="15" fill="rgb(208,190,38)"/><text x="48.5044%" y="143.50"></text></g><g><title>trait_impls_of (380,886 samples, 0.19%)</title><rect x="49.7602%" y="117" width="0.1905%" height="15" fill="rgb(235,213,38)"/><text x="50.0102%" y="127.50"></text></g><g><title>evaluate_obligation (1,082,090 samples, 0.54%)</title><rect x="49.4112%" y="133" width="0.5412%" height="15" fill="rgb(237,122,38)"/><text x="49.6612%" y="143.50"></text></g><g><title>typeck (3,329,348 samples, 1.67%)</title><rect x="48.4772%" y="149" width="1.6651%" height="15" fill="rgb(244,218,35)"/><text x="48.7272%" y="159.50"></text></g><g><title>item_bodies_checking (42,635,281 samples, 21.32%)</title><rect x="28.8514%" y="197" width="21.3227%" height="15" fill="rgb(240,68,47)"/><text x="29.1014%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (42,632,701 samples, 21.32%)</title><rect x="28.8527%" y="181" width="21.3215%" height="15" fill="rgb(210,16,53)"/><text x="29.1027%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (42,476,378 samples, 21.24%)</title><rect x="28.9308%" y="165" width="21.2433%" height="15" fill="rgb(235,124,12)"/><text x="29.1808%" y="175.50">typeck</text></g><g><title>adt_destructor (392,114 samples, 0.20%)</title><rect x="51.8216%" y="165" width="0.1961%" height="15" fill="rgb(224,169,11)"/><text x="52.0716%" y="175.50"></text></g><g><title>coherent_trait (379,624 samples, 0.19%)</title><rect x="51.8278%" y="149" width="0.1899%" height="15" fill="rgb(250,166,2)"/><text x="52.0778%" y="159.50"></text></g><g><title>specialization_graph_of (377,224 samples, 0.19%)</title><rect x="51.8290%" y="133" width="0.1887%" height="15" fill="rgb(242,216,29)"/><text x="52.0790%" y="143.50"></text></g><g><title>impl_trait_ref (288,452 samples, 0.14%)</title><rect x="52.7316%" y="133" width="0.1443%" height="15" fill="rgb(230,116,27)"/><text x="52.9816%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (245,482 samples, 0.12%)</title><rect x="52.7531%" y="117" width="0.1228%" height="15" fill="rgb(228,99,48)"/><text x="53.0031%" y="127.50"></text></g><g><title>specializes (273,053 samples, 0.14%)</title><rect x="52.9085%" y="133" width="0.1366%" height="15" fill="rgb(253,11,6)"/><text x="53.1585%" y="143.50"></text></g><g><title>param_env (201,763 samples, 0.10%)</title><rect x="52.9441%" y="117" width="0.1009%" height="15" fill="rgb(247,143,39)"/><text x="53.1941%" y="127.50"></text></g><g><title>evaluate_obligation (1,389,296 samples, 0.69%)</title><rect x="52.3728%" y="149" width="0.6948%" height="15" fill="rgb(236,97,10)"/><text x="52.6228%" y="159.50"></text></g><g><title>item_types_checking (5,927,435 samples, 2.96%)</title><rect x="50.1741%" y="197" width="2.9644%" height="15" fill="rgb(233,208,19)"/><text x="50.4241%" y="207.50">ite..</text></g><g><title>check_mod_item_types (5,915,995 samples, 2.96%)</title><rect x="50.1798%" y="181" width="2.9587%" height="15" fill="rgb(216,164,2)"/><text x="50.4298%" y="191.50">che..</text></g><g><title>typeck (2,035,783 samples, 1.02%)</title><rect x="52.1204%" y="165" width="1.0181%" height="15" fill="rgb(220,129,5)"/><text x="52.3704%" y="175.50"></text></g><g><title>fn_sig (648,551 samples, 0.32%)</title><rect x="53.4198%" y="165" width="0.3244%" height="15" fill="rgb(242,17,10)"/><text x="53.6698%" y="175.50"></text></g><g><title>generics_of (587,332 samples, 0.29%)</title><rect x="53.7442%" y="165" width="0.2937%" height="15" fill="rgb(242,107,0)"/><text x="53.9942%" y="175.50"></text></g><g><title>late_bound_vars_map (844,200 samples, 0.42%)</title><rect x="54.5501%" y="117" width="0.4222%" height="15" fill="rgb(251,28,31)"/><text x="54.8001%" y="127.50"></text></g><g><title>resolve_lifetimes (817,310 samples, 0.41%)</title><rect x="54.5636%" y="101" width="0.4088%" height="15" fill="rgb(233,223,10)"/><text x="54.8136%" y="111.50"></text></g><g><title>lint_levels (472,355 samples, 0.24%)</title><rect x="54.7361%" y="85" width="0.2362%" height="15" fill="rgb(215,21,27)"/><text x="54.9861%" y="95.50"></text></g><g><title>explicit_predicates_of (1,324,734 samples, 0.66%)</title><rect x="54.3361%" y="133" width="0.6625%" height="15" fill="rgb(232,23,21)"/><text x="54.5861%" y="143.50"></text></g><g><title>predicates_of (2,139,772 samples, 1.07%)</title><rect x="54.1828%" y="165" width="1.0701%" height="15" fill="rgb(244,5,23)"/><text x="54.4328%" y="175.50"></text></g><g><title>predicates_defined_on (2,024,742 samples, 1.01%)</title><rect x="54.2403%" y="149" width="1.0126%" height="15" fill="rgb(226,81,46)"/><text x="54.4903%" y="159.50"></text></g><g><title>inferred_outlives_of (508,576 samples, 0.25%)</title><rect x="54.9986%" y="133" width="0.2543%" height="15" fill="rgb(247,70,30)"/><text x="55.2486%" y="143.50"></text></g><g><title>inferred_outlives_crate (462,835 samples, 0.23%)</title><rect x="55.0215%" y="117" width="0.2315%" height="15" fill="rgb(212,68,19)"/><text x="55.2715%" y="127.50"></text></g><g><title>type_of (236,080 samples, 0.12%)</title><rect x="55.1349%" y="101" width="0.1181%" height="15" fill="rgb(240,187,13)"/><text x="55.3849%" y="111.50"></text></g><g><title>type_collecting (4,597,711 samples, 2.30%)</title><rect x="53.1423%" y="197" width="2.2994%" height="15" fill="rgb(223,113,26)"/><text x="53.3923%" y="207.50">t..</text></g><g><title>collect_mod_item_types (4,577,991 samples, 2.29%)</title><rect x="53.1522%" y="181" width="2.2895%" height="15" fill="rgb(206,192,2)"/><text x="53.4022%" y="191.50">c..</text></g><g><title>type_of (339,603 samples, 0.17%)</title><rect x="55.2719%" y="165" width="0.1698%" height="15" fill="rgb(241,108,4)"/><text x="55.5219%" y="175.50"></text></g><g><title>adt_sized_constraint (289,104 samples, 0.14%)</title><rect x="59.4483%" y="149" width="0.1446%" height="15" fill="rgb(247,173,49)"/><text x="59.6983%" y="159.50"></text></g><g><title>evaluate_obligation (1,856,073 samples, 0.93%)</title><rect x="58.7020%" y="165" width="0.9283%" height="15" fill="rgb(224,114,35)"/><text x="58.9520%" y="175.50"></text></g><g><title>implied_outlives_bounds (802,543 samples, 0.40%)</title><rect x="59.6573%" y="165" width="0.4014%" height="15" fill="rgb(245,159,27)"/><text x="59.9073%" y="175.50"></text></g><g><title>param_env (699,656 samples, 0.35%)</title><rect x="60.0619%" y="165" width="0.3499%" height="15" fill="rgb(245,172,44)"/><text x="60.3119%" y="175.50"></text></g><g><title>region_scope_tree (492,605 samples, 0.25%)</title><rect x="60.4471%" y="165" width="0.2464%" height="15" fill="rgb(236,23,11)"/><text x="60.6971%" y="175.50"></text></g><g><title>check_impl_item_well_formed (10,081,203 samples, 5.04%)</title><rect x="55.6637%" y="181" width="5.0418%" height="15" fill="rgb(205,117,38)"/><text x="55.9137%" y="191.50">check_..</text></g><g><title>param_env (702,239 samples, 0.35%)</title><rect x="62.6961%" y="165" width="0.3512%" height="15" fill="rgb(237,72,25)"/><text x="62.9461%" y="175.50"></text></g><g><title>check_item_well_formed (5,014,796 samples, 2.51%)</title><rect x="60.7055%" y="181" width="2.5080%" height="15" fill="rgb(244,70,9)"/><text x="60.9555%" y="191.50">ch..</text></g><g><title>analysis (126,098,084 samples, 63.06%)</title><rect x="0.3976%" y="229" width="63.0641%" height="15" fill="rgb(217,125,39)"/><text x="0.6476%" y="239.50">analysis</text></g><g><title>type_check_crate (77,135,262 samples, 38.58%)</title><rect x="24.8848%" y="213" width="38.5769%" height="15" fill="rgb(235,36,10)"/><text x="25.1348%" y="223.50">type_check_crate</text></g><g><title>wf_checking (16,027,078 samples, 8.02%)</title><rect x="55.4462%" y="197" width="8.0155%" height="15" fill="rgb(251,123,47)"/><text x="55.6962%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (496,294 samples, 0.25%)</title><rect x="63.2135%" y="181" width="0.2482%" height="15" fill="rgb(221,13,13)"/><text x="63.4635%" y="191.50"></text></g><g><title>codegen_crate (435,645 samples, 0.22%)</title><rect x="63.4661%" y="229" width="0.2179%" height="15" fill="rgb(238,131,9)"/><text x="63.7161%" y="239.50"></text></g><g><title>AST_validation (366,864 samples, 0.18%)</title><rect x="63.7809%" y="213" width="0.1835%" height="15" fill="rgb(211,50,8)"/><text x="64.0309%" y="223.50"></text></g><g><title>metadata_load_macro (798,518 samples, 0.40%)</title><rect x="85.0661%" y="181" width="0.3994%" height="15" fill="rgb(245,182,24)"/><text x="85.3161%" y="191.50"></text></g><g><title>metadata_register_crate (10,772,239 samples, 5.39%)</title><rect x="85.4654%" y="181" width="5.3874%" height="15" fill="rgb(242,14,37)"/><text x="85.7154%" y="191.50">metadat..</text></g><g><title>metadata_register_crate (7,876,626 samples, 3.94%)</title><rect x="86.9136%" y="165" width="3.9393%" height="15" fill="rgb(246,228,12)"/><text x="87.1636%" y="175.50">meta..</text></g><g><title>macro_expand_crate (54,056,208 samples, 27.03%)</title><rect x="64.0751%" y="213" width="27.0346%" height="15" fill="rgb(213,55,15)"/><text x="64.3251%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (54,044,248 samples, 27.03%)</title><rect x="64.0811%" y="197" width="27.0286%" height="15" fill="rgb(209,9,3)"/><text x="64.3311%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (513,586 samples, 0.26%)</title><rect x="90.8528%" y="181" width="0.2569%" height="15" fill="rgb(230,59,30)"/><text x="91.1028%" y="191.50"></text></g><g><title>late_resolve_crate (2,257,975 samples, 1.13%)</title><rect x="91.3152%" y="197" width="1.1293%" height="15" fill="rgb(209,121,21)"/><text x="91.5652%" y="207.50"></text></g><g><title>configure_and_expand (57,676,047 samples, 28.84%)</title><rect x="63.6840%" y="229" width="28.8449%" height="15" fill="rgb(220,109,13)"/><text x="63.9340%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,753,410 samples, 1.38%)</title><rect x="91.1518%" y="213" width="1.3770%" height="15" fill="rgb(232,18,1)"/><text x="91.4018%" y="223.50"></text></g><g><title>drop_ast (335,463 samples, 0.17%)</title><rect x="92.5289%" y="229" width="0.1678%" height="15" fill="rgb(215,41,42)"/><text x="92.7789%" y="239.50"></text></g><g><title>early_lint_checks (956,471 samples, 0.48%)</title><rect x="92.7053%" y="229" width="0.4783%" height="15" fill="rgb(224,123,36)"/><text x="92.9553%" y="239.50"></text></g><g><title>free_global_ctxt (3,903,453 samples, 1.95%)</title><rect x="93.1837%" y="229" width="1.9522%" height="15" fill="rgb(240,125,3)"/><text x="93.4337%" y="239.50">f..</text></g><g><title>generate_crate_metadata (2,679,220 samples, 1.34%)</title><rect x="95.1358%" y="229" width="1.3399%" height="15" fill="rgb(205,98,50)"/><text x="95.3858%" y="239.50"></text></g><g><title>hir_lowering (4,965,125 samples, 2.48%)</title><rect x="96.4758%" y="229" width="2.4832%" height="15" fill="rgb(205,185,37)"/><text x="96.7258%" y="239.50">hi..</text></g><g><title>parse_crate (366,674 samples, 0.18%)</title><rect x="98.9910%" y="229" width="0.1834%" height="15" fill="rgb(238,207,15)"/><text x="99.2410%" y="239.50"></text></g><g><title>prepare_outputs (221,593 samples, 0.11%)</title><rect x="99.1788%" y="229" width="0.1108%" height="15" fill="rgb(213,199,42)"/><text x="99.4288%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (907,410 samples, 0.45%)</title><rect x="99.2896%" y="229" width="0.4538%" height="15" fill="rgb(235,201,11)"/><text x="99.5396%" y="239.50"></text></g><g><title>all (199,952,151 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (199,952,151 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (440,075 samples, 0.22%)</title><rect x="99.7799%" y="229" width="0.2201%" height="15" fill="rgb(243,32,47)"/><text x="100.0299%" y="239.50"></text></g></svg></svg>