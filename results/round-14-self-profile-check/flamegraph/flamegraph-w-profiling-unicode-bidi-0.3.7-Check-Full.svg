<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (518,416 samples, 0.20%)</title><rect x="12.3298%" y="133" width="0.2042%" height="15" fill="rgb(227,0,7)"/><text x="12.5798%" y="143.50"></text></g><g><title>item_attrs (529,224 samples, 0.21%)</title><rect x="12.9268%" y="101" width="0.2084%" height="15" fill="rgb(217,0,24)"/><text x="13.1768%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (514,514 samples, 0.20%)</title><rect x="12.9326%" y="85" width="0.2027%" height="15" fill="rgb(221,193,54)"/><text x="13.1826%" y="95.50"></text></g><g><title>codegen_fn_attrs (700,848 samples, 0.28%)</title><rect x="12.8699%" y="117" width="0.2760%" height="15" fill="rgb(248,212,6)"/><text x="13.1199%" y="127.50"></text></g><g><title>adt_drop_tys (462,285 samples, 0.18%)</title><rect x="15.5975%" y="85" width="0.1821%" height="15" fill="rgb(208,68,35)"/><text x="15.8475%" y="95.50"></text></g><g><title>is_copy_raw (875,177 samples, 0.34%)</title><rect x="15.7796%" y="85" width="0.3447%" height="15" fill="rgb(232,128,0)"/><text x="16.0296%" y="95.50"></text></g><g><title>evaluate_obligation (723,017 samples, 0.28%)</title><rect x="15.8395%" y="69" width="0.2848%" height="15" fill="rgb(207,160,47)"/><text x="16.0895%" y="79.50"></text></g><g><title>needs_drop_raw (1,515,015 samples, 0.60%)</title><rect x="15.5291%" y="101" width="0.5967%" height="15" fill="rgb(228,23,34)"/><text x="15.7791%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (833,138 samples, 0.33%)</title><rect x="16.2758%" y="85" width="0.3282%" height="15" fill="rgb(218,30,26)"/><text x="16.5258%" y="95.50"></text></g><g><title>specialization_graph_of (1,250,923 samples, 0.49%)</title><rect x="16.6439%" y="85" width="0.4927%" height="15" fill="rgb(220,122,19)"/><text x="16.8939%" y="95.50"></text></g><g><title>impl_trait_ref (470,436 samples, 0.19%)</title><rect x="16.9514%" y="69" width="0.1853%" height="15" fill="rgb(250,228,42)"/><text x="17.2014%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (405,136 samples, 0.16%)</title><rect x="16.9771%" y="53" width="0.1596%" height="15" fill="rgb(240,193,28)"/><text x="17.2271%" y="63.50"></text></g><g><title>resolve_instance (2,674,388 samples, 1.05%)</title><rect x="16.1376%" y="101" width="1.0534%" height="15" fill="rgb(216,20,37)"/><text x="16.3876%" y="111.50"></text></g><g><title>thir_body (2,100,627 samples, 0.83%)</title><rect x="17.2095%" y="101" width="0.8274%" height="15" fill="rgb(206,188,39)"/><text x="17.4595%" y="111.50"></text></g><g><title>mir_const (16,023,052 samples, 6.31%)</title><rect x="11.7391%" y="149" width="6.3111%" height="15" fill="rgb(217,207,13)"/><text x="11.9891%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (14,004,852 samples, 5.52%)</title><rect x="12.5340%" y="133" width="5.5162%" height="15" fill="rgb(231,73,38)"/><text x="12.7840%" y="143.50">unsafet..</text></g><g><title>mir_built (12,451,352 samples, 4.90%)</title><rect x="13.1459%" y="117" width="4.9043%" height="15" fill="rgb(225,20,46)"/><text x="13.3959%" y="127.50">mir_bu..</text></g><g><title>thir_body (2,980,742 samples, 1.17%)</title><rect x="19.4610%" y="85" width="1.1740%" height="15" fill="rgb(210,31,41)"/><text x="19.7110%" y="95.50"></text></g><g><title>lit_to_const (405,114 samples, 0.16%)</title><rect x="20.4755%" y="69" width="0.1596%" height="15" fill="rgb(221,200,47)"/><text x="20.7255%" y="79.50"></text></g><g><title>mir_promoted (25,449,279 samples, 10.02%)</title><rect x="10.6127%" y="165" width="10.0239%" height="15" fill="rgb(226,26,5)"/><text x="10.8627%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (6,566,484 samples, 2.59%)</title><rect x="18.0502%" y="149" width="2.5864%" height="15" fill="rgb(249,33,26)"/><text x="18.3002%" y="159.50">mi..</text></g><g><title>mir_const (6,184,718 samples, 2.44%)</title><rect x="18.2006%" y="133" width="2.4360%" height="15" fill="rgb(235,183,28)"/><text x="18.4506%" y="143.50">mi..</text></g><g><title>unsafety_check_result (5,907,675 samples, 2.33%)</title><rect x="18.3097%" y="117" width="2.3269%" height="15" fill="rgb(221,5,38)"/><text x="18.5597%" y="127.50">u..</text></g><g><title>mir_built (5,700,413 samples, 2.25%)</title><rect x="18.3913%" y="101" width="2.2453%" height="15" fill="rgb(247,18,42)"/><text x="18.6413%" y="111.50">m..</text></g><g><title>type_op_ascribe_user_type (414,174 samples, 0.16%)</title><rect x="20.6394%" y="165" width="0.1631%" height="15" fill="rgb(241,131,45)"/><text x="20.8894%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,201,665 samples, 0.47%)</title><rect x="20.8025%" y="165" width="0.4733%" height="15" fill="rgb(249,31,29)"/><text x="21.0525%" y="175.50"></text></g><g><title>normalize_projection_ty (826,625 samples, 0.33%)</title><rect x="20.9502%" y="149" width="0.3256%" height="15" fill="rgb(225,111,53)"/><text x="21.2002%" y="159.50"></text></g><g><title>type_op_normalize_predicate (819,308 samples, 0.32%)</title><rect x="21.2758%" y="165" width="0.3227%" height="15" fill="rgb(238,160,17)"/><text x="21.5258%" y="175.50"></text></g><g><title>normalize_projection_ty (501,514 samples, 0.20%)</title><rect x="21.4010%" y="149" width="0.1975%" height="15" fill="rgb(214,148,48)"/><text x="21.6510%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,311,067 samples, 1.70%)</title><rect x="21.5985%" y="165" width="1.6980%" height="15" fill="rgb(232,36,49)"/><text x="21.8485%" y="175.50"></text></g><g><title>evaluate_obligation (444,622 samples, 0.18%)</title><rect x="23.1214%" y="149" width="0.1751%" height="15" fill="rgb(209,103,24)"/><text x="23.3714%" y="159.50"></text></g><g><title>MIR_borrow_checking (57,603,010 samples, 22.69%)</title><rect x="0.6111%" y="197" width="22.6885%" height="15" fill="rgb(229,88,8)"/><text x="0.8611%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (57,407,556 samples, 22.61%)</title><rect x="0.6881%" y="181" width="22.6115%" height="15" fill="rgb(213,181,19)"/><text x="0.9381%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (532,046 samples, 0.21%)</title><rect x="23.2997%" y="197" width="0.2096%" height="15" fill="rgb(254,191,54)"/><text x="23.5497%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (445,185 samples, 0.18%)</title><rect x="23.3339%" y="181" width="0.1753%" height="15" fill="rgb(241,83,37)"/><text x="23.5839%" y="191.50"></text></g><g><title>hir_module_items (307,043 samples, 0.12%)</title><rect x="23.5092%" y="197" width="0.1209%" height="15" fill="rgb(233,36,39)"/><text x="23.7592%" y="207.50"></text></g><g><title>codegen_fn_attrs (404,255 samples, 0.16%)</title><rect x="23.8885%" y="165" width="0.1592%" height="15" fill="rgb(226,3,54)"/><text x="24.1385%" y="175.50"></text></g><g><title>check_mod_attrs (1,032,764 samples, 0.41%)</title><rect x="23.6410%" y="181" width="0.4068%" height="15" fill="rgb(245,192,40)"/><text x="23.8910%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (578,405 samples, 0.23%)</title><rect x="24.1948%" y="181" width="0.2278%" height="15" fill="rgb(238,167,29)"/><text x="24.4448%" y="191.50"></text></g><g><title>misc_checking_1 (2,090,893 samples, 0.82%)</title><rect x="23.6303%" y="197" width="0.8236%" height="15" fill="rgb(232,182,51)"/><text x="23.8803%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,073,052 samples, 0.42%)</title><rect x="24.4545%" y="181" width="0.4227%" height="15" fill="rgb(231,60,39)"/><text x="24.7045%" y="191.50"></text></g><g><title>check_mod_liveness (825,461 samples, 0.33%)</title><rect x="24.5521%" y="165" width="0.3251%" height="15" fill="rgb(208,69,12)"/><text x="24.8021%" y="175.50"></text></g><g><title>misc_checking_2 (2,649,179 samples, 1.04%)</title><rect x="24.4539%" y="197" width="1.0435%" height="15" fill="rgb(235,93,37)"/><text x="24.7039%" y="207.50"></text></g><g><title>match_checking (1,574,497 samples, 0.62%)</title><rect x="24.8772%" y="181" width="0.6202%" height="15" fill="rgb(213,116,39)"/><text x="25.1272%" y="191.50"></text></g><g><title>check_match (1,524,307 samples, 0.60%)</title><rect x="24.8970%" y="165" width="0.6004%" height="15" fill="rgb(222,207,29)"/><text x="25.1470%" y="175.50"></text></g><g><title>check_private_in_public (317,113 samples, 0.12%)</title><rect x="25.5016%" y="181" width="0.1249%" height="15" fill="rgb(206,96,30)"/><text x="25.7516%" y="191.50"></text></g><g><title>death_checking (916,980 samples, 0.36%)</title><rect x="25.6265%" y="181" width="0.3612%" height="15" fill="rgb(218,138,4)"/><text x="25.8765%" y="191.50"></text></g><g><title>eval_to_const_value_raw (10,016,121 samples, 3.95%)</title><rect x="27.8175%" y="85" width="3.9451%" height="15" fill="rgb(250,191,14)"/><text x="28.0675%" y="95.50">eval..</text></g><g><title>eval_to_const_value_raw (10,014,491 samples, 3.94%)</title><rect x="27.8181%" y="69" width="3.9445%" height="15" fill="rgb(239,60,40)"/><text x="28.0681%" y="79.50">eval..</text></g><g><title>eval_to_allocation_raw (10,012,311 samples, 3.94%)</title><rect x="27.8190%" y="53" width="3.9436%" height="15" fill="rgb(206,27,48)"/><text x="28.0690%" y="63.50">eval..</text></g><g><title>promoted_mir (2,107,434 samples, 0.83%)</title><rect x="30.9325%" y="37" width="0.8301%" height="15" fill="rgb(225,35,8)"/><text x="31.1825%" y="47.50"></text></g><g><title>eval_to_const_value_raw (13,222,967 samples, 5.21%)</title><rect x="26.5568%" y="149" width="5.2082%" height="15" fill="rgb(250,213,24)"/><text x="26.8068%" y="159.50">eval_t..</text></g><g><title>eval_to_const_value_raw (13,209,577 samples, 5.20%)</title><rect x="26.5620%" y="133" width="5.2030%" height="15" fill="rgb(247,123,22)"/><text x="26.8120%" y="143.50">eval_t..</text></g><g><title>eval_to_allocation_raw (13,187,216 samples, 5.19%)</title><rect x="26.5709%" y="117" width="5.1941%" height="15" fill="rgb(231,138,38)"/><text x="26.8209%" y="127.50">eval_t..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (10,037,251 samples, 3.95%)</title><rect x="27.8116%" y="101" width="3.9534%" height="15" fill="rgb(231,145,46)"/><text x="28.0616%" y="111.50">try_..</text></g><g><title>param_env (447,016 samples, 0.18%)</title><rect x="31.7650%" y="149" width="0.1761%" height="15" fill="rgb(251,118,11)"/><text x="32.0150%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (283,623 samples, 0.11%)</title><rect x="31.9535%" y="133" width="0.1117%" height="15" fill="rgb(217,147,25)"/><text x="32.2035%" y="143.50"></text></g><g><title>resolve_instance (337,793 samples, 0.13%)</title><rect x="31.9411%" y="149" width="0.1330%" height="15" fill="rgb(247,81,37)"/><text x="32.1911%" y="159.50"></text></g><g><title>crate_lints (16,622,274 samples, 6.55%)</title><rect x="25.9888%" y="165" width="6.5471%" height="15" fill="rgb(209,12,38)"/><text x="26.2388%" y="175.50">crate_lin..</text></g><g><title>type_of (1,150,121 samples, 0.45%)</title><rect x="32.0830%" y="149" width="0.4530%" height="15" fill="rgb(227,1,9)"/><text x="32.3330%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (920,114 samples, 0.36%)</title><rect x="32.1736%" y="133" width="0.3624%" height="15" fill="rgb(248,47,43)"/><text x="32.4236%" y="143.50"></text></g><g><title>lint_checking (18,257,562 samples, 7.19%)</title><rect x="25.9877%" y="181" width="7.1912%" height="15" fill="rgb(221,10,30)"/><text x="26.2377%" y="191.50">lint_check..</text></g><g><title>module_lints (1,632,308 samples, 0.64%)</title><rect x="32.5360%" y="165" width="0.6429%" height="15" fill="rgb(210,229,1)"/><text x="32.7860%" y="175.50"></text></g><g><title>lint_mod (1,622,328 samples, 0.64%)</title><rect x="32.5399%" y="149" width="0.6390%" height="15" fill="rgb(222,148,37)"/><text x="32.7899%" y="159.50"></text></g><g><title>privacy_access_levels (437,805 samples, 0.17%)</title><rect x="33.1789%" y="181" width="0.1724%" height="15" fill="rgb(234,67,33)"/><text x="33.4289%" y="191.50"></text></g><g><title>privacy_checking_modules (2,031,532 samples, 0.80%)</title><rect x="33.3513%" y="181" width="0.8002%" height="15" fill="rgb(247,98,35)"/><text x="33.6013%" y="191.50"></text></g><g><title>check_mod_privacy (2,025,061 samples, 0.80%)</title><rect x="33.3539%" y="165" width="0.7976%" height="15" fill="rgb(247,138,52)"/><text x="33.6039%" y="175.50"></text></g><g><title>misc_checking_3 (21,986,953 samples, 8.66%)</title><rect x="25.4973%" y="197" width="8.6602%" height="15" fill="rgb(213,79,30)"/><text x="25.7473%" y="207.50">misc_checkin..</text></g><g><title>adt_destructor (305,603 samples, 0.12%)</title><rect x="34.2295%" y="149" width="0.1204%" height="15" fill="rgb(246,177,23)"/><text x="34.4795%" y="159.50"></text></g><g><title>coherent_trait (293,743 samples, 0.12%)</title><rect x="34.2341%" y="133" width="0.1157%" height="15" fill="rgb(230,62,27)"/><text x="34.4841%" y="143.50"></text></g><g><title>specialization_graph_of (292,643 samples, 0.12%)</title><rect x="34.2346%" y="117" width="0.1153%" height="15" fill="rgb(216,154,8)"/><text x="34.4846%" y="127.50"></text></g><g><title>impl_parent (2,546,005 samples, 1.00%)</title><rect x="36.0460%" y="133" width="1.0028%" height="15" fill="rgb(244,35,45)"/><text x="36.2960%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,510,522 samples, 0.59%)</title><rect x="36.4539%" y="117" width="0.5950%" height="15" fill="rgb(251,115,12)"/><text x="36.7039%" y="127.50"></text></g><g><title>impl_trait_ref (5,901,669 samples, 2.32%)</title><rect x="37.0488%" y="133" width="2.3245%" height="15" fill="rgb(240,54,50)"/><text x="37.2988%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,402,421 samples, 1.73%)</title><rect x="37.6394%" y="117" width="1.7340%" height="15" fill="rgb(233,84,52)"/><text x="37.8894%" y="127.50"></text></g><g><title>trait_impls_of (801,769 samples, 0.32%)</title><rect x="39.3988%" y="133" width="0.3158%" height="15" fill="rgb(207,117,47)"/><text x="39.6488%" y="143.50"></text></g><g><title>coherent_trait (13,970,586 samples, 5.50%)</title><rect x="34.2123%" y="165" width="5.5027%" height="15" fill="rgb(249,43,39)"/><text x="34.4623%" y="175.50">coheren..</text></g><g><title>specialization_graph_of (13,516,612 samples, 5.32%)</title><rect x="34.3912%" y="149" width="5.3239%" height="15" fill="rgb(209,38,44)"/><text x="34.6412%" y="159.50">special..</text></g><g><title>coherence_checking (14,069,506 samples, 5.54%)</title><rect x="34.2019%" y="181" width="5.5417%" height="15" fill="rgb(236,212,23)"/><text x="34.4519%" y="191.50">coheren..</text></g><g><title>associated_item (605,066 samples, 0.24%)</title><rect x="53.3155%" y="117" width="0.2383%" height="15" fill="rgb(242,79,21)"/><text x="53.5655%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (481,636 samples, 0.19%)</title><rect x="53.3641%" y="101" width="0.1897%" height="15" fill="rgb(211,96,35)"/><text x="53.6141%" y="111.50"></text></g><g><title>associated_items (834,418 samples, 0.33%)</title><rect x="53.2426%" y="133" width="0.3287%" height="15" fill="rgb(253,215,40)"/><text x="53.4926%" y="143.50"></text></g><g><title>dropck_outlives (440,315 samples, 0.17%)</title><rect x="53.5986%" y="133" width="0.1734%" height="15" fill="rgb(211,81,21)"/><text x="53.8486%" y="143.50"></text></g><g><title>adt_dtorck_constraint (262,464 samples, 0.10%)</title><rect x="53.6686%" y="117" width="0.1034%" height="15" fill="rgb(208,190,38)"/><text x="53.9186%" y="127.50"></text></g><g><title>generics_of (682,849 samples, 0.27%)</title><rect x="54.9050%" y="117" width="0.2690%" height="15" fill="rgb(235,213,38)"/><text x="55.1550%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (583,956 samples, 0.23%)</title><rect x="54.9439%" y="101" width="0.2300%" height="15" fill="rgb(237,122,38)"/><text x="55.1939%" y="111.50"></text></g><g><title>predicates_of (373,172 samples, 0.15%)</title><rect x="55.2841%" y="117" width="0.1470%" height="15" fill="rgb(244,218,35)"/><text x="55.5341%" y="127.50"></text></g><g><title>specializes (428,776 samples, 0.17%)</title><rect x="55.4311%" y="117" width="0.1689%" height="15" fill="rgb(240,68,47)"/><text x="55.6811%" y="127.50"></text></g><g><title>param_env (277,235 samples, 0.11%)</title><rect x="55.4908%" y="101" width="0.1092%" height="15" fill="rgb(210,16,53)"/><text x="55.7408%" y="111.50"></text></g><g><title>trait_impls_of (393,646 samples, 0.16%)</title><rect x="55.6048%" y="117" width="0.1550%" height="15" fill="rgb(235,124,12)"/><text x="55.8548%" y="127.50"></text></g><g><title>evaluate_obligation (5,055,869 samples, 1.99%)</title><rect x="53.7720%" y="133" width="1.9914%" height="15" fill="rgb(224,169,11)"/><text x="54.0220%" y="143.50">e..</text></g><g><title>generics_of (722,872 samples, 0.28%)</title><rect x="55.8381%" y="133" width="0.2847%" height="15" fill="rgb(250,166,2)"/><text x="56.0881%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (565,699 samples, 0.22%)</title><rect x="55.9000%" y="117" width="0.2228%" height="15" fill="rgb(242,216,29)"/><text x="56.1500%" y="127.50"></text></g><g><title>impl_trait_ref (400,815 samples, 0.16%)</title><rect x="56.2167%" y="133" width="0.1579%" height="15" fill="rgb(230,116,27)"/><text x="56.4667%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (385,835 samples, 0.15%)</title><rect x="56.2226%" y="117" width="0.1520%" height="15" fill="rgb(228,99,48)"/><text x="56.4726%" y="127.50"></text></g><g><title>evaluate_obligation (262,173 samples, 0.10%)</title><rect x="56.5706%" y="117" width="0.1033%" height="15" fill="rgb(253,11,6)"/><text x="56.8206%" y="127.50"></text></g><g><title>method_autoderef_steps (510,874 samples, 0.20%)</title><rect x="56.4803%" y="133" width="0.2012%" height="15" fill="rgb(247,143,39)"/><text x="56.7303%" y="143.50"></text></g><g><title>predicates_of (412,406 samples, 0.16%)</title><rect x="56.7618%" y="133" width="0.1624%" height="15" fill="rgb(236,97,10)"/><text x="57.0118%" y="143.50"></text></g><g><title>predicates_defined_on (282,375 samples, 0.11%)</title><rect x="56.8130%" y="117" width="0.1112%" height="15" fill="rgb(233,208,19)"/><text x="57.0630%" y="127.50"></text></g><g><title>dropck_outlives (263,151 samples, 0.10%)</title><rect x="61.7513%" y="117" width="0.1036%" height="15" fill="rgb(216,164,2)"/><text x="62.0013%" y="127.50"></text></g><g><title>evaluate_obligation (1,863,296 samples, 0.73%)</title><rect x="61.8550%" y="117" width="0.7339%" height="15" fill="rgb(220,129,5)"/><text x="62.1050%" y="127.50"></text></g><g><title>method_autoderef_steps (407,474 samples, 0.16%)</title><rect x="62.8808%" y="117" width="0.1605%" height="15" fill="rgb(242,17,10)"/><text x="63.1308%" y="127.50"></text></g><g><title>typeck (15,726,956 samples, 6.19%)</title><rect x="56.9935%" y="133" width="6.1945%" height="15" fill="rgb(242,107,0)"/><text x="57.2435%" y="143.50">typeck</text></g><g><title>item_bodies_checking (59,539,981 samples, 23.45%)</title><rect x="39.7597%" y="181" width="23.4515%" height="15" fill="rgb(251,28,31)"/><text x="40.0097%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (59,537,011 samples, 23.45%)</title><rect x="39.7609%" y="165" width="23.4503%" height="15" fill="rgb(233,223,10)"/><text x="40.0109%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (59,434,008 samples, 23.41%)</title><rect x="39.8015%" y="149" width="23.4097%" height="15" fill="rgb(215,21,27)"/><text x="40.0515%" y="159.50">typeck</text></g><g><title>item_types_checking (10,461,886 samples, 4.12%)</title><rect x="63.2112%" y="181" width="4.1207%" height="15" fill="rgb(232,23,21)"/><text x="63.4612%" y="191.50">item..</text></g><g><title>check_mod_item_types (10,454,206 samples, 4.12%)</title><rect x="63.2142%" y="165" width="4.1177%" height="15" fill="rgb(244,5,23)"/><text x="63.4642%" y="175.50">chec..</text></g><g><title>typeck (9,610,817 samples, 3.79%)</title><rect x="63.5464%" y="149" width="3.7855%" height="15" fill="rgb(226,81,46)"/><text x="63.7964%" y="159.50">type..</text></g><g><title>fn_sig (336,502 samples, 0.13%)</title><rect x="67.4989%" y="149" width="0.1325%" height="15" fill="rgb(247,70,30)"/><text x="67.7489%" y="159.50"></text></g><g><title>is_late_bound_map (608,937 samples, 0.24%)</title><rect x="67.6859%" y="133" width="0.2398%" height="15" fill="rgb(212,68,19)"/><text x="67.9359%" y="143.50"></text></g><g><title>resolve_lifetimes (597,576 samples, 0.24%)</title><rect x="67.6904%" y="117" width="0.2354%" height="15" fill="rgb(240,187,13)"/><text x="67.9404%" y="127.50"></text></g><g><title>lint_levels (419,035 samples, 0.17%)</title><rect x="67.7607%" y="101" width="0.1650%" height="15" fill="rgb(223,113,26)"/><text x="68.0107%" y="111.50"></text></g><g><title>generics_of (1,016,770 samples, 0.40%)</title><rect x="67.6315%" y="149" width="0.4005%" height="15" fill="rgb(206,192,2)"/><text x="67.8815%" y="159.50"></text></g><g><title>predicates_of (562,046 samples, 0.22%)</title><rect x="68.0623%" y="149" width="0.2214%" height="15" fill="rgb(241,108,4)"/><text x="68.3123%" y="159.50"></text></g><g><title>predicates_defined_on (495,124 samples, 0.20%)</title><rect x="68.0886%" y="133" width="0.1950%" height="15" fill="rgb(247,173,49)"/><text x="68.3386%" y="143.50"></text></g><g><title>inferred_outlives_of (274,683 samples, 0.11%)</title><rect x="68.1755%" y="117" width="0.1082%" height="15" fill="rgb(224,114,35)"/><text x="68.4255%" y="127.50"></text></g><g><title>type_collecting (2,624,159 samples, 1.03%)</title><rect x="67.3336%" y="181" width="1.0336%" height="15" fill="rgb(245,159,27)"/><text x="67.5836%" y="191.50"></text></g><g><title>collect_mod_item_types (2,612,189 samples, 1.03%)</title><rect x="67.3383%" y="165" width="1.0289%" height="15" fill="rgb(245,172,44)"/><text x="67.5883%" y="175.50"></text></g><g><title>evaluate_obligation (423,743 samples, 0.17%)</title><rect x="69.0327%" y="149" width="0.1669%" height="15" fill="rgb(236,23,11)"/><text x="69.2827%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,632,454 samples, 1.04%)</title><rect x="68.4746%" y="165" width="1.0369%" height="15" fill="rgb(205,117,38)"/><text x="68.7246%" y="175.50"></text></g><g><title>region_scope_tree (436,222 samples, 0.17%)</title><rect x="69.3396%" y="149" width="0.1718%" height="15" fill="rgb(237,72,25)"/><text x="69.5896%" y="159.50"></text></g><g><title>evaluate_obligation (378,234 samples, 0.15%)</title><rect x="70.0312%" y="149" width="0.1490%" height="15" fill="rgb(244,70,9)"/><text x="70.2812%" y="159.50"></text></g><g><title>param_env (268,743 samples, 0.11%)</title><rect x="70.2345%" y="149" width="0.1059%" height="15" fill="rgb(217,125,39)"/><text x="70.4845%" y="159.50"></text></g><g><title>region_scope_tree (679,167 samples, 0.27%)</title><rect x="70.3652%" y="149" width="0.2675%" height="15" fill="rgb(235,36,10)"/><text x="70.6152%" y="159.50"></text></g><g><title>analysis (178,573,451 samples, 70.34%)</title><rect x="0.3342%" y="213" width="70.3361%" height="15" fill="rgb(251,123,47)"/><text x="0.5842%" y="223.50">analysis</text></g><g><title>type_check_crate (92,700,869 samples, 36.51%)</title><rect x="34.1575%" y="197" width="36.5128%" height="15" fill="rgb(221,13,13)"/><text x="34.4075%" y="207.50">type_check_crate</text></g><g><title>wf_checking (5,839,745 samples, 2.30%)</title><rect x="68.3702%" y="181" width="2.3001%" height="15" fill="rgb(238,131,9)"/><text x="68.6202%" y="191.50">w..</text></g><g><title>check_item_well_formed (2,942,158 samples, 1.16%)</title><rect x="69.5115%" y="165" width="1.1588%" height="15" fill="rgb(211,50,8)"/><text x="69.7615%" y="175.50"></text></g><g><title>native_libraries (295,313 samples, 0.12%)</title><rect x="70.8254%" y="197" width="0.1163%" height="15" fill="rgb(245,182,24)"/><text x="71.0754%" y="207.50"></text></g><g><title>codegen_crate (695,688 samples, 0.27%)</title><rect x="70.6751%" y="213" width="0.2740%" height="15" fill="rgb(242,14,37)"/><text x="70.9251%" y="223.50"></text></g><g><title>AST_validation (256,073 samples, 0.10%)</title><rect x="71.0415%" y="197" width="0.1009%" height="15" fill="rgb(246,228,12)"/><text x="71.2915%" y="207.50"></text></g><g><title>metadata_register_crate (2,163,603 samples, 0.85%)</title><rect x="87.1186%" y="165" width="0.8522%" height="15" fill="rgb(213,55,15)"/><text x="87.3686%" y="175.50"></text></g><g><title>metadata_register_crate (797,417 samples, 0.31%)</title><rect x="87.6567%" y="149" width="0.3141%" height="15" fill="rgb(209,9,3)"/><text x="87.9067%" y="159.50"></text></g><g><title>macro_expand_crate (43,869,667 samples, 17.28%)</title><rect x="71.2333%" y="197" width="17.2793%" height="15" fill="rgb(230,59,30)"/><text x="71.4833%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (43,856,717 samples, 17.27%)</title><rect x="71.2384%" y="181" width="17.2742%" height="15" fill="rgb(209,121,21)"/><text x="71.4884%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,375,474 samples, 0.54%)</title><rect x="87.9708%" y="165" width="0.5418%" height="15" fill="rgb(220,109,13)"/><text x="88.2208%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (401,475 samples, 0.16%)</title><rect x="88.5139%" y="197" width="0.1581%" height="15" fill="rgb(232,18,1)"/><text x="88.7639%" y="207.50"></text></g><g><title>late_resolve_crate (3,083,964 samples, 1.21%)</title><rect x="88.7618%" y="181" width="1.2147%" height="15" fill="rgb(215,41,42)"/><text x="89.0118%" y="191.50"></text></g><g><title>configure_and_expand (48,627,270 samples, 19.15%)</title><rect x="70.9491%" y="213" width="19.1532%" height="15" fill="rgb(224,123,36)"/><text x="71.1991%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (3,631,231 samples, 1.43%)</title><rect x="88.6720%" y="197" width="1.4303%" height="15" fill="rgb(240,125,3)"/><text x="88.9220%" y="207.50"></text></g><g><title>drop_ast (590,567 samples, 0.23%)</title><rect x="90.1023%" y="213" width="0.2326%" height="15" fill="rgb(205,98,50)"/><text x="90.3523%" y="223.50"></text></g><g><title>early_lint_checks (1,117,242 samples, 0.44%)</title><rect x="90.3406%" y="213" width="0.4401%" height="15" fill="rgb(205,185,37)"/><text x="90.5906%" y="223.50"></text></g><g><title>free_global_ctxt (4,812,564 samples, 1.90%)</title><rect x="90.7807%" y="213" width="1.8956%" height="15" fill="rgb(238,207,15)"/><text x="91.0307%" y="223.50">f..</text></g><g><title>generate_crate_metadata (4,626,541 samples, 1.82%)</title><rect x="92.6763%" y="213" width="1.8223%" height="15" fill="rgb(213,199,42)"/><text x="92.9263%" y="223.50">g..</text></g><g><title>hir_lowering (5,976,916 samples, 2.35%)</title><rect x="94.4985%" y="213" width="2.3542%" height="15" fill="rgb(235,201,11)"/><text x="94.7485%" y="223.50">h..</text></g><g><title>parse_crate (5,940,866 samples, 2.34%)</title><rect x="96.8783%" y="213" width="2.3400%" height="15" fill="rgb(207,46,11)"/><text x="97.1283%" y="223.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,127,962 samples, 0.44%)</title><rect x="99.3058%" y="213" width="0.4443%" height="15" fill="rgb(241,35,35)"/><text x="99.5558%" y="223.50"></text></g><g><title>all (253,886,038 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (253,886,038 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (531,986 samples, 0.21%)</title><rect x="99.7905%" y="213" width="0.2095%" height="15" fill="rgb(219,102,11)"/><text x="100.0405%" y="223.50"></text></g></svg></svg>