<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (59,411 samples, 0.13%)</title><rect x="8.1897%" y="165" width="0.1282%" height="15" fill="rgb(227,0,7)"/><text x="8.4397%" y="175.50"></text></g><g><title>param_env (155,572 samples, 0.34%)</title><rect x="9.4904%" y="133" width="0.3356%" height="15" fill="rgb(217,0,24)"/><text x="9.7404%" y="143.50"></text></g><g><title>item_attrs (97,612 samples, 0.21%)</title><rect x="10.1765%" y="101" width="0.2106%" height="15" fill="rgb(221,193,54)"/><text x="10.4265%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (93,372 samples, 0.20%)</title><rect x="10.1857%" y="85" width="0.2014%" height="15" fill="rgb(248,212,6)"/><text x="10.4357%" y="95.50"></text></g><g><title>codegen_fn_attrs (129,172 samples, 0.28%)</title><rect x="10.1164%" y="117" width="0.2787%" height="15" fill="rgb(208,68,35)"/><text x="10.3664%" y="127.50"></text></g><g><title>is_copy_raw (120,211 samples, 0.26%)</title><rect x="11.7000%" y="69" width="0.2593%" height="15" fill="rgb(232,128,0)"/><text x="11.9500%" y="79.50"></text></g><g><title>evaluate_obligation (111,271 samples, 0.24%)</title><rect x="11.7193%" y="53" width="0.2400%" height="15" fill="rgb(207,160,47)"/><text x="11.9693%" y="63.50"></text></g><g><title>adt_drop_tys (159,642 samples, 0.34%)</title><rect x="11.6730%" y="85" width="0.3444%" height="15" fill="rgb(228,23,34)"/><text x="11.9230%" y="95.50"></text></g><g><title>predicates_of (67,361 samples, 0.15%)</title><rect x="12.6654%" y="53" width="0.1453%" height="15" fill="rgb(218,30,26)"/><text x="12.9154%" y="63.50"></text></g><g><title>predicates_defined_on (49,841 samples, 0.11%)</title><rect x="12.7032%" y="37" width="0.1075%" height="15" fill="rgb(220,122,19)"/><text x="12.9532%" y="47.50"></text></g><g><title>needs_drop_raw (659,097 samples, 1.42%)</title><rect x="11.5766%" y="101" width="1.4218%" height="15" fill="rgb(250,228,42)"/><text x="11.8266%" y="111.50"></text></g><g><title>is_copy_raw (454,785 samples, 0.98%)</title><rect x="12.0174%" y="85" width="0.9811%" height="15" fill="rgb(240,193,28)"/><text x="12.2674%" y="95.50"></text></g><g><title>evaluate_obligation (395,195 samples, 0.85%)</title><rect x="12.1459%" y="69" width="0.8525%" height="15" fill="rgb(216,20,37)"/><text x="12.3959%" y="79.50"></text></g><g><title>trait_impls_of (81,101 samples, 0.17%)</title><rect x="12.8235%" y="53" width="0.1750%" height="15" fill="rgb(206,188,39)"/><text x="13.0735%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (48,390 samples, 0.10%)</title><rect x="13.1284%" y="85" width="0.1044%" height="15" fill="rgb(217,207,13)"/><text x="13.3784%" y="95.50"></text></g><g><title>resolve_instance (169,422 samples, 0.37%)</title><rect x="12.9985%" y="101" width="0.3655%" height="15" fill="rgb(231,73,38)"/><text x="13.2485%" y="111.50"></text></g><g><title>thir_body (189,922 samples, 0.41%)</title><rect x="13.3777%" y="101" width="0.4097%" height="15" fill="rgb(225,20,46)"/><text x="13.6277%" y="111.50"></text></g><g><title>mir_const (2,289,335 samples, 4.94%)</title><rect x="8.8819%" y="149" width="4.9387%" height="15" fill="rgb(210,31,41)"/><text x="9.1319%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (1,851,690 samples, 3.99%)</title><rect x="9.8260%" y="133" width="3.9946%" height="15" fill="rgb(221,200,47)"/><text x="10.0760%" y="143.50">unsa..</text></g><g><title>mir_built (1,587,888 samples, 3.43%)</title><rect x="10.3951%" y="117" width="3.4255%" height="15" fill="rgb(226,26,5)"/><text x="10.6451%" y="127.50">mir..</text></g><g><title>mir_promoted (2,567,249 samples, 5.54%)</title><rect x="8.3178%" y="165" width="5.5382%" height="15" fill="rgb(249,33,26)"/><text x="8.5678%" y="175.50">mir_pro..</text></g><g><title>type_op_normalize_fn_sig (93,290 samples, 0.20%)</title><rect x="13.8560%" y="165" width="0.2012%" height="15" fill="rgb(235,183,28)"/><text x="14.1060%" y="175.50"></text></g><g><title>type_op_normalize_predicate (86,501 samples, 0.19%)</title><rect x="14.0573%" y="165" width="0.1866%" height="15" fill="rgb(221,5,38)"/><text x="14.3073%" y="175.50"></text></g><g><title>type_op_normalize_ty (224,022 samples, 0.48%)</title><rect x="14.2439%" y="165" width="0.4833%" height="15" fill="rgb(247,18,42)"/><text x="14.4939%" y="175.50"></text></g><g><title>normalize_projection_ty (141,772 samples, 0.31%)</title><rect x="14.4213%" y="149" width="0.3058%" height="15" fill="rgb(241,131,45)"/><text x="14.6713%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,098,554 samples, 2.37%)</title><rect x="14.7272%" y="165" width="2.3699%" height="15" fill="rgb(249,31,29)"/><text x="14.9772%" y="175.50">ty..</text></g><g><title>MIR_borrow_checking (6,998,768 samples, 15.10%)</title><rect x="2.0044%" y="197" width="15.0981%" height="15" fill="rgb(225,111,53)"/><text x="2.2544%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,974,788 samples, 15.05%)</title><rect x="2.0561%" y="181" width="15.0464%" height="15" fill="rgb(238,160,17)"/><text x="2.3061%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (135,212 samples, 0.29%)</title><rect x="17.1190%" y="197" width="0.2917%" height="15" fill="rgb(214,148,48)"/><text x="17.3690%" y="207.50"></text></g><g><title>get_lang_items (65,850 samples, 0.14%)</title><rect x="17.8995%" y="149" width="0.1421%" height="15" fill="rgb(232,36,49)"/><text x="18.1495%" y="159.50"></text></g><g><title>associated_item (63,350 samples, 0.14%)</title><rect x="18.0867%" y="133" width="0.1367%" height="15" fill="rgb(209,103,24)"/><text x="18.3367%" y="143.50"></text></g><g><title>item_attrs (132,230 samples, 0.29%)</title><rect x="18.2621%" y="117" width="0.2853%" height="15" fill="rgb(229,88,8)"/><text x="18.5121%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (121,050 samples, 0.26%)</title><rect x="18.2862%" y="101" width="0.2611%" height="15" fill="rgb(213,181,19)"/><text x="18.5362%" y="111.50"></text></g><g><title>codegen_fn_attrs (178,412 samples, 0.38%)</title><rect x="18.2234%" y="133" width="0.3849%" height="15" fill="rgb(254,191,54)"/><text x="18.4734%" y="143.50"></text></g><g><title>should_inherit_track_caller (265,353 samples, 0.57%)</title><rect x="18.0415%" y="149" width="0.5724%" height="15" fill="rgb(241,83,37)"/><text x="18.2915%" y="159.50"></text></g><g><title>codegen_fn_attrs (447,064 samples, 0.96%)</title><rect x="17.7297%" y="165" width="0.9644%" height="15" fill="rgb(233,36,39)"/><text x="17.9797%" y="175.50"></text></g><g><title>check_mod_attrs (557,127 samples, 1.20%)</title><rect x="17.4932%" y="181" width="1.2019%" height="15" fill="rgb(226,3,54)"/><text x="17.7432%" y="191.50"></text></g><g><title>check_mod_const_bodies (53,831 samples, 0.12%)</title><rect x="18.6951%" y="181" width="0.1161%" height="15" fill="rgb(245,192,40)"/><text x="18.9451%" y="191.50"></text></g><g><title>lookup_deprecation_entry (93,801 samples, 0.20%)</title><rect x="19.0499%" y="165" width="0.2024%" height="15" fill="rgb(238,167,29)"/><text x="19.2999%" y="175.50"></text></g><g><title>stability_index (46,791 samples, 0.10%)</title><rect x="19.1513%" y="149" width="0.1009%" height="15" fill="rgb(232,182,51)"/><text x="19.4013%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (223,302 samples, 0.48%)</title><rect x="18.8831%" y="181" width="0.4817%" height="15" fill="rgb(231,60,39)"/><text x="19.1331%" y="191.50"></text></g><g><title>misc_checking_1 (941,831 samples, 2.03%)</title><rect x="17.4124%" y="197" width="2.0318%" height="15" fill="rgb(208,69,12)"/><text x="17.6624%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (126,261 samples, 0.27%)</title><rect x="19.4505%" y="181" width="0.2724%" height="15" fill="rgb(235,93,37)"/><text x="19.7005%" y="191.50"></text></g><g><title>check_mod_liveness (98,221 samples, 0.21%)</title><rect x="19.5110%" y="165" width="0.2119%" height="15" fill="rgb(213,116,39)"/><text x="19.7610%" y="175.50"></text></g><g><title>misc_checking_2 (333,414 samples, 0.72%)</title><rect x="19.4441%" y="197" width="0.7193%" height="15" fill="rgb(222,207,29)"/><text x="19.6941%" y="207.50"></text></g><g><title>match_checking (204,203 samples, 0.44%)</title><rect x="19.7229%" y="181" width="0.4405%" height="15" fill="rgb(206,96,30)"/><text x="19.9729%" y="191.50"></text></g><g><title>check_match (196,052 samples, 0.42%)</title><rect x="19.7404%" y="165" width="0.4229%" height="15" fill="rgb(218,138,4)"/><text x="19.9904%" y="175.50"></text></g><g><title>check_private_in_public (78,111 samples, 0.17%)</title><rect x="20.1948%" y="181" width="0.1685%" height="15" fill="rgb(250,191,14)"/><text x="20.4448%" y="191.50"></text></g><g><title>death_checking (231,223 samples, 0.50%)</title><rect x="20.3633%" y="181" width="0.4988%" height="15" fill="rgb(239,60,40)"/><text x="20.6133%" y="191.50"></text></g><g><title>lint_levels (109,551 samples, 0.24%)</title><rect x="20.6258%" y="165" width="0.2363%" height="15" fill="rgb(206,27,48)"/><text x="20.8758%" y="175.50"></text></g><g><title>param_env (99,471 samples, 0.21%)</title><rect x="21.8116%" y="149" width="0.2146%" height="15" fill="rgb(225,35,8)"/><text x="22.0616%" y="159.50"></text></g><g><title>predicates_of (56,450 samples, 0.12%)</title><rect x="21.9044%" y="133" width="0.1218%" height="15" fill="rgb(250,213,24)"/><text x="22.1544%" y="143.50"></text></g><g><title>predicates_defined_on (46,540 samples, 0.10%)</title><rect x="21.9258%" y="117" width="0.1004%" height="15" fill="rgb(247,123,22)"/><text x="22.1758%" y="127.50"></text></g><g><title>crate_lints (1,174,603 samples, 2.53%)</title><rect x="20.8683%" y="165" width="2.5339%" height="15" fill="rgb(231,138,38)"/><text x="21.1183%" y="175.50">cr..</text></g><g><title>type_of (637,839 samples, 1.38%)</title><rect x="22.0262%" y="149" width="1.3760%" height="15" fill="rgb(231,145,46)"/><text x="22.2762%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (437,575 samples, 0.94%)</title><rect x="22.4582%" y="133" width="0.9440%" height="15" fill="rgb(251,118,11)"/><text x="22.7082%" y="143.50"></text></g><g><title>lint_checking (1,262,134 samples, 2.72%)</title><rect x="20.8621%" y="181" width="2.7227%" height="15" fill="rgb(217,147,25)"/><text x="21.1121%" y="191.50">li..</text></g><g><title>module_lints (84,661 samples, 0.18%)</title><rect x="23.4022%" y="165" width="0.1826%" height="15" fill="rgb(247,81,37)"/><text x="23.6522%" y="175.50"></text></g><g><title>lint_mod (80,801 samples, 0.17%)</title><rect x="23.4105%" y="149" width="0.1743%" height="15" fill="rgb(209,12,38)"/><text x="23.6605%" y="159.50"></text></g><g><title>privacy_access_levels (131,361 samples, 0.28%)</title><rect x="23.5848%" y="181" width="0.2834%" height="15" fill="rgb(227,1,9)"/><text x="23.8348%" y="191.50"></text></g><g><title>privacy_checking_modules (342,724 samples, 0.74%)</title><rect x="23.8682%" y="181" width="0.7393%" height="15" fill="rgb(248,47,43)"/><text x="24.1182%" y="191.50"></text></g><g><title>check_mod_privacy (340,094 samples, 0.73%)</title><rect x="23.8739%" y="165" width="0.7337%" height="15" fill="rgb(221,10,30)"/><text x="24.1239%" y="175.50"></text></g><g><title>misc_checking_3 (2,086,713 samples, 4.50%)</title><rect x="20.1634%" y="197" width="4.5016%" height="15" fill="rgb(210,229,1)"/><text x="20.4134%" y="207.50">misc_..</text></g><g><title>impl_parent (658,392 samples, 1.42%)</title><rect x="27.2703%" y="133" width="1.4203%" height="15" fill="rgb(222,148,37)"/><text x="27.5203%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (395,218 samples, 0.85%)</title><rect x="27.8380%" y="117" width="0.8526%" height="15" fill="rgb(234,67,33)"/><text x="28.0880%" y="127.50"></text></g><g><title>impl_trait_ref (2,150,327 samples, 4.64%)</title><rect x="28.6906%" y="133" width="4.6388%" height="15" fill="rgb(247,98,35)"/><text x="28.9406%" y="143.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,888,083 samples, 4.07%)</title><rect x="29.2564%" y="117" width="4.0731%" height="15" fill="rgb(247,138,52)"/><text x="29.5064%" y="127.50">meta..</text></g><g><title>coherent_trait (4,171,437 samples, 9.00%)</title><rect x="24.8000%" y="165" width="8.9988%" height="15" fill="rgb(213,79,30)"/><text x="25.0500%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (4,157,807 samples, 8.97%)</title><rect x="24.8294%" y="149" width="8.9694%" height="15" fill="rgb(246,177,23)"/><text x="25.0794%" y="159.50">specializatio..</text></g><g><title>trait_impls_of (214,683 samples, 0.46%)</title><rect x="33.3357%" y="133" width="0.4631%" height="15" fill="rgb(230,62,27)"/><text x="33.5857%" y="143.50"></text></g><g><title>coherence_checking (4,251,528 samples, 9.17%)</title><rect x="24.7553%" y="181" width="9.1716%" height="15" fill="rgb(216,154,8)"/><text x="25.0053%" y="191.50">coherence_che..</text></g><g><title>associated_item (68,610 samples, 0.15%)</title><rect x="42.9164%" y="117" width="0.1480%" height="15" fill="rgb(244,35,45)"/><text x="43.1664%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (52,180 samples, 0.11%)</title><rect x="42.9518%" y="101" width="0.1126%" height="15" fill="rgb(251,115,12)"/><text x="43.2018%" y="111.50"></text></g><g><title>associated_items (119,571 samples, 0.26%)</title><rect x="42.8214%" y="133" width="0.2579%" height="15" fill="rgb(240,54,50)"/><text x="43.0714%" y="143.50"></text></g><g><title>adt_def (54,021 samples, 0.12%)</title><rect x="43.4630%" y="101" width="0.1165%" height="15" fill="rgb(233,84,52)"/><text x="43.7130%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (53,191 samples, 0.11%)</title><rect x="43.4648%" y="85" width="0.1147%" height="15" fill="rgb(207,117,47)"/><text x="43.7148%" y="95.50"></text></g><g><title>adt_dtorck_constraint (123,212 samples, 0.27%)</title><rect x="43.3860%" y="117" width="0.2658%" height="15" fill="rgb(249,43,39)"/><text x="43.6360%" y="127.50"></text></g><g><title>dropck_outlives (287,243 samples, 0.62%)</title><rect x="43.1190%" y="133" width="0.6197%" height="15" fill="rgb(209,38,44)"/><text x="43.3690%" y="143.50"></text></g><g><title>evaluate_obligation (378,304 samples, 0.82%)</title><rect x="43.7387%" y="133" width="0.8161%" height="15" fill="rgb(236,212,23)"/><text x="43.9887%" y="143.50"></text></g><g><title>fn_sig (50,130 samples, 0.11%)</title><rect x="44.5723%" y="133" width="0.1081%" height="15" fill="rgb(242,79,21)"/><text x="44.8223%" y="143.50"></text></g><g><title>impl_trait_ref (46,521 samples, 0.10%)</title><rect x="44.8368%" y="133" width="0.1004%" height="15" fill="rgb(211,96,35)"/><text x="45.0868%" y="143.50"></text></g><g><title>method_autoderef_steps (209,561 samples, 0.45%)</title><rect x="45.0586%" y="133" width="0.4521%" height="15" fill="rgb(253,215,40)"/><text x="45.3086%" y="143.50"></text></g><g><title>evaluate_obligation (111,591 samples, 0.24%)</title><rect x="45.2699%" y="117" width="0.2407%" height="15" fill="rgb(211,81,21)"/><text x="45.5199%" y="127.50"></text></g><g><title>evaluate_obligation (107,821 samples, 0.23%)</title><rect x="45.6485%" y="117" width="0.2326%" height="15" fill="rgb(208,190,38)"/><text x="45.8985%" y="127.50"></text></g><g><title>layout_of (61,691 samples, 0.13%)</title><rect x="45.9497%" y="101" width="0.1331%" height="15" fill="rgb(235,213,38)"/><text x="46.1997%" y="111.50"></text></g><g><title>layout_of (95,581 samples, 0.21%)</title><rect x="45.8811%" y="117" width="0.2062%" height="15" fill="rgb(237,122,38)"/><text x="46.1311%" y="127.50"></text></g><g><title>object_safety_violations (293,113 samples, 0.63%)</title><rect x="45.5106%" y="133" width="0.6323%" height="15" fill="rgb(244,218,35)"/><text x="45.7606%" y="143.50"></text></g><g><title>explicit_predicates_of (207,722 samples, 0.45%)</title><rect x="46.3554%" y="101" width="0.4481%" height="15" fill="rgb(240,68,47)"/><text x="46.6054%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (196,912 samples, 0.42%)</title><rect x="46.3788%" y="85" width="0.4248%" height="15" fill="rgb(210,16,53)"/><text x="46.6288%" y="95.50"></text></g><g><title>predicates_of (303,922 samples, 0.66%)</title><rect x="46.1952%" y="133" width="0.6556%" height="15" fill="rgb(235,124,12)"/><text x="46.4452%" y="143.50"></text></g><g><title>predicates_defined_on (260,732 samples, 0.56%)</title><rect x="46.2884%" y="117" width="0.5625%" height="15" fill="rgb(224,169,11)"/><text x="46.5384%" y="127.50"></text></g><g><title>item_bodies_checking (6,048,698 samples, 13.05%)</title><rect x="33.9902%" y="181" width="13.0486%" height="15" fill="rgb(250,166,2)"/><text x="34.2402%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (6,045,148 samples, 13.04%)</title><rect x="33.9979%" y="165" width="13.0409%" height="15" fill="rgb(242,216,29)"/><text x="34.2479%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (6,025,428 samples, 13.00%)</title><rect x="34.0404%" y="149" width="12.9984%" height="15" fill="rgb(230,116,27)"/><text x="34.2904%" y="159.50">typeck</text></g><g><title>adt_destructor (105,181 samples, 0.23%)</title><rect x="49.5901%" y="149" width="0.2269%" height="15" fill="rgb(228,99,48)"/><text x="49.8401%" y="159.50"></text></g><g><title>coherent_trait (99,521 samples, 0.21%)</title><rect x="49.6023%" y="133" width="0.2147%" height="15" fill="rgb(253,11,6)"/><text x="49.8523%" y="143.50"></text></g><g><title>specialization_graph_of (96,131 samples, 0.21%)</title><rect x="49.6096%" y="117" width="0.2074%" height="15" fill="rgb(247,143,39)"/><text x="49.8596%" y="127.50"></text></g><g><title>item_types_checking (1,438,346 samples, 3.10%)</title><rect x="47.0388%" y="181" width="3.1029%" height="15" fill="rgb(236,97,10)"/><text x="47.2888%" y="191.50">ite..</text></g><g><title>check_mod_item_types (1,433,766 samples, 3.09%)</title><rect x="47.0487%" y="165" width="3.0930%" height="15" fill="rgb(233,208,19)"/><text x="47.2987%" y="175.50">che..</text></g><g><title>fn_sig (135,482 samples, 0.29%)</title><rect x="50.4712%" y="149" width="0.2923%" height="15" fill="rgb(216,164,2)"/><text x="50.7212%" y="159.50"></text></g><g><title>type_of (59,632 samples, 0.13%)</title><rect x="50.6348%" y="133" width="0.1286%" height="15" fill="rgb(220,129,5)"/><text x="50.8848%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (57,302 samples, 0.12%)</title><rect x="50.6399%" y="117" width="0.1236%" height="15" fill="rgb(242,17,10)"/><text x="50.8899%" y="127.50"></text></g><g><title>is_late_bound_map (130,663 samples, 0.28%)</title><rect x="50.9567%" y="133" width="0.2819%" height="15" fill="rgb(242,107,0)"/><text x="51.2067%" y="143.50"></text></g><g><title>resolve_lifetimes (120,393 samples, 0.26%)</title><rect x="50.9789%" y="117" width="0.2597%" height="15" fill="rgb(251,28,31)"/><text x="51.2289%" y="127.50"></text></g><g><title>generics_of (272,104 samples, 0.59%)</title><rect x="50.7635%" y="149" width="0.5870%" height="15" fill="rgb(233,223,10)"/><text x="51.0135%" y="159.50"></text></g><g><title>late_bound_vars_map (71,191 samples, 0.15%)</title><rect x="52.4058%" y="101" width="0.1536%" height="15" fill="rgb(215,21,27)"/><text x="52.6558%" y="111.50"></text></g><g><title>resolve_lifetimes (65,041 samples, 0.14%)</title><rect x="52.4191%" y="85" width="0.1403%" height="15" fill="rgb(232,23,21)"/><text x="52.6691%" y="95.50"></text></g><g><title>associated_item (96,392 samples, 0.21%)</title><rect x="52.9565%" y="69" width="0.2079%" height="15" fill="rgb(244,5,23)"/><text x="53.2065%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (60,471 samples, 0.13%)</title><rect x="53.0340%" y="53" width="0.1305%" height="15" fill="rgb(226,81,46)"/><text x="53.2840%" y="63.50"></text></g><g><title>associated_items (162,962 samples, 0.35%)</title><rect x="52.8275%" y="85" width="0.3515%" height="15" fill="rgb(247,70,30)"/><text x="53.0775%" y="95.50"></text></g><g><title>type_param_predicates (274,193 samples, 0.59%)</title><rect x="52.6722%" y="101" width="0.5915%" height="15" fill="rgb(212,68,19)"/><text x="52.9222%" y="111.50"></text></g><g><title>explicit_predicates_of (820,300 samples, 1.77%)</title><rect x="51.4961%" y="117" width="1.7696%" height="15" fill="rgb(240,187,13)"/><text x="51.7461%" y="127.50"></text></g><g><title>predicates_of (1,016,842 samples, 2.19%)</title><rect x="51.3837%" y="149" width="2.1936%" height="15" fill="rgb(223,113,26)"/><text x="51.6337%" y="159.50">p..</text></g><g><title>predicates_defined_on (997,332 samples, 2.15%)</title><rect x="51.4258%" y="133" width="2.1515%" height="15" fill="rgb(206,192,2)"/><text x="51.6758%" y="143.50">p..</text></g><g><title>inferred_outlives_of (144,442 samples, 0.31%)</title><rect x="53.2657%" y="117" width="0.3116%" height="15" fill="rgb(241,108,4)"/><text x="53.5157%" y="127.50"></text></g><g><title>inferred_outlives_crate (131,812 samples, 0.28%)</title><rect x="53.2930%" y="101" width="0.2844%" height="15" fill="rgb(247,173,49)"/><text x="53.5430%" y="111.50"></text></g><g><title>super_predicates_of (188,412 samples, 0.41%)</title><rect x="53.5773%" y="149" width="0.4065%" height="15" fill="rgb(224,114,35)"/><text x="53.8273%" y="159.50"></text></g><g><title>super_predicates_that_define_assoc_type (173,062 samples, 0.37%)</title><rect x="53.6104%" y="133" width="0.3733%" height="15" fill="rgb(245,159,27)"/><text x="53.8604%" y="143.50"></text></g><g><title>type_collecting (1,939,312 samples, 4.18%)</title><rect x="50.1444%" y="181" width="4.1836%" height="15" fill="rgb(245,172,44)"/><text x="50.3944%" y="191.50">type_..</text></g><g><title>collect_mod_item_types (1,920,612 samples, 4.14%)</title><rect x="50.1847%" y="165" width="4.1432%" height="15" fill="rgb(236,23,11)"/><text x="50.4347%" y="175.50">colle..</text></g><g><title>type_of (157,101 samples, 0.34%)</title><rect x="53.9891%" y="149" width="0.3389%" height="15" fill="rgb(205,117,38)"/><text x="54.2391%" y="159.50"></text></g><g><title>adt_sized_constraint (71,760 samples, 0.15%)</title><rect x="57.5188%" y="133" width="0.1548%" height="15" fill="rgb(237,72,25)"/><text x="57.7688%" y="143.50"></text></g><g><title>adt_def (47,180 samples, 0.10%)</title><rect x="57.5718%" y="117" width="0.1018%" height="15" fill="rgb(244,70,9)"/><text x="57.8218%" y="127.50"></text></g><g><title>evaluate_obligation (332,796 samples, 0.72%)</title><rect x="57.0022%" y="149" width="0.7179%" height="15" fill="rgb(217,125,39)"/><text x="57.2522%" y="159.50"></text></g><g><title>implied_outlives_bounds (194,162 samples, 0.42%)</title><rect x="57.7354%" y="149" width="0.4189%" height="15" fill="rgb(235,36,10)"/><text x="57.9854%" y="159.50"></text></g><g><title>param_env (379,804 samples, 0.82%)</title><rect x="58.1543%" y="149" width="0.8193%" height="15" fill="rgb(251,123,47)"/><text x="58.4043%" y="159.50"></text></g><g><title>predicates_of (54,180 samples, 0.12%)</title><rect x="58.9736%" y="149" width="0.1169%" height="15" fill="rgb(221,13,13)"/><text x="59.2236%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,198,975 samples, 4.74%)</title><rect x="54.4837%" y="165" width="4.7437%" height="15" fill="rgb(238,131,9)"/><text x="54.7337%" y="175.50">check_..</text></g><g><title>region_scope_tree (63,481 samples, 0.14%)</title><rect x="59.0905%" y="149" width="0.1369%" height="15" fill="rgb(211,50,8)"/><text x="59.3405%" y="159.50"></text></g><g><title>implied_outlives_bounds (54,350 samples, 0.12%)</title><rect x="61.3541%" y="149" width="0.1172%" height="15" fill="rgb(245,182,24)"/><text x="61.6041%" y="159.50"></text></g><g><title>param_env (277,395 samples, 0.60%)</title><rect x="61.5257%" y="149" width="0.5984%" height="15" fill="rgb(242,14,37)"/><text x="61.7757%" y="159.50"></text></g><g><title>predicates_of (67,522 samples, 0.15%)</title><rect x="62.1241%" y="149" width="0.1457%" height="15" fill="rgb(246,228,12)"/><text x="62.3741%" y="159.50"></text></g><g><title>check_item_well_formed (1,530,007 samples, 3.30%)</title><rect x="59.2275%" y="165" width="3.3006%" height="15" fill="rgb(213,55,15)"/><text x="59.4775%" y="175.50">che..</text></g><g><title>variances_of (79,631 samples, 0.17%)</title><rect x="62.3563%" y="149" width="0.1718%" height="15" fill="rgb(209,9,3)"/><text x="62.6063%" y="159.50"></text></g><g><title>crate_variances (74,321 samples, 0.16%)</title><rect x="62.3677%" y="133" width="0.1603%" height="15" fill="rgb(230,59,30)"/><text x="62.6177%" y="143.50"></text></g><g><title>evaluate_obligation (201,682 samples, 0.44%)</title><rect x="63.1368%" y="149" width="0.4351%" height="15" fill="rgb(209,121,21)"/><text x="63.3868%" y="159.50"></text></g><g><title>implied_outlives_bounds (95,980 samples, 0.21%)</title><rect x="63.5719%" y="149" width="0.2071%" height="15" fill="rgb(220,109,13)"/><text x="63.8219%" y="159.50"></text></g><g><title>param_env (67,581 samples, 0.15%)</title><rect x="63.7789%" y="149" width="0.1458%" height="15" fill="rgb(232,18,1)"/><text x="64.0289%" y="159.50"></text></g><g><title>analysis (28,923,204 samples, 62.39%)</title><rect x="1.5877%" y="213" width="62.3946%" height="15" fill="rgb(215,41,42)"/><text x="1.8377%" y="223.50">analysis</text></g><g><title>type_check_crate (18,225,674 samples, 39.32%)</title><rect x="24.6649%" y="197" width="39.3173%" height="15" fill="rgb(224,123,36)"/><text x="24.9149%" y="207.50">type_check_crate</text></g><g><title>wf_checking (4,473,960 samples, 9.65%)</title><rect x="54.3308%" y="181" width="9.6515%" height="15" fill="rgb(240,125,3)"/><text x="54.5808%" y="191.50">wf_checking</text></g><g><title>check_trait_item_well_formed (674,107 samples, 1.45%)</title><rect x="62.5281%" y="165" width="1.4542%" height="15" fill="rgb(205,98,50)"/><text x="62.7781%" y="175.50"></text></g><g><title>codegen_crate (445,335 samples, 0.96%)</title><rect x="64.0081%" y="213" width="0.9607%" height="15" fill="rgb(205,185,37)"/><text x="64.2581%" y="223.50"></text></g><g><title>AST_validation (106,271 samples, 0.23%)</title><rect x="65.5101%" y="197" width="0.2293%" height="15" fill="rgb(238,207,15)"/><text x="65.7601%" y="207.50"></text></g><g><title>crate_injection (107,121 samples, 0.23%)</title><rect x="65.7978%" y="197" width="0.2311%" height="15" fill="rgb(213,199,42)"/><text x="66.0478%" y="207.50"></text></g><g><title>macro_expand_crate (6,722,296 samples, 14.50%)</title><rect x="66.0289%" y="197" width="14.5017%" height="15" fill="rgb(235,201,11)"/><text x="66.2789%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (6,696,205 samples, 14.45%)</title><rect x="66.0852%" y="181" width="14.4454%" height="15" fill="rgb(207,46,11)"/><text x="66.3352%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (226,302 samples, 0.49%)</title><rect x="80.0424%" y="165" width="0.4882%" height="15" fill="rgb(241,35,35)"/><text x="80.2924%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (184,972 samples, 0.40%)</title><rect x="80.5403%" y="197" width="0.3990%" height="15" fill="rgb(243,32,47)"/><text x="80.7903%" y="207.50"></text></g><g><title>finalize_imports (301,563 samples, 0.65%)</title><rect x="80.9583%" y="181" width="0.6505%" height="15" fill="rgb(247,202,23)"/><text x="81.2083%" y="191.50"></text></g><g><title>late_resolve_crate (1,277,964 samples, 2.76%)</title><rect x="81.6413%" y="181" width="2.7569%" height="15" fill="rgb(219,102,11)"/><text x="81.8913%" y="191.50">la..</text></g><g><title>configure_and_expand (9,068,092 samples, 19.56%)</title><rect x="64.9688%" y="213" width="19.5621%" height="15" fill="rgb(243,110,44)"/><text x="65.2188%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,664,919 samples, 3.59%)</title><rect x="80.9393%" y="197" width="3.5916%" height="15" fill="rgb(222,74,54)"/><text x="81.1893%" y="207.50">reso..</text></g><g><title>drop_ast (81,291 samples, 0.18%)</title><rect x="84.5309%" y="213" width="0.1754%" height="15" fill="rgb(216,99,12)"/><text x="84.7809%" y="223.50"></text></g><g><title>early_lint_checks (171,302 samples, 0.37%)</title><rect x="84.7478%" y="213" width="0.3695%" height="15" fill="rgb(226,22,26)"/><text x="84.9978%" y="223.50"></text></g><g><title>free_global_ctxt (1,589,668 samples, 3.43%)</title><rect x="85.1174%" y="213" width="3.4293%" height="15" fill="rgb(217,163,10)"/><text x="85.3674%" y="223.50">fre..</text></g><g><title>crate_hash (126,841 samples, 0.27%)</title><rect x="89.6190%" y="197" width="0.2736%" height="15" fill="rgb(213,25,53)"/><text x="89.8690%" y="207.50"></text></g><g><title>generate_crate_metadata (738,518 samples, 1.59%)</title><rect x="88.5467%" y="213" width="1.5932%" height="15" fill="rgb(252,105,26)"/><text x="88.7967%" y="223.50"></text></g><g><title>hir_lowering (930,070 samples, 2.01%)</title><rect x="90.1399%" y="213" width="2.0064%" height="15" fill="rgb(220,39,43)"/><text x="90.3899%" y="223.50">h..</text></g><g><title>link (59,361 samples, 0.13%)</title><rect x="92.1463%" y="213" width="0.1281%" height="15" fill="rgb(229,68,48)"/><text x="92.3963%" y="223.50"></text></g><g><title>parse_crate (1,780,740 samples, 3.84%)</title><rect x="92.2743%" y="213" width="3.8415%" height="15" fill="rgb(252,8,32)"/><text x="92.5243%" y="223.50">pars..</text></g><g><title>prepare_outputs (328,394 samples, 0.71%)</title><rect x="96.1387%" y="213" width="0.7084%" height="15" fill="rgb(223,20,43)"/><text x="96.3887%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (706,048 samples, 1.52%)</title><rect x="96.8471%" y="213" width="1.5231%" height="15" fill="rgb(229,81,49)"/><text x="97.0971%" y="223.50"></text></g><g><title>setup_global_ctxt (156,152 samples, 0.34%)</title><rect x="98.4117%" y="213" width="0.3369%" height="15" fill="rgb(236,28,36)"/><text x="98.6617%" y="223.50"></text></g><g><title>all (46,355,300 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (46,355,300 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (580,097 samples, 1.25%)</title><rect x="98.7486%" y="213" width="1.2514%" height="15" fill="rgb(233,201,37)"/><text x="98.9986%" y="223.50"></text></g></svg></svg>