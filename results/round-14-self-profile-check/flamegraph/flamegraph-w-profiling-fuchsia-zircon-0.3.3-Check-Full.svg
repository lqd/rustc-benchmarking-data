<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (1,101,870 samples, 0.20%)</title><rect x="15.0754%" y="165" width="0.2041%" height="15" fill="rgb(227,0,7)"/><text x="15.3254%" y="175.50"></text></g><g><title>param_env (599,099 samples, 0.11%)</title><rect x="17.4806%" y="133" width="0.1110%" height="15" fill="rgb(217,0,24)"/><text x="17.7306%" y="143.50"></text></g><g><title>is_copy_raw (1,433,205 samples, 0.27%)</title><rect x="21.8435%" y="85" width="0.2655%" height="15" fill="rgb(221,193,54)"/><text x="22.0935%" y="95.50"></text></g><g><title>evaluate_obligation (1,166,274 samples, 0.22%)</title><rect x="21.8929%" y="69" width="0.2160%" height="15" fill="rgb(248,212,6)"/><text x="22.1429%" y="79.50"></text></g><g><title>needs_drop_raw (1,717,488 samples, 0.32%)</title><rect x="21.7911%" y="101" width="0.3181%" height="15" fill="rgb(208,68,35)"/><text x="22.0411%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (578,543 samples, 0.11%)</title><rect x="22.2374%" y="85" width="0.1072%" height="15" fill="rgb(232,128,0)"/><text x="22.4874%" y="95.50"></text></g><g><title>resolve_instance (1,851,896 samples, 0.34%)</title><rect x="22.1155%" y="101" width="0.3430%" height="15" fill="rgb(207,160,47)"/><text x="22.3655%" y="111.50"></text></g><g><title>thir_body (7,116,576 samples, 1.32%)</title><rect x="22.5011%" y="101" width="1.3181%" height="15" fill="rgb(228,23,34)"/><text x="22.7511%" y="111.50"></text></g><g><title>mir_const (40,004,485 samples, 7.41%)</title><rect x="16.4358%" y="149" width="7.4097%" height="15" fill="rgb(218,30,26)"/><text x="16.6858%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (33,764,558 samples, 6.25%)</title><rect x="17.5916%" y="133" width="6.2539%" height="15" fill="rgb(220,122,19)"/><text x="17.8416%" y="143.50">unsafety..</text></g><g><title>mir_built (30,650,058 samples, 5.68%)</title><rect x="18.1684%" y="117" width="5.6771%" height="15" fill="rgb(250,228,42)"/><text x="18.4184%" y="127.50">mir_bui..</text></g><g><title>thir_body (1,120,842 samples, 0.21%)</title><rect x="25.3515%" y="85" width="0.2076%" height="15" fill="rgb(240,193,28)"/><text x="25.6015%" y="95.50"></text></g><g><title>mir_const (7,074,907 samples, 1.31%)</title><rect x="24.2603%" y="133" width="1.3104%" height="15" fill="rgb(216,20,37)"/><text x="24.5103%" y="143.50"></text></g><g><title>unsafety_check_result (5,193,228 samples, 0.96%)</title><rect x="24.6088%" y="117" width="0.9619%" height="15" fill="rgb(206,188,39)"/><text x="24.8588%" y="127.50"></text></g><g><title>mir_built (4,576,501 samples, 0.85%)</title><rect x="24.7231%" y="101" width="0.8477%" height="15" fill="rgb(217,207,13)"/><text x="24.9731%" y="111.50"></text></g><g><title>mir_promoted (55,588,565 samples, 10.30%)</title><rect x="15.2918%" y="165" width="10.2962%" height="15" fill="rgb(231,73,38)"/><text x="15.5418%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (9,407,638 samples, 1.74%)</title><rect x="23.8455%" y="149" width="1.7425%" height="15" fill="rgb(225,20,46)"/><text x="24.0955%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (2,094,220 samples, 0.39%)</title><rect x="25.5982%" y="165" width="0.3879%" height="15" fill="rgb(210,31,41)"/><text x="25.8482%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,128,137 samples, 0.76%)</title><rect x="26.0652%" y="165" width="0.7646%" height="15" fill="rgb(221,200,47)"/><text x="26.3152%" y="175.50"></text></g><g><title>MIR_borrow_checking (141,901,672 samples, 26.28%)</title><rect x="0.5482%" y="197" width="26.2833%" height="15" fill="rgb(226,26,5)"/><text x="0.7982%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (140,519,812 samples, 26.03%)</title><rect x="0.8042%" y="181" width="26.0273%" height="15" fill="rgb(249,33,26)"/><text x="1.0542%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (4,087,986 samples, 0.76%)</title><rect x="26.8315%" y="197" width="0.7572%" height="15" fill="rgb(235,183,28)"/><text x="27.0815%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,411,272 samples, 0.63%)</title><rect x="26.9568%" y="181" width="0.6318%" height="15" fill="rgb(221,5,38)"/><text x="27.2068%" y="191.50"></text></g><g><title>hir_module_items (1,466,466 samples, 0.27%)</title><rect x="27.5887%" y="197" width="0.2716%" height="15" fill="rgb(247,18,42)"/><text x="27.8387%" y="207.50"></text></g><g><title>should_inherit_track_caller (1,005,274 samples, 0.19%)</title><rect x="28.3564%" y="149" width="0.1862%" height="15" fill="rgb(241,131,45)"/><text x="28.6064%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,836,333 samples, 0.34%)</title><rect x="28.2062%" y="165" width="0.3401%" height="15" fill="rgb(249,31,29)"/><text x="28.4562%" y="175.50"></text></g><g><title>check_mod_attrs (3,641,262 samples, 0.67%)</title><rect x="27.8719%" y="181" width="0.6744%" height="15" fill="rgb(225,111,53)"/><text x="28.1219%" y="191.50"></text></g><g><title>check_mod_const_bodies (849,762 samples, 0.16%)</title><rect x="28.5463%" y="181" width="0.1574%" height="15" fill="rgb(238,160,17)"/><text x="28.7963%" y="191.50"></text></g><g><title>lint_levels (1,603,578 samples, 0.30%)</title><rect x="28.9397%" y="165" width="0.2970%" height="15" fill="rgb(214,148,48)"/><text x="29.1897%" y="175.50"></text></g><g><title>lookup_deprecation_entry (630,189 samples, 0.12%)</title><rect x="29.2367%" y="165" width="0.1167%" height="15" fill="rgb(232,36,49)"/><text x="29.4867%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (3,190,714 samples, 0.59%)</title><rect x="28.7960%" y="181" width="0.5910%" height="15" fill="rgb(209,103,24)"/><text x="29.0460%" y="191.50"></text></g><g><title>misc_checking_1 (8,445,474 samples, 1.56%)</title><rect x="27.8604%" y="197" width="1.5643%" height="15" fill="rgb(229,88,8)"/><text x="28.1104%" y="207.50"></text></g><g><title>check_mod_intrinsics (600,025 samples, 0.11%)</title><rect x="29.4292%" y="165" width="0.1111%" height="15" fill="rgb(213,181,19)"/><text x="29.6792%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,154,755 samples, 0.58%)</title><rect x="29.4253%" y="181" width="0.5843%" height="15" fill="rgb(254,191,54)"/><text x="29.6753%" y="191.50"></text></g><g><title>check_mod_liveness (2,534,080 samples, 0.47%)</title><rect x="29.5403%" y="165" width="0.4694%" height="15" fill="rgb(241,83,37)"/><text x="29.7903%" y="175.50"></text></g><g><title>mir_borrowck (2,132,402 samples, 0.39%)</title><rect x="31.2755%" y="69" width="0.3950%" height="15" fill="rgb(233,36,39)"/><text x="31.5255%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,923,836 samples, 0.54%)</title><rect x="31.1311%" y="85" width="0.5416%" height="15" fill="rgb(226,3,54)"/><text x="31.3811%" y="95.50"></text></g><g><title>eval_to_const_value_raw (658,072 samples, 0.12%)</title><rect x="31.6998%" y="69" width="0.1219%" height="15" fill="rgb(245,192,40)"/><text x="31.9498%" y="79.50"></text></g><g><title>eval_to_const_value_raw (631,762 samples, 0.12%)</title><rect x="31.7047%" y="53" width="0.1170%" height="15" fill="rgb(238,167,29)"/><text x="31.9547%" y="63.50"></text></g><g><title>eval_to_allocation_raw (573,482 samples, 0.11%)</title><rect x="31.7155%" y="37" width="0.1062%" height="15" fill="rgb(232,182,51)"/><text x="31.9655%" y="47.50"></text></g><g><title>mir_for_ctfe (4,626,819 samples, 0.86%)</title><rect x="30.9798%" y="101" width="0.8570%" height="15" fill="rgb(231,60,39)"/><text x="31.2298%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (885,723 samples, 0.16%)</title><rect x="31.6727%" y="85" width="0.1641%" height="15" fill="rgb(208,69,12)"/><text x="31.9227%" y="95.50"></text></g><g><title>eval_to_const_value_raw (5,207,174 samples, 0.96%)</title><rect x="30.8833%" y="149" width="0.9645%" height="15" fill="rgb(235,93,37)"/><text x="31.1333%" y="159.50"></text></g><g><title>eval_to_const_value_raw (5,173,994 samples, 0.96%)</title><rect x="30.8895%" y="133" width="0.9583%" height="15" fill="rgb(213,116,39)"/><text x="31.1395%" y="143.50"></text></g><g><title>eval_to_allocation_raw (5,128,062 samples, 0.95%)</title><rect x="30.8980%" y="117" width="0.9498%" height="15" fill="rgb(222,207,29)"/><text x="31.1480%" y="127.50"></text></g><g><title>mir_const (736,617 samples, 0.14%)</title><rect x="31.9189%" y="133" width="0.1364%" height="15" fill="rgb(206,96,30)"/><text x="32.1689%" y="143.50"></text></g><g><title>unsafety_check_result (541,235 samples, 0.10%)</title><rect x="31.9551%" y="117" width="0.1002%" height="15" fill="rgb(218,138,4)"/><text x="32.2051%" y="127.50"></text></g><g><title>mir_const_qualif (1,083,488 samples, 0.20%)</title><rect x="31.8553%" y="149" width="0.2007%" height="15" fill="rgb(250,191,14)"/><text x="32.1053%" y="159.50"></text></g><g><title>misc_checking_2 (14,485,411 samples, 2.68%)</title><rect x="29.4247%" y="197" width="2.6830%" height="15" fill="rgb(239,60,40)"/><text x="29.6747%" y="207.50">mi..</text></g><g><title>match_checking (11,327,046 samples, 2.10%)</title><rect x="30.0097%" y="181" width="2.0980%" height="15" fill="rgb(206,27,48)"/><text x="30.2597%" y="191.50">m..</text></g><g><title>check_match (10,897,290 samples, 2.02%)</title><rect x="30.0893%" y="165" width="2.0184%" height="15" fill="rgb(225,35,8)"/><text x="30.3393%" y="175.50">c..</text></g><g><title>check_private_in_public (1,331,615 samples, 0.25%)</title><rect x="32.1100%" y="181" width="0.2466%" height="15" fill="rgb(250,213,24)"/><text x="32.3600%" y="191.50"></text></g><g><title>death_checking (2,772,531 samples, 0.51%)</title><rect x="32.3566%" y="181" width="0.5135%" height="15" fill="rgb(247,123,22)"/><text x="32.6066%" y="191.50"></text></g><g><title>param_env (870,829 samples, 0.16%)</title><rect x="33.4538%" y="149" width="0.1613%" height="15" fill="rgb(231,138,38)"/><text x="33.7038%" y="159.50"></text></g><g><title>crate_lints (5,281,709 samples, 0.98%)</title><rect x="32.8706%" y="165" width="0.9783%" height="15" fill="rgb(231,145,46)"/><text x="33.1206%" y="175.50"></text></g><g><title>type_of (1,255,955 samples, 0.23%)</title><rect x="33.6163%" y="149" width="0.2326%" height="15" fill="rgb(251,118,11)"/><text x="33.8663%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,018,542 samples, 0.19%)</title><rect x="33.6602%" y="133" width="0.1887%" height="15" fill="rgb(217,147,25)"/><text x="33.9102%" y="143.50"></text></g><g><title>lint_checking (8,540,425 samples, 1.58%)</title><rect x="32.8702%" y="181" width="1.5819%" height="15" fill="rgb(247,81,37)"/><text x="33.1202%" y="191.50"></text></g><g><title>module_lints (3,256,296 samples, 0.60%)</title><rect x="33.8489%" y="165" width="0.6031%" height="15" fill="rgb(209,12,38)"/><text x="34.0989%" y="175.50"></text></g><g><title>lint_mod (3,236,856 samples, 0.60%)</title><rect x="33.8525%" y="149" width="0.5995%" height="15" fill="rgb(227,1,9)"/><text x="34.1025%" y="159.50"></text></g><g><title>privacy_access_levels (2,046,642 samples, 0.38%)</title><rect x="34.4520%" y="181" width="0.3791%" height="15" fill="rgb(248,47,43)"/><text x="34.7020%" y="191.50"></text></g><g><title>privacy_checking_modules (5,126,977 samples, 0.95%)</title><rect x="34.8311%" y="181" width="0.9496%" height="15" fill="rgb(221,10,30)"/><text x="35.0811%" y="191.50"></text></g><g><title>check_mod_privacy (5,112,937 samples, 0.95%)</title><rect x="34.8337%" y="165" width="0.9470%" height="15" fill="rgb(210,229,1)"/><text x="35.0837%" y="175.50"></text></g><g><title>misc_checking_3 (19,897,031 samples, 3.69%)</title><rect x="32.1077%" y="197" width="3.6854%" height="15" fill="rgb(222,148,37)"/><text x="32.3577%" y="207.50">misc..</text></g><g><title>impl_parent (3,727,269 samples, 0.69%)</title><rect x="37.2800%" y="133" width="0.6904%" height="15" fill="rgb(234,67,33)"/><text x="37.5300%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,099,225 samples, 0.39%)</title><rect x="37.5815%" y="117" width="0.3888%" height="15" fill="rgb(247,98,35)"/><text x="37.8315%" y="127.50"></text></g><g><title>impl_trait_ref (7,707,291 samples, 1.43%)</title><rect x="37.9703%" y="133" width="1.4276%" height="15" fill="rgb(247,138,52)"/><text x="38.2203%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,021,054 samples, 1.12%)</title><rect x="38.2827%" y="117" width="1.1152%" height="15" fill="rgb(213,79,30)"/><text x="38.5327%" y="127.50"></text></g><g><title>trait_impls_of (1,420,582 samples, 0.26%)</title><rect x="39.4020%" y="133" width="0.2631%" height="15" fill="rgb(246,177,23)"/><text x="39.6520%" y="143.50"></text></g><g><title>coherent_trait (20,332,775 samples, 3.77%)</title><rect x="35.8992%" y="165" width="3.7661%" height="15" fill="rgb(230,62,27)"/><text x="36.1492%" y="175.50">cohe..</text></g><g><title>specialization_graph_of (19,620,796 samples, 3.63%)</title><rect x="36.0311%" y="149" width="3.6342%" height="15" fill="rgb(216,154,8)"/><text x="36.2811%" y="159.50">spec..</text></g><g><title>coherence_checking (20,853,412 samples, 3.86%)</title><rect x="35.8916%" y="181" width="3.8625%" height="15" fill="rgb(244,35,45)"/><text x="36.1416%" y="191.50">cohe..</text></g><g><title>dropck_outlives (550,223 samples, 0.10%)</title><rect x="62.6778%" y="133" width="0.1019%" height="15" fill="rgb(251,115,12)"/><text x="62.9278%" y="143.50"></text></g><g><title>evaluate_obligation (3,428,834 samples, 0.64%)</title><rect x="62.7797%" y="133" width="0.6351%" height="15" fill="rgb(240,54,50)"/><text x="63.0297%" y="143.50"></text></g><g><title>predicates_of (943,891 samples, 0.17%)</title><rect x="63.7574%" y="133" width="0.1748%" height="15" fill="rgb(233,84,52)"/><text x="64.0074%" y="143.50"></text></g><g><title>predicates_defined_on (553,885 samples, 0.10%)</title><rect x="63.8297%" y="117" width="0.1026%" height="15" fill="rgb(207,117,47)"/><text x="64.0797%" y="127.50"></text></g><g><title>typeck (13,723,145 samples, 2.54%)</title><rect x="63.9771%" y="133" width="2.5418%" height="15" fill="rgb(249,43,39)"/><text x="64.2271%" y="143.50">ty..</text></g><g><title>item_bodies_checking (144,446,480 samples, 26.75%)</title><rect x="39.8177%" y="181" width="26.7546%" height="15" fill="rgb(209,38,44)"/><text x="40.0677%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (144,442,460 samples, 26.75%)</title><rect x="39.8184%" y="165" width="26.7539%" height="15" fill="rgb(236,212,23)"/><text x="40.0684%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (143,484,208 samples, 26.58%)</title><rect x="39.9959%" y="149" width="26.5764%" height="15" fill="rgb(242,79,21)"/><text x="40.2459%" y="159.50">typeck</text></g><g><title>item_types_checking (6,214,519 samples, 1.15%)</title><rect x="66.5723%" y="181" width="1.1511%" height="15" fill="rgb(211,96,35)"/><text x="66.8223%" y="191.50"></text></g><g><title>check_mod_item_types (6,195,549 samples, 1.15%)</title><rect x="66.5758%" y="165" width="1.1476%" height="15" fill="rgb(253,215,40)"/><text x="66.8258%" y="175.50"></text></g><g><title>mir_borrowck (608,076 samples, 0.11%)</title><rect x="68.3291%" y="69" width="0.1126%" height="15" fill="rgb(211,81,21)"/><text x="68.5791%" y="79.50"></text></g><g><title>mir_for_ctfe (848,958 samples, 0.16%)</title><rect x="68.2849%" y="101" width="0.1572%" height="15" fill="rgb(208,190,38)"/><text x="68.5349%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (785,018 samples, 0.15%)</title><rect x="68.2967%" y="85" width="0.1454%" height="15" fill="rgb(235,213,38)"/><text x="68.5467%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,180,034 samples, 0.40%)</title><rect x="68.1372%" y="149" width="0.4038%" height="15" fill="rgb(237,122,38)"/><text x="68.3872%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,163,454 samples, 0.40%)</title><rect x="68.1403%" y="133" width="0.4007%" height="15" fill="rgb(244,218,35)"/><text x="68.3903%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,152,304 samples, 0.40%)</title><rect x="68.1424%" y="117" width="0.3987%" height="15" fill="rgb(240,68,47)"/><text x="68.3924%" y="127.50"></text></g><g><title>late_bound_vars_map (819,217 samples, 0.15%)</title><rect x="68.7414%" y="133" width="0.1517%" height="15" fill="rgb(210,16,53)"/><text x="68.9914%" y="143.50"></text></g><g><title>resolve_lifetimes (675,626 samples, 0.13%)</title><rect x="68.7680%" y="117" width="0.1251%" height="15" fill="rgb(235,124,12)"/><text x="69.0180%" y="127.50"></text></g><g><title>fn_sig (2,001,248 samples, 0.37%)</title><rect x="68.5410%" y="149" width="0.3707%" height="15" fill="rgb(224,169,11)"/><text x="68.7910%" y="159.50"></text></g><g><title>named_region_map (1,826,220 samples, 0.34%)</title><rect x="69.0973%" y="133" width="0.3383%" height="15" fill="rgb(250,166,2)"/><text x="69.3473%" y="143.50"></text></g><g><title>resolve_lifetimes (1,676,189 samples, 0.31%)</title><rect x="69.1251%" y="117" width="0.3105%" height="15" fill="rgb(242,216,29)"/><text x="69.3751%" y="127.50"></text></g><g><title>generics_of (2,944,561 samples, 0.55%)</title><rect x="68.9117%" y="149" width="0.5454%" height="15" fill="rgb(230,116,27)"/><text x="69.1617%" y="159.50"></text></g><g><title>explicit_predicates_of (750,223 samples, 0.14%)</title><rect x="69.8047%" y="117" width="0.1390%" height="15" fill="rgb(228,99,48)"/><text x="70.0547%" y="127.50"></text></g><g><title>predicates_of (2,479,774 samples, 0.46%)</title><rect x="69.5588%" y="149" width="0.4593%" height="15" fill="rgb(253,11,6)"/><text x="69.8088%" y="159.50"></text></g><g><title>predicates_defined_on (1,838,736 samples, 0.34%)</title><rect x="69.6775%" y="133" width="0.3406%" height="15" fill="rgb(247,143,39)"/><text x="69.9275%" y="143.50"></text></g><g><title>type_collecting (12,911,904 samples, 2.39%)</title><rect x="67.7249%" y="181" width="2.3916%" height="15" fill="rgb(236,97,10)"/><text x="67.9749%" y="191.50">ty..</text></g><g><title>collect_mod_item_types (12,887,614 samples, 2.39%)</title><rect x="67.7294%" y="165" width="2.3871%" height="15" fill="rgb(233,208,19)"/><text x="67.9794%" y="175.50">co..</text></g><g><title>evaluate_obligation (1,189,314 samples, 0.22%)</title><rect x="72.3671%" y="149" width="0.2203%" height="15" fill="rgb(216,164,2)"/><text x="72.6171%" y="159.50"></text></g><g><title>param_env (2,211,991 samples, 0.41%)</title><rect x="72.6779%" y="149" width="0.4097%" height="15" fill="rgb(220,129,5)"/><text x="72.9279%" y="159.50"></text></g><g><title>region_scope_tree (3,216,491 samples, 0.60%)</title><rect x="73.0978%" y="149" width="0.5958%" height="15" fill="rgb(242,17,10)"/><text x="73.3478%" y="159.50"></text></g><g><title>check_impl_item_well_formed (17,878,949 samples, 3.31%)</title><rect x="70.3999%" y="165" width="3.3116%" height="15" fill="rgb(242,107,0)"/><text x="70.6499%" y="175.50">che..</text></g><g><title>evaluate_obligation (2,584,909 samples, 0.48%)</title><rect x="74.7405%" y="149" width="0.4788%" height="15" fill="rgb(251,28,31)"/><text x="74.9905%" y="159.50"></text></g><g><title>param_env (1,212,434 samples, 0.22%)</title><rect x="75.2604%" y="149" width="0.2246%" height="15" fill="rgb(233,223,10)"/><text x="75.5104%" y="159.50"></text></g><g><title>check_item_well_formed (10,206,391 samples, 1.89%)</title><rect x="73.7115%" y="165" width="1.8904%" height="15" fill="rgb(215,21,27)"/><text x="73.9615%" y="175.50">c..</text></g><g><title>param_env (943,103 samples, 0.17%)</title><rect x="76.2949%" y="149" width="0.1747%" height="15" fill="rgb(232,23,21)"/><text x="76.5449%" y="159.50"></text></g><g><title>analysis (411,873,151 samples, 76.29%)</title><rect x="0.2501%" y="213" width="76.2878%" height="15" fill="rgb(244,5,23)"/><text x="0.5001%" y="223.50">analysis</text></g><g><title>type_check_crate (219,978,772 samples, 40.74%)</title><rect x="35.7931%" y="197" width="40.7448%" height="15" fill="rgb(226,81,46)"/><text x="36.0431%" y="207.50">type_check_crate</text></g><g><title>wf_checking (34,597,656 samples, 6.41%)</title><rect x="70.1297%" y="181" width="6.4082%" height="15" fill="rgb(247,70,30)"/><text x="70.3797%" y="191.50">wf_check..</text></g><g><title>check_trait_item_well_formed (5,053,297 samples, 0.94%)</title><rect x="75.6019%" y="165" width="0.9360%" height="15" fill="rgb(212,68,19)"/><text x="75.8519%" y="175.50"></text></g><g><title>AST_validation (865,260 samples, 0.16%)</title><rect x="76.6588%" y="197" width="0.1603%" height="15" fill="rgb(240,187,13)"/><text x="76.9088%" y="207.50"></text></g><g><title>metadata_register_crate (2,055,593 samples, 0.38%)</title><rect x="87.4541%" y="165" width="0.3807%" height="15" fill="rgb(223,113,26)"/><text x="87.7041%" y="175.50"></text></g><g><title>metadata_register_crate (756,750 samples, 0.14%)</title><rect x="87.6946%" y="149" width="0.1402%" height="15" fill="rgb(206,192,2)"/><text x="87.9446%" y="159.50"></text></g><g><title>macro_expand_crate (59,932,448 samples, 11.10%)</title><rect x="76.8908%" y="197" width="11.1008%" height="15" fill="rgb(241,108,4)"/><text x="77.1408%" y="207.50">macro_expand_cra..</text></g><g><title>expand_crate (59,906,798 samples, 11.10%)</title><rect x="76.8955%" y="181" width="11.0960%" height="15" fill="rgb(247,173,49)"/><text x="77.1455%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (846,262 samples, 0.16%)</title><rect x="87.8348%" y="165" width="0.1567%" height="15" fill="rgb(224,114,35)"/><text x="88.0848%" y="175.50"></text></g><g><title>finalize_macro_resolutions (777,769 samples, 0.14%)</title><rect x="88.0638%" y="181" width="0.1441%" height="15" fill="rgb(245,159,27)"/><text x="88.3138%" y="191.50"></text></g><g><title>late_resolve_crate (8,674,077 samples, 1.61%)</title><rect x="88.2079%" y="181" width="1.6066%" height="15" fill="rgb(245,172,44)"/><text x="88.4579%" y="191.50"></text></g><g><title>configure_and_expand (71,933,373 samples, 13.32%)</title><rect x="76.6264%" y="213" width="13.3236%" height="15" fill="rgb(236,23,11)"/><text x="76.8764%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (10,385,186 samples, 1.92%)</title><rect x="88.0265%" y="197" width="1.9236%" height="15" fill="rgb(205,117,38)"/><text x="88.2765%" y="207.50">r..</text></g><g><title>drop_ast (1,371,715 samples, 0.25%)</title><rect x="89.9500%" y="213" width="0.2541%" height="15" fill="rgb(237,72,25)"/><text x="90.2000%" y="223.50"></text></g><g><title>early_lint_checks (2,685,980 samples, 0.50%)</title><rect x="90.2075%" y="213" width="0.4975%" height="15" fill="rgb(244,70,9)"/><text x="90.4575%" y="223.50"></text></g><g><title>free_global_ctxt (7,418,523 samples, 1.37%)</title><rect x="90.7050%" y="213" width="1.3741%" height="15" fill="rgb(217,125,39)"/><text x="90.9550%" y="223.50"></text></g><g><title>eval_to_const_value_raw (3,152,153 samples, 0.58%)</title><rect x="94.3855%" y="165" width="0.5838%" height="15" fill="rgb(235,36,10)"/><text x="94.6355%" y="175.50"></text></g><g><title>eval_to_const_value_raw (2,981,502 samples, 0.55%)</title><rect x="94.4172%" y="149" width="0.5522%" height="15" fill="rgb(251,123,47)"/><text x="94.6672%" y="159.50"></text></g><g><title>eval_to_allocation_raw (2,762,171 samples, 0.51%)</title><rect x="94.4578%" y="133" width="0.5116%" height="15" fill="rgb(221,13,13)"/><text x="94.7078%" y="143.50"></text></g><g><title>mir_for_ctfe (7,980,668 samples, 1.48%)</title><rect x="93.5365%" y="197" width="1.4782%" height="15" fill="rgb(238,131,9)"/><text x="93.7865%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,912,012 samples, 0.72%)</title><rect x="94.2901%" y="181" width="0.7246%" height="15" fill="rgb(211,50,8)"/><text x="94.5401%" y="191.50"></text></g><g><title>generate_crate_metadata (16,333,102 samples, 3.03%)</title><rect x="92.0791%" y="213" width="3.0252%" height="15" fill="rgb(245,182,24)"/><text x="92.3291%" y="223.50">gen..</text></g><g><title>hir_lowering (20,809,212 samples, 3.85%)</title><rect x="95.1043%" y="213" width="3.8543%" height="15" fill="rgb(242,14,37)"/><text x="95.3543%" y="223.50">hir_..</text></g><g><title>parse_crate (2,241,475 samples, 0.42%)</title><rect x="98.9780%" y="213" width="0.4152%" height="15" fill="rgb(246,228,12)"/><text x="99.2280%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (2,182,805 samples, 0.40%)</title><rect x="99.4363%" y="213" width="0.4043%" height="15" fill="rgb(213,55,15)"/><text x="99.6863%" y="223.50"></text></g><g><title>all (539,893,558 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (539,893,558 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (716,258 samples, 0.13%)</title><rect x="99.8673%" y="213" width="0.1327%" height="15" fill="rgb(209,121,21)"/><text x="100.1173%" y="223.50"></text></g></svg></svg>