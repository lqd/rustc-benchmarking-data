<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (299,405 samples, 0.17%)</title><rect x="7.8971%" y="165" width="0.1727%" height="15" fill="rgb(227,0,7)"/><text x="8.1471%" y="175.50"></text></g><g><title>item_attrs (285,075 samples, 0.16%)</title><rect x="8.3491%" y="133" width="0.1645%" height="15" fill="rgb(217,0,24)"/><text x="8.5991%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (274,325 samples, 0.16%)</title><rect x="8.3553%" y="117" width="0.1583%" height="15" fill="rgb(221,193,54)"/><text x="8.6053%" y="127.50"></text></g><g><title>codegen_fn_attrs (391,537 samples, 0.23%)</title><rect x="8.2965%" y="149" width="0.2259%" height="15" fill="rgb(248,212,6)"/><text x="8.5465%" y="159.50"></text></g><g><title>adt_drop_tys (274,681 samples, 0.16%)</title><rect x="9.8988%" y="117" width="0.1585%" height="15" fill="rgb(208,68,35)"/><text x="10.1488%" y="127.50"></text></g><g><title>needs_drop_raw (1,079,045 samples, 0.62%)</title><rect x="9.8286%" y="133" width="0.6225%" height="15" fill="rgb(232,128,0)"/><text x="10.0786%" y="143.50"></text></g><g><title>is_copy_raw (682,741 samples, 0.39%)</title><rect x="10.0573%" y="117" width="0.3939%" height="15" fill="rgb(207,160,47)"/><text x="10.3073%" y="127.50"></text></g><g><title>evaluate_obligation (534,330 samples, 0.31%)</title><rect x="10.1429%" y="101" width="0.3082%" height="15" fill="rgb(228,23,34)"/><text x="10.3929%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (238,012 samples, 0.14%)</title><rect x="10.6031%" y="117" width="0.1373%" height="15" fill="rgb(218,30,26)"/><text x="10.8531%" y="127.50"></text></g><g><title>impl_parent (227,483 samples, 0.13%)</title><rect x="11.1648%" y="101" width="0.1312%" height="15" fill="rgb(220,122,19)"/><text x="11.4148%" y="111.50"></text></g><g><title>specialization_graph_of (1,411,426 samples, 0.81%)</title><rect x="10.7584%" y="117" width="0.8142%" height="15" fill="rgb(250,228,42)"/><text x="11.0084%" y="127.50"></text></g><g><title>impl_trait_ref (479,442 samples, 0.28%)</title><rect x="11.2961%" y="101" width="0.2766%" height="15" fill="rgb(240,193,28)"/><text x="11.5461%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (410,112 samples, 0.24%)</title><rect x="11.3361%" y="85" width="0.2366%" height="15" fill="rgb(216,20,37)"/><text x="11.5861%" y="95.50"></text></g><g><title>resolve_instance (2,044,202 samples, 1.18%)</title><rect x="10.4511%" y="133" width="1.1793%" height="15" fill="rgb(206,188,39)"/><text x="10.7011%" y="143.50"></text></g><g><title>thir_body (841,477 samples, 0.49%)</title><rect x="11.6465%" y="133" width="0.4854%" height="15" fill="rgb(217,207,13)"/><text x="11.8965%" y="143.50"></text></g><g><title>mir_const (7,955,143 samples, 4.59%)</title><rect x="7.5539%" y="181" width="4.5892%" height="15" fill="rgb(231,73,38)"/><text x="7.8039%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (7,060,788 samples, 4.07%)</title><rect x="8.0698%" y="165" width="4.0732%" height="15" fill="rgb(225,20,46)"/><text x="8.3198%" y="175.50">unsa..</text></g><g><title>mir_built (6,276,269 samples, 3.62%)</title><rect x="8.5224%" y="149" width="3.6207%" height="15" fill="rgb(210,31,41)"/><text x="8.7724%" y="159.50">mir_..</text></g><g><title>mir_const (293,533 samples, 0.17%)</title><rect x="12.3533%" y="165" width="0.1693%" height="15" fill="rgb(221,200,47)"/><text x="12.6033%" y="175.50"></text></g><g><title>unsafety_check_result (243,543 samples, 0.14%)</title><rect x="12.3821%" y="149" width="0.1405%" height="15" fill="rgb(226,26,5)"/><text x="12.6321%" y="159.50"></text></g><g><title>mir_built (219,663 samples, 0.13%)</title><rect x="12.3959%" y="133" width="0.1267%" height="15" fill="rgb(249,33,26)"/><text x="12.6459%" y="143.50"></text></g><g><title>mir_promoted (9,261,066 samples, 5.34%)</title><rect x="7.1935%" y="197" width="5.3425%" height="15" fill="rgb(235,183,28)"/><text x="7.4435%" y="207.50">mir_pro..</text></g><g><title>mir_const_qualif (681,168 samples, 0.39%)</title><rect x="12.1430%" y="181" width="0.3930%" height="15" fill="rgb(221,5,38)"/><text x="12.3930%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (297,882 samples, 0.17%)</title><rect x="12.5360%" y="197" width="0.1718%" height="15" fill="rgb(247,18,42)"/><text x="12.7860%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (742,179 samples, 0.43%)</title><rect x="12.7078%" y="197" width="0.4281%" height="15" fill="rgb(241,131,45)"/><text x="12.9578%" y="207.50"></text></g><g><title>normalize_projection_ty (430,847 samples, 0.25%)</title><rect x="12.8874%" y="181" width="0.2485%" height="15" fill="rgb(249,31,29)"/><text x="13.1374%" y="191.50"></text></g><g><title>type_op_prove_predicate (2,677,141 samples, 1.54%)</title><rect x="13.1653%" y="197" width="1.5444%" height="15" fill="rgb(225,111,53)"/><text x="13.4153%" y="207.50"></text></g><g><title>MIR_borrow_checking (24,314,919 samples, 14.03%)</title><rect x="0.6859%" y="229" width="14.0268%" height="15" fill="rgb(238,160,17)"/><text x="0.9359%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,225,888 samples, 13.98%)</title><rect x="0.7373%" y="213" width="13.9754%" height="15" fill="rgb(214,148,48)"/><text x="0.9873%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (239,273 samples, 0.14%)</title><rect x="14.7127%" y="229" width="0.1380%" height="15" fill="rgb(232,36,49)"/><text x="14.9627%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (179,462 samples, 0.10%)</title><rect x="14.7472%" y="213" width="0.1035%" height="15" fill="rgb(209,103,24)"/><text x="14.9972%" y="223.50"></text></g><g><title>hir_module_items (284,413 samples, 0.16%)</title><rect x="14.8508%" y="229" width="0.1641%" height="15" fill="rgb(229,88,8)"/><text x="15.1008%" y="239.50"></text></g><g><title>should_inherit_track_caller (275,442 samples, 0.16%)</title><rect x="15.4422%" y="181" width="0.1589%" height="15" fill="rgb(213,181,19)"/><text x="15.6922%" y="191.50"></text></g><g><title>codegen_fn_attrs (579,425 samples, 0.33%)</title><rect x="15.2813%" y="197" width="0.3343%" height="15" fill="rgb(254,191,54)"/><text x="15.5313%" y="207.50"></text></g><g><title>check_mod_attrs (1,016,341 samples, 0.59%)</title><rect x="15.0294%" y="213" width="0.5863%" height="15" fill="rgb(241,83,37)"/><text x="15.2794%" y="223.50"></text></g><g><title>check_mod_const_bodies (204,002 samples, 0.12%)</title><rect x="15.6157%" y="213" width="0.1177%" height="15" fill="rgb(233,36,39)"/><text x="15.8657%" y="223.50"></text></g><g><title>lookup_deprecation_entry (238,002 samples, 0.14%)</title><rect x="15.9615%" y="197" width="0.1373%" height="15" fill="rgb(226,3,54)"/><text x="16.2115%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (629,897 samples, 0.36%)</title><rect x="15.8155%" y="213" width="0.3634%" height="15" fill="rgb(245,192,40)"/><text x="16.0655%" y="223.50"></text></g><g><title>misc_checking_1 (2,091,593 samples, 1.21%)</title><rect x="15.0153%" y="229" width="1.2066%" height="15" fill="rgb(238,167,29)"/><text x="15.2653%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (615,306 samples, 0.35%)</title><rect x="16.2229%" y="213" width="0.3550%" height="15" fill="rgb(232,182,51)"/><text x="16.4729%" y="223.50"></text></g><g><title>check_mod_liveness (522,935 samples, 0.30%)</title><rect x="16.2761%" y="197" width="0.3017%" height="15" fill="rgb(231,60,39)"/><text x="16.5261%" y="207.50"></text></g><g><title>misc_checking_2 (1,176,063 samples, 0.68%)</title><rect x="16.2219%" y="229" width="0.6784%" height="15" fill="rgb(208,69,12)"/><text x="16.4719%" y="239.50"></text></g><g><title>match_checking (559,027 samples, 0.32%)</title><rect x="16.5778%" y="213" width="0.3225%" height="15" fill="rgb(235,93,37)"/><text x="16.8278%" y="223.50"></text></g><g><title>check_match (528,037 samples, 0.30%)</title><rect x="16.5957%" y="197" width="0.3046%" height="15" fill="rgb(213,116,39)"/><text x="16.8457%" y="207.50"></text></g><g><title>check_private_in_public (193,953 samples, 0.11%)</title><rect x="16.9058%" y="213" width="0.1119%" height="15" fill="rgb(222,207,29)"/><text x="17.1558%" y="223.50"></text></g><g><title>death_checking (326,433 samples, 0.19%)</title><rect x="17.0177%" y="213" width="0.1883%" height="15" fill="rgb(206,96,30)"/><text x="17.2677%" y="223.50"></text></g><g><title>param_env (179,263 samples, 0.10%)</title><rect x="17.6783%" y="181" width="0.1034%" height="15" fill="rgb(218,138,4)"/><text x="17.9283%" y="191.50"></text></g><g><title>crate_lints (2,291,316 samples, 1.32%)</title><rect x="17.2069%" y="197" width="1.3218%" height="15" fill="rgb(250,191,14)"/><text x="17.4569%" y="207.50"></text></g><g><title>type_of (1,199,082 samples, 0.69%)</title><rect x="17.8370%" y="181" width="0.6917%" height="15" fill="rgb(239,60,40)"/><text x="18.0870%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (938,550 samples, 0.54%)</title><rect x="17.9873%" y="165" width="0.5414%" height="15" fill="rgb(206,27,48)"/><text x="18.2373%" y="175.50"></text></g><g><title>lint_checking (2,850,502 samples, 1.64%)</title><rect x="17.2060%" y="213" width="1.6444%" height="15" fill="rgb(225,35,8)"/><text x="17.4560%" y="223.50"></text></g><g><title>module_lints (557,676 samples, 0.32%)</title><rect x="18.5287%" y="197" width="0.3217%" height="15" fill="rgb(250,213,24)"/><text x="18.7787%" y="207.50"></text></g><g><title>lint_mod (554,916 samples, 0.32%)</title><rect x="18.5303%" y="181" width="0.3201%" height="15" fill="rgb(247,123,22)"/><text x="18.7803%" y="191.50"></text></g><g><title>privacy_access_levels (285,883 samples, 0.16%)</title><rect x="18.8504%" y="213" width="0.1649%" height="15" fill="rgb(231,138,38)"/><text x="19.1004%" y="223.50"></text></g><g><title>privacy_checking_modules (1,088,722 samples, 0.63%)</title><rect x="19.0153%" y="213" width="0.6281%" height="15" fill="rgb(231,145,46)"/><text x="19.2653%" y="223.50"></text></g><g><title>check_mod_privacy (1,086,912 samples, 0.63%)</title><rect x="19.0164%" y="197" width="0.6270%" height="15" fill="rgb(251,118,11)"/><text x="19.2664%" y="207.50"></text></g><g><title>misc_checking_3 (4,774,713 samples, 2.75%)</title><rect x="16.9003%" y="229" width="2.7544%" height="15" fill="rgb(217,147,25)"/><text x="17.1503%" y="239.50">mi..</text></g><g><title>impl_parent (1,619,027 samples, 0.93%)</title><rect x="21.3344%" y="165" width="0.9340%" height="15" fill="rgb(247,81,37)"/><text x="21.5844%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (954,400 samples, 0.55%)</title><rect x="21.7178%" y="149" width="0.5506%" height="15" fill="rgb(209,12,38)"/><text x="21.9678%" y="159.50"></text></g><g><title>impl_trait_ref (5,335,981 samples, 3.08%)</title><rect x="22.2684%" y="165" width="3.0782%" height="15" fill="rgb(227,1,9)"/><text x="22.5184%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,668,011 samples, 2.69%)</title><rect x="22.6537%" y="149" width="2.6929%" height="15" fill="rgb(248,47,43)"/><text x="22.9037%" y="159.50">me..</text></g><g><title>coherent_trait (10,582,638 samples, 6.10%)</title><rect x="19.7051%" y="197" width="6.1049%" height="15" fill="rgb(221,10,30)"/><text x="19.9551%" y="207.50">coherent..</text></g><g><title>specialization_graph_of (10,560,377 samples, 6.09%)</title><rect x="19.7180%" y="181" width="6.0921%" height="15" fill="rgb(210,229,1)"/><text x="19.9680%" y="191.50">speciali..</text></g><g><title>trait_impls_of (801,809 samples, 0.46%)</title><rect x="25.3475%" y="165" width="0.4625%" height="15" fill="rgb(222,148,37)"/><text x="25.5975%" y="175.50"></text></g><g><title>implementations_of_trait (274,753 samples, 0.16%)</title><rect x="25.6515%" y="149" width="0.1585%" height="15" fill="rgb(234,67,33)"/><text x="25.9015%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (174,572 samples, 0.10%)</title><rect x="25.7093%" y="133" width="0.1007%" height="15" fill="rgb(247,98,35)"/><text x="25.9593%" y="143.50"></text></g><g><title>coherence_checking (10,677,159 samples, 6.16%)</title><rect x="19.6929%" y="213" width="6.1594%" height="15" fill="rgb(247,138,52)"/><text x="19.9429%" y="223.50">coherenc..</text></g><g><title>associated_item (235,795 samples, 0.14%)</title><rect x="33.7238%" y="149" width="0.1360%" height="15" fill="rgb(213,79,30)"/><text x="33.9738%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (191,273 samples, 0.11%)</title><rect x="33.7495%" y="133" width="0.1103%" height="15" fill="rgb(246,177,23)"/><text x="33.9995%" y="143.50"></text></g><g><title>associated_items (356,337 samples, 0.21%)</title><rect x="33.6682%" y="165" width="0.2056%" height="15" fill="rgb(230,62,27)"/><text x="33.9182%" y="175.50"></text></g><g><title>dropck_outlives (408,393 samples, 0.24%)</title><rect x="33.9109%" y="165" width="0.2356%" height="15" fill="rgb(216,154,8)"/><text x="34.1609%" y="175.50"></text></g><g><title>adt_dtorck_constraint (197,022 samples, 0.11%)</title><rect x="34.0329%" y="149" width="0.1137%" height="15" fill="rgb(244,35,45)"/><text x="34.2829%" y="159.50"></text></g><g><title>predicates_of (215,213 samples, 0.12%)</title><rect x="34.6710%" y="149" width="0.1242%" height="15" fill="rgb(251,115,12)"/><text x="34.9210%" y="159.50"></text></g><g><title>trait_impls_of (482,664 samples, 0.28%)</title><rect x="34.8831%" y="149" width="0.2784%" height="15" fill="rgb(240,54,50)"/><text x="35.1331%" y="159.50"></text></g><g><title>implementations_of_trait (193,420 samples, 0.11%)</title><rect x="35.0499%" y="133" width="0.1116%" height="15" fill="rgb(233,84,52)"/><text x="35.2999%" y="143.50"></text></g><g><title>evaluate_obligation (1,760,270 samples, 1.02%)</title><rect x="34.1465%" y="165" width="1.0155%" height="15" fill="rgb(207,117,47)"/><text x="34.3965%" y="175.50"></text></g><g><title>evaluate_obligation (180,124 samples, 0.10%)</title><rect x="35.5968%" y="149" width="0.1039%" height="15" fill="rgb(249,43,39)"/><text x="35.8468%" y="159.50"></text></g><g><title>method_autoderef_steps (375,735 samples, 0.22%)</title><rect x="35.4938%" y="165" width="0.2168%" height="15" fill="rgb(209,38,44)"/><text x="35.7438%" y="175.50"></text></g><g><title>predicates_of (311,991 samples, 0.18%)</title><rect x="35.8072%" y="165" width="0.1800%" height="15" fill="rgb(236,212,23)"/><text x="36.0572%" y="175.50"></text></g><g><title>predicates_defined_on (198,261 samples, 0.11%)</title><rect x="35.8728%" y="149" width="0.1144%" height="15" fill="rgb(242,79,21)"/><text x="36.1228%" y="159.50"></text></g><g><title>dropck_outlives (224,173 samples, 0.13%)</title><rect x="39.6071%" y="149" width="0.1293%" height="15" fill="rgb(211,96,35)"/><text x="39.8571%" y="159.50"></text></g><g><title>evaluate_obligation (667,606 samples, 0.39%)</title><rect x="39.7397%" y="149" width="0.3851%" height="15" fill="rgb(253,215,40)"/><text x="39.9897%" y="159.50"></text></g><g><title>is_copy_raw (260,106 samples, 0.15%)</title><rect x="40.1912%" y="149" width="0.1501%" height="15" fill="rgb(211,81,21)"/><text x="40.4412%" y="159.50"></text></g><g><title>evaluate_obligation (175,163 samples, 0.10%)</title><rect x="40.2402%" y="133" width="0.1010%" height="15" fill="rgb(208,190,38)"/><text x="40.4902%" y="143.50"></text></g><g><title>method_autoderef_steps (343,315 samples, 0.20%)</title><rect x="40.3718%" y="149" width="0.1981%" height="15" fill="rgb(235,213,38)"/><text x="40.6218%" y="159.50"></text></g><g><title>typeck (8,032,469 samples, 4.63%)</title><rect x="36.0277%" y="165" width="4.6338%" height="15" fill="rgb(237,122,38)"/><text x="36.2777%" y="175.50">typeck</text></g><g><title>item_bodies_checking (25,650,524 samples, 14.80%)</title><rect x="25.8830%" y="213" width="14.7973%" height="15" fill="rgb(244,218,35)"/><text x="26.1330%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,646,594 samples, 14.80%)</title><rect x="25.8853%" y="197" width="14.7950%" height="15" fill="rgb(240,68,47)"/><text x="26.1353%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (25,586,204 samples, 14.76%)</title><rect x="25.9201%" y="181" width="14.7602%" height="15" fill="rgb(210,16,53)"/><text x="26.1701%" y="191.50">typeck</text></g><g><title>explicit_item_bounds (205,832 samples, 0.12%)</title><rect x="41.4500%" y="181" width="0.1187%" height="15" fill="rgb(235,124,12)"/><text x="41.7000%" y="191.50"></text></g><g><title>mir_borrowck (251,063 samples, 0.14%)</title><rect x="47.7746%" y="117" width="0.1448%" height="15" fill="rgb(224,169,11)"/><text x="48.0246%" y="127.50"></text></g><g><title>mir_const (243,931 samples, 0.14%)</title><rect x="47.9819%" y="101" width="0.1407%" height="15" fill="rgb(250,166,2)"/><text x="48.2319%" y="111.50"></text></g><g><title>mir_promoted (354,393 samples, 0.20%)</title><rect x="47.9194%" y="117" width="0.2044%" height="15" fill="rgb(242,216,29)"/><text x="48.1694%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (645,496 samples, 0.37%)</title><rect x="48.1239%" y="117" width="0.3724%" height="15" fill="rgb(230,116,27)"/><text x="48.3739%" y="127.50"></text></g><g><title>normalize_projection_ty (467,894 samples, 0.27%)</title><rect x="48.2263%" y="101" width="0.2699%" height="15" fill="rgb(228,99,48)"/><text x="48.4763%" y="111.50"></text></g><g><title>type_op_normalize_predicate (180,531 samples, 0.10%)</title><rect x="48.4962%" y="117" width="0.1041%" height="15" fill="rgb(253,11,6)"/><text x="48.7462%" y="127.50"></text></g><g><title>mir_borrowck (5,543,220 samples, 3.20%)</title><rect x="46.0738%" y="133" width="3.1978%" height="15" fill="rgb(247,143,39)"/><text x="46.3238%" y="143.50">mir..</text></g><g><title>type_op_prove_predicate (1,153,864 samples, 0.67%)</title><rect x="48.6059%" y="117" width="0.6656%" height="15" fill="rgb(236,97,10)"/><text x="48.8559%" y="127.50"></text></g><g><title>mir_const (320,976 samples, 0.19%)</title><rect x="49.4049%" y="117" width="0.1852%" height="15" fill="rgb(233,208,19)"/><text x="49.6549%" y="127.50"></text></g><g><title>mir_promoted (561,756 samples, 0.32%)</title><rect x="49.2715%" y="133" width="0.3241%" height="15" fill="rgb(216,164,2)"/><text x="49.5215%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (825,988 samples, 0.48%)</title><rect x="49.6160%" y="133" width="0.4765%" height="15" fill="rgb(220,129,5)"/><text x="49.8660%" y="143.50"></text></g><g><title>normalize_projection_ty (492,914 samples, 0.28%)</title><rect x="49.8081%" y="117" width="0.2844%" height="15" fill="rgb(242,17,10)"/><text x="50.0581%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,395,535 samples, 0.81%)</title><rect x="50.2197%" y="133" width="0.8051%" height="15" fill="rgb(242,107,0)"/><text x="50.4697%" y="143.50"></text></g><g><title>mir_borrowck (13,583,332 samples, 7.84%)</title><rect x="43.1905%" y="149" width="7.8360%" height="15" fill="rgb(251,28,31)"/><text x="43.4405%" y="159.50">mir_borrowck</text></g><g><title>impl_parent (590,214 samples, 0.34%)</title><rect x="52.3451%" y="53" width="0.3405%" height="15" fill="rgb(233,223,10)"/><text x="52.5951%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (375,351 samples, 0.22%)</title><rect x="52.4691%" y="37" width="0.2165%" height="15" fill="rgb(215,21,27)"/><text x="52.7191%" y="47.50"></text></g><g><title>specialization_graph_of (3,102,604 samples, 1.79%)</title><rect x="51.7106%" y="69" width="1.7898%" height="15" fill="rgb(232,23,21)"/><text x="51.9606%" y="79.50">s..</text></g><g><title>impl_trait_ref (1,412,456 samples, 0.81%)</title><rect x="52.6856%" y="53" width="0.8148%" height="15" fill="rgb(244,5,23)"/><text x="52.9356%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,197,285 samples, 0.69%)</title><rect x="52.8097%" y="37" width="0.6907%" height="15" fill="rgb(226,81,46)"/><text x="53.0597%" y="47.50"></text></g><g><title>resolve_instance (3,190,974 samples, 1.84%)</title><rect x="51.6652%" y="85" width="1.8408%" height="15" fill="rgb(247,70,30)"/><text x="51.9152%" y="95.50">r..</text></g><g><title>associated_item (385,853 samples, 0.22%)</title><rect x="62.5084%" y="53" width="0.2226%" height="15" fill="rgb(212,68,19)"/><text x="62.7584%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (301,383 samples, 0.17%)</title><rect x="62.5571%" y="37" width="0.1739%" height="15" fill="rgb(240,187,13)"/><text x="62.8071%" y="47.50"></text></g><g><title>associated_items (573,787 samples, 0.33%)</title><rect x="62.4199%" y="69" width="0.3310%" height="15" fill="rgb(223,113,26)"/><text x="62.6699%" y="79.50"></text></g><g><title>adt_dtorck_constraint (248,991 samples, 0.14%)</title><rect x="63.1712%" y="37" width="0.1436%" height="15" fill="rgb(206,192,2)"/><text x="63.4212%" y="47.50"></text></g><g><title>dropck_outlives (1,012,502 samples, 0.58%)</title><rect x="62.7790%" y="69" width="0.5841%" height="15" fill="rgb(241,108,4)"/><text x="63.0290%" y="79.50"></text></g><g><title>adt_dtorck_constraint (678,549 samples, 0.39%)</title><rect x="62.9717%" y="53" width="0.3914%" height="15" fill="rgb(247,173,49)"/><text x="63.2217%" y="63.50"></text></g><g><title>trait_impls_of (673,398 samples, 0.39%)</title><rect x="64.6940%" y="53" width="0.3885%" height="15" fill="rgb(224,114,35)"/><text x="64.9440%" y="63.50"></text></g><g><title>implementations_of_trait (260,031 samples, 0.15%)</title><rect x="64.9325%" y="37" width="0.1500%" height="15" fill="rgb(245,159,27)"/><text x="65.1825%" y="47.50"></text></g><g><title>evaluate_obligation (2,972,699 samples, 1.71%)</title><rect x="63.3730%" y="69" width="1.7149%" height="15" fill="rgb(245,172,44)"/><text x="63.6230%" y="79.50"></text></g><g><title>implied_outlives_bounds (557,008 samples, 0.32%)</title><rect x="65.3994%" y="69" width="0.3213%" height="15" fill="rgb(236,23,11)"/><text x="65.6494%" y="79.50"></text></g><g><title>is_copy_raw (691,409 samples, 0.40%)</title><rect x="65.7471%" y="69" width="0.3989%" height="15" fill="rgb(205,117,38)"/><text x="65.9971%" y="79.50"></text></g><g><title>evaluate_obligation (588,538 samples, 0.34%)</title><rect x="65.8065%" y="53" width="0.3395%" height="15" fill="rgb(237,72,25)"/><text x="66.0565%" y="63.50"></text></g><g><title>evaluate_obligation (241,102 samples, 0.14%)</title><rect x="66.4550%" y="53" width="0.1391%" height="15" fill="rgb(244,70,9)"/><text x="66.7050%" y="63.50"></text></g><g><title>method_autoderef_steps (483,504 samples, 0.28%)</title><rect x="66.3231%" y="69" width="0.2789%" height="15" fill="rgb(217,125,39)"/><text x="66.5731%" y="79.50"></text></g><g><title>predicates_of (419,776 samples, 0.24%)</title><rect x="66.6328%" y="69" width="0.2422%" height="15" fill="rgb(235,36,10)"/><text x="66.8828%" y="79.50"></text></g><g><title>predicates_defined_on (286,715 samples, 0.17%)</title><rect x="66.7096%" y="53" width="0.1654%" height="15" fill="rgb(251,123,47)"/><text x="66.9596%" y="63.50"></text></g><g><title>mir_built (27,444,253 samples, 15.83%)</title><rect x="51.2680%" y="101" width="15.8321%" height="15" fill="rgb(221,13,13)"/><text x="51.5180%" y="111.50">mir_built</text></g><g><title>typeck (23,425,471 samples, 13.51%)</title><rect x="53.5864%" y="85" width="13.5137%" height="15" fill="rgb(238,131,9)"/><text x="53.8364%" y="95.50">typeck</text></g><g><title>needs_drop_raw (228,912 samples, 0.13%)</title><rect x="67.7434%" y="69" width="0.1321%" height="15" fill="rgb(211,50,8)"/><text x="67.9934%" y="79.50"></text></g><g><title>thir_body (413,953 samples, 0.24%)</title><rect x="67.8894%" y="69" width="0.2388%" height="15" fill="rgb(245,182,24)"/><text x="68.1394%" y="79.50"></text></g><g><title>mir_built (1,566,879 samples, 0.90%)</title><rect x="67.2351%" y="85" width="0.9039%" height="15" fill="rgb(242,14,37)"/><text x="67.4851%" y="95.50"></text></g><g><title>needs_drop_raw (300,163 samples, 0.17%)</title><rect x="68.5500%" y="53" width="0.1732%" height="15" fill="rgb(246,228,12)"/><text x="68.8000%" y="63.50"></text></g><g><title>thir_body (193,892 samples, 0.11%)</title><rect x="68.7266%" y="53" width="0.1119%" height="15" fill="rgb(213,55,15)"/><text x="68.9766%" y="63.50"></text></g><g><title>mir_built (975,529 samples, 0.56%)</title><rect x="68.2789%" y="69" width="0.5628%" height="15" fill="rgb(209,9,3)"/><text x="68.5289%" y="79.50"></text></g><g><title>mir_const (30,787,062 samples, 17.76%)</title><rect x="51.1146%" y="133" width="17.7605%" height="15" fill="rgb(230,59,30)"/><text x="51.3646%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (30,596,519 samples, 17.65%)</title><rect x="51.2245%" y="117" width="17.6505%" height="15" fill="rgb(209,121,21)"/><text x="51.4745%" y="127.50">unsafety_check_result</text></g><g><title>unsafety_check_result (3,076,874 samples, 1.77%)</title><rect x="67.1001%" y="101" width="1.7750%" height="15" fill="rgb(220,109,13)"/><text x="67.3501%" y="111.50">u..</text></g><g><title>unsafety_check_result (1,273,623 samples, 0.73%)</title><rect x="68.1403%" y="85" width="0.7347%" height="15" fill="rgb(232,18,1)"/><text x="68.3903%" y="95.50"></text></g><g><title>mir_promoted (30,952,453 samples, 17.86%)</title><rect x="51.0265%" y="149" width="17.8559%" height="15" fill="rgb(215,41,42)"/><text x="51.2765%" y="159.50">mir_promoted</text></g><g><title>item_types_checking (49,657,789 samples, 28.65%)</title><rect x="40.6803%" y="213" width="28.6466%" height="15" fill="rgb(224,123,36)"/><text x="40.9303%" y="223.50">item_types_checking</text></g><g><title>check_mod_item_types (49,654,069 samples, 28.64%)</title><rect x="40.6824%" y="197" width="28.6445%" height="15" fill="rgb(240,125,3)"/><text x="40.9324%" y="207.50">check_mod_item_types</text></g><g><title>type_of (48,062,001 samples, 27.73%)</title><rect x="41.6009%" y="181" width="27.7260%" height="15" fill="rgb(205,98,50)"/><text x="41.8509%" y="191.50">type_of</text></g><g><title>mir_borrowck (48,025,310 samples, 27.70%)</title><rect x="41.6220%" y="165" width="27.7049%" height="15" fill="rgb(205,185,37)"/><text x="41.8720%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (517,365 samples, 0.30%)</title><rect x="69.0285%" y="149" width="0.2985%" height="15" fill="rgb(238,207,15)"/><text x="69.2785%" y="159.50"></text></g><g><title>generics_of (190,922 samples, 0.11%)</title><rect x="69.7621%" y="165" width="0.1101%" height="15" fill="rgb(213,199,42)"/><text x="70.0121%" y="175.50"></text></g><g><title>fn_sig (544,567 samples, 0.31%)</title><rect x="69.5972%" y="181" width="0.3142%" height="15" fill="rgb(235,201,11)"/><text x="69.8472%" y="191.50"></text></g><g><title>lint_levels (264,122 samples, 0.15%)</title><rect x="70.5028%" y="133" width="0.1524%" height="15" fill="rgb(207,46,11)"/><text x="70.7528%" y="143.50"></text></g><g><title>is_late_bound_map (1,043,753 samples, 0.60%)</title><rect x="70.0539%" y="165" width="0.6021%" height="15" fill="rgb(241,35,35)"/><text x="70.3039%" y="175.50"></text></g><g><title>resolve_lifetimes (984,743 samples, 0.57%)</title><rect x="70.0879%" y="149" width="0.5681%" height="15" fill="rgb(243,32,47)"/><text x="70.3379%" y="159.50"></text></g><g><title>generics_of (1,442,247 samples, 0.83%)</title><rect x="69.9113%" y="181" width="0.8320%" height="15" fill="rgb(247,202,23)"/><text x="70.1613%" y="191.50"></text></g><g><title>explicit_predicates_of (467,696 samples, 0.27%)</title><rect x="70.9054%" y="149" width="0.2698%" height="15" fill="rgb(219,102,11)"/><text x="71.1554%" y="159.50"></text></g><g><title>predicates_of (1,359,934 samples, 0.78%)</title><rect x="70.7871%" y="181" width="0.7845%" height="15" fill="rgb(243,110,44)"/><text x="71.0371%" y="191.50"></text></g><g><title>predicates_defined_on (1,275,623 samples, 0.74%)</title><rect x="70.8358%" y="165" width="0.7359%" height="15" fill="rgb(222,74,54)"/><text x="71.0858%" y="175.50"></text></g><g><title>inferred_outlives_of (687,157 samples, 0.40%)</title><rect x="71.1752%" y="149" width="0.3964%" height="15" fill="rgb(216,99,12)"/><text x="71.4252%" y="159.50"></text></g><g><title>inferred_outlives_crate (650,397 samples, 0.38%)</title><rect x="71.1964%" y="133" width="0.3752%" height="15" fill="rgb(226,22,26)"/><text x="71.4464%" y="143.50"></text></g><g><title>type_of (361,732 samples, 0.21%)</title><rect x="71.3630%" y="117" width="0.2087%" height="15" fill="rgb(217,163,10)"/><text x="71.6130%" y="127.50"></text></g><g><title>type_collecting (4,088,926 samples, 2.36%)</title><rect x="69.3282%" y="213" width="2.3588%" height="15" fill="rgb(213,25,53)"/><text x="69.5782%" y="223.50">t..</text></g><g><title>collect_mod_item_types (4,078,055 samples, 2.35%)</title><rect x="69.3345%" y="197" width="2.3526%" height="15" fill="rgb(252,105,26)"/><text x="69.5845%" y="207.50">c..</text></g><g><title>type_of (200,020 samples, 0.12%)</title><rect x="71.5716%" y="181" width="0.1154%" height="15" fill="rgb(220,39,43)"/><text x="71.8216%" y="191.50"></text></g><g><title>evaluate_obligation (487,949 samples, 0.28%)</title><rect x="72.5611%" y="181" width="0.2815%" height="15" fill="rgb(229,68,48)"/><text x="72.8111%" y="191.50"></text></g><g><title>implied_outlives_bounds (200,591 samples, 0.12%)</title><rect x="72.8426%" y="181" width="0.1157%" height="15" fill="rgb(252,8,32)"/><text x="73.0926%" y="191.50"></text></g><g><title>param_env (201,181 samples, 0.12%)</title><rect x="72.9583%" y="181" width="0.1161%" height="15" fill="rgb(223,20,43)"/><text x="73.2083%" y="191.50"></text></g><g><title>region_scope_tree (442,944 samples, 0.26%)</title><rect x="73.1093%" y="181" width="0.2555%" height="15" fill="rgb(229,81,49)"/><text x="73.3593%" y="191.50"></text></g><g><title>check_impl_item_well_formed (2,809,917 samples, 1.62%)</title><rect x="71.7798%" y="197" width="1.6210%" height="15" fill="rgb(236,28,36)"/><text x="72.0298%" y="207.50"></text></g><g><title>adt_def (245,271 samples, 0.14%)</title><rect x="74.0756%" y="149" width="0.1415%" height="15" fill="rgb(249,185,26)"/><text x="74.3256%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (242,831 samples, 0.14%)</title><rect x="74.0770%" y="133" width="0.1401%" height="15" fill="rgb(249,174,33)"/><text x="74.3270%" y="143.50"></text></g><g><title>item_attrs (216,991 samples, 0.13%)</title><rect x="74.0919%" y="117" width="0.1252%" height="15" fill="rgb(233,201,37)"/><text x="74.3419%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (214,391 samples, 0.12%)</title><rect x="74.0934%" y="101" width="0.1237%" height="15" fill="rgb(221,78,26)"/><text x="74.3434%" y="111.50"></text></g><g><title>adt_sized_constraint (182,761 samples, 0.11%)</title><rect x="74.2236%" y="133" width="0.1054%" height="15" fill="rgb(250,127,30)"/><text x="74.4736%" y="143.50"></text></g><g><title>adt_sized_constraint (202,111 samples, 0.12%)</title><rect x="74.2171%" y="149" width="0.1166%" height="15" fill="rgb(230,49,44)"/><text x="74.4671%" y="159.50"></text></g><g><title>adt_sized_constraint (469,092 samples, 0.27%)</title><rect x="74.0689%" y="165" width="0.2706%" height="15" fill="rgb(229,67,23)"/><text x="74.3189%" y="175.50"></text></g><g><title>evaluate_obligation (575,404 samples, 0.33%)</title><rect x="74.0213%" y="181" width="0.3319%" height="15" fill="rgb(249,83,47)"/><text x="74.2713%" y="191.50"></text></g><g><title>param_env (213,185 samples, 0.12%)</title><rect x="74.4124%" y="181" width="0.1230%" height="15" fill="rgb(215,43,3)"/><text x="74.6624%" y="191.50"></text></g><g><title>analysis (128,726,803 samples, 74.26%)</title><rect x="0.3836%" y="245" width="74.2600%" height="15" fill="rgb(238,154,13)"/><text x="0.6336%" y="255.50">analysis</text></g><g><title>type_check_crate (95,321,094 samples, 54.99%)</title><rect x="19.6547%" y="229" width="54.9889%" height="15" fill="rgb(219,56,2)"/><text x="19.9047%" y="239.50">type_check_crate</text></g><g><title>wf_checking (5,118,976 samples, 2.95%)</title><rect x="71.6906%" y="213" width="2.9530%" height="15" fill="rgb(233,0,4)"/><text x="71.9406%" y="223.50">wf_..</text></g><g><title>check_item_well_formed (2,154,528 samples, 1.24%)</title><rect x="73.4007%" y="197" width="1.2429%" height="15" fill="rgb(235,30,7)"/><text x="73.6507%" y="207.50"></text></g><g><title>codegen_crate (411,695 samples, 0.24%)</title><rect x="74.6498%" y="245" width="0.2375%" height="15" fill="rgb(250,79,13)"/><text x="74.8998%" y="255.50"></text></g><g><title>AST_validation (186,162 samples, 0.11%)</title><rect x="75.0046%" y="229" width="0.1074%" height="15" fill="rgb(211,146,34)"/><text x="75.2546%" y="239.50"></text></g><g><title>macro_expand_crate (15,240,308 samples, 8.79%)</title><rect x="75.2187%" y="229" width="8.7918%" height="15" fill="rgb(228,22,38)"/><text x="75.4687%" y="239.50">macro_expand..</text></g><g><title>expand_crate (15,218,728 samples, 8.78%)</title><rect x="75.2312%" y="213" width="8.7794%" height="15" fill="rgb(235,168,5)"/><text x="75.4812%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,962,584 samples, 1.71%)</title><rect x="82.3015%" y="197" width="1.7091%" height="15" fill="rgb(221,155,16)"/><text x="82.5515%" y="207.50"></text></g><g><title>metadata_register_crate (940,073 samples, 0.54%)</title><rect x="83.4683%" y="181" width="0.5423%" height="15" fill="rgb(215,215,53)"/><text x="83.7183%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (289,723 samples, 0.17%)</title><rect x="84.0128%" y="229" width="0.1671%" height="15" fill="rgb(223,4,10)"/><text x="84.2628%" y="239.50"></text></g><g><title>late_resolve_crate (3,466,828 samples, 2.00%)</title><rect x="84.2710%" y="213" width="1.9999%" height="15" fill="rgb(234,103,6)"/><text x="84.5210%" y="223.50">l..</text></g><g><title>configure_and_expand (19,903,739 samples, 11.48%)</title><rect x="74.8873%" y="245" width="11.4821%" height="15" fill="rgb(227,97,0)"/><text x="75.1373%" y="255.50">configure_and_exp..</text></g><g><title>resolve_crate (3,795,291 samples, 2.19%)</title><rect x="84.1800%" y="229" width="2.1894%" height="15" fill="rgb(234,150,53)"/><text x="84.4300%" y="239.50">r..</text></g><g><title>drop_ast (269,333 samples, 0.16%)</title><rect x="86.3694%" y="245" width="0.1554%" height="15" fill="rgb(228,201,54)"/><text x="86.6194%" y="255.50"></text></g><g><title>early_lint_checks (580,577 samples, 0.33%)</title><rect x="86.5367%" y="245" width="0.3349%" height="15" fill="rgb(222,22,37)"/><text x="86.7867%" y="255.50"></text></g><g><title>free_global_ctxt (3,721,091 samples, 2.15%)</title><rect x="86.8716%" y="245" width="2.1466%" height="15" fill="rgb(237,53,32)"/><text x="87.1216%" y="255.50">f..</text></g><g><title>is_copy_raw (423,094 samples, 0.24%)</title><rect x="92.8180%" y="181" width="0.2441%" height="15" fill="rgb(233,25,53)"/><text x="93.0680%" y="191.50"></text></g><g><title>evaluate_obligation (316,563 samples, 0.18%)</title><rect x="92.8794%" y="165" width="0.1826%" height="15" fill="rgb(210,40,34)"/><text x="93.1294%" y="175.50"></text></g><g><title>needs_drop_raw (627,106 samples, 0.36%)</title><rect x="92.7018%" y="197" width="0.3618%" height="15" fill="rgb(241,220,44)"/><text x="92.9518%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,089,263 samples, 1.78%)</title><rect x="91.3478%" y="213" width="1.7821%" height="15" fill="rgb(235,28,35)"/><text x="91.5978%" y="223.50">m..</text></g><g><title>optimized_mir (5,677,391 samples, 3.28%)</title><rect x="89.8615%" y="229" width="3.2752%" height="15" fill="rgb(210,56,17)"/><text x="90.1115%" y="239.50">opt..</text></g><g><title>generate_crate_metadata (7,165,189 samples, 4.13%)</title><rect x="89.0182%" y="245" width="4.1335%" height="15" fill="rgb(224,130,29)"/><text x="89.2682%" y="255.50">gener..</text></g><g><title>hir_lowering (5,269,529 samples, 3.04%)</title><rect x="93.1517%" y="245" width="3.0399%" height="15" fill="rgb(235,212,8)"/><text x="93.4017%" y="255.50">hir..</text></g><g><title>parse_crate (4,921,305 samples, 2.84%)</title><rect x="96.2264%" y="245" width="2.8390%" height="15" fill="rgb(223,33,50)"/><text x="96.4764%" y="255.50">pa..</text></g><g><title>prepare_outputs (258,203 samples, 0.15%)</title><rect x="99.0702%" y="245" width="0.1490%" height="15" fill="rgb(219,149,13)"/><text x="99.3202%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (864,950 samples, 0.50%)</title><rect x="99.2191%" y="245" width="0.4990%" height="15" fill="rgb(250,156,29)"/><text x="99.4691%" y="255.50"></text></g><g><title>all (173,346,057 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(216,193,19)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (173,346,057 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(216,135,14)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (366,304 samples, 0.21%)</title><rect x="99.7887%" y="245" width="0.2113%" height="15" fill="rgb(241,47,5)"/><text x="100.0387%" y="255.50"></text></g></svg></svg>