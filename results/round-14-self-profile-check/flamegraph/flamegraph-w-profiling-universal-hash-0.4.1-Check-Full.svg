<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (73,950 samples, 0.20%)</title><rect x="7.8036%" y="197" width="0.1959%" height="15" fill="rgb(227,0,7)"/><text x="8.0536%" y="207.50"></text></g><g><title>evaluate_obligation (61,840 samples, 0.16%)</title><rect x="7.8357%" y="181" width="0.1638%" height="15" fill="rgb(217,0,24)"/><text x="8.0857%" y="191.50"></text></g><g><title>param_env (127,150 samples, 0.34%)</title><rect x="9.2031%" y="165" width="0.3369%" height="15" fill="rgb(221,193,54)"/><text x="9.4531%" y="175.50"></text></g><g><title>item_attrs (70,441 samples, 0.19%)</title><rect x="9.9660%" y="133" width="0.1866%" height="15" fill="rgb(248,212,6)"/><text x="10.2160%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (67,371 samples, 0.18%)</title><rect x="9.9741%" y="117" width="0.1785%" height="15" fill="rgb(208,68,35)"/><text x="10.2241%" y="127.50"></text></g><g><title>codegen_fn_attrs (108,154 samples, 0.29%)</title><rect x="9.8841%" y="149" width="0.2866%" height="15" fill="rgb(232,128,0)"/><text x="10.1341%" y="159.50"></text></g><g><title>adt_drop_tys (64,961 samples, 0.17%)</title><rect x="11.7023%" y="117" width="0.1721%" height="15" fill="rgb(207,160,47)"/><text x="11.9523%" y="127.50"></text></g><g><title>explicit_predicates_of (69,901 samples, 0.19%)</title><rect x="12.7653%" y="53" width="0.1852%" height="15" fill="rgb(228,23,34)"/><text x="13.0153%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (68,191 samples, 0.18%)</title><rect x="12.7698%" y="37" width="0.1807%" height="15" fill="rgb(218,30,26)"/><text x="13.0198%" y="47.50"></text></g><g><title>is_copy_raw (409,133 samples, 1.08%)</title><rect x="11.8744%" y="117" width="1.0840%" height="15" fill="rgb(220,122,19)"/><text x="12.1244%" y="127.50"></text></g><g><title>evaluate_obligation (369,292 samples, 0.98%)</title><rect x="11.9800%" y="101" width="0.9784%" height="15" fill="rgb(250,228,42)"/><text x="12.2300%" y="111.50"></text></g><g><title>predicates_of (89,021 samples, 0.24%)</title><rect x="12.7225%" y="85" width="0.2359%" height="15" fill="rgb(240,193,28)"/><text x="12.9725%" y="95.50"></text></g><g><title>predicates_defined_on (78,771 samples, 0.21%)</title><rect x="12.7497%" y="69" width="0.2087%" height="15" fill="rgb(216,20,37)"/><text x="12.9997%" y="79.50"></text></g><g><title>needs_drop_raw (516,974 samples, 1.37%)</title><rect x="11.6107%" y="133" width="1.3697%" height="15" fill="rgb(206,188,39)"/><text x="11.8607%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (268,694 samples, 0.71%)</title><rect x="13.2393%" y="117" width="0.7119%" height="15" fill="rgb(217,207,13)"/><text x="13.4893%" y="127.50"></text></g><g><title>impl_parent (74,292 samples, 0.20%)</title><rect x="14.3282%" y="101" width="0.1968%" height="15" fill="rgb(231,73,38)"/><text x="14.5782%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (47,752 samples, 0.13%)</title><rect x="14.3985%" y="85" width="0.1265%" height="15" fill="rgb(225,20,46)"/><text x="14.6485%" y="95.50"></text></g><g><title>specialization_graph_of (352,454 samples, 0.93%)</title><rect x="14.0265%" y="117" width="0.9338%" height="15" fill="rgb(210,31,41)"/><text x="14.2765%" y="127.50"></text></g><g><title>impl_trait_ref (164,291 samples, 0.44%)</title><rect x="14.5250%" y="101" width="0.4353%" height="15" fill="rgb(221,200,47)"/><text x="14.7750%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (137,711 samples, 0.36%)</title><rect x="14.5954%" y="85" width="0.3649%" height="15" fill="rgb(226,26,5)"/><text x="14.8454%" y="95.50"></text></g><g><title>resolve_instance (769,479 samples, 2.04%)</title><rect x="12.9804%" y="133" width="2.0387%" height="15" fill="rgb(249,33,26)"/><text x="13.2304%" y="143.50">r..</text></g><g><title>thir_body (179,541 samples, 0.48%)</title><rect x="15.0417%" y="133" width="0.4757%" height="15" fill="rgb(235,183,28)"/><text x="15.2917%" y="143.50"></text></g><g><title>mir_const (2,649,317 samples, 7.02%)</title><rect x="8.5504%" y="181" width="7.0193%" height="15" fill="rgb(221,5,38)"/><text x="8.8004%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (2,275,834 samples, 6.03%)</title><rect x="9.5400%" y="165" width="6.0298%" height="15" fill="rgb(247,18,42)"/><text x="9.7900%" y="175.50">unsafety..</text></g><g><title>mir_built (2,037,798 samples, 5.40%)</title><rect x="10.1707%" y="149" width="5.3991%" height="15" fill="rgb(241,131,45)"/><text x="10.4207%" y="159.50">mir_bui..</text></g><g><title>mir_promoted (2,871,460 samples, 7.61%)</title><rect x="7.9996%" y="197" width="7.6079%" height="15" fill="rgb(249,31,29)"/><text x="8.2496%" y="207.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (151,951 samples, 0.40%)</title><rect x="15.6074%" y="197" width="0.4026%" height="15" fill="rgb(225,111,53)"/><text x="15.8574%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (223,773 samples, 0.59%)</title><rect x="16.0100%" y="197" width="0.5929%" height="15" fill="rgb(238,160,17)"/><text x="16.2600%" y="207.50"></text></g><g><title>normalize_projection_ty (133,943 samples, 0.35%)</title><rect x="16.2480%" y="181" width="0.3549%" height="15" fill="rgb(214,148,48)"/><text x="16.4980%" y="191.50"></text></g><g><title>type_op_normalize_predicate (45,332 samples, 0.12%)</title><rect x="16.6029%" y="197" width="0.1201%" height="15" fill="rgb(232,36,49)"/><text x="16.8529%" y="207.50"></text></g><g><title>type_op_normalize_ty (51,310 samples, 0.14%)</title><rect x="16.7230%" y="197" width="0.1359%" height="15" fill="rgb(209,103,24)"/><text x="16.9730%" y="207.50"></text></g><g><title>type_op_prove_predicate (745,354 samples, 1.97%)</title><rect x="16.8590%" y="197" width="1.9748%" height="15" fill="rgb(229,88,8)"/><text x="17.1090%" y="207.50">t..</text></g><g><title>MIR_borrow_checking (6,573,823 samples, 17.42%)</title><rect x="1.4197%" y="229" width="17.4172%" height="15" fill="rgb(213,181,19)"/><text x="1.6697%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,541,623 samples, 17.33%)</title><rect x="1.5051%" y="213" width="17.3319%" height="15" fill="rgb(254,191,54)"/><text x="1.7551%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (97,261 samples, 0.26%)</title><rect x="18.8559%" y="229" width="0.2577%" height="15" fill="rgb(241,83,37)"/><text x="19.1059%" y="239.50"></text></g><g><title>get_lang_items (48,191 samples, 0.13%)</title><rect x="19.4977%" y="181" width="0.1277%" height="15" fill="rgb(233,36,39)"/><text x="19.7477%" y="191.50"></text></g><g><title>codegen_fn_attrs (68,301 samples, 0.18%)</title><rect x="19.8095%" y="165" width="0.1810%" height="15" fill="rgb(226,3,54)"/><text x="20.0595%" y="175.50"></text></g><g><title>should_inherit_track_caller (140,432 samples, 0.37%)</title><rect x="19.6254%" y="181" width="0.3721%" height="15" fill="rgb(245,192,40)"/><text x="19.8754%" y="191.50"></text></g><g><title>codegen_fn_attrs (252,654 samples, 0.67%)</title><rect x="19.3711%" y="197" width="0.6694%" height="15" fill="rgb(238,167,29)"/><text x="19.6211%" y="207.50"></text></g><g><title>check_mod_attrs (333,794 samples, 0.88%)</title><rect x="19.1569%" y="213" width="0.8844%" height="15" fill="rgb(232,182,51)"/><text x="19.4069%" y="223.50"></text></g><g><title>lookup_deprecation_entry (59,901 samples, 0.16%)</title><rect x="20.3557%" y="197" width="0.1587%" height="15" fill="rgb(231,60,39)"/><text x="20.6057%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (151,741 samples, 0.40%)</title><rect x="20.2041%" y="213" width="0.4020%" height="15" fill="rgb(208,69,12)"/><text x="20.4541%" y="223.50"></text></g><g><title>misc_checking_1 (595,237 samples, 1.58%)</title><rect x="19.1148%" y="229" width="1.5771%" height="15" fill="rgb(235,93,37)"/><text x="19.3648%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (111,241 samples, 0.29%)</title><rect x="20.6956%" y="213" width="0.2947%" height="15" fill="rgb(213,116,39)"/><text x="20.9456%" y="223.50"></text></g><g><title>check_mod_liveness (87,001 samples, 0.23%)</title><rect x="20.7598%" y="197" width="0.2305%" height="15" fill="rgb(222,207,29)"/><text x="21.0098%" y="207.50"></text></g><g><title>misc_checking_2 (252,853 samples, 0.67%)</title><rect x="20.6918%" y="229" width="0.6699%" height="15" fill="rgb(206,96,30)"/><text x="20.9418%" y="239.50"></text></g><g><title>match_checking (140,182 samples, 0.37%)</title><rect x="20.9903%" y="213" width="0.3714%" height="15" fill="rgb(218,138,4)"/><text x="21.2403%" y="223.50"></text></g><g><title>check_match (132,202 samples, 0.35%)</title><rect x="21.0115%" y="197" width="0.3503%" height="15" fill="rgb(250,191,14)"/><text x="21.2615%" y="207.50"></text></g><g><title>check_private_in_public (75,261 samples, 0.20%)</title><rect x="21.3838%" y="213" width="0.1994%" height="15" fill="rgb(239,60,40)"/><text x="21.6338%" y="223.50"></text></g><g><title>death_checking (251,653 samples, 0.67%)</title><rect x="21.5832%" y="213" width="0.6668%" height="15" fill="rgb(206,27,48)"/><text x="21.8332%" y="223.50"></text></g><g><title>item_attrs (127,961 samples, 0.34%)</title><rect x="21.9109%" y="197" width="0.3390%" height="15" fill="rgb(225,35,8)"/><text x="22.1609%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (126,471 samples, 0.34%)</title><rect x="21.9149%" y="181" width="0.3351%" height="15" fill="rgb(250,213,24)"/><text x="22.1649%" y="191.50"></text></g><g><title>param_env (77,400 samples, 0.21%)</title><rect x="22.9302%" y="181" width="0.2051%" height="15" fill="rgb(247,123,22)"/><text x="23.1802%" y="191.50"></text></g><g><title>crate_lints (660,237 samples, 1.75%)</title><rect x="22.2536%" y="197" width="1.7493%" height="15" fill="rgb(231,138,38)"/><text x="22.5036%" y="207.50"></text></g><g><title>type_of (324,594 samples, 0.86%)</title><rect x="23.1429%" y="181" width="0.8600%" height="15" fill="rgb(231,145,46)"/><text x="23.3929%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (244,024 samples, 0.65%)</title><rect x="23.3564%" y="165" width="0.6465%" height="15" fill="rgb(251,118,11)"/><text x="23.6064%" y="175.50"></text></g><g><title>lint_checking (739,928 samples, 1.96%)</title><rect x="22.2500%" y="213" width="1.9604%" height="15" fill="rgb(217,147,25)"/><text x="22.5000%" y="223.50">l..</text></g><g><title>module_lints (78,311 samples, 0.21%)</title><rect x="24.0029%" y="197" width="0.2075%" height="15" fill="rgb(247,81,37)"/><text x="24.2529%" y="207.50"></text></g><g><title>lint_mod (76,611 samples, 0.20%)</title><rect x="24.0074%" y="181" width="0.2030%" height="15" fill="rgb(209,12,38)"/><text x="24.2574%" y="191.50"></text></g><g><title>privacy_access_levels (101,011 samples, 0.27%)</title><rect x="24.2104%" y="213" width="0.2676%" height="15" fill="rgb(227,1,9)"/><text x="24.4604%" y="223.50"></text></g><g><title>privacy_checking_modules (224,553 samples, 0.59%)</title><rect x="24.4780%" y="213" width="0.5949%" height="15" fill="rgb(248,47,43)"/><text x="24.7280%" y="223.50"></text></g><g><title>check_mod_privacy (223,113 samples, 0.59%)</title><rect x="24.4818%" y="197" width="0.5911%" height="15" fill="rgb(221,10,30)"/><text x="24.7318%" y="207.50"></text></g><g><title>misc_checking_3 (1,416,326 samples, 3.75%)</title><rect x="21.3618%" y="229" width="3.7525%" height="15" fill="rgb(210,229,1)"/><text x="21.6118%" y="239.50">misc..</text></g><g><title>adt_destructor (47,820 samples, 0.13%)</title><rect x="25.2894%" y="181" width="0.1267%" height="15" fill="rgb(222,148,37)"/><text x="25.5394%" y="191.50"></text></g><g><title>coherent_trait (41,430 samples, 0.11%)</title><rect x="25.3063%" y="165" width="0.1098%" height="15" fill="rgb(234,67,33)"/><text x="25.5563%" y="175.50"></text></g><g><title>specialization_graph_of (40,550 samples, 0.11%)</title><rect x="25.3087%" y="149" width="0.1074%" height="15" fill="rgb(247,98,35)"/><text x="25.5587%" y="159.50"></text></g><g><title>impl_parent (1,014,498 samples, 2.69%)</title><rect x="30.2100%" y="165" width="2.6879%" height="15" fill="rgb(247,138,52)"/><text x="30.4600%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (596,207 samples, 1.58%)</title><rect x="31.3183%" y="149" width="1.5796%" height="15" fill="rgb(213,79,30)"/><text x="31.5683%" y="159.50"></text></g><g><title>impl_trait_ref (2,022,819 samples, 5.36%)</title><rect x="32.8979%" y="165" width="5.3594%" height="15" fill="rgb(246,177,23)"/><text x="33.1479%" y="175.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,529,816 samples, 4.05%)</title><rect x="34.2041%" y="149" width="4.0532%" height="15" fill="rgb(230,62,27)"/><text x="34.4541%" y="159.50">meta..</text></g><g><title>trait_impls_of (353,403 samples, 0.94%)</title><rect x="38.3107%" y="165" width="0.9363%" height="15" fill="rgb(216,154,8)"/><text x="38.5607%" y="175.50"></text></g><g><title>implementations_of_trait (87,871 samples, 0.23%)</title><rect x="39.0142%" y="149" width="0.2328%" height="15" fill="rgb(244,35,45)"/><text x="39.2642%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (73,541 samples, 0.19%)</title><rect x="39.0522%" y="133" width="0.1948%" height="15" fill="rgb(251,115,12)"/><text x="39.3022%" y="143.50"></text></g><g><title>coherent_trait (5,291,218 samples, 14.02%)</title><rect x="25.2299%" y="197" width="14.0190%" height="15" fill="rgb(240,54,50)"/><text x="25.4799%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (5,194,507 samples, 13.76%)</title><rect x="25.4861%" y="181" width="13.7628%" height="15" fill="rgb(233,84,52)"/><text x="25.7361%" y="191.50">specialization_graph_..</text></g><g><title>coherence_checking (5,341,228 samples, 14.15%)</title><rect x="25.1849%" y="213" width="14.1515%" height="15" fill="rgb(207,117,47)"/><text x="25.4349%" y="223.50">coherence_checking</text></g><g><title>associated_item (186,892 samples, 0.50%)</title><rect x="51.3296%" y="149" width="0.4952%" height="15" fill="rgb(249,43,39)"/><text x="51.5796%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (153,361 samples, 0.41%)</title><rect x="51.4185%" y="133" width="0.4063%" height="15" fill="rgb(209,38,44)"/><text x="51.6685%" y="143.50"></text></g><g><title>associated_items (490,546 samples, 1.30%)</title><rect x="50.5648%" y="165" width="1.2997%" height="15" fill="rgb(236,212,23)"/><text x="50.8148%" y="175.50"></text></g><g><title>adt_dtorck_constraint (52,930 samples, 0.14%)</title><rect x="52.2040%" y="149" width="0.1402%" height="15" fill="rgb(242,79,21)"/><text x="52.4540%" y="159.50"></text></g><g><title>dropck_outlives (199,380 samples, 0.53%)</title><rect x="51.9464%" y="165" width="0.5283%" height="15" fill="rgb(211,96,35)"/><text x="52.1964%" y="175.50"></text></g><g><title>normalize_projection_ty (49,230 samples, 0.13%)</title><rect x="52.3442%" y="149" width="0.1304%" height="15" fill="rgb(253,215,40)"/><text x="52.5942%" y="159.50"></text></g><g><title>adt_def (48,171 samples, 0.13%)</title><rect x="53.6745%" y="133" width="0.1276%" height="15" fill="rgb(211,81,21)"/><text x="53.9245%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (46,811 samples, 0.12%)</title><rect x="53.6781%" y="117" width="0.1240%" height="15" fill="rgb(208,190,38)"/><text x="53.9281%" y="127.50"></text></g><g><title>adt_sized_constraint (56,311 samples, 0.15%)</title><rect x="53.6574%" y="149" width="0.1492%" height="15" fill="rgb(235,213,38)"/><text x="53.9074%" y="159.50"></text></g><g><title>explicit_predicates_of (40,140 samples, 0.11%)</title><rect x="54.0385%" y="117" width="0.1064%" height="15" fill="rgb(237,122,38)"/><text x="54.2885%" y="127.50"></text></g><g><title>predicates_of (83,632 samples, 0.22%)</title><rect x="53.9517%" y="149" width="0.2216%" height="15" fill="rgb(244,218,35)"/><text x="54.2017%" y="159.50"></text></g><g><title>predicates_defined_on (62,740 samples, 0.17%)</title><rect x="54.0070%" y="133" width="0.1662%" height="15" fill="rgb(240,68,47)"/><text x="54.2570%" y="143.50"></text></g><g><title>evaluate_obligation (719,220 samples, 1.91%)</title><rect x="52.4746%" y="165" width="1.9056%" height="15" fill="rgb(210,16,53)"/><text x="52.7246%" y="175.50">e..</text></g><g><title>trait_impls_of (73,902 samples, 0.20%)</title><rect x="54.1844%" y="149" width="0.1958%" height="15" fill="rgb(235,124,12)"/><text x="54.4344%" y="159.50"></text></g><g><title>fn_sig (130,793 samples, 0.35%)</title><rect x="54.4351%" y="165" width="0.3465%" height="15" fill="rgb(224,169,11)"/><text x="54.6851%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (124,273 samples, 0.33%)</title><rect x="54.4523%" y="149" width="0.3293%" height="15" fill="rgb(250,166,2)"/><text x="54.7023%" y="159.50"></text></g><g><title>generics_of (63,240 samples, 0.17%)</title><rect x="54.7816%" y="165" width="0.1676%" height="15" fill="rgb(242,216,29)"/><text x="55.0316%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (48,190 samples, 0.13%)</title><rect x="54.8215%" y="149" width="0.1277%" height="15" fill="rgb(230,116,27)"/><text x="55.0715%" y="159.50"></text></g><g><title>associated_item (78,760 samples, 0.21%)</title><rect x="55.0011%" y="133" width="0.2087%" height="15" fill="rgb(228,99,48)"/><text x="55.2511%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (73,240 samples, 0.19%)</title><rect x="55.0157%" y="117" width="0.1940%" height="15" fill="rgb(253,11,6)"/><text x="55.2657%" y="127.50"></text></g><g><title>impl_item_implementor_ids (108,050 samples, 0.29%)</title><rect x="54.9491%" y="165" width="0.2863%" height="15" fill="rgb(247,143,39)"/><text x="55.1991%" y="175.50"></text></g><g><title>associated_items (100,740 samples, 0.27%)</title><rect x="54.9685%" y="149" width="0.2669%" height="15" fill="rgb(236,97,10)"/><text x="55.2185%" y="159.50"></text></g><g><title>item_attrs (38,820 samples, 0.10%)</title><rect x="55.3758%" y="165" width="0.1029%" height="15" fill="rgb(233,208,19)"/><text x="55.6258%" y="175.50"></text></g><g><title>method_autoderef_steps (276,211 samples, 0.73%)</title><rect x="55.5465%" y="165" width="0.7318%" height="15" fill="rgb(216,164,2)"/><text x="55.7965%" y="175.50"></text></g><g><title>evaluate_obligation (129,770 samples, 0.34%)</title><rect x="55.9345%" y="149" width="0.3438%" height="15" fill="rgb(220,129,5)"/><text x="56.1845%" y="159.50"></text></g><g><title>explicit_predicates_of (47,670 samples, 0.13%)</title><rect x="56.6433%" y="133" width="0.1263%" height="15" fill="rgb(242,17,10)"/><text x="56.8933%" y="143.50"></text></g><g><title>predicates_of (175,590 samples, 0.47%)</title><rect x="56.3564%" y="165" width="0.4652%" height="15" fill="rgb(242,107,0)"/><text x="56.6064%" y="175.50"></text></g><g><title>predicates_defined_on (111,040 samples, 0.29%)</title><rect x="56.5275%" y="149" width="0.2942%" height="15" fill="rgb(251,28,31)"/><text x="56.7775%" y="159.50"></text></g><g><title>type_of (40,881 samples, 0.11%)</title><rect x="56.8756%" y="165" width="0.1083%" height="15" fill="rgb(233,223,10)"/><text x="57.1256%" y="175.50"></text></g><g><title>item_bodies_checking (6,668,784 samples, 17.67%)</title><rect x="39.3833%" y="213" width="17.6688%" height="15" fill="rgb(215,21,27)"/><text x="39.6333%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (6,666,854 samples, 17.66%)</title><rect x="39.3884%" y="197" width="17.6637%" height="15" fill="rgb(232,23,21)"/><text x="39.6384%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (6,645,814 samples, 17.61%)</title><rect x="39.4441%" y="181" width="17.6080%" height="15" fill="rgb(244,5,23)"/><text x="39.6941%" y="191.50">typeck</text></g><g><title>item_types_checking (341,224 samples, 0.90%)</title><rect x="57.0521%" y="213" width="0.9041%" height="15" fill="rgb(226,81,46)"/><text x="57.3021%" y="223.50"></text></g><g><title>check_mod_item_types (339,224 samples, 0.90%)</title><rect x="57.0574%" y="197" width="0.8988%" height="15" fill="rgb(247,70,30)"/><text x="57.3074%" y="207.50"></text></g><g><title>fn_sig (111,222 samples, 0.29%)</title><rect x="58.2870%" y="181" width="0.2947%" height="15" fill="rgb(212,68,19)"/><text x="58.5370%" y="191.50"></text></g><g><title>type_of (41,690 samples, 0.11%)</title><rect x="58.4713%" y="165" width="0.1105%" height="15" fill="rgb(240,187,13)"/><text x="58.7213%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (40,460 samples, 0.11%)</title><rect x="58.4745%" y="149" width="0.1072%" height="15" fill="rgb(223,113,26)"/><text x="58.7245%" y="159.50"></text></g><g><title>named_region_map (88,010 samples, 0.23%)</title><rect x="58.7661%" y="165" width="0.2332%" height="15" fill="rgb(206,192,2)"/><text x="59.0161%" y="175.50"></text></g><g><title>resolve_lifetimes (79,340 samples, 0.21%)</title><rect x="58.7890%" y="149" width="0.2102%" height="15" fill="rgb(241,108,4)"/><text x="59.0390%" y="159.50"></text></g><g><title>lint_levels (44,870 samples, 0.12%)</title><rect x="58.8804%" y="133" width="0.1189%" height="15" fill="rgb(247,173,49)"/><text x="59.1304%" y="143.50"></text></g><g><title>generics_of (175,012 samples, 0.46%)</title><rect x="58.5817%" y="181" width="0.4637%" height="15" fill="rgb(224,114,35)"/><text x="58.8317%" y="191.50"></text></g><g><title>late_bound_vars_map (41,451 samples, 0.11%)</title><rect x="59.3653%" y="149" width="0.1098%" height="15" fill="rgb(245,159,27)"/><text x="59.6153%" y="159.50"></text></g><g><title>resolve_lifetimes (38,171 samples, 0.10%)</title><rect x="59.3739%" y="133" width="0.1011%" height="15" fill="rgb(245,172,44)"/><text x="59.6239%" y="143.50"></text></g><g><title>explicit_item_bounds (53,531 samples, 0.14%)</title><rect x="59.3344%" y="165" width="0.1418%" height="15" fill="rgb(236,23,11)"/><text x="59.5844%" y="175.50"></text></g><g><title>item_bounds (135,491 samples, 0.36%)</title><rect x="59.1381%" y="181" width="0.3590%" height="15" fill="rgb(205,117,38)"/><text x="59.3881%" y="191.50"></text></g><g><title>late_bound_vars_map (66,651 samples, 0.18%)</title><rect x="59.8996%" y="133" width="0.1766%" height="15" fill="rgb(237,72,25)"/><text x="60.1496%" y="143.50"></text></g><g><title>resolve_lifetimes (60,621 samples, 0.16%)</title><rect x="59.9156%" y="117" width="0.1606%" height="15" fill="rgb(244,70,9)"/><text x="60.1656%" y="127.50"></text></g><g><title>explicit_predicates_of (179,442 samples, 0.48%)</title><rect x="59.6399%" y="149" width="0.4754%" height="15" fill="rgb(217,125,39)"/><text x="59.8899%" y="159.50"></text></g><g><title>predicates_of (344,714 samples, 0.91%)</title><rect x="59.4971%" y="181" width="0.9133%" height="15" fill="rgb(235,36,10)"/><text x="59.7471%" y="191.50"></text></g><g><title>predicates_defined_on (325,614 samples, 0.86%)</title><rect x="59.5477%" y="165" width="0.8627%" height="15" fill="rgb(251,123,47)"/><text x="59.7977%" y="175.50"></text></g><g><title>inferred_outlives_of (111,391 samples, 0.30%)</title><rect x="60.1153%" y="149" width="0.2951%" height="15" fill="rgb(221,13,13)"/><text x="60.3653%" y="159.50"></text></g><g><title>inferred_outlives_crate (98,571 samples, 0.26%)</title><rect x="60.1493%" y="133" width="0.2612%" height="15" fill="rgb(238,131,9)"/><text x="60.3993%" y="143.50"></text></g><g><title>type_of (62,171 samples, 0.16%)</title><rect x="60.2457%" y="117" width="0.1647%" height="15" fill="rgb(211,50,8)"/><text x="60.4957%" y="127.50"></text></g><g><title>super_predicates_of (66,541 samples, 0.18%)</title><rect x="60.4104%" y="181" width="0.1763%" height="15" fill="rgb(245,182,24)"/><text x="60.6604%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (56,861 samples, 0.15%)</title><rect x="60.4361%" y="165" width="0.1507%" height="15" fill="rgb(242,14,37)"/><text x="60.6861%" y="175.50"></text></g><g><title>type_collecting (1,105,052 samples, 2.93%)</title><rect x="57.9620%" y="213" width="2.9278%" height="15" fill="rgb(246,228,12)"/><text x="58.2120%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (1,098,362 samples, 2.91%)</title><rect x="57.9797%" y="197" width="2.9101%" height="15" fill="rgb(213,55,15)"/><text x="58.2297%" y="207.50">co..</text></g><g><title>type_of (114,400 samples, 0.30%)</title><rect x="60.5867%" y="181" width="0.3031%" height="15" fill="rgb(209,9,3)"/><text x="60.8367%" y="191.50"></text></g><g><title>evaluate_obligation (111,361 samples, 0.30%)</title><rect x="62.2632%" y="181" width="0.2950%" height="15" fill="rgb(230,59,30)"/><text x="62.5132%" y="191.50"></text></g><g><title>implied_outlives_bounds (46,090 samples, 0.12%)</title><rect x="62.5583%" y="181" width="0.1221%" height="15" fill="rgb(209,121,21)"/><text x="62.8083%" y="191.50"></text></g><g><title>param_env (74,982 samples, 0.20%)</title><rect x="62.6804%" y="181" width="0.1987%" height="15" fill="rgb(220,109,13)"/><text x="62.9304%" y="191.50"></text></g><g><title>check_impl_item_well_formed (735,940 samples, 1.95%)</title><rect x="61.0714%" y="197" width="1.9499%" height="15" fill="rgb(232,18,1)"/><text x="61.3214%" y="207.50">c..</text></g><g><title>region_scope_tree (43,691 samples, 0.12%)</title><rect x="62.9055%" y="181" width="0.1158%" height="15" fill="rgb(215,41,42)"/><text x="63.1555%" y="191.50"></text></g><g><title>evaluate_obligation (77,390 samples, 0.21%)</title><rect x="64.9826%" y="181" width="0.2050%" height="15" fill="rgb(224,123,36)"/><text x="65.2326%" y="191.50"></text></g><g><title>param_env (116,301 samples, 0.31%)</title><rect x="65.2940%" y="181" width="0.3081%" height="15" fill="rgb(240,125,3)"/><text x="65.5440%" y="191.50"></text></g><g><title>predicates_of (62,891 samples, 0.17%)</title><rect x="65.6021%" y="181" width="0.1666%" height="15" fill="rgb(205,98,50)"/><text x="65.8521%" y="191.50"></text></g><g><title>predicates_defined_on (43,690 samples, 0.12%)</title><rect x="65.6530%" y="165" width="0.1158%" height="15" fill="rgb(205,185,37)"/><text x="65.9030%" y="175.50"></text></g><g><title>check_item_well_formed (1,094,109 samples, 2.90%)</title><rect x="63.0212%" y="197" width="2.8988%" height="15" fill="rgb(238,207,15)"/><text x="63.2712%" y="207.50">ch..</text></g><g><title>evaluate_obligation (97,392 samples, 0.26%)</title><rect x="67.0831%" y="181" width="0.2580%" height="15" fill="rgb(213,199,42)"/><text x="67.3331%" y="191.50"></text></g><g><title>implied_outlives_bounds (108,472 samples, 0.29%)</title><rect x="67.3412%" y="181" width="0.2874%" height="15" fill="rgb(235,201,11)"/><text x="67.5912%" y="191.50"></text></g><g><title>param_env (58,330 samples, 0.15%)</title><rect x="67.6305%" y="181" width="0.1545%" height="15" fill="rgb(207,46,11)"/><text x="67.8805%" y="191.50"></text></g><g><title>analysis (25,235,610 samples, 66.86%)</title><rect x="1.0966%" y="245" width="66.8613%" height="15" fill="rgb(241,35,35)"/><text x="1.3466%" y="255.50">analysis</text></g><g><title>type_check_crate (16,170,579 samples, 42.84%)</title><rect x="25.1143%" y="229" width="42.8437%" height="15" fill="rgb(243,32,47)"/><text x="25.3643%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,666,320 samples, 7.06%)</title><rect x="60.8936%" y="213" width="7.0644%" height="15" fill="rgb(247,202,23)"/><text x="61.1436%" y="223.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (769,169 samples, 2.04%)</title><rect x="65.9201%" y="197" width="2.0379%" height="15" fill="rgb(219,102,11)"/><text x="66.1701%" y="207.50">c..</text></g><g><title>codegen_crate (274,873 samples, 0.73%)</title><rect x="67.9762%" y="245" width="0.7283%" height="15" fill="rgb(243,110,44)"/><text x="68.2262%" y="255.50"></text></g><g><title>AST_validation (63,811 samples, 0.17%)</title><rect x="69.0463%" y="229" width="0.1691%" height="15" fill="rgb(222,74,54)"/><text x="69.2963%" y="239.50"></text></g><g><title>crate_injection (49,231 samples, 0.13%)</title><rect x="69.2869%" y="229" width="0.1304%" height="15" fill="rgb(216,99,12)"/><text x="69.5369%" y="239.50"></text></g><g><title>metadata_load_macro (57,520 samples, 0.15%)</title><rect x="84.1726%" y="197" width="0.1524%" height="15" fill="rgb(226,22,26)"/><text x="84.4226%" y="207.50"></text></g><g><title>macro_expand_crate (5,804,964 samples, 15.38%)</title><rect x="69.4173%" y="229" width="15.3802%" height="15" fill="rgb(217,163,10)"/><text x="69.6673%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (5,790,154 samples, 15.34%)</title><rect x="69.4566%" y="213" width="15.3409%" height="15" fill="rgb(213,25,53)"/><text x="69.7066%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (178,322 samples, 0.47%)</title><rect x="84.3250%" y="197" width="0.4725%" height="15" fill="rgb(252,105,26)"/><text x="84.5750%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (86,271 samples, 0.23%)</title><rect x="84.8054%" y="229" width="0.2286%" height="15" fill="rgb(220,39,43)"/><text x="85.0554%" y="239.50"></text></g><g><title>finalize_macro_resolutions (114,382 samples, 0.30%)</title><rect x="85.1122%" y="213" width="0.3031%" height="15" fill="rgb(229,68,48)"/><text x="85.3622%" y="223.50"></text></g><g><title>late_resolve_crate (475,445 samples, 1.26%)</title><rect x="85.4153%" y="213" width="1.2597%" height="15" fill="rgb(252,8,32)"/><text x="85.6653%" y="223.50"></text></g><g><title>configure_and_expand (6,825,206 samples, 18.08%)</title><rect x="68.7045%" y="245" width="18.0833%" height="15" fill="rgb(223,20,43)"/><text x="68.9545%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (661,927 samples, 1.75%)</title><rect x="85.0340%" y="229" width="1.7538%" height="15" fill="rgb(229,81,49)"/><text x="85.2840%" y="239.50"></text></g><g><title>drop_ast (49,171 samples, 0.13%)</title><rect x="86.7877%" y="245" width="0.1303%" height="15" fill="rgb(236,28,36)"/><text x="87.0377%" y="255.50"></text></g><g><title>early_lint_checks (117,481 samples, 0.31%)</title><rect x="86.9608%" y="245" width="0.3113%" height="15" fill="rgb(249,185,26)"/><text x="87.2108%" y="255.50"></text></g><g><title>free_global_ctxt (1,529,606 samples, 4.05%)</title><rect x="87.2720%" y="245" width="4.0527%" height="15" fill="rgb(249,174,33)"/><text x="87.5220%" y="255.50">free..</text></g><g><title>crate_hash (68,950 samples, 0.18%)</title><rect x="92.2504%" y="229" width="0.1827%" height="15" fill="rgb(233,201,37)"/><text x="92.5004%" y="239.50"></text></g><g><title>generate_crate_metadata (482,975 samples, 1.28%)</title><rect x="91.3247%" y="245" width="1.2796%" height="15" fill="rgb(221,78,26)"/><text x="91.5747%" y="255.50"></text></g><g><title>hir_lowering (732,948 samples, 1.94%)</title><rect x="92.6043%" y="245" width="1.9419%" height="15" fill="rgb(250,127,30)"/><text x="92.8543%" y="255.50">h..</text></g><g><title>link (42,180 samples, 0.11%)</title><rect x="94.5463%" y="245" width="0.1118%" height="15" fill="rgb(230,49,44)"/><text x="94.7963%" y="255.50"></text></g><g><title>parse_crate (1,023,971 samples, 2.71%)</title><rect x="94.6580%" y="245" width="2.7130%" height="15" fill="rgb(229,67,23)"/><text x="94.9080%" y="255.50">pa..</text></g><g><title>prepare_outputs (163,341 samples, 0.43%)</title><rect x="97.3856%" y="245" width="0.4328%" height="15" fill="rgb(249,83,47)"/><text x="97.6356%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (459,816 samples, 1.22%)</title><rect x="97.8183%" y="245" width="1.2183%" height="15" fill="rgb(215,43,3)"/><text x="98.0683%" y="255.50"></text></g><g><title>setup_global_ctxt (74,861 samples, 0.20%)</title><rect x="99.0729%" y="245" width="0.1983%" height="15" fill="rgb(238,154,13)"/><text x="99.3229%" y="255.50"></text></g><g><title>all (37,743,208 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (37,743,208 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (275,063 samples, 0.73%)</title><rect x="99.2712%" y="245" width="0.7288%" height="15" fill="rgb(235,30,7)"/><text x="99.5212%" y="255.50"></text></g></svg></svg>