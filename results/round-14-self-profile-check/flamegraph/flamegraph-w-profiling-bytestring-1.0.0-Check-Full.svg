<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (171,621 samples, 0.13%)</title><rect x="12.1765%" y="133" width="0.1259%" height="15" fill="rgb(227,0,7)"/><text x="12.4265%" y="143.50"></text></g><g><title>needs_drop_raw (476,224 samples, 0.35%)</title><rect x="15.9170%" y="69" width="0.3493%" height="15" fill="rgb(217,0,24)"/><text x="16.1670%" y="79.50"></text></g><g><title>is_copy_raw (417,294 samples, 0.31%)</title><rect x="15.9602%" y="53" width="0.3061%" height="15" fill="rgb(221,193,54)"/><text x="16.2102%" y="63.50"></text></g><g><title>evaluate_obligation (380,974 samples, 0.28%)</title><rect x="15.9868%" y="37" width="0.2795%" height="15" fill="rgb(248,212,6)"/><text x="16.2368%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,020,816 samples, 0.75%)</title><rect x="16.5262%" y="53" width="0.7488%" height="15" fill="rgb(208,68,35)"/><text x="16.7762%" y="63.50"></text></g><g><title>resolve_instance (1,602,644 samples, 1.18%)</title><rect x="16.2848%" y="69" width="1.1757%" height="15" fill="rgb(232,128,0)"/><text x="16.5348%" y="79.50"></text></g><g><title>thir_body (874,755 samples, 0.64%)</title><rect x="17.4789%" y="69" width="0.6417%" height="15" fill="rgb(207,160,47)"/><text x="17.7289%" y="79.50"></text></g><g><title>mir_const (6,757,752 samples, 4.96%)</title><rect x="13.1751%" y="117" width="4.9573%" height="15" fill="rgb(228,23,34)"/><text x="13.4251%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (5,911,813 samples, 4.34%)</title><rect x="13.7957%" y="101" width="4.3368%" height="15" fill="rgb(218,30,26)"/><text x="14.0457%" y="111.50">unsaf..</text></g><g><title>mir_built (5,304,429 samples, 3.89%)</title><rect x="14.2412%" y="85" width="3.8912%" height="15" fill="rgb(220,122,19)"/><text x="14.4912%" y="95.50">mir_..</text></g><g><title>thir_body (217,631 samples, 0.16%)</title><rect x="20.3258%" y="53" width="0.1596%" height="15" fill="rgb(250,228,42)"/><text x="20.5758%" y="63.50"></text></g><g><title>mir_const (2,449,853 samples, 1.80%)</title><rect x="18.7075%" y="101" width="1.7972%" height="15" fill="rgb(240,193,28)"/><text x="18.9575%" y="111.50">m..</text></g><g><title>unsafety_check_result (1,664,582 samples, 1.22%)</title><rect x="19.2836%" y="85" width="1.2211%" height="15" fill="rgb(216,20,37)"/><text x="19.5336%" y="95.50"></text></g><g><title>mir_built (1,380,688 samples, 1.01%)</title><rect x="19.4919%" y="69" width="1.0128%" height="15" fill="rgb(206,188,39)"/><text x="19.7419%" y="79.50"></text></g><g><title>mir_promoted (11,201,393 samples, 8.22%)</title><rect x="12.3024%" y="133" width="8.2171%" height="15" fill="rgb(217,207,13)"/><text x="12.5524%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (3,253,930 samples, 2.39%)</title><rect x="18.1324%" y="117" width="2.3870%" height="15" fill="rgb(231,73,38)"/><text x="18.3824%" y="127.50">mi..</text></g><g><title>type_op_normalize_fn_sig (1,411,942 samples, 1.04%)</title><rect x="20.5790%" y="133" width="1.0358%" height="15" fill="rgb(225,20,46)"/><text x="20.8290%" y="143.50"></text></g><g><title>normalize_projection_ty (1,085,079 samples, 0.80%)</title><rect x="20.8187%" y="117" width="0.7960%" height="15" fill="rgb(210,31,41)"/><text x="21.0687%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,559,663 samples, 1.14%)</title><rect x="21.6575%" y="133" width="1.1441%" height="15" fill="rgb(221,200,47)"/><text x="21.9075%" y="143.50"></text></g><g><title>normalize_projection_ty (942,316 samples, 0.69%)</title><rect x="22.1104%" y="117" width="0.6913%" height="15" fill="rgb(226,26,5)"/><text x="22.3604%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,326,915 samples, 0.97%)</title><rect x="22.8016%" y="133" width="0.9734%" height="15" fill="rgb(249,33,26)"/><text x="23.0516%" y="143.50"></text></g><g><title>evaluate_obligation (508,693 samples, 0.37%)</title><rect x="23.4019%" y="117" width="0.3732%" height="15" fill="rgb(235,183,28)"/><text x="23.6519%" y="127.50"></text></g><g><title>MIR_borrow_checking (31,689,630 samples, 23.25%)</title><rect x="0.5396%" y="165" width="23.2469%" height="15" fill="rgb(221,5,38)"/><text x="0.7896%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,351,958 samples, 23.00%)</title><rect x="0.7873%" y="149" width="22.9991%" height="15" fill="rgb(247,18,42)"/><text x="1.0373%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,467,626 samples, 1.08%)</title><rect x="23.7864%" y="165" width="1.0766%" height="15" fill="rgb(241,131,45)"/><text x="24.0364%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,291,764 samples, 0.95%)</title><rect x="23.9154%" y="149" width="0.9476%" height="15" fill="rgb(249,31,29)"/><text x="24.1654%" y="159.50"></text></g><g><title>hir_module_items (216,733 samples, 0.16%)</title><rect x="24.8630%" y="165" width="0.1590%" height="15" fill="rgb(225,111,53)"/><text x="25.1130%" y="175.50"></text></g><g><title>codegen_fn_attrs (272,754 samples, 0.20%)</title><rect x="25.3248%" y="101" width="0.2001%" height="15" fill="rgb(238,160,17)"/><text x="25.5748%" y="111.50"></text></g><g><title>codegen_fn_attrs (468,905 samples, 0.34%)</title><rect x="25.1871%" y="133" width="0.3440%" height="15" fill="rgb(214,148,48)"/><text x="25.4371%" y="143.50"></text></g><g><title>should_inherit_track_caller (412,595 samples, 0.30%)</title><rect x="25.2284%" y="117" width="0.3027%" height="15" fill="rgb(232,36,49)"/><text x="25.4784%" y="127.50"></text></g><g><title>check_mod_attrs (679,928 samples, 0.50%)</title><rect x="25.0325%" y="149" width="0.4988%" height="15" fill="rgb(209,103,24)"/><text x="25.2825%" y="159.50"></text></g><g><title>check_mod_const_bodies (144,481 samples, 0.11%)</title><rect x="25.5313%" y="149" width="0.1060%" height="15" fill="rgb(229,88,8)"/><text x="25.7813%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (364,894 samples, 0.27%)</title><rect x="25.6830%" y="149" width="0.2677%" height="15" fill="rgb(213,181,19)"/><text x="25.9330%" y="159.50"></text></g><g><title>misc_checking_1 (1,328,195 samples, 0.97%)</title><rect x="25.0224%" y="165" width="0.9743%" height="15" fill="rgb(254,191,54)"/><text x="25.2724%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (327,724 samples, 0.24%)</title><rect x="25.9977%" y="149" width="0.2404%" height="15" fill="rgb(241,83,37)"/><text x="26.2477%" y="159.50"></text></g><g><title>check_mod_liveness (248,643 samples, 0.18%)</title><rect x="26.0557%" y="133" width="0.1824%" height="15" fill="rgb(233,36,39)"/><text x="26.3057%" y="143.50"></text></g><g><title>misc_checking_2 (721,628 samples, 0.53%)</title><rect x="25.9967%" y="165" width="0.5294%" height="15" fill="rgb(226,3,54)"/><text x="26.2467%" y="175.50"></text></g><g><title>match_checking (392,494 samples, 0.29%)</title><rect x="26.2381%" y="149" width="0.2879%" height="15" fill="rgb(245,192,40)"/><text x="26.4881%" y="159.50"></text></g><g><title>check_match (321,883 samples, 0.24%)</title><rect x="26.2899%" y="133" width="0.2361%" height="15" fill="rgb(238,167,29)"/><text x="26.5399%" y="143.50"></text></g><g><title>check_private_in_public (264,903 samples, 0.19%)</title><rect x="26.5341%" y="149" width="0.1943%" height="15" fill="rgb(232,182,51)"/><text x="26.7841%" y="159.50"></text></g><g><title>death_checking (481,155 samples, 0.35%)</title><rect x="26.7284%" y="149" width="0.3530%" height="15" fill="rgb(231,60,39)"/><text x="26.9784%" y="159.50"></text></g><g><title>item_attrs (142,361 samples, 0.10%)</title><rect x="26.9770%" y="133" width="0.1044%" height="15" fill="rgb(208,69,12)"/><text x="27.2270%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (140,341 samples, 0.10%)</title><rect x="26.9785%" y="117" width="0.1030%" height="15" fill="rgb(235,93,37)"/><text x="27.2285%" y="127.50"></text></g><g><title>crate_lints (2,094,324 samples, 1.54%)</title><rect x="27.0826%" y="133" width="1.5364%" height="15" fill="rgb(213,116,39)"/><text x="27.3326%" y="143.50"></text></g><g><title>type_of (1,316,694 samples, 0.97%)</title><rect x="27.6531%" y="117" width="0.9659%" height="15" fill="rgb(222,207,29)"/><text x="27.9031%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (877,712 samples, 0.64%)</title><rect x="27.9751%" y="101" width="0.6439%" height="15" fill="rgb(206,96,30)"/><text x="28.2251%" y="111.50"></text></g><g><title>lint_checking (2,408,807 samples, 1.77%)</title><rect x="27.0814%" y="149" width="1.7671%" height="15" fill="rgb(218,138,4)"/><text x="27.3314%" y="159.50"></text></g><g><title>module_lints (312,843 samples, 0.23%)</title><rect x="28.6190%" y="133" width="0.2295%" height="15" fill="rgb(250,191,14)"/><text x="28.8690%" y="143.50"></text></g><g><title>lint_mod (310,313 samples, 0.23%)</title><rect x="28.6208%" y="117" width="0.2276%" height="15" fill="rgb(239,60,40)"/><text x="28.8708%" y="127.50"></text></g><g><title>privacy_access_levels (425,005 samples, 0.31%)</title><rect x="28.8485%" y="149" width="0.3118%" height="15" fill="rgb(206,27,48)"/><text x="29.0985%" y="159.50"></text></g><g><title>privacy_checking_modules (1,150,623 samples, 0.84%)</title><rect x="29.1602%" y="149" width="0.8441%" height="15" fill="rgb(225,35,8)"/><text x="29.4102%" y="159.50"></text></g><g><title>check_mod_privacy (1,149,123 samples, 0.84%)</title><rect x="29.1613%" y="133" width="0.8430%" height="15" fill="rgb(250,213,24)"/><text x="29.4113%" y="143.50"></text></g><g><title>misc_checking_3 (4,753,293 samples, 3.49%)</title><rect x="26.5261%" y="165" width="3.4869%" height="15" fill="rgb(247,123,22)"/><text x="26.7761%" y="175.50">mis..</text></g><g><title>impl_parent (2,700,683 samples, 1.98%)</title><rect x="36.3700%" y="101" width="1.9812%" height="15" fill="rgb(231,138,38)"/><text x="36.6200%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,609,008 samples, 1.18%)</title><rect x="37.1708%" y="85" width="1.1803%" height="15" fill="rgb(231,145,46)"/><text x="37.4208%" y="95.50"></text></g><g><title>impl_trait_ref (5,740,758 samples, 4.21%)</title><rect x="38.3519%" y="101" width="4.2113%" height="15" fill="rgb(251,118,11)"/><text x="38.6019%" y="111.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,469,741 samples, 3.28%)</title><rect x="39.2843%" y="85" width="3.2789%" height="15" fill="rgb(217,147,25)"/><text x="39.5343%" y="95.50">met..</text></g><g><title>trait_impls_of (975,000 samples, 0.72%)</title><rect x="42.6355%" y="101" width="0.7152%" height="15" fill="rgb(247,81,37)"/><text x="42.8855%" y="111.50"></text></g><g><title>implementations_of_trait (285,892 samples, 0.21%)</title><rect x="43.1410%" y="85" width="0.2097%" height="15" fill="rgb(209,12,38)"/><text x="43.3910%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (221,582 samples, 0.16%)</title><rect x="43.1882%" y="69" width="0.1625%" height="15" fill="rgb(227,1,9)"/><text x="43.4382%" y="79.50"></text></g><g><title>coherent_trait (18,050,349 samples, 13.24%)</title><rect x="30.1106%" y="133" width="13.2414%" height="15" fill="rgb(248,47,43)"/><text x="30.3606%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (18,016,799 samples, 13.22%)</title><rect x="30.1352%" y="117" width="13.2167%" height="15" fill="rgb(221,10,30)"/><text x="30.3852%" y="127.50">specialization_graph..</text></g><g><title>coherence_checking (18,158,750 samples, 13.32%)</title><rect x="30.0886%" y="149" width="13.3209%" height="15" fill="rgb(210,229,1)"/><text x="30.3386%" y="159.50">coherence_checking</text></g><g><title>associated_item (205,432 samples, 0.15%)</title><rect x="59.5510%" y="85" width="0.1507%" height="15" fill="rgb(222,148,37)"/><text x="59.8010%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (161,192 samples, 0.12%)</title><rect x="59.5834%" y="69" width="0.1182%" height="15" fill="rgb(234,67,33)"/><text x="59.8334%" y="79.50"></text></g><g><title>associated_items (292,942 samples, 0.21%)</title><rect x="59.4931%" y="101" width="0.2149%" height="15" fill="rgb(247,98,35)"/><text x="59.7431%" y="111.50"></text></g><g><title>dropck_outlives (197,192 samples, 0.14%)</title><rect x="59.7284%" y="101" width="0.1447%" height="15" fill="rgb(247,138,52)"/><text x="59.9784%" y="111.50"></text></g><g><title>predicates_of (139,672 samples, 0.10%)</title><rect x="61.4575%" y="85" width="0.1025%" height="15" fill="rgb(213,79,30)"/><text x="61.7075%" y="95.50"></text></g><g><title>specializes (200,541 samples, 0.15%)</title><rect x="61.5599%" y="85" width="0.1471%" height="15" fill="rgb(246,177,23)"/><text x="61.8099%" y="95.50"></text></g><g><title>evaluate_obligation (2,585,073 samples, 1.90%)</title><rect x="59.8731%" y="101" width="1.8964%" height="15" fill="rgb(230,62,27)"/><text x="60.1231%" y="111.50">e..</text></g><g><title>explicit_predicates_of (324,127 samples, 0.24%)</title><rect x="62.7240%" y="53" width="0.2378%" height="15" fill="rgb(216,154,8)"/><text x="62.9740%" y="63.50"></text></g><g><title>generics_of (159,722 samples, 0.12%)</title><rect x="62.8446%" y="37" width="0.1172%" height="15" fill="rgb(244,35,45)"/><text x="63.0946%" y="47.50"></text></g><g><title>param_env (1,223,314 samples, 0.90%)</title><rect x="62.0847%" y="101" width="0.8974%" height="15" fill="rgb(251,115,12)"/><text x="62.3347%" y="111.50"></text></g><g><title>predicates_of (586,578 samples, 0.43%)</title><rect x="62.5518%" y="85" width="0.4303%" height="15" fill="rgb(240,54,50)"/><text x="62.8018%" y="95.50"></text></g><g><title>predicates_defined_on (495,007 samples, 0.36%)</title><rect x="62.6190%" y="69" width="0.3631%" height="15" fill="rgb(233,84,52)"/><text x="62.8690%" y="79.50"></text></g><g><title>predicates_of (142,604 samples, 0.10%)</title><rect x="62.9865%" y="101" width="0.1046%" height="15" fill="rgb(207,117,47)"/><text x="63.2365%" y="111.50"></text></g><g><title>region_scope_tree (258,072 samples, 0.19%)</title><rect x="63.0911%" y="101" width="0.1893%" height="15" fill="rgb(249,43,39)"/><text x="63.3411%" y="111.50"></text></g><g><title>dropck_outlives (145,522 samples, 0.11%)</title><rect x="63.8991%" y="85" width="0.1068%" height="15" fill="rgb(209,38,44)"/><text x="64.1491%" y="95.50"></text></g><g><title>is_copy_raw (166,812 samples, 0.12%)</title><rect x="64.1049%" y="85" width="0.1224%" height="15" fill="rgb(236,212,23)"/><text x="64.3549%" y="95.50"></text></g><g><title>evaluate_obligation (160,852 samples, 0.12%)</title><rect x="64.1093%" y="69" width="0.1180%" height="15" fill="rgb(242,79,21)"/><text x="64.3593%" y="79.50"></text></g><g><title>lint_levels (188,462 samples, 0.14%)</title><rect x="64.2392%" y="85" width="0.1383%" height="15" fill="rgb(211,96,35)"/><text x="64.4892%" y="95.50"></text></g><g><title>typeck (1,421,936 samples, 1.04%)</title><rect x="63.3791%" y="101" width="1.0431%" height="15" fill="rgb(253,215,40)"/><text x="63.6291%" y="111.50"></text></g><g><title>item_bodies_checking (28,649,337 samples, 21.02%)</title><rect x="43.4584%" y="149" width="21.0166%" height="15" fill="rgb(211,81,21)"/><text x="43.7084%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,646,417 samples, 21.01%)</title><rect x="43.4605%" y="133" width="21.0144%" height="15" fill="rgb(208,190,38)"/><text x="43.7105%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (28,424,884 samples, 20.85%)</title><rect x="43.6230%" y="117" width="20.8519%" height="15" fill="rgb(235,213,38)"/><text x="43.8730%" y="127.50">typeck</text></g><g><title>impl_trait_ref (142,391 samples, 0.10%)</title><rect x="70.1111%" y="69" width="0.1045%" height="15" fill="rgb(237,122,38)"/><text x="70.3611%" y="79.50"></text></g><g><title>adt_destructor (317,354 samples, 0.23%)</title><rect x="70.0046%" y="117" width="0.2328%" height="15" fill="rgb(244,218,35)"/><text x="70.2546%" y="127.50"></text></g><g><title>coherent_trait (314,354 samples, 0.23%)</title><rect x="70.0068%" y="101" width="0.2306%" height="15" fill="rgb(240,68,47)"/><text x="70.2568%" y="111.50"></text></g><g><title>specialization_graph_of (312,784 samples, 0.23%)</title><rect x="70.0079%" y="85" width="0.2295%" height="15" fill="rgb(210,16,53)"/><text x="70.2579%" y="95.50"></text></g><g><title>item_types_checking (8,041,059 samples, 5.90%)</title><rect x="64.4749%" y="149" width="5.8988%" height="15" fill="rgb(235,124,12)"/><text x="64.7249%" y="159.50">item_ty..</text></g><g><title>check_mod_item_types (8,038,669 samples, 5.90%)</title><rect x="64.4767%" y="133" width="5.8970%" height="15" fill="rgb(224,169,11)"/><text x="64.7267%" y="143.50">check_m..</text></g><g><title>late_bound_vars_map (275,362 samples, 0.20%)</title><rect x="71.1183%" y="101" width="0.2020%" height="15" fill="rgb(250,166,2)"/><text x="71.3683%" y="111.50"></text></g><g><title>resolve_lifetimes (235,352 samples, 0.17%)</title><rect x="71.1476%" y="85" width="0.1726%" height="15" fill="rgb(242,216,29)"/><text x="71.3976%" y="95.50"></text></g><g><title>fn_sig (946,020 samples, 0.69%)</title><rect x="70.6921%" y="117" width="0.6940%" height="15" fill="rgb(230,116,27)"/><text x="70.9421%" y="127.50"></text></g><g><title>is_late_bound_map (329,143 samples, 0.24%)</title><rect x="71.5353%" y="101" width="0.2415%" height="15" fill="rgb(228,99,48)"/><text x="71.7853%" y="111.50"></text></g><g><title>resolve_lifetimes (295,253 samples, 0.22%)</title><rect x="71.5602%" y="85" width="0.2166%" height="15" fill="rgb(253,11,6)"/><text x="71.8102%" y="95.50"></text></g><g><title>generics_of (651,427 samples, 0.48%)</title><rect x="71.3861%" y="117" width="0.4779%" height="15" fill="rgb(247,143,39)"/><text x="71.6361%" y="127.50"></text></g><g><title>impl_trait_ref (342,334 samples, 0.25%)</title><rect x="71.8640%" y="117" width="0.2511%" height="15" fill="rgb(236,97,10)"/><text x="72.1140%" y="127.50"></text></g><g><title>explicit_predicates_of (252,481 samples, 0.19%)</title><rect x="72.2999%" y="85" width="0.1852%" height="15" fill="rgb(233,208,19)"/><text x="72.5499%" y="95.50"></text></g><g><title>predicates_of (590,255 samples, 0.43%)</title><rect x="72.1151%" y="117" width="0.4330%" height="15" fill="rgb(216,164,2)"/><text x="72.3651%" y="127.50"></text></g><g><title>predicates_defined_on (485,902 samples, 0.36%)</title><rect x="72.1917%" y="101" width="0.3564%" height="15" fill="rgb(220,129,5)"/><text x="72.4417%" y="111.50"></text></g><g><title>type_collecting (3,153,374 samples, 2.31%)</title><rect x="70.3747%" y="149" width="2.3132%" height="15" fill="rgb(242,17,10)"/><text x="70.6247%" y="159.50">t..</text></g><g><title>collect_mod_item_types (3,147,004 samples, 2.31%)</title><rect x="70.3794%" y="133" width="2.3086%" height="15" fill="rgb(242,107,0)"/><text x="70.6294%" y="143.50">c..</text></g><g><title>type_of (190,670 samples, 0.14%)</title><rect x="72.5481%" y="117" width="0.1399%" height="15" fill="rgb(251,28,31)"/><text x="72.7981%" y="127.50"></text></g><g><title>evaluate_obligation (214,531 samples, 0.16%)</title><rect x="75.3225%" y="117" width="0.1574%" height="15" fill="rgb(233,223,10)"/><text x="75.5725%" y="127.50"></text></g><g><title>impl_item_implementor_ids (162,185 samples, 0.12%)</title><rect x="75.4799%" y="117" width="0.1190%" height="15" fill="rgb(215,21,27)"/><text x="75.7299%" y="127.50"></text></g><g><title>param_env (643,114 samples, 0.47%)</title><rect x="75.6626%" y="117" width="0.4718%" height="15" fill="rgb(232,23,21)"/><text x="75.9126%" y="127.50"></text></g><g><title>region_scope_tree (420,913 samples, 0.31%)</title><rect x="76.1631%" y="117" width="0.3088%" height="15" fill="rgb(244,5,23)"/><text x="76.4131%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,810,675 samples, 3.53%)</title><rect x="72.9524%" y="133" width="3.5290%" height="15" fill="rgb(226,81,46)"/><text x="73.2024%" y="143.50">che..</text></g><g><title>evaluate_obligation (2,104,505 samples, 1.54%)</title><rect x="80.2904%" y="117" width="1.5438%" height="15" fill="rgb(247,70,30)"/><text x="80.5404%" y="127.50"></text></g><g><title>implied_outlives_bounds (364,145 samples, 0.27%)</title><rect x="81.8613%" y="117" width="0.2671%" height="15" fill="rgb(212,68,19)"/><text x="82.1113%" y="127.50"></text></g><g><title>param_env (366,921 samples, 0.27%)</title><rect x="82.1285%" y="117" width="0.2692%" height="15" fill="rgb(240,187,13)"/><text x="82.3785%" y="127.50"></text></g><g><title>analysis (112,102,339 samples, 82.24%)</title><rect x="0.3322%" y="181" width="82.2359%" height="15" fill="rgb(223,113,26)"/><text x="0.5822%" y="191.50">analysis</text></g><g><title>type_check_crate (71,642,131 samples, 52.56%)</title><rect x="30.0130%" y="165" width="52.5552%" height="15" fill="rgb(206,192,2)"/><text x="30.2630%" y="175.50">type_check_crate</text></g><g><title>wf_checking (13,454,229 samples, 9.87%)</title><rect x="72.6984%" y="149" width="9.8697%" height="15" fill="rgb(241,108,4)"/><text x="72.9484%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (8,297,293 samples, 6.09%)</title><rect x="76.4814%" y="133" width="6.0867%" height="15" fill="rgb(247,173,49)"/><text x="76.7314%" y="143.50">check_it..</text></g><g><title>codegen_crate (465,365 samples, 0.34%)</title><rect x="82.5728%" y="181" width="0.3414%" height="15" fill="rgb(224,114,35)"/><text x="82.8228%" y="191.50"></text></g><g><title>macro_expand_crate (8,645,686 samples, 6.34%)</title><rect x="83.1623%" y="165" width="6.3423%" height="15" fill="rgb(245,159,27)"/><text x="83.4123%" y="175.50">macro_ex..</text></g><g><title>expand_crate (8,631,016 samples, 6.33%)</title><rect x="83.1730%" y="149" width="6.3315%" height="15" fill="rgb(245,172,44)"/><text x="83.4230%" y="159.50">expand_c..</text></g><g><title>metadata_register_crate (1,088,643 samples, 0.80%)</title><rect x="88.7060%" y="133" width="0.7986%" height="15" fill="rgb(236,23,11)"/><text x="88.9560%" y="143.50"></text></g><g><title>metadata_register_crate (815,561 samples, 0.60%)</title><rect x="88.9063%" y="117" width="0.5983%" height="15" fill="rgb(205,117,38)"/><text x="89.1563%" y="127.50"></text></g><g><title>metadata_register_crate (350,323 samples, 0.26%)</title><rect x="89.2476%" y="101" width="0.2570%" height="15" fill="rgb(237,72,25)"/><text x="89.4976%" y="111.50"></text></g><g><title>finalize_macro_resolutions (180,802 samples, 0.13%)</title><rect x="89.6192%" y="149" width="0.1326%" height="15" fill="rgb(244,70,9)"/><text x="89.8692%" y="159.50"></text></g><g><title>late_resolve_crate (1,750,419 samples, 1.28%)</title><rect x="89.7518%" y="149" width="1.2841%" height="15" fill="rgb(217,125,39)"/><text x="90.0018%" y="159.50"></text></g><g><title>configure_and_expand (11,153,154 samples, 8.18%)</title><rect x="82.9142%" y="181" width="8.1817%" height="15" fill="rgb(235,36,10)"/><text x="83.1642%" y="191.50">configure_a..</text></g><g><title>resolve_crate (2,054,613 samples, 1.51%)</title><rect x="89.5887%" y="165" width="1.5072%" height="15" fill="rgb(251,123,47)"/><text x="89.8387%" y="175.50"></text></g><g><title>drop_ast (185,432 samples, 0.14%)</title><rect x="91.0959%" y="181" width="0.1360%" height="15" fill="rgb(221,13,13)"/><text x="91.3459%" y="191.50"></text></g><g><title>early_lint_checks (267,203 samples, 0.20%)</title><rect x="91.2430%" y="181" width="0.1960%" height="15" fill="rgb(238,131,9)"/><text x="91.4930%" y="191.50"></text></g><g><title>free_global_ctxt (3,564,859 samples, 2.62%)</title><rect x="91.4391%" y="181" width="2.6151%" height="15" fill="rgb(211,50,8)"/><text x="91.6891%" y="191.50">fr..</text></g><g><title>mir_for_ctfe (401,094 samples, 0.29%)</title><rect x="95.2245%" y="165" width="0.2942%" height="15" fill="rgb(245,182,24)"/><text x="95.4745%" y="175.50"></text></g><g><title>generate_crate_metadata (2,133,853 samples, 1.57%)</title><rect x="94.0542%" y="181" width="1.5654%" height="15" fill="rgb(242,14,37)"/><text x="94.3042%" y="191.50"></text></g><g><title>hir_lowering (3,143,064 samples, 2.31%)</title><rect x="95.6195%" y="181" width="2.3057%" height="15" fill="rgb(246,228,12)"/><text x="95.8695%" y="191.50">h..</text></g><g><title>parse_crate (1,302,555 samples, 0.96%)</title><rect x="97.9681%" y="181" width="0.9555%" height="15" fill="rgb(213,55,15)"/><text x="98.2181%" y="191.50"></text></g><g><title>prepare_outputs (193,492 samples, 0.14%)</title><rect x="98.9274%" y="181" width="0.1419%" height="15" fill="rgb(209,9,3)"/><text x="99.1774%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (845,589 samples, 0.62%)</title><rect x="99.0694%" y="181" width="0.6203%" height="15" fill="rgb(230,59,30)"/><text x="99.3194%" y="191.50"></text></g><g><title>all (136,317,937 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (136,317,937 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (320,114 samples, 0.23%)</title><rect x="99.7652%" y="181" width="0.2348%" height="15" fill="rgb(232,18,1)"/><text x="100.0152%" y="191.50"></text></g></svg></svg>