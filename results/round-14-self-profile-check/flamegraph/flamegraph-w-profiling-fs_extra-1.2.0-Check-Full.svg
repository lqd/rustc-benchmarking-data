<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (387,526 samples, 0.16%)</title><rect x="17.0271%" y="117" width="0.1572%" height="15" fill="rgb(227,0,7)"/><text x="17.2771%" y="127.50"></text></g><g><title>item_attrs (443,844 samples, 0.18%)</title><rect x="17.7166%" y="85" width="0.1800%" height="15" fill="rgb(217,0,24)"/><text x="17.9666%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (429,083 samples, 0.17%)</title><rect x="17.7226%" y="69" width="0.1740%" height="15" fill="rgb(221,193,54)"/><text x="17.9726%" y="79.50"></text></g><g><title>codegen_fn_attrs (621,515 samples, 0.25%)</title><rect x="17.6584%" y="101" width="0.2521%" height="15" fill="rgb(248,212,6)"/><text x="17.9084%" y="111.50"></text></g><g><title>is_copy_raw (344,113 samples, 0.14%)</title><rect x="21.8872%" y="85" width="0.1396%" height="15" fill="rgb(208,68,35)"/><text x="22.1372%" y="95.50"></text></g><g><title>evaluate_obligation (276,013 samples, 0.11%)</title><rect x="21.9148%" y="69" width="0.1119%" height="15" fill="rgb(232,128,0)"/><text x="22.1648%" y="79.50"></text></g><g><title>adt_drop_tys (597,338 samples, 0.24%)</title><rect x="22.1620%" y="69" width="0.2423%" height="15" fill="rgb(207,160,47)"/><text x="22.4120%" y="79.50"></text></g><g><title>needs_drop_raw (3,271,221 samples, 1.33%)</title><rect x="22.0278%" y="85" width="1.3267%" height="15" fill="rgb(228,23,34)"/><text x="22.2778%" y="95.50"></text></g><g><title>is_copy_raw (2,343,020 samples, 0.95%)</title><rect x="22.4043%" y="69" width="0.9502%" height="15" fill="rgb(218,30,26)"/><text x="22.6543%" y="79.50"></text></g><g><title>evaluate_obligation (1,989,599 samples, 0.81%)</title><rect x="22.5476%" y="53" width="0.8069%" height="15" fill="rgb(220,122,19)"/><text x="22.7976%" y="63.50"></text></g><g><title>specialization_graph_of (911,291 samples, 0.37%)</title><rect x="23.6668%" y="69" width="0.3696%" height="15" fill="rgb(250,228,42)"/><text x="23.9168%" y="79.50"></text></g><g><title>impl_trait_ref (448,957 samples, 0.18%)</title><rect x="23.8543%" y="53" width="0.1821%" height="15" fill="rgb(240,193,28)"/><text x="24.1043%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (391,207 samples, 0.16%)</title><rect x="23.8777%" y="37" width="0.1587%" height="15" fill="rgb(216,20,37)"/><text x="24.1277%" y="47.50"></text></g><g><title>resolve_instance (1,759,801 samples, 0.71%)</title><rect x="23.3550%" y="85" width="0.7137%" height="15" fill="rgb(206,188,39)"/><text x="23.6050%" y="95.50"></text></g><g><title>thir_body (3,331,945 samples, 1.35%)</title><rect x="24.0896%" y="85" width="1.3513%" height="15" fill="rgb(217,207,13)"/><text x="24.3396%" y="95.50"></text></g><g><title>mir_const (23,076,192 samples, 9.36%)</title><rect x="16.0916%" y="133" width="9.3587%" height="15" fill="rgb(231,73,38)"/><text x="16.3416%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (20,381,741 samples, 8.27%)</title><rect x="17.1843%" y="117" width="8.2659%" height="15" fill="rgb(225,20,46)"/><text x="17.4343%" y="127.50">unsafety_che..</text></g><g><title>mir_built (18,591,295 samples, 7.54%)</title><rect x="17.9104%" y="101" width="7.5398%" height="15" fill="rgb(210,31,41)"/><text x="18.1604%" y="111.50">mir_built</text></g><g><title>mir_promoted (25,474,021 samples, 10.33%)</title><rect x="15.1412%" y="149" width="10.3311%" height="15" fill="rgb(221,200,47)"/><text x="15.3912%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (670,285 samples, 0.27%)</title><rect x="25.4723%" y="149" width="0.2718%" height="15" fill="rgb(226,26,5)"/><text x="25.7223%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,381,292 samples, 0.56%)</title><rect x="25.7441%" y="149" width="0.5602%" height="15" fill="rgb(249,33,26)"/><text x="25.9941%" y="159.50"></text></g><g><title>normalize_projection_ty (915,707 samples, 0.37%)</title><rect x="25.9329%" y="133" width="0.3714%" height="15" fill="rgb(235,183,28)"/><text x="26.1829%" y="143.50"></text></g><g><title>type_op_normalize_predicate (552,365 samples, 0.22%)</title><rect x="26.3043%" y="149" width="0.2240%" height="15" fill="rgb(221,5,38)"/><text x="26.5543%" y="159.50"></text></g><g><title>normalize_projection_ty (413,024 samples, 0.17%)</title><rect x="26.3608%" y="133" width="0.1675%" height="15" fill="rgb(247,18,42)"/><text x="26.6108%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,039,283 samples, 1.64%)</title><rect x="26.5283%" y="149" width="1.6381%" height="15" fill="rgb(241,131,45)"/><text x="26.7783%" y="159.50"></text></g><g><title>MIR_borrow_checking (68,002,888 samples, 27.58%)</title><rect x="0.5966%" y="181" width="27.5789%" height="15" fill="rgb(249,31,29)"/><text x="0.8466%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (67,858,847 samples, 27.52%)</title><rect x="0.6550%" y="165" width="27.5205%" height="15" fill="rgb(225,111,53)"/><text x="0.9050%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (316,082 samples, 0.13%)</title><rect x="28.1929%" y="181" width="0.1282%" height="15" fill="rgb(238,160,17)"/><text x="28.4429%" y="191.50"></text></g><g><title>codegen_fn_attrs (398,646 samples, 0.16%)</title><rect x="28.5856%" y="149" width="0.1617%" height="15" fill="rgb(214,148,48)"/><text x="28.8356%" y="159.50"></text></g><g><title>check_mod_attrs (1,025,404 samples, 0.42%)</title><rect x="28.3314%" y="165" width="0.4159%" height="15" fill="rgb(232,36,49)"/><text x="28.5814%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (644,487 samples, 0.26%)</title><rect x="28.8908%" y="165" width="0.2614%" height="15" fill="rgb(209,103,24)"/><text x="29.1408%" y="175.50"></text></g><g><title>misc_checking_1 (2,113,904 samples, 0.86%)</title><rect x="28.3213%" y="181" width="0.8573%" height="15" fill="rgb(229,88,8)"/><text x="28.5713%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,512,097 samples, 0.61%)</title><rect x="29.1794%" y="165" width="0.6132%" height="15" fill="rgb(213,181,19)"/><text x="29.4294%" y="175.50"></text></g><g><title>check_mod_liveness (1,263,374 samples, 0.51%)</title><rect x="29.2803%" y="149" width="0.5124%" height="15" fill="rgb(254,191,54)"/><text x="29.5303%" y="159.50"></text></g><g><title>type_uninhabited_from (248,235 samples, 0.10%)</title><rect x="29.6920%" y="133" width="0.1007%" height="15" fill="rgb(241,83,37)"/><text x="29.9420%" y="143.50"></text></g><g><title>misc_checking_2 (3,378,818 samples, 1.37%)</title><rect x="29.1786%" y="181" width="1.3703%" height="15" fill="rgb(233,36,39)"/><text x="29.4286%" y="191.50"></text></g><g><title>match_checking (1,864,851 samples, 0.76%)</title><rect x="29.7926%" y="165" width="0.7563%" height="15" fill="rgb(226,3,54)"/><text x="30.0426%" y="175.50"></text></g><g><title>check_match (1,831,511 samples, 0.74%)</title><rect x="29.8062%" y="149" width="0.7428%" height="15" fill="rgb(245,192,40)"/><text x="30.0562%" y="159.50"></text></g><g><title>check_private_in_public (254,153 samples, 0.10%)</title><rect x="30.5530%" y="165" width="0.1031%" height="15" fill="rgb(238,167,29)"/><text x="30.8030%" y="175.50"></text></g><g><title>death_checking (784,809 samples, 0.32%)</title><rect x="30.6561%" y="165" width="0.3183%" height="15" fill="rgb(232,182,51)"/><text x="30.9061%" y="175.50"></text></g><g><title>crate_lints (2,751,831 samples, 1.12%)</title><rect x="30.9750%" y="149" width="1.1160%" height="15" fill="rgb(231,60,39)"/><text x="31.2250%" y="159.50"></text></g><g><title>type_of (1,095,342 samples, 0.44%)</title><rect x="31.6468%" y="133" width="0.4442%" height="15" fill="rgb(208,69,12)"/><text x="31.8968%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (865,770 samples, 0.35%)</title><rect x="31.7399%" y="117" width="0.3511%" height="15" fill="rgb(235,93,37)"/><text x="31.9899%" y="127.50"></text></g><g><title>lint_checking (4,448,390 samples, 1.80%)</title><rect x="30.9744%" y="165" width="1.8041%" height="15" fill="rgb(213,116,39)"/><text x="31.2244%" y="175.50">l..</text></g><g><title>module_lints (1,694,949 samples, 0.69%)</title><rect x="32.0911%" y="149" width="0.6874%" height="15" fill="rgb(222,207,29)"/><text x="32.3411%" y="159.50"></text></g><g><title>lint_mod (1,688,229 samples, 0.68%)</title><rect x="32.0938%" y="133" width="0.6847%" height="15" fill="rgb(206,96,30)"/><text x="32.3438%" y="143.50"></text></g><g><title>privacy_access_levels (515,685 samples, 0.21%)</title><rect x="32.7785%" y="165" width="0.2091%" height="15" fill="rgb(218,138,4)"/><text x="33.0285%" y="175.50"></text></g><g><title>privacy_checking_modules (2,091,383 samples, 0.85%)</title><rect x="32.9876%" y="165" width="0.8482%" height="15" fill="rgb(250,191,14)"/><text x="33.2376%" y="175.50"></text></g><g><title>check_mod_privacy (2,086,763 samples, 0.85%)</title><rect x="32.9895%" y="149" width="0.8463%" height="15" fill="rgb(239,60,40)"/><text x="33.2395%" y="159.50"></text></g><g><title>misc_checking_3 (8,126,440 samples, 3.30%)</title><rect x="30.5489%" y="181" width="3.2957%" height="15" fill="rgb(206,27,48)"/><text x="30.7989%" y="191.50">mis..</text></g><g><title>impl_parent (2,571,525 samples, 1.04%)</title><rect x="35.4979%" y="117" width="1.0429%" height="15" fill="rgb(225,35,8)"/><text x="35.7479%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,397,696 samples, 0.57%)</title><rect x="35.9740%" y="101" width="0.5668%" height="15" fill="rgb(250,213,24)"/><text x="36.2240%" y="111.50"></text></g><g><title>impl_trait_ref (5,155,462 samples, 2.09%)</title><rect x="36.5408%" y="117" width="2.0908%" height="15" fill="rgb(247,123,22)"/><text x="36.7908%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,192,558 samples, 1.70%)</title><rect x="36.9313%" y="101" width="1.7003%" height="15" fill="rgb(231,138,38)"/><text x="37.1813%" y="111.50"></text></g><g><title>trait_impls_of (793,830 samples, 0.32%)</title><rect x="38.6426%" y="117" width="0.3219%" height="15" fill="rgb(231,145,46)"/><text x="38.8926%" y="127.50"></text></g><g><title>coherent_trait (12,533,420 samples, 5.08%)</title><rect x="33.8820%" y="149" width="5.0830%" height="15" fill="rgb(251,118,11)"/><text x="34.1320%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (12,512,620 samples, 5.07%)</title><rect x="33.8905%" y="133" width="5.0745%" height="15" fill="rgb(217,147,25)"/><text x="34.1405%" y="143.50">specia..</text></g><g><title>coherence_checking (12,617,170 samples, 5.12%)</title><rect x="33.8741%" y="165" width="5.1169%" height="15" fill="rgb(247,81,37)"/><text x="34.1241%" y="175.50">cohere..</text></g><g><title>associated_item (934,512 samples, 0.38%)</title><rect x="57.8710%" y="101" width="0.3790%" height="15" fill="rgb(209,12,38)"/><text x="58.1210%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (803,077 samples, 0.33%)</title><rect x="57.9243%" y="85" width="0.3257%" height="15" fill="rgb(227,1,9)"/><text x="58.1743%" y="95.50"></text></g><g><title>associated_items (1,209,095 samples, 0.49%)</title><rect x="57.7774%" y="117" width="0.4904%" height="15" fill="rgb(248,47,43)"/><text x="58.0274%" y="127.50"></text></g><g><title>adt_dtorck_constraint (328,092 samples, 0.13%)</title><rect x="58.6247%" y="69" width="0.1331%" height="15" fill="rgb(221,10,30)"/><text x="58.8747%" y="79.50"></text></g><g><title>adt_dtorck_constraint (451,563 samples, 0.18%)</title><rect x="58.5847%" y="85" width="0.1831%" height="15" fill="rgb(210,229,1)"/><text x="58.8347%" y="95.50"></text></g><g><title>dropck_outlives (1,158,087 samples, 0.47%)</title><rect x="58.3177%" y="117" width="0.4697%" height="15" fill="rgb(222,148,37)"/><text x="58.5677%" y="127.50"></text></g><g><title>adt_dtorck_constraint (657,563 samples, 0.27%)</title><rect x="58.5207%" y="101" width="0.2667%" height="15" fill="rgb(234,67,33)"/><text x="58.7707%" y="111.50"></text></g><g><title>adt_sized_constraint (297,316 samples, 0.12%)</title><rect x="59.9223%" y="101" width="0.1206%" height="15" fill="rgb(247,98,35)"/><text x="60.1723%" y="111.50"></text></g><g><title>impl_trait_ref (445,363 samples, 0.18%)</title><rect x="60.1502%" y="101" width="0.1806%" height="15" fill="rgb(247,138,52)"/><text x="60.4002%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (409,242 samples, 0.17%)</title><rect x="60.1648%" y="85" width="0.1660%" height="15" fill="rgb(213,79,30)"/><text x="60.4148%" y="95.50"></text></g><g><title>predicates_of (313,854 samples, 0.13%)</title><rect x="60.3386%" y="101" width="0.1273%" height="15" fill="rgb(246,177,23)"/><text x="60.5886%" y="111.50"></text></g><g><title>specializes (367,334 samples, 0.15%)</title><rect x="60.4658%" y="101" width="0.1490%" height="15" fill="rgb(230,62,27)"/><text x="60.7158%" y="111.50"></text></g><g><title>trait_impls_of (445,537 samples, 0.18%)</title><rect x="60.6195%" y="101" width="0.1807%" height="15" fill="rgb(216,154,8)"/><text x="60.8695%" y="111.50"></text></g><g><title>evaluate_obligation (4,964,629 samples, 2.01%)</title><rect x="58.7874%" y="117" width="2.0134%" height="15" fill="rgb(244,35,45)"/><text x="59.0374%" y="127.50">e..</text></g><g><title>fn_sig (256,193 samples, 0.10%)</title><rect x="60.8197%" y="117" width="0.1039%" height="15" fill="rgb(251,115,12)"/><text x="61.0697%" y="127.50"></text></g><g><title>generics_of (1,228,738 samples, 0.50%)</title><rect x="60.9236%" y="117" width="0.4983%" height="15" fill="rgb(240,54,50)"/><text x="61.1736%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (949,083 samples, 0.38%)</title><rect x="61.0370%" y="101" width="0.3849%" height="15" fill="rgb(233,84,52)"/><text x="61.2870%" y="111.50"></text></g><g><title>item_attrs (298,574 samples, 0.12%)</title><rect x="61.5493%" y="117" width="0.1211%" height="15" fill="rgb(207,117,47)"/><text x="61.7993%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (285,874 samples, 0.12%)</title><rect x="61.5545%" y="101" width="0.1159%" height="15" fill="rgb(249,43,39)"/><text x="61.8045%" y="111.50"></text></g><g><title>evaluate_obligation (357,884 samples, 0.15%)</title><rect x="61.8908%" y="101" width="0.1451%" height="15" fill="rgb(209,38,44)"/><text x="62.1408%" y="111.50"></text></g><g><title>method_autoderef_steps (780,587 samples, 0.32%)</title><rect x="61.7284%" y="117" width="0.3166%" height="15" fill="rgb(236,212,23)"/><text x="61.9784%" y="127.50"></text></g><g><title>explicit_predicates_of (391,804 samples, 0.16%)</title><rect x="62.2667%" y="85" width="0.1589%" height="15" fill="rgb(242,79,21)"/><text x="62.5167%" y="95.50"></text></g><g><title>predicates_of (798,738 samples, 0.32%)</title><rect x="62.1357%" y="117" width="0.3239%" height="15" fill="rgb(211,96,35)"/><text x="62.3857%" y="127.50"></text></g><g><title>predicates_defined_on (619,386 samples, 0.25%)</title><rect x="62.2084%" y="101" width="0.2512%" height="15" fill="rgb(253,215,40)"/><text x="62.4584%" y="111.50"></text></g><g><title>evaluate_obligation (2,188,027 samples, 0.89%)</title><rect x="72.0046%" y="101" width="0.8874%" height="15" fill="rgb(211,81,21)"/><text x="72.2546%" y="111.50"></text></g><g><title>method_autoderef_steps (350,665 samples, 0.14%)</title><rect x="72.9965%" y="101" width="0.1422%" height="15" fill="rgb(208,190,38)"/><text x="73.2465%" y="111.50"></text></g><g><title>typeck (26,175,522 samples, 10.62%)</title><rect x="62.5428%" y="117" width="10.6156%" height="15" fill="rgb(235,213,38)"/><text x="62.7928%" y="127.50">typeck</text></g><g><title>item_bodies_checking (84,328,469 samples, 34.20%)</title><rect x="39.0011%" y="165" width="34.1998%" height="15" fill="rgb(237,122,38)"/><text x="39.2511%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (84,325,149 samples, 34.20%)</title><rect x="39.0024%" y="149" width="34.1984%" height="15" fill="rgb(244,218,35)"/><text x="39.2524%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (84,233,269 samples, 34.16%)</title><rect x="39.0397%" y="133" width="34.1612%" height="15" fill="rgb(240,68,47)"/><text x="39.2897%" y="143.50">typeck</text></g><g><title>adt_destructor (321,304 samples, 0.13%)</title><rect x="73.4316%" y="133" width="0.1303%" height="15" fill="rgb(210,16,53)"/><text x="73.6816%" y="143.50"></text></g><g><title>coherent_trait (312,763 samples, 0.13%)</title><rect x="73.4351%" y="117" width="0.1268%" height="15" fill="rgb(235,124,12)"/><text x="73.6851%" y="127.50"></text></g><g><title>specialization_graph_of (310,343 samples, 0.13%)</title><rect x="73.4361%" y="101" width="0.1259%" height="15" fill="rgb(224,169,11)"/><text x="73.6861%" y="111.50"></text></g><g><title>item_types_checking (1,023,602 samples, 0.42%)</title><rect x="73.2009%" y="165" width="0.4151%" height="15" fill="rgb(250,166,2)"/><text x="73.4509%" y="175.50"></text></g><g><title>check_mod_item_types (1,018,502 samples, 0.41%)</title><rect x="73.2029%" y="149" width="0.4131%" height="15" fill="rgb(242,216,29)"/><text x="73.4529%" y="159.50"></text></g><g><title>fn_sig (307,774 samples, 0.12%)</title><rect x="73.7653%" y="133" width="0.1248%" height="15" fill="rgb(230,116,27)"/><text x="74.0153%" y="143.50"></text></g><g><title>lint_levels (534,425 samples, 0.22%)</title><rect x="74.1602%" y="85" width="0.2167%" height="15" fill="rgb(228,99,48)"/><text x="74.4102%" y="95.50"></text></g><g><title>named_region_map (1,058,803 samples, 0.43%)</title><rect x="73.9483%" y="117" width="0.4294%" height="15" fill="rgb(253,11,6)"/><text x="74.1983%" y="127.50"></text></g><g><title>resolve_lifetimes (1,031,193 samples, 0.42%)</title><rect x="73.9595%" y="101" width="0.4182%" height="15" fill="rgb(247,143,39)"/><text x="74.2095%" y="111.50"></text></g><g><title>generics_of (1,217,024 samples, 0.49%)</title><rect x="73.8901%" y="133" width="0.4936%" height="15" fill="rgb(236,97,10)"/><text x="74.1401%" y="143.50"></text></g><g><title>explicit_predicates_of (507,324 samples, 0.21%)</title><rect x="74.4729%" y="101" width="0.2057%" height="15" fill="rgb(233,208,19)"/><text x="74.7229%" y="111.50"></text></g><g><title>predicates_of (901,609 samples, 0.37%)</title><rect x="74.4022%" y="133" width="0.3657%" height="15" fill="rgb(216,164,2)"/><text x="74.6522%" y="143.50"></text></g><g><title>predicates_defined_on (828,039 samples, 0.34%)</title><rect x="74.4321%" y="117" width="0.3358%" height="15" fill="rgb(220,129,5)"/><text x="74.6821%" y="127.50"></text></g><g><title>type_collecting (2,904,872 samples, 1.18%)</title><rect x="73.6171%" y="165" width="1.1781%" height="15" fill="rgb(242,17,10)"/><text x="73.8671%" y="175.50"></text></g><g><title>collect_mod_item_types (2,895,542 samples, 1.17%)</title><rect x="73.6209%" y="149" width="1.1743%" height="15" fill="rgb(242,107,0)"/><text x="73.8709%" y="159.50"></text></g><g><title>evaluate_obligation (285,711 samples, 0.12%)</title><rect x="75.1804%" y="133" width="0.1159%" height="15" fill="rgb(251,28,31)"/><text x="75.4304%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,378,815 samples, 0.56%)</title><rect x="74.8964%" y="149" width="0.5592%" height="15" fill="rgb(233,223,10)"/><text x="75.1464%" y="159.50"></text></g><g><title>adt_sized_constraint (369,245 samples, 0.15%)</title><rect x="76.3804%" y="101" width="0.1497%" height="15" fill="rgb(215,21,27)"/><text x="76.6304%" y="111.50"></text></g><g><title>adt_sized_constraint (524,737 samples, 0.21%)</title><rect x="76.3201%" y="117" width="0.2128%" height="15" fill="rgb(232,23,21)"/><text x="76.5701%" y="127.50"></text></g><g><title>evaluate_obligation (936,404 samples, 0.38%)</title><rect x="76.1615%" y="133" width="0.3798%" height="15" fill="rgb(244,5,23)"/><text x="76.4115%" y="143.50"></text></g><g><title>param_env (355,966 samples, 0.14%)</title><rect x="76.6257%" y="133" width="0.1444%" height="15" fill="rgb(226,81,46)"/><text x="76.8757%" y="143.50"></text></g><g><title>region_scope_tree (929,034 samples, 0.38%)</title><rect x="76.8074%" y="133" width="0.3768%" height="15" fill="rgb(247,70,30)"/><text x="77.0574%" y="143.50"></text></g><g><title>analysis (189,655,754 samples, 76.92%)</title><rect x="0.3182%" y="197" width="76.9157%" height="15" fill="rgb(212,68,19)"/><text x="0.5682%" y="207.50">analysis</text></g><g><title>type_check_crate (106,987,672 samples, 43.39%)</title><rect x="33.8446%" y="181" width="43.3893%" height="15" fill="rgb(240,187,13)"/><text x="34.0946%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,008,657 samples, 2.44%)</title><rect x="74.7971%" y="165" width="2.4368%" height="15" fill="rgb(223,113,26)"/><text x="75.0471%" y="175.50">wf..</text></g><g><title>check_item_well_formed (4,385,135 samples, 1.78%)</title><rect x="75.4556%" y="149" width="1.7784%" height="15" fill="rgb(206,192,2)"/><text x="75.7056%" y="159.50">c..</text></g><g><title>codegen_crate (368,484 samples, 0.15%)</title><rect x="77.2380%" y="197" width="0.1494%" height="15" fill="rgb(241,108,4)"/><text x="77.4880%" y="207.50"></text></g><g><title>metadata_register_crate (2,298,216 samples, 0.93%)</title><rect x="87.9068%" y="149" width="0.9321%" height="15" fill="rgb(247,173,49)"/><text x="88.1568%" y="159.50"></text></g><g><title>metadata_register_crate (835,588 samples, 0.34%)</title><rect x="88.4999%" y="133" width="0.3389%" height="15" fill="rgb(224,114,35)"/><text x="88.7499%" y="143.50"></text></g><g><title>macro_expand_crate (28,257,464 samples, 11.46%)</title><rect x="77.6132%" y="181" width="11.4599%" height="15" fill="rgb(245,159,27)"/><text x="77.8632%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (28,240,324 samples, 11.45%)</title><rect x="77.6201%" y="165" width="11.4530%" height="15" fill="rgb(245,172,44)"/><text x="77.8701%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (577,776 samples, 0.23%)</title><rect x="88.8388%" y="149" width="0.2343%" height="15" fill="rgb(236,23,11)"/><text x="89.0888%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (266,623 samples, 0.11%)</title><rect x="89.0747%" y="181" width="0.1081%" height="15" fill="rgb(205,117,38)"/><text x="89.3247%" y="191.50"></text></g><g><title>late_resolve_crate (3,627,321 samples, 1.47%)</title><rect x="89.2781%" y="165" width="1.4711%" height="15" fill="rgb(237,72,25)"/><text x="89.5281%" y="175.50"></text></g><g><title>configure_and_expand (33,168,530 samples, 13.45%)</title><rect x="77.3874%" y="197" width="13.4516%" height="15" fill="rgb(244,70,9)"/><text x="77.6374%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,083,926 samples, 1.66%)</title><rect x="89.1828%" y="181" width="1.6563%" height="15" fill="rgb(217,125,39)"/><text x="89.4328%" y="191.50"></text></g><g><title>drop_ast (408,545 samples, 0.17%)</title><rect x="90.8391%" y="197" width="0.1657%" height="15" fill="rgb(235,36,10)"/><text x="91.0891%" y="207.50"></text></g><g><title>early_lint_checks (3,262,666 samples, 1.32%)</title><rect x="91.0102%" y="197" width="1.3232%" height="15" fill="rgb(251,123,47)"/><text x="91.2602%" y="207.50"></text></g><g><title>free_global_ctxt (4,707,523 samples, 1.91%)</title><rect x="92.3334%" y="197" width="1.9092%" height="15" fill="rgb(221,13,13)"/><text x="92.5834%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,524,847 samples, 0.62%)</title><rect x="94.2425%" y="197" width="0.6184%" height="15" fill="rgb(238,131,9)"/><text x="94.4925%" y="207.50"></text></g><g><title>hir_lowering (6,106,008 samples, 2.48%)</title><rect x="94.8610%" y="197" width="2.4763%" height="15" fill="rgb(211,50,8)"/><text x="95.1110%" y="207.50">hi..</text></g><g><title>parse_crate (4,843,744 samples, 1.96%)</title><rect x="97.3604%" y="197" width="1.9644%" height="15" fill="rgb(245,182,24)"/><text x="97.6104%" y="207.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,023,791 samples, 0.42%)</title><rect x="99.4104%" y="197" width="0.4152%" height="15" fill="rgb(242,14,37)"/><text x="99.6604%" y="207.50"></text></g><g><title>all (246,576,019 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (246,576,019 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (328,024 samples, 0.13%)</title><rect x="99.8670%" y="197" width="0.1330%" height="15" fill="rgb(209,9,3)"/><text x="100.1170%" y="207.50"></text></g></svg></svg>