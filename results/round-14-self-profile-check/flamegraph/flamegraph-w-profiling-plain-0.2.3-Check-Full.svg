<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (84,280 samples, 0.13%)</title><rect x="7.6322%" y="101" width="0.1303%" height="15" fill="rgb(227,0,7)"/><text x="7.8822%" y="111.50"></text></g><g><title>codegen_fn_attrs (105,122 samples, 0.16%)</title><rect x="8.0314%" y="85" width="0.1626%" height="15" fill="rgb(217,0,24)"/><text x="8.2814%" y="95.50"></text></g><g><title>is_copy_raw (167,542 samples, 0.26%)</title><rect x="9.4818%" y="69" width="0.2591%" height="15" fill="rgb(221,193,54)"/><text x="9.7318%" y="79.50"></text></g><g><title>evaluate_obligation (138,281 samples, 0.21%)</title><rect x="9.5271%" y="53" width="0.2139%" height="15" fill="rgb(248,212,6)"/><text x="9.7771%" y="63.50"></text></g><g><title>needs_drop_raw (165,791 samples, 0.26%)</title><rect x="9.7498%" y="69" width="0.2564%" height="15" fill="rgb(208,68,35)"/><text x="9.9998%" y="79.50"></text></g><g><title>is_copy_raw (158,491 samples, 0.25%)</title><rect x="9.7611%" y="53" width="0.2451%" height="15" fill="rgb(232,128,0)"/><text x="10.0111%" y="63.50"></text></g><g><title>evaluate_obligation (146,771 samples, 0.23%)</title><rect x="9.7792%" y="37" width="0.2270%" height="15" fill="rgb(207,160,47)"/><text x="10.0292%" y="47.50"></text></g><g><title>resolve_instance (69,101 samples, 0.11%)</title><rect x="10.0062%" y="69" width="0.1069%" height="15" fill="rgb(228,23,34)"/><text x="10.2562%" y="79.50"></text></g><g><title>thir_body (361,822 samples, 0.56%)</title><rect x="10.1285%" y="69" width="0.5596%" height="15" fill="rgb(218,30,26)"/><text x="10.3785%" y="79.50"></text></g><g><title>mir_const (2,315,513 samples, 3.58%)</title><rect x="7.1155%" y="117" width="3.5811%" height="15" fill="rgb(220,122,19)"/><text x="7.3655%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (1,897,171 samples, 2.93%)</title><rect x="7.7625%" y="101" width="2.9341%" height="15" fill="rgb(250,228,42)"/><text x="8.0125%" y="111.50">un..</text></g><g><title>mir_built (1,618,179 samples, 2.50%)</title><rect x="8.1940%" y="85" width="2.5026%" height="15" fill="rgb(240,193,28)"/><text x="8.4440%" y="95.50">mi..</text></g><g><title>mir_promoted (2,654,688 samples, 4.11%)</title><rect x="6.6195%" y="133" width="4.1057%" height="15" fill="rgb(216,20,37)"/><text x="6.8695%" y="143.50">mir_..</text></g><g><title>type_op_prove_predicate (434,245 samples, 0.67%)</title><rect x="10.8579%" y="133" width="0.6716%" height="15" fill="rgb(206,188,39)"/><text x="11.1079%" y="143.50"></text></g><g><title>MIR_borrow_checking (6,399,892 samples, 9.90%)</title><rect x="1.6336%" y="165" width="9.8979%" height="15" fill="rgb(217,207,13)"/><text x="1.8836%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (6,360,822 samples, 9.84%)</title><rect x="1.6940%" y="149" width="9.8375%" height="15" fill="rgb(231,73,38)"/><text x="1.9440%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (188,491 samples, 0.29%)</title><rect x="11.5514%" y="165" width="0.2915%" height="15" fill="rgb(225,20,46)"/><text x="11.8014%" y="175.50"></text></g><g><title>codegen_fn_attrs (209,282 samples, 0.32%)</title><rect x="12.5125%" y="101" width="0.3237%" height="15" fill="rgb(210,31,41)"/><text x="12.7625%" y="111.50"></text></g><g><title>codegen_fn_attrs (384,995 samples, 0.60%)</title><rect x="12.2501%" y="133" width="0.5954%" height="15" fill="rgb(221,200,47)"/><text x="12.5001%" y="143.50"></text></g><g><title>should_inherit_track_caller (301,433 samples, 0.47%)</title><rect x="12.3794%" y="117" width="0.4662%" height="15" fill="rgb(226,26,5)"/><text x="12.6294%" y="127.50"></text></g><g><title>check_mod_attrs (605,236 samples, 0.94%)</title><rect x="11.9098%" y="149" width="0.9360%" height="15" fill="rgb(249,33,26)"/><text x="12.1598%" y="159.50"></text></g><g><title>check_mod_const_bodies (122,540 samples, 0.19%)</title><rect x="12.8458%" y="149" width="0.1895%" height="15" fill="rgb(235,183,28)"/><text x="13.0958%" y="159.50"></text></g><g><title>lookup_deprecation_entry (140,542 samples, 0.22%)</title><rect x="13.4339%" y="133" width="0.2174%" height="15" fill="rgb(221,5,38)"/><text x="13.6839%" y="143.50"></text></g><g><title>stability_index (84,451 samples, 0.13%)</title><rect x="13.5206%" y="117" width="0.1306%" height="15" fill="rgb(247,18,42)"/><text x="13.7706%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (411,356 samples, 0.64%)</title><rect x="13.1534%" y="149" width="0.6362%" height="15" fill="rgb(241,131,45)"/><text x="13.4034%" y="159.50"></text></g><g><title>looking_for_derive_registrar (74,251 samples, 0.11%)</title><rect x="13.7939%" y="149" width="0.1148%" height="15" fill="rgb(249,31,29)"/><text x="14.0439%" y="159.50"></text></g><g><title>misc_checking_1 (1,340,125 samples, 2.07%)</title><rect x="11.8435%" y="165" width="2.0726%" height="15" fill="rgb(225,111,53)"/><text x="12.0935%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (159,161 samples, 0.25%)</title><rect x="13.9183%" y="149" width="0.2462%" height="15" fill="rgb(238,160,17)"/><text x="14.1683%" y="159.50"></text></g><g><title>check_mod_liveness (119,071 samples, 0.18%)</title><rect x="13.9803%" y="133" width="0.1842%" height="15" fill="rgb(214,148,48)"/><text x="14.2303%" y="143.50"></text></g><g><title>misc_checking_2 (351,564 samples, 0.54%)</title><rect x="13.9161%" y="165" width="0.5437%" height="15" fill="rgb(232,36,49)"/><text x="14.1661%" y="175.50"></text></g><g><title>match_checking (190,983 samples, 0.30%)</title><rect x="14.1645%" y="149" width="0.2954%" height="15" fill="rgb(209,103,24)"/><text x="14.4145%" y="159.50"></text></g><g><title>check_match (180,262 samples, 0.28%)</title><rect x="14.1810%" y="133" width="0.2788%" height="15" fill="rgb(229,88,8)"/><text x="14.4310%" y="143.50"></text></g><g><title>check_private_in_public (71,041 samples, 0.11%)</title><rect x="14.4729%" y="149" width="0.1099%" height="15" fill="rgb(213,181,19)"/><text x="14.7229%" y="159.50"></text></g><g><title>death_checking (261,113 samples, 0.40%)</title><rect x="14.5827%" y="149" width="0.4038%" height="15" fill="rgb(254,191,54)"/><text x="14.8327%" y="159.50"></text></g><g><title>item_attrs (97,241 samples, 0.15%)</title><rect x="14.8362%" y="133" width="0.1504%" height="15" fill="rgb(241,83,37)"/><text x="15.0862%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,041 samples, 0.15%)</title><rect x="14.8380%" y="117" width="0.1485%" height="15" fill="rgb(233,36,39)"/><text x="15.0880%" y="127.50"></text></g><g><title>param_env (132,203 samples, 0.20%)</title><rect x="15.8276%" y="117" width="0.2045%" height="15" fill="rgb(226,3,54)"/><text x="16.0776%" y="127.50"></text></g><g><title>crate_lints (986,741 samples, 1.53%)</title><rect x="14.9887%" y="133" width="1.5261%" height="15" fill="rgb(245,192,40)"/><text x="15.2387%" y="143.50"></text></g><g><title>type_of (310,624 samples, 0.48%)</title><rect x="16.0344%" y="117" width="0.4804%" height="15" fill="rgb(238,167,29)"/><text x="16.2844%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (229,964 samples, 0.36%)</title><rect x="16.1592%" y="101" width="0.3557%" height="15" fill="rgb(232,182,51)"/><text x="16.4092%" y="111.50"></text></g><g><title>lint_checking (1,134,903 samples, 1.76%)</title><rect x="14.9866%" y="149" width="1.7552%" height="15" fill="rgb(231,60,39)"/><text x="15.2366%" y="159.50"></text></g><g><title>module_lints (146,752 samples, 0.23%)</title><rect x="16.5148%" y="133" width="0.2270%" height="15" fill="rgb(208,69,12)"/><text x="16.7648%" y="143.50"></text></g><g><title>lint_mod (143,332 samples, 0.22%)</title><rect x="16.5201%" y="117" width="0.2217%" height="15" fill="rgb(235,93,37)"/><text x="16.7701%" y="127.50"></text></g><g><title>privacy_access_levels (94,661 samples, 0.15%)</title><rect x="16.7418%" y="149" width="0.1464%" height="15" fill="rgb(213,116,39)"/><text x="16.9918%" y="159.50"></text></g><g><title>privacy_checking_modules (265,703 samples, 0.41%)</title><rect x="16.8882%" y="149" width="0.4109%" height="15" fill="rgb(222,207,29)"/><text x="17.1382%" y="159.50"></text></g><g><title>check_mod_privacy (262,833 samples, 0.41%)</title><rect x="16.8926%" y="133" width="0.4065%" height="15" fill="rgb(206,96,30)"/><text x="17.1426%" y="143.50"></text></g><g><title>misc_checking_3 (1,845,781 samples, 2.85%)</title><rect x="14.4598%" y="165" width="2.8546%" height="15" fill="rgb(218,138,4)"/><text x="14.7098%" y="175.50">mi..</text></g><g><title>adt_destructor (79,431 samples, 0.12%)</title><rect x="17.5056%" y="117" width="0.1228%" height="15" fill="rgb(250,191,14)"/><text x="17.7556%" y="127.50"></text></g><g><title>coherent_trait (75,101 samples, 0.12%)</title><rect x="17.5123%" y="101" width="0.1161%" height="15" fill="rgb(239,60,40)"/><text x="17.7623%" y="111.50"></text></g><g><title>specialization_graph_of (72,421 samples, 0.11%)</title><rect x="17.5165%" y="85" width="0.1120%" height="15" fill="rgb(206,27,48)"/><text x="17.7665%" y="95.50"></text></g><g><title>param_env (177,172 samples, 0.27%)</title><rect x="17.6285%" y="117" width="0.2740%" height="15" fill="rgb(225,35,8)"/><text x="17.8785%" y="127.50"></text></g><g><title>impl_parent (1,462,268 samples, 2.26%)</title><rect x="22.1405%" y="101" width="2.2615%" height="15" fill="rgb(250,213,24)"/><text x="22.3905%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (731,138 samples, 1.13%)</title><rect x="23.2713%" y="85" width="1.1308%" height="15" fill="rgb(247,123,22)"/><text x="23.5213%" y="95.50"></text></g><g><title>impl_trait_ref (3,078,497 samples, 4.76%)</title><rect x="24.4020%" y="101" width="4.7611%" height="15" fill="rgb(231,138,38)"/><text x="24.6520%" y="111.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,353,902 samples, 3.64%)</title><rect x="25.5227%" y="85" width="3.6405%" height="15" fill="rgb(231,145,46)"/><text x="25.7727%" y="95.50">meta..</text></g><g><title>coherent_trait (8,143,181 samples, 12.59%)</title><rect x="17.4211%" y="133" width="12.5941%" height="15" fill="rgb(251,118,11)"/><text x="17.6711%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (7,831,928 samples, 12.11%)</title><rect x="17.9025%" y="117" width="12.1127%" height="15" fill="rgb(217,147,25)"/><text x="18.1525%" y="127.50">specialization_gra..</text></g><g><title>trait_impls_of (548,347 samples, 0.85%)</title><rect x="29.1671%" y="101" width="0.8481%" height="15" fill="rgb(247,81,37)"/><text x="29.4171%" y="111.50"></text></g><g><title>implementations_of_trait (127,803 samples, 0.20%)</title><rect x="29.8175%" y="85" width="0.1977%" height="15" fill="rgb(209,12,38)"/><text x="30.0675%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (114,513 samples, 0.18%)</title><rect x="29.8381%" y="69" width="0.1771%" height="15" fill="rgb(227,1,9)"/><text x="30.0881%" y="79.50"></text></g><g><title>coherence_checking (8,245,932 samples, 12.75%)</title><rect x="17.3769%" y="149" width="12.7530%" height="15" fill="rgb(248,47,43)"/><text x="17.6269%" y="159.50">coherence_checking</text></g><g><title>associated_item (263,942 samples, 0.41%)</title><rect x="46.2912%" y="85" width="0.4082%" height="15" fill="rgb(221,10,30)"/><text x="46.5412%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (193,492 samples, 0.30%)</title><rect x="46.4001%" y="69" width="0.2993%" height="15" fill="rgb(210,229,1)"/><text x="46.6501%" y="79.50"></text></g><g><title>associated_items (384,974 samples, 0.60%)</title><rect x="46.1183%" y="101" width="0.5954%" height="15" fill="rgb(222,148,37)"/><text x="46.3683%" y="111.50"></text></g><g><title>dropck_outlives (199,102 samples, 0.31%)</title><rect x="46.7558%" y="101" width="0.3079%" height="15" fill="rgb(234,67,33)"/><text x="47.0058%" y="111.50"></text></g><g><title>predicates_of (109,290 samples, 0.17%)</title><rect x="48.6089%" y="85" width="0.1690%" height="15" fill="rgb(247,98,35)"/><text x="48.8589%" y="95.50"></text></g><g><title>predicates_defined_on (72,980 samples, 0.11%)</title><rect x="48.6651%" y="69" width="0.1129%" height="15" fill="rgb(247,138,52)"/><text x="48.9151%" y="79.50"></text></g><g><title>specializes (134,713 samples, 0.21%)</title><rect x="48.7780%" y="85" width="0.2083%" height="15" fill="rgb(213,79,30)"/><text x="49.0280%" y="95.50"></text></g><g><title>param_env (97,452 samples, 0.15%)</title><rect x="48.8356%" y="69" width="0.1507%" height="15" fill="rgb(246,177,23)"/><text x="49.0856%" y="79.50"></text></g><g><title>trait_impls_of (234,734 samples, 0.36%)</title><rect x="49.0023%" y="85" width="0.3630%" height="15" fill="rgb(230,62,27)"/><text x="49.2523%" y="95.50"></text></g><g><title>implementations_of_trait (75,240 samples, 0.12%)</title><rect x="49.2490%" y="69" width="0.1164%" height="15" fill="rgb(216,154,8)"/><text x="49.4990%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (66,720 samples, 0.10%)</title><rect x="49.2622%" y="53" width="0.1032%" height="15" fill="rgb(244,35,45)"/><text x="49.5122%" y="63.50"></text></g><g><title>evaluate_obligation (1,497,915 samples, 2.32%)</title><rect x="47.0637%" y="101" width="2.3166%" height="15" fill="rgb(251,115,12)"/><text x="47.3137%" y="111.50">e..</text></g><g><title>fn_sig (92,330 samples, 0.14%)</title><rect x="49.4015%" y="101" width="0.1428%" height="15" fill="rgb(240,54,50)"/><text x="49.6515%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (75,920 samples, 0.12%)</title><rect x="49.4268%" y="85" width="0.1174%" height="15" fill="rgb(233,84,52)"/><text x="49.6768%" y="95.50"></text></g><g><title>generics_of (82,851 samples, 0.13%)</title><rect x="49.5443%" y="101" width="0.1281%" height="15" fill="rgb(207,117,47)"/><text x="49.7943%" y="111.50"></text></g><g><title>item_attrs (264,822 samples, 0.41%)</title><rect x="49.7826%" y="101" width="0.4096%" height="15" fill="rgb(249,43,39)"/><text x="50.0326%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (257,072 samples, 0.40%)</title><rect x="49.7946%" y="85" width="0.3976%" height="15" fill="rgb(209,38,44)"/><text x="50.0446%" y="95.50"></text></g><g><title>method_autoderef_steps (102,391 samples, 0.16%)</title><rect x="50.2318%" y="101" width="0.1584%" height="15" fill="rgb(236,212,23)"/><text x="50.4818%" y="111.50"></text></g><g><title>explicit_predicates_of (79,623 samples, 0.12%)</title><rect x="50.6038%" y="69" width="0.1231%" height="15" fill="rgb(242,79,21)"/><text x="50.8538%" y="79.50"></text></g><g><title>predicates_of (217,825 samples, 0.34%)</title><rect x="50.4307%" y="101" width="0.3369%" height="15" fill="rgb(211,96,35)"/><text x="50.6807%" y="111.50"></text></g><g><title>predicates_defined_on (157,363 samples, 0.24%)</title><rect x="50.5242%" y="85" width="0.2434%" height="15" fill="rgb(253,215,40)"/><text x="50.7742%" y="95.50"></text></g><g><title>item_bodies_checking (13,397,610 samples, 20.72%)</title><rect x="30.1926%" y="149" width="20.7205%" height="15" fill="rgb(211,81,21)"/><text x="30.4426%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,394,870 samples, 20.72%)</title><rect x="30.1968%" y="133" width="20.7162%" height="15" fill="rgb(208,190,38)"/><text x="30.4468%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (13,342,910 samples, 20.64%)</title><rect x="30.2772%" y="117" width="20.6359%" height="15" fill="rgb(235,213,38)"/><text x="30.5272%" y="127.50">typeck</text></g><g><title>item_types_checking (442,345 samples, 0.68%)</title><rect x="50.9131%" y="149" width="0.6841%" height="15" fill="rgb(237,122,38)"/><text x="51.1631%" y="159.50"></text></g><g><title>check_mod_item_types (435,425 samples, 0.67%)</title><rect x="50.9238%" y="133" width="0.6734%" height="15" fill="rgb(244,218,35)"/><text x="51.1738%" y="143.50"></text></g><g><title>fn_sig (288,392 samples, 0.45%)</title><rect x="52.1291%" y="117" width="0.4460%" height="15" fill="rgb(240,68,47)"/><text x="52.3791%" y="127.50"></text></g><g><title>named_region_map (544,607 samples, 0.84%)</title><rect x="52.7661%" y="101" width="0.8423%" height="15" fill="rgb(210,16,53)"/><text x="53.0161%" y="111.50"></text></g><g><title>resolve_lifetimes (506,977 samples, 0.78%)</title><rect x="52.8243%" y="85" width="0.7841%" height="15" fill="rgb(235,124,12)"/><text x="53.0743%" y="95.50"></text></g><g><title>lint_levels (125,062 samples, 0.19%)</title><rect x="53.4150%" y="69" width="0.1934%" height="15" fill="rgb(224,169,11)"/><text x="53.6650%" y="79.50"></text></g><g><title>generics_of (686,889 samples, 1.06%)</title><rect x="52.5751%" y="117" width="1.0623%" height="15" fill="rgb(250,166,2)"/><text x="52.8251%" y="127.50"></text></g><g><title>impl_trait_ref (98,781 samples, 0.15%)</title><rect x="53.6374%" y="117" width="0.1528%" height="15" fill="rgb(242,216,29)"/><text x="53.8874%" y="127.50"></text></g><g><title>explicit_predicates_of (223,582 samples, 0.35%)</title><rect x="53.9786%" y="85" width="0.3458%" height="15" fill="rgb(230,116,27)"/><text x="54.2286%" y="95.50"></text></g><g><title>predicates_of (388,914 samples, 0.60%)</title><rect x="53.7902%" y="117" width="0.6015%" height="15" fill="rgb(228,99,48)"/><text x="54.0402%" y="127.50"></text></g><g><title>predicates_defined_on (338,543 samples, 0.52%)</title><rect x="53.8681%" y="101" width="0.5236%" height="15" fill="rgb(253,11,6)"/><text x="54.1181%" y="111.50"></text></g><g><title>type_collecting (1,953,901 samples, 3.02%)</title><rect x="51.5994%" y="149" width="3.0219%" height="15" fill="rgb(247,143,39)"/><text x="51.8494%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (1,930,971 samples, 2.99%)</title><rect x="51.6349%" y="133" width="2.9864%" height="15" fill="rgb(236,97,10)"/><text x="51.8849%" y="143.50">col..</text></g><g><title>type_of (118,982 samples, 0.18%)</title><rect x="54.4372%" y="117" width="0.1840%" height="15" fill="rgb(233,208,19)"/><text x="54.6872%" y="127.50"></text></g><g><title>evaluate_obligation (147,881 samples, 0.23%)</title><rect x="55.4250%" y="117" width="0.2287%" height="15" fill="rgb(216,164,2)"/><text x="55.6750%" y="127.50"></text></g><g><title>check_impl_item_well_formed (624,327 samples, 0.97%)</title><rect x="54.9128%" y="133" width="0.9656%" height="15" fill="rgb(220,129,5)"/><text x="55.1628%" y="143.50"></text></g><g><title>evaluate_obligation (359,595 samples, 0.56%)</title><rect x="58.8028%" y="117" width="0.5561%" height="15" fill="rgb(242,17,10)"/><text x="59.0528%" y="127.50"></text></g><g><title>implied_outlives_bounds (287,562 samples, 0.44%)</title><rect x="59.3764%" y="117" width="0.4447%" height="15" fill="rgb(242,107,0)"/><text x="59.6264%" y="127.50"></text></g><g><title>param_env (390,283 samples, 0.60%)</title><rect x="59.8211%" y="117" width="0.6036%" height="15" fill="rgb(251,28,31)"/><text x="60.0711%" y="127.50"></text></g><g><title>predicates_of (101,413 samples, 0.16%)</title><rect x="60.4247%" y="117" width="0.1568%" height="15" fill="rgb(233,223,10)"/><text x="60.6747%" y="127.50"></text></g><g><title>predicates_defined_on (72,302 samples, 0.11%)</title><rect x="60.4697%" y="101" width="0.1118%" height="15" fill="rgb(215,21,27)"/><text x="60.7197%" y="111.50"></text></g><g><title>region_scope_tree (258,290 samples, 0.40%)</title><rect x="60.5816%" y="117" width="0.3995%" height="15" fill="rgb(232,23,21)"/><text x="60.8316%" y="127.50"></text></g><g><title>check_item_well_formed (3,401,858 samples, 5.26%)</title><rect x="55.8783%" y="133" width="5.2612%" height="15" fill="rgb(244,5,23)"/><text x="56.1283%" y="143.50">check_..</text></g><g><title>variances_of (85,111 samples, 0.13%)</title><rect x="61.0080%" y="117" width="0.1316%" height="15" fill="rgb(226,81,46)"/><text x="61.2580%" y="127.50"></text></g><g><title>crate_variances (79,931 samples, 0.12%)</title><rect x="61.0160%" y="101" width="0.1236%" height="15" fill="rgb(247,70,30)"/><text x="61.2660%" y="111.50"></text></g><g><title>evaluate_obligation (202,742 samples, 0.31%)</title><rect x="62.4036%" y="117" width="0.3136%" height="15" fill="rgb(212,68,19)"/><text x="62.6536%" y="127.50"></text></g><g><title>implied_outlives_bounds (221,753 samples, 0.34%)</title><rect x="62.7171%" y="117" width="0.3430%" height="15" fill="rgb(240,187,13)"/><text x="62.9671%" y="127.50"></text></g><g><title>param_env (121,842 samples, 0.19%)</title><rect x="63.0601%" y="117" width="0.1884%" height="15" fill="rgb(223,113,26)"/><text x="63.3101%" y="127.50"></text></g><g><title>analysis (40,264,111 samples, 62.27%)</title><rect x="1.1471%" y="181" width="62.2716%" height="15" fill="rgb(206,192,2)"/><text x="1.3971%" y="191.50">analysis</text></g><g><title>type_check_crate (29,810,474 samples, 46.10%)</title><rect x="17.3145%" y="165" width="46.1042%" height="15" fill="rgb(241,108,4)"/><text x="17.5645%" y="175.50">type_check_crate</text></g><g><title>wf_checking (5,686,544 samples, 8.79%)</title><rect x="54.6240%" y="149" width="8.7947%" height="15" fill="rgb(247,173,49)"/><text x="54.8740%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,473,657 samples, 2.28%)</title><rect x="61.1396%" y="133" width="2.2791%" height="15" fill="rgb(224,114,35)"/><text x="61.3896%" y="143.50">c..</text></g><g><title>codegen_crate (266,813 samples, 0.41%)</title><rect x="63.4344%" y="181" width="0.4126%" height="15" fill="rgb(245,159,27)"/><text x="63.6844%" y="191.50"></text></g><g><title>AST_validation (143,601 samples, 0.22%)</title><rect x="64.2049%" y="165" width="0.2221%" height="15" fill="rgb(245,172,44)"/><text x="64.4549%" y="175.50"></text></g><g><title>complete_gated_feature_checking (69,721 samples, 0.11%)</title><rect x="64.4270%" y="165" width="0.1078%" height="15" fill="rgb(236,23,11)"/><text x="64.6770%" y="175.50"></text></g><g><title>crate_injection (99,262 samples, 0.15%)</title><rect x="64.5348%" y="165" width="0.1535%" height="15" fill="rgb(205,117,38)"/><text x="64.7848%" y="175.50"></text></g><g><title>metadata_load_macro (354,485 samples, 0.55%)</title><rect x="82.6741%" y="133" width="0.5482%" height="15" fill="rgb(237,72,25)"/><text x="82.9241%" y="143.50"></text></g><g><title>metadata_register_crate (191,273 samples, 0.30%)</title><rect x="83.2223%" y="133" width="0.2958%" height="15" fill="rgb(244,70,9)"/><text x="83.4723%" y="143.50"></text></g><g><title>macro_expand_crate (12,318,418 samples, 19.05%)</title><rect x="64.6883%" y="165" width="19.0514%" height="15" fill="rgb(217,125,39)"/><text x="64.9383%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (12,292,177 samples, 19.01%)</title><rect x="64.7289%" y="149" width="19.0108%" height="15" fill="rgb(235,36,10)"/><text x="64.9789%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (143,251 samples, 0.22%)</title><rect x="83.5181%" y="133" width="0.2215%" height="15" fill="rgb(251,123,47)"/><text x="83.7681%" y="143.50"></text></g><g><title>finalize_imports (68,900 samples, 0.11%)</title><rect x="83.8570%" y="149" width="0.1066%" height="15" fill="rgb(221,13,13)"/><text x="84.1070%" y="159.50"></text></g><g><title>finalize_macro_resolutions (332,083 samples, 0.51%)</title><rect x="83.9635%" y="149" width="0.5136%" height="15" fill="rgb(238,131,9)"/><text x="84.2135%" y="159.50"></text></g><g><title>late_resolve_crate (2,735,911 samples, 4.23%)</title><rect x="84.4771%" y="149" width="4.2313%" height="15" fill="rgb(211,50,8)"/><text x="84.7271%" y="159.50">late_..</text></g><g><title>configure_and_expand (16,200,512 samples, 25.06%)</title><rect x="63.8471%" y="181" width="25.0554%" height="15" fill="rgb(245,182,24)"/><text x="64.0971%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,273,467 samples, 5.06%)</title><rect x="83.8398%" y="165" width="5.0627%" height="15" fill="rgb(242,14,37)"/><text x="84.0898%" y="175.50">resolv..</text></g><g><title>drop_ast (176,192 samples, 0.27%)</title><rect x="88.9024%" y="181" width="0.2725%" height="15" fill="rgb(246,228,12)"/><text x="89.1524%" y="191.50"></text></g><g><title>early_lint_checks (398,165 samples, 0.62%)</title><rect x="89.1969%" y="181" width="0.6158%" height="15" fill="rgb(213,55,15)"/><text x="89.4469%" y="191.50"></text></g><g><title>free_global_ctxt (1,497,617 samples, 2.32%)</title><rect x="89.8127%" y="181" width="2.3162%" height="15" fill="rgb(209,9,3)"/><text x="90.0627%" y="191.50">f..</text></g><g><title>generate_crate_metadata (549,016 samples, 0.85%)</title><rect x="92.1289%" y="181" width="0.8491%" height="15" fill="rgb(230,59,30)"/><text x="92.3789%" y="191.50"></text></g><g><title>hir_lowering (2,618,409 samples, 4.05%)</title><rect x="92.9780%" y="181" width="4.0496%" height="15" fill="rgb(209,121,21)"/><text x="93.2280%" y="191.50">hir_..</text></g><g><title>parse_crate (623,717 samples, 0.96%)</title><rect x="97.0814%" y="181" width="0.9646%" height="15" fill="rgb(220,109,13)"/><text x="97.3314%" y="191.50"></text></g><g><title>prepare_outputs (336,024 samples, 0.52%)</title><rect x="98.0610%" y="181" width="0.5197%" height="15" fill="rgb(232,18,1)"/><text x="98.3110%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (430,845 samples, 0.67%)</title><rect x="98.5807%" y="181" width="0.6663%" height="15" fill="rgb(215,41,42)"/><text x="98.8307%" y="191.50"></text></g><g><title>setup_global_ctxt (167,222 samples, 0.26%)</title><rect x="99.2648%" y="181" width="0.2586%" height="15" fill="rgb(224,123,36)"/><text x="99.5148%" y="191.50"></text></g><g><title>all (64,658,863 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (64,658,863 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (308,163 samples, 0.48%)</title><rect x="99.5234%" y="181" width="0.4766%" height="15" fill="rgb(205,185,37)"/><text x="99.7734%" y="191.50"></text></g></svg></svg>