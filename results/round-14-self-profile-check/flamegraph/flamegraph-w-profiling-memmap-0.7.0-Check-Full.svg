<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (201,431 samples, 0.27%)</title><rect x="12.0017%" y="117" width="0.2652%" height="15" fill="rgb(227,0,7)"/><text x="12.2517%" y="127.50"></text></g><g><title>item_attrs (104,511 samples, 0.14%)</title><rect x="12.7600%" y="85" width="0.1376%" height="15" fill="rgb(217,0,24)"/><text x="13.0100%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (100,841 samples, 0.13%)</title><rect x="12.7649%" y="69" width="0.1328%" height="15" fill="rgb(221,193,54)"/><text x="13.0149%" y="79.50"></text></g><g><title>codegen_fn_attrs (175,023 samples, 0.23%)</title><rect x="12.6839%" y="101" width="0.2304%" height="15" fill="rgb(248,212,6)"/><text x="12.9339%" y="111.50"></text></g><g><title>adt_drop_tys (82,791 samples, 0.11%)</title><rect x="15.4736%" y="37" width="0.1090%" height="15" fill="rgb(208,68,35)"/><text x="15.7236%" y="47.50"></text></g><g><title>adt_drop_tys (127,753 samples, 0.17%)</title><rect x="15.4629%" y="53" width="0.1682%" height="15" fill="rgb(232,128,0)"/><text x="15.7129%" y="63.50"></text></g><g><title>adt_drop_tys (208,253 samples, 0.27%)</title><rect x="15.4438%" y="69" width="0.2742%" height="15" fill="rgb(207,160,47)"/><text x="15.6938%" y="79.50"></text></g><g><title>needs_drop_raw (590,644 samples, 0.78%)</title><rect x="15.3806%" y="85" width="0.7776%" height="15" fill="rgb(228,23,34)"/><text x="15.6306%" y="95.50"></text></g><g><title>is_copy_raw (334,451 samples, 0.44%)</title><rect x="15.7179%" y="69" width="0.4403%" height="15" fill="rgb(218,30,26)"/><text x="15.9679%" y="79.50"></text></g><g><title>evaluate_obligation (287,501 samples, 0.38%)</title><rect x="15.7797%" y="53" width="0.3785%" height="15" fill="rgb(220,122,19)"/><text x="16.0297%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (106,892 samples, 0.14%)</title><rect x="16.3452%" y="69" width="0.1407%" height="15" fill="rgb(250,228,42)"/><text x="16.5952%" y="79.50"></text></g><g><title>specialization_graph_of (308,863 samples, 0.41%)</title><rect x="16.5525%" y="69" width="0.4066%" height="15" fill="rgb(240,193,28)"/><text x="16.8025%" y="79.50"></text></g><g><title>resolve_instance (680,368 samples, 0.90%)</title><rect x="16.1583%" y="85" width="0.8957%" height="15" fill="rgb(216,20,37)"/><text x="16.4083%" y="95.50"></text></g><g><title>thir_body (770,347 samples, 1.01%)</title><rect x="17.0837%" y="85" width="1.0142%" height="15" fill="rgb(206,188,39)"/><text x="17.3337%" y="95.50"></text></g><g><title>mir_const (5,261,573 samples, 6.93%)</title><rect x="11.1889%" y="133" width="6.9272%" height="15" fill="rgb(217,207,13)"/><text x="11.4389%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (4,442,835 samples, 5.85%)</title><rect x="12.2669%" y="117" width="5.8493%" height="15" fill="rgb(231,73,38)"/><text x="12.5169%" y="127.50">unsafet..</text></g><g><title>mir_built (3,951,052 samples, 5.20%)</title><rect x="12.9143%" y="101" width="5.2018%" height="15" fill="rgb(225,20,46)"/><text x="13.1643%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (6,046,573 samples, 7.96%)</title><rect x="10.4000%" y="149" width="7.9607%" height="15" fill="rgb(210,31,41)"/><text x="10.6500%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (185,762 samples, 0.24%)</title><rect x="18.1161%" y="133" width="0.2446%" height="15" fill="rgb(221,200,47)"/><text x="18.3661%" y="143.50"></text></g><g><title>mir_const (115,882 samples, 0.15%)</title><rect x="18.2081%" y="117" width="0.1526%" height="15" fill="rgb(226,26,5)"/><text x="18.4581%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (231,402 samples, 0.30%)</title><rect x="18.3607%" y="149" width="0.3047%" height="15" fill="rgb(249,33,26)"/><text x="18.6107%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (115,001 samples, 0.15%)</title><rect x="18.6653%" y="149" width="0.1514%" height="15" fill="rgb(235,183,28)"/><text x="18.9153%" y="159.50"></text></g><g><title>type_op_normalize_predicate (93,060 samples, 0.12%)</title><rect x="18.8167%" y="149" width="0.1225%" height="15" fill="rgb(221,5,38)"/><text x="19.0667%" y="159.50"></text></g><g><title>type_op_prove_predicate (833,155 samples, 1.10%)</title><rect x="18.9393%" y="149" width="1.0969%" height="15" fill="rgb(247,18,42)"/><text x="19.1893%" y="159.50"></text></g><g><title>evaluate_obligation (114,152 samples, 0.15%)</title><rect x="19.8859%" y="133" width="0.1503%" height="15" fill="rgb(241,131,45)"/><text x="20.1359%" y="143.50"></text></g><g><title>MIR_borrow_checking (14,559,792 samples, 19.17%)</title><rect x="0.8835%" y="181" width="19.1688%" height="15" fill="rgb(249,31,29)"/><text x="1.1335%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,467,181 samples, 19.05%)</title><rect x="1.0054%" y="165" width="19.0469%" height="15" fill="rgb(225,111,53)"/><text x="1.2554%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (132,251 samples, 0.17%)</title><rect x="20.0523%" y="181" width="0.1741%" height="15" fill="rgb(238,160,17)"/><text x="20.3023%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (88,431 samples, 0.12%)</title><rect x="20.1100%" y="165" width="0.1164%" height="15" fill="rgb(214,148,48)"/><text x="20.3600%" y="175.50"></text></g><g><title>hir_module_items (122,691 samples, 0.16%)</title><rect x="20.2264%" y="181" width="0.1615%" height="15" fill="rgb(232,36,49)"/><text x="20.4764%" y="191.50"></text></g><g><title>codegen_fn_attrs (190,692 samples, 0.25%)</title><rect x="20.8001%" y="117" width="0.2511%" height="15" fill="rgb(209,103,24)"/><text x="21.0501%" y="127.50"></text></g><g><title>codegen_fn_attrs (329,922 samples, 0.43%)</title><rect x="20.6247%" y="149" width="0.4344%" height="15" fill="rgb(229,88,8)"/><text x="20.8747%" y="159.50"></text></g><g><title>should_inherit_track_caller (287,182 samples, 0.38%)</title><rect x="20.6810%" y="133" width="0.3781%" height="15" fill="rgb(213,181,19)"/><text x="20.9310%" y="143.50"></text></g><g><title>check_mod_attrs (490,026 samples, 0.65%)</title><rect x="20.4142%" y="165" width="0.6451%" height="15" fill="rgb(254,191,54)"/><text x="20.6642%" y="175.50"></text></g><g><title>check_mod_const_bodies (84,590 samples, 0.11%)</title><rect x="21.0594%" y="165" width="0.1114%" height="15" fill="rgb(241,83,37)"/><text x="21.3094%" y="175.50"></text></g><g><title>lint_levels (88,491 samples, 0.12%)</title><rect x="21.3870%" y="149" width="0.1165%" height="15" fill="rgb(233,36,39)"/><text x="21.6370%" y="159.50"></text></g><g><title>lookup_deprecation_entry (108,441 samples, 0.14%)</title><rect x="21.5035%" y="149" width="0.1428%" height="15" fill="rgb(226,3,54)"/><text x="21.7535%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (405,175 samples, 0.53%)</title><rect x="21.2313%" y="165" width="0.5334%" height="15" fill="rgb(245,192,40)"/><text x="21.4813%" y="175.50"></text></g><g><title>misc_checking_1 (1,083,202 samples, 1.43%)</title><rect x="20.3885%" y="181" width="1.4261%" height="15" fill="rgb(238,167,29)"/><text x="20.6385%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (279,653 samples, 0.37%)</title><rect x="21.8166%" y="165" width="0.3682%" height="15" fill="rgb(232,182,51)"/><text x="22.0666%" y="175.50"></text></g><g><title>check_mod_liveness (220,742 samples, 0.29%)</title><rect x="21.8942%" y="149" width="0.2906%" height="15" fill="rgb(231,60,39)"/><text x="22.1442%" y="159.50"></text></g><g><title>misc_checking_2 (619,097 samples, 0.82%)</title><rect x="21.8146%" y="181" width="0.8151%" height="15" fill="rgb(208,69,12)"/><text x="22.0646%" y="191.50"></text></g><g><title>match_checking (337,874 samples, 0.44%)</title><rect x="22.1848%" y="165" width="0.4448%" height="15" fill="rgb(235,93,37)"/><text x="22.4348%" y="175.50"></text></g><g><title>check_match (313,723 samples, 0.41%)</title><rect x="22.2166%" y="149" width="0.4130%" height="15" fill="rgb(213,116,39)"/><text x="22.4666%" y="159.50"></text></g><g><title>check_private_in_public (128,761 samples, 0.17%)</title><rect x="22.6427%" y="165" width="0.1695%" height="15" fill="rgb(222,207,29)"/><text x="22.8927%" y="175.50"></text></g><g><title>death_checking (259,993 samples, 0.34%)</title><rect x="22.8122%" y="165" width="0.3423%" height="15" fill="rgb(206,96,30)"/><text x="23.0622%" y="175.50"></text></g><g><title>eval_to_const_value_raw (167,962 samples, 0.22%)</title><rect x="23.9724%" y="133" width="0.2211%" height="15" fill="rgb(218,138,4)"/><text x="24.2224%" y="143.50"></text></g><g><title>eval_to_const_value_raw (160,452 samples, 0.21%)</title><rect x="23.9823%" y="117" width="0.2112%" height="15" fill="rgb(250,191,14)"/><text x="24.2323%" y="127.50"></text></g><g><title>eval_to_allocation_raw (158,622 samples, 0.21%)</title><rect x="23.9847%" y="101" width="0.2088%" height="15" fill="rgb(239,60,40)"/><text x="24.2347%" y="111.50"></text></g><g><title>param_env (126,371 samples, 0.17%)</title><rect x="24.1935%" y="133" width="0.1664%" height="15" fill="rgb(206,27,48)"/><text x="24.4435%" y="143.50"></text></g><g><title>crate_lints (2,017,773 samples, 2.66%)</title><rect x="23.1564%" y="149" width="2.6565%" height="15" fill="rgb(225,35,8)"/><text x="23.4064%" y="159.50">cr..</text></g><g><title>type_of (1,066,144 samples, 1.40%)</title><rect x="24.4093%" y="133" width="1.4036%" height="15" fill="rgb(250,213,24)"/><text x="24.6593%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (833,511 samples, 1.10%)</title><rect x="24.7156%" y="117" width="1.0974%" height="15" fill="rgb(247,123,22)"/><text x="24.9656%" y="127.50"></text></g><g><title>lint_checking (2,263,045 samples, 2.98%)</title><rect x="23.1545%" y="165" width="2.9794%" height="15" fill="rgb(231,138,38)"/><text x="23.4045%" y="175.50">lin..</text></g><g><title>module_lints (243,832 samples, 0.32%)</title><rect x="25.8129%" y="149" width="0.3210%" height="15" fill="rgb(231,145,46)"/><text x="26.0629%" y="159.50"></text></g><g><title>lint_mod (240,362 samples, 0.32%)</title><rect x="25.8175%" y="133" width="0.3165%" height="15" fill="rgb(251,118,11)"/><text x="26.0675%" y="143.50"></text></g><g><title>privacy_access_levels (129,952 samples, 0.17%)</title><rect x="26.1339%" y="165" width="0.1711%" height="15" fill="rgb(217,147,25)"/><text x="26.3839%" y="175.50"></text></g><g><title>privacy_checking_modules (444,475 samples, 0.59%)</title><rect x="26.3050%" y="165" width="0.5852%" height="15" fill="rgb(247,81,37)"/><text x="26.5550%" y="175.50"></text></g><g><title>check_mod_privacy (442,015 samples, 0.58%)</title><rect x="26.3083%" y="149" width="0.5819%" height="15" fill="rgb(209,12,38)"/><text x="26.5583%" y="159.50"></text></g><g><title>misc_checking_3 (3,248,086 samples, 4.28%)</title><rect x="22.6296%" y="181" width="4.2763%" height="15" fill="rgb(227,1,9)"/><text x="22.8796%" y="191.50">misc_..</text></g><g><title>impl_parent (1,886,860 samples, 2.48%)</title><rect x="29.9837%" y="117" width="2.4842%" height="15" fill="rgb(248,47,43)"/><text x="30.2337%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,018,302 samples, 1.34%)</title><rect x="31.1272%" y="101" width="1.3407%" height="15" fill="rgb(221,10,30)"/><text x="31.3772%" y="111.50"></text></g><g><title>impl_trait_ref (4,243,734 samples, 5.59%)</title><rect x="32.4678%" y="117" width="5.5871%" height="15" fill="rgb(210,229,1)"/><text x="32.7178%" y="127.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,630,620 samples, 4.78%)</title><rect x="33.2750%" y="101" width="4.7799%" height="15" fill="rgb(222,148,37)"/><text x="33.5250%" y="111.50">metada..</text></g><g><title>coherent_trait (8,924,559 samples, 11.75%)</title><rect x="26.9983%" y="149" width="11.7497%" height="15" fill="rgb(234,67,33)"/><text x="27.2483%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (8,909,159 samples, 11.73%)</title><rect x="27.0186%" y="133" width="11.7294%" height="15" fill="rgb(247,98,35)"/><text x="27.2686%" y="143.50">specialization_gr..</text></g><g><title>trait_impls_of (524,795 samples, 0.69%)</title><rect x="38.0571%" y="117" width="0.6909%" height="15" fill="rgb(247,138,52)"/><text x="38.3071%" y="127.50"></text></g><g><title>implementations_of_trait (154,781 samples, 0.20%)</title><rect x="38.5442%" y="101" width="0.2038%" height="15" fill="rgb(213,79,30)"/><text x="38.7942%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (110,451 samples, 0.15%)</title><rect x="38.6026%" y="85" width="0.1454%" height="15" fill="rgb(246,177,23)"/><text x="38.8526%" y="95.50"></text></g><g><title>coherence_checking (8,990,831 samples, 11.84%)</title><rect x="26.9697%" y="165" width="11.8370%" height="15" fill="rgb(230,62,27)"/><text x="27.2197%" y="175.50">coherence_checking</text></g><g><title>associated_item (215,153 samples, 0.28%)</title><rect x="51.8464%" y="101" width="0.2833%" height="15" fill="rgb(216,154,8)"/><text x="52.0964%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (170,453 samples, 0.22%)</title><rect x="51.9052%" y="85" width="0.2244%" height="15" fill="rgb(244,35,45)"/><text x="52.1552%" y="95.50"></text></g><g><title>associated_items (323,135 samples, 0.43%)</title><rect x="51.7253%" y="117" width="0.4254%" height="15" fill="rgb(251,115,12)"/><text x="51.9753%" y="127.50"></text></g><g><title>adt_dtorck_constraint (88,781 samples, 0.12%)</title><rect x="52.4014%" y="69" width="0.1169%" height="15" fill="rgb(240,54,50)"/><text x="52.6514%" y="79.50"></text></g><g><title>adt_dtorck_constraint (97,721 samples, 0.13%)</title><rect x="52.3919%" y="85" width="0.1287%" height="15" fill="rgb(233,84,52)"/><text x="52.6419%" y="95.50"></text></g><g><title>dropck_outlives (256,884 samples, 0.34%)</title><rect x="52.2047%" y="117" width="0.3382%" height="15" fill="rgb(207,117,47)"/><text x="52.4547%" y="127.50"></text></g><g><title>adt_dtorck_constraint (187,872 samples, 0.25%)</title><rect x="52.2955%" y="101" width="0.2473%" height="15" fill="rgb(249,43,39)"/><text x="52.5455%" y="111.50"></text></g><g><title>generics_of (94,023 samples, 0.12%)</title><rect x="53.5820%" y="101" width="0.1238%" height="15" fill="rgb(209,38,44)"/><text x="53.8320%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (78,013 samples, 0.10%)</title><rect x="53.6031%" y="85" width="0.1027%" height="15" fill="rgb(236,212,23)"/><text x="53.8531%" y="95.50"></text></g><g><title>impl_trait_ref (76,490 samples, 0.10%)</title><rect x="53.8207%" y="101" width="0.1007%" height="15" fill="rgb(242,79,21)"/><text x="54.0707%" y="111.50"></text></g><g><title>predicates_of (199,671 samples, 0.26%)</title><rect x="53.9408%" y="101" width="0.2629%" height="15" fill="rgb(211,96,35)"/><text x="54.1908%" y="111.50"></text></g><g><title>predicates_defined_on (125,131 samples, 0.16%)</title><rect x="54.0389%" y="85" width="0.1647%" height="15" fill="rgb(253,215,40)"/><text x="54.2889%" y="95.50"></text></g><g><title>specializes (258,881 samples, 0.34%)</title><rect x="54.2036%" y="101" width="0.3408%" height="15" fill="rgb(211,81,21)"/><text x="54.4536%" y="111.50"></text></g><g><title>param_env (209,301 samples, 0.28%)</title><rect x="54.2689%" y="85" width="0.2756%" height="15" fill="rgb(208,190,38)"/><text x="54.5189%" y="95.50"></text></g><g><title>def_span (143,940 samples, 0.19%)</title><rect x="54.3550%" y="69" width="0.1895%" height="15" fill="rgb(235,213,38)"/><text x="54.6050%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (138,700 samples, 0.18%)</title><rect x="54.3619%" y="53" width="0.1826%" height="15" fill="rgb(237,122,38)"/><text x="54.6119%" y="63.50"></text></g><g><title>trait_impls_of (525,387 samples, 0.69%)</title><rect x="54.5605%" y="101" width="0.6917%" height="15" fill="rgb(244,218,35)"/><text x="54.8105%" y="111.50"></text></g><g><title>implementations_of_trait (188,822 samples, 0.25%)</title><rect x="55.0036%" y="85" width="0.2486%" height="15" fill="rgb(240,68,47)"/><text x="55.2536%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (134,872 samples, 0.18%)</title><rect x="55.0746%" y="69" width="0.1776%" height="15" fill="rgb(210,16,53)"/><text x="55.3246%" y="79.50"></text></g><g><title>evaluate_obligation (2,063,464 samples, 2.72%)</title><rect x="52.5429%" y="117" width="2.7167%" height="15" fill="rgb(235,124,12)"/><text x="52.7929%" y="127.50">ev..</text></g><g><title>fn_sig (88,211 samples, 0.12%)</title><rect x="55.2785%" y="117" width="0.1161%" height="15" fill="rgb(224,169,11)"/><text x="55.5285%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (78,551 samples, 0.10%)</title><rect x="55.2913%" y="101" width="0.1034%" height="15" fill="rgb(250,166,2)"/><text x="55.5413%" y="111.50"></text></g><g><title>generics_of (85,310 samples, 0.11%)</title><rect x="55.3947%" y="117" width="0.1123%" height="15" fill="rgb(242,216,29)"/><text x="55.6447%" y="127.50"></text></g><g><title>item_attrs (139,682 samples, 0.18%)</title><rect x="55.6629%" y="117" width="0.1839%" height="15" fill="rgb(230,116,27)"/><text x="55.9129%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (132,562 samples, 0.17%)</title><rect x="55.6723%" y="101" width="0.1745%" height="15" fill="rgb(228,99,48)"/><text x="55.9223%" y="111.50"></text></g><g><title>method_autoderef_steps (129,151 samples, 0.17%)</title><rect x="55.8994%" y="117" width="0.1700%" height="15" fill="rgb(253,11,6)"/><text x="56.1494%" y="127.50"></text></g><g><title>object_safety_violations (131,021 samples, 0.17%)</title><rect x="56.0695%" y="117" width="0.1725%" height="15" fill="rgb(247,143,39)"/><text x="56.3195%" y="127.50"></text></g><g><title>predicates_of (235,433 samples, 0.31%)</title><rect x="56.2851%" y="117" width="0.3100%" height="15" fill="rgb(236,97,10)"/><text x="56.5351%" y="127.50"></text></g><g><title>predicates_defined_on (156,393 samples, 0.21%)</title><rect x="56.3891%" y="101" width="0.2059%" height="15" fill="rgb(233,208,19)"/><text x="56.6391%" y="111.50"></text></g><g><title>type_of (77,491 samples, 0.10%)</title><rect x="56.6077%" y="117" width="0.1020%" height="15" fill="rgb(216,164,2)"/><text x="56.8577%" y="127.50"></text></g><g><title>associated_item (131,162 samples, 0.17%)</title><rect x="61.0782%" y="85" width="0.1727%" height="15" fill="rgb(220,129,5)"/><text x="61.3282%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (98,310 samples, 0.13%)</title><rect x="61.1214%" y="69" width="0.1294%" height="15" fill="rgb(242,17,10)"/><text x="61.3714%" y="79.50"></text></g><g><title>associated_items (200,532 samples, 0.26%)</title><rect x="61.0012%" y="101" width="0.2640%" height="15" fill="rgb(242,107,0)"/><text x="61.2512%" y="111.50"></text></g><g><title>adt_dtorck_constraint (96,381 samples, 0.13%)</title><rect x="61.3958%" y="69" width="0.1269%" height="15" fill="rgb(251,28,31)"/><text x="61.6458%" y="79.50"></text></g><g><title>dropck_outlives (183,092 samples, 0.24%)</title><rect x="61.2885%" y="101" width="0.2411%" height="15" fill="rgb(233,223,10)"/><text x="61.5385%" y="111.50"></text></g><g><title>adt_dtorck_constraint (142,152 samples, 0.19%)</title><rect x="61.3424%" y="85" width="0.1872%" height="15" fill="rgb(215,21,27)"/><text x="61.5924%" y="95.50"></text></g><g><title>evaluate_obligation (400,597 samples, 0.53%)</title><rect x="61.5296%" y="101" width="0.5274%" height="15" fill="rgb(232,23,21)"/><text x="61.7796%" y="111.50"></text></g><g><title>trait_impls_of (96,512 samples, 0.13%)</title><rect x="61.9299%" y="85" width="0.1271%" height="15" fill="rgb(244,5,23)"/><text x="62.1799%" y="95.50"></text></g><g><title>is_copy_raw (376,193 samples, 0.50%)</title><rect x="62.1780%" y="101" width="0.4953%" height="15" fill="rgb(226,81,46)"/><text x="62.4280%" y="111.50"></text></g><g><title>evaluate_obligation (345,703 samples, 0.46%)</title><rect x="62.2182%" y="85" width="0.4551%" height="15" fill="rgb(247,70,30)"/><text x="62.4682%" y="95.50"></text></g><g><title>trait_impls_of (167,672 samples, 0.22%)</title><rect x="62.4526%" y="69" width="0.2208%" height="15" fill="rgb(212,68,19)"/><text x="62.7026%" y="79.50"></text></g><g><title>predicates_of (114,192 samples, 0.15%)</title><rect x="62.7986%" y="101" width="0.1503%" height="15" fill="rgb(240,187,13)"/><text x="63.0486%" y="111.50"></text></g><g><title>predicates_defined_on (78,211 samples, 0.10%)</title><rect x="62.8460%" y="85" width="0.1030%" height="15" fill="rgb(223,113,26)"/><text x="63.0960%" y="95.50"></text></g><g><title>typeck (4,791,453 samples, 6.31%)</title><rect x="56.7097%" y="117" width="6.3082%" height="15" fill="rgb(206,192,2)"/><text x="56.9597%" y="127.50">typeck</text></g><g><title>item_bodies_checking (18,414,004 samples, 24.24%)</title><rect x="38.8378%" y="165" width="24.2431%" height="15" fill="rgb(241,108,4)"/><text x="39.0878%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,410,834 samples, 24.24%)</title><rect x="38.8420%" y="149" width="24.2389%" height="15" fill="rgb(247,173,49)"/><text x="39.0920%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (18,353,414 samples, 24.16%)</title><rect x="38.9176%" y="133" width="24.1633%" height="15" fill="rgb(224,114,35)"/><text x="39.1676%" y="143.50">typeck</text></g><g><title>item_types_checking (570,546 samples, 0.75%)</title><rect x="63.0809%" y="165" width="0.7512%" height="15" fill="rgb(245,159,27)"/><text x="63.3309%" y="175.50"></text></g><g><title>check_mod_item_types (567,706 samples, 0.75%)</title><rect x="63.0846%" y="149" width="0.7474%" height="15" fill="rgb(245,172,44)"/><text x="63.3346%" y="159.50"></text></g><g><title>typeck (108,351 samples, 0.14%)</title><rect x="63.6894%" y="133" width="0.1427%" height="15" fill="rgb(236,23,11)"/><text x="63.9394%" y="143.50"></text></g><g><title>late_bound_vars_map (98,921 samples, 0.13%)</title><rect x="64.2382%" y="117" width="0.1302%" height="15" fill="rgb(205,117,38)"/><text x="64.4882%" y="127.50"></text></g><g><title>resolve_lifetimes (88,161 samples, 0.12%)</title><rect x="64.2523%" y="101" width="0.1161%" height="15" fill="rgb(237,72,25)"/><text x="64.5023%" y="111.50"></text></g><g><title>fn_sig (261,733 samples, 0.34%)</title><rect x="64.0670%" y="133" width="0.3446%" height="15" fill="rgb(244,70,9)"/><text x="64.3170%" y="143.50"></text></g><g><title>named_region_map (158,933 samples, 0.21%)</title><rect x="64.5162%" y="117" width="0.2092%" height="15" fill="rgb(217,125,39)"/><text x="64.7662%" y="127.50"></text></g><g><title>resolve_lifetimes (140,133 samples, 0.18%)</title><rect x="64.5410%" y="101" width="0.1845%" height="15" fill="rgb(235,36,10)"/><text x="64.7910%" y="111.50"></text></g><g><title>generics_of (249,093 samples, 0.33%)</title><rect x="64.4116%" y="133" width="0.3279%" height="15" fill="rgb(251,123,47)"/><text x="64.6616%" y="143.50"></text></g><g><title>predicates_of (268,443 samples, 0.35%)</title><rect x="64.7900%" y="133" width="0.3534%" height="15" fill="rgb(221,13,13)"/><text x="65.0400%" y="143.50"></text></g><g><title>predicates_defined_on (237,773 samples, 0.31%)</title><rect x="64.8303%" y="117" width="0.3130%" height="15" fill="rgb(238,131,9)"/><text x="65.0803%" y="127.50"></text></g><g><title>inferred_outlives_of (132,372 samples, 0.17%)</title><rect x="64.9691%" y="101" width="0.1743%" height="15" fill="rgb(211,50,8)"/><text x="65.2191%" y="111.50"></text></g><g><title>inferred_outlives_crate (120,661 samples, 0.16%)</title><rect x="64.9845%" y="85" width="0.1589%" height="15" fill="rgb(245,182,24)"/><text x="65.2345%" y="95.50"></text></g><g><title>type_collecting (1,063,802 samples, 1.40%)</title><rect x="63.8344%" y="165" width="1.4006%" height="15" fill="rgb(242,14,37)"/><text x="64.0844%" y="175.50"></text></g><g><title>collect_mod_item_types (1,052,761 samples, 1.39%)</title><rect x="63.8490%" y="149" width="1.3860%" height="15" fill="rgb(246,228,12)"/><text x="64.0990%" y="159.50"></text></g><g><title>adt_sized_constraint (97,781 samples, 0.13%)</title><rect x="67.2008%" y="117" width="0.1287%" height="15" fill="rgb(213,55,15)"/><text x="67.4508%" y="127.50"></text></g><g><title>evaluate_obligation (337,581 samples, 0.44%)</title><rect x="66.9280%" y="133" width="0.4444%" height="15" fill="rgb(209,9,3)"/><text x="67.1780%" y="143.50"></text></g><g><title>implied_outlives_bounds (115,202 samples, 0.15%)</title><rect x="67.3724%" y="133" width="0.1517%" height="15" fill="rgb(230,59,30)"/><text x="67.6224%" y="143.50"></text></g><g><title>param_env (174,743 samples, 0.23%)</title><rect x="67.5241%" y="133" width="0.2301%" height="15" fill="rgb(209,121,21)"/><text x="67.7741%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,063,751 samples, 2.72%)</title><rect x="65.3860%" y="149" width="2.7170%" height="15" fill="rgb(220,109,13)"/><text x="65.6360%" y="159.50">ch..</text></g><g><title>region_scope_tree (237,132 samples, 0.31%)</title><rect x="67.7909%" y="133" width="0.3122%" height="15" fill="rgb(232,18,1)"/><text x="68.0409%" y="143.50"></text></g><g><title>evaluate_obligation (216,701 samples, 0.29%)</title><rect x="68.7149%" y="133" width="0.2853%" height="15" fill="rgb(215,41,42)"/><text x="68.9649%" y="143.50"></text></g><g><title>param_env (170,712 samples, 0.22%)</title><rect x="69.0567%" y="133" width="0.2248%" height="15" fill="rgb(224,123,36)"/><text x="69.3067%" y="143.50"></text></g><g><title>analysis (52,283,730 samples, 68.83%)</title><rect x="0.6189%" y="197" width="68.8346%" height="15" fill="rgb(240,125,3)"/><text x="0.8689%" y="207.50">analysis</text></g><g><title>type_check_crate (32,317,279 samples, 42.55%)</title><rect x="26.9059%" y="181" width="42.5476%" height="15" fill="rgb(205,98,50)"/><text x="27.1559%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,200,395 samples, 4.21%)</title><rect x="65.2400%" y="165" width="4.2135%" height="15" fill="rgb(205,185,37)"/><text x="65.4900%" y="175.50">wf_ch..</text></g><g><title>check_item_well_formed (1,025,734 samples, 1.35%)</title><rect x="68.1031%" y="149" width="1.3504%" height="15" fill="rgb(238,207,15)"/><text x="68.3531%" y="159.50"></text></g><g><title>codegen_crate (369,054 samples, 0.49%)</title><rect x="69.4626%" y="197" width="0.4859%" height="15" fill="rgb(213,199,42)"/><text x="69.7126%" y="207.50"></text></g><g><title>AST_validation (78,301 samples, 0.10%)</title><rect x="70.1769%" y="181" width="0.1031%" height="15" fill="rgb(235,201,11)"/><text x="70.4269%" y="191.50"></text></g><g><title>metadata_load_macro (107,181 samples, 0.14%)</title><rect x="78.9401%" y="149" width="0.1411%" height="15" fill="rgb(207,46,11)"/><text x="79.1901%" y="159.50"></text></g><g><title>metadata_register_crate (1,275,164 samples, 1.68%)</title><rect x="79.0812%" y="149" width="1.6788%" height="15" fill="rgb(241,35,35)"/><text x="79.3312%" y="159.50"></text></g><g><title>metadata_register_crate (478,014 samples, 0.63%)</title><rect x="80.1307%" y="133" width="0.6293%" height="15" fill="rgb(243,32,47)"/><text x="80.3807%" y="143.50"></text></g><g><title>macro_expand_crate (7,898,057 samples, 10.40%)</title><rect x="70.4152%" y="181" width="10.3983%" height="15" fill="rgb(247,202,23)"/><text x="70.6652%" y="191.50">macro_expand_cr..</text></g><g><title>expand_crate (7,882,267 samples, 10.38%)</title><rect x="70.4360%" y="165" width="10.3775%" height="15" fill="rgb(219,102,11)"/><text x="70.6860%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (146,812 samples, 0.19%)</title><rect x="80.8227%" y="181" width="0.1933%" height="15" fill="rgb(243,110,44)"/><text x="81.0727%" y="191.50"></text></g><g><title>late_resolve_crate (4,430,699 samples, 5.83%)</title><rect x="81.1343%" y="165" width="5.8333%" height="15" fill="rgb(222,74,54)"/><text x="81.3843%" y="175.50">late_re..</text></g><g><title>configure_and_expand (12,989,043 samples, 17.10%)</title><rect x="69.9485%" y="197" width="17.1008%" height="15" fill="rgb(216,99,12)"/><text x="70.1985%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,582,651 samples, 6.03%)</title><rect x="81.0160%" y="181" width="6.0333%" height="15" fill="rgb(226,22,26)"/><text x="81.2660%" y="191.50">resolve_..</text></g><g><title>drop_ast (138,302 samples, 0.18%)</title><rect x="87.0494%" y="197" width="0.1821%" height="15" fill="rgb(217,163,10)"/><text x="87.2994%" y="207.50"></text></g><g><title>early_lint_checks (235,622 samples, 0.31%)</title><rect x="87.2524%" y="197" width="0.3102%" height="15" fill="rgb(213,25,53)"/><text x="87.5024%" y="207.50"></text></g><g><title>free_global_ctxt (3,361,977 samples, 4.43%)</title><rect x="87.5627%" y="197" width="4.4262%" height="15" fill="rgb(252,105,26)"/><text x="87.8127%" y="207.50">free_..</text></g><g><title>generate_crate_metadata (687,198 samples, 0.90%)</title><rect x="91.9889%" y="197" width="0.9047%" height="15" fill="rgb(220,39,43)"/><text x="92.2389%" y="207.50"></text></g><g><title>hir_lowering (1,591,098 samples, 2.09%)</title><rect x="92.8936%" y="197" width="2.0948%" height="15" fill="rgb(229,68,48)"/><text x="93.1436%" y="207.50">h..</text></g><g><title>parse_crate (2,587,489 samples, 3.41%)</title><rect x="95.0545%" y="197" width="3.4066%" height="15" fill="rgb(252,8,32)"/><text x="95.3045%" y="207.50">par..</text></g><g><title>prepare_outputs (191,462 samples, 0.25%)</title><rect x="98.4686%" y="197" width="0.2521%" height="15" fill="rgb(223,20,43)"/><text x="98.7186%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (583,667 samples, 0.77%)</title><rect x="98.7207%" y="197" width="0.7684%" height="15" fill="rgb(229,81,49)"/><text x="98.9707%" y="207.50"></text></g><g><title>setup_global_ctxt (91,562 samples, 0.12%)</title><rect x="99.5026%" y="197" width="0.1205%" height="15" fill="rgb(236,28,36)"/><text x="99.7526%" y="207.50"></text></g><g><title>all (75,955,603 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (75,955,603 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (286,253 samples, 0.38%)</title><rect x="99.6231%" y="197" width="0.3769%" height="15" fill="rgb(233,201,37)"/><text x="99.8731%" y="207.50"></text></g></svg></svg>