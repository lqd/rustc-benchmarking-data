<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (901,400 samples, 0.14%)</title><rect x="13.6416%" y="101" width="0.1393%" height="15" fill="rgb(227,0,7)"/><text x="13.8916%" y="111.50"></text></g><g><title>codegen_fn_attrs (661,749 samples, 0.10%)</title><rect x="14.2663%" y="85" width="0.1023%" height="15" fill="rgb(217,0,24)"/><text x="14.5163%" y="95.50"></text></g><g><title>is_copy_raw (1,002,612 samples, 0.15%)</title><rect x="17.0169%" y="69" width="0.1549%" height="15" fill="rgb(221,193,54)"/><text x="17.2669%" y="79.50"></text></g><g><title>evaluate_obligation (802,640 samples, 0.12%)</title><rect x="17.0478%" y="53" width="0.1240%" height="15" fill="rgb(248,212,6)"/><text x="17.2978%" y="63.50"></text></g><g><title>needs_drop_raw (2,573,344 samples, 0.40%)</title><rect x="17.1748%" y="69" width="0.3977%" height="15" fill="rgb(208,68,35)"/><text x="17.4248%" y="79.50"></text></g><g><title>is_copy_raw (2,103,096 samples, 0.32%)</title><rect x="17.2475%" y="53" width="0.3250%" height="15" fill="rgb(232,128,0)"/><text x="17.4975%" y="63.50"></text></g><g><title>evaluate_obligation (1,743,854 samples, 0.27%)</title><rect x="17.3030%" y="37" width="0.2695%" height="15" fill="rgb(207,160,47)"/><text x="17.5530%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (2,771,258 samples, 0.43%)</title><rect x="17.8000%" y="53" width="0.4282%" height="15" fill="rgb(228,23,34)"/><text x="18.0500%" y="63.50"></text></g><g><title>specialization_graph_of (1,021,292 samples, 0.16%)</title><rect x="18.2727%" y="53" width="0.1578%" height="15" fill="rgb(218,30,26)"/><text x="18.5227%" y="63.50"></text></g><g><title>resolve_instance (5,809,466 samples, 0.90%)</title><rect x="17.5724%" y="69" width="0.8977%" height="15" fill="rgb(220,122,19)"/><text x="17.8224%" y="79.50"></text></g><g><title>thir_body (7,172,053 samples, 1.11%)</title><rect x="18.5020%" y="69" width="1.1083%" height="15" fill="rgb(250,228,42)"/><text x="18.7520%" y="79.50"></text></g><g><title>mir_const (44,221,404 samples, 6.83%)</title><rect x="12.7972%" y="117" width="6.8335%" height="15" fill="rgb(240,193,28)"/><text x="13.0472%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (37,855,637 samples, 5.85%)</title><rect x="13.7809%" y="101" width="5.8498%" height="15" fill="rgb(216,20,37)"/><text x="14.0309%" y="111.50">unsafet..</text></g><g><title>mir_built (34,052,301 samples, 5.26%)</title><rect x="14.3686%" y="85" width="5.2621%" height="15" fill="rgb(206,188,39)"/><text x="14.6186%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (50,549,095 samples, 7.81%)</title><rect x="11.9093%" y="133" width="7.8114%" height="15" fill="rgb(217,207,13)"/><text x="12.1593%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,331,444 samples, 0.21%)</title><rect x="19.7206%" y="133" width="0.2057%" height="15" fill="rgb(231,73,38)"/><text x="19.9706%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,926,187 samples, 0.45%)</title><rect x="19.9264%" y="133" width="0.4522%" height="15" fill="rgb(225,20,46)"/><text x="20.1764%" y="143.50"></text></g><g><title>normalize_projection_ty (1,621,876 samples, 0.25%)</title><rect x="20.1279%" y="117" width="0.2506%" height="15" fill="rgb(210,31,41)"/><text x="20.3779%" y="127.50"></text></g><g><title>type_op_normalize_ty (4,671,232 samples, 0.72%)</title><rect x="20.4201%" y="133" width="0.7218%" height="15" fill="rgb(221,200,47)"/><text x="20.6701%" y="143.50"></text></g><g><title>normalize_projection_ty (3,147,367 samples, 0.49%)</title><rect x="20.6556%" y="117" width="0.4864%" height="15" fill="rgb(226,26,5)"/><text x="20.9056%" y="127.50"></text></g><g><title>type_op_prove_predicate (7,403,554 samples, 1.14%)</title><rect x="21.1419%" y="133" width="1.1441%" height="15" fill="rgb(249,33,26)"/><text x="21.3919%" y="143.50"></text></g><g><title>MIR_borrow_checking (141,785,360 samples, 21.91%)</title><rect x="0.3775%" y="165" width="21.9101%" height="15" fill="rgb(235,183,28)"/><text x="0.6275%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (140,753,164 samples, 21.75%)</title><rect x="0.5370%" y="149" width="21.7506%" height="15" fill="rgb(221,5,38)"/><text x="0.7870%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,402,725 samples, 0.22%)</title><rect x="22.3671%" y="165" width="0.2168%" height="15" fill="rgb(247,18,42)"/><text x="22.6171%" y="175.50"></text></g><g><title>should_inherit_track_caller (1,011,650 samples, 0.16%)</title><rect x="22.9002%" y="117" width="0.1563%" height="15" fill="rgb(241,131,45)"/><text x="23.1502%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,811,690 samples, 0.28%)</title><rect x="22.7792%" y="133" width="0.2800%" height="15" fill="rgb(249,31,29)"/><text x="23.0292%" y="143.50"></text></g><g><title>check_mod_attrs (3,045,004 samples, 0.47%)</title><rect x="22.5887%" y="149" width="0.4705%" height="15" fill="rgb(225,111,53)"/><text x="22.8387%" y="159.50"></text></g><g><title>check_mod_const_bodies (773,781 samples, 0.12%)</title><rect x="23.0592%" y="149" width="0.1196%" height="15" fill="rgb(238,160,17)"/><text x="23.3092%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,666,357 samples, 0.26%)</title><rect x="23.2472%" y="149" width="0.2575%" height="15" fill="rgb(214,148,48)"/><text x="23.4972%" y="159.50"></text></g><g><title>misc_checking_1 (6,148,439 samples, 0.95%)</title><rect x="22.5840%" y="165" width="0.9501%" height="15" fill="rgb(232,36,49)"/><text x="22.8340%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,485,578 samples, 0.38%)</title><rect x="23.5343%" y="149" width="0.3841%" height="15" fill="rgb(209,103,24)"/><text x="23.7843%" y="159.50"></text></g><g><title>check_mod_liveness (1,998,852 samples, 0.31%)</title><rect x="23.6096%" y="133" width="0.3089%" height="15" fill="rgb(229,88,8)"/><text x="23.8596%" y="143.50"></text></g><g><title>misc_checking_2 (4,971,426 samples, 0.77%)</title><rect x="23.5341%" y="165" width="0.7682%" height="15" fill="rgb(213,181,19)"/><text x="23.7841%" y="175.50"></text></g><g><title>match_checking (2,484,188 samples, 0.38%)</title><rect x="23.9184%" y="149" width="0.3839%" height="15" fill="rgb(254,191,54)"/><text x="24.1684%" y="159.50"></text></g><g><title>check_match (2,257,296 samples, 0.35%)</title><rect x="23.9535%" y="133" width="0.3488%" height="15" fill="rgb(241,83,37)"/><text x="24.2035%" y="143.50"></text></g><g><title>check_private_in_public (1,396,395 samples, 0.22%)</title><rect x="24.3043%" y="149" width="0.2158%" height="15" fill="rgb(233,36,39)"/><text x="24.5543%" y="159.50"></text></g><g><title>death_checking (2,049,753 samples, 0.32%)</title><rect x="24.5201%" y="149" width="0.3167%" height="15" fill="rgb(226,3,54)"/><text x="24.7701%" y="159.50"></text></g><g><title>crate_lints (4,950,405 samples, 0.76%)</title><rect x="24.8374%" y="133" width="0.7650%" height="15" fill="rgb(245,192,40)"/><text x="25.0874%" y="143.50"></text></g><g><title>type_of (1,415,716 samples, 0.22%)</title><rect x="25.3836%" y="117" width="0.2188%" height="15" fill="rgb(238,167,29)"/><text x="25.6336%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (963,021 samples, 0.15%)</title><rect x="25.4536%" y="101" width="0.1488%" height="15" fill="rgb(232,182,51)"/><text x="25.7036%" y="111.50"></text></g><g><title>lint_checking (7,091,019 samples, 1.10%)</title><rect x="24.8369%" y="149" width="1.0958%" height="15" fill="rgb(231,60,39)"/><text x="25.0869%" y="159.50"></text></g><g><title>module_lints (2,137,234 samples, 0.33%)</title><rect x="25.6024%" y="133" width="0.3303%" height="15" fill="rgb(208,69,12)"/><text x="25.8524%" y="143.50"></text></g><g><title>lint_mod (2,130,664 samples, 0.33%)</title><rect x="25.6034%" y="117" width="0.3293%" height="15" fill="rgb(235,93,37)"/><text x="25.8534%" y="127.50"></text></g><g><title>privacy_access_levels (2,499,058 samples, 0.39%)</title><rect x="25.9326%" y="149" width="0.3862%" height="15" fill="rgb(213,116,39)"/><text x="26.1826%" y="159.50"></text></g><g><title>privacy_checking_modules (6,153,349 samples, 0.95%)</title><rect x="26.3188%" y="149" width="0.9509%" height="15" fill="rgb(222,207,29)"/><text x="26.5688%" y="159.50"></text></g><g><title>check_mod_privacy (6,147,769 samples, 0.95%)</title><rect x="26.3197%" y="133" width="0.9500%" height="15" fill="rgb(206,96,30)"/><text x="26.5697%" y="143.50"></text></g><g><title>misc_checking_3 (19,250,295 samples, 2.97%)</title><rect x="24.3023%" y="165" width="2.9748%" height="15" fill="rgb(218,138,4)"/><text x="24.5523%" y="175.50">mis..</text></g><g><title>impl_parent (3,763,345 samples, 0.58%)</title><rect x="32.7894%" y="101" width="0.5816%" height="15" fill="rgb(250,191,14)"/><text x="33.0394%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,162,103 samples, 0.33%)</title><rect x="33.0369%" y="85" width="0.3341%" height="15" fill="rgb(239,60,40)"/><text x="33.2869%" y="95.50"></text></g><g><title>impl_trait_ref (7,724,251 samples, 1.19%)</title><rect x="33.3714%" y="101" width="1.1936%" height="15" fill="rgb(206,27,48)"/><text x="33.6214%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,886,682 samples, 0.91%)</title><rect x="33.6554%" y="85" width="0.9097%" height="15" fill="rgb(225,35,8)"/><text x="33.9054%" y="95.50"></text></g><g><title>item_attrs (1,937,603 samples, 0.30%)</title><rect x="34.5651%" y="101" width="0.2994%" height="15" fill="rgb(250,213,24)"/><text x="34.8151%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,757,361 samples, 0.27%)</title><rect x="34.5929%" y="85" width="0.2716%" height="15" fill="rgb(247,123,22)"/><text x="34.8429%" y="95.50"></text></g><g><title>predicates_of (2,130,863 samples, 0.33%)</title><rect x="34.8647%" y="101" width="0.3293%" height="15" fill="rgb(231,138,38)"/><text x="35.1147%" y="111.50"></text></g><g><title>predicates_defined_on (1,159,229 samples, 0.18%)</title><rect x="35.0148%" y="85" width="0.1791%" height="15" fill="rgb(231,145,46)"/><text x="35.2648%" y="95.50"></text></g><g><title>trait_impls_of (1,557,413 samples, 0.24%)</title><rect x="35.1942%" y="101" width="0.2407%" height="15" fill="rgb(251,118,11)"/><text x="35.4442%" y="111.50"></text></g><g><title>coherent_trait (57,543,265 samples, 8.89%)</title><rect x="27.3427%" y="133" width="8.8922%" height="15" fill="rgb(217,147,25)"/><text x="27.5927%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (57,018,968 samples, 8.81%)</title><rect x="27.4238%" y="117" width="8.8112%" height="15" fill="rgb(247,81,37)"/><text x="27.6738%" y="127.50">specializati..</text></g><g><title>visible_parent_map (4,722,422 samples, 0.73%)</title><rect x="35.5052%" y="101" width="0.7298%" height="15" fill="rgb(209,12,38)"/><text x="35.7552%" y="111.50"></text></g><g><title>module_children (4,236,398 samples, 0.65%)</title><rect x="35.5803%" y="85" width="0.6547%" height="15" fill="rgb(227,1,9)"/><text x="35.8303%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (4,122,846 samples, 0.64%)</title><rect x="35.5978%" y="69" width="0.6371%" height="15" fill="rgb(248,47,43)"/><text x="35.8478%" y="79.50"></text></g><g><title>coherence_checking (58,002,720 samples, 8.96%)</title><rect x="27.3356%" y="149" width="8.9632%" height="15" fill="rgb(221,10,30)"/><text x="27.5856%" y="159.50">coherence_che..</text></g><g><title>associated_item (1,664,433 samples, 0.26%)</title><rect x="58.8834%" y="85" width="0.2572%" height="15" fill="rgb(210,229,1)"/><text x="59.1334%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,281,297 samples, 0.20%)</title><rect x="58.9426%" y="69" width="0.1980%" height="15" fill="rgb(222,148,37)"/><text x="59.1926%" y="79.50"></text></g><g><title>associated_items (2,291,958 samples, 0.35%)</title><rect x="58.7961%" y="101" width="0.3542%" height="15" fill="rgb(234,67,33)"/><text x="59.0461%" y="111.50"></text></g><g><title>dropck_outlives (887,271 samples, 0.14%)</title><rect x="59.1881%" y="101" width="0.1371%" height="15" fill="rgb(247,98,35)"/><text x="59.4381%" y="111.50"></text></g><g><title>predicates_of (1,074,664 samples, 0.17%)</title><rect x="61.2567%" y="85" width="0.1661%" height="15" fill="rgb(247,138,52)"/><text x="61.5067%" y="95.50"></text></g><g><title>specializes (2,544,636 samples, 0.39%)</title><rect x="61.4227%" y="85" width="0.3932%" height="15" fill="rgb(213,79,30)"/><text x="61.6727%" y="95.50"></text></g><g><title>param_env (1,574,998 samples, 0.24%)</title><rect x="61.5726%" y="69" width="0.2434%" height="15" fill="rgb(246,177,23)"/><text x="61.8226%" y="79.50"></text></g><g><title>evaluate_obligation (16,708,805 samples, 2.58%)</title><rect x="59.3252%" y="101" width="2.5820%" height="15" fill="rgb(230,62,27)"/><text x="59.5752%" y="111.50">ev..</text></g><g><title>method_autoderef_steps (1,268,650 samples, 0.20%)</title><rect x="62.0969%" y="101" width="0.1960%" height="15" fill="rgb(216,154,8)"/><text x="62.3469%" y="111.50"></text></g><g><title>typeck (2,603,790 samples, 0.40%)</title><rect x="62.5006%" y="101" width="0.4024%" height="15" fill="rgb(244,35,45)"/><text x="62.7506%" y="111.50"></text></g><g><title>item_bodies_checking (171,985,838 samples, 26.58%)</title><rect x="36.3638%" y="149" width="26.5770%" height="15" fill="rgb(251,115,12)"/><text x="36.6138%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (171,981,548 samples, 26.58%)</title><rect x="36.3645%" y="133" width="26.5763%" height="15" fill="rgb(240,54,50)"/><text x="36.6145%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (171,276,899 samples, 26.47%)</title><rect x="36.4734%" y="117" width="26.4675%" height="15" fill="rgb(233,84,52)"/><text x="36.7234%" y="127.50">typeck</text></g><g><title>item_types_checking (36,262,957 samples, 5.60%)</title><rect x="62.9408%" y="149" width="5.6037%" height="15" fill="rgb(207,117,47)"/><text x="63.1908%" y="159.50">item_ty..</text></g><g><title>check_mod_item_types (36,255,937 samples, 5.60%)</title><rect x="62.9419%" y="133" width="5.6026%" height="15" fill="rgb(249,43,39)"/><text x="63.1919%" y="143.50">check_m..</text></g><g><title>fn_sig (1,918,731 samples, 0.30%)</title><rect x="68.9023%" y="117" width="0.2965%" height="15" fill="rgb(209,38,44)"/><text x="69.1523%" y="127.50"></text></g><g><title>is_late_bound_map (3,286,628 samples, 0.51%)</title><rect x="69.3543%" y="101" width="0.5079%" height="15" fill="rgb(236,212,23)"/><text x="69.6043%" y="111.50"></text></g><g><title>resolve_lifetimes (2,787,083 samples, 0.43%)</title><rect x="69.4315%" y="85" width="0.4307%" height="15" fill="rgb(242,79,21)"/><text x="69.6815%" y="95.50"></text></g><g><title>generics_of (4,659,355 samples, 0.72%)</title><rect x="69.1988%" y="117" width="0.7200%" height="15" fill="rgb(211,96,35)"/><text x="69.4488%" y="127.50"></text></g><g><title>impl_trait_ref (852,557 samples, 0.13%)</title><rect x="69.9188%" y="117" width="0.1317%" height="15" fill="rgb(253,215,40)"/><text x="70.1688%" y="127.50"></text></g><g><title>lint_levels (708,728 samples, 0.11%)</title><rect x="70.5705%" y="37" width="0.1095%" height="15" fill="rgb(211,81,21)"/><text x="70.8205%" y="47.50"></text></g><g><title>late_bound_vars_map (1,581,806 samples, 0.24%)</title><rect x="70.4357%" y="69" width="0.2444%" height="15" fill="rgb(208,190,38)"/><text x="70.6857%" y="79.50"></text></g><g><title>resolve_lifetimes (1,522,246 samples, 0.24%)</title><rect x="70.4449%" y="53" width="0.2352%" height="15" fill="rgb(235,213,38)"/><text x="70.6949%" y="63.50"></text></g><g><title>explicit_predicates_of (3,013,822 samples, 0.47%)</title><rect x="70.2299%" y="85" width="0.4657%" height="15" fill="rgb(237,122,38)"/><text x="70.4799%" y="95.50"></text></g><g><title>predicates_of (4,389,031 samples, 0.68%)</title><rect x="70.0506%" y="117" width="0.6782%" height="15" fill="rgb(244,218,35)"/><text x="70.3006%" y="127.50"></text></g><g><title>predicates_defined_on (3,945,064 samples, 0.61%)</title><rect x="70.1192%" y="101" width="0.6096%" height="15" fill="rgb(240,68,47)"/><text x="70.3692%" y="111.50"></text></g><g><title>type_collecting (15,197,660 samples, 2.35%)</title><rect x="68.5452%" y="149" width="2.3485%" height="15" fill="rgb(210,16,53)"/><text x="68.7952%" y="159.50">t..</text></g><g><title>collect_mod_item_types (15,181,300 samples, 2.35%)</title><rect x="68.5478%" y="133" width="2.3460%" height="15" fill="rgb(235,124,12)"/><text x="68.7978%" y="143.50">c..</text></g><g><title>type_of (1,067,213 samples, 0.16%)</title><rect x="70.7288%" y="117" width="0.1649%" height="15" fill="rgb(224,169,11)"/><text x="70.9788%" y="127.50"></text></g><g><title>evaluate_obligation (698,288 samples, 0.11%)</title><rect x="74.2207%" y="117" width="0.1079%" height="15" fill="rgb(250,166,2)"/><text x="74.4707%" y="127.50"></text></g><g><title>param_env (6,555,280 samples, 1.01%)</title><rect x="74.4991%" y="117" width="1.0130%" height="15" fill="rgb(242,216,29)"/><text x="74.7491%" y="127.50"></text></g><g><title>region_scope_tree (2,359,327 samples, 0.36%)</title><rect x="75.5197%" y="117" width="0.3646%" height="15" fill="rgb(230,116,27)"/><text x="75.7697%" y="127.50"></text></g><g><title>check_impl_item_well_formed (30,478,036 samples, 4.71%)</title><rect x="71.1850%" y="133" width="4.7098%" height="15" fill="rgb(228,99,48)"/><text x="71.4350%" y="143.50">check..</text></g><g><title>evaluate_obligation (758,614 samples, 0.12%)</title><rect x="80.9727%" y="117" width="0.1172%" height="15" fill="rgb(253,11,6)"/><text x="81.2227%" y="127.50"></text></g><g><title>implied_outlives_bounds (789,733 samples, 0.12%)</title><rect x="81.1207%" y="117" width="0.1220%" height="15" fill="rgb(247,143,39)"/><text x="81.3707%" y="127.50"></text></g><g><title>param_env (3,440,064 samples, 0.53%)</title><rect x="81.2433%" y="117" width="0.5316%" height="15" fill="rgb(236,97,10)"/><text x="81.4933%" y="127.50"></text></g><g><title>analysis (529,776,448 samples, 81.87%)</title><rect x="0.1259%" y="181" width="81.8665%" height="15" fill="rgb(233,208,19)"/><text x="0.3759%" y="191.50">analysis</text></g><g><title>type_check_crate (354,074,968 samples, 54.72%)</title><rect x="27.2771%" y="165" width="54.7153%" height="15" fill="rgb(216,164,2)"/><text x="27.5271%" y="175.50">type_check_crate</text></g><g><title>wf_checking (71,779,334 samples, 11.09%)</title><rect x="70.9003%" y="149" width="11.0921%" height="15" fill="rgb(220,129,5)"/><text x="71.1503%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (39,458,870 samples, 6.10%)</title><rect x="75.8948%" y="133" width="6.0976%" height="15" fill="rgb(242,17,10)"/><text x="76.1448%" y="143.50">check_it..</text></g><g><title>AST_validation (734,958 samples, 0.11%)</title><rect x="82.0870%" y="165" width="0.1136%" height="15" fill="rgb(242,107,0)"/><text x="82.3370%" y="175.50"></text></g><g><title>metadata_register_crate (1,043,901 samples, 0.16%)</title><rect x="87.5327%" y="133" width="0.1613%" height="15" fill="rgb(251,28,31)"/><text x="87.7827%" y="143.50"></text></g><g><title>macro_expand_crate (35,211,476 samples, 5.44%)</title><rect x="82.2733%" y="165" width="5.4412%" height="15" fill="rgb(233,223,10)"/><text x="82.5233%" y="175.50">macro_e..</text></g><g><title>expand_crate (35,195,766 samples, 5.44%)</title><rect x="82.2757%" y="149" width="5.4388%" height="15" fill="rgb(215,21,27)"/><text x="82.5257%" y="159.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (1,317,265 samples, 0.20%)</title><rect x="87.7152%" y="165" width="0.2036%" height="15" fill="rgb(232,23,21)"/><text x="87.9652%" y="175.50"></text></g><g><title>late_resolve_crate (10,832,012 samples, 1.67%)</title><rect x="88.0053%" y="149" width="1.6739%" height="15" fill="rgb(244,5,23)"/><text x="88.2553%" y="159.50"></text></g><g><title>resolve_check_unused (649,597 samples, 0.10%)</title><rect x="89.6816%" y="149" width="0.1004%" height="15" fill="rgb(226,81,46)"/><text x="89.9316%" y="159.50"></text></g><g><title>configure_and_expand (50,330,205 samples, 7.78%)</title><rect x="82.0541%" y="181" width="7.7775%" height="15" fill="rgb(247,70,30)"/><text x="82.3041%" y="191.50">configure_a..</text></g><g><title>resolve_crate (12,378,539 samples, 1.91%)</title><rect x="87.9187%" y="165" width="1.9129%" height="15" fill="rgb(212,68,19)"/><text x="88.1687%" y="175.50">r..</text></g><g><title>drop_ast (2,265,855 samples, 0.35%)</title><rect x="89.8316%" y="181" width="0.3501%" height="15" fill="rgb(240,187,13)"/><text x="90.0816%" y="191.50"></text></g><g><title>early_lint_checks (2,282,766 samples, 0.35%)</title><rect x="90.1845%" y="181" width="0.3528%" height="15" fill="rgb(223,113,26)"/><text x="90.4345%" y="191.50"></text></g><g><title>free_global_ctxt (6,840,737 samples, 1.06%)</title><rect x="90.5372%" y="181" width="1.0571%" height="15" fill="rgb(206,192,2)"/><text x="90.7872%" y="191.50"></text></g><g><title>generate_crate_metadata (6,475,603 samples, 1.00%)</title><rect x="91.5943%" y="181" width="1.0007%" height="15" fill="rgb(241,108,4)"/><text x="91.8443%" y="191.50"></text></g><g><title>hir_lowering (23,339,241 samples, 3.61%)</title><rect x="92.5950%" y="181" width="3.6066%" height="15" fill="rgb(247,173,49)"/><text x="92.8450%" y="191.50">hir_..</text></g><g><title>parse_crate (21,180,357 samples, 3.27%)</title><rect x="96.2129%" y="181" width="3.2730%" height="15" fill="rgb(224,114,35)"/><text x="96.4629%" y="191.50">par..</text></g><g><title>self_profile_alloc_query_strings (2,353,116 samples, 0.36%)</title><rect x="99.5223%" y="181" width="0.3636%" height="15" fill="rgb(245,159,27)"/><text x="99.7723%" y="191.50"></text></g><g><title>all (647,122,744 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (647,122,744 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>