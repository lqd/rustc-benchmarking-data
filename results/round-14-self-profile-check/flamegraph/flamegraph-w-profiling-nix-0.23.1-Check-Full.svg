<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (8,837,674 samples, 0.20%)</title><rect x="14.2912%" y="149" width="0.1990%" height="15" fill="rgb(227,0,7)"/><text x="14.5412%" y="159.50"></text></g><g><title>is_copy_raw (11,853,947 samples, 0.27%)</title><rect x="20.4511%" y="69" width="0.2669%" height="15" fill="rgb(217,0,24)"/><text x="20.7011%" y="79.50"></text></g><g><title>evaluate_obligation (9,240,771 samples, 0.21%)</title><rect x="20.5100%" y="53" width="0.2081%" height="15" fill="rgb(221,193,54)"/><text x="20.7600%" y="63.50"></text></g><g><title>needs_drop_raw (13,934,731 samples, 0.31%)</title><rect x="20.4044%" y="85" width="0.3138%" height="15" fill="rgb(248,212,6)"/><text x="20.6544%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (6,596,462 samples, 0.15%)</title><rect x="20.8374%" y="69" width="0.1485%" height="15" fill="rgb(208,68,35)"/><text x="21.0874%" y="79.50"></text></g><g><title>resolve_instance (15,660,552 samples, 0.35%)</title><rect x="20.7195%" y="85" width="0.3526%" height="15" fill="rgb(232,128,0)"/><text x="20.9695%" y="95.50"></text></g><g><title>thir_body (59,618,318 samples, 1.34%)</title><rect x="21.1053%" y="85" width="1.3424%" height="15" fill="rgb(207,160,47)"/><text x="21.3553%" y="95.50"></text></g><g><title>mir_const (308,245,017 samples, 6.94%)</title><rect x="15.5315%" y="133" width="6.9407%" height="15" fill="rgb(228,23,34)"/><text x="15.7815%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (263,647,355 samples, 5.94%)</title><rect x="16.5357%" y="117" width="5.9365%" height="15" fill="rgb(218,30,26)"/><text x="16.7857%" y="127.50">unsafety..</text></g><g><title>mir_built (238,505,905 samples, 5.37%)</title><rect x="17.1018%" y="101" width="5.3704%" height="15" fill="rgb(220,122,19)"/><text x="17.3518%" y="111.50">mir_bui..</text></g><g><title>thir_body (10,145,611 samples, 0.23%)</title><rect x="23.9222%" y="69" width="0.2284%" height="15" fill="rgb(250,228,42)"/><text x="24.1722%" y="79.50"></text></g><g><title>mir_const (55,626,558 samples, 1.25%)</title><rect x="22.9071%" y="117" width="1.2525%" height="15" fill="rgb(240,193,28)"/><text x="23.1571%" y="127.50"></text></g><g><title>unsafety_check_result (44,132,666 samples, 0.99%)</title><rect x="23.1659%" y="101" width="0.9937%" height="15" fill="rgb(216,20,37)"/><text x="23.4159%" y="111.50"></text></g><g><title>mir_built (39,456,839 samples, 0.89%)</title><rect x="23.2711%" y="85" width="0.8884%" height="15" fill="rgb(206,188,39)"/><text x="23.5211%" y="95.50"></text></g><g><title>mir_const_qualif (76,274,174 samples, 1.72%)</title><rect x="22.4722%" y="133" width="1.7174%" height="15" fill="rgb(217,207,13)"/><text x="22.7222%" y="143.50"></text></g><g><title>mir_promoted (430,033,028 samples, 9.68%)</title><rect x="14.5067%" y="149" width="9.6829%" height="15" fill="rgb(231,73,38)"/><text x="14.7567%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (11,883,069 samples, 0.27%)</title><rect x="24.1950%" y="149" width="0.2676%" height="15" fill="rgb(225,20,46)"/><text x="24.4450%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (7,174,790 samples, 0.16%)</title><rect x="24.4626%" y="149" width="0.1616%" height="15" fill="rgb(210,31,41)"/><text x="24.7126%" y="159.50"></text></g><g><title>normalize_projection_ty (4,518,537 samples, 0.10%)</title><rect x="24.5224%" y="133" width="0.1017%" height="15" fill="rgb(221,200,47)"/><text x="24.7724%" y="143.50"></text></g><g><title>type_op_prove_predicate (43,055,012 samples, 0.97%)</title><rect x="24.7300%" y="149" width="0.9695%" height="15" fill="rgb(226,26,5)"/><text x="24.9800%" y="159.50"></text></g><g><title>MIR_borrow_checking (1,127,048,875 samples, 25.38%)</title><rect x="0.3228%" y="181" width="25.3775%" height="15" fill="rgb(249,33,26)"/><text x="0.5728%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,109,326,769 samples, 24.98%)</title><rect x="0.7219%" y="165" width="24.9784%" height="15" fill="rgb(235,183,28)"/><text x="0.9719%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (31,982,899 samples, 0.72%)</title><rect x="25.7003%" y="181" width="0.7202%" height="15" fill="rgb(221,5,38)"/><text x="25.9503%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (25,946,263 samples, 0.58%)</title><rect x="25.8362%" y="165" width="0.5842%" height="15" fill="rgb(247,18,42)"/><text x="26.0862%" y="175.50"></text></g><g><title>hir_module_items (11,049,990 samples, 0.25%)</title><rect x="26.4204%" y="181" width="0.2488%" height="15" fill="rgb(241,131,45)"/><text x="26.6704%" y="191.50"></text></g><g><title>get_lang_items (5,923,997 samples, 0.13%)</title><rect x="27.1407%" y="133" width="0.1334%" height="15" fill="rgb(249,31,29)"/><text x="27.3907%" y="143.50"></text></g><g><title>should_inherit_track_caller (6,703,215 samples, 0.15%)</title><rect x="27.2741%" y="133" width="0.1509%" height="15" fill="rgb(225,111,53)"/><text x="27.5241%" y="143.50"></text></g><g><title>codegen_fn_attrs (15,052,665 samples, 0.34%)</title><rect x="27.0866%" y="149" width="0.3389%" height="15" fill="rgb(238,160,17)"/><text x="27.3366%" y="159.50"></text></g><g><title>check_mod_attrs (33,360,029 samples, 0.75%)</title><rect x="26.6744%" y="165" width="0.7512%" height="15" fill="rgb(214,148,48)"/><text x="26.9244%" y="175.50"></text></g><g><title>check_mod_const_bodies (8,326,393 samples, 0.19%)</title><rect x="27.4256%" y="165" width="0.1875%" height="15" fill="rgb(232,36,49)"/><text x="27.6756%" y="175.50"></text></g><g><title>check_mod_loops (8,449,264 samples, 0.19%)</title><rect x="27.6130%" y="165" width="0.1902%" height="15" fill="rgb(209,103,24)"/><text x="27.8630%" y="175.50"></text></g><g><title>lint_levels (21,619,712 samples, 0.49%)</title><rect x="27.9871%" y="149" width="0.4868%" height="15" fill="rgb(229,88,8)"/><text x="28.2371%" y="159.50"></text></g><g><title>lookup_deprecation_entry (9,389,334 samples, 0.21%)</title><rect x="28.4739%" y="149" width="0.2114%" height="15" fill="rgb(213,181,19)"/><text x="28.7239%" y="159.50"></text></g><g><title>stability_index (8,621,757 samples, 0.19%)</title><rect x="28.4912%" y="133" width="0.1941%" height="15" fill="rgb(254,191,54)"/><text x="28.7412%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (38,748,725 samples, 0.87%)</title><rect x="27.8217%" y="165" width="0.8725%" height="15" fill="rgb(241,83,37)"/><text x="28.0717%" y="175.50"></text></g><g><title>misc_checking_1 (91,904,721 samples, 2.07%)</title><rect x="26.6693%" y="181" width="2.0694%" height="15" fill="rgb(233,36,39)"/><text x="26.9193%" y="191.50">m..</text></g><g><title>check_mod_intrinsics (5,226,360 samples, 0.12%)</title><rect x="28.7405%" y="149" width="0.1177%" height="15" fill="rgb(226,3,54)"/><text x="28.9905%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (25,821,199 samples, 0.58%)</title><rect x="28.7387%" y="165" width="0.5814%" height="15" fill="rgb(245,192,40)"/><text x="28.9887%" y="175.50"></text></g><g><title>check_mod_liveness (20,514,774 samples, 0.46%)</title><rect x="28.8582%" y="149" width="0.4619%" height="15" fill="rgb(238,167,29)"/><text x="29.1082%" y="159.50"></text></g><g><title>misc_checking_2 (65,494,745 samples, 1.47%)</title><rect x="28.7387%" y="181" width="1.4747%" height="15" fill="rgb(232,182,51)"/><text x="28.9887%" y="191.50"></text></g><g><title>match_checking (39,669,976 samples, 0.89%)</title><rect x="29.3202%" y="165" width="0.8932%" height="15" fill="rgb(231,60,39)"/><text x="29.5702%" y="175.50"></text></g><g><title>check_match (35,687,134 samples, 0.80%)</title><rect x="29.4098%" y="149" width="0.8036%" height="15" fill="rgb(208,69,12)"/><text x="29.6598%" y="159.50"></text></g><g><title>check_private_in_public (20,167,616 samples, 0.45%)</title><rect x="30.2153%" y="165" width="0.4541%" height="15" fill="rgb(235,93,37)"/><text x="30.4653%" y="175.50"></text></g><g><title>death_checking (29,596,432 samples, 0.67%)</title><rect x="30.6694%" y="165" width="0.6664%" height="15" fill="rgb(213,116,39)"/><text x="30.9194%" y="175.50"></text></g><g><title>param_env (6,077,280 samples, 0.14%)</title><rect x="32.0773%" y="133" width="0.1368%" height="15" fill="rgb(222,207,29)"/><text x="32.3273%" y="143.50"></text></g><g><title>crate_lints (40,478,513 samples, 0.91%)</title><rect x="31.3359%" y="149" width="0.9114%" height="15" fill="rgb(206,96,30)"/><text x="31.5859%" y="159.50"></text></g><g><title>lint_checking (72,901,748 samples, 1.64%)</title><rect x="31.3358%" y="165" width="1.6415%" height="15" fill="rgb(218,138,4)"/><text x="31.5858%" y="175.50"></text></g><g><title>module_lints (32,419,075 samples, 0.73%)</title><rect x="32.2473%" y="149" width="0.7300%" height="15" fill="rgb(250,191,14)"/><text x="32.4973%" y="159.50"></text></g><g><title>lint_mod (32,343,173 samples, 0.73%)</title><rect x="32.2490%" y="133" width="0.7283%" height="15" fill="rgb(239,60,40)"/><text x="32.4990%" y="143.50"></text></g><g><title>privacy_access_levels (25,538,636 samples, 0.58%)</title><rect x="32.9773%" y="165" width="0.5750%" height="15" fill="rgb(206,27,48)"/><text x="33.2273%" y="175.50"></text></g><g><title>privacy_checking_modules (47,807,055 samples, 1.08%)</title><rect x="33.5524%" y="165" width="1.0765%" height="15" fill="rgb(225,35,8)"/><text x="33.8024%" y="175.50"></text></g><g><title>check_mod_privacy (47,748,093 samples, 1.08%)</title><rect x="33.5537%" y="149" width="1.0751%" height="15" fill="rgb(250,213,24)"/><text x="33.8037%" y="159.50"></text></g><g><title>misc_checking_3 (196,944,037 samples, 4.43%)</title><rect x="30.2134%" y="181" width="4.4345%" height="15" fill="rgb(247,123,22)"/><text x="30.4634%" y="191.50">misc_..</text></g><g><title>impl_parent (5,053,123 samples, 0.11%)</title><rect x="35.0358%" y="117" width="0.1138%" height="15" fill="rgb(231,138,38)"/><text x="35.2858%" y="127.50"></text></g><g><title>impl_trait_ref (9,654,775 samples, 0.22%)</title><rect x="35.1496%" y="117" width="0.2174%" height="15" fill="rgb(231,145,46)"/><text x="35.3996%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,550,961 samples, 0.17%)</title><rect x="35.1969%" y="101" width="0.1700%" height="15" fill="rgb(251,118,11)"/><text x="35.4469%" y="111.50"></text></g><g><title>coherent_trait (30,518,422 samples, 0.69%)</title><rect x="34.7526%" y="149" width="0.6872%" height="15" fill="rgb(217,147,25)"/><text x="35.0026%" y="159.50"></text></g><g><title>specialization_graph_of (28,100,847 samples, 0.63%)</title><rect x="34.8071%" y="133" width="0.6327%" height="15" fill="rgb(247,81,37)"/><text x="35.0571%" y="143.50"></text></g><g><title>coherence_checking (33,010,400 samples, 0.74%)</title><rect x="34.7505%" y="165" width="0.7433%" height="15" fill="rgb(209,12,38)"/><text x="35.0005%" y="175.50"></text></g><g><title>dropck_outlives (6,032,254 samples, 0.14%)</title><rect x="58.4327%" y="117" width="0.1358%" height="15" fill="rgb(227,1,9)"/><text x="58.6827%" y="127.50"></text></g><g><title>evaluate_obligation (29,490,687 samples, 0.66%)</title><rect x="58.6084%" y="117" width="0.6640%" height="15" fill="rgb(248,47,43)"/><text x="58.8584%" y="127.50"></text></g><g><title>method_autoderef_steps (4,756,681 samples, 0.11%)</title><rect x="59.4008%" y="117" width="0.1071%" height="15" fill="rgb(221,10,30)"/><text x="59.6508%" y="127.50"></text></g><g><title>evaluate_obligation (8,738,514 samples, 0.20%)</title><rect x="61.7391%" y="101" width="0.1968%" height="15" fill="rgb(210,229,1)"/><text x="61.9891%" y="111.50"></text></g><g><title>typeck (107,814,446 samples, 2.43%)</title><rect x="59.6946%" y="117" width="2.4276%" height="15" fill="rgb(222,148,37)"/><text x="59.9446%" y="127.50">ty..</text></g><g><title>item_bodies_checking (1,180,989,579 samples, 26.59%)</title><rect x="35.5707%" y="165" width="26.5920%" height="15" fill="rgb(234,67,33)"/><text x="35.8207%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,180,985,559 samples, 26.59%)</title><rect x="35.5708%" y="149" width="26.5920%" height="15" fill="rgb(247,98,35)"/><text x="35.8208%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (1,173,916,365 samples, 26.43%)</title><rect x="35.7299%" y="133" width="26.4328%" height="15" fill="rgb(247,138,52)"/><text x="35.9799%" y="143.50">typeck</text></g><g><title>evaluate_obligation (8,828,451 samples, 0.20%)</title><rect x="63.5965%" y="117" width="0.1988%" height="15" fill="rgb(213,79,30)"/><text x="63.8465%" y="127.50"></text></g><g><title>item_types_checking (72,956,298 samples, 1.64%)</title><rect x="62.1627%" y="165" width="1.6427%" height="15" fill="rgb(246,177,23)"/><text x="62.4127%" y="175.50"></text></g><g><title>check_mod_item_types (72,892,328 samples, 1.64%)</title><rect x="62.1642%" y="149" width="1.6413%" height="15" fill="rgb(230,62,27)"/><text x="62.4142%" y="159.50"></text></g><g><title>typeck (12,726,413 samples, 0.29%)</title><rect x="63.5189%" y="133" width="0.2866%" height="15" fill="rgb(216,154,8)"/><text x="63.7689%" y="143.50"></text></g><g><title>mir_const_qualif (11,855,458 samples, 0.27%)</title><rect x="64.5266%" y="85" width="0.2669%" height="15" fill="rgb(244,35,45)"/><text x="64.7766%" y="95.50"></text></g><g><title>mir_const (9,835,780 samples, 0.22%)</title><rect x="64.5720%" y="69" width="0.2215%" height="15" fill="rgb(251,115,12)"/><text x="64.8220%" y="79.50"></text></g><g><title>unsafety_check_result (6,648,770 samples, 0.15%)</title><rect x="64.6438%" y="53" width="0.1497%" height="15" fill="rgb(240,54,50)"/><text x="64.8938%" y="63.50"></text></g><g><title>mir_built (5,669,835 samples, 0.13%)</title><rect x="64.6658%" y="37" width="0.1277%" height="15" fill="rgb(233,84,52)"/><text x="64.9158%" y="47.50"></text></g><g><title>mir_borrowck (31,838,073 samples, 0.72%)</title><rect x="65.1250%" y="53" width="0.7169%" height="15" fill="rgb(207,117,47)"/><text x="65.3750%" y="63.50"></text></g><g><title>mir_for_ctfe (46,737,652 samples, 1.05%)</title><rect x="64.7935%" y="85" width="1.0524%" height="15" fill="rgb(249,43,39)"/><text x="65.0435%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (43,186,474 samples, 0.97%)</title><rect x="64.8735%" y="69" width="0.9724%" height="15" fill="rgb(209,38,44)"/><text x="65.1235%" y="79.50"></text></g><g><title>eval_to_const_value_raw (10,050,489 samples, 0.23%)</title><rect x="65.9037%" y="69" width="0.2263%" height="15" fill="rgb(236,212,23)"/><text x="66.1537%" y="79.50"></text></g><g><title>eval_to_const_value_raw (9,453,234 samples, 0.21%)</title><rect x="65.9171%" y="53" width="0.2129%" height="15" fill="rgb(242,79,21)"/><text x="66.1671%" y="63.50"></text></g><g><title>eval_to_allocation_raw (8,470,523 samples, 0.19%)</title><rect x="65.9392%" y="37" width="0.1907%" height="15" fill="rgb(211,96,35)"/><text x="66.1892%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (14,232,388 samples, 0.32%)</title><rect x="65.8482%" y="85" width="0.3205%" height="15" fill="rgb(253,215,40)"/><text x="66.0982%" y="95.50"></text></g><g><title>eval_to_const_value_raw (105,163,548 samples, 2.37%)</title><rect x="64.2742%" y="133" width="2.3679%" height="15" fill="rgb(211,81,21)"/><text x="64.5242%" y="143.50">ev..</text></g><g><title>eval_to_const_value_raw (104,869,513 samples, 2.36%)</title><rect x="64.2809%" y="117" width="2.3613%" height="15" fill="rgb(208,190,38)"/><text x="64.5309%" y="127.50">ev..</text></g><g><title>eval_to_allocation_raw (104,426,999 samples, 2.35%)</title><rect x="64.2908%" y="101" width="2.3514%" height="15" fill="rgb(235,213,38)"/><text x="64.5408%" y="111.50">e..</text></g><g><title>typeck (21,030,941 samples, 0.47%)</title><rect x="66.1686%" y="85" width="0.4735%" height="15" fill="rgb(237,122,38)"/><text x="66.4186%" y="95.50"></text></g><g><title>late_bound_vars_map (6,002,888 samples, 0.14%)</title><rect x="66.8370%" y="117" width="0.1352%" height="15" fill="rgb(244,218,35)"/><text x="67.0870%" y="127.50"></text></g><g><title>resolve_lifetimes (4,811,630 samples, 0.11%)</title><rect x="66.8638%" y="101" width="0.1083%" height="15" fill="rgb(240,68,47)"/><text x="67.1138%" y="111.50"></text></g><g><title>fn_sig (14,899,283 samples, 0.34%)</title><rect x="66.6422%" y="133" width="0.3355%" height="15" fill="rgb(210,16,53)"/><text x="66.8922%" y="143.50"></text></g><g><title>named_region_map (16,841,500 samples, 0.38%)</title><rect x="67.1898%" y="117" width="0.3792%" height="15" fill="rgb(235,124,12)"/><text x="67.4398%" y="127.50"></text></g><g><title>resolve_lifetimes (15,286,706 samples, 0.34%)</title><rect x="67.2248%" y="101" width="0.3442%" height="15" fill="rgb(224,169,11)"/><text x="67.4748%" y="111.50"></text></g><g><title>generics_of (27,190,851 samples, 0.61%)</title><rect x="66.9777%" y="133" width="0.6122%" height="15" fill="rgb(250,166,2)"/><text x="67.2277%" y="143.50"></text></g><g><title>param_env (5,815,939 samples, 0.13%)</title><rect x="67.6301%" y="133" width="0.1310%" height="15" fill="rgb(242,216,29)"/><text x="67.8801%" y="143.50"></text></g><g><title>explicit_predicates_of (7,854,905 samples, 0.18%)</title><rect x="68.0373%" y="101" width="0.1769%" height="15" fill="rgb(230,116,27)"/><text x="68.2873%" y="111.50"></text></g><g><title>predicates_of (24,171,768 samples, 0.54%)</title><rect x="67.7611%" y="133" width="0.5443%" height="15" fill="rgb(228,99,48)"/><text x="68.0111%" y="143.50"></text></g><g><title>predicates_defined_on (19,207,256 samples, 0.43%)</title><rect x="67.8728%" y="117" width="0.4325%" height="15" fill="rgb(253,11,6)"/><text x="68.1228%" y="127.50"></text></g><g><title>type_collecting (204,273,710 samples, 4.60%)</title><rect x="63.8065%" y="165" width="4.5996%" height="15" fill="rgb(247,143,39)"/><text x="64.0565%" y="175.50">type_..</text></g><g><title>collect_mod_item_types (204,194,200 samples, 4.60%)</title><rect x="63.8083%" y="149" width="4.5978%" height="15" fill="rgb(236,97,10)"/><text x="64.0583%" y="159.50">colle..</text></g><g><title>evaluate_obligation (9,818,490 samples, 0.22%)</title><rect x="70.7306%" y="133" width="0.2211%" height="15" fill="rgb(233,208,19)"/><text x="70.9806%" y="143.50"></text></g><g><title>param_env (16,411,904 samples, 0.37%)</title><rect x="71.0419%" y="133" width="0.3695%" height="15" fill="rgb(216,164,2)"/><text x="71.2919%" y="143.50"></text></g><g><title>region_scope_tree (23,914,587 samples, 0.54%)</title><rect x="71.4141%" y="133" width="0.5385%" height="15" fill="rgb(220,129,5)"/><text x="71.6641%" y="143.50"></text></g><g><title>check_impl_item_well_formed (144,557,711 samples, 3.25%)</title><rect x="68.6991%" y="149" width="3.2550%" height="15" fill="rgb(242,17,10)"/><text x="68.9491%" y="159.50">che..</text></g><g><title>evaluate_obligation (21,478,802 samples, 0.48%)</title><rect x="73.1574%" y="133" width="0.4836%" height="15" fill="rgb(242,107,0)"/><text x="73.4074%" y="143.50"></text></g><g><title>param_env (11,808,670 samples, 0.27%)</title><rect x="73.7100%" y="133" width="0.2659%" height="15" fill="rgb(251,28,31)"/><text x="73.9600%" y="143.50"></text></g><g><title>check_item_well_formed (97,081,410 samples, 2.19%)</title><rect x="71.9540%" y="149" width="2.1860%" height="15" fill="rgb(233,223,10)"/><text x="72.2040%" y="159.50">c..</text></g><g><title>param_env (4,480,475 samples, 0.10%)</title><rect x="74.5385%" y="133" width="0.1009%" height="15" fill="rgb(215,21,27)"/><text x="74.7885%" y="143.50"></text></g><g><title>analysis (3,314,906,142 samples, 74.64%)</title><rect x="0.0401%" y="197" width="74.6409%" height="15" fill="rgb(232,23,21)"/><text x="0.2901%" y="207.50">analysis</text></g><g><title>type_check_crate (1,777,925,281 samples, 40.03%)</title><rect x="34.6479%" y="181" width="40.0331%" height="15" fill="rgb(244,5,23)"/><text x="34.8979%" y="191.50">type_check_crate</text></g><g><title>wf_checking (278,068,968 samples, 6.26%)</title><rect x="68.4198%" y="165" width="6.2612%" height="15" fill="rgb(226,81,46)"/><text x="68.6698%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (24,027,888 samples, 0.54%)</title><rect x="74.1400%" y="149" width="0.5410%" height="15" fill="rgb(247,70,30)"/><text x="74.3900%" y="159.50"></text></g><g><title>AST_validation (16,027,291 samples, 0.36%)</title><rect x="74.6958%" y="181" width="0.3609%" height="15" fill="rgb(212,68,19)"/><text x="74.9458%" y="191.50"></text></g><g><title>complete_gated_feature_checking (6,996,718 samples, 0.16%)</title><rect x="75.0567%" y="181" width="0.1575%" height="15" fill="rgb(240,187,13)"/><text x="75.3067%" y="191.50"></text></g><g><title>macro_expand_crate (608,294,949 samples, 13.70%)</title><rect x="75.2155%" y="181" width="13.6968%" height="15" fill="rgb(223,113,26)"/><text x="75.4655%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (608,263,269 samples, 13.70%)</title><rect x="75.2162%" y="165" width="13.6961%" height="15" fill="rgb(206,192,2)"/><text x="75.4662%" y="175.50">expand_crate</text></g><g><title>finalize_macro_resolutions (8,410,304 samples, 0.19%)</title><rect x="88.9390%" y="165" width="0.1894%" height="15" fill="rgb(241,108,4)"/><text x="89.1890%" y="175.50"></text></g><g><title>late_resolve_crate (70,019,395 samples, 1.58%)</title><rect x="89.1284%" y="165" width="1.5766%" height="15" fill="rgb(247,173,49)"/><text x="89.3784%" y="175.50"></text></g><g><title>resolve_check_unused (5,640,413 samples, 0.13%)</title><rect x="90.7188%" y="165" width="0.1270%" height="15" fill="rgb(224,114,35)"/><text x="90.9688%" y="175.50"></text></g><g><title>resolve_postprocess (5,179,328 samples, 0.12%)</title><rect x="90.8458%" y="165" width="0.1166%" height="15" fill="rgb(245,159,27)"/><text x="91.0958%" y="175.50"></text></g><g><title>configure_and_expand (722,592,111 samples, 16.27%)</title><rect x="74.6920%" y="197" width="16.2704%" height="15" fill="rgb(245,172,44)"/><text x="74.9420%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (90,946,009 samples, 2.05%)</title><rect x="88.9146%" y="181" width="2.0478%" height="15" fill="rgb(236,23,11)"/><text x="89.1646%" y="191.50">r..</text></g><g><title>drop_ast (24,730,207 samples, 0.56%)</title><rect x="90.9624%" y="197" width="0.5568%" height="15" fill="rgb(205,117,38)"/><text x="91.2124%" y="207.50"></text></g><g><title>early_lint_checks (22,934,617 samples, 0.52%)</title><rect x="91.5199%" y="197" width="0.5164%" height="15" fill="rgb(237,72,25)"/><text x="91.7699%" y="207.50"></text></g><g><title>free_global_ctxt (38,058,417 samples, 0.86%)</title><rect x="92.0363%" y="197" width="0.8570%" height="15" fill="rgb(244,70,9)"/><text x="92.2863%" y="207.50"></text></g><g><title>eval_to_const_value_raw (11,606,927 samples, 0.26%)</title><rect x="95.0303%" y="149" width="0.2614%" height="15" fill="rgb(217,125,39)"/><text x="95.2803%" y="159.50"></text></g><g><title>eval_to_const_value_raw (10,821,927 samples, 0.24%)</title><rect x="95.0479%" y="133" width="0.2437%" height="15" fill="rgb(235,36,10)"/><text x="95.2979%" y="143.50"></text></g><g><title>eval_to_allocation_raw (9,845,349 samples, 0.22%)</title><rect x="95.0699%" y="117" width="0.2217%" height="15" fill="rgb(251,123,47)"/><text x="95.3199%" y="127.50"></text></g><g><title>mir_for_ctfe (35,697,715 samples, 0.80%)</title><rect x="94.5168%" y="181" width="0.8038%" height="15" fill="rgb(221,13,13)"/><text x="94.7668%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (15,248,469 samples, 0.34%)</title><rect x="94.9773%" y="165" width="0.3433%" height="15" fill="rgb(238,131,9)"/><text x="95.2273%" y="175.50"></text></g><g><title>generate_crate_metadata (112,057,245 samples, 2.52%)</title><rect x="92.8933%" y="197" width="2.5232%" height="15" fill="rgb(211,50,8)"/><text x="93.1433%" y="207.50">ge..</text></g><g><title>hir_lowering (186,221,528 samples, 4.19%)</title><rect x="95.4164%" y="197" width="4.1931%" height="15" fill="rgb(245,182,24)"/><text x="95.6664%" y="207.50">hir_l..</text></g><g><title>self_profile_alloc_query_strings (11,032,524 samples, 0.25%)</title><rect x="99.6416%" y="197" width="0.2484%" height="15" fill="rgb(242,14,37)"/><text x="99.8916%" y="207.50"></text></g><g><title>all (4,441,137,878 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (4,441,137,878 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>