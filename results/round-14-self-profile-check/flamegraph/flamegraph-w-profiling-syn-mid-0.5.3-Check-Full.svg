<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (276,034 samples, 0.18%)</title><rect x="10.8761%" y="149" width="0.1753%" height="15" fill="rgb(227,0,7)"/><text x="11.1261%" y="159.50"></text></g><g><title>item_attrs (239,834 samples, 0.15%)</title><rect x="11.4741%" y="117" width="0.1523%" height="15" fill="rgb(217,0,24)"/><text x="11.7241%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (230,324 samples, 0.15%)</title><rect x="11.4801%" y="101" width="0.1462%" height="15" fill="rgb(221,193,54)"/><text x="11.7301%" y="111.50"></text></g><g><title>codegen_fn_attrs (331,635 samples, 0.21%)</title><rect x="11.4263%" y="133" width="0.2106%" height="15" fill="rgb(248,212,6)"/><text x="11.6763%" y="143.50"></text></g><g><title>adt_drop_tys (187,223 samples, 0.12%)</title><rect x="14.4836%" y="69" width="0.1189%" height="15" fill="rgb(208,68,35)"/><text x="14.7336%" y="79.50"></text></g><g><title>adt_drop_tys (381,706 samples, 0.24%)</title><rect x="14.4655%" y="85" width="0.2423%" height="15" fill="rgb(232,128,0)"/><text x="14.7155%" y="95.50"></text></g><g><title>is_copy_raw (183,651 samples, 0.12%)</title><rect x="14.7078%" y="85" width="0.1166%" height="15" fill="rgb(207,160,47)"/><text x="14.9578%" y="95.50"></text></g><g><title>adt_drop_tys (882,887 samples, 0.56%)</title><rect x="14.3970%" y="101" width="0.5605%" height="15" fill="rgb(228,23,34)"/><text x="14.6470%" y="111.50"></text></g><g><title>param_env (209,670 samples, 0.13%)</title><rect x="14.8244%" y="85" width="0.1331%" height="15" fill="rgb(218,30,26)"/><text x="15.0744%" y="95.50"></text></g><g><title>needs_drop_raw (3,062,362 samples, 1.94%)</title><rect x="14.2404%" y="117" width="1.9443%" height="15" fill="rgb(220,122,19)"/><text x="14.4904%" y="127.50">n..</text></g><g><title>is_copy_raw (1,931,539 samples, 1.23%)</title><rect x="14.9583%" y="101" width="1.2263%" height="15" fill="rgb(250,228,42)"/><text x="15.2083%" y="111.50"></text></g><g><title>evaluate_obligation (1,700,416 samples, 1.08%)</title><rect x="15.1051%" y="85" width="1.0796%" height="15" fill="rgb(240,193,28)"/><text x="15.3551%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (351,308 samples, 0.22%)</title><rect x="16.3193%" y="101" width="0.2230%" height="15" fill="rgb(216,20,37)"/><text x="16.5693%" y="111.50"></text></g><g><title>resolve_instance (756,911 samples, 0.48%)</title><rect x="16.1847%" y="117" width="0.4806%" height="15" fill="rgb(206,188,39)"/><text x="16.4347%" y="127.50"></text></g><g><title>thir_body (1,265,435 samples, 0.80%)</title><rect x="16.6903%" y="117" width="0.8034%" height="15" fill="rgb(217,207,13)"/><text x="16.9403%" y="127.50"></text></g><g><title>mir_const (11,578,205 samples, 7.35%)</title><rect x="10.1530%" y="165" width="7.3510%" height="15" fill="rgb(231,73,38)"/><text x="10.4030%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (10,163,204 samples, 6.45%)</title><rect x="11.0514%" y="149" width="6.4527%" height="15" fill="rgb(225,20,46)"/><text x="11.3014%" y="159.50">unsafety..</text></g><g><title>mir_built (9,241,142 samples, 5.87%)</title><rect x="11.6368%" y="133" width="5.8672%" height="15" fill="rgb(210,31,41)"/><text x="11.8868%" y="143.50">mir_bui..</text></g><g><title>mir_promoted (12,658,917 samples, 8.04%)</title><rect x="9.4883%" y="181" width="8.0372%" height="15" fill="rgb(221,200,47)"/><text x="9.7383%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (226,252 samples, 0.14%)</title><rect x="17.5255%" y="181" width="0.1436%" height="15" fill="rgb(226,26,5)"/><text x="17.7755%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (725,535 samples, 0.46%)</title><rect x="17.6692%" y="181" width="0.4606%" height="15" fill="rgb(249,33,26)"/><text x="17.9192%" y="191.50"></text></g><g><title>normalize_projection_ty (541,583 samples, 0.34%)</title><rect x="17.7860%" y="165" width="0.3439%" height="15" fill="rgb(235,183,28)"/><text x="18.0360%" y="175.50"></text></g><g><title>type_op_normalize_predicate (845,490 samples, 0.54%)</title><rect x="18.1298%" y="181" width="0.5368%" height="15" fill="rgb(221,5,38)"/><text x="18.3798%" y="191.50"></text></g><g><title>normalize_projection_ty (648,838 samples, 0.41%)</title><rect x="18.2547%" y="165" width="0.4119%" height="15" fill="rgb(247,18,42)"/><text x="18.5047%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,922,580 samples, 1.86%)</title><rect x="18.6666%" y="181" width="1.8556%" height="15" fill="rgb(241,131,45)"/><text x="18.9166%" y="191.50">t..</text></g><g><title>evaluate_obligation (896,859 samples, 0.57%)</title><rect x="19.9527%" y="165" width="0.5694%" height="15" fill="rgb(249,31,29)"/><text x="20.2027%" y="175.50"></text></g><g><title>MIR_borrow_checking (31,339,559 samples, 19.90%)</title><rect x="0.6254%" y="213" width="19.8976%" height="15" fill="rgb(225,111,53)"/><text x="0.8754%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,244,076 samples, 19.84%)</title><rect x="0.6860%" y="197" width="19.8370%" height="15" fill="rgb(238,160,17)"/><text x="0.9360%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (194,133 samples, 0.12%)</title><rect x="20.5398%" y="213" width="0.1233%" height="15" fill="rgb(214,148,48)"/><text x="20.7898%" y="223.50"></text></g><g><title>codegen_fn_attrs (247,233 samples, 0.16%)</title><rect x="20.8633%" y="181" width="0.1570%" height="15" fill="rgb(232,36,49)"/><text x="21.1133%" y="191.50"></text></g><g><title>should_inherit_track_caller (211,732 samples, 0.13%)</title><rect x="20.8858%" y="165" width="0.1344%" height="15" fill="rgb(209,103,24)"/><text x="21.1358%" y="175.50"></text></g><g><title>check_mod_attrs (521,595 samples, 0.33%)</title><rect x="20.6891%" y="197" width="0.3312%" height="15" fill="rgb(229,88,8)"/><text x="20.9391%" y="207.50"></text></g><g><title>lookup_deprecation_entry (157,862 samples, 0.10%)</title><rect x="21.2394%" y="181" width="0.1002%" height="15" fill="rgb(213,181,19)"/><text x="21.4894%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (360,744 samples, 0.23%)</title><rect x="21.1415%" y="197" width="0.2290%" height="15" fill="rgb(254,191,54)"/><text x="21.3915%" y="207.50"></text></g><g><title>misc_checking_1 (1,195,833 samples, 0.76%)</title><rect x="20.6633%" y="213" width="0.7592%" height="15" fill="rgb(241,83,37)"/><text x="20.9133%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (725,818 samples, 0.46%)</title><rect x="21.4236%" y="197" width="0.4608%" height="15" fill="rgb(233,36,39)"/><text x="21.6736%" y="207.50"></text></g><g><title>check_mod_liveness (616,576 samples, 0.39%)</title><rect x="21.4929%" y="181" width="0.3915%" height="15" fill="rgb(226,3,54)"/><text x="21.7429%" y="191.50"></text></g><g><title>type_uninhabited_from (202,381 samples, 0.13%)</title><rect x="21.7559%" y="165" width="0.1285%" height="15" fill="rgb(245,192,40)"/><text x="22.0059%" y="175.50"></text></g><g><title>type_uninhabited_from (164,310 samples, 0.10%)</title><rect x="21.7801%" y="149" width="0.1043%" height="15" fill="rgb(238,167,29)"/><text x="22.0301%" y="159.50"></text></g><g><title>misc_checking_2 (1,539,827 samples, 0.98%)</title><rect x="21.4225%" y="213" width="0.9776%" height="15" fill="rgb(232,182,51)"/><text x="21.6725%" y="223.50"></text></g><g><title>match_checking (812,399 samples, 0.52%)</title><rect x="21.8844%" y="197" width="0.5158%" height="15" fill="rgb(231,60,39)"/><text x="22.1344%" y="207.50"></text></g><g><title>check_match (785,418 samples, 0.50%)</title><rect x="21.9015%" y="181" width="0.4987%" height="15" fill="rgb(208,69,12)"/><text x="22.1515%" y="191.50"></text></g><g><title>check_private_in_public (243,613 samples, 0.15%)</title><rect x="22.4067%" y="197" width="0.1547%" height="15" fill="rgb(235,93,37)"/><text x="22.6567%" y="207.50"></text></g><g><title>death_checking (523,516 samples, 0.33%)</title><rect x="22.5614%" y="197" width="0.3324%" height="15" fill="rgb(213,116,39)"/><text x="22.8114%" y="207.50"></text></g><g><title>param_env (725,718 samples, 0.46%)</title><rect x="23.5343%" y="165" width="0.4608%" height="15" fill="rgb(222,207,29)"/><text x="23.7843%" y="175.50"></text></g><g><title>predicates_of (317,312 samples, 0.20%)</title><rect x="23.7936%" y="149" width="0.2015%" height="15" fill="rgb(206,96,30)"/><text x="24.0436%" y="159.50"></text></g><g><title>predicates_defined_on (254,822 samples, 0.16%)</title><rect x="23.8333%" y="133" width="0.1618%" height="15" fill="rgb(218,138,4)"/><text x="24.0833%" y="143.50"></text></g><g><title>impl_parent (538,872 samples, 0.34%)</title><rect x="24.5998%" y="133" width="0.3421%" height="15" fill="rgb(250,191,14)"/><text x="24.8498%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (330,241 samples, 0.21%)</title><rect x="24.7322%" y="117" width="0.2097%" height="15" fill="rgb(239,60,40)"/><text x="24.9822%" y="127.50"></text></g><g><title>specialization_graph_of (2,752,111 samples, 1.75%)</title><rect x="24.0611%" y="149" width="1.7473%" height="15" fill="rgb(206,27,48)"/><text x="24.3111%" y="159.50"></text></g><g><title>impl_trait_ref (1,364,874 samples, 0.87%)</title><rect x="24.9419%" y="133" width="0.8666%" height="15" fill="rgb(225,35,8)"/><text x="25.1919%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,150,551 samples, 0.73%)</title><rect x="25.0780%" y="117" width="0.7305%" height="15" fill="rgb(250,213,24)"/><text x="25.3280%" y="127.50"></text></g><g><title>resolve_instance (2,859,892 samples, 1.82%)</title><rect x="23.9951%" y="165" width="1.8158%" height="15" fill="rgb(247,123,22)"/><text x="24.2451%" y="175.50">r..</text></g><g><title>trait_impls_of (223,562 samples, 0.14%)</title><rect x="25.8108%" y="165" width="0.1419%" height="15" fill="rgb(231,138,38)"/><text x="26.0608%" y="175.50"></text></g><g><title>crate_lints (7,620,725 samples, 4.84%)</title><rect x="22.8955%" y="181" width="4.8384%" height="15" fill="rgb(231,145,46)"/><text x="23.1455%" y="191.50">crate_..</text></g><g><title>type_of (2,792,111 samples, 1.77%)</title><rect x="25.9612%" y="165" width="1.7727%" height="15" fill="rgb(251,118,11)"/><text x="26.2112%" y="175.50">t..</text></g><g><title>metadata_decode_entry_type_of (2,544,732 samples, 1.62%)</title><rect x="26.1182%" y="149" width="1.6157%" height="15" fill="rgb(217,147,25)"/><text x="26.3682%" y="159.50"></text></g><g><title>lint_checking (8,492,235 samples, 5.39%)</title><rect x="22.8938%" y="197" width="5.3917%" height="15" fill="rgb(247,81,37)"/><text x="23.1438%" y="207.50">lint_ch..</text></g><g><title>module_lints (868,870 samples, 0.55%)</title><rect x="27.7339%" y="181" width="0.5516%" height="15" fill="rgb(209,12,38)"/><text x="27.9839%" y="191.50"></text></g><g><title>lint_mod (859,370 samples, 0.55%)</title><rect x="27.7399%" y="165" width="0.5456%" height="15" fill="rgb(227,1,9)"/><text x="27.9899%" y="175.50"></text></g><g><title>layout_of (309,534 samples, 0.20%)</title><rect x="28.0890%" y="149" width="0.1965%" height="15" fill="rgb(248,47,43)"/><text x="28.3390%" y="159.50"></text></g><g><title>layout_of (291,923 samples, 0.19%)</title><rect x="28.1002%" y="133" width="0.1853%" height="15" fill="rgb(221,10,30)"/><text x="28.3502%" y="143.50"></text></g><g><title>layout_of (264,763 samples, 0.17%)</title><rect x="28.1174%" y="117" width="0.1681%" height="15" fill="rgb(210,229,1)"/><text x="28.3674%" y="127.50"></text></g><g><title>layout_of (216,312 samples, 0.14%)</title><rect x="28.1482%" y="101" width="0.1373%" height="15" fill="rgb(222,148,37)"/><text x="28.3982%" y="111.50"></text></g><g><title>privacy_access_levels (270,233 samples, 0.17%)</title><rect x="28.2855%" y="197" width="0.1716%" height="15" fill="rgb(234,67,33)"/><text x="28.5355%" y="207.50"></text></g><g><title>privacy_checking_modules (1,325,984 samples, 0.84%)</title><rect x="28.4571%" y="197" width="0.8419%" height="15" fill="rgb(247,98,35)"/><text x="28.7071%" y="207.50"></text></g><g><title>check_mod_privacy (1,320,144 samples, 0.84%)</title><rect x="28.4608%" y="181" width="0.8382%" height="15" fill="rgb(247,138,52)"/><text x="28.7108%" y="191.50"></text></g><g><title>misc_checking_3 (10,888,171 samples, 6.91%)</title><rect x="22.4002%" y="213" width="6.9129%" height="15" fill="rgb(213,79,30)"/><text x="22.6502%" y="223.50">misc_chec..</text></g><g><title>impl_parent (435,756 samples, 0.28%)</title><rect x="29.9373%" y="149" width="0.2767%" height="15" fill="rgb(246,177,23)"/><text x="30.1873%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (250,672 samples, 0.16%)</title><rect x="30.0548%" y="133" width="0.1592%" height="15" fill="rgb(230,62,27)"/><text x="30.3048%" y="143.50"></text></g><g><title>impl_trait_ref (1,158,312 samples, 0.74%)</title><rect x="30.2140%" y="149" width="0.7354%" height="15" fill="rgb(216,154,8)"/><text x="30.4640%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (972,248 samples, 0.62%)</title><rect x="30.3321%" y="133" width="0.6173%" height="15" fill="rgb(244,35,45)"/><text x="30.5821%" y="143.50"></text></g><g><title>trait_impls_of (161,013 samples, 0.10%)</title><rect x="30.9586%" y="149" width="0.1022%" height="15" fill="rgb(251,115,12)"/><text x="31.2086%" y="159.50"></text></g><g><title>coherent_trait (2,653,269 samples, 1.68%)</title><rect x="29.3793%" y="181" width="1.6846%" height="15" fill="rgb(240,54,50)"/><text x="29.6293%" y="191.50"></text></g><g><title>specialization_graph_of (2,643,419 samples, 1.68%)</title><rect x="29.3856%" y="165" width="1.6783%" height="15" fill="rgb(233,84,52)"/><text x="29.6356%" y="175.50"></text></g><g><title>coherence_checking (2,727,301 samples, 1.73%)</title><rect x="29.3692%" y="197" width="1.7316%" height="15" fill="rgb(207,117,47)"/><text x="29.6192%" y="207.50"></text></g><g><title>associated_item (261,493 samples, 0.17%)</title><rect x="49.7826%" y="133" width="0.1660%" height="15" fill="rgb(249,43,39)"/><text x="50.0326%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (201,112 samples, 0.13%)</title><rect x="49.8210%" y="117" width="0.1277%" height="15" fill="rgb(209,38,44)"/><text x="50.0710%" y="127.50"></text></g><g><title>associated_items (394,954 samples, 0.25%)</title><rect x="49.7169%" y="149" width="0.2508%" height="15" fill="rgb(236,212,23)"/><text x="49.9669%" y="159.50"></text></g><g><title>adt_def (170,941 samples, 0.11%)</title><rect x="51.5451%" y="117" width="0.1085%" height="15" fill="rgb(242,79,21)"/><text x="51.7951%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (166,241 samples, 0.11%)</title><rect x="51.5481%" y="101" width="0.1055%" height="15" fill="rgb(211,96,35)"/><text x="51.7981%" y="111.50"></text></g><g><title>adt_def (211,362 samples, 0.13%)</title><rect x="51.7741%" y="101" width="0.1342%" height="15" fill="rgb(253,215,40)"/><text x="52.0241%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (204,192 samples, 0.13%)</title><rect x="51.7786%" y="85" width="0.1296%" height="15" fill="rgb(211,81,21)"/><text x="52.0286%" y="95.50"></text></g><g><title>adt_def (370,617 samples, 0.24%)</title><rect x="51.9916%" y="85" width="0.2353%" height="15" fill="rgb(208,190,38)"/><text x="52.2416%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (366,957 samples, 0.23%)</title><rect x="51.9939%" y="69" width="0.2330%" height="15" fill="rgb(235,213,38)"/><text x="52.2439%" y="79.50"></text></g><g><title>item_attrs (256,475 samples, 0.16%)</title><rect x="52.0641%" y="53" width="0.1628%" height="15" fill="rgb(237,122,38)"/><text x="52.3141%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (252,625 samples, 0.16%)</title><rect x="52.0665%" y="37" width="0.1604%" height="15" fill="rgb(244,218,35)"/><text x="52.3165%" y="47.50"></text></g><g><title>adt_def (270,182 samples, 0.17%)</title><rect x="52.2993%" y="69" width="0.1715%" height="15" fill="rgb(240,68,47)"/><text x="52.5493%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (261,061 samples, 0.17%)</title><rect x="52.3051%" y="53" width="0.1657%" height="15" fill="rgb(210,16,53)"/><text x="52.5551%" y="63.50"></text></g><g><title>item_attrs (166,781 samples, 0.11%)</title><rect x="52.3649%" y="37" width="0.1059%" height="15" fill="rgb(235,124,12)"/><text x="52.6149%" y="47.50"></text></g><g><title>adt_dtorck_constraint (263,814 samples, 0.17%)</title><rect x="52.5486%" y="53" width="0.1675%" height="15" fill="rgb(224,169,11)"/><text x="52.7986%" y="63.50"></text></g><g><title>adt_dtorck_constraint (368,615 samples, 0.23%)</title><rect x="52.4933%" y="69" width="0.2340%" height="15" fill="rgb(250,166,2)"/><text x="52.7433%" y="79.50"></text></g><g><title>adt_dtorck_constraint (808,769 samples, 0.51%)</title><rect x="52.2435%" y="85" width="0.5135%" height="15" fill="rgb(242,216,29)"/><text x="52.4935%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,358,107 samples, 0.86%)</title><rect x="51.9325%" y="101" width="0.8623%" height="15" fill="rgb(230,116,27)"/><text x="52.1825%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,830,301 samples, 1.16%)</title><rect x="51.6827%" y="117" width="1.1621%" height="15" fill="rgb(228,99,48)"/><text x="51.9327%" y="127.50"></text></g><g><title>dropck_outlives (4,409,400 samples, 2.80%)</title><rect x="50.0929%" y="149" width="2.7995%" height="15" fill="rgb(253,11,6)"/><text x="50.3429%" y="159.50">dr..</text></g><g><title>adt_dtorck_constraint (2,314,166 samples, 1.47%)</title><rect x="51.4231%" y="133" width="1.4693%" height="15" fill="rgb(247,143,39)"/><text x="51.6731%" y="143.50"></text></g><g><title>predicates_of (291,952 samples, 0.19%)</title><rect x="54.4621%" y="133" width="0.1854%" height="15" fill="rgb(236,97,10)"/><text x="54.7121%" y="143.50"></text></g><g><title>predicates_defined_on (168,731 samples, 0.11%)</title><rect x="54.5404%" y="117" width="0.1071%" height="15" fill="rgb(233,208,19)"/><text x="54.7904%" y="127.50"></text></g><g><title>evaluate_obligation (3,612,676 samples, 2.29%)</title><rect x="52.8924%" y="149" width="2.2937%" height="15" fill="rgb(216,164,2)"/><text x="53.1424%" y="159.50">e..</text></g><g><title>trait_impls_of (775,989 samples, 0.49%)</title><rect x="54.6934%" y="133" width="0.4927%" height="15" fill="rgb(220,129,5)"/><text x="54.9434%" y="143.50"></text></g><g><title>implementations_of_trait (241,123 samples, 0.15%)</title><rect x="55.0330%" y="117" width="0.1531%" height="15" fill="rgb(242,17,10)"/><text x="55.2830%" y="127.50"></text></g><g><title>fn_sig (165,111 samples, 0.10%)</title><rect x="55.2097%" y="149" width="0.1048%" height="15" fill="rgb(242,107,0)"/><text x="55.4597%" y="159.50"></text></g><g><title>evaluate_obligation (266,455 samples, 0.17%)</title><rect x="55.7001%" y="133" width="0.1692%" height="15" fill="rgb(251,28,31)"/><text x="55.9501%" y="143.50"></text></g><g><title>method_autoderef_steps (517,237 samples, 0.33%)</title><rect x="55.5603%" y="149" width="0.3284%" height="15" fill="rgb(233,223,10)"/><text x="55.8103%" y="159.50"></text></g><g><title>predicates_of (412,194 samples, 0.26%)</title><rect x="55.9132%" y="149" width="0.2617%" height="15" fill="rgb(215,21,27)"/><text x="56.1632%" y="159.50"></text></g><g><title>predicates_defined_on (270,083 samples, 0.17%)</title><rect x="56.0034%" y="133" width="0.1715%" height="15" fill="rgb(232,23,21)"/><text x="56.2534%" y="143.50"></text></g><g><title>evaluate_obligation (658,397 samples, 0.42%)</title><rect x="58.3658%" y="133" width="0.4180%" height="15" fill="rgb(244,5,23)"/><text x="58.6158%" y="143.50"></text></g><g><title>lint_levels (378,424 samples, 0.24%)</title><rect x="58.9727%" y="133" width="0.2403%" height="15" fill="rgb(226,81,46)"/><text x="59.2227%" y="143.50"></text></g><g><title>method_autoderef_steps (220,912 samples, 0.14%)</title><rect x="59.2164%" y="133" width="0.1403%" height="15" fill="rgb(247,70,30)"/><text x="59.4664%" y="143.50"></text></g><g><title>typeck (5,014,086 samples, 3.18%)</title><rect x="56.2446%" y="149" width="3.1835%" height="15" fill="rgb(212,68,19)"/><text x="56.4946%" y="159.50">typ..</text></g><g><title>item_bodies_checking (44,691,078 samples, 28.37%)</title><rect x="31.1188%" y="197" width="28.3745%" height="15" fill="rgb(240,187,13)"/><text x="31.3688%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (44,688,528 samples, 28.37%)</title><rect x="31.1204%" y="181" width="28.3729%" height="15" fill="rgb(223,113,26)"/><text x="31.3704%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (44,622,437 samples, 28.33%)</title><rect x="31.1624%" y="165" width="28.3309%" height="15" fill="rgb(206,192,2)"/><text x="31.4124%" y="175.50">typeck</text></g><g><title>impl_trait_ref (216,152 samples, 0.14%)</title><rect x="60.0655%" y="117" width="0.1372%" height="15" fill="rgb(241,108,4)"/><text x="60.3155%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (195,612 samples, 0.12%)</title><rect x="60.0785%" y="101" width="0.1242%" height="15" fill="rgb(247,173,49)"/><text x="60.3285%" y="111.50"></text></g><g><title>adt_destructor (394,784 samples, 0.25%)</title><rect x="59.9710%" y="165" width="0.2506%" height="15" fill="rgb(224,114,35)"/><text x="60.2210%" y="175.50"></text></g><g><title>coherent_trait (388,224 samples, 0.25%)</title><rect x="59.9752%" y="149" width="0.2465%" height="15" fill="rgb(245,159,27)"/><text x="60.2252%" y="159.50"></text></g><g><title>specialization_graph_of (386,424 samples, 0.25%)</title><rect x="59.9763%" y="133" width="0.2453%" height="15" fill="rgb(245,172,44)"/><text x="60.2263%" y="143.50"></text></g><g><title>item_types_checking (1,275,164 samples, 0.81%)</title><rect x="59.4933%" y="197" width="0.8096%" height="15" fill="rgb(236,23,11)"/><text x="59.7433%" y="207.50"></text></g><g><title>check_mod_item_types (1,268,674 samples, 0.81%)</title><rect x="59.4974%" y="181" width="0.8055%" height="15" fill="rgb(205,117,38)"/><text x="59.7474%" y="191.50"></text></g><g><title>fn_sig (218,580 samples, 0.14%)</title><rect x="60.4826%" y="165" width="0.1388%" height="15" fill="rgb(237,72,25)"/><text x="60.7326%" y="175.50"></text></g><g><title>named_region_map (236,036 samples, 0.15%)</title><rect x="60.6818%" y="149" width="0.1499%" height="15" fill="rgb(244,70,9)"/><text x="60.9318%" y="159.50"></text></g><g><title>resolve_lifetimes (218,315 samples, 0.14%)</title><rect x="60.6931%" y="133" width="0.1386%" height="15" fill="rgb(217,125,39)"/><text x="60.9431%" y="143.50"></text></g><g><title>generics_of (342,687 samples, 0.22%)</title><rect x="60.6214%" y="165" width="0.2176%" height="15" fill="rgb(235,36,10)"/><text x="60.8714%" y="175.50"></text></g><g><title>predicates_of (722,417 samples, 0.46%)</title><rect x="60.8596%" y="165" width="0.4587%" height="15" fill="rgb(251,123,47)"/><text x="61.1096%" y="175.50"></text></g><g><title>predicates_defined_on (668,527 samples, 0.42%)</title><rect x="60.8938%" y="149" width="0.4244%" height="15" fill="rgb(221,13,13)"/><text x="61.1438%" y="159.50"></text></g><g><title>inferred_outlives_of (495,795 samples, 0.31%)</title><rect x="61.0035%" y="133" width="0.3148%" height="15" fill="rgb(238,131,9)"/><text x="61.2535%" y="143.50"></text></g><g><title>inferred_outlives_crate (471,025 samples, 0.30%)</title><rect x="61.0192%" y="117" width="0.2991%" height="15" fill="rgb(211,50,8)"/><text x="61.2692%" y="127.50"></text></g><g><title>type_of (255,085 samples, 0.16%)</title><rect x="61.1563%" y="101" width="0.1620%" height="15" fill="rgb(245,182,24)"/><text x="61.4063%" y="111.50"></text></g><g><title>type_collecting (1,668,468 samples, 1.06%)</title><rect x="60.3082%" y="197" width="1.0593%" height="15" fill="rgb(242,14,37)"/><text x="60.5582%" y="207.50"></text></g><g><title>collect_mod_item_types (1,653,048 samples, 1.05%)</title><rect x="60.3180%" y="181" width="1.0495%" height="15" fill="rgb(246,228,12)"/><text x="60.5680%" y="191.50"></text></g><g><title>evaluate_obligation (370,784 samples, 0.24%)</title><rect x="61.9695%" y="165" width="0.2354%" height="15" fill="rgb(213,55,15)"/><text x="62.2195%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,616,445 samples, 1.03%)</title><rect x="61.4893%" y="181" width="1.0263%" height="15" fill="rgb(209,9,3)"/><text x="61.7393%" y="191.50"></text></g><g><title>region_scope_tree (226,614 samples, 0.14%)</title><rect x="62.3717%" y="165" width="0.1439%" height="15" fill="rgb(230,59,30)"/><text x="62.6217%" y="175.50"></text></g><g><title>adt_def (213,273 samples, 0.14%)</title><rect x="63.6393%" y="133" width="0.1354%" height="15" fill="rgb(209,121,21)"/><text x="63.8893%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (206,873 samples, 0.13%)</title><rect x="63.6434%" y="117" width="0.1313%" height="15" fill="rgb(220,109,13)"/><text x="63.8934%" y="127.50"></text></g><g><title>adt_sized_constraint (230,844 samples, 0.15%)</title><rect x="63.7748%" y="133" width="0.1466%" height="15" fill="rgb(232,18,1)"/><text x="64.0248%" y="143.50"></text></g><g><title>adt_sized_constraint (499,017 samples, 0.32%)</title><rect x="63.6147%" y="149" width="0.3168%" height="15" fill="rgb(215,41,42)"/><text x="63.8647%" y="159.50"></text></g><g><title>evaluate_obligation (1,017,990 samples, 0.65%)</title><rect x="63.3006%" y="165" width="0.6463%" height="15" fill="rgb(224,123,36)"/><text x="63.5506%" y="175.50"></text></g><g><title>param_env (248,310 samples, 0.16%)</title><rect x="64.0311%" y="165" width="0.1577%" height="15" fill="rgb(240,125,3)"/><text x="64.2811%" y="175.50"></text></g><g><title>region_scope_tree (173,423 samples, 0.11%)</title><rect x="64.2033%" y="165" width="0.1101%" height="15" fill="rgb(205,98,50)"/><text x="64.4533%" y="175.50"></text></g><g><title>analysis (100,663,430 samples, 63.91%)</title><rect x="0.4248%" y="229" width="63.9115%" height="15" fill="rgb(205,185,37)"/><text x="0.6748%" y="239.50">analysis</text></g><g><title>type_check_crate (55,163,084 samples, 35.02%)</title><rect x="29.3131%" y="213" width="35.0232%" height="15" fill="rgb(238,207,15)"/><text x="29.5631%" y="223.50">type_check_crate</text></g><g><title>wf_checking (4,672,372 samples, 2.97%)</title><rect x="61.3698%" y="197" width="2.9665%" height="15" fill="rgb(213,199,42)"/><text x="61.6198%" y="207.50">wf_..</text></g><g><title>check_item_well_formed (2,867,723 samples, 1.82%)</title><rect x="62.5156%" y="181" width="1.8207%" height="15" fill="rgb(235,201,11)"/><text x="62.7656%" y="191.50">c..</text></g><g><title>codegen_crate (529,976 samples, 0.34%)</title><rect x="64.3434%" y="229" width="0.3365%" height="15" fill="rgb(207,46,11)"/><text x="64.5934%" y="239.50"></text></g><g><title>AST_validation (280,783 samples, 0.18%)</title><rect x="64.8217%" y="213" width="0.1783%" height="15" fill="rgb(241,35,35)"/><text x="65.0717%" y="223.50"></text></g><g><title>metadata_load_macro (484,755 samples, 0.31%)</title><rect x="86.0568%" y="181" width="0.3078%" height="15" fill="rgb(243,32,47)"/><text x="86.3068%" y="191.50"></text></g><g><title>metadata_register_crate (2,948,283 samples, 1.87%)</title><rect x="86.3646%" y="181" width="1.8719%" height="15" fill="rgb(247,202,23)"/><text x="86.6146%" y="191.50">m..</text></g><g><title>metadata_register_crate (1,016,632 samples, 0.65%)</title><rect x="87.5910%" y="165" width="0.6455%" height="15" fill="rgb(219,102,11)"/><text x="87.8410%" y="175.50"></text></g><g><title>macro_expand_crate (36,781,110 samples, 23.35%)</title><rect x="65.1528%" y="213" width="23.3524%" height="15" fill="rgb(243,110,44)"/><text x="65.4028%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (36,753,590 samples, 23.33%)</title><rect x="65.1703%" y="197" width="23.3350%" height="15" fill="rgb(222,74,54)"/><text x="65.4203%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (423,305 samples, 0.27%)</title><rect x="88.2365%" y="181" width="0.2688%" height="15" fill="rgb(216,99,12)"/><text x="88.4865%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (169,472 samples, 0.11%)</title><rect x="88.5095%" y="213" width="0.1076%" height="15" fill="rgb(226,22,26)"/><text x="88.7595%" y="223.50"></text></g><g><title>finalize_imports (648,308 samples, 0.41%)</title><rect x="88.6235%" y="197" width="0.4116%" height="15" fill="rgb(217,163,10)"/><text x="88.8735%" y="207.50"></text></g><g><title>finalize_macro_resolutions (217,363 samples, 0.14%)</title><rect x="89.0351%" y="197" width="0.1380%" height="15" fill="rgb(213,25,53)"/><text x="89.2851%" y="207.50"></text></g><g><title>late_resolve_crate (4,055,884 samples, 2.58%)</title><rect x="89.1731%" y="197" width="2.5751%" height="15" fill="rgb(252,105,26)"/><text x="89.4231%" y="207.50">la..</text></g><g><title>configure_and_expand (42,881,707 samples, 27.23%)</title><rect x="64.6799%" y="229" width="27.2257%" height="15" fill="rgb(220,39,43)"/><text x="64.9299%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (5,179,708 samples, 3.29%)</title><rect x="88.6171%" y="213" width="3.2886%" height="15" fill="rgb(229,68,48)"/><text x="88.8671%" y="223.50">res..</text></g><g><title>early_lint_checks (334,504 samples, 0.21%)</title><rect x="92.0058%" y="229" width="0.2124%" height="15" fill="rgb(252,8,32)"/><text x="92.2558%" y="239.50"></text></g><g><title>free_global_ctxt (3,532,000 samples, 2.24%)</title><rect x="92.2182%" y="229" width="2.2425%" height="15" fill="rgb(223,20,43)"/><text x="92.4682%" y="239.50">f..</text></g><g><title>generate_crate_metadata (1,411,296 samples, 0.90%)</title><rect x="94.4607%" y="229" width="0.8960%" height="15" fill="rgb(229,81,49)"/><text x="94.7107%" y="239.50"></text></g><g><title>hir_lowering (5,168,718 samples, 3.28%)</title><rect x="95.3567%" y="229" width="3.2816%" height="15" fill="rgb(236,28,36)"/><text x="95.6067%" y="239.50">hir..</text></g><g><title>parse_crate (461,445 samples, 0.29%)</title><rect x="98.6774%" y="229" width="0.2930%" height="15" fill="rgb(249,185,26)"/><text x="98.9274%" y="239.50"></text></g><g><title>prepare_outputs (346,264 samples, 0.22%)</title><rect x="98.9765%" y="229" width="0.2198%" height="15" fill="rgb(249,174,33)"/><text x="99.2265%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (803,679 samples, 0.51%)</title><rect x="99.1963%" y="229" width="0.5103%" height="15" fill="rgb(233,201,37)"/><text x="99.4463%" y="239.50"></text></g><g><title>all (157,504,314 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (157,504,314 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (360,754 samples, 0.23%)</title><rect x="99.7710%" y="229" width="0.2290%" height="15" fill="rgb(230,49,44)"/><text x="100.0210%" y="239.50"></text></g></svg></svg>