<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (316,055 samples, 0.16%)</title><rect x="10.2085%" y="341" width="0.1558%" height="15" fill="rgb(227,0,7)"/><text x="10.4585%" y="351.50"></text></g><g><title>item_attrs (210,662 samples, 0.10%)</title><rect x="10.7325%" y="309" width="0.1038%" height="15" fill="rgb(217,0,24)"/><text x="10.9825%" y="319.50"></text></g><g><title>codegen_fn_attrs (333,084 samples, 0.16%)</title><rect x="10.6807%" y="325" width="0.1642%" height="15" fill="rgb(221,193,54)"/><text x="10.9307%" y="335.50"></text></g><g><title>is_copy_raw (300,563 samples, 0.15%)</title><rect x="12.8234%" y="309" width="0.1482%" height="15" fill="rgb(248,212,6)"/><text x="13.0734%" y="319.50"></text></g><g><title>evaluate_obligation (254,213 samples, 0.13%)</title><rect x="12.8463%" y="293" width="0.1253%" height="15" fill="rgb(208,68,35)"/><text x="13.0963%" y="303.50"></text></g><g><title>is_copy_raw (801,718 samples, 0.40%)</title><rect x="13.0977%" y="293" width="0.3952%" height="15" fill="rgb(232,128,0)"/><text x="13.3477%" y="303.50"></text></g><g><title>evaluate_obligation (646,604 samples, 0.32%)</title><rect x="13.1742%" y="277" width="0.3187%" height="15" fill="rgb(207,160,47)"/><text x="13.4242%" y="287.50"></text></g><g><title>needs_drop_raw (1,072,141 samples, 0.53%)</title><rect x="12.9734%" y="309" width="0.5285%" height="15" fill="rgb(228,23,34)"/><text x="13.2234%" y="319.50"></text></g><g><title>codegen_fulfill_obligation (1,084,919 samples, 0.53%)</title><rect x="13.6809%" y="293" width="0.5348%" height="15" fill="rgb(218,30,26)"/><text x="13.9309%" y="303.50"></text></g><g><title>impl_parent (689,969 samples, 0.34%)</title><rect x="14.6729%" y="277" width="0.3401%" height="15" fill="rgb(220,122,19)"/><text x="14.9229%" y="287.50"></text></g><g><title>metadata_decode_entry_impl_parent (279,632 samples, 0.14%)</title><rect x="14.8751%" y="261" width="0.1378%" height="15" fill="rgb(250,228,42)"/><text x="15.1251%" y="271.50"></text></g><g><title>specialization_graph_of (2,962,014 samples, 1.46%)</title><rect x="14.2819%" y="293" width="1.4601%" height="15" fill="rgb(240,193,28)"/><text x="14.5319%" y="303.50"></text></g><g><title>impl_trait_ref (1,478,856 samples, 0.73%)</title><rect x="15.0130%" y="277" width="0.7290%" height="15" fill="rgb(216,20,37)"/><text x="15.2630%" y="287.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,305,133 samples, 0.64%)</title><rect x="15.0986%" y="261" width="0.6434%" height="15" fill="rgb(206,188,39)"/><text x="15.3486%" y="271.50"></text></g><g><title>resolve_instance (4,656,872 samples, 2.30%)</title><rect x="13.5019%" y="309" width="2.2956%" height="15" fill="rgb(217,207,13)"/><text x="13.7519%" y="319.50">r..</text></g><g><title>thir_body (1,723,350 samples, 0.85%)</title><rect x="15.8149%" y="309" width="0.8495%" height="15" fill="rgb(231,73,38)"/><text x="16.0649%" y="319.50"></text></g><g><title>mir_const (14,296,876 samples, 7.05%)</title><rect x="9.6548%" y="357" width="7.0477%" height="15" fill="rgb(225,20,46)"/><text x="9.9048%" y="367.50">mir_const</text></g><g><title>unsafety_check_result (12,857,427 samples, 6.34%)</title><rect x="10.3643%" y="341" width="6.3381%" height="15" fill="rgb(210,31,41)"/><text x="10.6143%" y="351.50">unsafety..</text></g><g><title>mir_built (11,882,638 samples, 5.86%)</title><rect x="10.8449%" y="325" width="5.8576%" height="15" fill="rgb(221,200,47)"/><text x="11.0949%" y="335.50">mir_bui..</text></g><g><title>mir_promoted (15,797,762 samples, 7.79%)</title><rect x="9.1169%" y="373" width="7.7876%" height="15" fill="rgb(226,26,5)"/><text x="9.3669%" y="383.50">mir_promoted</text></g><g><title>mir_const_qualif (409,776 samples, 0.20%)</title><rect x="16.7025%" y="357" width="0.2020%" height="15" fill="rgb(249,33,26)"/><text x="16.9525%" y="367.50"></text></g><g><title>mir_const (284,684 samples, 0.14%)</title><rect x="16.7642%" y="341" width="0.1403%" height="15" fill="rgb(235,183,28)"/><text x="17.0142%" y="351.50"></text></g><g><title>type_op_ascribe_user_type (374,862 samples, 0.18%)</title><rect x="16.9061%" y="373" width="0.1848%" height="15" fill="rgb(221,5,38)"/><text x="17.1561%" y="383.50"></text></g><g><title>type_op_normalize_fn_sig (1,258,569 samples, 0.62%)</title><rect x="17.0909%" y="373" width="0.6204%" height="15" fill="rgb(247,18,42)"/><text x="17.3409%" y="383.50"></text></g><g><title>normalize_projection_ty (808,045 samples, 0.40%)</title><rect x="17.3130%" y="357" width="0.3983%" height="15" fill="rgb(241,131,45)"/><text x="17.5630%" y="367.50"></text></g><g><title>type_op_normalize_ty (312,122 samples, 0.15%)</title><rect x="17.7572%" y="373" width="0.1539%" height="15" fill="rgb(249,31,29)"/><text x="18.0072%" y="383.50"></text></g><g><title>MIR_borrow_checking (36,643,154 samples, 18.06%)</title><rect x="0.9632%" y="405" width="18.0635%" height="15" fill="rgb(225,111,53)"/><text x="1.2132%" y="415.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (36,443,820 samples, 17.97%)</title><rect x="1.0614%" y="389" width="17.9652%" height="15" fill="rgb(238,160,17)"/><text x="1.3114%" y="399.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (2,262,955 samples, 1.12%)</title><rect x="17.9111%" y="373" width="1.1155%" height="15" fill="rgb(214,148,48)"/><text x="18.1611%" y="383.50"></text></g><g><title>evaluate_obligation (239,872 samples, 0.12%)</title><rect x="18.9084%" y="357" width="0.1182%" height="15" fill="rgb(232,36,49)"/><text x="19.1584%" y="367.50"></text></g><g><title>MIR_effect_checking (316,844 samples, 0.16%)</title><rect x="19.0266%" y="405" width="0.1562%" height="15" fill="rgb(209,103,24)"/><text x="19.2766%" y="415.50"></text></g><g><title>hir_module_items (276,764 samples, 0.14%)</title><rect x="19.1828%" y="405" width="0.1364%" height="15" fill="rgb(229,88,8)"/><text x="19.4328%" y="415.50"></text></g><g><title>fn_sig (536,394 samples, 0.26%)</title><rect x="19.5690%" y="357" width="0.2644%" height="15" fill="rgb(213,181,19)"/><text x="19.8190%" y="367.50"></text></g><g><title>codegen_fn_attrs (943,889 samples, 0.47%)</title><rect x="19.4930%" y="373" width="0.4653%" height="15" fill="rgb(254,191,54)"/><text x="19.7430%" y="383.50"></text></g><g><title>check_mod_attrs (1,275,973 samples, 0.63%)</title><rect x="19.3293%" y="389" width="0.6290%" height="15" fill="rgb(241,83,37)"/><text x="19.5793%" y="399.50"></text></g><g><title>check_mod_unstable_api_usage (458,396 samples, 0.23%)</title><rect x="20.0848%" y="389" width="0.2260%" height="15" fill="rgb(233,36,39)"/><text x="20.3348%" y="399.50"></text></g><g><title>misc_checking_1 (2,078,363 samples, 1.02%)</title><rect x="19.3195%" y="405" width="1.0245%" height="15" fill="rgb(226,3,54)"/><text x="19.5695%" y="415.50"></text></g><g><title>liveness_and_intrinsic_checking (659,698 samples, 0.33%)</title><rect x="20.3449%" y="389" width="0.3252%" height="15" fill="rgb(245,192,40)"/><text x="20.5949%" y="399.50"></text></g><g><title>check_mod_liveness (523,247 samples, 0.26%)</title><rect x="20.4121%" y="373" width="0.2579%" height="15" fill="rgb(238,167,29)"/><text x="20.6621%" y="383.50"></text></g><g><title>misc_checking_2 (1,385,496 samples, 0.68%)</title><rect x="20.3441%" y="405" width="0.6830%" height="15" fill="rgb(232,182,51)"/><text x="20.5941%" y="415.50"></text></g><g><title>match_checking (724,218 samples, 0.36%)</title><rect x="20.6701%" y="389" width="0.3570%" height="15" fill="rgb(231,60,39)"/><text x="20.9201%" y="399.50"></text></g><g><title>check_match (673,548 samples, 0.33%)</title><rect x="20.6951%" y="373" width="0.3320%" height="15" fill="rgb(208,69,12)"/><text x="20.9451%" y="383.50"></text></g><g><title>check_private_in_public (276,133 samples, 0.14%)</title><rect x="21.0319%" y="389" width="0.1361%" height="15" fill="rgb(235,93,37)"/><text x="21.2819%" y="399.50"></text></g><g><title>death_checking (587,656 samples, 0.29%)</title><rect x="21.1680%" y="389" width="0.2897%" height="15" fill="rgb(213,116,39)"/><text x="21.4180%" y="399.50"></text></g><g><title>param_env (433,065 samples, 0.21%)</title><rect x="21.9419%" y="357" width="0.2135%" height="15" fill="rgb(222,207,29)"/><text x="22.1919%" y="367.50"></text></g><g><title>predicates_of (234,884 samples, 0.12%)</title><rect x="22.0396%" y="341" width="0.1158%" height="15" fill="rgb(206,96,30)"/><text x="22.2896%" y="351.50"></text></g><g><title>crate_lints (2,689,819 samples, 1.33%)</title><rect x="21.4585%" y="373" width="1.3260%" height="15" fill="rgb(218,138,4)"/><text x="21.7085%" y="383.50"></text></g><g><title>type_of (1,269,754 samples, 0.63%)</title><rect x="22.1585%" y="357" width="0.6259%" height="15" fill="rgb(250,191,14)"/><text x="22.4085%" y="367.50"></text></g><g><title>metadata_decode_entry_type_of (1,023,163 samples, 0.50%)</title><rect x="22.2801%" y="341" width="0.5044%" height="15" fill="rgb(239,60,40)"/><text x="22.5301%" y="351.50"></text></g><g><title>lint_checking (3,387,277 samples, 1.67%)</title><rect x="21.4577%" y="389" width="1.6698%" height="15" fill="rgb(206,27,48)"/><text x="21.7077%" y="399.50"></text></g><g><title>module_lints (695,868 samples, 0.34%)</title><rect x="22.7844%" y="373" width="0.3430%" height="15" fill="rgb(225,35,8)"/><text x="23.0344%" y="383.50"></text></g><g><title>lint_mod (691,168 samples, 0.34%)</title><rect x="22.7868%" y="357" width="0.3407%" height="15" fill="rgb(250,213,24)"/><text x="23.0368%" y="367.50"></text></g><g><title>privacy_access_levels (457,275 samples, 0.23%)</title><rect x="23.1275%" y="389" width="0.2254%" height="15" fill="rgb(247,123,22)"/><text x="23.3775%" y="399.50"></text></g><g><title>privacy_checking_modules (1,267,664 samples, 0.62%)</title><rect x="23.3529%" y="389" width="0.6249%" height="15" fill="rgb(231,138,38)"/><text x="23.6029%" y="399.50"></text></g><g><title>check_mod_privacy (1,264,504 samples, 0.62%)</title><rect x="23.3545%" y="373" width="0.6233%" height="15" fill="rgb(231,145,46)"/><text x="23.6045%" y="383.50"></text></g><g><title>misc_checking_3 (6,006,516 samples, 2.96%)</title><rect x="21.0271%" y="405" width="2.9609%" height="15" fill="rgb(251,118,11)"/><text x="21.2771%" y="415.50">mis..</text></g><g><title>impl_parent (1,557,865 samples, 0.77%)</title><rect x="25.3527%" y="341" width="0.7680%" height="15" fill="rgb(217,147,25)"/><text x="25.6027%" y="351.50"></text></g><g><title>metadata_decode_entry_impl_parent (959,250 samples, 0.47%)</title><rect x="25.6478%" y="325" width="0.4729%" height="15" fill="rgb(247,81,37)"/><text x="25.8978%" y="335.50"></text></g><g><title>impl_trait_ref (3,695,967 samples, 1.82%)</title><rect x="26.1212%" y="341" width="1.8219%" height="15" fill="rgb(209,12,38)"/><text x="26.3712%" y="351.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,105,950 samples, 1.53%)</title><rect x="26.4121%" y="325" width="1.5311%" height="15" fill="rgb(227,1,9)"/><text x="26.6621%" y="335.50"></text></g><g><title>trait_impls_of (536,076 samples, 0.26%)</title><rect x="27.9588%" y="341" width="0.2643%" height="15" fill="rgb(248,47,43)"/><text x="28.2088%" y="351.50"></text></g><g><title>coherent_trait (8,471,434 samples, 4.18%)</title><rect x="24.0475%" y="373" width="4.1760%" height="15" fill="rgb(221,10,30)"/><text x="24.2975%" y="383.50">coher..</text></g><g><title>specialization_graph_of (8,455,854 samples, 4.17%)</title><rect x="24.0551%" y="357" width="4.1684%" height="15" fill="rgb(210,229,1)"/><text x="24.3051%" y="367.50">speci..</text></g><g><title>coherence_checking (8,588,435 samples, 4.23%)</title><rect x="24.0383%" y="389" width="4.2337%" height="15" fill="rgb(222,148,37)"/><text x="24.2883%" y="399.50">coher..</text></g><g><title>associated_item (1,153,392 samples, 0.57%)</title><rect x="46.6123%" y="325" width="0.5686%" height="15" fill="rgb(234,67,33)"/><text x="46.8623%" y="335.50"></text></g><g><title>metadata_decode_entry_associated_item (1,059,541 samples, 0.52%)</title><rect x="46.6586%" y="309" width="0.5223%" height="15" fill="rgb(247,98,35)"/><text x="46.9086%" y="319.50"></text></g><g><title>associated_items (1,351,544 samples, 0.67%)</title><rect x="46.5306%" y="341" width="0.6663%" height="15" fill="rgb(247,138,52)"/><text x="46.7806%" y="351.50"></text></g><g><title>adt_dtorck_constraint (254,061 samples, 0.13%)</title><rect x="47.3769%" y="325" width="0.1252%" height="15" fill="rgb(213,79,30)"/><text x="47.6269%" y="335.50"></text></g><g><title>dropck_outlives (543,667 samples, 0.27%)</title><rect x="47.2449%" y="341" width="0.2680%" height="15" fill="rgb(246,177,23)"/><text x="47.4949%" y="351.50"></text></g><g><title>mir_for_ctfe (238,442 samples, 0.12%)</title><rect x="47.5794%" y="309" width="0.1175%" height="15" fill="rgb(230,62,27)"/><text x="47.8294%" y="319.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (218,112 samples, 0.11%)</title><rect x="47.5894%" y="293" width="0.1075%" height="15" fill="rgb(216,154,8)"/><text x="47.8394%" y="303.50"></text></g><g><title>eval_to_allocation_raw (369,404 samples, 0.18%)</title><rect x="47.5177%" y="325" width="0.1821%" height="15" fill="rgb(244,35,45)"/><text x="47.7677%" y="335.50"></text></g><g><title>mir_for_ctfe (254,573 samples, 0.13%)</title><rect x="47.8400%" y="293" width="0.1255%" height="15" fill="rgb(251,115,12)"/><text x="48.0900%" y="303.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (221,043 samples, 0.11%)</title><rect x="47.8565%" y="277" width="0.1090%" height="15" fill="rgb(240,54,50)"/><text x="48.1065%" y="287.50"></text></g><g><title>eval_to_const_value_raw (930,040 samples, 0.46%)</title><rect x="47.5134%" y="341" width="0.4585%" height="15" fill="rgb(233,84,52)"/><text x="47.7634%" y="351.50"></text></g><g><title>eval_to_const_value_raw (551,906 samples, 0.27%)</title><rect x="47.6998%" y="325" width="0.2721%" height="15" fill="rgb(207,117,47)"/><text x="47.9498%" y="335.50"></text></g><g><title>eval_to_allocation_raw (544,306 samples, 0.27%)</title><rect x="47.7036%" y="309" width="0.2683%" height="15" fill="rgb(249,43,39)"/><text x="47.9536%" y="319.50"></text></g><g><title>generics_of (206,222 samples, 0.10%)</title><rect x="50.3959%" y="325" width="0.1017%" height="15" fill="rgb(209,38,44)"/><text x="50.6459%" y="335.50"></text></g><g><title>impl_trait_ref (275,044 samples, 0.14%)</title><rect x="50.5721%" y="325" width="0.1356%" height="15" fill="rgb(236,212,23)"/><text x="50.8221%" y="335.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (233,284 samples, 0.11%)</title><rect x="50.5927%" y="309" width="0.1150%" height="15" fill="rgb(242,79,21)"/><text x="50.8427%" y="319.50"></text></g><g><title>predicates_of (550,339 samples, 0.27%)</title><rect x="50.7369%" y="325" width="0.2713%" height="15" fill="rgb(211,96,35)"/><text x="50.9869%" y="335.50"></text></g><g><title>predicates_defined_on (357,415 samples, 0.18%)</title><rect x="50.8320%" y="309" width="0.1762%" height="15" fill="rgb(253,215,40)"/><text x="51.0820%" y="319.50"></text></g><g><title>specializes (619,969 samples, 0.31%)</title><rect x="51.0082%" y="325" width="0.3056%" height="15" fill="rgb(211,81,21)"/><text x="51.2582%" y="335.50"></text></g><g><title>param_env (390,983 samples, 0.19%)</title><rect x="51.1210%" y="309" width="0.1927%" height="15" fill="rgb(208,190,38)"/><text x="51.3710%" y="319.50"></text></g><g><title>trait_impls_of (1,275,735 samples, 0.63%)</title><rect x="51.3267%" y="325" width="0.6289%" height="15" fill="rgb(235,213,38)"/><text x="51.5767%" y="335.50"></text></g><g><title>implementations_of_trait (595,317 samples, 0.29%)</title><rect x="51.6621%" y="309" width="0.2935%" height="15" fill="rgb(237,122,38)"/><text x="51.9121%" y="319.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (236,743 samples, 0.12%)</title><rect x="51.8388%" y="293" width="0.1167%" height="15" fill="rgb(244,218,35)"/><text x="52.0888%" y="303.50"></text></g><g><title>evaluate_obligation (8,090,429 samples, 3.99%)</title><rect x="47.9719%" y="341" width="3.9882%" height="15" fill="rgb(240,68,47)"/><text x="48.2219%" y="351.50">eval..</text></g><g><title>generics_of (256,021 samples, 0.13%)</title><rect x="52.0518%" y="341" width="0.1262%" height="15" fill="rgb(210,16,53)"/><text x="52.3018%" y="351.50"></text></g><g><title>impl_item_implementor_ids (208,352 samples, 0.10%)</title><rect x="52.1780%" y="341" width="0.1027%" height="15" fill="rgb(235,124,12)"/><text x="52.4280%" y="351.50"></text></g><g><title>evaluate_obligation (252,623 samples, 0.12%)</title><rect x="52.5523%" y="325" width="0.1245%" height="15" fill="rgb(224,169,11)"/><text x="52.8023%" y="335.50"></text></g><g><title>method_autoderef_steps (437,689 samples, 0.22%)</title><rect x="52.4666%" y="341" width="0.2158%" height="15" fill="rgb(250,166,2)"/><text x="52.7166%" y="351.50"></text></g><g><title>param_env (211,585 samples, 0.10%)</title><rect x="52.7052%" y="341" width="0.1043%" height="15" fill="rgb(242,216,29)"/><text x="52.9552%" y="351.50"></text></g><g><title>predicates_of (503,243 samples, 0.25%)</title><rect x="52.8201%" y="341" width="0.2481%" height="15" fill="rgb(230,116,27)"/><text x="53.0701%" y="351.50"></text></g><g><title>predicates_defined_on (339,621 samples, 0.17%)</title><rect x="52.9007%" y="325" width="0.1674%" height="15" fill="rgb(228,99,48)"/><text x="53.1507%" y="335.50"></text></g><g><title>lint_levels (305,593 samples, 0.15%)</title><rect x="54.0368%" y="325" width="0.1506%" height="15" fill="rgb(253,11,6)"/><text x="54.2868%" y="335.50"></text></g><g><title>typeck (2,210,674 samples, 1.09%)</title><rect x="53.1655%" y="341" width="1.0898%" height="15" fill="rgb(247,143,39)"/><text x="53.4155%" y="351.50"></text></g><g><title>item_bodies_checking (52,743,713 samples, 26.00%)</title><rect x="28.2877%" y="389" width="26.0003%" height="15" fill="rgb(236,97,10)"/><text x="28.5377%" y="399.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (52,740,583 samples, 26.00%)</title><rect x="28.2892%" y="373" width="25.9988%" height="15" fill="rgb(233,208,19)"/><text x="28.5392%" y="383.50">typeck_item_bodies</text></g><g><title>typeck (52,602,111 samples, 25.93%)</title><rect x="28.3575%" y="357" width="25.9305%" height="15" fill="rgb(216,164,2)"/><text x="28.6075%" y="367.50">typeck</text></g><g><title>adt_destructor (379,164 samples, 0.19%)</title><rect x="54.7987%" y="357" width="0.1869%" height="15" fill="rgb(220,129,5)"/><text x="55.0487%" y="367.50"></text></g><g><title>coherent_trait (372,544 samples, 0.18%)</title><rect x="54.8020%" y="341" width="0.1836%" height="15" fill="rgb(242,17,10)"/><text x="55.0520%" y="351.50"></text></g><g><title>specialization_graph_of (369,104 samples, 0.18%)</title><rect x="54.8037%" y="325" width="0.1820%" height="15" fill="rgb(242,107,0)"/><text x="55.0537%" y="335.50"></text></g><g><title>evaluate_obligation (818,780 samples, 0.40%)</title><rect x="54.9899%" y="357" width="0.4036%" height="15" fill="rgb(251,28,31)"/><text x="55.2399%" y="367.50"></text></g><g><title>item_types_checking (3,438,228 samples, 1.69%)</title><rect x="54.2880%" y="389" width="1.6949%" height="15" fill="rgb(233,223,10)"/><text x="54.5380%" y="399.50"></text></g><g><title>check_mod_item_types (3,434,748 samples, 1.69%)</title><rect x="54.2897%" y="373" width="1.6932%" height="15" fill="rgb(215,21,27)"/><text x="54.5397%" y="383.50"></text></g><g><title>typeck (1,097,552 samples, 0.54%)</title><rect x="55.4419%" y="357" width="0.5410%" height="15" fill="rgb(232,23,21)"/><text x="55.6919%" y="367.50"></text></g><g><title>fn_sig (419,235 samples, 0.21%)</title><rect x="56.1257%" y="357" width="0.2067%" height="15" fill="rgb(244,5,23)"/><text x="56.3757%" y="367.50"></text></g><g><title>named_region_map (225,362 samples, 0.11%)</title><rect x="56.3865%" y="341" width="0.1111%" height="15" fill="rgb(226,81,46)"/><text x="56.6365%" y="351.50"></text></g><g><title>resolve_lifetimes (205,372 samples, 0.10%)</title><rect x="56.3963%" y="325" width="0.1012%" height="15" fill="rgb(247,70,30)"/><text x="56.6463%" y="335.50"></text></g><g><title>generics_of (347,772 samples, 0.17%)</title><rect x="56.3324%" y="357" width="0.1714%" height="15" fill="rgb(212,68,19)"/><text x="56.5824%" y="367.50"></text></g><g><title>explicit_predicates_of (379,443 samples, 0.19%)</title><rect x="56.6039%" y="325" width="0.1870%" height="15" fill="rgb(240,187,13)"/><text x="56.8539%" y="335.50"></text></g><g><title>predicates_of (616,204 samples, 0.30%)</title><rect x="56.5273%" y="357" width="0.3038%" height="15" fill="rgb(223,113,26)"/><text x="56.7773%" y="367.50"></text></g><g><title>predicates_defined_on (558,654 samples, 0.28%)</title><rect x="56.5557%" y="341" width="0.2754%" height="15" fill="rgb(206,192,2)"/><text x="56.8057%" y="351.50"></text></g><g><title>type_collecting (1,804,690 samples, 0.89%)</title><rect x="55.9848%" y="389" width="0.8896%" height="15" fill="rgb(241,108,4)"/><text x="56.2348%" y="399.50"></text></g><g><title>collect_mod_item_types (1,801,240 samples, 0.89%)</title><rect x="55.9865%" y="373" width="0.8879%" height="15" fill="rgb(247,173,49)"/><text x="56.2365%" y="383.50"></text></g><g><title>mir_borrowck (457,006 samples, 0.23%)</title><rect x="58.5266%" y="277" width="0.2253%" height="15" fill="rgb(224,114,35)"/><text x="58.7766%" y="287.50"></text></g><g><title>mir_for_ctfe (634,447 samples, 0.31%)</title><rect x="58.4401%" y="309" width="0.3128%" height="15" fill="rgb(245,159,27)"/><text x="58.6901%" y="319.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (586,276 samples, 0.29%)</title><rect x="58.4639%" y="293" width="0.2890%" height="15" fill="rgb(245,172,44)"/><text x="58.7139%" y="303.50"></text></g><g><title>mir_for_ctfe (223,632 samples, 0.11%)</title><rect x="59.0618%" y="117" width="0.1102%" height="15" fill="rgb(236,23,11)"/><text x="59.3118%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (206,552 samples, 0.10%)</title><rect x="59.0702%" y="101" width="0.1018%" height="15" fill="rgb(205,117,38)"/><text x="59.3202%" y="111.50"></text></g><g><title>generics_of (475,422 samples, 0.23%)</title><rect x="60.3470%" y="85" width="0.2344%" height="15" fill="rgb(237,72,25)"/><text x="60.5970%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (339,262 samples, 0.17%)</title><rect x="60.4141%" y="69" width="0.1672%" height="15" fill="rgb(244,70,9)"/><text x="60.6641%" y="79.50"></text></g><g><title>impl_trait_ref (808,860 samples, 0.40%)</title><rect x="60.6389%" y="85" width="0.3987%" height="15" fill="rgb(217,125,39)"/><text x="60.8889%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (666,938 samples, 0.33%)</title><rect x="60.7089%" y="69" width="0.3288%" height="15" fill="rgb(235,36,10)"/><text x="60.9589%" y="79.50"></text></g><g><title>predicates_of (825,831 samples, 0.41%)</title><rect x="61.0531%" y="85" width="0.4071%" height="15" fill="rgb(251,123,47)"/><text x="61.3031%" y="95.50"></text></g><g><title>predicates_defined_on (339,616 samples, 0.17%)</title><rect x="61.2928%" y="69" width="0.1674%" height="15" fill="rgb(221,13,13)"/><text x="61.5428%" y="79.50"></text></g><g><title>specializes (1,893,741 samples, 0.93%)</title><rect x="61.4602%" y="85" width="0.9335%" height="15" fill="rgb(238,131,9)"/><text x="61.7102%" y="95.50"></text></g><g><title>param_env (1,116,034 samples, 0.55%)</title><rect x="61.8436%" y="69" width="0.5502%" height="15" fill="rgb(211,50,8)"/><text x="62.0936%" y="79.50"></text></g><g><title>def_span (513,808 samples, 0.25%)</title><rect x="62.1404%" y="53" width="0.2533%" height="15" fill="rgb(245,182,24)"/><text x="62.3904%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (457,667 samples, 0.23%)</title><rect x="62.1681%" y="37" width="0.2256%" height="15" fill="rgb(242,14,37)"/><text x="62.4181%" y="47.50"></text></g><g><title>evaluate_obligation (6,176,819 samples, 3.04%)</title><rect x="59.3810%" y="101" width="3.0449%" height="15" fill="rgb(246,228,12)"/><text x="59.6310%" y="111.50">eva..</text></g><g><title>eval_to_const_value_raw (7,048,048 samples, 3.47%)</title><rect x="58.9926%" y="165" width="3.4744%" height="15" fill="rgb(213,55,15)"/><text x="59.2426%" y="175.50">eva..</text></g><g><title>eval_to_const_value_raw (7,045,918 samples, 3.47%)</title><rect x="58.9936%" y="149" width="3.4733%" height="15" fill="rgb(209,9,3)"/><text x="59.2436%" y="159.50">eva..</text></g><g><title>eval_to_allocation_raw (7,042,828 samples, 3.47%)</title><rect x="58.9952%" y="133" width="3.4718%" height="15" fill="rgb(230,59,30)"/><text x="59.2452%" y="143.50">eva..</text></g><g><title>typeck (6,520,542 samples, 3.21%)</title><rect x="59.2526%" y="117" width="3.2143%" height="15" fill="rgb(209,121,21)"/><text x="59.5026%" y="127.50">typ..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,063,598 samples, 3.48%)</title><rect x="58.9883%" y="181" width="3.4820%" height="15" fill="rgb(220,109,13)"/><text x="59.2383%" y="191.50">try..</text></g><g><title>eval_to_const_value_raw (7,576,324 samples, 3.73%)</title><rect x="58.9002%" y="229" width="3.7348%" height="15" fill="rgb(232,18,1)"/><text x="59.1502%" y="239.50">eval..</text></g><g><title>eval_to_const_value_raw (7,575,694 samples, 3.73%)</title><rect x="58.9005%" y="213" width="3.7345%" height="15" fill="rgb(215,41,42)"/><text x="59.1505%" y="223.50">eval..</text></g><g><title>eval_to_allocation_raw (7,574,814 samples, 3.73%)</title><rect x="58.9009%" y="197" width="3.7340%" height="15" fill="rgb(224,123,36)"/><text x="59.1509%" y="207.50">eval..</text></g><g><title>typeck (334,014 samples, 0.16%)</title><rect x="62.4703%" y="181" width="0.1647%" height="15" fill="rgb(240,125,3)"/><text x="62.7203%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,582,454 samples, 3.74%)</title><rect x="58.8982%" y="245" width="3.7378%" height="15" fill="rgb(205,98,50)"/><text x="59.1482%" y="255.50">try_..</text></g><g><title>eval_to_const_value_raw (7,932,018 samples, 3.91%)</title><rect x="58.7591%" y="293" width="3.9101%" height="15" fill="rgb(205,185,37)"/><text x="59.0091%" y="303.50">eval..</text></g><g><title>eval_to_const_value_raw (7,929,668 samples, 3.91%)</title><rect x="58.7602%" y="277" width="3.9090%" height="15" fill="rgb(238,207,15)"/><text x="59.0102%" y="287.50">eval..</text></g><g><title>eval_to_allocation_raw (7,924,708 samples, 3.91%)</title><rect x="58.7627%" y="261" width="3.9065%" height="15" fill="rgb(213,199,42)"/><text x="59.0127%" y="271.50">eval..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,949,808 samples, 3.92%)</title><rect x="58.7533%" y="309" width="3.9189%" height="15" fill="rgb(235,201,11)"/><text x="59.0033%" y="319.50">try_..</text></g><g><title>eval_to_const_value_raw (9,181,100 samples, 4.53%)</title><rect x="58.2338%" y="357" width="4.5259%" height="15" fill="rgb(207,46,11)"/><text x="58.4838%" y="367.50">eval_..</text></g><g><title>eval_to_const_value_raw (9,154,360 samples, 4.51%)</title><rect x="58.2470%" y="341" width="4.5127%" height="15" fill="rgb(241,35,35)"/><text x="58.4970%" y="351.50">eval_..</text></g><g><title>eval_to_allocation_raw (9,149,340 samples, 4.51%)</title><rect x="58.2495%" y="325" width="4.5102%" height="15" fill="rgb(243,32,47)"/><text x="58.4995%" y="335.50">eval_..</text></g><g><title>evaluate_obligation (758,717 samples, 0.37%)</title><rect x="62.7597%" y="357" width="0.3740%" height="15" fill="rgb(247,202,23)"/><text x="63.0097%" y="367.50"></text></g><g><title>implied_outlives_bounds (265,764 samples, 0.13%)</title><rect x="63.1897%" y="357" width="0.1310%" height="15" fill="rgb(219,102,11)"/><text x="63.4397%" y="367.50"></text></g><g><title>param_env (334,443 samples, 0.16%)</title><rect x="63.3377%" y="357" width="0.1649%" height="15" fill="rgb(243,110,44)"/><text x="63.5877%" y="367.50"></text></g><g><title>region_scope_tree (263,534 samples, 0.13%)</title><rect x="63.5450%" y="357" width="0.1299%" height="15" fill="rgb(222,74,54)"/><text x="63.7950%" y="367.50"></text></g><g><title>check_impl_item_well_formed (13,680,859 samples, 6.74%)</title><rect x="57.0108%" y="373" width="6.7441%" height="15" fill="rgb(216,99,12)"/><text x="57.2608%" y="383.50">check_imp..</text></g><g><title>mir_const_qualif (268,161 samples, 0.13%)</title><rect x="65.1534%" y="309" width="0.1322%" height="15" fill="rgb(226,22,26)"/><text x="65.4034%" y="319.50"></text></g><g><title>mir_const (222,691 samples, 0.11%)</title><rect x="65.1758%" y="293" width="0.1098%" height="15" fill="rgb(217,163,10)"/><text x="65.4258%" y="303.50"></text></g><g><title>mir_borrowck (623,239 samples, 0.31%)</title><rect x="65.4636%" y="277" width="0.3072%" height="15" fill="rgb(213,25,53)"/><text x="65.7136%" y="287.50"></text></g><g><title>mir_for_ctfe (988,791 samples, 0.49%)</title><rect x="65.2856%" y="309" width="0.4874%" height="15" fill="rgb(252,105,26)"/><text x="65.5356%" y="319.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (897,110 samples, 0.44%)</title><rect x="65.3308%" y="293" width="0.4422%" height="15" fill="rgb(220,39,43)"/><text x="65.5808%" y="303.50"></text></g><g><title>eval_to_const_value_raw (1,910,389 samples, 0.94%)</title><rect x="65.0378%" y="357" width="0.9417%" height="15" fill="rgb(229,68,48)"/><text x="65.2878%" y="367.50"></text></g><g><title>eval_to_const_value_raw (1,896,399 samples, 0.93%)</title><rect x="65.0447%" y="341" width="0.9348%" height="15" fill="rgb(252,8,32)"/><text x="65.2947%" y="351.50"></text></g><g><title>eval_to_allocation_raw (1,873,039 samples, 0.92%)</title><rect x="65.0562%" y="325" width="0.9233%" height="15" fill="rgb(223,20,43)"/><text x="65.3062%" y="335.50"></text></g><g><title>typeck (416,365 samples, 0.21%)</title><rect x="65.7743%" y="309" width="0.2052%" height="15" fill="rgb(229,81,49)"/><text x="66.0243%" y="319.50"></text></g><g><title>evaluate_obligation (462,998 samples, 0.23%)</title><rect x="65.9796%" y="357" width="0.2282%" height="15" fill="rgb(236,28,36)"/><text x="66.2296%" y="367.50"></text></g><g><title>implied_outlives_bounds (233,686 samples, 0.12%)</title><rect x="66.2210%" y="357" width="0.1152%" height="15" fill="rgb(249,185,26)"/><text x="66.4710%" y="367.50"></text></g><g><title>param_env (526,346 samples, 0.26%)</title><rect x="66.3384%" y="357" width="0.2595%" height="15" fill="rgb(249,174,33)"/><text x="66.5884%" y="367.50"></text></g><g><title>region_scope_tree (370,777 samples, 0.18%)</title><rect x="66.6460%" y="357" width="0.1828%" height="15" fill="rgb(233,201,37)"/><text x="66.8960%" y="367.50"></text></g><g><title>trait_impls_of (271,703 samples, 0.13%)</title><rect x="66.8465%" y="357" width="0.1339%" height="15" fill="rgb(221,78,26)"/><text x="67.0965%" y="367.50"></text></g><g><title>check_item_well_formed (6,629,766 samples, 3.27%)</title><rect x="63.7549%" y="373" width="3.2682%" height="15" fill="rgb(250,127,30)"/><text x="64.0049%" y="383.50">che..</text></g><g><title>analysis (134,422,315 samples, 66.26%)</title><rect x="0.7663%" y="421" width="66.2643%" height="15" fill="rgb(230,49,44)"/><text x="1.0163%" y="431.50">analysis</text></g><g><title>type_check_crate (87,315,265 samples, 43.04%)</title><rect x="23.9880%" y="405" width="43.0426%" height="15" fill="rgb(229,67,23)"/><text x="24.2380%" y="415.50">type_check_crate</text></g><g><title>wf_checking (20,589,108 samples, 10.15%)</title><rect x="56.8811%" y="389" width="10.1495%" height="15" fill="rgb(249,83,47)"/><text x="57.1311%" y="399.50">wf_checking</text></g><g><title>codegen_crate (550,126 samples, 0.27%)</title><rect x="67.0358%" y="421" width="0.2712%" height="15" fill="rgb(215,43,3)"/><text x="67.2858%" y="431.50"></text></g><g><title>AST_validation (285,293 samples, 0.14%)</title><rect x="67.4158%" y="405" width="0.1406%" height="15" fill="rgb(238,154,13)"/><text x="67.6658%" y="415.50"></text></g><g><title>metadata_load_macro (691,189 samples, 0.34%)</title><rect x="89.9470%" y="373" width="0.3407%" height="15" fill="rgb(219,56,2)"/><text x="90.1970%" y="383.50"></text></g><g><title>metadata_register_crate (3,095,135 samples, 1.53%)</title><rect x="90.2878%" y="373" width="1.5258%" height="15" fill="rgb(233,0,4)"/><text x="90.5378%" y="383.50"></text></g><g><title>metadata_register_crate (1,318,475 samples, 0.65%)</title><rect x="91.1636%" y="357" width="0.6500%" height="15" fill="rgb(235,30,7)"/><text x="91.4136%" y="367.50"></text></g><g><title>macro_expand_crate (49,596,308 samples, 24.45%)</title><rect x="67.6408%" y="405" width="24.4488%" height="15" fill="rgb(250,79,13)"/><text x="67.8908%" y="415.50">macro_expand_crate</text></g><g><title>expand_crate (49,579,058 samples, 24.44%)</title><rect x="67.6493%" y="389" width="24.4403%" height="15" fill="rgb(211,146,34)"/><text x="67.8993%" y="399.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (559,966 samples, 0.28%)</title><rect x="91.8135%" y="373" width="0.2760%" height="15" fill="rgb(228,22,38)"/><text x="92.0635%" y="383.50"></text></g><g><title>finalize_imports (910,770 samples, 0.45%)</title><rect x="92.1231%" y="389" width="0.4490%" height="15" fill="rgb(235,168,5)"/><text x="92.3731%" y="399.50"></text></g><g><title>late_resolve_crate (2,463,227 samples, 1.21%)</title><rect x="92.6664%" y="389" width="1.2143%" height="15" fill="rgb(221,155,16)"/><text x="92.9164%" y="399.50"></text></g><g><title>configure_and_expand (54,180,478 samples, 26.71%)</title><rect x="67.3070%" y="421" width="26.7086%" height="15" fill="rgb(215,215,53)"/><text x="67.5570%" y="431.50">configure_and_expand</text></g><g><title>resolve_crate (3,846,162 samples, 1.90%)</title><rect x="92.1196%" y="405" width="1.8960%" height="15" fill="rgb(223,4,10)"/><text x="92.3696%" y="415.50">r..</text></g><g><title>drop_ast (359,274 samples, 0.18%)</title><rect x="94.0156%" y="421" width="0.1771%" height="15" fill="rgb(234,103,6)"/><text x="94.2656%" y="431.50"></text></g><g><title>early_lint_checks (514,106 samples, 0.25%)</title><rect x="94.2018%" y="421" width="0.2534%" height="15" fill="rgb(227,97,0)"/><text x="94.4518%" y="431.50"></text></g><g><title>free_global_ctxt (4,002,595 samples, 1.97%)</title><rect x="94.4552%" y="421" width="1.9731%" height="15" fill="rgb(234,150,53)"/><text x="94.7052%" y="431.50">f..</text></g><g><title>generate_crate_metadata (1,456,046 samples, 0.72%)</title><rect x="96.4283%" y="421" width="0.7178%" height="15" fill="rgb(228,201,54)"/><text x="96.6783%" y="431.50"></text></g><g><title>hir_lowering (3,737,892 samples, 1.84%)</title><rect x="97.1461%" y="421" width="1.8426%" height="15" fill="rgb(222,22,37)"/><text x="97.3961%" y="431.50">h..</text></g><g><title>parse_crate (356,454 samples, 0.18%)</title><rect x="99.0151%" y="421" width="0.1757%" height="15" fill="rgb(237,53,32)"/><text x="99.2651%" y="431.50"></text></g><g><title>self_profile_alloc_query_strings (996,641 samples, 0.49%)</title><rect x="99.2842%" y="421" width="0.4913%" height="15" fill="rgb(233,25,53)"/><text x="99.5342%" y="431.50"></text></g><g><title>all (202,857,891 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(210,40,34)"/><text x="0.2500%" y="463.50"></text></g><g><title>rustc (202,857,891 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(241,220,44)"/><text x="0.2500%" y="447.50">rustc</text></g><g><title>write_crate_metadata (353,084 samples, 0.17%)</title><rect x="99.8259%" y="421" width="0.1741%" height="15" fill="rgb(235,28,35)"/><text x="100.0759%" y="431.50"></text></g></svg></svg>