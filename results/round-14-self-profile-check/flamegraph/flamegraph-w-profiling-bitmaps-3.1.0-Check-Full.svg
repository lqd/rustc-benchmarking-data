<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (2,861,934 samples, 0.14%)</title><rect x="4.8852%" y="117" width="0.1371%" height="15" fill="rgb(227,0,7)"/><text x="5.1352%" y="127.50"></text></g><g><title>is_late_bound_map (8,051,790 samples, 0.39%)</title><rect x="6.8444%" y="101" width="0.3858%" height="15" fill="rgb(217,0,24)"/><text x="7.0944%" y="111.50"></text></g><g><title>is_late_bound_map (7,241,723 samples, 0.35%)</title><rect x="6.8832%" y="85" width="0.3470%" height="15" fill="rgb(221,193,54)"/><text x="7.1332%" y="95.50"></text></g><g><title>resolve_lifetimes (6,080,770 samples, 0.29%)</title><rect x="6.9388%" y="69" width="0.2914%" height="15" fill="rgb(248,212,6)"/><text x="7.1888%" y="79.50"></text></g><g><title>mir_promoted (24,624,496 samples, 1.18%)</title><rect x="7.2302%" y="101" width="1.1799%" height="15" fill="rgb(208,68,35)"/><text x="7.4802%" y="111.50"></text></g><g><title>mir_const_qualif_const_arg (20,745,024 samples, 0.99%)</title><rect x="7.4161%" y="85" width="0.9940%" height="15" fill="rgb(232,128,0)"/><text x="7.6661%" y="95.50"></text></g><g><title>mir_const (17,723,309 samples, 0.85%)</title><rect x="7.5609%" y="69" width="0.8492%" height="15" fill="rgb(207,160,47)"/><text x="7.8109%" y="79.50"></text></g><g><title>unsafety_check_result_for_const_arg (12,224,585 samples, 0.59%)</title><rect x="7.8244%" y="53" width="0.5857%" height="15" fill="rgb(228,23,34)"/><text x="8.0744%" y="63.50"></text></g><g><title>mir_built (10,691,905 samples, 0.51%)</title><rect x="7.8978%" y="37" width="0.5123%" height="15" fill="rgb(218,30,26)"/><text x="8.1478%" y="47.50"></text></g><g><title>mir_borrowck_const_arg (70,824,108 samples, 3.39%)</title><rect x="5.0252%" y="117" width="3.3935%" height="15" fill="rgb(220,122,19)"/><text x="5.2752%" y="127.50">mir..</text></g><g><title>thir_body (2,942,920 samples, 0.14%)</title><rect x="9.5624%" y="53" width="0.1410%" height="15" fill="rgb(250,228,42)"/><text x="9.8124%" y="63.50"></text></g><g><title>mir_const (17,753,272 samples, 0.85%)</title><rect x="8.8575%" y="101" width="0.8506%" height="15" fill="rgb(240,193,28)"/><text x="9.1075%" y="111.50"></text></g><g><title>unsafety_check_result (15,103,143 samples, 0.72%)</title><rect x="8.9845%" y="85" width="0.7237%" height="15" fill="rgb(216,20,37)"/><text x="9.2345%" y="95.50"></text></g><g><title>mir_built (13,344,282 samples, 0.64%)</title><rect x="9.0688%" y="69" width="0.6394%" height="15" fill="rgb(206,188,39)"/><text x="9.3188%" y="79.50"></text></g><g><title>thir_body (2,964,883 samples, 0.14%)</title><rect x="11.2555%" y="37" width="0.1421%" height="15" fill="rgb(217,207,13)"/><text x="11.5055%" y="47.50"></text></g><g><title>mir_promoted (62,472,397 samples, 2.99%)</title><rect x="8.4187%" y="117" width="2.9934%" height="15" fill="rgb(231,73,38)"/><text x="8.6687%" y="127.50">mir..</text></g><g><title>mir_const_qualif (35,560,244 samples, 1.70%)</title><rect x="9.7082%" y="101" width="1.7039%" height="15" fill="rgb(225,20,46)"/><text x="9.9582%" y="111.50"></text></g><g><title>mir_const (29,876,616 samples, 1.43%)</title><rect x="9.9805%" y="85" width="1.4315%" height="15" fill="rgb(210,31,41)"/><text x="10.2305%" y="95.50"></text></g><g><title>unsafety_check_result (21,067,455 samples, 1.01%)</title><rect x="10.4026%" y="69" width="1.0094%" height="15" fill="rgb(221,200,47)"/><text x="10.6526%" y="79.50"></text></g><g><title>mir_built (18,473,165 samples, 0.89%)</title><rect x="10.5269%" y="53" width="0.8851%" height="15" fill="rgb(226,26,5)"/><text x="10.7769%" y="63.50"></text></g><g><title>type_op_prove_predicate (2,909,933 samples, 0.14%)</title><rect x="11.5251%" y="117" width="0.1394%" height="15" fill="rgb(249,33,26)"/><text x="11.7751%" y="127.50"></text></g><g><title>MIR_borrow_checking (240,482,848 samples, 11.52%)</title><rect x="0.1420%" y="149" width="11.5227%" height="15" fill="rgb(235,183,28)"/><text x="0.3920%" y="159.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (236,022,876 samples, 11.31%)</title><rect x="0.3557%" y="133" width="11.3090%" height="15" fill="rgb(221,5,38)"/><text x="0.6057%" y="143.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (9,954,526 samples, 0.48%)</title><rect x="12.6362%" y="117" width="0.4770%" height="15" fill="rgb(247,18,42)"/><text x="12.8862%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (26,795,499 samples, 1.28%)</title><rect x="11.8389%" y="133" width="1.2839%" height="15" fill="rgb(241,131,45)"/><text x="12.0889%" y="143.50"></text></g><g><title>MIR_effect_checking (30,782,090 samples, 1.47%)</title><rect x="11.6647%" y="149" width="1.4749%" height="15" fill="rgb(249,31,29)"/><text x="11.9147%" y="159.50"></text></g><g><title>hir_module_items (2,288,637 samples, 0.11%)</title><rect x="13.1396%" y="149" width="0.1097%" height="15" fill="rgb(225,111,53)"/><text x="13.3896%" y="159.50"></text></g><g><title>check_mod_attrs (2,489,968 samples, 0.12%)</title><rect x="13.2509%" y="133" width="0.1193%" height="15" fill="rgb(238,160,17)"/><text x="13.5009%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,437,518 samples, 0.16%)</title><rect x="13.4477%" y="133" width="0.1647%" height="15" fill="rgb(214,148,48)"/><text x="13.6977%" y="143.50"></text></g><g><title>misc_checking_1 (7,912,178 samples, 0.38%)</title><rect x="13.2493%" y="149" width="0.3791%" height="15" fill="rgb(232,36,49)"/><text x="13.4993%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (3,320,377 samples, 0.16%)</title><rect x="13.6285%" y="133" width="0.1591%" height="15" fill="rgb(209,103,24)"/><text x="13.8785%" y="143.50"></text></g><g><title>check_mod_liveness (2,508,778 samples, 0.12%)</title><rect x="13.6674%" y="117" width="0.1202%" height="15" fill="rgb(229,88,8)"/><text x="13.9174%" y="127.50"></text></g><g><title>misc_checking_2 (6,165,288 samples, 0.30%)</title><rect x="13.6284%" y="149" width="0.2954%" height="15" fill="rgb(213,181,19)"/><text x="13.8784%" y="159.50"></text></g><g><title>match_checking (2,842,661 samples, 0.14%)</title><rect x="13.7876%" y="133" width="0.1362%" height="15" fill="rgb(254,191,54)"/><text x="14.0376%" y="143.50"></text></g><g><title>death_checking (3,539,329 samples, 0.17%)</title><rect x="14.0184%" y="133" width="0.1696%" height="15" fill="rgb(241,83,37)"/><text x="14.2684%" y="143.50"></text></g><g><title>crate_lints (4,295,888 samples, 0.21%)</title><rect x="14.1881%" y="117" width="0.2058%" height="15" fill="rgb(233,36,39)"/><text x="14.4381%" y="127.50"></text></g><g><title>lint_checking (6,789,125 samples, 0.33%)</title><rect x="14.1880%" y="133" width="0.3253%" height="15" fill="rgb(226,3,54)"/><text x="14.4380%" y="143.50"></text></g><g><title>module_lints (2,490,167 samples, 0.12%)</title><rect x="14.3940%" y="117" width="0.1193%" height="15" fill="rgb(245,192,40)"/><text x="14.6440%" y="127.50"></text></g><g><title>lint_mod (2,481,617 samples, 0.12%)</title><rect x="14.3944%" y="101" width="0.1189%" height="15" fill="rgb(238,167,29)"/><text x="14.6444%" y="111.50"></text></g><g><title>privacy_access_levels (4,344,688 samples, 0.21%)</title><rect x="14.5133%" y="133" width="0.2082%" height="15" fill="rgb(232,182,51)"/><text x="14.7633%" y="143.50"></text></g><g><title>privacy_checking_modules (5,832,084 samples, 0.28%)</title><rect x="14.7214%" y="133" width="0.2794%" height="15" fill="rgb(231,60,39)"/><text x="14.9714%" y="143.50"></text></g><g><title>check_mod_privacy (5,824,984 samples, 0.28%)</title><rect x="14.7218%" y="117" width="0.2791%" height="15" fill="rgb(208,69,12)"/><text x="14.9718%" y="127.50"></text></g><g><title>misc_checking_3 (22,528,029 samples, 1.08%)</title><rect x="13.9238%" y="149" width="1.0794%" height="15" fill="rgb(235,93,37)"/><text x="14.1738%" y="159.50"></text></g><g><title>impl_parent (3,559,272 samples, 0.17%)</title><rect x="37.6111%" y="85" width="0.1705%" height="15" fill="rgb(213,116,39)"/><text x="37.8611%" y="95.50"></text></g><g><title>impl_trait_ref (6,663,517 samples, 0.32%)</title><rect x="37.7816%" y="85" width="0.3193%" height="15" fill="rgb(222,207,29)"/><text x="38.0316%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,349,280 samples, 0.26%)</title><rect x="37.8446%" y="69" width="0.2563%" height="15" fill="rgb(206,96,30)"/><text x="38.0946%" y="79.50"></text></g><g><title>coherent_trait (482,124,357 samples, 23.10%)</title><rect x="15.0727%" y="117" width="23.1010%" height="15" fill="rgb(218,138,4)"/><text x="15.3227%" y="127.50">coherent_trait</text></g><g><title>specialization_graph_of (481,046,315 samples, 23.05%)</title><rect x="15.1243%" y="101" width="23.0493%" height="15" fill="rgb(250,191,14)"/><text x="15.3743%" y="111.50">specialization_graph_of</text></g><g><title>coherence_checking (482,804,066 samples, 23.13%)</title><rect x="15.0710%" y="133" width="23.1335%" height="15" fill="rgb(239,60,40)"/><text x="15.3210%" y="143.50">coherence_checking</text></g><g><title>specializes (3,009,821 samples, 0.14%)</title><rect x="42.9715%" y="69" width="0.1442%" height="15" fill="rgb(206,27,48)"/><text x="43.2215%" y="79.50"></text></g><g><title>evaluate_obligation (15,451,811 samples, 0.74%)</title><rect x="42.3942%" y="85" width="0.7404%" height="15" fill="rgb(225,35,8)"/><text x="42.6442%" y="95.50"></text></g><g><title>param_env (7,473,967 samples, 0.36%)</title><rect x="43.2643%" y="85" width="0.3581%" height="15" fill="rgb(250,213,24)"/><text x="43.5143%" y="95.50"></text></g><g><title>predicates_of (3,766,700 samples, 0.18%)</title><rect x="43.4420%" y="69" width="0.1805%" height="15" fill="rgb(247,123,22)"/><text x="43.6920%" y="79.50"></text></g><g><title>predicates_defined_on (3,158,059 samples, 0.15%)</title><rect x="43.4711%" y="53" width="0.1513%" height="15" fill="rgb(231,138,38)"/><text x="43.7211%" y="63.50"></text></g><g><title>typeck (3,980,265 samples, 0.19%)</title><rect x="43.7260%" y="85" width="0.1907%" height="15" fill="rgb(231,145,46)"/><text x="43.9760%" y="95.50"></text></g><g><title>param_env (7,738,290 samples, 0.37%)</title><rect x="44.6033%" y="69" width="0.3708%" height="15" fill="rgb(251,118,11)"/><text x="44.8533%" y="79.50"></text></g><g><title>predicates_of (3,668,711 samples, 0.18%)</title><rect x="44.7983%" y="53" width="0.1758%" height="15" fill="rgb(217,147,25)"/><text x="45.0483%" y="63.50"></text></g><g><title>predicates_defined_on (3,090,857 samples, 0.15%)</title><rect x="44.8259%" y="37" width="0.1481%" height="15" fill="rgb(247,81,37)"/><text x="45.0759%" y="47.50"></text></g><g><title>typeck_const_arg (23,933,408 samples, 1.15%)</title><rect x="43.9167%" y="85" width="1.1468%" height="15" fill="rgb(209,12,38)"/><text x="44.1667%" y="95.50"></text></g><g><title>item_bodies_checking (142,638,066 samples, 6.83%)</title><rect x="38.2459%" y="133" width="6.8345%" height="15" fill="rgb(227,1,9)"/><text x="38.4959%" y="143.50">item_bodi..</text></g><g><title>typeck_item_bodies (142,634,296 samples, 6.83%)</title><rect x="38.2460%" y="117" width="6.8343%" height="15" fill="rgb(248,47,43)"/><text x="38.4960%" y="127.50">typeck_it..</text></g><g><title>typeck (139,557,570 samples, 6.69%)</title><rect x="38.3935%" y="101" width="6.6869%" height="15" fill="rgb(221,10,30)"/><text x="38.6435%" y="111.50">typeck</text></g><g><title>evaluate_obligation (3,521,841 samples, 0.17%)</title><rect x="67.1694%" y="101" width="0.1687%" height="15" fill="rgb(210,229,1)"/><text x="67.4194%" y="111.50"></text></g><g><title>item_types_checking (466,988,131 samples, 22.38%)</title><rect x="45.0804%" y="133" width="22.3757%" height="15" fill="rgb(222,148,37)"/><text x="45.3304%" y="143.50">item_types_checking</text></g><g><title>check_mod_item_types (466,976,771 samples, 22.38%)</title><rect x="45.0809%" y="117" width="22.3752%" height="15" fill="rgb(234,67,33)"/><text x="45.3309%" y="127.50">check_mod_item_types</text></g><g><title>generics_of (3,355,967 samples, 0.16%)</title><rect x="67.6814%" y="101" width="0.1608%" height="15" fill="rgb(247,98,35)"/><text x="67.9314%" y="111.50"></text></g><g><title>predicates_of (4,913,685 samples, 0.24%)</title><rect x="67.8729%" y="101" width="0.2354%" height="15" fill="rgb(247,138,52)"/><text x="68.1229%" y="111.50"></text></g><g><title>predicates_defined_on (3,926,528 samples, 0.19%)</title><rect x="67.9202%" y="85" width="0.1881%" height="15" fill="rgb(213,79,30)"/><text x="68.1702%" y="95.50"></text></g><g><title>type_collecting (16,756,595 samples, 0.80%)</title><rect x="67.4562%" y="133" width="0.8029%" height="15" fill="rgb(246,177,23)"/><text x="67.7062%" y="143.50"></text></g><g><title>collect_mod_item_types (16,748,785 samples, 0.80%)</title><rect x="67.4565%" y="117" width="0.8025%" height="15" fill="rgb(230,62,27)"/><text x="67.7065%" y="127.50"></text></g><g><title>type_of (3,141,335 samples, 0.15%)</title><rect x="68.1085%" y="101" width="0.1505%" height="15" fill="rgb(216,154,8)"/><text x="68.3585%" y="111.50"></text></g><g><title>param_env (8,145,515 samples, 0.39%)</title><rect x="69.3130%" y="101" width="0.3903%" height="15" fill="rgb(244,35,45)"/><text x="69.5630%" y="111.50"></text></g><g><title>region_scope_tree (3,560,640 samples, 0.17%)</title><rect x="69.7068%" y="101" width="0.1706%" height="15" fill="rgb(251,115,12)"/><text x="69.9568%" y="111.50"></text></g><g><title>check_impl_item_well_formed (29,729,494 samples, 1.42%)</title><rect x="68.4539%" y="117" width="1.4245%" height="15" fill="rgb(240,54,50)"/><text x="68.7039%" y="127.50"></text></g><g><title>evaluate_obligation (432,848,251 samples, 20.74%)</title><rect x="70.6460%" y="101" width="20.7399%" height="15" fill="rgb(233,84,52)"/><text x="70.8960%" y="111.50">evaluate_obligation</text></g><g><title>implied_outlives_bounds (2,091,082 samples, 0.10%)</title><rect x="91.4080%" y="101" width="0.1002%" height="15" fill="rgb(207,117,47)"/><text x="91.6580%" y="111.50"></text></g><g><title>param_env (4,190,022 samples, 0.20%)</title><rect x="91.5082%" y="101" width="0.2008%" height="15" fill="rgb(249,43,39)"/><text x="91.7582%" y="111.50"></text></g><g><title>check_item_well_formed (456,433,547 samples, 21.87%)</title><rect x="69.8784%" y="117" width="21.8700%" height="15" fill="rgb(209,38,44)"/><text x="70.1284%" y="127.50">check_item_well_formed</text></g><g><title>analysis (1,913,831,290 samples, 91.70%)</title><rect x="0.0672%" y="165" width="91.7011%" height="15" fill="rgb(236,212,23)"/><text x="0.3172%" y="175.50">analysis</text></g><g><title>type_check_crate (1,602,110,965 samples, 76.77%)</title><rect x="15.0033%" y="149" width="76.7651%" height="15" fill="rgb(242,79,21)"/><text x="15.2533%" y="159.50">type_check_crate</text></g><g><title>wf_checking (490,421,200 samples, 23.50%)</title><rect x="68.2698%" y="133" width="23.4985%" height="15" fill="rgb(211,96,35)"/><text x="68.5198%" y="143.50">wf_checking</text></g><g><title>metadata_register_crate (2,729,310 samples, 0.13%)</title><rect x="95.5462%" y="117" width="0.1308%" height="15" fill="rgb(253,215,40)"/><text x="95.7962%" y="127.50"></text></g><g><title>macro_expand_crate (80,676,423 samples, 3.87%)</title><rect x="91.8488%" y="149" width="3.8656%" height="15" fill="rgb(211,81,21)"/><text x="92.0988%" y="159.50">macr..</text></g><g><title>expand_crate (80,653,492 samples, 3.86%)</title><rect x="91.8499%" y="133" width="3.8645%" height="15" fill="rgb(208,190,38)"/><text x="92.0999%" y="143.50">expa..</text></g><g><title>late_resolve_crate (7,319,771 samples, 0.35%)</title><rect x="95.7546%" y="133" width="0.3507%" height="15" fill="rgb(235,213,38)"/><text x="96.0046%" y="143.50"></text></g><g><title>configure_and_expand (90,622,842 samples, 4.34%)</title><rect x="91.7892%" y="165" width="4.3422%" height="15" fill="rgb(237,122,38)"/><text x="92.0392%" y="175.50">confi..</text></g><g><title>resolve_crate (8,611,875 samples, 0.41%)</title><rect x="95.7187%" y="149" width="0.4126%" height="15" fill="rgb(244,218,35)"/><text x="95.9687%" y="159.50"></text></g><g><title>free_global_ctxt (8,966,019 samples, 0.43%)</title><rect x="96.2750%" y="165" width="0.4296%" height="15" fill="rgb(240,68,47)"/><text x="96.5250%" y="175.50"></text></g><g><title>mir_for_ctfe (14,327,515 samples, 0.69%)</title><rect x="97.8003%" y="149" width="0.6865%" height="15" fill="rgb(210,16,53)"/><text x="98.0503%" y="159.50"></text></g><g><title>mir_for_ctfe_of_const_arg (3,261,490 samples, 0.16%)</title><rect x="98.3305%" y="133" width="0.1563%" height="15" fill="rgb(235,124,12)"/><text x="98.5805%" y="143.50"></text></g><g><title>generate_crate_metadata (39,790,300 samples, 1.91%)</title><rect x="96.7047%" y="165" width="1.9065%" height="15" fill="rgb(224,169,11)"/><text x="96.9547%" y="175.50">g..</text></g><g><title>hir_lowering (21,989,302 samples, 1.05%)</title><rect x="98.6112%" y="165" width="1.0536%" height="15" fill="rgb(250,166,2)"/><text x="98.8612%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (4,815,644 samples, 0.23%)</title><rect x="99.7014%" y="165" width="0.2307%" height="15" fill="rgb(242,216,29)"/><text x="99.9514%" y="175.50"></text></g><g><title>all (2,087,031,645 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (2,087,031,645 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>