<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (373,241 samples, 0.29%)</title><rect x="13.1812%" y="133" width="0.2931%" height="15" fill="rgb(227,0,7)"/><text x="13.4312%" y="143.50"></text></g><g><title>item_attrs (453,203 samples, 0.36%)</title><rect x="13.9485%" y="101" width="0.3559%" height="15" fill="rgb(217,0,24)"/><text x="14.1985%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (439,173 samples, 0.34%)</title><rect x="13.9595%" y="85" width="0.3449%" height="15" fill="rgb(221,193,54)"/><text x="14.2095%" y="95.50"></text></g><g><title>codegen_fn_attrs (579,805 samples, 0.46%)</title><rect x="13.8639%" y="117" width="0.4553%" height="15" fill="rgb(248,212,6)"/><text x="14.1139%" y="127.50"></text></g><g><title>adt_drop_tys (243,652 samples, 0.19%)</title><rect x="17.0517%" y="37" width="0.1913%" height="15" fill="rgb(208,68,35)"/><text x="17.3017%" y="47.50"></text></g><g><title>adt_drop_tys (332,313 samples, 0.26%)</title><rect x="17.0455%" y="53" width="0.2610%" height="15" fill="rgb(232,128,0)"/><text x="17.2955%" y="63.50"></text></g><g><title>adt_drop_tys (531,874 samples, 0.42%)</title><rect x="17.0294%" y="69" width="0.4177%" height="15" fill="rgb(207,160,47)"/><text x="17.2794%" y="79.50"></text></g><g><title>is_copy_raw (245,175 samples, 0.19%)</title><rect x="17.4478%" y="69" width="0.1925%" height="15" fill="rgb(228,23,34)"/><text x="17.6978%" y="79.50"></text></g><g><title>evaluate_obligation (191,973 samples, 0.15%)</title><rect x="17.4896%" y="53" width="0.1508%" height="15" fill="rgb(218,30,26)"/><text x="17.7396%" y="63.50"></text></g><g><title>param_env (182,404 samples, 0.14%)</title><rect x="17.6403%" y="69" width="0.1432%" height="15" fill="rgb(220,122,19)"/><text x="17.8903%" y="79.50"></text></g><g><title>adt_drop_tys (1,098,233 samples, 0.86%)</title><rect x="16.9693%" y="85" width="0.8625%" height="15" fill="rgb(250,228,42)"/><text x="17.2193%" y="95.50"></text></g><g><title>is_copy_raw (971,269 samples, 0.76%)</title><rect x="17.8343%" y="85" width="0.7627%" height="15" fill="rgb(240,193,28)"/><text x="18.0843%" y="95.50"></text></g><g><title>evaluate_obligation (798,689 samples, 0.63%)</title><rect x="17.9698%" y="69" width="0.6272%" height="15" fill="rgb(216,20,37)"/><text x="18.2198%" y="79.50"></text></g><g><title>needs_drop_raw (2,286,015 samples, 1.80%)</title><rect x="16.8432%" y="101" width="1.7952%" height="15" fill="rgb(206,188,39)"/><text x="17.0932%" y="111.50">n..</text></g><g><title>codegen_fulfill_obligation (178,863 samples, 0.14%)</title><rect x="18.7921%" y="85" width="0.1405%" height="15" fill="rgb(217,207,13)"/><text x="19.0421%" y="95.50"></text></g><g><title>impl_parent (189,754 samples, 0.15%)</title><rect x="19.2002%" y="69" width="0.1490%" height="15" fill="rgb(231,73,38)"/><text x="19.4502%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (132,824 samples, 0.10%)</title><rect x="19.2450%" y="53" width="0.1043%" height="15" fill="rgb(225,20,46)"/><text x="19.4950%" y="63.50"></text></g><g><title>specialization_graph_of (1,181,384 samples, 0.93%)</title><rect x="19.0024%" y="85" width="0.9278%" height="15" fill="rgb(210,31,41)"/><text x="19.2524%" y="95.50"></text></g><g><title>impl_trait_ref (739,708 samples, 0.58%)</title><rect x="19.3493%" y="69" width="0.5809%" height="15" fill="rgb(221,200,47)"/><text x="19.5993%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (683,018 samples, 0.54%)</title><rect x="19.3938%" y="53" width="0.5364%" height="15" fill="rgb(226,26,5)"/><text x="19.6438%" y="63.50"></text></g><g><title>resolve_instance (1,687,599 samples, 1.33%)</title><rect x="18.6595%" y="101" width="1.3253%" height="15" fill="rgb(249,33,26)"/><text x="18.9095%" y="111.50"></text></g><g><title>thir_body (1,227,404 samples, 0.96%)</title><rect x="20.0079%" y="101" width="0.9639%" height="15" fill="rgb(235,183,28)"/><text x="20.2579%" y="111.50"></text></g><g><title>mir_const (10,822,197 samples, 8.50%)</title><rect x="12.4891%" y="149" width="8.4988%" height="15" fill="rgb(221,5,38)"/><text x="12.7391%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (9,567,727 samples, 7.51%)</title><rect x="13.4743%" y="133" width="7.5136%" height="15" fill="rgb(247,18,42)"/><text x="13.7243%" y="143.50">unsafety_c..</text></g><g><title>mir_built (8,491,837 samples, 6.67%)</title><rect x="14.3192%" y="117" width="6.6687%" height="15" fill="rgb(241,131,45)"/><text x="14.5692%" y="127.50">mir_built</text></g><g><title>mir_promoted (12,023,053 samples, 9.44%)</title><rect x="11.7312%" y="165" width="9.4418%" height="15" fill="rgb(249,31,29)"/><text x="11.9812%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (235,772 samples, 0.19%)</title><rect x="20.9879%" y="149" width="0.1852%" height="15" fill="rgb(225,111,53)"/><text x="21.2379%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (714,208 samples, 0.56%)</title><rect x="21.1731%" y="165" width="0.5609%" height="15" fill="rgb(238,160,17)"/><text x="21.4231%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (205,765 samples, 0.16%)</title><rect x="21.7339%" y="165" width="0.1616%" height="15" fill="rgb(214,148,48)"/><text x="21.9839%" y="175.50"></text></g><g><title>type_op_normalize_predicate (454,815 samples, 0.36%)</title><rect x="21.8955%" y="165" width="0.3572%" height="15" fill="rgb(232,36,49)"/><text x="22.1455%" y="175.50"></text></g><g><title>normalize_projection_ty (273,992 samples, 0.22%)</title><rect x="22.0375%" y="149" width="0.2152%" height="15" fill="rgb(209,103,24)"/><text x="22.2875%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,139,172 samples, 2.47%)</title><rect x="22.2527%" y="165" width="2.4652%" height="15" fill="rgb(229,88,8)"/><text x="22.5027%" y="175.50">ty..</text></g><g><title>evaluate_obligation (154,221 samples, 0.12%)</title><rect x="24.5968%" y="149" width="0.1211%" height="15" fill="rgb(213,181,19)"/><text x="24.8468%" y="159.50"></text></g><g><title>MIR_borrow_checking (30,563,767 samples, 24.00%)</title><rect x="0.7243%" y="197" width="24.0020%" height="15" fill="rgb(254,191,54)"/><text x="0.9743%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (30,457,206 samples, 23.92%)</title><rect x="0.8079%" y="181" width="23.9184%" height="15" fill="rgb(241,83,37)"/><text x="1.0579%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (168,951 samples, 0.13%)</title><rect x="24.8209%" y="197" width="0.1327%" height="15" fill="rgb(233,36,39)"/><text x="25.0709%" y="207.50"></text></g><g><title>should_inherit_track_caller (194,052 samples, 0.15%)</title><rect x="25.2486%" y="149" width="0.1524%" height="15" fill="rgb(226,3,54)"/><text x="25.4986%" y="159.50"></text></g><g><title>codegen_fn_attrs (369,935 samples, 0.29%)</title><rect x="25.1274%" y="165" width="0.2905%" height="15" fill="rgb(245,192,40)"/><text x="25.3774%" y="175.50"></text></g><g><title>check_mod_attrs (568,737 samples, 0.45%)</title><rect x="24.9714%" y="181" width="0.4466%" height="15" fill="rgb(238,167,29)"/><text x="25.2214%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (524,985 samples, 0.41%)</title><rect x="25.5400%" y="181" width="0.4123%" height="15" fill="rgb(232,182,51)"/><text x="25.7900%" y="191.50"></text></g><g><title>misc_checking_1 (1,316,245 samples, 1.03%)</title><rect x="24.9539%" y="197" width="1.0337%" height="15" fill="rgb(231,60,39)"/><text x="25.2039%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (487,016 samples, 0.38%)</title><rect x="25.9887%" y="181" width="0.3825%" height="15" fill="rgb(208,69,12)"/><text x="26.2387%" y="191.50"></text></g><g><title>check_mod_liveness (398,204 samples, 0.31%)</title><rect x="26.0584%" y="165" width="0.3127%" height="15" fill="rgb(235,93,37)"/><text x="26.3084%" y="175.50"></text></g><g><title>type_uninhabited_from (148,301 samples, 0.12%)</title><rect x="26.2547%" y="149" width="0.1165%" height="15" fill="rgb(213,116,39)"/><text x="26.5047%" y="159.50"></text></g><g><title>misc_checking_2 (1,154,403 samples, 0.91%)</title><rect x="25.9875%" y="197" width="0.9066%" height="15" fill="rgb(222,207,29)"/><text x="26.2375%" y="207.50"></text></g><g><title>match_checking (665,897 samples, 0.52%)</title><rect x="26.3711%" y="181" width="0.5229%" height="15" fill="rgb(206,96,30)"/><text x="26.6211%" y="191.50"></text></g><g><title>check_match (640,257 samples, 0.50%)</title><rect x="26.3913%" y="165" width="0.5028%" height="15" fill="rgb(218,138,4)"/><text x="26.6413%" y="175.50"></text></g><g><title>check_private_in_public (155,711 samples, 0.12%)</title><rect x="26.9022%" y="181" width="0.1223%" height="15" fill="rgb(250,191,14)"/><text x="27.1522%" y="191.50"></text></g><g><title>death_checking (442,805 samples, 0.35%)</title><rect x="27.0245%" y="181" width="0.3477%" height="15" fill="rgb(239,60,40)"/><text x="27.2745%" y="191.50"></text></g><g><title>item_attrs (178,072 samples, 0.14%)</title><rect x="27.2324%" y="165" width="0.1398%" height="15" fill="rgb(206,27,48)"/><text x="27.4824%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (176,312 samples, 0.14%)</title><rect x="27.2338%" y="149" width="0.1385%" height="15" fill="rgb(225,35,8)"/><text x="27.4838%" y="159.50"></text></g><g><title>eval_to_const_value_raw (203,882 samples, 0.16%)</title><rect x="27.9596%" y="101" width="0.1601%" height="15" fill="rgb(250,213,24)"/><text x="28.2096%" y="111.50"></text></g><g><title>eval_to_const_value_raw (202,902 samples, 0.16%)</title><rect x="27.9603%" y="85" width="0.1593%" height="15" fill="rgb(247,123,22)"/><text x="28.2103%" y="95.50"></text></g><g><title>eval_to_allocation_raw (199,752 samples, 0.16%)</title><rect x="27.9628%" y="69" width="0.1569%" height="15" fill="rgb(231,138,38)"/><text x="28.2128%" y="79.50"></text></g><g><title>eval_to_allocation_raw (287,543 samples, 0.23%)</title><rect x="27.8943%" y="149" width="0.2258%" height="15" fill="rgb(231,145,46)"/><text x="28.1443%" y="159.50"></text></g><g><title>eval_to_allocation_raw (286,803 samples, 0.23%)</title><rect x="27.8949%" y="133" width="0.2252%" height="15" fill="rgb(251,118,11)"/><text x="28.1449%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (214,642 samples, 0.17%)</title><rect x="27.9515%" y="117" width="0.1686%" height="15" fill="rgb(217,147,25)"/><text x="28.2015%" y="127.50"></text></g><g><title>param_env (177,713 samples, 0.14%)</title><rect x="28.1201%" y="149" width="0.1396%" height="15" fill="rgb(247,81,37)"/><text x="28.3701%" y="159.50"></text></g><g><title>crate_lints (2,195,344 samples, 1.72%)</title><rect x="27.3733%" y="165" width="1.7240%" height="15" fill="rgb(209,12,38)"/><text x="27.6233%" y="175.50"></text></g><g><title>type_of (1,049,532 samples, 0.82%)</title><rect x="28.2732%" y="149" width="0.8242%" height="15" fill="rgb(227,1,9)"/><text x="28.5232%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (818,921 samples, 0.64%)</title><rect x="28.4543%" y="133" width="0.6431%" height="15" fill="rgb(248,47,43)"/><text x="28.7043%" y="143.50"></text></g><g><title>lint_checking (2,755,641 samples, 2.16%)</title><rect x="27.3722%" y="181" width="2.1640%" height="15" fill="rgb(221,10,30)"/><text x="27.6222%" y="191.50">l..</text></g><g><title>module_lints (558,887 samples, 0.44%)</title><rect x="29.0974%" y="165" width="0.4389%" height="15" fill="rgb(210,229,1)"/><text x="29.3474%" y="175.50"></text></g><g><title>lint_mod (554,897 samples, 0.44%)</title><rect x="29.1005%" y="149" width="0.4358%" height="15" fill="rgb(222,148,37)"/><text x="29.3505%" y="159.50"></text></g><g><title>layout_of (152,951 samples, 0.12%)</title><rect x="29.4161%" y="133" width="0.1201%" height="15" fill="rgb(234,67,33)"/><text x="29.6661%" y="143.50"></text></g><g><title>layout_of (142,121 samples, 0.11%)</title><rect x="29.4247%" y="117" width="0.1116%" height="15" fill="rgb(247,98,35)"/><text x="29.6747%" y="127.50"></text></g><g><title>privacy_access_levels (166,222 samples, 0.13%)</title><rect x="29.5363%" y="181" width="0.1305%" height="15" fill="rgb(247,138,52)"/><text x="29.7863%" y="191.50"></text></g><g><title>privacy_checking_modules (784,978 samples, 0.62%)</title><rect x="29.6668%" y="181" width="0.6165%" height="15" fill="rgb(213,79,30)"/><text x="29.9168%" y="191.50"></text></g><g><title>check_mod_privacy (781,718 samples, 0.61%)</title><rect x="29.6694%" y="165" width="0.6139%" height="15" fill="rgb(246,177,23)"/><text x="29.9194%" y="175.50"></text></g><g><title>misc_checking_3 (4,327,307 samples, 3.40%)</title><rect x="26.8941%" y="197" width="3.3983%" height="15" fill="rgb(230,62,27)"/><text x="27.1441%" y="207.50">mis..</text></g><g><title>impl_parent (2,168,802 samples, 1.70%)</title><rect x="33.0921%" y="133" width="1.7032%" height="15" fill="rgb(216,154,8)"/><text x="33.3421%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,306,437 samples, 1.03%)</title><rect x="33.7694%" y="117" width="1.0260%" height="15" fill="rgb(244,35,45)"/><text x="34.0194%" y="127.50"></text></g><g><title>impl_trait_ref (5,023,384 samples, 3.94%)</title><rect x="34.7953%" y="133" width="3.9449%" height="15" fill="rgb(251,115,12)"/><text x="35.0453%" y="143.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,899,909 samples, 3.06%)</title><rect x="35.6776%" y="117" width="3.0626%" height="15" fill="rgb(240,54,50)"/><text x="35.9276%" y="127.50">met..</text></g><g><title>coherent_trait (11,429,297 samples, 8.98%)</title><rect x="30.3498%" y="165" width="8.9755%" height="15" fill="rgb(233,84,52)"/><text x="30.5998%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (11,412,267 samples, 8.96%)</title><rect x="30.3632%" y="149" width="8.9622%" height="15" fill="rgb(207,117,47)"/><text x="30.6132%" y="159.50">specializatio..</text></g><g><title>trait_impls_of (742,850 samples, 0.58%)</title><rect x="38.7420%" y="133" width="0.5834%" height="15" fill="rgb(249,43,39)"/><text x="38.9920%" y="143.50"></text></g><g><title>implementations_of_trait (189,344 samples, 0.15%)</title><rect x="39.1767%" y="117" width="0.1487%" height="15" fill="rgb(209,38,44)"/><text x="39.4267%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (152,404 samples, 0.12%)</title><rect x="39.2057%" y="101" width="0.1197%" height="15" fill="rgb(236,212,23)"/><text x="39.4557%" y="111.50"></text></g><g><title>coherence_checking (11,482,108 samples, 9.02%)</title><rect x="30.3355%" y="181" width="9.0170%" height="15" fill="rgb(242,79,21)"/><text x="30.5855%" y="191.50">coherence_che..</text></g><g><title>adt_def (421,505 samples, 0.33%)</title><rect x="52.8849%" y="117" width="0.3310%" height="15" fill="rgb(211,96,35)"/><text x="53.1349%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (419,895 samples, 0.33%)</title><rect x="52.8862%" y="101" width="0.3297%" height="15" fill="rgb(253,215,40)"/><text x="53.1362%" y="111.50"></text></g><g><title>item_attrs (402,495 samples, 0.32%)</title><rect x="52.8998%" y="85" width="0.3161%" height="15" fill="rgb(211,81,21)"/><text x="53.1498%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (400,355 samples, 0.31%)</title><rect x="52.9015%" y="69" width="0.3144%" height="15" fill="rgb(208,190,38)"/><text x="53.1515%" y="79.50"></text></g><g><title>adt_sized_constraint (430,825 samples, 0.34%)</title><rect x="52.8798%" y="133" width="0.3383%" height="15" fill="rgb(235,213,38)"/><text x="53.1298%" y="143.50"></text></g><g><title>associated_item (180,691 samples, 0.14%)</title><rect x="53.2645%" y="117" width="0.1419%" height="15" fill="rgb(237,122,38)"/><text x="53.5145%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (150,901 samples, 0.12%)</title><rect x="53.2879%" y="101" width="0.1185%" height="15" fill="rgb(244,218,35)"/><text x="53.5379%" y="111.50"></text></g><g><title>associated_items (252,134 samples, 0.20%)</title><rect x="53.2182%" y="133" width="0.1980%" height="15" fill="rgb(240,68,47)"/><text x="53.4682%" y="143.50"></text></g><g><title>adt_dtorck_constraint (140,671 samples, 0.11%)</title><rect x="53.6353%" y="101" width="0.1105%" height="15" fill="rgb(210,16,53)"/><text x="53.8853%" y="111.50"></text></g><g><title>dropck_outlives (427,264 samples, 0.34%)</title><rect x="53.4363%" y="133" width="0.3355%" height="15" fill="rgb(235,124,12)"/><text x="53.6863%" y="143.50"></text></g><g><title>adt_dtorck_constraint (275,772 samples, 0.22%)</title><rect x="53.5553%" y="117" width="0.2166%" height="15" fill="rgb(224,169,11)"/><text x="53.8053%" y="127.50"></text></g><g><title>evaluate_obligation (1,082,600 samples, 0.85%)</title><rect x="53.7719%" y="133" width="0.8502%" height="15" fill="rgb(250,166,2)"/><text x="54.0219%" y="143.50"></text></g><g><title>predicates_of (174,121 samples, 0.14%)</title><rect x="54.4853%" y="117" width="0.1367%" height="15" fill="rgb(242,216,29)"/><text x="54.7353%" y="127.50"></text></g><g><title>item_attrs (145,142 samples, 0.11%)</title><rect x="54.7913%" y="133" width="0.1140%" height="15" fill="rgb(230,116,27)"/><text x="55.0413%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (139,982 samples, 0.11%)</title><rect x="54.7954%" y="117" width="0.1099%" height="15" fill="rgb(228,99,48)"/><text x="55.0454%" y="127.50"></text></g><g><title>method_autoderef_steps (188,071 samples, 0.15%)</title><rect x="54.9343%" y="133" width="0.1477%" height="15" fill="rgb(253,11,6)"/><text x="55.1843%" y="143.50"></text></g><g><title>predicates_of (175,391 samples, 0.14%)</title><rect x="55.1288%" y="133" width="0.1377%" height="15" fill="rgb(247,143,39)"/><text x="55.3788%" y="143.50"></text></g><g><title>predicates_defined_on (131,011 samples, 0.10%)</title><rect x="55.1637%" y="117" width="0.1029%" height="15" fill="rgb(236,97,10)"/><text x="55.4137%" y="127.50"></text></g><g><title>adt_sized_constraint (132,683 samples, 0.10%)</title><rect x="62.4184%" y="117" width="0.1042%" height="15" fill="rgb(233,208,19)"/><text x="62.6684%" y="127.50"></text></g><g><title>associated_item (293,913 samples, 0.23%)</title><rect x="62.6367%" y="101" width="0.2308%" height="15" fill="rgb(216,164,2)"/><text x="62.8867%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (226,432 samples, 0.18%)</title><rect x="62.6897%" y="85" width="0.1778%" height="15" fill="rgb(220,129,5)"/><text x="62.9397%" y="95.50"></text></g><g><title>associated_items (457,245 samples, 0.36%)</title><rect x="62.5301%" y="117" width="0.3591%" height="15" fill="rgb(242,17,10)"/><text x="62.7801%" y="127.50"></text></g><g><title>adt_def (129,471 samples, 0.10%)</title><rect x="63.3183%" y="53" width="0.1017%" height="15" fill="rgb(242,107,0)"/><text x="63.5683%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (127,981 samples, 0.10%)</title><rect x="63.3195%" y="37" width="0.1005%" height="15" fill="rgb(251,28,31)"/><text x="63.5695%" y="47.50"></text></g><g><title>adt_dtorck_constraint (259,903 samples, 0.20%)</title><rect x="63.2966%" y="69" width="0.2041%" height="15" fill="rgb(233,223,10)"/><text x="63.5466%" y="79.50"></text></g><g><title>adt_dtorck_constraint (405,146 samples, 0.32%)</title><rect x="63.2160%" y="85" width="0.3182%" height="15" fill="rgb(215,21,27)"/><text x="63.4660%" y="95.50"></text></g><g><title>adt_dtorck_constraint (559,478 samples, 0.44%)</title><rect x="63.1184%" y="101" width="0.4394%" height="15" fill="rgb(232,23,21)"/><text x="63.3684%" y="111.50"></text></g><g><title>dropck_outlives (819,800 samples, 0.64%)</title><rect x="62.9617%" y="117" width="0.6438%" height="15" fill="rgb(244,5,23)"/><text x="63.2117%" y="127.50"></text></g><g><title>adt_sized_constraint (166,932 samples, 0.13%)</title><rect x="64.7129%" y="101" width="0.1311%" height="15" fill="rgb(226,81,46)"/><text x="64.9629%" y="111.50"></text></g><g><title>predicates_of (154,351 samples, 0.12%)</title><rect x="64.9621%" y="101" width="0.1212%" height="15" fill="rgb(247,70,30)"/><text x="65.2121%" y="111.50"></text></g><g><title>trait_impls_of (409,674 samples, 0.32%)</title><rect x="65.1412%" y="101" width="0.3217%" height="15" fill="rgb(212,68,19)"/><text x="65.3912%" y="111.50"></text></g><g><title>implementations_of_trait (139,772 samples, 0.11%)</title><rect x="65.3531%" y="85" width="0.1098%" height="15" fill="rgb(240,187,13)"/><text x="65.6031%" y="95.50"></text></g><g><title>evaluate_obligation (2,365,833 samples, 1.86%)</title><rect x="63.6055%" y="117" width="1.8579%" height="15" fill="rgb(223,113,26)"/><text x="63.8555%" y="127.50">e..</text></g><g><title>generics_of (154,250 samples, 0.12%)</title><rect x="65.5749%" y="117" width="0.1211%" height="15" fill="rgb(206,192,2)"/><text x="65.8249%" y="127.50"></text></g><g><title>impl_item_implementor_ids (129,042 samples, 0.10%)</title><rect x="65.6977%" y="117" width="0.1013%" height="15" fill="rgb(241,108,4)"/><text x="65.9477%" y="127.50"></text></g><g><title>is_copy_raw (138,892 samples, 0.11%)</title><rect x="65.9221%" y="117" width="0.1091%" height="15" fill="rgb(247,173,49)"/><text x="66.1721%" y="127.50"></text></g><g><title>evaluate_obligation (249,026 samples, 0.20%)</title><rect x="66.3188%" y="101" width="0.1956%" height="15" fill="rgb(224,114,35)"/><text x="66.5688%" y="111.50"></text></g><g><title>method_autoderef_steps (494,948 samples, 0.39%)</title><rect x="66.1383%" y="117" width="0.3887%" height="15" fill="rgb(245,159,27)"/><text x="66.3883%" y="127.50"></text></g><g><title>predicates_of (328,521 samples, 0.26%)</title><rect x="66.5489%" y="117" width="0.2580%" height="15" fill="rgb(245,172,44)"/><text x="66.7989%" y="127.50"></text></g><g><title>predicates_defined_on (233,860 samples, 0.18%)</title><rect x="66.6233%" y="101" width="0.1837%" height="15" fill="rgb(236,23,11)"/><text x="66.8733%" y="111.50"></text></g><g><title>typeck (14,775,705 samples, 11.60%)</title><rect x="55.3255%" y="133" width="11.6035%" height="15" fill="rgb(205,117,38)"/><text x="55.5755%" y="143.50">typeck</text></g><g><title>item_bodies_checking (35,151,098 samples, 27.60%)</title><rect x="39.3709%" y="181" width="27.6045%" height="15" fill="rgb(237,72,25)"/><text x="39.6209%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (35,147,738 samples, 27.60%)</title><rect x="39.3735%" y="165" width="27.6019%" height="15" fill="rgb(244,70,9)"/><text x="39.6235%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (35,081,598 samples, 27.55%)</title><rect x="39.4255%" y="149" width="27.5499%" height="15" fill="rgb(217,125,39)"/><text x="39.6755%" y="159.50">typeck</text></g><g><title>impl_trait_ref (149,921 samples, 0.12%)</title><rect x="67.4014%" y="101" width="0.1177%" height="15" fill="rgb(235,36,10)"/><text x="67.6514%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (130,821 samples, 0.10%)</title><rect x="67.4164%" y="85" width="0.1027%" height="15" fill="rgb(251,123,47)"/><text x="67.6664%" y="95.50"></text></g><g><title>adt_destructor (309,733 samples, 0.24%)</title><rect x="67.2952%" y="149" width="0.2432%" height="15" fill="rgb(221,13,13)"/><text x="67.5452%" y="159.50"></text></g><g><title>coherent_trait (305,243 samples, 0.24%)</title><rect x="67.2987%" y="133" width="0.2397%" height="15" fill="rgb(238,131,9)"/><text x="67.5487%" y="143.50"></text></g><g><title>specialization_graph_of (303,583 samples, 0.24%)</title><rect x="67.3000%" y="117" width="0.2384%" height="15" fill="rgb(211,50,8)"/><text x="67.5500%" y="127.50"></text></g><g><title>typeck (138,321 samples, 0.11%)</title><rect x="67.6348%" y="149" width="0.1086%" height="15" fill="rgb(245,182,24)"/><text x="67.8848%" y="159.50"></text></g><g><title>item_types_checking (978,991 samples, 0.77%)</title><rect x="66.9754%" y="181" width="0.7688%" height="15" fill="rgb(242,14,37)"/><text x="67.2254%" y="191.50"></text></g><g><title>check_mod_item_types (975,171 samples, 0.77%)</title><rect x="66.9784%" y="165" width="0.7658%" height="15" fill="rgb(246,228,12)"/><text x="67.2284%" y="175.50"></text></g><g><title>fn_sig (446,117 samples, 0.35%)</title><rect x="67.9052%" y="149" width="0.3503%" height="15" fill="rgb(213,55,15)"/><text x="68.1552%" y="159.50"></text></g><g><title>named_region_map (167,672 samples, 0.13%)</title><rect x="68.3146%" y="133" width="0.1317%" height="15" fill="rgb(209,9,3)"/><text x="68.5646%" y="143.50"></text></g><g><title>resolve_lifetimes (153,142 samples, 0.12%)</title><rect x="68.3261%" y="117" width="0.1203%" height="15" fill="rgb(230,59,30)"/><text x="68.5761%" y="127.50"></text></g><g><title>generics_of (253,964 samples, 0.20%)</title><rect x="68.2555%" y="149" width="0.1994%" height="15" fill="rgb(209,121,21)"/><text x="68.5055%" y="159.50"></text></g><g><title>predicates_of (452,413 samples, 0.36%)</title><rect x="68.4917%" y="149" width="0.3553%" height="15" fill="rgb(220,109,13)"/><text x="68.7417%" y="159.50"></text></g><g><title>predicates_defined_on (421,123 samples, 0.33%)</title><rect x="68.5162%" y="133" width="0.3307%" height="15" fill="rgb(232,18,1)"/><text x="68.7662%" y="143.50"></text></g><g><title>inferred_outlives_of (288,483 samples, 0.23%)</title><rect x="68.6204%" y="117" width="0.2265%" height="15" fill="rgb(215,41,42)"/><text x="68.8704%" y="127.50"></text></g><g><title>inferred_outlives_crate (272,733 samples, 0.21%)</title><rect x="68.6328%" y="101" width="0.2142%" height="15" fill="rgb(224,123,36)"/><text x="68.8828%" y="111.50"></text></g><g><title>type_of (156,073 samples, 0.12%)</title><rect x="68.7244%" y="85" width="0.1226%" height="15" fill="rgb(240,125,3)"/><text x="68.9744%" y="95.50"></text></g><g><title>type_collecting (1,482,916 samples, 1.16%)</title><rect x="67.7461%" y="181" width="1.1645%" height="15" fill="rgb(205,98,50)"/><text x="67.9961%" y="191.50"></text></g><g><title>collect_mod_item_types (1,473,286 samples, 1.16%)</title><rect x="67.7536%" y="165" width="1.1570%" height="15" fill="rgb(205,185,37)"/><text x="68.0036%" y="175.50"></text></g><g><title>adt_sized_constraint (136,382 samples, 0.11%)</title><rect x="70.1425%" y="85" width="0.1071%" height="15" fill="rgb(238,207,15)"/><text x="70.3925%" y="95.50"></text></g><g><title>adt_sized_constraint (201,282 samples, 0.16%)</title><rect x="70.0962%" y="101" width="0.1581%" height="15" fill="rgb(213,199,42)"/><text x="70.3462%" y="111.50"></text></g><g><title>adt_sized_constraint (225,422 samples, 0.18%)</title><rect x="70.0776%" y="117" width="0.1770%" height="15" fill="rgb(235,201,11)"/><text x="70.3276%" y="127.50"></text></g><g><title>adt_sized_constraint (302,302 samples, 0.24%)</title><rect x="70.0180%" y="133" width="0.2374%" height="15" fill="rgb(207,46,11)"/><text x="70.2680%" y="143.50"></text></g><g><title>evaluate_obligation (718,488 samples, 0.56%)</title><rect x="69.8747%" y="149" width="0.5642%" height="15" fill="rgb(241,35,35)"/><text x="70.1247%" y="159.50"></text></g><g><title>trait_impls_of (208,312 samples, 0.16%)</title><rect x="70.2754%" y="133" width="0.1636%" height="15" fill="rgb(243,32,47)"/><text x="70.5254%" y="143.50"></text></g><g><title>evaluate_obligation (147,442 samples, 0.12%)</title><rect x="70.6314%" y="133" width="0.1158%" height="15" fill="rgb(247,202,23)"/><text x="70.8814%" y="143.50"></text></g><g><title>object_safety_violations (493,405 samples, 0.39%)</title><rect x="70.5280%" y="149" width="0.3875%" height="15" fill="rgb(219,102,11)"/><text x="70.7780%" y="159.50"></text></g><g><title>param_env (145,540 samples, 0.11%)</title><rect x="70.9171%" y="149" width="0.1143%" height="15" fill="rgb(243,110,44)"/><text x="71.1671%" y="159.50"></text></g><g><title>region_scope_tree (341,064 samples, 0.27%)</title><rect x="71.0880%" y="149" width="0.2678%" height="15" fill="rgb(222,74,54)"/><text x="71.3380%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,063,292 samples, 2.41%)</title><rect x="69.0160%" y="165" width="2.4056%" height="15" fill="rgb(216,99,12)"/><text x="69.2660%" y="175.50">ch..</text></g><g><title>adt_sized_constraint (142,762 samples, 0.11%)</title><rect x="72.0832%" y="133" width="0.1121%" height="15" fill="rgb(226,22,26)"/><text x="72.3332%" y="143.50"></text></g><g><title>evaluate_obligation (422,545 samples, 0.33%)</title><rect x="71.9081%" y="149" width="0.3318%" height="15" fill="rgb(217,163,10)"/><text x="72.1581%" y="159.50"></text></g><g><title>param_env (172,424 samples, 0.14%)</title><rect x="72.2949%" y="149" width="0.1354%" height="15" fill="rgb(213,25,53)"/><text x="72.5449%" y="159.50"></text></g><g><title>analysis (91,753,944 samples, 72.06%)</title><rect x="0.4908%" y="213" width="72.0553%" height="15" fill="rgb(252,105,26)"/><text x="0.7408%" y="223.50">analysis</text></g><g><title>type_check_crate (53,805,135 samples, 42.25%)</title><rect x="30.2924%" y="197" width="42.2537%" height="15" fill="rgb(220,39,43)"/><text x="30.5424%" y="207.50">type_check_crate</text></g><g><title>wf_checking (4,624,111 samples, 3.63%)</title><rect x="68.9147%" y="181" width="3.6314%" height="15" fill="rgb(229,68,48)"/><text x="69.1647%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (1,431,909 samples, 1.12%)</title><rect x="71.4216%" y="165" width="1.1245%" height="15" fill="rgb(252,8,32)"/><text x="71.6716%" y="175.50"></text></g><g><title>codegen_crate (429,225 samples, 0.34%)</title><rect x="72.5557%" y="213" width="0.3371%" height="15" fill="rgb(223,20,43)"/><text x="72.8057%" y="223.50"></text></g><g><title>metadata_load_macro (202,063 samples, 0.16%)</title><rect x="85.9612%" y="165" width="0.1587%" height="15" fill="rgb(229,81,49)"/><text x="86.2112%" y="175.50"></text></g><g><title>metadata_register_crate (2,725,530 samples, 2.14%)</title><rect x="86.1199%" y="165" width="2.1404%" height="15" fill="rgb(236,28,36)"/><text x="86.3699%" y="175.50">m..</text></g><g><title>metadata_register_crate (976,831 samples, 0.77%)</title><rect x="87.4932%" y="149" width="0.7671%" height="15" fill="rgb(249,185,26)"/><text x="87.7432%" y="159.50"></text></g><g><title>macro_expand_crate (19,166,131 samples, 15.05%)</title><rect x="73.2766%" y="197" width="15.0514%" height="15" fill="rgb(249,174,33)"/><text x="73.5266%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (19,146,371 samples, 15.04%)</title><rect x="73.2921%" y="181" width="15.0358%" height="15" fill="rgb(233,201,37)"/><text x="73.5421%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (257,613 samples, 0.20%)</title><rect x="88.3307%" y="197" width="0.2023%" height="15" fill="rgb(221,78,26)"/><text x="88.5807%" y="207.50"></text></g><g><title>late_resolve_crate (1,966,882 samples, 1.54%)</title><rect x="88.6584%" y="181" width="1.5446%" height="15" fill="rgb(250,127,30)"/><text x="88.9084%" y="191.50"></text></g><g><title>configure_and_expand (22,137,094 samples, 17.38%)</title><rect x="72.8928%" y="213" width="17.3845%" height="15" fill="rgb(230,49,44)"/><text x="73.1428%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,221,155 samples, 1.74%)</title><rect x="88.5330%" y="197" width="1.7443%" height="15" fill="rgb(229,67,23)"/><text x="88.7830%" y="207.50"></text></g><g><title>drop_ast (142,721 samples, 0.11%)</title><rect x="90.2773%" y="213" width="0.1121%" height="15" fill="rgb(249,83,47)"/><text x="90.5273%" y="223.50"></text></g><g><title>early_lint_checks (328,134 samples, 0.26%)</title><rect x="90.4011%" y="213" width="0.2577%" height="15" fill="rgb(215,43,3)"/><text x="90.6511%" y="223.50"></text></g><g><title>free_global_ctxt (3,755,542 samples, 2.95%)</title><rect x="90.6588%" y="213" width="2.9493%" height="15" fill="rgb(238,154,13)"/><text x="90.9088%" y="223.50">fr..</text></g><g><title>generate_crate_metadata (846,030 samples, 0.66%)</title><rect x="93.6080%" y="213" width="0.6644%" height="15" fill="rgb(219,56,2)"/><text x="93.8580%" y="223.50"></text></g><g><title>hir_lowering (2,515,267 samples, 1.98%)</title><rect x="94.2724%" y="213" width="1.9753%" height="15" fill="rgb(233,0,4)"/><text x="94.5224%" y="223.50">h..</text></g><g><title>parse_crate (3,266,126 samples, 2.56%)</title><rect x="96.2952%" y="213" width="2.5649%" height="15" fill="rgb(235,30,7)"/><text x="96.5452%" y="223.50">pa..</text></g><g><title>prepare_outputs (206,623 samples, 0.16%)</title><rect x="98.8683%" y="213" width="0.1623%" height="15" fill="rgb(250,79,13)"/><text x="99.1183%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (811,469 samples, 0.64%)</title><rect x="99.0306%" y="213" width="0.6373%" height="15" fill="rgb(211,146,34)"/><text x="99.2806%" y="223.50"></text></g><g><title>all (127,338,177 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (127,338,177 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (315,303 samples, 0.25%)</title><rect x="99.7524%" y="213" width="0.2476%" height="15" fill="rgb(221,155,16)"/><text x="100.0024%" y="223.50"></text></g></svg></svg>