<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (197,541 samples, 0.13%)</title><rect x="9.9168%" y="165" width="0.1335%" height="15" fill="rgb(227,0,7)"/><text x="10.1668%" y="175.50"></text></g><g><title>eval_to_const_value_raw (401,275 samples, 0.27%)</title><rect x="10.8809%" y="149" width="0.2711%" height="15" fill="rgb(217,0,24)"/><text x="11.1309%" y="159.50"></text></g><g><title>eval_to_const_value_raw (394,275 samples, 0.27%)</title><rect x="10.8857%" y="133" width="0.2664%" height="15" fill="rgb(221,193,54)"/><text x="11.1357%" y="143.50"></text></g><g><title>eval_to_allocation_raw (388,455 samples, 0.26%)</title><rect x="10.8896%" y="117" width="0.2624%" height="15" fill="rgb(248,212,6)"/><text x="11.1396%" y="127.50"></text></g><g><title>mir_for_ctfe (198,002 samples, 0.13%)</title><rect x="11.0183%" y="101" width="0.1338%" height="15" fill="rgb(208,68,35)"/><text x="11.2683%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (163,631 samples, 0.11%)</title><rect x="11.0415%" y="85" width="0.1105%" height="15" fill="rgb(232,128,0)"/><text x="11.2915%" y="95.50"></text></g><g><title>param_env (425,974 samples, 0.29%)</title><rect x="11.8682%" y="133" width="0.2878%" height="15" fill="rgb(207,160,47)"/><text x="12.1182%" y="143.50"></text></g><g><title>item_attrs (428,806 samples, 0.29%)</title><rect x="12.6529%" y="101" width="0.2897%" height="15" fill="rgb(228,23,34)"/><text x="12.9029%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (414,526 samples, 0.28%)</title><rect x="12.6625%" y="85" width="0.2800%" height="15" fill="rgb(218,30,26)"/><text x="12.9125%" y="95.50"></text></g><g><title>codegen_fn_attrs (602,947 samples, 0.41%)</title><rect x="12.5486%" y="117" width="0.4073%" height="15" fill="rgb(220,122,19)"/><text x="12.7986%" y="127.50"></text></g><g><title>is_copy_raw (206,901 samples, 0.14%)</title><rect x="15.5344%" y="101" width="0.1398%" height="15" fill="rgb(250,228,42)"/><text x="15.7844%" y="111.50"></text></g><g><title>evaluate_obligation (164,880 samples, 0.11%)</title><rect x="15.5628%" y="85" width="0.1114%" height="15" fill="rgb(240,193,28)"/><text x="15.8128%" y="95.50"></text></g><g><title>needs_drop_raw (1,383,097 samples, 0.93%)</title><rect x="15.6772%" y="101" width="0.9344%" height="15" fill="rgb(216,20,37)"/><text x="15.9272%" y="111.50"></text></g><g><title>is_copy_raw (1,096,283 samples, 0.74%)</title><rect x="15.8710%" y="85" width="0.7406%" height="15" fill="rgb(206,188,39)"/><text x="16.1210%" y="95.50"></text></g><g><title>evaluate_obligation (910,421 samples, 0.62%)</title><rect x="15.9965%" y="69" width="0.6151%" height="15" fill="rgb(217,207,13)"/><text x="16.2465%" y="79.50"></text></g><g><title>impl_parent (469,657 samples, 0.32%)</title><rect x="17.3798%" y="69" width="0.3173%" height="15" fill="rgb(231,73,38)"/><text x="17.6298%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (307,624 samples, 0.21%)</title><rect x="17.4892%" y="53" width="0.2078%" height="15" fill="rgb(225,20,46)"/><text x="17.7392%" y="63.50"></text></g><g><title>specialization_graph_of (1,924,442 samples, 1.30%)</title><rect x="16.8870%" y="85" width="1.3001%" height="15" fill="rgb(210,31,41)"/><text x="17.1370%" y="95.50"></text></g><g><title>impl_trait_ref (725,407 samples, 0.49%)</title><rect x="17.6971%" y="69" width="0.4901%" height="15" fill="rgb(221,200,47)"/><text x="17.9471%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (557,952 samples, 0.38%)</title><rect x="17.8102%" y="53" width="0.3769%" height="15" fill="rgb(226,26,5)"/><text x="18.0602%" y="63.50"></text></g><g><title>resolve_instance (2,443,134 samples, 1.65%)</title><rect x="16.6116%" y="101" width="1.6506%" height="15" fill="rgb(249,33,26)"/><text x="16.8616%" y="111.50"></text></g><g><title>thir_body (1,555,566 samples, 1.05%)</title><rect x="18.2963%" y="101" width="1.0509%" height="15" fill="rgb(235,183,28)"/><text x="18.5463%" y="111.50"></text></g><g><title>mir_const (12,150,603 samples, 8.21%)</title><rect x="11.1612%" y="149" width="8.2088%" height="15" fill="rgb(221,5,38)"/><text x="11.4112%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (10,678,123 samples, 7.21%)</title><rect x="12.1560%" y="133" width="7.2140%" height="15" fill="rgb(247,18,42)"/><text x="12.4060%" y="143.50">unsafety_c..</text></g><g><title>mir_built (9,494,133 samples, 6.41%)</title><rect x="12.9559%" y="117" width="6.4141%" height="15" fill="rgb(241,131,45)"/><text x="13.2059%" y="127.50">mir_built</text></g><g><title>has_structural_eq_impls (197,552 samples, 0.13%)</title><rect x="19.4997%" y="133" width="0.1335%" height="15" fill="rgb(249,31,29)"/><text x="19.7497%" y="143.50"></text></g><g><title>evaluate_obligation (167,891 samples, 0.11%)</title><rect x="19.5198%" y="117" width="0.1134%" height="15" fill="rgb(225,111,53)"/><text x="19.7698%" y="127.50"></text></g><g><title>mir_const (271,051 samples, 0.18%)</title><rect x="19.6933%" y="133" width="0.1831%" height="15" fill="rgb(238,160,17)"/><text x="19.9433%" y="143.50"></text></g><g><title>unsafety_check_result (197,331 samples, 0.13%)</title><rect x="19.7431%" y="117" width="0.1333%" height="15" fill="rgb(214,148,48)"/><text x="19.9931%" y="127.50"></text></g><g><title>mir_built (159,961 samples, 0.11%)</title><rect x="19.7684%" y="101" width="0.1081%" height="15" fill="rgb(232,36,49)"/><text x="20.0184%" y="111.50"></text></g><g><title>mir_const_qualif (811,628 samples, 0.55%)</title><rect x="19.3700%" y="149" width="0.5483%" height="15" fill="rgb(209,103,24)"/><text x="19.6200%" y="159.50"></text></g><g><title>mir_promoted (14,419,495 samples, 9.74%)</title><rect x="10.1777%" y="165" width="9.7416%" height="15" fill="rgb(229,88,8)"/><text x="10.4277%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (811,439 samples, 0.55%)</title><rect x="19.9197%" y="165" width="0.5482%" height="15" fill="rgb(213,181,19)"/><text x="20.1697%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (247,300 samples, 0.17%)</title><rect x="20.4679%" y="165" width="0.1671%" height="15" fill="rgb(254,191,54)"/><text x="20.7179%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,005,740 samples, 1.36%)</title><rect x="20.7047%" y="165" width="1.3551%" height="15" fill="rgb(241,83,37)"/><text x="20.9547%" y="175.50"></text></g><g><title>MIR_borrow_checking (31,500,428 samples, 21.28%)</title><rect x="0.7810%" y="197" width="21.2813%" height="15" fill="rgb(233,36,39)"/><text x="1.0310%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,350,548 samples, 21.18%)</title><rect x="0.8822%" y="181" width="21.1801%" height="15" fill="rgb(226,3,54)"/><text x="1.1322%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (418,085 samples, 0.28%)</title><rect x="22.0623%" y="197" width="0.2825%" height="15" fill="rgb(245,192,40)"/><text x="22.3123%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (182,324 samples, 0.12%)</title><rect x="22.2216%" y="181" width="0.1232%" height="15" fill="rgb(238,167,29)"/><text x="22.4716%" y="191.50"></text></g><g><title>hir_module_items (210,122 samples, 0.14%)</title><rect x="22.3448%" y="197" width="0.1420%" height="15" fill="rgb(232,182,51)"/><text x="22.5948%" y="207.50"></text></g><g><title>should_inherit_track_caller (167,361 samples, 0.11%)</title><rect x="22.7908%" y="149" width="0.1131%" height="15" fill="rgb(231,60,39)"/><text x="23.0408%" y="159.50"></text></g><g><title>codegen_fn_attrs (312,462 samples, 0.21%)</title><rect x="22.7066%" y="165" width="0.2111%" height="15" fill="rgb(208,69,12)"/><text x="22.9566%" y="175.50"></text></g><g><title>check_mod_attrs (609,146 samples, 0.41%)</title><rect x="22.5063%" y="181" width="0.4115%" height="15" fill="rgb(235,93,37)"/><text x="22.7563%" y="191.50"></text></g><g><title>lookup_deprecation_entry (184,931 samples, 0.12%)</title><rect x="23.2322%" y="165" width="0.1249%" height="15" fill="rgb(213,116,39)"/><text x="23.4822%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (524,624 samples, 0.35%)</title><rect x="23.0842%" y="181" width="0.3544%" height="15" fill="rgb(222,207,29)"/><text x="23.3342%" y="191.50"></text></g><g><title>misc_checking_1 (1,478,456 samples, 1.00%)</title><rect x="22.4873%" y="197" width="0.9988%" height="15" fill="rgb(206,96,30)"/><text x="22.7373%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (698,428 samples, 0.47%)</title><rect x="23.4873%" y="181" width="0.4719%" height="15" fill="rgb(218,138,4)"/><text x="23.7373%" y="191.50"></text></g><g><title>check_mod_liveness (559,837 samples, 0.38%)</title><rect x="23.5809%" y="165" width="0.3782%" height="15" fill="rgb(250,191,14)"/><text x="23.8309%" y="175.50"></text></g><g><title>misc_checking_2 (1,388,116 samples, 0.94%)</title><rect x="23.4861%" y="197" width="0.9378%" height="15" fill="rgb(239,60,40)"/><text x="23.7361%" y="207.50"></text></g><g><title>match_checking (688,008 samples, 0.46%)</title><rect x="23.9591%" y="181" width="0.4648%" height="15" fill="rgb(206,27,48)"/><text x="24.2091%" y="191.50"></text></g><g><title>check_match (649,938 samples, 0.44%)</title><rect x="23.9848%" y="165" width="0.4391%" height="15" fill="rgb(225,35,8)"/><text x="24.2348%" y="175.50"></text></g><g><title>check_private_in_public (268,523 samples, 0.18%)</title><rect x="24.4308%" y="181" width="0.1814%" height="15" fill="rgb(250,213,24)"/><text x="24.6808%" y="191.50"></text></g><g><title>death_checking (520,166 samples, 0.35%)</title><rect x="24.6122%" y="181" width="0.3514%" height="15" fill="rgb(247,123,22)"/><text x="24.8622%" y="191.50"></text></g><g><title>eval_to_allocation_raw (268,753 samples, 0.18%)</title><rect x="25.8355%" y="149" width="0.1816%" height="15" fill="rgb(231,138,38)"/><text x="26.0855%" y="159.50"></text></g><g><title>eval_to_allocation_raw (267,843 samples, 0.18%)</title><rect x="25.8361%" y="133" width="0.1810%" height="15" fill="rgb(231,145,46)"/><text x="26.0861%" y="143.50"></text></g><g><title>eval_to_const_value_raw (320,833 samples, 0.22%)</title><rect x="26.0170%" y="149" width="0.2168%" height="15" fill="rgb(251,118,11)"/><text x="26.2670%" y="159.50"></text></g><g><title>eval_to_const_value_raw (308,883 samples, 0.21%)</title><rect x="26.0251%" y="133" width="0.2087%" height="15" fill="rgb(217,147,25)"/><text x="26.2751%" y="143.50"></text></g><g><title>eval_to_allocation_raw (295,542 samples, 0.20%)</title><rect x="26.0341%" y="117" width="0.1997%" height="15" fill="rgb(247,81,37)"/><text x="26.2841%" y="127.50"></text></g><g><title>param_env (431,713 samples, 0.29%)</title><rect x="26.2338%" y="149" width="0.2917%" height="15" fill="rgb(209,12,38)"/><text x="26.4838%" y="159.50"></text></g><g><title>predicates_of (179,500 samples, 0.12%)</title><rect x="26.4042%" y="133" width="0.1213%" height="15" fill="rgb(227,1,9)"/><text x="26.6542%" y="143.50"></text></g><g><title>crate_lints (3,466,668 samples, 2.34%)</title><rect x="24.9649%" y="165" width="2.3420%" height="15" fill="rgb(248,47,43)"/><text x="25.2149%" y="175.50">c..</text></g><g><title>type_of (1,108,811 samples, 0.75%)</title><rect x="26.5579%" y="149" width="0.7491%" height="15" fill="rgb(221,10,30)"/><text x="26.8079%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (879,200 samples, 0.59%)</title><rect x="26.7130%" y="133" width="0.5940%" height="15" fill="rgb(210,229,1)"/><text x="26.9630%" y="143.50"></text></g><g><title>lint_checking (4,036,135 samples, 2.73%)</title><rect x="24.9637%" y="181" width="2.7268%" height="15" fill="rgb(222,148,37)"/><text x="25.2137%" y="191.50">li..</text></g><g><title>module_lints (567,597 samples, 0.38%)</title><rect x="27.3070%" y="165" width="0.3835%" height="15" fill="rgb(234,67,33)"/><text x="27.5570%" y="175.50"></text></g><g><title>lint_mod (560,516 samples, 0.38%)</title><rect x="27.3117%" y="149" width="0.3787%" height="15" fill="rgb(247,98,35)"/><text x="27.5617%" y="159.50"></text></g><g><title>privacy_access_levels (278,113 samples, 0.19%)</title><rect x="27.6904%" y="181" width="0.1879%" height="15" fill="rgb(247,138,52)"/><text x="27.9404%" y="191.50"></text></g><g><title>privacy_checking_modules (997,401 samples, 0.67%)</title><rect x="27.8783%" y="181" width="0.6738%" height="15" fill="rgb(213,79,30)"/><text x="28.1283%" y="191.50"></text></g><g><title>check_mod_privacy (991,881 samples, 0.67%)</title><rect x="27.8820%" y="165" width="0.6701%" height="15" fill="rgb(246,177,23)"/><text x="28.1320%" y="175.50"></text></g><g><title>misc_checking_3 (6,127,348 samples, 4.14%)</title><rect x="24.4239%" y="197" width="4.1396%" height="15" fill="rgb(230,62,27)"/><text x="24.6739%" y="207.50">misc_..</text></g><g><title>adt_destructor (288,763 samples, 0.20%)</title><rect x="28.6703%" y="149" width="0.1951%" height="15" fill="rgb(216,154,8)"/><text x="28.9203%" y="159.50"></text></g><g><title>coherent_trait (285,493 samples, 0.19%)</title><rect x="28.6725%" y="133" width="0.1929%" height="15" fill="rgb(244,35,45)"/><text x="28.9225%" y="143.50"></text></g><g><title>specialization_graph_of (282,993 samples, 0.19%)</title><rect x="28.6742%" y="117" width="0.1912%" height="15" fill="rgb(251,115,12)"/><text x="28.9242%" y="127.50"></text></g><g><title>is_copy_raw (202,841 samples, 0.14%)</title><rect x="28.8654%" y="149" width="0.1370%" height="15" fill="rgb(240,54,50)"/><text x="29.1154%" y="159.50"></text></g><g><title>evaluate_obligation (167,671 samples, 0.11%)</title><rect x="28.8891%" y="133" width="0.1133%" height="15" fill="rgb(233,84,52)"/><text x="29.1391%" y="143.50"></text></g><g><title>impl_parent (1,632,541 samples, 1.10%)</title><rect x="30.6930%" y="133" width="1.1029%" height="15" fill="rgb(207,117,47)"/><text x="30.9430%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (993,685 samples, 0.67%)</title><rect x="31.1246%" y="117" width="0.6713%" height="15" fill="rgb(249,43,39)"/><text x="31.3746%" y="127.50"></text></g><g><title>impl_trait_ref (4,469,434 samples, 3.02%)</title><rect x="31.7959%" y="133" width="3.0195%" height="15" fill="rgb(209,38,44)"/><text x="32.0459%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,605,168 samples, 2.44%)</title><rect x="32.3798%" y="117" width="2.4356%" height="15" fill="rgb(236,212,23)"/><text x="32.6298%" y="127.50">me..</text></g><g><title>coherent_trait (9,684,577 samples, 6.54%)</title><rect x="28.6416%" y="165" width="6.5428%" height="15" fill="rgb(242,79,21)"/><text x="28.8916%" y="175.50">coherent_..</text></g><g><title>specialization_graph_of (9,049,701 samples, 6.11%)</title><rect x="29.0705%" y="149" width="6.1139%" height="15" fill="rgb(211,96,35)"/><text x="29.3205%" y="159.50">speciali..</text></g><g><title>trait_impls_of (544,170 samples, 0.37%)</title><rect x="34.8167%" y="133" width="0.3676%" height="15" fill="rgb(253,215,40)"/><text x="35.0667%" y="143.50"></text></g><g><title>coherence_checking (9,770,147 samples, 6.60%)</title><rect x="28.6268%" y="181" width="6.6006%" height="15" fill="rgb(211,81,21)"/><text x="28.8768%" y="191.50">coherence..</text></g><g><title>associated_item (394,565 samples, 0.27%)</title><rect x="45.8453%" y="117" width="0.2666%" height="15" fill="rgb(208,190,38)"/><text x="46.0953%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (311,623 samples, 0.21%)</title><rect x="45.9013%" y="101" width="0.2105%" height="15" fill="rgb(235,213,38)"/><text x="46.1513%" y="111.50"></text></g><g><title>associated_items (553,145 samples, 0.37%)</title><rect x="45.7573%" y="133" width="0.3737%" height="15" fill="rgb(237,122,38)"/><text x="46.0073%" y="143.50"></text></g><g><title>dropck_outlives (228,474 samples, 0.15%)</title><rect x="46.1696%" y="133" width="0.1544%" height="15" fill="rgb(244,218,35)"/><text x="46.4196%" y="143.50"></text></g><g><title>trait_impls_of (304,244 samples, 0.21%)</title><rect x="47.1798%" y="117" width="0.2055%" height="15" fill="rgb(240,68,47)"/><text x="47.4298%" y="127.50"></text></g><g><title>evaluate_obligation (1,573,654 samples, 1.06%)</title><rect x="46.3239%" y="133" width="1.0631%" height="15" fill="rgb(210,16,53)"/><text x="46.5739%" y="143.50"></text></g><g><title>item_attrs (154,842 samples, 0.10%)</title><rect x="47.5375%" y="133" width="0.1046%" height="15" fill="rgb(235,124,12)"/><text x="47.7875%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (149,362 samples, 0.10%)</title><rect x="47.5412%" y="117" width="0.1009%" height="15" fill="rgb(224,169,11)"/><text x="47.7912%" y="127.50"></text></g><g><title>method_autoderef_steps (256,172 samples, 0.17%)</title><rect x="47.6802%" y="133" width="0.1731%" height="15" fill="rgb(250,166,2)"/><text x="47.9302%" y="143.50"></text></g><g><title>predicates_of (227,535 samples, 0.15%)</title><rect x="47.9630%" y="133" width="0.1537%" height="15" fill="rgb(242,216,29)"/><text x="48.2130%" y="143.50"></text></g><g><title>predicates_defined_on (161,724 samples, 0.11%)</title><rect x="48.0075%" y="117" width="0.1093%" height="15" fill="rgb(230,116,27)"/><text x="48.2575%" y="127.50"></text></g><g><title>associated_item (314,271 samples, 0.21%)</title><rect x="55.8814%" y="101" width="0.2123%" height="15" fill="rgb(228,99,48)"/><text x="56.1314%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (259,541 samples, 0.18%)</title><rect x="55.9184%" y="85" width="0.1753%" height="15" fill="rgb(253,11,6)"/><text x="56.1684%" y="95.50"></text></g><g><title>associated_items (680,506 samples, 0.46%)</title><rect x="55.6510%" y="117" width="0.4597%" height="15" fill="rgb(247,143,39)"/><text x="55.9010%" y="127.50"></text></g><g><title>adt_dtorck_constraint (243,542 samples, 0.16%)</title><rect x="56.2088%" y="101" width="0.1645%" height="15" fill="rgb(236,97,10)"/><text x="56.4588%" y="111.50"></text></g><g><title>dropck_outlives (341,033 samples, 0.23%)</title><rect x="56.1463%" y="117" width="0.2304%" height="15" fill="rgb(233,208,19)"/><text x="56.3963%" y="127.50"></text></g><g><title>adt_def (413,934 samples, 0.28%)</title><rect x="56.7167%" y="85" width="0.2796%" height="15" fill="rgb(216,164,2)"/><text x="56.9667%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (412,724 samples, 0.28%)</title><rect x="56.7175%" y="69" width="0.2788%" height="15" fill="rgb(220,129,5)"/><text x="56.9675%" y="79.50"></text></g><g><title>item_attrs (399,204 samples, 0.27%)</title><rect x="56.7266%" y="53" width="0.2697%" height="15" fill="rgb(242,17,10)"/><text x="56.9766%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (397,664 samples, 0.27%)</title><rect x="56.7277%" y="37" width="0.2687%" height="15" fill="rgb(242,107,0)"/><text x="56.9777%" y="47.50"></text></g><g><title>adt_sized_constraint (467,105 samples, 0.32%)</title><rect x="56.7115%" y="101" width="0.3156%" height="15" fill="rgb(251,28,31)"/><text x="56.9615%" y="111.50"></text></g><g><title>trait_impls_of (314,534 samples, 0.21%)</title><rect x="57.1719%" y="101" width="0.2125%" height="15" fill="rgb(233,223,10)"/><text x="57.4219%" y="111.50"></text></g><g><title>evaluate_obligation (1,493,111 samples, 1.01%)</title><rect x="56.3767%" y="117" width="1.0087%" height="15" fill="rgb(215,21,27)"/><text x="56.6267%" y="127.50"></text></g><g><title>is_copy_raw (154,222 samples, 0.10%)</title><rect x="57.5821%" y="117" width="0.1042%" height="15" fill="rgb(232,23,21)"/><text x="57.8321%" y="127.50"></text></g><g><title>method_autoderef_steps (233,160 samples, 0.16%)</title><rect x="57.8054%" y="117" width="0.1575%" height="15" fill="rgb(244,5,23)"/><text x="58.0554%" y="127.50"></text></g><g><title>predicates_of (233,303 samples, 0.16%)</title><rect x="57.9766%" y="117" width="0.1576%" height="15" fill="rgb(226,81,46)"/><text x="58.2266%" y="127.50"></text></g><g><title>predicates_defined_on (163,372 samples, 0.11%)</title><rect x="58.0239%" y="101" width="0.1104%" height="15" fill="rgb(247,70,30)"/><text x="58.2739%" y="111.50"></text></g><g><title>typeck (14,884,555 samples, 10.06%)</title><rect x="48.1444%" y="133" width="10.0558%" height="15" fill="rgb(212,68,19)"/><text x="48.3944%" y="143.50">typeck</text></g><g><title>item_bodies_checking (34,007,796 samples, 22.98%)</title><rect x="35.2539%" y="181" width="22.9753%" height="15" fill="rgb(240,187,13)"/><text x="35.5039%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (34,004,206 samples, 22.97%)</title><rect x="35.2563%" y="165" width="22.9729%" height="15" fill="rgb(223,113,26)"/><text x="35.5063%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (33,923,835 samples, 22.92%)</title><rect x="35.3106%" y="149" width="22.9186%" height="15" fill="rgb(206,192,2)"/><text x="35.5606%" y="159.50">typeck</text></g><g><title>layout_of (153,852 samples, 0.10%)</title><rect x="58.8896%" y="149" width="0.1039%" height="15" fill="rgb(241,108,4)"/><text x="59.1396%" y="159.50"></text></g><g><title>mir_borrowck (1,211,954 samples, 0.82%)</title><rect x="59.3662%" y="117" width="0.8188%" height="15" fill="rgb(247,173,49)"/><text x="59.6162%" y="127.50"></text></g><g><title>evaluate_obligation (156,381 samples, 0.11%)</title><rect x="61.7554%" y="37" width="0.1056%" height="15" fill="rgb(224,114,35)"/><text x="62.0054%" y="47.50"></text></g><g><title>lint_levels (243,393 samples, 0.16%)</title><rect x="62.0551%" y="37" width="0.1644%" height="15" fill="rgb(245,159,27)"/><text x="62.3051%" y="47.50"></text></g><g><title>mir_built (2,978,182 samples, 2.01%)</title><rect x="60.3133%" y="69" width="2.0120%" height="15" fill="rgb(245,172,44)"/><text x="60.5633%" y="79.50">m..</text></g><g><title>typeck (2,770,110 samples, 1.87%)</title><rect x="60.4539%" y="53" width="1.8715%" height="15" fill="rgb(236,23,11)"/><text x="60.7039%" y="63.50">t..</text></g><g><title>mir_built (308,304 samples, 0.21%)</title><rect x="62.3738%" y="53" width="0.2083%" height="15" fill="rgb(205,117,38)"/><text x="62.6238%" y="63.50"></text></g><g><title>mir_const (3,482,198 samples, 2.35%)</title><rect x="60.2299%" y="101" width="2.3525%" height="15" fill="rgb(237,72,25)"/><text x="60.4799%" y="111.50">m..</text></g><g><title>unsafety_check_result (3,383,257 samples, 2.29%)</title><rect x="60.2967%" y="85" width="2.2857%" height="15" fill="rgb(244,70,9)"/><text x="60.5467%" y="95.50">u..</text></g><g><title>unsafety_check_result (380,585 samples, 0.26%)</title><rect x="62.3253%" y="69" width="0.2571%" height="15" fill="rgb(217,125,39)"/><text x="62.5753%" y="79.50"></text></g><g><title>mir_promoted (3,555,689 samples, 2.40%)</title><rect x="60.1850%" y="117" width="2.4022%" height="15" fill="rgb(235,36,10)"/><text x="60.4350%" y="127.50">mi..</text></g><g><title>type_of (5,403,839 samples, 3.65%)</title><rect x="59.0000%" y="149" width="3.6508%" height="15" fill="rgb(251,123,47)"/><text x="59.2500%" y="159.50">type..</text></g><g><title>mir_borrowck (5,392,019 samples, 3.64%)</title><rect x="59.0080%" y="133" width="3.6428%" height="15" fill="rgb(221,13,13)"/><text x="59.2580%" y="143.50">mir_..</text></g><g><title>generics_of (462,170 samples, 0.31%)</title><rect x="65.1901%" y="117" width="0.3122%" height="15" fill="rgb(238,131,9)"/><text x="65.4401%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (327,700 samples, 0.22%)</title><rect x="65.2810%" y="101" width="0.2214%" height="15" fill="rgb(211,50,8)"/><text x="65.5310%" y="111.50"></text></g><g><title>impl_polarity (322,604 samples, 0.22%)</title><rect x="65.5142%" y="117" width="0.2179%" height="15" fill="rgb(245,182,24)"/><text x="65.7642%" y="127.50"></text></g><g><title>impl_trait_ref (780,813 samples, 0.53%)</title><rect x="65.7321%" y="117" width="0.5275%" height="15" fill="rgb(242,14,37)"/><text x="65.9821%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (646,429 samples, 0.44%)</title><rect x="65.8229%" y="101" width="0.4367%" height="15" fill="rgb(246,228,12)"/><text x="66.0729%" y="111.50"></text></g><g><title>predicates_of (660,382 samples, 0.45%)</title><rect x="66.2803%" y="117" width="0.4461%" height="15" fill="rgb(213,55,15)"/><text x="66.5303%" y="127.50"></text></g><g><title>predicates_defined_on (370,680 samples, 0.25%)</title><rect x="66.4760%" y="101" width="0.2504%" height="15" fill="rgb(209,9,3)"/><text x="66.7260%" y="111.50"></text></g><g><title>specializes (1,881,059 samples, 1.27%)</title><rect x="66.7264%" y="117" width="1.2708%" height="15" fill="rgb(230,59,30)"/><text x="66.9764%" y="127.50"></text></g><g><title>param_env (1,112,091 samples, 0.75%)</title><rect x="67.2459%" y="101" width="0.7513%" height="15" fill="rgb(209,121,21)"/><text x="67.4959%" y="111.50"></text></g><g><title>def_span (529,335 samples, 0.36%)</title><rect x="67.6396%" y="85" width="0.3576%" height="15" fill="rgb(220,109,13)"/><text x="67.8896%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (471,434 samples, 0.32%)</title><rect x="67.6787%" y="69" width="0.3185%" height="15" fill="rgb(232,18,1)"/><text x="67.9287%" y="79.50"></text></g><g><title>evaluate_obligation (6,259,819 samples, 4.23%)</title><rect x="63.8185%" y="133" width="4.2291%" height="15" fill="rgb(215,41,42)"/><text x="64.0685%" y="143.50">evalu..</text></g><g><title>specializes (166,531 samples, 0.11%)</title><rect x="68.1234%" y="133" width="0.1125%" height="15" fill="rgb(224,123,36)"/><text x="68.3734%" y="143.50"></text></g><g><title>item_types_checking (14,848,094 samples, 10.03%)</title><rect x="58.2292%" y="181" width="10.0312%" height="15" fill="rgb(240,125,3)"/><text x="58.4792%" y="191.50">item_types_chec..</text></g><g><title>check_mod_item_types (14,838,694 samples, 10.02%)</title><rect x="58.2355%" y="165" width="10.0249%" height="15" fill="rgb(205,98,50)"/><text x="58.4855%" y="175.50">check_mod_item..</text></g><g><title>typeck (8,303,252 samples, 5.61%)</title><rect x="62.6508%" y="149" width="5.6096%" height="15" fill="rgb(205,185,37)"/><text x="62.9008%" y="159.50">typeck</text></g><g><title>fn_sig (276,252 samples, 0.19%)</title><rect x="68.4679%" y="149" width="0.1866%" height="15" fill="rgb(238,207,15)"/><text x="68.7179%" y="159.50"></text></g><g><title>generics_of (266,804 samples, 0.18%)</title><rect x="68.6546%" y="149" width="0.1802%" height="15" fill="rgb(213,199,42)"/><text x="68.9046%" y="159.50"></text></g><g><title>late_bound_vars_map (177,562 samples, 0.12%)</title><rect x="69.1737%" y="101" width="0.1200%" height="15" fill="rgb(235,201,11)"/><text x="69.4237%" y="111.50"></text></g><g><title>resolve_lifetimes (168,761 samples, 0.11%)</title><rect x="69.1796%" y="85" width="0.1140%" height="15" fill="rgb(207,46,11)"/><text x="69.4296%" y="95.50"></text></g><g><title>explicit_predicates_of (578,307 samples, 0.39%)</title><rect x="68.9527%" y="117" width="0.3907%" height="15" fill="rgb(241,35,35)"/><text x="69.2027%" y="127.50"></text></g><g><title>predicates_of (1,106,342 samples, 0.75%)</title><rect x="68.8649%" y="149" width="0.7474%" height="15" fill="rgb(243,32,47)"/><text x="69.1149%" y="159.50"></text></g><g><title>predicates_defined_on (1,056,912 samples, 0.71%)</title><rect x="68.8983%" y="133" width="0.7140%" height="15" fill="rgb(247,202,23)"/><text x="69.1483%" y="143.50"></text></g><g><title>inferred_outlives_of (398,194 samples, 0.27%)</title><rect x="69.3434%" y="117" width="0.2690%" height="15" fill="rgb(219,102,11)"/><text x="69.5934%" y="127.50"></text></g><g><title>inferred_outlives_crate (377,164 samples, 0.25%)</title><rect x="69.3576%" y="101" width="0.2548%" height="15" fill="rgb(243,110,44)"/><text x="69.6076%" y="111.50"></text></g><g><title>type_of (222,333 samples, 0.15%)</title><rect x="69.4622%" y="85" width="0.1502%" height="15" fill="rgb(222,74,54)"/><text x="69.7122%" y="95.50"></text></g><g><title>type_collecting (2,122,504 samples, 1.43%)</title><rect x="68.2635%" y="181" width="1.4339%" height="15" fill="rgb(216,99,12)"/><text x="68.5135%" y="191.50"></text></g><g><title>collect_mod_item_types (2,101,654 samples, 1.42%)</title><rect x="68.2776%" y="165" width="1.4199%" height="15" fill="rgb(226,22,26)"/><text x="68.5276%" y="175.50"></text></g><g><title>evaluate_obligation (490,686 samples, 0.33%)</title><rect x="70.8885%" y="149" width="0.3315%" height="15" fill="rgb(217,163,10)"/><text x="71.1385%" y="159.50"></text></g><g><title>implied_outlives_bounds (219,044 samples, 0.15%)</title><rect x="71.2351%" y="149" width="0.1480%" height="15" fill="rgb(213,25,53)"/><text x="71.4851%" y="159.50"></text></g><g><title>param_env (263,723 samples, 0.18%)</title><rect x="71.3831%" y="149" width="0.1782%" height="15" fill="rgb(252,105,26)"/><text x="71.6331%" y="159.50"></text></g><g><title>region_scope_tree (485,018 samples, 0.33%)</title><rect x="71.5782%" y="149" width="0.3277%" height="15" fill="rgb(220,39,43)"/><text x="71.8282%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,051,926 samples, 2.06%)</title><rect x="69.8461%" y="165" width="2.0618%" height="15" fill="rgb(229,68,48)"/><text x="70.0961%" y="175.50">c..</text></g><g><title>adt_sized_constraint (266,122 samples, 0.18%)</title><rect x="73.0933%" y="133" width="0.1798%" height="15" fill="rgb(252,8,32)"/><text x="73.3433%" y="143.50"></text></g><g><title>evaluate_obligation (473,924 samples, 0.32%)</title><rect x="72.9536%" y="149" width="0.3202%" height="15" fill="rgb(223,20,43)"/><text x="73.2036%" y="159.50"></text></g><g><title>param_env (316,792 samples, 0.21%)</title><rect x="73.3844%" y="149" width="0.2140%" height="15" fill="rgb(229,81,49)"/><text x="73.6344%" y="159.50"></text></g><g><title>analysis (108,451,399 samples, 73.27%)</title><rect x="0.5334%" y="213" width="73.2685%" height="15" fill="rgb(236,28,36)"/><text x="0.7834%" y="223.50">analysis</text></g><g><title>type_check_crate (66,961,470 samples, 45.24%)</title><rect x="28.5635%" y="197" width="45.2384%" height="15" fill="rgb(249,185,26)"/><text x="28.8135%" y="207.50">type_check_crate</text></g><g><title>wf_checking (6,068,657 samples, 4.10%)</title><rect x="69.7020%" y="181" width="4.0999%" height="15" fill="rgb(249,174,33)"/><text x="69.9520%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (2,803,359 samples, 1.89%)</title><rect x="71.9080%" y="165" width="1.8939%" height="15" fill="rgb(233,201,37)"/><text x="72.1580%" y="175.50">c..</text></g><g><title>codegen_crate (409,764 samples, 0.28%)</title><rect x="73.8093%" y="213" width="0.2768%" height="15" fill="rgb(221,78,26)"/><text x="74.0593%" y="223.50"></text></g><g><title>AST_validation (169,012 samples, 0.11%)</title><rect x="74.2309%" y="197" width="0.1142%" height="15" fill="rgb(250,127,30)"/><text x="74.4809%" y="207.50"></text></g><g><title>metadata_load_macro (211,354 samples, 0.14%)</title><rect x="88.0362%" y="165" width="0.1428%" height="15" fill="rgb(230,49,44)"/><text x="88.2862%" y="175.50"></text></g><g><title>metadata_register_crate (1,936,471 samples, 1.31%)</title><rect x="88.1790%" y="165" width="1.3083%" height="15" fill="rgb(229,67,23)"/><text x="88.4290%" y="175.50"></text></g><g><title>metadata_register_crate (663,378 samples, 0.45%)</title><rect x="89.0391%" y="149" width="0.4482%" height="15" fill="rgb(249,83,47)"/><text x="89.2891%" y="159.50"></text></g><g><title>macro_expand_crate (22,800,532 samples, 15.40%)</title><rect x="74.4737%" y="197" width="15.4038%" height="15" fill="rgb(215,43,3)"/><text x="74.7237%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (22,787,011 samples, 15.39%)</title><rect x="74.4829%" y="181" width="15.3946%" height="15" fill="rgb(238,154,13)"/><text x="74.7329%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (577,646 samples, 0.39%)</title><rect x="89.4873%" y="165" width="0.3903%" height="15" fill="rgb(219,56,2)"/><text x="89.7373%" y="175.50"></text></g><g><title>late_resolve_crate (1,859,251 samples, 1.26%)</title><rect x="90.0537%" y="181" width="1.2561%" height="15" fill="rgb(233,0,4)"/><text x="90.3037%" y="191.50"></text></g><g><title>configure_and_expand (25,639,204 samples, 17.32%)</title><rect x="74.0861%" y="213" width="17.3216%" height="15" fill="rgb(235,30,7)"/><text x="74.3361%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,179,515 samples, 1.47%)</title><rect x="89.9352%" y="197" width="1.4725%" height="15" fill="rgb(250,79,13)"/><text x="90.1852%" y="207.50"></text></g><g><title>drop_ast (266,033 samples, 0.18%)</title><rect x="91.4077%" y="213" width="0.1797%" height="15" fill="rgb(211,146,34)"/><text x="91.6577%" y="223.50"></text></g><g><title>early_lint_checks (474,485 samples, 0.32%)</title><rect x="91.5972%" y="213" width="0.3206%" height="15" fill="rgb(228,22,38)"/><text x="91.8472%" y="223.50"></text></g><g><title>free_global_ctxt (3,793,812 samples, 2.56%)</title><rect x="91.9177%" y="213" width="2.5631%" height="15" fill="rgb(235,168,5)"/><text x="92.1677%" y="223.50">fr..</text></g><g><title>mir_drops_elaborated_and_const_checked (660,617 samples, 0.45%)</title><rect x="95.7994%" y="181" width="0.4463%" height="15" fill="rgb(221,155,16)"/><text x="96.0494%" y="191.50"></text></g><g><title>optimized_mir (1,155,653 samples, 0.78%)</title><rect x="95.4663%" y="197" width="0.7807%" height="15" fill="rgb(215,215,53)"/><text x="95.7163%" y="207.50"></text></g><g><title>generate_crate_metadata (2,644,219 samples, 1.79%)</title><rect x="94.4808%" y="213" width="1.7864%" height="15" fill="rgb(223,4,10)"/><text x="94.7308%" y="223.50">g..</text></g><g><title>hir_lowering (3,394,318 samples, 2.29%)</title><rect x="96.2672%" y="213" width="2.2932%" height="15" fill="rgb(234,103,6)"/><text x="96.5172%" y="223.50">h..</text></g><g><title>parse_crate (443,075 samples, 0.30%)</title><rect x="98.5964%" y="213" width="0.2993%" height="15" fill="rgb(227,97,0)"/><text x="98.8464%" y="223.50"></text></g><g><title>prepare_outputs (206,952 samples, 0.14%)</title><rect x="98.9024%" y="213" width="0.1398%" height="15" fill="rgb(234,150,53)"/><text x="99.1524%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (939,051 samples, 0.63%)</title><rect x="99.0422%" y="213" width="0.6344%" height="15" fill="rgb(228,201,54)"/><text x="99.2922%" y="223.50"></text></g><g><title>all (148,019,047 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(222,22,37)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (148,019,047 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (373,654 samples, 0.25%)</title><rect x="99.7476%" y="213" width="0.2524%" height="15" fill="rgb(233,25,53)"/><text x="99.9976%" y="223.50"></text></g></svg></svg>