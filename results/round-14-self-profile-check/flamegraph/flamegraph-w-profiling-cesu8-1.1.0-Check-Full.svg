<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (110,832 samples, 0.14%)</title><rect x="8.3438%" y="117" width="0.1353%" height="15" fill="rgb(227,0,7)"/><text x="8.5938%" y="127.50"></text></g><g><title>item_attrs (131,553 samples, 0.16%)</title><rect x="8.7595%" y="85" width="0.1606%" height="15" fill="rgb(217,0,24)"/><text x="9.0095%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (127,393 samples, 0.16%)</title><rect x="8.7646%" y="69" width="0.1555%" height="15" fill="rgb(221,193,54)"/><text x="9.0146%" y="79.50"></text></g><g><title>codegen_fn_attrs (196,085 samples, 0.24%)</title><rect x="8.6928%" y="101" width="0.2393%" height="15" fill="rgb(248,212,6)"/><text x="8.9428%" y="111.50"></text></g><g><title>adt_drop_tys (116,430 samples, 0.14%)</title><rect x="10.6667%" y="69" width="0.1421%" height="15" fill="rgb(208,68,35)"/><text x="10.9167%" y="79.50"></text></g><g><title>is_copy_raw (251,413 samples, 0.31%)</title><rect x="10.8088%" y="69" width="0.3069%" height="15" fill="rgb(232,128,0)"/><text x="11.0588%" y="79.50"></text></g><g><title>evaluate_obligation (219,603 samples, 0.27%)</title><rect x="10.8476%" y="53" width="0.2680%" height="15" fill="rgb(207,160,47)"/><text x="11.0976%" y="63.50"></text></g><g><title>needs_drop_raw (411,983 samples, 0.50%)</title><rect x="10.6193%" y="85" width="0.5029%" height="15" fill="rgb(228,23,34)"/><text x="10.8693%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (83,781 samples, 0.10%)</title><rect x="11.2219%" y="69" width="0.1023%" height="15" fill="rgb(218,30,26)"/><text x="11.4719%" y="79.50"></text></g><g><title>impl_parent (212,404 samples, 0.26%)</title><rect x="11.6653%" y="53" width="0.2593%" height="15" fill="rgb(220,122,19)"/><text x="11.9153%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (146,233 samples, 0.18%)</title><rect x="11.7460%" y="37" width="0.1785%" height="15" fill="rgb(250,228,42)"/><text x="11.9960%" y="47.50"></text></g><g><title>specialization_graph_of (941,911 samples, 1.15%)</title><rect x="11.3279%" y="69" width="1.1497%" height="15" fill="rgb(240,193,28)"/><text x="11.5779%" y="79.50"></text></g><g><title>impl_trait_ref (453,086 samples, 0.55%)</title><rect x="11.9245%" y="53" width="0.5530%" height="15" fill="rgb(216,20,37)"/><text x="12.1745%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (379,444 samples, 0.46%)</title><rect x="12.0144%" y="37" width="0.4631%" height="15" fill="rgb(206,188,39)"/><text x="12.2644%" y="47.50"></text></g><g><title>resolve_instance (1,150,142 samples, 1.40%)</title><rect x="11.1222%" y="85" width="1.4038%" height="15" fill="rgb(217,207,13)"/><text x="11.3722%" y="95.50"></text></g><g><title>thir_body (530,483 samples, 0.65%)</title><rect x="12.5363%" y="85" width="0.6475%" height="15" fill="rgb(231,73,38)"/><text x="12.7863%" y="95.50"></text></g><g><title>mir_const (4,371,315 samples, 5.34%)</title><rect x="7.8543%" y="133" width="5.3356%" height="15" fill="rgb(225,20,46)"/><text x="8.1043%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (3,859,431 samples, 4.71%)</title><rect x="8.4791%" y="117" width="4.7108%" height="15" fill="rgb(210,31,41)"/><text x="8.7291%" y="127.50">unsaf..</text></g><g><title>mir_built (3,488,245 samples, 4.26%)</title><rect x="8.9322%" y="101" width="4.2577%" height="15" fill="rgb(221,200,47)"/><text x="9.1822%" y="111.50">mir_b..</text></g><g><title>thir_body (104,221 samples, 0.13%)</title><rect x="13.5962%" y="69" width="0.1272%" height="15" fill="rgb(226,26,5)"/><text x="13.8462%" y="79.50"></text></g><g><title>mir_promoted (5,229,808 samples, 6.38%)</title><rect x="7.3427%" y="149" width="6.3834%" height="15" fill="rgb(249,33,26)"/><text x="7.5927%" y="159.50">mir_prom..</text></g><g><title>mir_const_qualif (439,316 samples, 0.54%)</title><rect x="13.1899%" y="133" width="0.5362%" height="15" fill="rgb(235,183,28)"/><text x="13.4399%" y="143.50"></text></g><g><title>mir_const (371,666 samples, 0.45%)</title><rect x="13.2725%" y="117" width="0.4536%" height="15" fill="rgb(221,5,38)"/><text x="13.5225%" y="127.50"></text></g><g><title>unsafety_check_result (289,206 samples, 0.35%)</title><rect x="13.3731%" y="101" width="0.3530%" height="15" fill="rgb(247,18,42)"/><text x="13.6231%" y="111.50"></text></g><g><title>mir_built (244,044 samples, 0.30%)</title><rect x="13.4282%" y="85" width="0.2979%" height="15" fill="rgb(241,131,45)"/><text x="13.6782%" y="95.50"></text></g><g><title>type_op_normalize_fn_sig (199,605 samples, 0.24%)</title><rect x="13.8226%" y="149" width="0.2436%" height="15" fill="rgb(249,31,29)"/><text x="14.0726%" y="159.50"></text></g><g><title>normalize_projection_ty (123,774 samples, 0.15%)</title><rect x="13.9151%" y="133" width="0.1511%" height="15" fill="rgb(225,111,53)"/><text x="14.1651%" y="143.50"></text></g><g><title>type_op_prove_predicate (801,767 samples, 0.98%)</title><rect x="14.0819%" y="149" width="0.9786%" height="15" fill="rgb(238,160,17)"/><text x="14.3319%" y="159.50"></text></g><g><title>evaluate_obligation (85,271 samples, 0.10%)</title><rect x="14.9564%" y="133" width="0.1041%" height="15" fill="rgb(214,148,48)"/><text x="15.2064%" y="143.50"></text></g><g><title>MIR_borrow_checking (11,567,647 samples, 14.12%)</title><rect x="0.9460%" y="181" width="14.1193%" height="15" fill="rgb(232,36,49)"/><text x="1.1960%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (11,522,087 samples, 14.06%)</title><rect x="1.0016%" y="165" width="14.0637%" height="15" fill="rgb(209,103,24)"/><text x="1.2516%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (168,682 samples, 0.21%)</title><rect x="15.0653%" y="181" width="0.2059%" height="15" fill="rgb(229,88,8)"/><text x="15.3153%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (135,461 samples, 0.17%)</title><rect x="15.1058%" y="165" width="0.1653%" height="15" fill="rgb(213,181,19)"/><text x="15.3558%" y="175.50"></text></g><g><title>hir_module_items (110,191 samples, 0.13%)</title><rect x="15.2711%" y="181" width="0.1345%" height="15" fill="rgb(254,191,54)"/><text x="15.5211%" y="191.50"></text></g><g><title>should_inherit_track_caller (125,072 samples, 0.15%)</title><rect x="15.7453%" y="133" width="0.1527%" height="15" fill="rgb(241,83,37)"/><text x="15.9953%" y="143.50"></text></g><g><title>codegen_fn_attrs (256,643 samples, 0.31%)</title><rect x="15.6033%" y="149" width="0.3133%" height="15" fill="rgb(233,36,39)"/><text x="15.8533%" y="159.50"></text></g><g><title>check_mod_attrs (398,325 samples, 0.49%)</title><rect x="15.4305%" y="165" width="0.4862%" height="15" fill="rgb(226,3,54)"/><text x="15.6805%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (230,622 samples, 0.28%)</title><rect x="16.0318%" y="165" width="0.2815%" height="15" fill="rgb(245,192,40)"/><text x="16.2818%" y="175.50"></text></g><g><title>misc_checking_1 (780,668 samples, 0.95%)</title><rect x="15.4062%" y="181" width="0.9529%" height="15" fill="rgb(238,167,29)"/><text x="15.6562%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (245,633 samples, 0.30%)</title><rect x="16.3613%" y="165" width="0.2998%" height="15" fill="rgb(232,182,51)"/><text x="16.6113%" y="175.50"></text></g><g><title>check_mod_liveness (191,453 samples, 0.23%)</title><rect x="16.4275%" y="149" width="0.2337%" height="15" fill="rgb(231,60,39)"/><text x="16.6775%" y="159.50"></text></g><g><title>misc_checking_2 (531,956 samples, 0.65%)</title><rect x="16.3591%" y="181" width="0.6493%" height="15" fill="rgb(208,69,12)"/><text x="16.6091%" y="191.50"></text></g><g><title>match_checking (284,503 samples, 0.35%)</title><rect x="16.6611%" y="165" width="0.3473%" height="15" fill="rgb(235,93,37)"/><text x="16.9111%" y="175.50"></text></g><g><title>check_match (271,243 samples, 0.33%)</title><rect x="16.6773%" y="149" width="0.3311%" height="15" fill="rgb(213,116,39)"/><text x="16.9273%" y="159.50"></text></g><g><title>death_checking (650,027 samples, 0.79%)</title><rect x="17.1082%" y="165" width="0.7934%" height="15" fill="rgb(222,207,29)"/><text x="17.3582%" y="175.50"></text></g><g><title>item_attrs (490,575 samples, 0.60%)</title><rect x="17.3028%" y="149" width="0.5988%" height="15" fill="rgb(206,96,30)"/><text x="17.5528%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (489,025 samples, 0.60%)</title><rect x="17.3047%" y="133" width="0.5969%" height="15" fill="rgb(218,138,4)"/><text x="17.5547%" y="143.50"></text></g><g><title>eval_to_allocation_raw (209,042 samples, 0.26%)</title><rect x="18.5980%" y="133" width="0.2552%" height="15" fill="rgb(250,191,14)"/><text x="18.8480%" y="143.50"></text></g><g><title>eval_to_allocation_raw (205,352 samples, 0.25%)</title><rect x="18.6025%" y="117" width="0.2506%" height="15" fill="rgb(239,60,40)"/><text x="18.8525%" y="127.50"></text></g><g><title>param_env (87,360 samples, 0.11%)</title><rect x="18.9046%" y="133" width="0.1066%" height="15" fill="rgb(206,27,48)"/><text x="19.1546%" y="143.50"></text></g><g><title>crate_lints (1,947,281 samples, 2.38%)</title><rect x="17.9032%" y="149" width="2.3768%" height="15" fill="rgb(225,35,8)"/><text x="18.1532%" y="159.50">cr..</text></g><g><title>type_of (1,036,034 samples, 1.26%)</title><rect x="19.0154%" y="133" width="1.2646%" height="15" fill="rgb(250,213,24)"/><text x="19.2654%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (802,811 samples, 0.98%)</title><rect x="19.3001%" y="117" width="0.9799%" height="15" fill="rgb(247,123,22)"/><text x="19.5501%" y="127.50"></text></g><g><title>lint_checking (2,192,154 samples, 2.68%)</title><rect x="17.9016%" y="165" width="2.6757%" height="15" fill="rgb(231,138,38)"/><text x="18.1516%" y="175.50">li..</text></g><g><title>module_lints (243,563 samples, 0.30%)</title><rect x="20.2800%" y="149" width="0.2973%" height="15" fill="rgb(231,145,46)"/><text x="20.5300%" y="159.50"></text></g><g><title>lint_mod (240,433 samples, 0.29%)</title><rect x="20.2838%" y="133" width="0.2935%" height="15" fill="rgb(251,118,11)"/><text x="20.5338%" y="143.50"></text></g><g><title>privacy_access_levels (96,501 samples, 0.12%)</title><rect x="20.5773%" y="165" width="0.1178%" height="15" fill="rgb(217,147,25)"/><text x="20.8273%" y="175.50"></text></g><g><title>privacy_checking_modules (395,215 samples, 0.48%)</title><rect x="20.6951%" y="165" width="0.4824%" height="15" fill="rgb(247,81,37)"/><text x="20.9451%" y="175.50"></text></g><g><title>check_mod_privacy (392,865 samples, 0.48%)</title><rect x="20.6980%" y="149" width="0.4795%" height="15" fill="rgb(209,12,38)"/><text x="20.9480%" y="159.50"></text></g><g><title>misc_checking_3 (3,432,249 samples, 4.19%)</title><rect x="17.0084%" y="181" width="4.1894%" height="15" fill="rgb(227,1,9)"/><text x="17.2584%" y="191.50">misc_..</text></g><g><title>impl_trait_ref (154,730 samples, 0.19%)</title><rect x="21.7052%" y="85" width="0.1889%" height="15" fill="rgb(248,47,43)"/><text x="21.9552%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (135,950 samples, 0.17%)</title><rect x="21.7282%" y="69" width="0.1659%" height="15" fill="rgb(221,10,30)"/><text x="21.9782%" y="79.50"></text></g><g><title>adt_destructor (513,786 samples, 0.63%)</title><rect x="21.3021%" y="133" width="0.6271%" height="15" fill="rgb(210,229,1)"/><text x="21.5521%" y="143.50"></text></g><g><title>coherent_trait (506,466 samples, 0.62%)</title><rect x="21.3110%" y="117" width="0.6182%" height="15" fill="rgb(222,148,37)"/><text x="21.5610%" y="127.50"></text></g><g><title>specialization_graph_of (504,976 samples, 0.62%)</title><rect x="21.3128%" y="101" width="0.6164%" height="15" fill="rgb(234,67,33)"/><text x="21.5628%" y="111.50"></text></g><g><title>impl_parent (2,312,148 samples, 2.82%)</title><rect x="26.7220%" y="117" width="2.8222%" height="15" fill="rgb(247,98,35)"/><text x="26.9720%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,331,255 samples, 1.62%)</title><rect x="27.9192%" y="101" width="1.6249%" height="15" fill="rgb(247,138,52)"/><text x="28.1692%" y="111.50"></text></g><g><title>impl_trait_ref (4,934,383 samples, 6.02%)</title><rect x="29.5441%" y="117" width="6.0228%" height="15" fill="rgb(213,79,30)"/><text x="29.7941%" y="127.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,994,163 samples, 4.88%)</title><rect x="30.6917%" y="101" width="4.8752%" height="15" fill="rgb(246,177,23)"/><text x="30.9417%" y="111.50">metada..</text></g><g><title>coherent_trait (12,536,719 samples, 15.30%)</title><rect x="21.2605%" y="149" width="15.3021%" height="15" fill="rgb(230,62,27)"/><text x="21.5105%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (11,914,662 samples, 14.54%)</title><rect x="22.0198%" y="133" width="14.5429%" height="15" fill="rgb(216,154,8)"/><text x="22.2698%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (813,598 samples, 0.99%)</title><rect x="35.5696%" y="117" width="0.9931%" height="15" fill="rgb(244,35,45)"/><text x="35.8196%" y="127.50"></text></g><g><title>implementations_of_trait (207,623 samples, 0.25%)</title><rect x="36.3092%" y="101" width="0.2534%" height="15" fill="rgb(251,115,12)"/><text x="36.5592%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (173,783 samples, 0.21%)</title><rect x="36.3505%" y="85" width="0.2121%" height="15" fill="rgb(240,54,50)"/><text x="36.6005%" y="95.50"></text></g><g><title>coherence_checking (12,579,939 samples, 15.35%)</title><rect x="21.2397%" y="165" width="15.3549%" height="15" fill="rgb(233,84,52)"/><text x="21.4897%" y="175.50">coherence_checking</text></g><g><title>adt_sized_constraint (97,402 samples, 0.12%)</title><rect x="52.0443%" y="117" width="0.1189%" height="15" fill="rgb(207,117,47)"/><text x="52.2943%" y="127.50"></text></g><g><title>associated_item (444,920 samples, 0.54%)</title><rect x="52.3754%" y="101" width="0.5431%" height="15" fill="rgb(249,43,39)"/><text x="52.6254%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (346,618 samples, 0.42%)</title><rect x="52.4954%" y="85" width="0.4231%" height="15" fill="rgb(209,38,44)"/><text x="52.7454%" y="95.50"></text></g><g><title>associated_items (639,671 samples, 0.78%)</title><rect x="52.1710%" y="117" width="0.7808%" height="15" fill="rgb(236,212,23)"/><text x="52.4210%" y="127.50"></text></g><g><title>adt_dtorck_constraint (105,871 samples, 0.13%)</title><rect x="53.3084%" y="69" width="0.1292%" height="15" fill="rgb(242,79,21)"/><text x="53.5584%" y="79.50"></text></g><g><title>adt_dtorck_constraint (153,182 samples, 0.19%)</title><rect x="53.2646%" y="85" width="0.1870%" height="15" fill="rgb(211,96,35)"/><text x="53.5146%" y="95.50"></text></g><g><title>adt_dtorck_constraint (262,744 samples, 0.32%)</title><rect x="53.1587%" y="101" width="0.3207%" height="15" fill="rgb(253,215,40)"/><text x="53.4087%" y="111.50"></text></g><g><title>dropck_outlives (408,844 samples, 0.50%)</title><rect x="53.0069%" y="117" width="0.4990%" height="15" fill="rgb(211,81,21)"/><text x="53.2569%" y="127.50"></text></g><g><title>generics_of (960,952 samples, 1.17%)</title><rect x="57.3996%" y="101" width="1.1729%" height="15" fill="rgb(208,190,38)"/><text x="57.6496%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (775,440 samples, 0.95%)</title><rect x="57.6260%" y="85" width="0.9465%" height="15" fill="rgb(235,213,38)"/><text x="57.8760%" y="95.50"></text></g><g><title>impl_polarity (86,401 samples, 0.11%)</title><rect x="58.6628%" y="101" width="0.1055%" height="15" fill="rgb(237,122,38)"/><text x="58.9128%" y="111.50"></text></g><g><title>impl_trait_ref (877,003 samples, 1.07%)</title><rect x="58.7683%" y="101" width="1.0705%" height="15" fill="rgb(244,218,35)"/><text x="59.0183%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (698,280 samples, 0.85%)</title><rect x="58.9864%" y="85" width="0.8523%" height="15" fill="rgb(240,68,47)"/><text x="59.2364%" y="95.50"></text></g><g><title>opt_def_kind (94,761 samples, 0.12%)</title><rect x="60.0427%" y="85" width="0.1157%" height="15" fill="rgb(210,16,53)"/><text x="60.2927%" y="95.50"></text></g><g><title>explicit_predicates_of (108,510 samples, 0.13%)</title><rect x="60.2936%" y="69" width="0.1324%" height="15" fill="rgb(235,124,12)"/><text x="60.5436%" y="79.50"></text></g><g><title>predicates_of (512,763 samples, 0.63%)</title><rect x="59.8913%" y="101" width="0.6259%" height="15" fill="rgb(224,169,11)"/><text x="60.1413%" y="111.50"></text></g><g><title>predicates_defined_on (293,910 samples, 0.36%)</title><rect x="60.1584%" y="85" width="0.3587%" height="15" fill="rgb(250,166,2)"/><text x="60.4084%" y="95.50"></text></g><g><title>specializes (1,352,054 samples, 1.65%)</title><rect x="60.5172%" y="101" width="1.6503%" height="15" fill="rgb(242,216,29)"/><text x="60.7672%" y="111.50"></text></g><g><title>param_env (804,399 samples, 0.98%)</title><rect x="61.1856%" y="85" width="0.9818%" height="15" fill="rgb(230,116,27)"/><text x="61.4356%" y="95.50"></text></g><g><title>def_span (349,826 samples, 0.43%)</title><rect x="61.7405%" y="69" width="0.4270%" height="15" fill="rgb(228,99,48)"/><text x="61.9905%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (309,966 samples, 0.38%)</title><rect x="61.7891%" y="53" width="0.3783%" height="15" fill="rgb(253,11,6)"/><text x="62.0391%" y="63.50"></text></g><g><title>trait_impls_of (525,744 samples, 0.64%)</title><rect x="62.1837%" y="101" width="0.6417%" height="15" fill="rgb(247,143,39)"/><text x="62.4337%" y="111.50"></text></g><g><title>implementations_of_trait (209,132 samples, 0.26%)</title><rect x="62.5702%" y="85" width="0.2553%" height="15" fill="rgb(236,97,10)"/><text x="62.8202%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (147,062 samples, 0.18%)</title><rect x="62.6459%" y="69" width="0.1795%" height="15" fill="rgb(233,208,19)"/><text x="62.8959%" y="79.50"></text></g><g><title>evaluate_obligation (7,668,044 samples, 9.36%)</title><rect x="53.5060%" y="117" width="9.3595%" height="15" fill="rgb(216,164,2)"/><text x="53.7560%" y="127.50">evaluate_obli..</text></g><g><title>fn_sig (99,991 samples, 0.12%)</title><rect x="62.8906%" y="117" width="0.1220%" height="15" fill="rgb(220,129,5)"/><text x="63.1406%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (86,331 samples, 0.11%)</title><rect x="62.9073%" y="101" width="0.1054%" height="15" fill="rgb(242,17,10)"/><text x="63.1573%" y="111.50"></text></g><g><title>generics_of (667,526 samples, 0.81%)</title><rect x="63.0127%" y="117" width="0.8148%" height="15" fill="rgb(242,107,0)"/><text x="63.2627%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (512,962 samples, 0.63%)</title><rect x="63.2013%" y="101" width="0.6261%" height="15" fill="rgb(251,28,31)"/><text x="63.4513%" y="111.50"></text></g><g><title>associated_item (90,660 samples, 0.11%)</title><rect x="64.1949%" y="85" width="0.1107%" height="15" fill="rgb(233,223,10)"/><text x="64.4449%" y="95.50"></text></g><g><title>impl_item_implementor_ids (405,933 samples, 0.50%)</title><rect x="63.8274%" y="117" width="0.4955%" height="15" fill="rgb(215,21,27)"/><text x="64.0774%" y="127.50"></text></g><g><title>associated_items (381,733 samples, 0.47%)</title><rect x="63.8570%" y="101" width="0.4659%" height="15" fill="rgb(232,23,21)"/><text x="64.1070%" y="111.50"></text></g><g><title>item_attrs (129,452 samples, 0.16%)</title><rect x="64.4322%" y="117" width="0.1580%" height="15" fill="rgb(244,5,23)"/><text x="64.6822%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (124,612 samples, 0.15%)</title><rect x="64.4382%" y="101" width="0.1521%" height="15" fill="rgb(226,81,46)"/><text x="64.6882%" y="111.50"></text></g><g><title>evaluate_obligation (150,432 samples, 0.18%)</title><rect x="64.8325%" y="101" width="0.1836%" height="15" fill="rgb(247,70,30)"/><text x="65.0825%" y="111.50"></text></g><g><title>method_autoderef_steps (321,485 samples, 0.39%)</title><rect x="64.6346%" y="117" width="0.3924%" height="15" fill="rgb(212,68,19)"/><text x="64.8846%" y="127.50"></text></g><g><title>explicit_predicates_of (94,240 samples, 0.12%)</title><rect x="65.3974%" y="85" width="0.1150%" height="15" fill="rgb(240,187,13)"/><text x="65.6474%" y="95.50"></text></g><g><title>predicates_of (354,361 samples, 0.43%)</title><rect x="65.1355%" y="117" width="0.4325%" height="15" fill="rgb(223,113,26)"/><text x="65.3855%" y="127.50"></text></g><g><title>predicates_defined_on (235,221 samples, 0.29%)</title><rect x="65.2809%" y="101" width="0.2871%" height="15" fill="rgb(206,192,2)"/><text x="65.5309%" y="111.50"></text></g><g><title>specializes (100,361 samples, 0.12%)</title><rect x="65.5916%" y="117" width="0.1225%" height="15" fill="rgb(241,108,4)"/><text x="65.8416%" y="127.50"></text></g><g><title>type_of (82,590 samples, 0.10%)</title><rect x="65.7359%" y="117" width="0.1008%" height="15" fill="rgb(247,173,49)"/><text x="65.9859%" y="127.50"></text></g><g><title>item_bodies_checking (23,992,865 samples, 29.29%)</title><rect x="36.6123%" y="165" width="29.2853%" height="15" fill="rgb(224,114,35)"/><text x="36.8623%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,990,065 samples, 29.28%)</title><rect x="36.6157%" y="149" width="29.2819%" height="15" fill="rgb(245,159,27)"/><text x="36.8657%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,957,615 samples, 29.24%)</title><rect x="36.6554%" y="133" width="29.2423%" height="15" fill="rgb(245,172,44)"/><text x="36.9054%" y="143.50">typeck</text></g><g><title>typeck (204,092 samples, 0.25%)</title><rect x="66.1909%" y="133" width="0.2491%" height="15" fill="rgb(236,23,11)"/><text x="66.4409%" y="143.50"></text></g><g><title>item_types_checking (451,295 samples, 0.55%)</title><rect x="65.8976%" y="165" width="0.5508%" height="15" fill="rgb(205,117,38)"/><text x="66.1476%" y="175.50"></text></g><g><title>check_mod_item_types (448,405 samples, 0.55%)</title><rect x="65.9012%" y="149" width="0.5473%" height="15" fill="rgb(237,72,25)"/><text x="66.1512%" y="159.50"></text></g><g><title>fn_sig (509,906 samples, 0.62%)</title><rect x="66.5996%" y="133" width="0.6224%" height="15" fill="rgb(244,70,9)"/><text x="66.8496%" y="143.50"></text></g><g><title>named_region_map (255,174 samples, 0.31%)</title><rect x="67.2762%" y="117" width="0.3115%" height="15" fill="rgb(217,125,39)"/><text x="67.5262%" y="127.50"></text></g><g><title>resolve_lifetimes (242,324 samples, 0.30%)</title><rect x="67.2919%" y="101" width="0.2958%" height="15" fill="rgb(235,36,10)"/><text x="67.5419%" y="111.50"></text></g><g><title>generics_of (311,425 samples, 0.38%)</title><rect x="67.2220%" y="133" width="0.3801%" height="15" fill="rgb(251,123,47)"/><text x="67.4720%" y="143.50"></text></g><g><title>predicates_of (119,801 samples, 0.15%)</title><rect x="67.6499%" y="133" width="0.1462%" height="15" fill="rgb(221,13,13)"/><text x="67.8999%" y="143.50"></text></g><g><title>predicates_defined_on (103,261 samples, 0.13%)</title><rect x="67.6701%" y="117" width="0.1260%" height="15" fill="rgb(238,131,9)"/><text x="67.9201%" y="127.50"></text></g><g><title>type_collecting (1,175,763 samples, 1.44%)</title><rect x="66.4501%" y="165" width="1.4351%" height="15" fill="rgb(211,50,8)"/><text x="66.7001%" y="175.50"></text></g><g><title>collect_mod_item_types (1,167,983 samples, 1.43%)</title><rect x="66.4596%" y="149" width="1.4256%" height="15" fill="rgb(245,182,24)"/><text x="66.7096%" y="159.50"></text></g><g><title>evaluate_obligation (146,342 samples, 0.18%)</title><rect x="68.3027%" y="133" width="0.1786%" height="15" fill="rgb(242,14,37)"/><text x="68.5527%" y="143.50"></text></g><g><title>evaluate_obligation (155,902 samples, 0.19%)</title><rect x="68.7020%" y="117" width="0.1903%" height="15" fill="rgb(246,228,12)"/><text x="68.9520%" y="127.50"></text></g><g><title>object_safety_violations (470,795 samples, 0.57%)</title><rect x="68.5552%" y="133" width="0.5746%" height="15" fill="rgb(213,55,15)"/><text x="68.8052%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,031,643 samples, 1.26%)</title><rect x="67.9721%" y="149" width="1.2592%" height="15" fill="rgb(209,9,3)"/><text x="68.2221%" y="159.50"></text></g><g><title>adt_sized_constraint (141,242 samples, 0.17%)</title><rect x="70.3327%" y="117" width="0.1724%" height="15" fill="rgb(230,59,30)"/><text x="70.5827%" y="127.50"></text></g><g><title>evaluate_obligation (433,393 samples, 0.53%)</title><rect x="70.0795%" y="133" width="0.5290%" height="15" fill="rgb(209,121,21)"/><text x="70.3295%" y="143.50"></text></g><g><title>implied_outlives_bounds (89,030 samples, 0.11%)</title><rect x="70.6355%" y="133" width="0.1087%" height="15" fill="rgb(220,109,13)"/><text x="70.8855%" y="143.50"></text></g><g><title>param_env (93,760 samples, 0.11%)</title><rect x="70.7453%" y="133" width="0.1144%" height="15" fill="rgb(232,18,1)"/><text x="70.9953%" y="143.50"></text></g><g><title>predicates_of (85,861 samples, 0.10%)</title><rect x="70.8597%" y="133" width="0.1048%" height="15" fill="rgb(215,41,42)"/><text x="71.1097%" y="143.50"></text></g><g><title>region_scope_tree (196,985 samples, 0.24%)</title><rect x="70.9645%" y="133" width="0.2404%" height="15" fill="rgb(224,123,36)"/><text x="71.2145%" y="143.50"></text></g><g><title>analysis (57,793,179 samples, 70.54%)</title><rect x="0.7023%" y="197" width="70.5415%" height="15" fill="rgb(240,125,3)"/><text x="0.9523%" y="207.50">analysis</text></g><g><title>type_check_crate (41,001,703 samples, 50.05%)</title><rect x="21.1977%" y="181" width="50.0460%" height="15" fill="rgb(205,98,50)"/><text x="21.4477%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,748,630 samples, 3.35%)</title><rect x="67.8889%" y="165" width="3.3549%" height="15" fill="rgb(205,185,37)"/><text x="68.1389%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (1,648,767 samples, 2.01%)</title><rect x="69.2313%" y="149" width="2.0125%" height="15" fill="rgb(238,207,15)"/><text x="69.4813%" y="159.50">c..</text></g><g><title>codegen_crate (361,514 samples, 0.44%)</title><rect x="71.2558%" y="197" width="0.4413%" height="15" fill="rgb(213,199,42)"/><text x="71.5058%" y="207.50"></text></g><g><title>metadata_load_macro (126,100 samples, 0.15%)</title><rect x="82.7171%" y="149" width="0.1539%" height="15" fill="rgb(235,201,11)"/><text x="82.9671%" y="159.50"></text></g><g><title>metadata_register_crate (2,064,723 samples, 2.52%)</title><rect x="82.8711%" y="149" width="2.5202%" height="15" fill="rgb(207,46,11)"/><text x="83.1211%" y="159.50">me..</text></g><g><title>metadata_register_crate (744,051 samples, 0.91%)</title><rect x="84.4830%" y="133" width="0.9082%" height="15" fill="rgb(241,35,35)"/><text x="84.7330%" y="143.50"></text></g><g><title>macro_expand_crate (10,898,810 samples, 13.30%)</title><rect x="72.1247%" y="181" width="13.3029%" height="15" fill="rgb(243,32,47)"/><text x="72.3747%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (10,882,200 samples, 13.28%)</title><rect x="72.1450%" y="165" width="13.2826%" height="15" fill="rgb(247,202,23)"/><text x="72.3950%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (192,813 samples, 0.24%)</title><rect x="85.4316%" y="181" width="0.2353%" height="15" fill="rgb(219,102,11)"/><text x="85.6816%" y="191.50"></text></g><g><title>finalize_macro_resolutions (109,891 samples, 0.13%)</title><rect x="85.6962%" y="165" width="0.1341%" height="15" fill="rgb(243,110,44)"/><text x="85.9462%" y="175.50"></text></g><g><title>late_resolve_crate (1,071,832 samples, 1.31%)</title><rect x="85.8304%" y="165" width="1.3083%" height="15" fill="rgb(222,74,54)"/><text x="86.0804%" y="175.50"></text></g><g><title>configure_and_expand (12,708,470 samples, 15.51%)</title><rect x="71.6971%" y="197" width="15.5118%" height="15" fill="rgb(216,99,12)"/><text x="71.9471%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,263,274 samples, 1.54%)</title><rect x="85.6669%" y="181" width="1.5419%" height="15" fill="rgb(226,22,26)"/><text x="85.9169%" y="191.50"></text></g><g><title>drop_ast (107,721 samples, 0.13%)</title><rect x="87.2088%" y="197" width="0.1315%" height="15" fill="rgb(217,163,10)"/><text x="87.4588%" y="207.50"></text></g><g><title>early_lint_checks (709,368 samples, 0.87%)</title><rect x="87.3549%" y="197" width="0.8658%" height="15" fill="rgb(213,25,53)"/><text x="87.6049%" y="207.50"></text></g><g><title>free_global_ctxt (3,772,241 samples, 4.60%)</title><rect x="88.2208%" y="197" width="4.6043%" height="15" fill="rgb(252,105,26)"/><text x="88.4708%" y="207.50">free_..</text></g><g><title>generate_crate_metadata (611,317 samples, 0.75%)</title><rect x="92.8251%" y="197" width="0.7462%" height="15" fill="rgb(220,39,43)"/><text x="93.0751%" y="207.50"></text></g><g><title>hir_lowering (1,181,043 samples, 1.44%)</title><rect x="93.5713%" y="197" width="1.4416%" height="15" fill="rgb(229,68,48)"/><text x="93.8213%" y="207.50"></text></g><g><title>parse_crate (2,571,669 samples, 3.14%)</title><rect x="95.0698%" y="197" width="3.1389%" height="15" fill="rgb(252,8,32)"/><text x="95.3198%" y="207.50">par..</text></g><g><title>prepare_outputs (189,533 samples, 0.23%)</title><rect x="98.2168%" y="197" width="0.2313%" height="15" fill="rgb(223,20,43)"/><text x="98.4668%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (878,010 samples, 1.07%)</title><rect x="98.4481%" y="197" width="1.0717%" height="15" fill="rgb(229,81,49)"/><text x="98.6981%" y="207.50"></text></g><g><title>setup_global_ctxt (81,941 samples, 0.10%)</title><rect x="99.5330%" y="197" width="0.1000%" height="15" fill="rgb(236,28,36)"/><text x="99.7830%" y="207.50"></text></g><g><title>all (81,927,955 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (81,927,955 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (300,653 samples, 0.37%)</title><rect x="99.6330%" y="197" width="0.3670%" height="15" fill="rgb(233,201,37)"/><text x="99.8830%" y="207.50"></text></g></svg></svg>