<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,400,425 samples, 0.24%)</title><rect x="16.4656%" y="117" width="0.2388%" height="15" fill="rgb(227,0,7)"/><text x="16.7156%" y="127.50"></text></g><g><title>item_attrs (1,085,500 samples, 0.19%)</title><rect x="17.2521%" y="85" width="0.1851%" height="15" fill="rgb(217,0,24)"/><text x="17.5021%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,042,010 samples, 0.18%)</title><rect x="17.2596%" y="69" width="0.1777%" height="15" fill="rgb(221,193,54)"/><text x="17.5096%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,529,657 samples, 0.26%)</title><rect x="17.1896%" y="101" width="0.2608%" height="15" fill="rgb(248,212,6)"/><text x="17.4396%" y="111.50"></text></g><g><title>adt_drop_tys (591,386 samples, 0.10%)</title><rect x="20.8145%" y="37" width="0.1008%" height="15" fill="rgb(208,68,35)"/><text x="21.0645%" y="47.50"></text></g><g><title>adt_drop_tys (848,190 samples, 0.14%)</title><rect x="20.8079%" y="53" width="0.1446%" height="15" fill="rgb(232,128,0)"/><text x="21.0579%" y="63.50"></text></g><g><title>adt_drop_tys (1,686,481 samples, 0.29%)</title><rect x="20.7842%" y="69" width="0.2876%" height="15" fill="rgb(207,160,47)"/><text x="21.0342%" y="79.50"></text></g><g><title>is_copy_raw (6,032,794 samples, 1.03%)</title><rect x="21.0717%" y="69" width="1.0286%" height="15" fill="rgb(228,23,34)"/><text x="21.3217%" y="79.50"></text></g><g><title>evaluate_obligation (5,043,434 samples, 0.86%)</title><rect x="21.2404%" y="53" width="0.8600%" height="15" fill="rgb(218,30,26)"/><text x="21.4904%" y="63.50"></text></g><g><title>needs_drop_raw (8,657,989 samples, 1.48%)</title><rect x="20.6408%" y="85" width="1.4763%" height="15" fill="rgb(220,122,19)"/><text x="20.8908%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,329,313 samples, 0.23%)</title><rect x="22.2704%" y="69" width="0.2267%" height="15" fill="rgb(250,228,42)"/><text x="22.5204%" y="79.50"></text></g><g><title>specialization_graph_of (2,352,117 samples, 0.40%)</title><rect x="22.5387%" y="69" width="0.4011%" height="15" fill="rgb(240,193,28)"/><text x="22.7887%" y="79.50"></text></g><g><title>impl_trait_ref (1,140,483 samples, 0.19%)</title><rect x="22.7453%" y="53" width="0.1945%" height="15" fill="rgb(216,20,37)"/><text x="22.9953%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (978,512 samples, 0.17%)</title><rect x="22.7729%" y="37" width="0.1668%" height="15" fill="rgb(206,188,39)"/><text x="23.0229%" y="47.50"></text></g><g><title>resolve_instance (5,125,719 samples, 0.87%)</title><rect x="22.1171%" y="85" width="0.8740%" height="15" fill="rgb(217,207,13)"/><text x="22.3671%" y="95.50"></text></g><g><title>thir_body (7,185,130 samples, 1.23%)</title><rect x="23.0116%" y="85" width="1.2251%" height="15" fill="rgb(231,73,38)"/><text x="23.2616%" y="95.50"></text></g><g><title>mir_const (50,582,378 samples, 8.62%)</title><rect x="15.6293%" y="133" width="8.6248%" height="15" fill="rgb(225,20,46)"/><text x="15.8793%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (44,277,570 samples, 7.55%)</title><rect x="16.7043%" y="117" width="7.5497%" height="15" fill="rgb(210,31,41)"/><text x="16.9543%" y="127.50">unsafety_c..</text></g><g><title>mir_built (39,902,122 samples, 6.80%)</title><rect x="17.4504%" y="101" width="6.8037%" height="15" fill="rgb(221,200,47)"/><text x="17.7004%" y="111.50">mir_built</text></g><g><title>mir_promoted (56,411,171 samples, 9.62%)</title><rect x="14.7351%" y="149" width="9.6186%" height="15" fill="rgb(226,26,5)"/><text x="14.9851%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,985,741 samples, 0.51%)</title><rect x="24.3542%" y="149" width="0.5091%" height="15" fill="rgb(249,33,26)"/><text x="24.6042%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,456,439 samples, 0.42%)</title><rect x="24.8633%" y="149" width="0.4188%" height="15" fill="rgb(235,183,28)"/><text x="25.1133%" y="159.50"></text></g><g><title>normalize_projection_ty (1,659,403 samples, 0.28%)</title><rect x="24.9992%" y="133" width="0.2829%" height="15" fill="rgb(221,5,38)"/><text x="25.2492%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,564,291 samples, 0.27%)</title><rect x="25.2821%" y="149" width="0.2667%" height="15" fill="rgb(247,18,42)"/><text x="25.5321%" y="159.50"></text></g><g><title>normalize_projection_ty (1,088,706 samples, 0.19%)</title><rect x="25.3632%" y="133" width="0.1856%" height="15" fill="rgb(241,131,45)"/><text x="25.6132%" y="143.50"></text></g><g><title>type_op_prove_predicate (14,166,865 samples, 2.42%)</title><rect x="25.5916%" y="149" width="2.4156%" height="15" fill="rgb(249,31,29)"/><text x="25.8416%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (161,647,094 samples, 27.56%)</title><rect x="0.4499%" y="181" width="27.5624%" height="15" fill="rgb(225,111,53)"/><text x="0.6999%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (160,974,795 samples, 27.45%)</title><rect x="0.5645%" y="165" width="27.4477%" height="15" fill="rgb(238,160,17)"/><text x="0.8145%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (1,089,080 samples, 0.19%)</title><rect x="28.0878%" y="181" width="0.1857%" height="15" fill="rgb(214,148,48)"/><text x="28.3378%" y="191.50"></text></g><g><title>codegen_fn_attrs (992,774 samples, 0.17%)</title><rect x="28.4985%" y="149" width="0.1693%" height="15" fill="rgb(232,36,49)"/><text x="28.7485%" y="159.50"></text></g><g><title>should_inherit_track_caller (827,000 samples, 0.14%)</title><rect x="28.5268%" y="133" width="0.1410%" height="15" fill="rgb(209,103,24)"/><text x="28.7768%" y="143.50"></text></g><g><title>check_mod_attrs (2,255,225 samples, 0.38%)</title><rect x="28.2832%" y="165" width="0.3845%" height="15" fill="rgb(229,88,8)"/><text x="28.5332%" y="175.50"></text></g><g><title>check_mod_const_bodies (601,116 samples, 0.10%)</title><rect x="28.6678%" y="165" width="0.1025%" height="15" fill="rgb(213,181,19)"/><text x="28.9178%" y="175.50"></text></g><g><title>lookup_deprecation_entry (676,937 samples, 0.12%)</title><rect x="28.9698%" y="149" width="0.1154%" height="15" fill="rgb(254,191,54)"/><text x="29.2198%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,610,778 samples, 0.27%)</title><rect x="28.8419%" y="165" width="0.2747%" height="15" fill="rgb(241,83,37)"/><text x="29.0919%" y="175.50"></text></g><g><title>misc_checking_1 (5,185,848 samples, 0.88%)</title><rect x="28.2736%" y="181" width="0.8842%" height="15" fill="rgb(233,36,39)"/><text x="28.5236%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (3,116,295 samples, 0.53%)</title><rect x="29.1582%" y="165" width="0.5314%" height="15" fill="rgb(226,3,54)"/><text x="29.4082%" y="175.50"></text></g><g><title>check_mod_liveness (2,546,967 samples, 0.43%)</title><rect x="29.2553%" y="149" width="0.4343%" height="15" fill="rgb(245,192,40)"/><text x="29.5053%" y="159.50"></text></g><g><title>type_uninhabited_from (815,505 samples, 0.14%)</title><rect x="29.5505%" y="133" width="0.1391%" height="15" fill="rgb(238,167,29)"/><text x="29.8005%" y="143.50"></text></g><g><title>type_uninhabited_from (632,325 samples, 0.11%)</title><rect x="29.5818%" y="117" width="0.1078%" height="15" fill="rgb(232,182,51)"/><text x="29.8318%" y="127.50"></text></g><g><title>misc_checking_2 (7,612,114 samples, 1.30%)</title><rect x="29.1579%" y="181" width="1.2979%" height="15" fill="rgb(231,60,39)"/><text x="29.4079%" y="191.50"></text></g><g><title>match_checking (4,493,579 samples, 0.77%)</title><rect x="29.6896%" y="165" width="0.7662%" height="15" fill="rgb(208,69,12)"/><text x="29.9396%" y="175.50"></text></g><g><title>check_match (4,316,794 samples, 0.74%)</title><rect x="29.7197%" y="149" width="0.7361%" height="15" fill="rgb(235,93,37)"/><text x="29.9697%" y="159.50"></text></g><g><title>check_private_in_public (1,250,464 samples, 0.21%)</title><rect x="30.4580%" y="165" width="0.2132%" height="15" fill="rgb(213,116,39)"/><text x="30.7080%" y="175.50"></text></g><g><title>death_checking (2,317,276 samples, 0.40%)</title><rect x="30.6712%" y="165" width="0.3951%" height="15" fill="rgb(222,207,29)"/><text x="30.9212%" y="175.50"></text></g><g><title>explicit_predicates_of (629,978 samples, 0.11%)</title><rect x="31.7956%" y="85" width="0.1074%" height="15" fill="rgb(206,96,30)"/><text x="32.0456%" y="95.50"></text></g><g><title>param_env (2,067,020 samples, 0.35%)</title><rect x="31.5570%" y="133" width="0.3524%" height="15" fill="rgb(218,138,4)"/><text x="31.8070%" y="143.50"></text></g><g><title>predicates_of (1,036,923 samples, 0.18%)</title><rect x="31.7327%" y="117" width="0.1768%" height="15" fill="rgb(250,191,14)"/><text x="31.9827%" y="127.50"></text></g><g><title>predicates_defined_on (882,921 samples, 0.15%)</title><rect x="31.7589%" y="101" width="0.1505%" height="15" fill="rgb(239,60,40)"/><text x="32.0089%" y="111.50"></text></g><g><title>crate_lints (6,621,603 samples, 1.13%)</title><rect x="31.0668%" y="149" width="1.1290%" height="15" fill="rgb(206,27,48)"/><text x="31.3168%" y="159.50"></text></g><g><title>type_of (1,362,033 samples, 0.23%)</title><rect x="31.9636%" y="133" width="0.2322%" height="15" fill="rgb(225,35,8)"/><text x="32.2136%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,090,433 samples, 0.19%)</title><rect x="32.0100%" y="117" width="0.1859%" height="15" fill="rgb(250,213,24)"/><text x="32.2600%" y="127.50"></text></g><g><title>lint_checking (10,302,335 samples, 1.76%)</title><rect x="31.0664%" y="165" width="1.7566%" height="15" fill="rgb(247,123,22)"/><text x="31.3164%" y="175.50"></text></g><g><title>module_lints (3,677,942 samples, 0.63%)</title><rect x="32.1959%" y="149" width="0.6271%" height="15" fill="rgb(231,138,38)"/><text x="32.4459%" y="159.50"></text></g><g><title>lint_mod (3,659,082 samples, 0.62%)</title><rect x="32.1991%" y="133" width="0.6239%" height="15" fill="rgb(231,145,46)"/><text x="32.4491%" y="143.50"></text></g><g><title>layout_of (619,457 samples, 0.11%)</title><rect x="32.7174%" y="117" width="0.1056%" height="15" fill="rgb(251,118,11)"/><text x="32.9674%" y="127.50"></text></g><g><title>privacy_access_levels (2,669,889 samples, 0.46%)</title><rect x="32.8230%" y="165" width="0.4552%" height="15" fill="rgb(217,147,25)"/><text x="33.0730%" y="175.50"></text></g><g><title>privacy_checking_modules (5,623,002 samples, 0.96%)</title><rect x="33.2783%" y="165" width="0.9588%" height="15" fill="rgb(247,81,37)"/><text x="33.5283%" y="175.50"></text></g><g><title>check_mod_privacy (5,607,881 samples, 0.96%)</title><rect x="33.2808%" y="149" width="0.9562%" height="15" fill="rgb(209,12,38)"/><text x="33.5308%" y="159.50"></text></g><g><title>misc_checking_3 (22,233,867 samples, 3.79%)</title><rect x="30.4558%" y="181" width="3.7911%" height="15" fill="rgb(227,1,9)"/><text x="30.7058%" y="191.50">misc..</text></g><g><title>impl_parent (3,440,140 samples, 0.59%)</title><rect x="35.5532%" y="117" width="0.5866%" height="15" fill="rgb(248,47,43)"/><text x="35.8032%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,988,617 samples, 0.34%)</title><rect x="35.8007%" y="101" width="0.3391%" height="15" fill="rgb(221,10,30)"/><text x="36.0507%" y="111.50"></text></g><g><title>impl_trait_ref (7,586,183 samples, 1.29%)</title><rect x="36.1399%" y="117" width="1.2935%" height="15" fill="rgb(210,229,1)"/><text x="36.3899%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,970,117 samples, 1.02%)</title><rect x="36.4155%" y="101" width="1.0180%" height="15" fill="rgb(222,148,37)"/><text x="36.6655%" y="111.50"></text></g><g><title>trait_impls_of (1,543,399 samples, 0.26%)</title><rect x="37.4520%" y="117" width="0.2632%" height="15" fill="rgb(234,67,33)"/><text x="37.7020%" y="127.50"></text></g><g><title>coherent_trait (19,922,611 samples, 3.40%)</title><rect x="34.3185%" y="149" width="3.3970%" height="15" fill="rgb(247,98,35)"/><text x="34.5685%" y="159.50">coh..</text></g><g><title>specialization_graph_of (19,197,582 samples, 3.27%)</title><rect x="34.4421%" y="133" width="3.2734%" height="15" fill="rgb(247,138,52)"/><text x="34.6921%" y="143.50">spe..</text></g><g><title>coherence_checking (20,197,144 samples, 3.44%)</title><rect x="34.3124%" y="165" width="3.4438%" height="15" fill="rgb(213,79,30)"/><text x="34.5624%" y="175.50">coh..</text></g><g><title>associated_item (1,453,314 samples, 0.25%)</title><rect x="61.8400%" y="101" width="0.2478%" height="15" fill="rgb(246,177,23)"/><text x="62.0900%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,149,892 samples, 0.20%)</title><rect x="61.8918%" y="85" width="0.1961%" height="15" fill="rgb(230,62,27)"/><text x="62.1418%" y="95.50"></text></g><g><title>associated_items (2,323,813 samples, 0.40%)</title><rect x="61.7101%" y="117" width="0.3962%" height="15" fill="rgb(216,154,8)"/><text x="61.9601%" y="127.50"></text></g><g><title>adt_dtorck_constraint (701,217 samples, 0.12%)</title><rect x="62.6540%" y="85" width="0.1196%" height="15" fill="rgb(244,35,45)"/><text x="62.9040%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,184,051 samples, 0.20%)</title><rect x="62.5901%" y="101" width="0.2019%" height="15" fill="rgb(251,115,12)"/><text x="62.8401%" y="111.50"></text></g><g><title>dropck_outlives (4,442,515 samples, 0.76%)</title><rect x="62.1580%" y="117" width="0.7575%" height="15" fill="rgb(240,54,50)"/><text x="62.4080%" y="127.50"></text></g><g><title>normalize_projection_ty (719,769 samples, 0.12%)</title><rect x="62.7928%" y="101" width="0.1227%" height="15" fill="rgb(233,84,52)"/><text x="63.0428%" y="111.50"></text></g><g><title>eval_to_allocation_raw (971,429 samples, 0.17%)</title><rect x="62.9219%" y="101" width="0.1656%" height="15" fill="rgb(207,117,47)"/><text x="63.1719%" y="111.50"></text></g><g><title>mir_for_ctfe (835,529 samples, 0.14%)</title><rect x="63.2527%" y="69" width="0.1425%" height="15" fill="rgb(249,43,39)"/><text x="63.5027%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (824,389 samples, 0.14%)</title><rect x="63.2546%" y="53" width="0.1406%" height="15" fill="rgb(209,38,44)"/><text x="63.5046%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,848,882 samples, 0.49%)</title><rect x="62.9155%" y="117" width="0.4858%" height="15" fill="rgb(236,212,23)"/><text x="63.1655%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,840,121 samples, 0.31%)</title><rect x="63.0875%" y="101" width="0.3138%" height="15" fill="rgb(242,79,21)"/><text x="63.3375%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,794,431 samples, 0.31%)</title><rect x="63.0953%" y="85" width="0.3060%" height="15" fill="rgb(211,96,35)"/><text x="63.3453%" y="95.50"></text></g><g><title>generics_of (1,196,116 samples, 0.20%)</title><rect x="65.6459%" y="101" width="0.2039%" height="15" fill="rgb(253,215,40)"/><text x="65.8959%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (872,018 samples, 0.15%)</title><rect x="65.7012%" y="85" width="0.1487%" height="15" fill="rgb(211,81,21)"/><text x="65.9512%" y="95.50"></text></g><g><title>impl_trait_ref (2,275,227 samples, 0.39%)</title><rect x="65.9038%" y="101" width="0.3879%" height="15" fill="rgb(208,190,38)"/><text x="66.1538%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,995,982 samples, 0.34%)</title><rect x="65.9514%" y="85" width="0.3403%" height="15" fill="rgb(235,213,38)"/><text x="66.2014%" y="95.50"></text></g><g><title>predicates_of (2,054,935 samples, 0.35%)</title><rect x="66.3080%" y="101" width="0.3504%" height="15" fill="rgb(237,122,38)"/><text x="66.5580%" y="111.50"></text></g><g><title>predicates_defined_on (1,098,514 samples, 0.19%)</title><rect x="66.4711%" y="85" width="0.1873%" height="15" fill="rgb(244,218,35)"/><text x="66.7211%" y="95.50"></text></g><g><title>specializes (2,933,033 samples, 0.50%)</title><rect x="66.6584%" y="101" width="0.5001%" height="15" fill="rgb(240,68,47)"/><text x="66.9084%" y="111.50"></text></g><g><title>param_env (1,684,748 samples, 0.29%)</title><rect x="66.8712%" y="85" width="0.2873%" height="15" fill="rgb(210,16,53)"/><text x="67.1212%" y="95.50"></text></g><g><title>def_span (697,035 samples, 0.12%)</title><rect x="67.0396%" y="69" width="0.1189%" height="15" fill="rgb(235,124,12)"/><text x="67.2896%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (608,044 samples, 0.10%)</title><rect x="67.0548%" y="53" width="0.1037%" height="15" fill="rgb(224,169,11)"/><text x="67.3048%" y="63.50"></text></g><g><title>trait_impls_of (1,728,588 samples, 0.29%)</title><rect x="67.1640%" y="101" width="0.2947%" height="15" fill="rgb(250,166,2)"/><text x="67.4140%" y="111.50"></text></g><g><title>implementations_of_trait (814,314 samples, 0.14%)</title><rect x="67.3199%" y="85" width="0.1388%" height="15" fill="rgb(242,216,29)"/><text x="67.5699%" y="95.50"></text></g><g><title>evaluate_obligation (23,829,293 samples, 4.06%)</title><rect x="63.4013%" y="117" width="4.0631%" height="15" fill="rgb(230,116,27)"/><text x="63.6513%" y="127.50">eval..</text></g><g><title>evaluate_obligation (1,404,707 samples, 0.24%)</title><rect x="68.0980%" y="101" width="0.2395%" height="15" fill="rgb(228,99,48)"/><text x="68.3480%" y="111.50"></text></g><g><title>method_autoderef_steps (2,526,460 samples, 0.43%)</title><rect x="67.9102%" y="117" width="0.4308%" height="15" fill="rgb(253,11,6)"/><text x="68.1602%" y="127.50"></text></g><g><title>explicit_predicates_of (837,150 samples, 0.14%)</title><rect x="68.5999%" y="85" width="0.1427%" height="15" fill="rgb(247,143,39)"/><text x="68.8499%" y="95.50"></text></g><g><title>predicates_of (2,094,127 samples, 0.36%)</title><rect x="68.4196%" y="117" width="0.3571%" height="15" fill="rgb(236,97,10)"/><text x="68.6696%" y="127.50"></text></g><g><title>predicates_defined_on (1,606,703 samples, 0.27%)</title><rect x="68.5027%" y="101" width="0.2740%" height="15" fill="rgb(233,208,19)"/><text x="68.7527%" y="111.50"></text></g><g><title>specializes (683,547 samples, 0.12%)</title><rect x="68.8022%" y="117" width="0.1166%" height="15" fill="rgb(216,164,2)"/><text x="69.0522%" y="127.50"></text></g><g><title>dropck_outlives (822,452 samples, 0.14%)</title><rect x="71.4997%" y="101" width="0.1402%" height="15" fill="rgb(220,129,5)"/><text x="71.7497%" y="111.50"></text></g><g><title>evaluate_obligation (2,363,845 samples, 0.40%)</title><rect x="71.6399%" y="101" width="0.4031%" height="15" fill="rgb(242,17,10)"/><text x="71.8899%" y="111.50"></text></g><g><title>typeck (19,901,010 samples, 3.39%)</title><rect x="68.9849%" y="117" width="3.3933%" height="15" fill="rgb(242,107,0)"/><text x="69.2349%" y="127.50">typ..</text></g><g><title>item_bodies_checking (203,260,106 samples, 34.66%)</title><rect x="37.7829%" y="165" width="34.6578%" height="15" fill="rgb(251,28,31)"/><text x="38.0329%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (203,255,556 samples, 34.66%)</title><rect x="37.7837%" y="149" width="34.6570%" height="15" fill="rgb(233,223,10)"/><text x="38.0337%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (202,801,241 samples, 34.58%)</title><rect x="37.8611%" y="133" width="34.5795%" height="15" fill="rgb(215,21,27)"/><text x="38.1111%" y="143.50">typeck</text></g><g><title>item_types_checking (3,965,934 samples, 0.68%)</title><rect x="72.4407%" y="165" width="0.6762%" height="15" fill="rgb(232,23,21)"/><text x="72.6907%" y="175.50"></text></g><g><title>check_mod_item_types (3,949,034 samples, 0.67%)</title><rect x="72.4436%" y="149" width="0.6733%" height="15" fill="rgb(244,5,23)"/><text x="72.6936%" y="159.50"></text></g><g><title>fn_sig (1,613,205 samples, 0.28%)</title><rect x="73.3925%" y="133" width="0.2751%" height="15" fill="rgb(226,81,46)"/><text x="73.6425%" y="143.50"></text></g><g><title>named_region_map (2,087,054 samples, 0.36%)</title><rect x="73.7857%" y="117" width="0.3559%" height="15" fill="rgb(247,70,30)"/><text x="74.0357%" y="127.50"></text></g><g><title>resolve_lifetimes (2,008,273 samples, 0.34%)</title><rect x="73.7992%" y="101" width="0.3424%" height="15" fill="rgb(212,68,19)"/><text x="74.0492%" y="111.50"></text></g><g><title>lint_levels (1,092,252 samples, 0.19%)</title><rect x="73.9554%" y="85" width="0.1862%" height="15" fill="rgb(240,187,13)"/><text x="74.2054%" y="95.50"></text></g><g><title>generics_of (2,834,658 samples, 0.48%)</title><rect x="73.6676%" y="133" width="0.4833%" height="15" fill="rgb(223,113,26)"/><text x="73.9176%" y="143.50"></text></g><g><title>explicit_predicates_of (1,126,513 samples, 0.19%)</title><rect x="74.3157%" y="101" width="0.1921%" height="15" fill="rgb(206,192,2)"/><text x="74.5657%" y="111.50"></text></g><g><title>predicates_of (2,789,399 samples, 0.48%)</title><rect x="74.1949%" y="133" width="0.4756%" height="15" fill="rgb(241,108,4)"/><text x="74.4449%" y="143.50"></text></g><g><title>predicates_defined_on (2,510,828 samples, 0.43%)</title><rect x="74.2424%" y="117" width="0.4281%" height="15" fill="rgb(247,173,49)"/><text x="74.4924%" y="127.50"></text></g><g><title>inferred_outlives_of (954,740 samples, 0.16%)</title><rect x="74.5078%" y="101" width="0.1628%" height="15" fill="rgb(224,114,35)"/><text x="74.7578%" y="111.50"></text></g><g><title>inferred_outlives_crate (862,269 samples, 0.15%)</title><rect x="74.5235%" y="85" width="0.1470%" height="15" fill="rgb(245,159,27)"/><text x="74.7735%" y="95.50"></text></g><g><title>type_collecting (9,517,396 samples, 1.62%)</title><rect x="73.1204%" y="165" width="1.6228%" height="15" fill="rgb(245,172,44)"/><text x="73.3704%" y="175.50"></text></g><g><title>collect_mod_item_types (9,488,946 samples, 1.62%)</title><rect x="73.1253%" y="149" width="1.6180%" height="15" fill="rgb(236,23,11)"/><text x="73.3753%" y="159.50"></text></g><g><title>evaluate_obligation (1,810,194 samples, 0.31%)</title><rect x="76.2276%" y="133" width="0.3087%" height="15" fill="rgb(205,117,38)"/><text x="76.4776%" y="143.50"></text></g><g><title>implied_outlives_bounds (860,376 samples, 0.15%)</title><rect x="76.5396%" y="133" width="0.1467%" height="15" fill="rgb(237,72,25)"/><text x="76.7896%" y="143.50"></text></g><g><title>param_env (1,198,034 samples, 0.20%)</title><rect x="76.7605%" y="133" width="0.2043%" height="15" fill="rgb(244,70,9)"/><text x="77.0105%" y="143.50"></text></g><g><title>region_scope_tree (2,123,682 samples, 0.36%)</title><rect x="76.9701%" y="133" width="0.3621%" height="15" fill="rgb(217,125,39)"/><text x="77.2201%" y="143.50"></text></g><g><title>check_impl_item_well_formed (14,193,313 samples, 2.42%)</title><rect x="74.9201%" y="149" width="2.4201%" height="15" fill="rgb(235,36,10)"/><text x="75.1701%" y="159.50">ch..</text></g><g><title>eval_to_const_value_raw (1,353,435 samples, 0.23%)</title><rect x="78.3492%" y="133" width="0.2308%" height="15" fill="rgb(251,123,47)"/><text x="78.5992%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,342,175 samples, 0.23%)</title><rect x="78.3511%" y="117" width="0.2289%" height="15" fill="rgb(221,13,13)"/><text x="78.6011%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,339,735 samples, 0.23%)</title><rect x="78.3516%" y="101" width="0.2284%" height="15" fill="rgb(238,131,9)"/><text x="78.6016%" y="111.50"></text></g><g><title>evaluate_obligation (1,918,778 samples, 0.33%)</title><rect x="78.5800%" y="133" width="0.3272%" height="15" fill="rgb(211,50,8)"/><text x="78.8300%" y="143.50"></text></g><g><title>param_env (1,134,633 samples, 0.19%)</title><rect x="78.9893%" y="133" width="0.1935%" height="15" fill="rgb(245,182,24)"/><text x="79.2393%" y="143.50"></text></g><g><title>check_item_well_formed (11,603,584 samples, 1.98%)</title><rect x="77.3401%" y="149" width="1.9785%" height="15" fill="rgb(242,14,37)"/><text x="77.5901%" y="159.50">c..</text></g><g><title>analysis (464,634,986 samples, 79.22%)</title><rect x="0.2018%" y="197" width="79.2247%" height="15" fill="rgb(246,228,12)"/><text x="0.4518%" y="207.50">analysis</text></g><g><title>type_check_crate (264,968,501 samples, 45.18%)</title><rect x="34.2469%" y="181" width="45.1796%" height="15" fill="rgb(213,55,15)"/><text x="34.4969%" y="191.50">type_check_crate</text></g><g><title>wf_checking (27,438,865 samples, 4.68%)</title><rect x="74.7479%" y="165" width="4.6786%" height="15" fill="rgb(209,9,3)"/><text x="74.9979%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (632,537 samples, 0.11%)</title><rect x="79.3187%" y="149" width="0.1079%" height="15" fill="rgb(230,59,30)"/><text x="79.5687%" y="159.50"></text></g><g><title>metadata_register_crate (5,864,226 samples, 1.00%)</title><rect x="90.6533%" y="149" width="0.9999%" height="15" fill="rgb(209,121,21)"/><text x="90.9033%" y="159.50"></text></g><g><title>metadata_register_crate (4,265,079 samples, 0.73%)</title><rect x="90.9259%" y="133" width="0.7272%" height="15" fill="rgb(220,109,13)"/><text x="91.1759%" y="143.50"></text></g><g><title>macro_expand_crate (70,744,545 samples, 12.06%)</title><rect x="79.7162%" y="181" width="12.0626%" height="15" fill="rgb(232,18,1)"/><text x="79.9662%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (70,734,005 samples, 12.06%)</title><rect x="79.7180%" y="165" width="12.0608%" height="15" fill="rgb(215,41,42)"/><text x="79.9680%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (737,108 samples, 0.13%)</title><rect x="91.6532%" y="149" width="0.1257%" height="15" fill="rgb(224,123,36)"/><text x="91.9032%" y="159.50"></text></g><g><title>late_resolve_crate (8,966,800 samples, 1.53%)</title><rect x="91.9552%" y="165" width="1.5289%" height="15" fill="rgb(240,125,3)"/><text x="92.2052%" y="175.50"></text></g><g><title>configure_and_expand (82,565,226 samples, 14.08%)</title><rect x="79.5268%" y="197" width="14.0782%" height="15" fill="rgb(205,98,50)"/><text x="79.7768%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (10,628,088 samples, 1.81%)</title><rect x="91.7928%" y="181" width="1.8122%" height="15" fill="rgb(205,185,37)"/><text x="92.0428%" y="191.50">r..</text></g><g><title>drop_ast (1,006,641 samples, 0.17%)</title><rect x="93.6050%" y="197" width="0.1716%" height="15" fill="rgb(238,207,15)"/><text x="93.8550%" y="207.50"></text></g><g><title>early_lint_checks (2,368,997 samples, 0.40%)</title><rect x="93.7812%" y="197" width="0.4039%" height="15" fill="rgb(213,199,42)"/><text x="94.0312%" y="207.50"></text></g><g><title>free_global_ctxt (7,870,087 samples, 1.34%)</title><rect x="94.1851%" y="197" width="1.3419%" height="15" fill="rgb(235,201,11)"/><text x="94.4351%" y="207.50"></text></g><g><title>generate_crate_metadata (5,961,106 samples, 1.02%)</title><rect x="95.5270%" y="197" width="1.0164%" height="15" fill="rgb(207,46,11)"/><text x="95.7770%" y="207.50"></text></g><g><title>hir_lowering (16,773,756 samples, 2.86%)</title><rect x="96.5435%" y="197" width="2.8601%" height="15" fill="rgb(241,35,35)"/><text x="96.7935%" y="207.50">hi..</text></g><g><title>self_profile_alloc_query_strings (2,204,935 samples, 0.38%)</title><rect x="99.4997%" y="197" width="0.3760%" height="15" fill="rgb(243,32,47)"/><text x="99.7497%" y="207.50"></text></g><g><title>all (586,477,619 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (586,477,619 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (614,677 samples, 0.10%)</title><rect x="99.8952%" y="197" width="0.1048%" height="15" fill="rgb(243,110,44)"/><text x="100.1452%" y="207.50"></text></g></svg></svg>