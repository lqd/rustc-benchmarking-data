<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (309,333 samples, 0.33%)</title><rect x="10.8056%" y="117" width="0.3318%" height="15" fill="rgb(227,0,7)"/><text x="11.0556%" y="127.50"></text></g><g><title>item_attrs (310,453 samples, 0.33%)</title><rect x="11.6675%" y="85" width="0.3330%" height="15" fill="rgb(217,0,24)"/><text x="11.9175%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (300,683 samples, 0.32%)</title><rect x="11.6780%" y="69" width="0.3225%" height="15" fill="rgb(221,193,54)"/><text x="11.9280%" y="79.50"></text></g><g><title>codegen_fn_attrs (434,763 samples, 0.47%)</title><rect x="11.5502%" y="101" width="0.4663%" height="15" fill="rgb(248,212,6)"/><text x="11.8002%" y="111.50"></text></g><g><title>adt_drop_tys (123,662 samples, 0.13%)</title><rect x="14.2601%" y="69" width="0.1326%" height="15" fill="rgb(208,68,35)"/><text x="14.5101%" y="79.50"></text></g><g><title>needs_drop_raw (615,307 samples, 0.66%)</title><rect x="14.1962%" y="85" width="0.6600%" height="15" fill="rgb(232,128,0)"/><text x="14.4462%" y="95.50"></text></g><g><title>is_copy_raw (432,015 samples, 0.46%)</title><rect x="14.3928%" y="69" width="0.4634%" height="15" fill="rgb(207,160,47)"/><text x="14.6428%" y="79.50"></text></g><g><title>evaluate_obligation (370,823 samples, 0.40%)</title><rect x="14.4584%" y="53" width="0.3977%" height="15" fill="rgb(228,23,34)"/><text x="14.7084%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (175,762 samples, 0.19%)</title><rect x="15.0108%" y="69" width="0.1885%" height="15" fill="rgb(218,30,26)"/><text x="15.2608%" y="79.50"></text></g><g><title>impl_parent (888,501 samples, 0.95%)</title><rect x="16.3123%" y="53" width="0.9530%" height="15" fill="rgb(220,122,19)"/><text x="16.5623%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (425,296 samples, 0.46%)</title><rect x="16.8091%" y="37" width="0.4562%" height="15" fill="rgb(250,228,42)"/><text x="17.0591%" y="47.50"></text></g><g><title>specialization_graph_of (3,649,812 samples, 3.91%)</title><rect x="15.2352%" y="69" width="3.9147%" height="15" fill="rgb(240,193,28)"/><text x="15.4852%" y="79.50">spec..</text></g><g><title>impl_trait_ref (1,757,088 samples, 1.88%)</title><rect x="17.2652%" y="53" width="1.8846%" height="15" fill="rgb(216,20,37)"/><text x="17.5152%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,509,297 samples, 1.62%)</title><rect x="17.5310%" y="37" width="1.6188%" height="15" fill="rgb(206,188,39)"/><text x="17.7810%" y="47.50"></text></g><g><title>resolve_instance (4,082,677 samples, 4.38%)</title><rect x="14.8561%" y="85" width="4.3789%" height="15" fill="rgb(217,207,13)"/><text x="15.1061%" y="95.50">resol..</text></g><g><title>thir_body (787,470 samples, 0.84%)</title><rect x="19.2519%" y="85" width="0.8446%" height="15" fill="rgb(231,73,38)"/><text x="19.5019%" y="95.50"></text></g><g><title>mir_const (9,302,272 samples, 9.98%)</title><rect x="10.1303%" y="133" width="9.9773%" height="15" fill="rgb(225,20,46)"/><text x="10.3803%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,363,325 samples, 8.97%)</title><rect x="11.1374%" y="117" width="8.9702%" height="15" fill="rgb(210,31,41)"/><text x="11.3874%" y="127.50">unsafety_chec..</text></g><g><title>mir_built (7,543,608 samples, 8.09%)</title><rect x="12.0166%" y="101" width="8.0910%" height="15" fill="rgb(221,200,47)"/><text x="12.2666%" y="111.50">mir_built</text></g><g><title>mir_promoted (10,210,184 samples, 10.95%)</title><rect x="9.4618%" y="149" width="10.9511%" height="15" fill="rgb(226,26,5)"/><text x="9.7118%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (284,673 samples, 0.31%)</title><rect x="20.1076%" y="133" width="0.3053%" height="15" fill="rgb(249,33,26)"/><text x="20.3576%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (279,093 samples, 0.30%)</title><rect x="20.4129%" y="149" width="0.2993%" height="15" fill="rgb(235,183,28)"/><text x="20.6629%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (218,801 samples, 0.23%)</title><rect x="20.7122%" y="149" width="0.2347%" height="15" fill="rgb(221,5,38)"/><text x="20.9622%" y="159.50"></text></g><g><title>normalize_projection_ty (114,211 samples, 0.12%)</title><rect x="20.8244%" y="133" width="0.1225%" height="15" fill="rgb(247,18,42)"/><text x="21.0744%" y="143.50"></text></g><g><title>type_op_prove_predicate (763,910 samples, 0.82%)</title><rect x="20.9672%" y="149" width="0.8193%" height="15" fill="rgb(241,131,45)"/><text x="21.2172%" y="159.50"></text></g><g><title>MIR_borrow_checking (19,244,624 samples, 20.64%)</title><rect x="1.1489%" y="181" width="20.6411%" height="15" fill="rgb(249,31,29)"/><text x="1.3989%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (19,175,344 samples, 20.57%)</title><rect x="1.2233%" y="165" width="20.5668%" height="15" fill="rgb(225,111,53)"/><text x="1.4733%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (141,401 samples, 0.15%)</title><rect x="21.7900%" y="181" width="0.1517%" height="15" fill="rgb(238,160,17)"/><text x="22.0400%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (105,681 samples, 0.11%)</title><rect x="21.8283%" y="165" width="0.1133%" height="15" fill="rgb(214,148,48)"/><text x="22.0783%" y="175.50"></text></g><g><title>hir_module_items (203,302 samples, 0.22%)</title><rect x="21.9417%" y="181" width="0.2181%" height="15" fill="rgb(232,36,49)"/><text x="22.1917%" y="191.50"></text></g><g><title>get_lang_items (100,501 samples, 0.11%)</title><rect x="22.5289%" y="133" width="0.1078%" height="15" fill="rgb(209,103,24)"/><text x="22.7789%" y="143.50"></text></g><g><title>codegen_fn_attrs (131,251 samples, 0.14%)</title><rect x="22.7498%" y="117" width="0.1408%" height="15" fill="rgb(229,88,8)"/><text x="22.9998%" y="127.50"></text></g><g><title>should_inherit_track_caller (242,613 samples, 0.26%)</title><rect x="22.6367%" y="133" width="0.2602%" height="15" fill="rgb(213,181,19)"/><text x="22.8867%" y="143.50"></text></g><g><title>codegen_fn_attrs (465,035 samples, 0.50%)</title><rect x="22.4287%" y="149" width="0.4988%" height="15" fill="rgb(254,191,54)"/><text x="22.6787%" y="159.50"></text></g><g><title>check_mod_attrs (695,078 samples, 0.75%)</title><rect x="22.1821%" y="165" width="0.7455%" height="15" fill="rgb(241,83,37)"/><text x="22.4321%" y="175.50"></text></g><g><title>lookup_deprecation_entry (106,741 samples, 0.11%)</title><rect x="23.3188%" y="149" width="0.1145%" height="15" fill="rgb(233,36,39)"/><text x="23.5688%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (423,315 samples, 0.45%)</title><rect x="23.0945%" y="165" width="0.4540%" height="15" fill="rgb(226,3,54)"/><text x="23.3445%" y="175.50"></text></g><g><title>misc_checking_1 (1,365,895 samples, 1.47%)</title><rect x="22.1602%" y="181" width="1.4650%" height="15" fill="rgb(245,192,40)"/><text x="22.4102%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (322,524 samples, 0.35%)</title><rect x="23.6269%" y="165" width="0.3459%" height="15" fill="rgb(238,167,29)"/><text x="23.8769%" y="175.50"></text></g><g><title>check_mod_liveness (259,703 samples, 0.28%)</title><rect x="23.6943%" y="149" width="0.2785%" height="15" fill="rgb(232,182,51)"/><text x="23.9443%" y="159.50"></text></g><g><title>misc_checking_2 (677,618 samples, 0.73%)</title><rect x="23.6252%" y="181" width="0.7268%" height="15" fill="rgb(231,60,39)"/><text x="23.8752%" y="191.50"></text></g><g><title>match_checking (353,474 samples, 0.38%)</title><rect x="23.9729%" y="165" width="0.3791%" height="15" fill="rgb(208,69,12)"/><text x="24.2229%" y="175.50"></text></g><g><title>check_match (336,284 samples, 0.36%)</title><rect x="23.9913%" y="149" width="0.3607%" height="15" fill="rgb(235,93,37)"/><text x="24.2413%" y="159.50"></text></g><g><title>check_private_in_public (141,682 samples, 0.15%)</title><rect x="24.3627%" y="165" width="0.1520%" height="15" fill="rgb(213,116,39)"/><text x="24.6127%" y="175.50"></text></g><g><title>death_checking (234,522 samples, 0.25%)</title><rect x="24.5147%" y="165" width="0.2515%" height="15" fill="rgb(222,207,29)"/><text x="24.7647%" y="175.50"></text></g><g><title>param_env (201,851 samples, 0.22%)</title><rect x="25.4374%" y="133" width="0.2165%" height="15" fill="rgb(206,96,30)"/><text x="25.6874%" y="143.50"></text></g><g><title>crate_lints (1,940,622 samples, 2.08%)</title><rect x="24.7679%" y="149" width="2.0814%" height="15" fill="rgb(218,138,4)"/><text x="25.0179%" y="159.50">c..</text></g><g><title>type_of (1,063,301 samples, 1.14%)</title><rect x="25.7089%" y="133" width="1.1405%" height="15" fill="rgb(250,191,14)"/><text x="25.9589%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (829,429 samples, 0.89%)</title><rect x="25.9597%" y="117" width="0.8896%" height="15" fill="rgb(239,60,40)"/><text x="26.2097%" y="127.50"></text></g><g><title>layout_of (109,682 samples, 0.12%)</title><rect x="27.1382%" y="85" width="0.1176%" height="15" fill="rgb(206,27,48)"/><text x="27.3882%" y="95.50"></text></g><g><title>lint_checking (2,323,287 samples, 2.49%)</title><rect x="24.7662%" y="165" width="2.4919%" height="15" fill="rgb(225,35,8)"/><text x="25.0162%" y="175.50">li..</text></g><g><title>module_lints (381,145 samples, 0.41%)</title><rect x="26.8493%" y="149" width="0.4088%" height="15" fill="rgb(250,213,24)"/><text x="27.0993%" y="159.50"></text></g><g><title>lint_mod (378,545 samples, 0.41%)</title><rect x="26.8521%" y="133" width="0.4060%" height="15" fill="rgb(247,123,22)"/><text x="27.1021%" y="143.50"></text></g><g><title>layout_of (134,252 samples, 0.14%)</title><rect x="27.1141%" y="117" width="0.1440%" height="15" fill="rgb(231,138,38)"/><text x="27.3641%" y="127.50"></text></g><g><title>layout_of (120,142 samples, 0.13%)</title><rect x="27.1293%" y="101" width="0.1289%" height="15" fill="rgb(231,145,46)"/><text x="27.3793%" y="111.50"></text></g><g><title>privacy_access_levels (141,942 samples, 0.15%)</title><rect x="27.2581%" y="165" width="0.1522%" height="15" fill="rgb(251,118,11)"/><text x="27.5081%" y="175.50"></text></g><g><title>privacy_checking_modules (518,635 samples, 0.56%)</title><rect x="27.4104%" y="165" width="0.5563%" height="15" fill="rgb(217,147,25)"/><text x="27.6604%" y="175.50"></text></g><g><title>check_mod_privacy (517,015 samples, 0.55%)</title><rect x="27.4121%" y="149" width="0.5545%" height="15" fill="rgb(247,81,37)"/><text x="27.6621%" y="159.50"></text></g><g><title>misc_checking_3 (3,383,168 samples, 3.63%)</title><rect x="24.3520%" y="181" width="3.6287%" height="15" fill="rgb(209,12,38)"/><text x="24.6020%" y="191.50">misc..</text></g><g><title>impl_parent (1,063,959 samples, 1.14%)</title><rect x="29.6787%" y="117" width="1.1412%" height="15" fill="rgb(227,1,9)"/><text x="29.9287%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (701,573 samples, 0.75%)</title><rect x="30.0674%" y="101" width="0.7525%" height="15" fill="rgb(248,47,43)"/><text x="30.3174%" y="111.50"></text></g><g><title>impl_trait_ref (3,268,400 samples, 3.51%)</title><rect x="30.8199%" y="117" width="3.5056%" height="15" fill="rgb(221,10,30)"/><text x="31.0699%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,909,979 samples, 3.12%)</title><rect x="31.2043%" y="101" width="3.1211%" height="15" fill="rgb(210,229,1)"/><text x="31.4543%" y="111.50">met..</text></g><g><title>coherent_trait (6,224,760 samples, 6.68%)</title><rect x="28.0556%" y="149" width="6.6765%" height="15" fill="rgb(222,148,37)"/><text x="28.3056%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (6,208,779 samples, 6.66%)</title><rect x="28.0727%" y="133" width="6.6593%" height="15" fill="rgb(234,67,33)"/><text x="28.3227%" y="143.50">specializ..</text></g><g><title>trait_impls_of (377,263 samples, 0.40%)</title><rect x="34.3274%" y="117" width="0.4046%" height="15" fill="rgb(247,98,35)"/><text x="34.5774%" y="127.50"></text></g><g><title>implementations_of_trait (117,780 samples, 0.13%)</title><rect x="34.6057%" y="101" width="0.1263%" height="15" fill="rgb(247,138,52)"/><text x="34.8557%" y="111.50"></text></g><g><title>coherence_checking (6,290,370 samples, 6.75%)</title><rect x="28.0334%" y="165" width="6.7468%" height="15" fill="rgb(213,79,30)"/><text x="28.2834%" y="175.50">coherence..</text></g><g><title>associated_item (426,794 samples, 0.46%)</title><rect x="48.1683%" y="101" width="0.4578%" height="15" fill="rgb(246,177,23)"/><text x="48.4183%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (347,833 samples, 0.37%)</title><rect x="48.2530%" y="85" width="0.3731%" height="15" fill="rgb(230,62,27)"/><text x="48.5030%" y="95.50"></text></g><g><title>associated_items (642,656 samples, 0.69%)</title><rect x="47.9808%" y="117" width="0.6893%" height="15" fill="rgb(216,154,8)"/><text x="48.2308%" y="127.50"></text></g><g><title>adt_def (107,941 samples, 0.12%)</title><rect x="48.9355%" y="85" width="0.1158%" height="15" fill="rgb(244,35,45)"/><text x="49.1855%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (105,701 samples, 0.11%)</title><rect x="48.9379%" y="69" width="0.1134%" height="15" fill="rgb(251,115,12)"/><text x="49.1879%" y="79.50"></text></g><g><title>adt_dtorck_constraint (132,582 samples, 0.14%)</title><rect x="49.1903%" y="69" width="0.1422%" height="15" fill="rgb(240,54,50)"/><text x="49.4403%" y="79.50"></text></g><g><title>adt_dtorck_constraint (212,682 samples, 0.23%)</title><rect x="49.1264%" y="85" width="0.2281%" height="15" fill="rgb(233,84,52)"/><text x="49.3764%" y="95.50"></text></g><g><title>dropck_outlives (599,465 samples, 0.64%)</title><rect x="48.7528%" y="117" width="0.6430%" height="15" fill="rgb(207,117,47)"/><text x="49.0028%" y="127.50"></text></g><g><title>adt_dtorck_constraint (483,214 samples, 0.52%)</title><rect x="48.8774%" y="101" width="0.5183%" height="15" fill="rgb(249,43,39)"/><text x="49.1274%" y="111.50"></text></g><g><title>predicates_of (98,700 samples, 0.11%)</title><rect x="50.1711%" y="101" width="0.1059%" height="15" fill="rgb(209,38,44)"/><text x="50.4211%" y="111.50"></text></g><g><title>evaluate_obligation (1,377,356 samples, 1.48%)</title><rect x="49.3957%" y="117" width="1.4773%" height="15" fill="rgb(236,212,23)"/><text x="49.6457%" y="127.50"></text></g><g><title>trait_impls_of (479,914 samples, 0.51%)</title><rect x="50.3583%" y="101" width="0.5147%" height="15" fill="rgb(242,79,21)"/><text x="50.6083%" y="111.50"></text></g><g><title>implementations_of_trait (153,690 samples, 0.16%)</title><rect x="50.7082%" y="85" width="0.1648%" height="15" fill="rgb(211,96,35)"/><text x="50.9582%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (113,300 samples, 0.12%)</title><rect x="50.7515%" y="69" width="0.1215%" height="15" fill="rgb(253,215,40)"/><text x="51.0015%" y="79.50"></text></g><g><title>fn_sig (130,490 samples, 0.14%)</title><rect x="50.9069%" y="117" width="0.1400%" height="15" fill="rgb(211,81,21)"/><text x="51.1569%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (108,990 samples, 0.12%)</title><rect x="50.9300%" y="101" width="0.1169%" height="15" fill="rgb(208,190,38)"/><text x="51.1800%" y="111.50"></text></g><g><title>generics_of (114,123 samples, 0.12%)</title><rect x="51.0469%" y="117" width="0.1224%" height="15" fill="rgb(235,213,38)"/><text x="51.2969%" y="127.50"></text></g><g><title>item_attrs (246,332 samples, 0.26%)</title><rect x="51.3338%" y="117" width="0.2642%" height="15" fill="rgb(237,122,38)"/><text x="51.5838%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (237,922 samples, 0.26%)</title><rect x="51.3428%" y="101" width="0.2552%" height="15" fill="rgb(244,218,35)"/><text x="51.5928%" y="111.50"></text></g><g><title>evaluate_obligation (155,401 samples, 0.17%)</title><rect x="51.8371%" y="101" width="0.1667%" height="15" fill="rgb(240,68,47)"/><text x="52.0871%" y="111.50"></text></g><g><title>method_autoderef_steps (308,042 samples, 0.33%)</title><rect x="51.6811%" y="117" width="0.3304%" height="15" fill="rgb(210,16,53)"/><text x="51.9311%" y="127.50"></text></g><g><title>explicit_predicates_of (97,602 samples, 0.10%)</title><rect x="52.2827%" y="85" width="0.1047%" height="15" fill="rgb(235,124,12)"/><text x="52.5327%" y="95.50"></text></g><g><title>predicates_of (364,205 samples, 0.39%)</title><rect x="52.0571%" y="117" width="0.3906%" height="15" fill="rgb(224,169,11)"/><text x="52.3071%" y="127.50"></text></g><g><title>predicates_defined_on (248,423 samples, 0.27%)</title><rect x="52.1813%" y="101" width="0.2664%" height="15" fill="rgb(250,166,2)"/><text x="52.4313%" y="111.50"></text></g><g><title>trait_impls_of (118,051 samples, 0.13%)</title><rect x="52.4612%" y="117" width="0.1266%" height="15" fill="rgb(242,216,29)"/><text x="52.7112%" y="127.50"></text></g><g><title>is_copy_raw (155,542 samples, 0.17%)</title><rect x="54.2072%" y="101" width="0.1668%" height="15" fill="rgb(230,116,27)"/><text x="54.4572%" y="111.50"></text></g><g><title>evaluate_obligation (150,601 samples, 0.16%)</title><rect x="54.2125%" y="85" width="0.1615%" height="15" fill="rgb(228,99,48)"/><text x="54.4625%" y="95.50"></text></g><g><title>trait_impls_of (128,181 samples, 0.14%)</title><rect x="54.2365%" y="69" width="0.1375%" height="15" fill="rgb(253,11,6)"/><text x="54.4865%" y="79.50"></text></g><g><title>typeck (1,790,139 samples, 1.92%)</title><rect x="52.6585%" y="117" width="1.9200%" height="15" fill="rgb(247,143,39)"/><text x="52.9085%" y="127.50">t..</text></g><g><title>item_bodies_checking (18,495,656 samples, 19.84%)</title><rect x="34.8046%" y="165" width="19.8378%" height="15" fill="rgb(236,97,10)"/><text x="35.0546%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,492,636 samples, 19.83%)</title><rect x="34.8078%" y="149" width="19.8345%" height="15" fill="rgb(233,208,19)"/><text x="35.0578%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (18,448,435 samples, 19.79%)</title><rect x="34.8552%" y="133" width="19.7871%" height="15" fill="rgb(216,164,2)"/><text x="35.1052%" y="143.50">typeck</text></g><g><title>item_types_checking (758,339 samples, 0.81%)</title><rect x="54.6424%" y="165" width="0.8134%" height="15" fill="rgb(220,129,5)"/><text x="54.8924%" y="175.50"></text></g><g><title>check_mod_item_types (756,589 samples, 0.81%)</title><rect x="54.6442%" y="149" width="0.8115%" height="15" fill="rgb(242,17,10)"/><text x="54.8942%" y="159.50"></text></g><g><title>fn_sig (284,683 samples, 0.31%)</title><rect x="55.6568%" y="133" width="0.3053%" height="15" fill="rgb(242,107,0)"/><text x="55.9068%" y="143.50"></text></g><g><title>generics_of (207,304 samples, 0.22%)</title><rect x="55.9621%" y="133" width="0.2223%" height="15" fill="rgb(251,28,31)"/><text x="56.2121%" y="143.50"></text></g><g><title>predicates_of (493,915 samples, 0.53%)</title><rect x="56.2236%" y="133" width="0.5298%" height="15" fill="rgb(233,223,10)"/><text x="56.4736%" y="143.50"></text></g><g><title>predicates_defined_on (465,205 samples, 0.50%)</title><rect x="56.2544%" y="117" width="0.4990%" height="15" fill="rgb(215,21,27)"/><text x="56.5044%" y="127.50"></text></g><g><title>inferred_outlives_of (350,644 samples, 0.38%)</title><rect x="56.3773%" y="101" width="0.3761%" height="15" fill="rgb(232,23,21)"/><text x="56.6273%" y="111.50"></text></g><g><title>inferred_outlives_crate (337,664 samples, 0.36%)</title><rect x="56.3912%" y="85" width="0.3622%" height="15" fill="rgb(244,5,23)"/><text x="56.6412%" y="95.50"></text></g><g><title>type_of (196,463 samples, 0.21%)</title><rect x="56.5427%" y="69" width="0.2107%" height="15" fill="rgb(226,81,46)"/><text x="56.7927%" y="79.50"></text></g><g><title>type_collecting (1,277,044 samples, 1.37%)</title><rect x="55.4588%" y="165" width="1.3697%" height="15" fill="rgb(247,70,30)"/><text x="55.7088%" y="175.50"></text></g><g><title>collect_mod_item_types (1,266,354 samples, 1.36%)</title><rect x="55.4702%" y="149" width="1.3582%" height="15" fill="rgb(212,68,19)"/><text x="55.7202%" y="159.50"></text></g><g><title>adt_sized_constraint (106,141 samples, 0.11%)</title><rect x="58.1332%" y="117" width="0.1138%" height="15" fill="rgb(240,187,13)"/><text x="58.3832%" y="127.50"></text></g><g><title>evaluate_obligation (425,445 samples, 0.46%)</title><rect x="57.8457%" y="133" width="0.4563%" height="15" fill="rgb(223,113,26)"/><text x="58.0957%" y="143.50"></text></g><g><title>implied_outlives_bounds (124,801 samples, 0.13%)</title><rect x="58.3192%" y="133" width="0.1339%" height="15" fill="rgb(206,192,2)"/><text x="58.5692%" y="143.50"></text></g><g><title>param_env (115,971 samples, 0.12%)</title><rect x="58.4530%" y="133" width="0.1244%" height="15" fill="rgb(241,108,4)"/><text x="58.7030%" y="143.50"></text></g><g><title>region_scope_tree (254,395 samples, 0.27%)</title><rect x="58.6115%" y="133" width="0.2729%" height="15" fill="rgb(247,173,49)"/><text x="58.8615%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,807,742 samples, 1.94%)</title><rect x="56.9478%" y="149" width="1.9389%" height="15" fill="rgb(224,114,35)"/><text x="57.1978%" y="159.50">c..</text></g><g><title>adt_def (137,911 samples, 0.15%)</title><rect x="59.8103%" y="101" width="0.1479%" height="15" fill="rgb(245,159,27)"/><text x="60.0603%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (135,731 samples, 0.15%)</title><rect x="59.8126%" y="85" width="0.1456%" height="15" fill="rgb(245,172,44)"/><text x="60.0626%" y="95.50"></text></g><g><title>item_attrs (111,650 samples, 0.12%)</title><rect x="59.8384%" y="69" width="0.1198%" height="15" fill="rgb(236,23,11)"/><text x="60.0884%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (109,670 samples, 0.12%)</title><rect x="59.8405%" y="53" width="0.1176%" height="15" fill="rgb(205,117,38)"/><text x="60.0905%" y="63.50"></text></g><g><title>adt_sized_constraint (113,873 samples, 0.12%)</title><rect x="59.9582%" y="101" width="0.1221%" height="15" fill="rgb(237,72,25)"/><text x="60.2082%" y="111.50"></text></g><g><title>adt_sized_constraint (280,274 samples, 0.30%)</title><rect x="59.7906%" y="117" width="0.3006%" height="15" fill="rgb(244,70,9)"/><text x="60.0406%" y="127.50"></text></g><g><title>evaluate_obligation (500,815 samples, 0.54%)</title><rect x="59.5553%" y="133" width="0.5372%" height="15" fill="rgb(217,125,39)"/><text x="59.8053%" y="143.50"></text></g><g><title>param_env (172,881 samples, 0.19%)</title><rect x="60.1358%" y="133" width="0.1854%" height="15" fill="rgb(235,36,10)"/><text x="60.3858%" y="143.50"></text></g><g><title>analysis (55,655,890 samples, 59.69%)</title><rect x="0.7651%" y="197" width="59.6945%" height="15" fill="rgb(251,123,47)"/><text x="1.0151%" y="207.50">analysis</text></g><g><title>type_check_crate (30,281,578 samples, 32.48%)</title><rect x="27.9806%" y="181" width="32.4789%" height="15" fill="rgb(221,13,13)"/><text x="28.2306%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,382,538 samples, 3.63%)</title><rect x="56.8316%" y="165" width="3.6280%" height="15" fill="rgb(238,131,9)"/><text x="57.0816%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (1,466,464 samples, 1.57%)</title><rect x="58.8867%" y="149" width="1.5729%" height="15" fill="rgb(211,50,8)"/><text x="59.1367%" y="159.50"></text></g><g><title>codegen_crate (538,016 samples, 0.58%)</title><rect x="60.4723%" y="197" width="0.5771%" height="15" fill="rgb(245,182,24)"/><text x="60.7223%" y="207.50"></text></g><g><title>AST_validation (164,162 samples, 0.18%)</title><rect x="61.2790%" y="181" width="0.1761%" height="15" fill="rgb(242,14,37)"/><text x="61.5290%" y="191.50"></text></g><g><title>complete_gated_feature_checking (113,091 samples, 0.12%)</title><rect x="61.4551%" y="181" width="0.1213%" height="15" fill="rgb(246,228,12)"/><text x="61.7051%" y="191.50"></text></g><g><title>metadata_load_macro (197,091 samples, 0.21%)</title><rect x="76.6393%" y="149" width="0.2114%" height="15" fill="rgb(213,55,15)"/><text x="76.8893%" y="159.50"></text></g><g><title>macro_expand_crate (16,814,087 samples, 18.03%)</title><rect x="61.6755%" y="181" width="18.0342%" height="15" fill="rgb(209,9,3)"/><text x="61.9255%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (16,785,997 samples, 18.00%)</title><rect x="61.7057%" y="165" width="18.0041%" height="15" fill="rgb(230,59,30)"/><text x="61.9557%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,665,630 samples, 2.86%)</title><rect x="76.8507%" y="149" width="2.8591%" height="15" fill="rgb(209,121,21)"/><text x="77.1007%" y="159.50">me..</text></g><g><title>metadata_register_crate (960,850 samples, 1.03%)</title><rect x="78.6791%" y="133" width="1.0306%" height="15" fill="rgb(220,109,13)"/><text x="78.9291%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (351,983 samples, 0.38%)</title><rect x="79.7154%" y="181" width="0.3775%" height="15" fill="rgb(232,18,1)"/><text x="79.9654%" y="191.50"></text></g><g><title>finalize_imports (324,774 samples, 0.35%)</title><rect x="80.1041%" y="165" width="0.3483%" height="15" fill="rgb(215,41,42)"/><text x="80.3541%" y="175.50"></text></g><g><title>late_resolve_crate (2,591,499 samples, 2.78%)</title><rect x="80.5021%" y="165" width="2.7795%" height="15" fill="rgb(224,123,36)"/><text x="80.7521%" y="175.50">la..</text></g><g><title>configure_and_expand (20,889,973 samples, 22.41%)</title><rect x="61.0493%" y="197" width="22.4058%" height="15" fill="rgb(240,125,3)"/><text x="61.2993%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,134,766 samples, 3.36%)</title><rect x="80.0929%" y="181" width="3.3622%" height="15" fill="rgb(205,98,50)"/><text x="80.3429%" y="191.50">res..</text></g><g><title>drop_ast (218,393 samples, 0.23%)</title><rect x="83.4552%" y="197" width="0.2342%" height="15" fill="rgb(205,185,37)"/><text x="83.7052%" y="207.50"></text></g><g><title>early_lint_checks (445,125 samples, 0.48%)</title><rect x="83.7040%" y="197" width="0.4774%" height="15" fill="rgb(238,207,15)"/><text x="83.9540%" y="207.50"></text></g><g><title>free_global_ctxt (3,138,336 samples, 3.37%)</title><rect x="84.1814%" y="197" width="3.3661%" height="15" fill="rgb(213,199,42)"/><text x="84.4314%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (780,779 samples, 0.84%)</title><rect x="87.5475%" y="197" width="0.8374%" height="15" fill="rgb(235,201,11)"/><text x="87.7975%" y="207.50"></text></g><g><title>hir_lowering (3,650,260 samples, 3.92%)</title><rect x="88.3849%" y="197" width="3.9151%" height="15" fill="rgb(207,46,11)"/><text x="88.6349%" y="207.50">hir_..</text></g><g><title>parse_crate (5,732,704 samples, 6.15%)</title><rect x="92.3567%" y="197" width="6.1487%" height="15" fill="rgb(241,35,35)"/><text x="92.6067%" y="207.50">parse_cr..</text></g><g><title>prepare_outputs (342,144 samples, 0.37%)</title><rect x="98.5159%" y="197" width="0.3670%" height="15" fill="rgb(243,32,47)"/><text x="98.7659%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (579,536 samples, 0.62%)</title><rect x="98.8828%" y="197" width="0.6216%" height="15" fill="rgb(247,202,23)"/><text x="99.1328%" y="207.50"></text></g><g><title>setup_global_ctxt (137,711 samples, 0.15%)</title><rect x="99.5149%" y="197" width="0.1477%" height="15" fill="rgb(219,102,11)"/><text x="99.7649%" y="207.50"></text></g><g><title>all (93,234,549 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (93,234,549 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (314,604 samples, 0.34%)</title><rect x="99.6626%" y="197" width="0.3374%" height="15" fill="rgb(216,99,12)"/><text x="99.9126%" y="207.50"></text></g></svg></svg>