<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (494,093 samples, 0.22%)</title><rect x="13.4198%" y="117" width="0.2199%" height="15" fill="rgb(227,0,7)"/><text x="13.6698%" y="127.50"></text></g><g><title>item_attrs (397,424 samples, 0.18%)</title><rect x="14.1092%" y="85" width="0.1769%" height="15" fill="rgb(217,0,24)"/><text x="14.3592%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (383,173 samples, 0.17%)</title><rect x="14.1156%" y="69" width="0.1705%" height="15" fill="rgb(221,193,54)"/><text x="14.3656%" y="79.50"></text></g><g><title>codegen_fn_attrs (579,457 samples, 0.26%)</title><rect x="14.0448%" y="101" width="0.2579%" height="15" fill="rgb(248,212,6)"/><text x="14.2948%" y="111.50"></text></g><g><title>adt_drop_tys (228,095 samples, 0.10%)</title><rect x="17.2059%" y="69" width="0.1015%" height="15" fill="rgb(208,68,35)"/><text x="17.4559%" y="79.50"></text></g><g><title>is_copy_raw (1,268,928 samples, 0.56%)</title><rect x="17.3074%" y="69" width="0.5648%" height="15" fill="rgb(232,128,0)"/><text x="17.5574%" y="79.50"></text></g><g><title>evaluate_obligation (1,090,775 samples, 0.49%)</title><rect x="17.3867%" y="53" width="0.4855%" height="15" fill="rgb(207,160,47)"/><text x="17.6367%" y="63.50"></text></g><g><title>needs_drop_raw (1,651,535 samples, 0.74%)</title><rect x="17.1383%" y="85" width="0.7351%" height="15" fill="rgb(228,23,34)"/><text x="17.3883%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (281,184 samples, 0.13%)</title><rect x="17.9696%" y="69" width="0.1252%" height="15" fill="rgb(218,30,26)"/><text x="18.2196%" y="79.50"></text></g><g><title>impl_parent (283,372 samples, 0.13%)</title><rect x="18.4069%" y="53" width="0.1261%" height="15" fill="rgb(220,122,19)"/><text x="18.6569%" y="63.50"></text></g><g><title>specialization_graph_of (1,766,669 samples, 0.79%)</title><rect x="18.1320%" y="69" width="0.7863%" height="15" fill="rgb(250,228,42)"/><text x="18.3820%" y="79.50"></text></g><g><title>impl_trait_ref (865,650 samples, 0.39%)</title><rect x="18.5330%" y="53" width="0.3853%" height="15" fill="rgb(240,193,28)"/><text x="18.7830%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (545,276 samples, 0.24%)</title><rect x="18.6756%" y="37" width="0.2427%" height="15" fill="rgb(216,20,37)"/><text x="18.9256%" y="47.50"></text></g><g><title>resolve_instance (2,428,897 samples, 1.08%)</title><rect x="17.8734%" y="85" width="1.0811%" height="15" fill="rgb(206,188,39)"/><text x="18.1234%" y="95.50"></text></g><g><title>thir_body (2,462,726 samples, 1.10%)</title><rect x="18.9648%" y="85" width="1.0962%" height="15" fill="rgb(217,207,13)"/><text x="19.2148%" y="95.50"></text></g><g><title>mir_const (16,396,486 samples, 7.30%)</title><rect x="12.7790%" y="133" width="7.2980%" height="15" fill="rgb(231,73,38)"/><text x="13.0290%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (14,462,654 samples, 6.44%)</title><rect x="13.6397%" y="117" width="6.4373%" height="15" fill="rgb(225,20,46)"/><text x="13.8897%" y="127.50">unsafety..</text></g><g><title>mir_built (12,969,394 samples, 5.77%)</title><rect x="14.3044%" y="101" width="5.7726%" height="15" fill="rgb(210,31,41)"/><text x="14.5544%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (17,977,132 samples, 8.00%)</title><rect x="12.1143%" y="149" width="8.0016%" height="15" fill="rgb(221,200,47)"/><text x="12.3643%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (845,853 samples, 0.38%)</title><rect x="20.1178%" y="149" width="0.3765%" height="15" fill="rgb(226,26,5)"/><text x="20.3678%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,186,032 samples, 0.53%)</title><rect x="20.4943%" y="149" width="0.5279%" height="15" fill="rgb(249,33,26)"/><text x="20.7443%" y="159.50"></text></g><g><title>normalize_projection_ty (809,577 samples, 0.36%)</title><rect x="20.6619%" y="133" width="0.3603%" height="15" fill="rgb(235,183,28)"/><text x="20.9119%" y="143.50"></text></g><g><title>type_op_normalize_predicate (308,763 samples, 0.14%)</title><rect x="21.0222%" y="149" width="0.1374%" height="15" fill="rgb(221,5,38)"/><text x="21.2722%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,374,418 samples, 1.50%)</title><rect x="21.1790%" y="149" width="1.5019%" height="15" fill="rgb(247,18,42)"/><text x="21.4290%" y="159.50"></text></g><g><title>MIR_borrow_checking (49,867,606 samples, 22.20%)</title><rect x="0.4940%" y="181" width="22.1959%" height="15" fill="rgb(241,131,45)"/><text x="0.7440%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (49,756,443 samples, 22.15%)</title><rect x="0.5435%" y="165" width="22.1465%" height="15" fill="rgb(249,31,29)"/><text x="0.7935%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (307,563 samples, 0.14%)</title><rect x="23.0275%" y="149" width="0.1369%" height="15" fill="rgb(225,111,53)"/><text x="23.2775%" y="159.50"></text></g><g><title>check_mod_attrs (696,578 samples, 0.31%)</title><rect x="22.8544%" y="165" width="0.3100%" height="15" fill="rgb(238,160,17)"/><text x="23.1044%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (459,106 samples, 0.20%)</title><rect x="23.2830%" y="165" width="0.2043%" height="15" fill="rgb(214,148,48)"/><text x="23.5330%" y="175.50"></text></g><g><title>misc_checking_1 (1,489,886 samples, 0.66%)</title><rect x="22.8460%" y="181" width="0.6631%" height="15" fill="rgb(232,36,49)"/><text x="23.0960%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (885,049 samples, 0.39%)</title><rect x="23.5099%" y="165" width="0.3939%" height="15" fill="rgb(209,103,24)"/><text x="23.7599%" y="175.50"></text></g><g><title>check_mod_liveness (699,557 samples, 0.31%)</title><rect x="23.5925%" y="149" width="0.3114%" height="15" fill="rgb(229,88,8)"/><text x="23.8425%" y="159.50"></text></g><g><title>misc_checking_2 (2,818,161 samples, 1.25%)</title><rect x="23.5092%" y="181" width="1.2544%" height="15" fill="rgb(213,181,19)"/><text x="23.7592%" y="191.50"></text></g><g><title>match_checking (1,931,422 samples, 0.86%)</title><rect x="23.9039%" y="165" width="0.8597%" height="15" fill="rgb(254,191,54)"/><text x="24.1539%" y="175.50"></text></g><g><title>check_match (1,902,132 samples, 0.85%)</title><rect x="23.9169%" y="149" width="0.8466%" height="15" fill="rgb(241,83,37)"/><text x="24.1669%" y="159.50"></text></g><g><title>check_private_in_public (238,293 samples, 0.11%)</title><rect x="24.7684%" y="165" width="0.1061%" height="15" fill="rgb(233,36,39)"/><text x="25.0184%" y="175.50"></text></g><g><title>death_checking (540,316 samples, 0.24%)</title><rect x="24.8745%" y="165" width="0.2405%" height="15" fill="rgb(226,3,54)"/><text x="25.1245%" y="175.50"></text></g><g><title>crate_lints (3,067,915 samples, 1.37%)</title><rect x="25.1157%" y="149" width="1.3655%" height="15" fill="rgb(245,192,40)"/><text x="25.3657%" y="159.50"></text></g><g><title>type_of (1,458,547 samples, 0.65%)</title><rect x="25.8320%" y="133" width="0.6492%" height="15" fill="rgb(238,167,29)"/><text x="26.0820%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,137,755 samples, 0.51%)</title><rect x="25.9748%" y="117" width="0.5064%" height="15" fill="rgb(232,182,51)"/><text x="26.2248%" y="127.50"></text></g><g><title>lint_checking (4,287,648 samples, 1.91%)</title><rect x="25.1149%" y="165" width="1.9084%" height="15" fill="rgb(231,60,39)"/><text x="25.3649%" y="175.50">l..</text></g><g><title>module_lints (1,218,123 samples, 0.54%)</title><rect x="26.4812%" y="149" width="0.5422%" height="15" fill="rgb(208,69,12)"/><text x="26.7312%" y="159.50"></text></g><g><title>lint_mod (1,215,043 samples, 0.54%)</title><rect x="26.4826%" y="133" width="0.5408%" height="15" fill="rgb(235,93,37)"/><text x="26.7326%" y="143.50"></text></g><g><title>layout_of (227,133 samples, 0.10%)</title><rect x="26.9223%" y="117" width="0.1011%" height="15" fill="rgb(213,116,39)"/><text x="27.1723%" y="127.50"></text></g><g><title>privacy_access_levels (399,934 samples, 0.18%)</title><rect x="27.0234%" y="165" width="0.1780%" height="15" fill="rgb(222,207,29)"/><text x="27.2734%" y="175.50"></text></g><g><title>privacy_checking_modules (1,737,430 samples, 0.77%)</title><rect x="27.2014%" y="165" width="0.7733%" height="15" fill="rgb(206,96,30)"/><text x="27.4514%" y="175.50"></text></g><g><title>check_mod_privacy (1,735,310 samples, 0.77%)</title><rect x="27.2023%" y="149" width="0.7724%" height="15" fill="rgb(218,138,4)"/><text x="27.4523%" y="159.50"></text></g><g><title>misc_checking_3 (7,228,111 samples, 3.22%)</title><rect x="24.7635%" y="181" width="3.2172%" height="15" fill="rgb(250,191,14)"/><text x="25.0135%" y="191.50">mis..</text></g><g><title>adt_destructor (333,934 samples, 0.15%)</title><rect x="28.0347%" y="133" width="0.1486%" height="15" fill="rgb(239,60,40)"/><text x="28.2847%" y="143.50"></text></g><g><title>coherent_trait (326,504 samples, 0.15%)</title><rect x="28.0380%" y="117" width="0.1453%" height="15" fill="rgb(206,27,48)"/><text x="28.2880%" y="127.50"></text></g><g><title>specialization_graph_of (325,284 samples, 0.14%)</title><rect x="28.0386%" y="101" width="0.1448%" height="15" fill="rgb(225,35,8)"/><text x="28.2886%" y="111.50"></text></g><g><title>impl_parent (3,211,245 samples, 1.43%)</title><rect x="30.7768%" y="117" width="1.4293%" height="15" fill="rgb(250,213,24)"/><text x="31.0268%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,830,672 samples, 0.81%)</title><rect x="31.3913%" y="101" width="0.8148%" height="15" fill="rgb(247,123,22)"/><text x="31.6413%" y="111.50"></text></g><g><title>impl_trait_ref (6,496,944 samples, 2.89%)</title><rect x="32.2061%" y="117" width="2.8918%" height="15" fill="rgb(231,138,38)"/><text x="32.4561%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,112,708 samples, 2.28%)</title><rect x="32.8222%" y="101" width="2.2757%" height="15" fill="rgb(231,145,46)"/><text x="33.0722%" y="111.50">m..</text></g><g><title>coherent_trait (16,984,320 samples, 7.56%)</title><rect x="28.0192%" y="149" width="7.5597%" height="15" fill="rgb(251,118,11)"/><text x="28.2692%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (16,527,455 samples, 7.36%)</title><rect x="28.2225%" y="133" width="7.3563%" height="15" fill="rgb(217,147,25)"/><text x="28.4725%" y="143.50">specializa..</text></g><g><title>trait_impls_of (1,078,542 samples, 0.48%)</title><rect x="35.0988%" y="117" width="0.4801%" height="15" fill="rgb(247,81,37)"/><text x="35.3488%" y="127.50"></text></g><g><title>implementations_of_trait (326,704 samples, 0.15%)</title><rect x="35.4335%" y="101" width="0.1454%" height="15" fill="rgb(209,12,38)"/><text x="35.6835%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (250,343 samples, 0.11%)</title><rect x="35.4675%" y="85" width="0.1114%" height="15" fill="rgb(227,1,9)"/><text x="35.7175%" y="95.50"></text></g><g><title>coherence_checking (17,070,990 samples, 7.60%)</title><rect x="28.0106%" y="165" width="7.5983%" height="15" fill="rgb(248,47,43)"/><text x="28.2606%" y="175.50">coherence_..</text></g><g><title>associated_item (586,655 samples, 0.26%)</title><rect x="56.6316%" y="101" width="0.2611%" height="15" fill="rgb(221,10,30)"/><text x="56.8816%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (463,153 samples, 0.21%)</title><rect x="56.6866%" y="85" width="0.2061%" height="15" fill="rgb(210,229,1)"/><text x="56.9366%" y="95.50"></text></g><g><title>associated_items (843,495 samples, 0.38%)</title><rect x="56.5366%" y="117" width="0.3754%" height="15" fill="rgb(222,148,37)"/><text x="56.7866%" y="127.50"></text></g><g><title>adt_dtorck_constraint (366,176 samples, 0.16%)</title><rect x="57.0613%" y="101" width="0.1630%" height="15" fill="rgb(234,67,33)"/><text x="57.3113%" y="111.50"></text></g><g><title>dropck_outlives (683,218 samples, 0.30%)</title><rect x="56.9483%" y="117" width="0.3041%" height="15" fill="rgb(247,98,35)"/><text x="57.1983%" y="127.50"></text></g><g><title>generics_of (1,167,929 samples, 0.52%)</title><rect x="60.2358%" y="101" width="0.5198%" height="15" fill="rgb(247,138,52)"/><text x="60.4858%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (836,076 samples, 0.37%)</title><rect x="60.3835%" y="85" width="0.3721%" height="15" fill="rgb(213,79,30)"/><text x="60.6335%" y="95.50"></text></g><g><title>impl_polarity (235,942 samples, 0.11%)</title><rect x="60.7744%" y="101" width="0.1050%" height="15" fill="rgb(246,177,23)"/><text x="61.0244%" y="111.50"></text></g><g><title>impl_trait_ref (1,569,235 samples, 0.70%)</title><rect x="60.8794%" y="101" width="0.6985%" height="15" fill="rgb(230,62,27)"/><text x="61.1294%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,262,313 samples, 0.56%)</title><rect x="61.0160%" y="85" width="0.5619%" height="15" fill="rgb(216,154,8)"/><text x="61.2660%" y="95.50"></text></g><g><title>opt_def_kind (237,582 samples, 0.11%)</title><rect x="61.7704%" y="85" width="0.1057%" height="15" fill="rgb(244,35,45)"/><text x="62.0204%" y="95.50"></text></g><g><title>explicit_predicates_of (294,650 samples, 0.13%)</title><rect x="62.0264%" y="69" width="0.1311%" height="15" fill="rgb(251,115,12)"/><text x="62.2764%" y="79.50"></text></g><g><title>predicates_of (1,407,508 samples, 0.63%)</title><rect x="61.6118%" y="101" width="0.6265%" height="15" fill="rgb(240,54,50)"/><text x="61.8618%" y="111.50"></text></g><g><title>predicates_defined_on (813,759 samples, 0.36%)</title><rect x="61.8761%" y="85" width="0.3622%" height="15" fill="rgb(233,84,52)"/><text x="62.1261%" y="95.50"></text></g><g><title>specializes (3,344,581 samples, 1.49%)</title><rect x="62.2383%" y="101" width="1.4887%" height="15" fill="rgb(207,117,47)"/><text x="62.4883%" y="111.50"></text></g><g><title>param_env (1,910,642 samples, 0.85%)</title><rect x="62.8766%" y="85" width="0.8504%" height="15" fill="rgb(249,43,39)"/><text x="63.1266%" y="95.50"></text></g><g><title>def_span (840,430 samples, 0.37%)</title><rect x="63.3529%" y="69" width="0.3741%" height="15" fill="rgb(209,38,44)"/><text x="63.6029%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (737,599 samples, 0.33%)</title><rect x="63.3987%" y="53" width="0.3283%" height="15" fill="rgb(236,212,23)"/><text x="63.6487%" y="63.50"></text></g><g><title>trait_impls_of (1,194,774 samples, 0.53%)</title><rect x="63.7383%" y="101" width="0.5318%" height="15" fill="rgb(242,79,21)"/><text x="63.9883%" y="111.50"></text></g><g><title>implementations_of_trait (511,128 samples, 0.23%)</title><rect x="64.0425%" y="85" width="0.2275%" height="15" fill="rgb(211,96,35)"/><text x="64.2925%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (298,025 samples, 0.13%)</title><rect x="64.1374%" y="69" width="0.1327%" height="15" fill="rgb(253,215,40)"/><text x="64.3874%" y="79.50"></text></g><g><title>evaluate_obligation (15,788,703 samples, 7.03%)</title><rect x="57.2524%" y="117" width="7.0275%" height="15" fill="rgb(211,81,21)"/><text x="57.5024%" y="127.50">evaluate_..</text></g><g><title>evaluate_obligation (250,113 samples, 0.11%)</title><rect x="64.7881%" y="101" width="0.1113%" height="15" fill="rgb(208,190,38)"/><text x="65.0381%" y="111.50"></text></g><g><title>method_autoderef_steps (557,099 samples, 0.25%)</title><rect x="64.6566%" y="117" width="0.2480%" height="15" fill="rgb(235,213,38)"/><text x="64.9066%" y="127.50"></text></g><g><title>predicates_of (471,258 samples, 0.21%)</title><rect x="64.9985%" y="117" width="0.2098%" height="15" fill="rgb(237,122,38)"/><text x="65.2485%" y="127.50"></text></g><g><title>predicates_defined_on (321,327 samples, 0.14%)</title><rect x="65.0652%" y="101" width="0.1430%" height="15" fill="rgb(244,218,35)"/><text x="65.3152%" y="111.50"></text></g><g><title>associated_item (374,065 samples, 0.17%)</title><rect x="72.0691%" y="85" width="0.1665%" height="15" fill="rgb(240,68,47)"/><text x="72.3191%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (297,874 samples, 0.13%)</title><rect x="72.1030%" y="69" width="0.1326%" height="15" fill="rgb(210,16,53)"/><text x="72.3530%" y="79.50"></text></g><g><title>associated_items (536,046 samples, 0.24%)</title><rect x="72.0064%" y="101" width="0.2386%" height="15" fill="rgb(235,124,12)"/><text x="72.2564%" y="111.50"></text></g><g><title>dropck_outlives (317,222 samples, 0.14%)</title><rect x="72.2655%" y="101" width="0.1412%" height="15" fill="rgb(224,169,11)"/><text x="72.5155%" y="111.50"></text></g><g><title>generics_of (499,046 samples, 0.22%)</title><rect x="73.2390%" y="85" width="0.2221%" height="15" fill="rgb(250,166,2)"/><text x="73.4890%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (419,646 samples, 0.19%)</title><rect x="73.2743%" y="69" width="0.1868%" height="15" fill="rgb(242,216,29)"/><text x="73.5243%" y="79.50"></text></g><g><title>impl_trait_ref (346,706 samples, 0.15%)</title><rect x="73.4946%" y="85" width="0.1543%" height="15" fill="rgb(230,116,27)"/><text x="73.7446%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (264,454 samples, 0.12%)</title><rect x="73.5312%" y="69" width="0.1177%" height="15" fill="rgb(228,99,48)"/><text x="73.7812%" y="79.50"></text></g><g><title>specializes (391,454 samples, 0.17%)</title><rect x="73.7404%" y="85" width="0.1742%" height="15" fill="rgb(253,11,6)"/><text x="73.9904%" y="95.50"></text></g><g><title>param_env (245,204 samples, 0.11%)</title><rect x="73.8054%" y="69" width="0.1091%" height="15" fill="rgb(247,143,39)"/><text x="74.0554%" y="79.50"></text></g><g><title>trait_impls_of (371,956 samples, 0.17%)</title><rect x="73.9203%" y="85" width="0.1656%" height="15" fill="rgb(236,97,10)"/><text x="74.1703%" y="95.50"></text></g><g><title>evaluate_obligation (3,778,709 samples, 1.68%)</title><rect x="72.4067%" y="101" width="1.6819%" height="15" fill="rgb(233,208,19)"/><text x="72.6567%" y="111.50"></text></g><g><title>generics_of (772,639 samples, 0.34%)</title><rect x="74.1491%" y="101" width="0.3439%" height="15" fill="rgb(216,164,2)"/><text x="74.3991%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (586,497 samples, 0.26%)</title><rect x="74.2319%" y="85" width="0.2610%" height="15" fill="rgb(220,129,5)"/><text x="74.4819%" y="95.50"></text></g><g><title>method_autoderef_steps (247,260 samples, 0.11%)</title><rect x="74.6961%" y="101" width="0.1101%" height="15" fill="rgb(242,17,10)"/><text x="74.9461%" y="111.50"></text></g><g><title>predicates_of (617,695 samples, 0.27%)</title><rect x="74.8163%" y="101" width="0.2749%" height="15" fill="rgb(242,107,0)"/><text x="75.0663%" y="111.50"></text></g><g><title>predicates_defined_on (486,825 samples, 0.22%)</title><rect x="74.8746%" y="85" width="0.2167%" height="15" fill="rgb(251,28,31)"/><text x="75.1246%" y="95.50"></text></g><g><title>typeck (22,129,706 samples, 9.85%)</title><rect x="65.3481%" y="117" width="9.8499%" height="15" fill="rgb(233,223,10)"/><text x="65.5981%" y="127.50">typeck</text></g><g><title>item_bodies_checking (88,980,791 samples, 39.61%)</title><rect x="35.6196%" y="165" width="39.6051%" height="15" fill="rgb(215,21,27)"/><text x="35.8696%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (88,977,581 samples, 39.60%)</title><rect x="35.6210%" y="149" width="39.6037%" height="15" fill="rgb(232,23,21)"/><text x="35.8710%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (88,906,861 samples, 39.57%)</title><rect x="35.6525%" y="133" width="39.5722%" height="15" fill="rgb(244,5,23)"/><text x="35.9025%" y="143.50">typeck</text></g><g><title>item_types_checking (902,660 samples, 0.40%)</title><rect x="75.2247%" y="165" width="0.4018%" height="15" fill="rgb(226,81,46)"/><text x="75.4747%" y="175.50"></text></g><g><title>check_mod_item_types (900,340 samples, 0.40%)</title><rect x="75.2257%" y="149" width="0.4007%" height="15" fill="rgb(247,70,30)"/><text x="75.4757%" y="159.50"></text></g><g><title>fn_sig (336,275 samples, 0.15%)</title><rect x="75.7786%" y="133" width="0.1497%" height="15" fill="rgb(212,68,19)"/><text x="76.0286%" y="143.50"></text></g><g><title>is_late_bound_map (367,854 samples, 0.16%)</title><rect x="75.9764%" y="117" width="0.1637%" height="15" fill="rgb(240,187,13)"/><text x="76.2264%" y="127.50"></text></g><g><title>resolve_lifetimes (358,004 samples, 0.16%)</title><rect x="75.9807%" y="101" width="0.1593%" height="15" fill="rgb(223,113,26)"/><text x="76.2307%" y="111.50"></text></g><g><title>lint_levels (301,364 samples, 0.13%)</title><rect x="76.0060%" y="85" width="0.1341%" height="15" fill="rgb(206,192,2)"/><text x="76.2560%" y="95.50"></text></g><g><title>named_region_map (336,594 samples, 0.15%)</title><rect x="76.1401%" y="117" width="0.1498%" height="15" fill="rgb(241,108,4)"/><text x="76.3901%" y="127.50"></text></g><g><title>resolve_lifetimes (317,974 samples, 0.14%)</title><rect x="76.1484%" y="101" width="0.1415%" height="15" fill="rgb(247,173,49)"/><text x="76.3984%" y="111.50"></text></g><g><title>generics_of (826,668 samples, 0.37%)</title><rect x="75.9283%" y="133" width="0.3679%" height="15" fill="rgb(224,114,35)"/><text x="76.1783%" y="143.50"></text></g><g><title>predicates_of (598,469 samples, 0.27%)</title><rect x="76.3822%" y="133" width="0.2664%" height="15" fill="rgb(245,159,27)"/><text x="76.6322%" y="143.50"></text></g><g><title>predicates_defined_on (535,338 samples, 0.24%)</title><rect x="76.4103%" y="117" width="0.2383%" height="15" fill="rgb(245,172,44)"/><text x="76.6603%" y="127.50"></text></g><g><title>inferred_outlives_of (283,904 samples, 0.13%)</title><rect x="76.5222%" y="101" width="0.1264%" height="15" fill="rgb(236,23,11)"/><text x="76.7722%" y="111.50"></text></g><g><title>inferred_outlives_crate (260,283 samples, 0.12%)</title><rect x="76.5327%" y="85" width="0.1159%" height="15" fill="rgb(205,117,38)"/><text x="76.7827%" y="95.50"></text></g><g><title>type_collecting (2,434,908 samples, 1.08%)</title><rect x="75.6272%" y="165" width="1.0838%" height="15" fill="rgb(237,72,25)"/><text x="75.8772%" y="175.50"></text></g><g><title>collect_mod_item_types (2,424,368 samples, 1.08%)</title><rect x="75.6319%" y="149" width="1.0791%" height="15" fill="rgb(244,70,9)"/><text x="75.8819%" y="159.50"></text></g><g><title>adt_def (408,164 samples, 0.18%)</title><rect x="77.4540%" y="85" width="0.1817%" height="15" fill="rgb(217,125,39)"/><text x="77.7040%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (407,234 samples, 0.18%)</title><rect x="77.4544%" y="69" width="0.1813%" height="15" fill="rgb(235,36,10)"/><text x="77.7044%" y="79.50"></text></g><g><title>item_attrs (394,514 samples, 0.18%)</title><rect x="77.4600%" y="53" width="0.1756%" height="15" fill="rgb(251,123,47)"/><text x="77.7100%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (393,084 samples, 0.17%)</title><rect x="77.4607%" y="37" width="0.1750%" height="15" fill="rgb(221,13,13)"/><text x="77.7107%" y="47.50"></text></g><g><title>adt_sized_constraint (438,355 samples, 0.20%)</title><rect x="77.4523%" y="101" width="0.1951%" height="15" fill="rgb(238,131,9)"/><text x="77.7023%" y="111.50"></text></g><g><title>adt_sized_constraint (486,855 samples, 0.22%)</title><rect x="77.4324%" y="117" width="0.2167%" height="15" fill="rgb(211,50,8)"/><text x="77.6824%" y="127.50"></text></g><g><title>evaluate_obligation (829,811 samples, 0.37%)</title><rect x="77.3206%" y="133" width="0.3693%" height="15" fill="rgb(245,182,24)"/><text x="77.5706%" y="143.50"></text></g><g><title>region_scope_tree (452,426 samples, 0.20%)</title><rect x="77.8108%" y="133" width="0.2014%" height="15" fill="rgb(242,14,37)"/><text x="78.0608%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,859,996 samples, 1.27%)</title><rect x="76.8024%" y="149" width="1.2730%" height="15" fill="rgb(246,228,12)"/><text x="77.0524%" y="159.50"></text></g><g><title>evaluate_obligation (301,581 samples, 0.13%)</title><rect x="78.5685%" y="133" width="0.1342%" height="15" fill="rgb(213,55,15)"/><text x="78.8185%" y="143.50"></text></g><g><title>region_scope_tree (380,885 samples, 0.17%)</title><rect x="78.8856%" y="133" width="0.1695%" height="15" fill="rgb(209,9,3)"/><text x="79.1356%" y="143.50"></text></g><g><title>check_item_well_formed (2,267,504 samples, 1.01%)</title><rect x="78.0753%" y="149" width="1.0093%" height="15" fill="rgb(230,59,30)"/><text x="78.3253%" y="159.50"></text></g><g><title>analysis (177,578,209 samples, 79.04%)</title><rect x="0.2675%" y="197" width="79.0396%" height="15" fill="rgb(209,121,21)"/><text x="0.5175%" y="207.50">analysis</text></g><g><title>type_check_crate (115,314,975 samples, 51.33%)</title><rect x="27.9807%" y="181" width="51.3264%" height="15" fill="rgb(220,109,13)"/><text x="28.2307%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,828,506 samples, 2.59%)</title><rect x="76.7129%" y="165" width="2.5943%" height="15" fill="rgb(232,18,1)"/><text x="76.9629%" y="175.50">wf..</text></g><g><title>check_trait_item_well_formed (500,025 samples, 0.22%)</title><rect x="79.0846%" y="149" width="0.2226%" height="15" fill="rgb(215,41,42)"/><text x="79.3346%" y="159.50"></text></g><g><title>codegen_crate (458,905 samples, 0.20%)</title><rect x="79.3103%" y="197" width="0.2043%" height="15" fill="rgb(224,123,36)"/><text x="79.5603%" y="207.50"></text></g><g><title>macro_expand_crate (20,614,789 samples, 9.18%)</title><rect x="79.7163%" y="181" width="9.1756%" height="15" fill="rgb(240,125,3)"/><text x="79.9663%" y="191.50">macro_expand_..</text></g><g><title>expand_crate (20,604,959 samples, 9.17%)</title><rect x="79.7207%" y="165" width="9.1712%" height="15" fill="rgb(205,98,50)"/><text x="79.9707%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (5,284,100 samples, 2.35%)</title><rect x="86.5400%" y="149" width="2.3519%" height="15" fill="rgb(205,185,37)"/><text x="86.7900%" y="159.50">m..</text></g><g><title>metadata_register_crate (3,836,933 samples, 1.71%)</title><rect x="87.1841%" y="133" width="1.7078%" height="15" fill="rgb(238,207,15)"/><text x="87.4341%" y="143.50"></text></g><g><title>metadata_register_crate (466,804 samples, 0.21%)</title><rect x="88.6842%" y="117" width="0.2078%" height="15" fill="rgb(213,199,42)"/><text x="88.9342%" y="127.50"></text></g><g><title>metadata_register_crate (297,893 samples, 0.13%)</title><rect x="88.7593%" y="101" width="0.1326%" height="15" fill="rgb(235,201,11)"/><text x="89.0093%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (397,294 samples, 0.18%)</title><rect x="88.8936%" y="181" width="0.1768%" height="15" fill="rgb(207,46,11)"/><text x="89.1436%" y="191.50"></text></g><g><title>late_resolve_crate (3,039,224 samples, 1.35%)</title><rect x="89.1846%" y="165" width="1.3528%" height="15" fill="rgb(241,35,35)"/><text x="89.4346%" y="175.50"></text></g><g><title>configure_and_expand (24,951,318 samples, 11.11%)</title><rect x="79.5146%" y="197" width="11.1058%" height="15" fill="rgb(243,32,47)"/><text x="79.7646%" y="207.50">configure_and_ex..</text></g><g><title>resolve_crate (3,482,149 samples, 1.55%)</title><rect x="89.0704%" y="181" width="1.5499%" height="15" fill="rgb(247,202,23)"/><text x="89.3204%" y="191.50"></text></g><g><title>drop_ast (359,874 samples, 0.16%)</title><rect x="90.6203%" y="197" width="0.1602%" height="15" fill="rgb(219,102,11)"/><text x="90.8703%" y="207.50"></text></g><g><title>early_lint_checks (758,158 samples, 0.34%)</title><rect x="90.7922%" y="197" width="0.3375%" height="15" fill="rgb(243,110,44)"/><text x="91.0422%" y="207.50"></text></g><g><title>free_global_ctxt (5,205,328 samples, 2.32%)</title><rect x="91.1297%" y="197" width="2.3169%" height="15" fill="rgb(222,74,54)"/><text x="91.3797%" y="207.50">f..</text></g><g><title>generate_crate_metadata (1,454,296 samples, 0.65%)</title><rect x="93.4466%" y="197" width="0.6473%" height="15" fill="rgb(216,99,12)"/><text x="93.6966%" y="207.50"></text></g><g><title>hir_lowering (4,574,021 samples, 2.04%)</title><rect x="94.0939%" y="197" width="2.0359%" height="15" fill="rgb(226,22,26)"/><text x="94.3439%" y="207.50">h..</text></g><g><title>parse_crate (6,598,104 samples, 2.94%)</title><rect x="96.1599%" y="197" width="2.9368%" height="15" fill="rgb(217,163,10)"/><text x="96.4099%" y="207.50">pa..</text></g><g><title>self_profile_alloc_query_strings (1,339,515 samples, 0.60%)</title><rect x="99.1985%" y="197" width="0.5962%" height="15" fill="rgb(213,25,53)"/><text x="99.4485%" y="207.50"></text></g><g><title>all (224,669,873 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (224,669,873 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (350,243 samples, 0.16%)</title><rect x="99.8441%" y="197" width="0.1559%" height="15" fill="rgb(229,68,48)"/><text x="100.0941%" y="207.50"></text></g></svg></svg>