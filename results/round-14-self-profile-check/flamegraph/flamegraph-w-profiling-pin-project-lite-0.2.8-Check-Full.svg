<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (36,150 samples, 0.12%)</title><rect x="5.2552%" y="133" width="0.1207%" height="15" fill="rgb(227,0,7)"/><text x="5.5052%" y="143.50"></text></g><g><title>is_copy_raw (67,511 samples, 0.23%)</title><rect x="6.1275%" y="101" width="0.2254%" height="15" fill="rgb(217,0,24)"/><text x="6.3775%" y="111.50"></text></g><g><title>evaluate_obligation (60,841 samples, 0.20%)</title><rect x="6.1498%" y="85" width="0.2031%" height="15" fill="rgb(221,193,54)"/><text x="6.3998%" y="95.50"></text></g><g><title>needs_drop_raw (67,791 samples, 0.23%)</title><rect x="6.3529%" y="101" width="0.2264%" height="15" fill="rgb(248,212,6)"/><text x="6.6029%" y="111.50"></text></g><g><title>is_copy_raw (65,421 samples, 0.22%)</title><rect x="6.3608%" y="85" width="0.2184%" height="15" fill="rgb(208,68,35)"/><text x="6.6108%" y="95.50"></text></g><g><title>evaluate_obligation (61,111 samples, 0.20%)</title><rect x="6.3752%" y="69" width="0.2041%" height="15" fill="rgb(232,128,0)"/><text x="6.6252%" y="79.50"></text></g><g><title>predicates_of (33,121 samples, 0.11%)</title><rect x="6.4687%" y="53" width="0.1106%" height="15" fill="rgb(207,160,47)"/><text x="6.7187%" y="63.50"></text></g><g><title>predicates_defined_on (31,111 samples, 0.10%)</title><rect x="6.4754%" y="37" width="0.1039%" height="15" fill="rgb(228,23,34)"/><text x="6.7254%" y="47.50"></text></g><g><title>specialization_graph_of (47,210 samples, 0.16%)</title><rect x="6.7598%" y="85" width="0.1576%" height="15" fill="rgb(218,30,26)"/><text x="7.0098%" y="95.50"></text></g><g><title>resolve_instance (106,881 samples, 0.36%)</title><rect x="6.5793%" y="101" width="0.3569%" height="15" fill="rgb(220,122,19)"/><text x="6.8293%" y="111.50"></text></g><g><title>thir_body (31,640 samples, 0.11%)</title><rect x="6.9449%" y="101" width="0.1056%" height="15" fill="rgb(250,228,42)"/><text x="7.1949%" y="111.50"></text></g><g><title>mir_const (653,747 samples, 2.18%)</title><rect x="4.8851%" y="149" width="2.1829%" height="15" fill="rgb(240,193,28)"/><text x="5.1351%" y="159.50">m..</text></g><g><title>unsafety_check_result (506,776 samples, 1.69%)</title><rect x="5.3759%" y="133" width="1.6921%" height="15" fill="rgb(216,20,37)"/><text x="5.6259%" y="143.50"></text></g><g><title>mir_built (428,975 samples, 1.43%)</title><rect x="5.6356%" y="117" width="1.4324%" height="15" fill="rgb(206,188,39)"/><text x="5.8856%" y="127.50"></text></g><g><title>mir_promoted (740,728 samples, 2.47%)</title><rect x="4.6163%" y="165" width="2.4733%" height="15" fill="rgb(217,207,13)"/><text x="4.8663%" y="175.50">mi..</text></g><g><title>MIR_borrow_checking (1,530,328 samples, 5.11%)</title><rect x="2.4118%" y="197" width="5.1098%" height="15" fill="rgb(231,73,38)"/><text x="2.6618%" y="207.50">MIR_bo..</text></g><g><title>mir_borrowck (1,522,618 samples, 5.08%)</title><rect x="2.4375%" y="181" width="5.0840%" height="15" fill="rgb(225,20,46)"/><text x="2.6875%" y="191.50">mir_bo..</text></g><g><title>type_op_prove_predicate (77,350 samples, 0.26%)</title><rect x="7.2633%" y="165" width="0.2583%" height="15" fill="rgb(210,31,41)"/><text x="7.5133%" y="175.50"></text></g><g><title>hir_module_items (64,831 samples, 0.22%)</title><rect x="7.5345%" y="197" width="0.2165%" height="15" fill="rgb(221,200,47)"/><text x="7.7845%" y="207.50"></text></g><g><title>get_lang_items (32,411 samples, 0.11%)</title><rect x="8.1686%" y="149" width="0.1082%" height="15" fill="rgb(226,26,5)"/><text x="8.4186%" y="159.50"></text></g><g><title>codegen_fn_attrs (35,130 samples, 0.12%)</title><rect x="8.4046%" y="133" width="0.1173%" height="15" fill="rgb(249,33,26)"/><text x="8.6546%" y="143.50"></text></g><g><title>should_inherit_track_caller (74,911 samples, 0.25%)</title><rect x="8.2769%" y="149" width="0.2501%" height="15" fill="rgb(235,183,28)"/><text x="8.5269%" y="159.50"></text></g><g><title>codegen_fn_attrs (159,492 samples, 0.53%)</title><rect x="8.0619%" y="165" width="0.5325%" height="15" fill="rgb(221,5,38)"/><text x="8.3119%" y="175.50"></text></g><g><title>check_mod_attrs (231,713 samples, 0.77%)</title><rect x="7.8214%" y="181" width="0.7737%" height="15" fill="rgb(247,18,42)"/><text x="8.0714%" y="191.50"></text></g><g><title>lookup_deprecation_entry (41,170 samples, 0.14%)</title><rect x="8.8448%" y="165" width="0.1375%" height="15" fill="rgb(241,131,45)"/><text x="9.0948%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (109,181 samples, 0.36%)</title><rect x="8.7165%" y="181" width="0.3646%" height="15" fill="rgb(249,31,29)"/><text x="8.9665%" y="191.50"></text></g><g><title>misc_checking_1 (429,815 samples, 1.44%)</title><rect x="7.7521%" y="197" width="1.4352%" height="15" fill="rgb(225,111,53)"/><text x="8.0021%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (53,100 samples, 0.18%)</title><rect x="9.1912%" y="181" width="0.1773%" height="15" fill="rgb(238,160,17)"/><text x="9.4412%" y="191.50"></text></g><g><title>check_mod_liveness (41,720 samples, 0.14%)</title><rect x="9.2292%" y="165" width="0.1393%" height="15" fill="rgb(214,148,48)"/><text x="9.4792%" y="175.50"></text></g><g><title>misc_checking_2 (114,761 samples, 0.38%)</title><rect x="9.1873%" y="197" width="0.3832%" height="15" fill="rgb(232,36,49)"/><text x="9.4373%" y="207.50"></text></g><g><title>match_checking (60,501 samples, 0.20%)</title><rect x="9.3685%" y="181" width="0.2020%" height="15" fill="rgb(209,103,24)"/><text x="9.6185%" y="191.50"></text></g><g><title>check_match (57,491 samples, 0.19%)</title><rect x="9.3785%" y="165" width="0.1920%" height="15" fill="rgb(229,88,8)"/><text x="9.6285%" y="175.50"></text></g><g><title>check_private_in_public (38,471 samples, 0.13%)</title><rect x="9.6002%" y="181" width="0.1285%" height="15" fill="rgb(213,181,19)"/><text x="9.8502%" y="191.50"></text></g><g><title>death_checking (127,941 samples, 0.43%)</title><rect x="9.7286%" y="181" width="0.4272%" height="15" fill="rgb(254,191,54)"/><text x="9.9786%" y="191.50"></text></g><g><title>lint_levels (47,590 samples, 0.16%)</title><rect x="9.9969%" y="165" width="0.1589%" height="15" fill="rgb(241,83,37)"/><text x="10.2469%" y="175.50"></text></g><g><title>param_env (72,611 samples, 0.24%)</title><rect x="11.5082%" y="149" width="0.2424%" height="15" fill="rgb(233,36,39)"/><text x="11.7582%" y="159.50"></text></g><g><title>predicates_of (31,631 samples, 0.11%)</title><rect x="11.6450%" y="133" width="0.1056%" height="15" fill="rgb(226,3,54)"/><text x="11.8950%" y="143.50"></text></g><g><title>trait_impls_of (57,660 samples, 0.19%)</title><rect x="11.7506%" y="149" width="0.1925%" height="15" fill="rgb(245,192,40)"/><text x="12.0006%" y="159.50"></text></g><g><title>crate_lints (1,404,076 samples, 4.69%)</title><rect x="10.1603%" y="165" width="4.6882%" height="15" fill="rgb(238,167,29)"/><text x="10.4103%" y="175.50">crate..</text></g><g><title>type_of (870,131 samples, 2.91%)</title><rect x="11.9432%" y="149" width="2.9054%" height="15" fill="rgb(232,182,51)"/><text x="12.1932%" y="159.50">ty..</text></g><g><title>metadata_decode_entry_type_of (788,809 samples, 2.63%)</title><rect x="12.2147%" y="133" width="2.6338%" height="15" fill="rgb(231,60,39)"/><text x="12.4647%" y="143.50">me..</text></g><g><title>lint_checking (1,439,276 samples, 4.81%)</title><rect x="10.1558%" y="181" width="4.8058%" height="15" fill="rgb(208,69,12)"/><text x="10.4058%" y="191.50">lint_c..</text></g><g><title>module_lints (33,850 samples, 0.11%)</title><rect x="14.8485%" y="165" width="0.1130%" height="15" fill="rgb(235,93,37)"/><text x="15.0985%" y="175.50"></text></g><g><title>lint_mod (31,970 samples, 0.11%)</title><rect x="14.8548%" y="149" width="0.1067%" height="15" fill="rgb(213,116,39)"/><text x="15.1048%" y="159.50"></text></g><g><title>privacy_access_levels (49,400 samples, 0.16%)</title><rect x="14.9616%" y="181" width="0.1649%" height="15" fill="rgb(222,207,29)"/><text x="15.2116%" y="191.50"></text></g><g><title>privacy_checking_modules (73,651 samples, 0.25%)</title><rect x="15.1265%" y="181" width="0.2459%" height="15" fill="rgb(206,96,30)"/><text x="15.3765%" y="191.50"></text></g><g><title>check_mod_privacy (72,471 samples, 0.24%)</title><rect x="15.1305%" y="165" width="0.2420%" height="15" fill="rgb(218,138,4)"/><text x="15.3805%" y="175.50"></text></g><g><title>misc_checking_3 (1,750,289 samples, 5.84%)</title><rect x="9.5705%" y="197" width="5.8442%" height="15" fill="rgb(250,191,14)"/><text x="9.8205%" y="207.50">misc_ch..</text></g><g><title>impl_trait_ref (74,400 samples, 0.25%)</title><rect x="15.7995%" y="133" width="0.2484%" height="15" fill="rgb(239,60,40)"/><text x="16.0495%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (70,510 samples, 0.24%)</title><rect x="15.8125%" y="117" width="0.2354%" height="15" fill="rgb(206,27,48)"/><text x="16.0625%" y="127.50"></text></g><g><title>coherent_trait (181,952 samples, 0.61%)</title><rect x="15.5275%" y="165" width="0.6075%" height="15" fill="rgb(225,35,8)"/><text x="15.7775%" y="175.50"></text></g><g><title>specialization_graph_of (176,322 samples, 0.59%)</title><rect x="15.5463%" y="149" width="0.5887%" height="15" fill="rgb(250,213,24)"/><text x="15.7963%" y="159.50"></text></g><g><title>coherence_checking (230,693 samples, 0.77%)</title><rect x="15.4811%" y="181" width="0.7703%" height="15" fill="rgb(247,123,22)"/><text x="15.7311%" y="191.50"></text></g><g><title>dropck_outlives (35,940 samples, 0.12%)</title><rect x="18.7730%" y="133" width="0.1200%" height="15" fill="rgb(231,138,38)"/><text x="19.0230%" y="143.50"></text></g><g><title>evaluate_obligation (44,600 samples, 0.15%)</title><rect x="18.8930%" y="133" width="0.1489%" height="15" fill="rgb(231,145,46)"/><text x="19.1430%" y="143.50"></text></g><g><title>item_attrs (55,230 samples, 0.18%)</title><rect x="19.1762%" y="133" width="0.1844%" height="15" fill="rgb(251,118,11)"/><text x="19.4262%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (53,750 samples, 0.18%)</title><rect x="19.1811%" y="117" width="0.1795%" height="15" fill="rgb(217,147,25)"/><text x="19.4311%" y="127.50"></text></g><g><title>predicates_of (34,620 samples, 0.12%)</title><rect x="19.3861%" y="133" width="0.1156%" height="15" fill="rgb(247,81,37)"/><text x="19.6361%" y="143.50"></text></g><g><title>item_bodies_checking (980,081 samples, 3.27%)</title><rect x="16.2945%" y="181" width="3.2725%" height="15" fill="rgb(209,12,38)"/><text x="16.5445%" y="191.50">ite..</text></g><g><title>typeck_item_bodies (978,601 samples, 3.27%)</title><rect x="16.2995%" y="165" width="3.2676%" height="15" fill="rgb(227,1,9)"/><text x="16.5495%" y="175.50">typ..</text></g><g><title>typeck (972,581 samples, 3.25%)</title><rect x="16.3196%" y="149" width="3.2475%" height="15" fill="rgb(248,47,43)"/><text x="16.5696%" y="159.50">typ..</text></g><g><title>item_types_checking (130,541 samples, 0.44%)</title><rect x="19.5670%" y="181" width="0.4359%" height="15" fill="rgb(221,10,30)"/><text x="19.8170%" y="191.50"></text></g><g><title>check_mod_item_types (128,661 samples, 0.43%)</title><rect x="19.5733%" y="165" width="0.4296%" height="15" fill="rgb(210,229,1)"/><text x="19.8233%" y="175.50"></text></g><g><title>fn_sig (64,411 samples, 0.22%)</title><rect x="20.2485%" y="149" width="0.2151%" height="15" fill="rgb(222,148,37)"/><text x="20.4985%" y="159.50"></text></g><g><title>late_bound_vars_map (37,521 samples, 0.13%)</title><rect x="20.3383%" y="133" width="0.1253%" height="15" fill="rgb(234,67,33)"/><text x="20.5883%" y="143.50"></text></g><g><title>resolve_lifetimes (32,491 samples, 0.11%)</title><rect x="20.3551%" y="117" width="0.1085%" height="15" fill="rgb(247,98,35)"/><text x="20.6051%" y="127.50"></text></g><g><title>generics_of (59,401 samples, 0.20%)</title><rect x="20.4636%" y="149" width="0.1983%" height="15" fill="rgb(247,138,52)"/><text x="20.7136%" y="159.50"></text></g><g><title>explicit_predicates_of (66,120 samples, 0.22%)</title><rect x="20.7790%" y="117" width="0.2208%" height="15" fill="rgb(213,79,30)"/><text x="21.0290%" y="127.50"></text></g><g><title>predicates_of (192,311 samples, 0.64%)</title><rect x="20.7117%" y="149" width="0.6421%" height="15" fill="rgb(246,177,23)"/><text x="20.9617%" y="159.50"></text></g><g><title>predicates_defined_on (184,761 samples, 0.62%)</title><rect x="20.7369%" y="133" width="0.6169%" height="15" fill="rgb(230,62,27)"/><text x="20.9869%" y="143.50"></text></g><g><title>inferred_outlives_of (106,041 samples, 0.35%)</title><rect x="20.9997%" y="117" width="0.3541%" height="15" fill="rgb(216,154,8)"/><text x="21.2497%" y="127.50"></text></g><g><title>inferred_outlives_crate (97,281 samples, 0.32%)</title><rect x="21.0290%" y="101" width="0.3248%" height="15" fill="rgb(244,35,45)"/><text x="21.2790%" y="111.50"></text></g><g><title>type_of (42,971 samples, 0.14%)</title><rect x="21.2103%" y="85" width="0.1435%" height="15" fill="rgb(251,115,12)"/><text x="21.4603%" y="95.50"></text></g><g><title>type_collecting (449,305 samples, 1.50%)</title><rect x="20.0060%" y="181" width="1.5002%" height="15" fill="rgb(240,54,50)"/><text x="20.2560%" y="191.50"></text></g><g><title>collect_mod_item_types (438,305 samples, 1.46%)</title><rect x="20.0427%" y="165" width="1.4635%" height="15" fill="rgb(233,84,52)"/><text x="20.2927%" y="175.50"></text></g><g><title>type_of (45,641 samples, 0.15%)</title><rect x="21.3538%" y="149" width="0.1524%" height="15" fill="rgb(207,117,47)"/><text x="21.6038%" y="159.50"></text></g><g><title>evaluate_obligation (89,191 samples, 0.30%)</title><rect x="22.0247%" y="149" width="0.2978%" height="15" fill="rgb(249,43,39)"/><text x="22.2747%" y="159.50"></text></g><g><title>implied_outlives_bounds (33,140 samples, 0.11%)</title><rect x="22.3225%" y="149" width="0.1107%" height="15" fill="rgb(209,38,44)"/><text x="22.5725%" y="159.50"></text></g><g><title>check_impl_item_well_formed (288,303 samples, 0.96%)</title><rect x="21.5825%" y="165" width="0.9626%" height="15" fill="rgb(236,212,23)"/><text x="21.8325%" y="175.50"></text></g><g><title>implied_outlives_bounds (58,851 samples, 0.20%)</title><rect x="23.6220%" y="149" width="0.1965%" height="15" fill="rgb(242,79,21)"/><text x="23.8720%" y="159.50"></text></g><g><title>param_env (138,041 samples, 0.46%)</title><rect x="23.8185%" y="149" width="0.4609%" height="15" fill="rgb(211,96,35)"/><text x="24.0685%" y="159.50"></text></g><g><title>analysis (6,705,065 samples, 22.39%)</title><rect x="2.1142%" y="213" width="22.3883%" height="15" fill="rgb(253,215,40)"/><text x="2.3642%" y="223.50">analysis</text></g><g><title>type_check_crate (2,721,700 samples, 9.09%)</title><rect x="15.4147%" y="197" width="9.0878%" height="15" fill="rgb(211,81,21)"/><text x="15.6647%" y="207.50">type_check_cr..</text></g><g><title>wf_checking (896,890 samples, 2.99%)</title><rect x="21.5078%" y="181" width="2.9947%" height="15" fill="rgb(208,190,38)"/><text x="21.7578%" y="191.50">wf_..</text></g><g><title>check_item_well_formed (586,207 samples, 1.96%)</title><rect x="22.5451%" y="165" width="1.9573%" height="15" fill="rgb(235,213,38)"/><text x="22.7951%" y="175.50">c..</text></g><g><title>variances_of (44,450 samples, 0.15%)</title><rect x="24.3541%" y="149" width="0.1484%" height="15" fill="rgb(237,122,38)"/><text x="24.6041%" y="159.50"></text></g><g><title>crate_variances (41,510 samples, 0.14%)</title><rect x="24.3639%" y="133" width="0.1386%" height="15" fill="rgb(244,218,35)"/><text x="24.6139%" y="143.50"></text></g><g><title>codegen_crate (314,884 samples, 1.05%)</title><rect x="24.5406%" y="213" width="1.0514%" height="15" fill="rgb(240,68,47)"/><text x="24.7906%" y="223.50"></text></g><g><title>AST_validation (143,541 samples, 0.48%)</title><rect x="26.3423%" y="197" width="0.4793%" height="15" fill="rgb(210,16,53)"/><text x="26.5923%" y="207.50"></text></g><g><title>crate_injection (104,141 samples, 0.35%)</title><rect x="26.9002%" y="197" width="0.3477%" height="15" fill="rgb(235,124,12)"/><text x="27.1502%" y="207.50"></text></g><g><title>macro_expand_crate (9,677,029 samples, 32.31%)</title><rect x="27.2479%" y="197" width="32.3117%" height="15" fill="rgb(224,169,11)"/><text x="27.4979%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (9,655,238 samples, 32.24%)</title><rect x="27.3207%" y="181" width="32.2389%" height="15" fill="rgb(250,166,2)"/><text x="27.5707%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (211,592 samples, 0.71%)</title><rect x="58.8531%" y="165" width="0.7065%" height="15" fill="rgb(242,216,29)"/><text x="59.1031%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (526,835 samples, 1.76%)</title><rect x="59.5742%" y="197" width="1.7591%" height="15" fill="rgb(230,116,27)"/><text x="59.8242%" y="207.50"></text></g><g><title>finalize_imports (154,292 samples, 0.52%)</title><rect x="61.3513%" y="181" width="0.5152%" height="15" fill="rgb(228,99,48)"/><text x="61.6013%" y="191.50"></text></g><g><title>late_resolve_crate (536,326 samples, 1.79%)</title><rect x="61.9228%" y="181" width="1.7908%" height="15" fill="rgb(253,11,6)"/><text x="62.1728%" y="191.50">l..</text></g><g><title>configure_and_expand (11,460,108 samples, 38.27%)</title><rect x="25.5920%" y="213" width="38.2654%" height="15" fill="rgb(247,143,39)"/><text x="25.8420%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (755,939 samples, 2.52%)</title><rect x="61.3333%" y="197" width="2.5241%" height="15" fill="rgb(236,97,10)"/><text x="61.5833%" y="207.50">re..</text></g><g><title>drop_ast (32,100 samples, 0.11%)</title><rect x="63.8574%" y="213" width="0.1072%" height="15" fill="rgb(233,208,19)"/><text x="64.1074%" y="223.50"></text></g><g><title>early_lint_checks (111,491 samples, 0.37%)</title><rect x="64.0114%" y="213" width="0.3723%" height="15" fill="rgb(216,164,2)"/><text x="64.2614%" y="223.50"></text></g><g><title>free_global_ctxt (1,350,645 samples, 4.51%)</title><rect x="64.3837%" y="213" width="4.5098%" height="15" fill="rgb(220,129,5)"/><text x="64.6337%" y="223.50">free_..</text></g><g><title>crate_hash (58,771 samples, 0.20%)</title><rect x="71.3496%" y="197" width="0.1962%" height="15" fill="rgb(242,17,10)"/><text x="71.5996%" y="207.50"></text></g><g><title>generate_crate_metadata (881,280 samples, 2.94%)</title><rect x="68.8935%" y="213" width="2.9426%" height="15" fill="rgb(242,107,0)"/><text x="69.1435%" y="223.50">ge..</text></g><g><title>hir_lowering (1,909,372 samples, 6.38%)</title><rect x="71.8361%" y="213" width="6.3754%" height="15" fill="rgb(251,28,31)"/><text x="72.0861%" y="223.50">hir_lowe..</text></g><g><title>link (56,260 samples, 0.19%)</title><rect x="78.2115%" y="213" width="0.1879%" height="15" fill="rgb(233,223,10)"/><text x="78.4615%" y="223.50"></text></g><g><title>parse_crate (5,537,912 samples, 18.49%)</title><rect x="78.3994%" y="213" width="18.4911%" height="15" fill="rgb(215,21,27)"/><text x="78.6494%" y="223.50">parse_crate</text></g><g><title>prepare_outputs (175,332 samples, 0.59%)</title><rect x="96.9184%" y="213" width="0.5854%" height="15" fill="rgb(232,23,21)"/><text x="97.1684%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (304,533 samples, 1.02%)</title><rect x="97.5038%" y="213" width="1.0168%" height="15" fill="rgb(244,5,23)"/><text x="97.7538%" y="223.50"></text></g><g><title>setup_global_ctxt (85,791 samples, 0.29%)</title><rect x="98.5581%" y="213" width="0.2865%" height="15" fill="rgb(226,81,46)"/><text x="98.8081%" y="223.50"></text></g><g><title>all (29,949,015 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (29,949,015 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (346,034 samples, 1.16%)</title><rect x="98.8446%" y="213" width="1.1554%" height="15" fill="rgb(240,187,13)"/><text x="99.0946%" y="223.50"></text></g></svg></svg>