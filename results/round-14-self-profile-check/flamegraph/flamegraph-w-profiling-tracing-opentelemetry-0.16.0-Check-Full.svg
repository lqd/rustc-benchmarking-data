<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (333,473 samples, 0.22%)</title><rect x="11.3333%" y="149" width="0.2177%" height="15" fill="rgb(227,0,7)"/><text x="11.5833%" y="159.50"></text></g><g><title>param_env (519,066 samples, 0.34%)</title><rect x="12.8204%" y="117" width="0.3389%" height="15" fill="rgb(217,0,24)"/><text x="13.0704%" y="127.50"></text></g><g><title>item_attrs (371,831 samples, 0.24%)</title><rect x="13.6252%" y="85" width="0.2428%" height="15" fill="rgb(221,193,54)"/><text x="13.8752%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (348,511 samples, 0.23%)</title><rect x="13.6404%" y="69" width="0.2276%" height="15" fill="rgb(248,212,6)"/><text x="13.8904%" y="79.50"></text></g><g><title>codegen_fn_attrs (546,534 samples, 0.36%)</title><rect x="13.5332%" y="101" width="0.3569%" height="15" fill="rgb(208,68,35)"/><text x="13.7832%" y="111.50"></text></g><g><title>is_copy_raw (189,313 samples, 0.12%)</title><rect x="16.0678%" y="85" width="0.1236%" height="15" fill="rgb(232,128,0)"/><text x="16.3178%" y="95.50"></text></g><g><title>adt_drop_tys (214,220 samples, 0.14%)</title><rect x="16.3543%" y="53" width="0.1399%" height="15" fill="rgb(207,160,47)"/><text x="16.6043%" y="63.50"></text></g><g><title>is_copy_raw (225,973 samples, 0.15%)</title><rect x="16.4973%" y="53" width="0.1475%" height="15" fill="rgb(228,23,34)"/><text x="16.7473%" y="63.50"></text></g><g><title>evaluate_obligation (182,542 samples, 0.12%)</title><rect x="16.5257%" y="37" width="0.1192%" height="15" fill="rgb(218,30,26)"/><text x="16.7757%" y="47.50"></text></g><g><title>adt_drop_tys (659,584 samples, 0.43%)</title><rect x="16.3195%" y="69" width="0.4307%" height="15" fill="rgb(220,122,19)"/><text x="16.5695%" y="79.50"></text></g><g><title>is_copy_raw (1,217,184 samples, 0.79%)</title><rect x="16.7502%" y="69" width="0.7947%" height="15" fill="rgb(250,228,42)"/><text x="17.0002%" y="79.50"></text></g><g><title>evaluate_obligation (971,652 samples, 0.63%)</title><rect x="16.9105%" y="53" width="0.6344%" height="15" fill="rgb(240,193,28)"/><text x="17.1605%" y="63.50"></text></g><g><title>needs_drop_raw (2,132,132 samples, 1.39%)</title><rect x="16.1914%" y="85" width="1.3922%" height="15" fill="rgb(216,20,37)"/><text x="16.4414%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (227,931 samples, 0.15%)</title><rect x="17.7412%" y="69" width="0.1488%" height="15" fill="rgb(206,188,39)"/><text x="17.9912%" y="79.50"></text></g><g><title>impl_parent (1,449,191 samples, 0.95%)</title><rect x="19.0774%" y="53" width="0.9462%" height="15" fill="rgb(217,207,13)"/><text x="19.3274%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (780,725 samples, 0.51%)</title><rect x="19.5138%" y="37" width="0.5098%" height="15" fill="rgb(231,73,38)"/><text x="19.7638%" y="47.50"></text></g><g><title>specialization_graph_of (6,707,504 samples, 4.38%)</title><rect x="17.9539%" y="69" width="4.3796%" height="15" fill="rgb(225,20,46)"/><text x="18.2039%" y="79.50">speci..</text></g><g><title>impl_trait_ref (3,537,677 samples, 2.31%)</title><rect x="20.0236%" y="53" width="2.3099%" height="15" fill="rgb(210,31,41)"/><text x="20.2736%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,081,339 samples, 2.01%)</title><rect x="20.3216%" y="37" width="2.0119%" height="15" fill="rgb(221,200,47)"/><text x="20.5716%" y="47.50">m..</text></g><g><title>resolve_instance (7,390,441 samples, 4.83%)</title><rect x="17.5836%" y="85" width="4.8255%" height="15" fill="rgb(226,26,5)"/><text x="17.8336%" y="95.50">resolv..</text></g><g><title>thir_body (1,257,433 samples, 0.82%)</title><rect x="22.4359%" y="85" width="0.8210%" height="15" fill="rgb(249,33,26)"/><text x="22.6859%" y="95.50"></text></g><g><title>mir_const (16,955,208 samples, 11.07%)</title><rect x="12.2119%" y="133" width="11.0708%" height="15" fill="rgb(235,183,28)"/><text x="12.4619%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (15,504,150 samples, 10.12%)</title><rect x="13.1593%" y="117" width="10.1233%" height="15" fill="rgb(221,5,38)"/><text x="13.4093%" y="127.50">unsafety_check_..</text></g><g><title>mir_built (14,385,007 samples, 9.39%)</title><rect x="13.8901%" y="101" width="9.3926%" height="15" fill="rgb(247,18,42)"/><text x="14.1401%" y="111.50">mir_built</text></g><g><title>mir_promoted (17,924,309 samples, 11.70%)</title><rect x="11.6014%" y="149" width="11.7035%" height="15" fill="rgb(241,131,45)"/><text x="11.8514%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,033,137 samples, 0.67%)</title><rect x="23.3109%" y="149" width="0.6746%" height="15" fill="rgb(249,31,29)"/><text x="23.5609%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (219,735 samples, 0.14%)</title><rect x="23.9855%" y="149" width="0.1435%" height="15" fill="rgb(225,111,53)"/><text x="24.2355%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,520,227 samples, 2.30%)</title><rect x="24.1313%" y="149" width="2.2985%" height="15" fill="rgb(238,160,17)"/><text x="24.3813%" y="159.50">t..</text></g><g><title>evaluate_obligation (357,035 samples, 0.23%)</title><rect x="26.1967%" y="133" width="0.2331%" height="15" fill="rgb(214,148,48)"/><text x="26.4467%" y="143.50"></text></g><g><title>MIR_borrow_checking (39,699,291 samples, 25.92%)</title><rect x="0.5166%" y="181" width="25.9213%" height="15" fill="rgb(232,36,49)"/><text x="0.7666%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (39,572,259 samples, 25.84%)</title><rect x="0.5996%" y="165" width="25.8384%" height="15" fill="rgb(209,103,24)"/><text x="0.8496%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (273,212 samples, 0.18%)</title><rect x="26.6857%" y="149" width="0.1784%" height="15" fill="rgb(229,88,8)"/><text x="26.9357%" y="159.50"></text></g><g><title>check_mod_attrs (463,226 samples, 0.30%)</title><rect x="26.5617%" y="165" width="0.3025%" height="15" fill="rgb(213,181,19)"/><text x="26.8117%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (315,544 samples, 0.21%)</title><rect x="26.9711%" y="165" width="0.2060%" height="15" fill="rgb(254,191,54)"/><text x="27.2211%" y="175.50"></text></g><g><title>misc_checking_1 (1,005,531 samples, 0.66%)</title><rect x="26.5501%" y="181" width="0.6566%" height="15" fill="rgb(241,83,37)"/><text x="26.8001%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (617,177 samples, 0.40%)</title><rect x="27.2079%" y="165" width="0.4030%" height="15" fill="rgb(233,36,39)"/><text x="27.4579%" y="175.50"></text></g><g><title>check_mod_liveness (525,147 samples, 0.34%)</title><rect x="27.2680%" y="149" width="0.3429%" height="15" fill="rgb(226,3,54)"/><text x="27.5180%" y="159.50"></text></g><g><title>type_uninhabited_from (153,161 samples, 0.10%)</title><rect x="27.5109%" y="133" width="0.1000%" height="15" fill="rgb(245,192,40)"/><text x="27.7609%" y="143.50"></text></g><g><title>mir_borrowck (382,694 samples, 0.25%)</title><rect x="28.2246%" y="53" width="0.2499%" height="15" fill="rgb(238,167,29)"/><text x="28.4746%" y="63.50"></text></g><g><title>eval_to_const_value_raw (740,728 samples, 0.48%)</title><rect x="27.9918%" y="133" width="0.4837%" height="15" fill="rgb(232,182,51)"/><text x="28.2418%" y="143.50"></text></g><g><title>eval_to_const_value_raw (734,068 samples, 0.48%)</title><rect x="27.9961%" y="117" width="0.4793%" height="15" fill="rgb(231,60,39)"/><text x="28.2461%" y="127.50"></text></g><g><title>eval_to_allocation_raw (724,008 samples, 0.47%)</title><rect x="28.0027%" y="101" width="0.4727%" height="15" fill="rgb(208,69,12)"/><text x="28.2527%" y="111.50"></text></g><g><title>mir_for_ctfe (555,946 samples, 0.36%)</title><rect x="28.1124%" y="85" width="0.3630%" height="15" fill="rgb(235,93,37)"/><text x="28.3624%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (511,986 samples, 0.33%)</title><rect x="28.1411%" y="69" width="0.3343%" height="15" fill="rgb(213,116,39)"/><text x="28.3911%" y="79.50"></text></g><g><title>mir_const_qualif (181,263 samples, 0.12%)</title><rect x="28.4812%" y="133" width="0.1184%" height="15" fill="rgb(222,207,29)"/><text x="28.7312%" y="143.50"></text></g><g><title>misc_checking_2 (2,247,565 samples, 1.47%)</title><rect x="27.2066%" y="181" width="1.4675%" height="15" fill="rgb(206,96,30)"/><text x="27.4566%" y="191.50"></text></g><g><title>match_checking (1,628,448 samples, 1.06%)</title><rect x="27.6109%" y="165" width="1.0633%" height="15" fill="rgb(218,138,4)"/><text x="27.8609%" y="175.50"></text></g><g><title>check_match (1,595,687 samples, 1.04%)</title><rect x="27.6323%" y="149" width="1.0419%" height="15" fill="rgb(250,191,14)"/><text x="27.8823%" y="159.50"></text></g><g><title>check_private_in_public (421,925 samples, 0.28%)</title><rect x="28.6795%" y="165" width="0.2755%" height="15" fill="rgb(239,60,40)"/><text x="28.9295%" y="175.50"></text></g><g><title>death_checking (307,703 samples, 0.20%)</title><rect x="28.9550%" y="165" width="0.2009%" height="15" fill="rgb(206,27,48)"/><text x="29.2050%" y="175.50"></text></g><g><title>param_env (311,225 samples, 0.20%)</title><rect x="29.8284%" y="133" width="0.2032%" height="15" fill="rgb(225,35,8)"/><text x="30.0784%" y="143.50"></text></g><g><title>crate_lints (3,346,707 samples, 2.19%)</title><rect x="29.1567%" y="149" width="2.1852%" height="15" fill="rgb(250,213,24)"/><text x="29.4067%" y="159.50">c..</text></g><g><title>type_of (1,925,181 samples, 1.26%)</title><rect x="30.0849%" y="133" width="1.2570%" height="15" fill="rgb(247,123,22)"/><text x="30.3349%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,560,145 samples, 1.02%)</title><rect x="30.3233%" y="117" width="1.0187%" height="15" fill="rgb(231,138,38)"/><text x="30.5733%" y="127.50"></text></g><g><title>lint_checking (3,755,832 samples, 2.45%)</title><rect x="29.1559%" y="165" width="2.4523%" height="15" fill="rgb(231,145,46)"/><text x="29.4059%" y="175.50">li..</text></g><g><title>module_lints (407,845 samples, 0.27%)</title><rect x="31.3420%" y="149" width="0.2663%" height="15" fill="rgb(251,118,11)"/><text x="31.5920%" y="159.50"></text></g><g><title>lint_mod (403,435 samples, 0.26%)</title><rect x="31.3448%" y="133" width="0.2634%" height="15" fill="rgb(217,147,25)"/><text x="31.5948%" y="143.50"></text></g><g><title>privacy_access_levels (183,662 samples, 0.12%)</title><rect x="31.6083%" y="165" width="0.1199%" height="15" fill="rgb(247,81,37)"/><text x="31.8583%" y="175.50"></text></g><g><title>privacy_checking_modules (1,071,291 samples, 0.70%)</title><rect x="31.7282%" y="165" width="0.6995%" height="15" fill="rgb(209,12,38)"/><text x="31.9782%" y="175.50"></text></g><g><title>check_mod_privacy (1,068,351 samples, 0.70%)</title><rect x="31.7301%" y="149" width="0.6976%" height="15" fill="rgb(227,1,9)"/><text x="31.9801%" y="159.50"></text></g><g><title>misc_checking_3 (5,759,943 samples, 3.76%)</title><rect x="28.6742%" y="181" width="3.7609%" height="15" fill="rgb(248,47,43)"/><text x="28.9242%" y="191.50">misc..</text></g><g><title>impl_parent (347,623 samples, 0.23%)</title><rect x="32.7745%" y="117" width="0.2270%" height="15" fill="rgb(221,10,30)"/><text x="33.0245%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (278,072 samples, 0.18%)</title><rect x="32.8199%" y="101" width="0.1816%" height="15" fill="rgb(210,229,1)"/><text x="33.0699%" y="111.50"></text></g><g><title>impl_trait_ref (805,461 samples, 0.53%)</title><rect x="33.0014%" y="117" width="0.5259%" height="15" fill="rgb(222,148,37)"/><text x="33.2514%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (733,278 samples, 0.48%)</title><rect x="33.0486%" y="101" width="0.4788%" height="15" fill="rgb(234,67,33)"/><text x="33.2986%" y="111.50"></text></g><g><title>trait_impls_of (195,924 samples, 0.13%)</title><rect x="33.5471%" y="117" width="0.1279%" height="15" fill="rgb(247,98,35)"/><text x="33.7971%" y="127.50"></text></g><g><title>coherent_trait (1,817,750 samples, 1.19%)</title><rect x="32.4885%" y="149" width="1.1869%" height="15" fill="rgb(247,138,52)"/><text x="32.7385%" y="159.50"></text></g><g><title>specialization_graph_of (1,810,190 samples, 1.18%)</title><rect x="32.4935%" y="133" width="1.1819%" height="15" fill="rgb(213,79,30)"/><text x="32.7435%" y="143.50"></text></g><g><title>coherence_checking (1,861,351 samples, 1.22%)</title><rect x="32.4797%" y="165" width="1.2154%" height="15" fill="rgb(246,177,23)"/><text x="32.7297%" y="175.50"></text></g><g><title>associated_item (706,586 samples, 0.46%)</title><rect x="47.6098%" y="101" width="0.4614%" height="15" fill="rgb(230,62,27)"/><text x="47.8598%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (542,954 samples, 0.35%)</title><rect x="47.7166%" y="85" width="0.3545%" height="15" fill="rgb(216,154,8)"/><text x="47.9666%" y="95.50"></text></g><g><title>associated_items (1,281,171 samples, 0.84%)</title><rect x="47.2713%" y="117" width="0.8365%" height="15" fill="rgb(244,35,45)"/><text x="47.5213%" y="127.50"></text></g><g><title>adt_dtorck_constraint (207,094 samples, 0.14%)</title><rect x="48.6000%" y="85" width="0.1352%" height="15" fill="rgb(251,115,12)"/><text x="48.8500%" y="95.50"></text></g><g><title>adt_dtorck_constraint (476,216 samples, 0.31%)</title><rect x="48.4663%" y="101" width="0.3109%" height="15" fill="rgb(240,54,50)"/><text x="48.7163%" y="111.50"></text></g><g><title>dropck_outlives (984,562 samples, 0.64%)</title><rect x="48.1769%" y="117" width="0.6429%" height="15" fill="rgb(233,84,52)"/><text x="48.4269%" y="127.50"></text></g><g><title>adt_sized_constraint (206,413 samples, 0.13%)</title><rect x="50.4311%" y="101" width="0.1348%" height="15" fill="rgb(207,117,47)"/><text x="50.6811%" y="111.50"></text></g><g><title>predicates_of (243,253 samples, 0.16%)</title><rect x="50.6929%" y="101" width="0.1588%" height="15" fill="rgb(249,43,39)"/><text x="50.9429%" y="111.50"></text></g><g><title>predicates_defined_on (170,773 samples, 0.11%)</title><rect x="50.7402%" y="85" width="0.1115%" height="15" fill="rgb(209,38,44)"/><text x="50.9902%" y="95.50"></text></g><g><title>trait_impls_of (975,101 samples, 0.64%)</title><rect x="50.9097%" y="101" width="0.6367%" height="15" fill="rgb(236,212,23)"/><text x="51.1597%" y="111.50"></text></g><g><title>implementations_of_trait (398,492 samples, 0.26%)</title><rect x="51.2862%" y="85" width="0.2602%" height="15" fill="rgb(242,79,21)"/><text x="51.5362%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (221,342 samples, 0.14%)</title><rect x="51.4019%" y="69" width="0.1445%" height="15" fill="rgb(211,96,35)"/><text x="51.6519%" y="79.50"></text></g><g><title>evaluate_obligation (4,182,110 samples, 2.73%)</title><rect x="48.8217%" y="117" width="2.7307%" height="15" fill="rgb(253,215,40)"/><text x="49.0717%" y="127.50">ev..</text></g><g><title>fn_sig (177,041 samples, 0.12%)</title><rect x="51.5826%" y="117" width="0.1156%" height="15" fill="rgb(211,81,21)"/><text x="51.8326%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (153,871 samples, 0.10%)</title><rect x="51.5978%" y="101" width="0.1005%" height="15" fill="rgb(208,190,38)"/><text x="51.8478%" y="111.50"></text></g><g><title>generics_of (154,175 samples, 0.10%)</title><rect x="51.6982%" y="117" width="0.1007%" height="15" fill="rgb(235,213,38)"/><text x="51.9482%" y="127.50"></text></g><g><title>evaluate_obligation (525,727 samples, 0.34%)</title><rect x="52.3671%" y="101" width="0.3433%" height="15" fill="rgb(237,122,38)"/><text x="52.6171%" y="111.50"></text></g><g><title>method_autoderef_steps (1,048,662 samples, 0.68%)</title><rect x="52.0361%" y="117" width="0.6847%" height="15" fill="rgb(244,218,35)"/><text x="52.2861%" y="127.50"></text></g><g><title>object_safety_violations (255,142 samples, 0.17%)</title><rect x="52.7208%" y="117" width="0.1666%" height="15" fill="rgb(240,68,47)"/><text x="52.9708%" y="127.50"></text></g><g><title>explicit_predicates_of (190,934 samples, 0.12%)</title><rect x="53.1390%" y="85" width="0.1247%" height="15" fill="rgb(210,16,53)"/><text x="53.3890%" y="95.50"></text></g><g><title>predicates_of (602,656 samples, 0.39%)</title><rect x="52.9123%" y="117" width="0.3935%" height="15" fill="rgb(235,124,12)"/><text x="53.1623%" y="127.50"></text></g><g><title>predicates_defined_on (400,104 samples, 0.26%)</title><rect x="53.0446%" y="101" width="0.2612%" height="15" fill="rgb(224,169,11)"/><text x="53.2946%" y="111.50"></text></g><g><title>trait_impls_of (182,091 samples, 0.12%)</title><rect x="53.3225%" y="117" width="0.1189%" height="15" fill="rgb(250,166,2)"/><text x="53.5725%" y="127.50"></text></g><g><title>associated_items (229,121 samples, 0.15%)</title><rect x="58.8270%" y="101" width="0.1496%" height="15" fill="rgb(242,216,29)"/><text x="59.0770%" y="111.50"></text></g><g><title>adt_dtorck_constraint (241,793 samples, 0.16%)</title><rect x="59.2214%" y="69" width="0.1579%" height="15" fill="rgb(230,116,27)"/><text x="59.4714%" y="79.50"></text></g><g><title>adt_dtorck_constraint (357,054 samples, 0.23%)</title><rect x="59.1595%" y="85" width="0.2331%" height="15" fill="rgb(228,99,48)"/><text x="59.4095%" y="95.50"></text></g><g><title>dropck_outlives (611,287 samples, 0.40%)</title><rect x="59.0053%" y="101" width="0.3991%" height="15" fill="rgb(253,11,6)"/><text x="59.2553%" y="111.50"></text></g><g><title>adt_sized_constraint (197,352 samples, 0.13%)</title><rect x="59.8512%" y="69" width="0.1289%" height="15" fill="rgb(247,143,39)"/><text x="60.1012%" y="79.50"></text></g><g><title>adt_sized_constraint (239,502 samples, 0.16%)</title><rect x="59.8288%" y="85" width="0.1564%" height="15" fill="rgb(236,97,10)"/><text x="60.0788%" y="95.50"></text></g><g><title>evaluate_obligation (1,460,794 samples, 0.95%)</title><rect x="59.4053%" y="101" width="0.9538%" height="15" fill="rgb(233,208,19)"/><text x="59.6553%" y="111.50"></text></g><g><title>trait_impls_of (475,776 samples, 0.31%)</title><rect x="60.0485%" y="85" width="0.3107%" height="15" fill="rgb(216,164,2)"/><text x="60.2985%" y="95.50"></text></g><g><title>implementations_of_trait (167,181 samples, 0.11%)</title><rect x="60.2500%" y="69" width="0.1092%" height="15" fill="rgb(220,129,5)"/><text x="60.5000%" y="79.50"></text></g><g><title>is_copy_raw (293,584 samples, 0.19%)</title><rect x="60.5042%" y="101" width="0.1917%" height="15" fill="rgb(242,17,10)"/><text x="60.7542%" y="111.50"></text></g><g><title>evaluate_obligation (227,594 samples, 0.15%)</title><rect x="60.5473%" y="85" width="0.1486%" height="15" fill="rgb(242,107,0)"/><text x="60.7973%" y="95.50"></text></g><g><title>method_autoderef_steps (485,855 samples, 0.32%)</title><rect x="60.7234%" y="101" width="0.3172%" height="15" fill="rgb(251,28,31)"/><text x="60.9734%" y="111.50"></text></g><g><title>evaluate_obligation (245,723 samples, 0.16%)</title><rect x="60.8802%" y="85" width="0.1604%" height="15" fill="rgb(233,223,10)"/><text x="61.1302%" y="95.50"></text></g><g><title>predicates_of (178,022 samples, 0.12%)</title><rect x="61.1173%" y="101" width="0.1162%" height="15" fill="rgb(215,21,27)"/><text x="61.3673%" y="111.50"></text></g><g><title>typeck (11,935,333 samples, 7.79%)</title><rect x="53.5250%" y="117" width="7.7931%" height="15" fill="rgb(232,23,21)"/><text x="53.7750%" y="127.50">typeck</text></g><g><title>item_bodies_checking (42,336,009 samples, 27.64%)</title><rect x="33.7094%" y="165" width="27.6429%" height="15" fill="rgb(244,5,23)"/><text x="33.9594%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (42,333,729 samples, 27.64%)</title><rect x="33.7109%" y="149" width="27.6414%" height="15" fill="rgb(226,81,46)"/><text x="33.9609%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (42,264,569 samples, 27.60%)</title><rect x="33.7560%" y="133" width="27.5963%" height="15" fill="rgb(247,70,30)"/><text x="34.0060%" y="143.50">typeck</text></g><g><title>impl_trait_ref (315,504 samples, 0.21%)</title><rect x="61.9291%" y="85" width="0.2060%" height="15" fill="rgb(212,68,19)"/><text x="62.1791%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (284,003 samples, 0.19%)</title><rect x="61.9497%" y="69" width="0.1854%" height="15" fill="rgb(240,187,13)"/><text x="62.1997%" y="79.50"></text></g><g><title>adt_destructor (618,187 samples, 0.40%)</title><rect x="61.7681%" y="133" width="0.4036%" height="15" fill="rgb(223,113,26)"/><text x="62.0181%" y="143.50"></text></g><g><title>coherent_trait (612,957 samples, 0.40%)</title><rect x="61.7715%" y="117" width="0.4002%" height="15" fill="rgb(206,192,2)"/><text x="62.0215%" y="127.50"></text></g><g><title>specialization_graph_of (610,937 samples, 0.40%)</title><rect x="61.7728%" y="101" width="0.3989%" height="15" fill="rgb(241,108,4)"/><text x="62.0228%" y="111.50"></text></g><g><title>item_types_checking (1,577,188 samples, 1.03%)</title><rect x="61.3523%" y="165" width="1.0298%" height="15" fill="rgb(247,173,49)"/><text x="61.6023%" y="175.50"></text></g><g><title>check_mod_item_types (1,573,158 samples, 1.03%)</title><rect x="61.3549%" y="149" width="1.0272%" height="15" fill="rgb(224,114,35)"/><text x="61.6049%" y="159.50"></text></g><g><title>typeck (190,191 samples, 0.12%)</title><rect x="62.2579%" y="133" width="0.1242%" height="15" fill="rgb(245,159,27)"/><text x="62.5079%" y="143.50"></text></g><g><title>fn_sig (262,072 samples, 0.17%)</title><rect x="62.5276%" y="133" width="0.1711%" height="15" fill="rgb(245,172,44)"/><text x="62.7776%" y="143.50"></text></g><g><title>generics_of (305,965 samples, 0.20%)</title><rect x="62.6987%" y="133" width="0.1998%" height="15" fill="rgb(236,23,11)"/><text x="62.9487%" y="143.50"></text></g><g><title>late_bound_vars_map (235,112 samples, 0.15%)</title><rect x="63.0484%" y="85" width="0.1535%" height="15" fill="rgb(205,117,38)"/><text x="63.2984%" y="95.50"></text></g><g><title>resolve_lifetimes (231,281 samples, 0.15%)</title><rect x="63.0509%" y="69" width="0.1510%" height="15" fill="rgb(237,72,25)"/><text x="63.3009%" y="79.50"></text></g><g><title>explicit_predicates_of (376,054 samples, 0.25%)</title><rect x="62.9623%" y="101" width="0.2455%" height="15" fill="rgb(244,70,9)"/><text x="63.2123%" y="111.50"></text></g><g><title>predicates_of (855,560 samples, 0.56%)</title><rect x="62.9085%" y="133" width="0.5586%" height="15" fill="rgb(217,125,39)"/><text x="63.1585%" y="143.50"></text></g><g><title>predicates_defined_on (823,829 samples, 0.54%)</title><rect x="62.9292%" y="117" width="0.5379%" height="15" fill="rgb(235,36,10)"/><text x="63.1792%" y="127.50"></text></g><g><title>inferred_outlives_of (397,055 samples, 0.26%)</title><rect x="63.2078%" y="101" width="0.2593%" height="15" fill="rgb(251,123,47)"/><text x="63.4578%" y="111.50"></text></g><g><title>inferred_outlives_crate (384,125 samples, 0.25%)</title><rect x="63.2163%" y="85" width="0.2508%" height="15" fill="rgb(221,13,13)"/><text x="63.4663%" y="95.50"></text></g><g><title>type_of (295,373 samples, 0.19%)</title><rect x="63.2742%" y="69" width="0.1929%" height="15" fill="rgb(238,131,9)"/><text x="63.5242%" y="79.50"></text></g><g><title>type_collecting (1,767,709 samples, 1.15%)</title><rect x="62.3846%" y="165" width="1.1542%" height="15" fill="rgb(211,50,8)"/><text x="62.6346%" y="175.50"></text></g><g><title>collect_mod_item_types (1,755,189 samples, 1.15%)</title><rect x="62.3928%" y="149" width="1.1460%" height="15" fill="rgb(245,182,24)"/><text x="62.6428%" y="159.50"></text></g><g><title>evaluate_obligation (237,540 samples, 0.16%)</title><rect x="64.6352%" y="133" width="0.1551%" height="15" fill="rgb(242,14,37)"/><text x="64.8852%" y="143.50"></text></g><g><title>implied_outlives_bounds (211,213 samples, 0.14%)</title><rect x="64.7903%" y="133" width="0.1379%" height="15" fill="rgb(246,228,12)"/><text x="65.0403%" y="143.50"></text></g><g><title>param_env (263,861 samples, 0.17%)</title><rect x="64.9842%" y="133" width="0.1723%" height="15" fill="rgb(213,55,15)"/><text x="65.2342%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,664,398 samples, 1.74%)</title><rect x="63.6407%" y="149" width="1.7397%" height="15" fill="rgb(209,9,3)"/><text x="63.8907%" y="159.50"></text></g><g><title>region_scope_tree (299,776 samples, 0.20%)</title><rect x="65.1847%" y="133" width="0.1957%" height="15" fill="rgb(230,59,30)"/><text x="65.4347%" y="143.50"></text></g><g><title>evaluate_obligation (177,333 samples, 0.12%)</title><rect x="65.9237%" y="133" width="0.1158%" height="15" fill="rgb(209,121,21)"/><text x="66.1737%" y="143.50"></text></g><g><title>object_safety_violations (317,314 samples, 0.21%)</title><rect x="66.1191%" y="133" width="0.2072%" height="15" fill="rgb(220,109,13)"/><text x="66.3691%" y="143.50"></text></g><g><title>param_env (160,223 samples, 0.10%)</title><rect x="66.3263%" y="133" width="0.1046%" height="15" fill="rgb(232,18,1)"/><text x="66.5763%" y="143.50"></text></g><g><title>trait_impls_of (399,015 samples, 0.26%)</title><rect x="66.5175%" y="133" width="0.2605%" height="15" fill="rgb(215,41,42)"/><text x="66.7675%" y="143.50"></text></g><g><title>check_item_well_formed (2,199,695 samples, 1.44%)</title><rect x="65.3804%" y="149" width="1.4363%" height="15" fill="rgb(224,123,36)"/><text x="65.6304%" y="159.50"></text></g><g><title>adt_def (224,782 samples, 0.15%)</title><rect x="67.0281%" y="101" width="0.1468%" height="15" fill="rgb(240,125,3)"/><text x="67.2781%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (223,772 samples, 0.15%)</title><rect x="67.0288%" y="85" width="0.1461%" height="15" fill="rgb(205,98,50)"/><text x="67.2788%" y="95.50"></text></g><g><title>item_attrs (212,672 samples, 0.14%)</title><rect x="67.0360%" y="69" width="0.1389%" height="15" fill="rgb(205,185,37)"/><text x="67.2860%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (211,602 samples, 0.14%)</title><rect x="67.0367%" y="53" width="0.1382%" height="15" fill="rgb(238,207,15)"/><text x="67.2867%" y="63.50"></text></g><g><title>adt_sized_constraint (341,574 samples, 0.22%)</title><rect x="67.0250%" y="117" width="0.2230%" height="15" fill="rgb(213,199,42)"/><text x="67.2750%" y="127.50"></text></g><g><title>evaluate_obligation (528,556 samples, 0.35%)</title><rect x="66.9676%" y="133" width="0.3451%" height="15" fill="rgb(235,201,11)"/><text x="67.2176%" y="143.50"></text></g><g><title>analysis (102,643,639 samples, 67.02%)</title><rect x="0.3483%" y="197" width="67.0203%" height="15" fill="rgb(207,46,11)"/><text x="0.5983%" y="207.50">analysis</text></g><g><title>type_check_crate (53,501,693 samples, 34.93%)</title><rect x="32.4351%" y="181" width="34.9335%" height="15" fill="rgb(241,35,35)"/><text x="32.6851%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,860,545 samples, 3.83%)</title><rect x="63.5419%" y="165" width="3.8266%" height="15" fill="rgb(243,32,47)"/><text x="63.7919%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (845,219 samples, 0.55%)</title><rect x="66.8167%" y="149" width="0.5519%" height="15" fill="rgb(247,202,23)"/><text x="67.0667%" y="159.50"></text></g><g><title>codegen_crate (493,325 samples, 0.32%)</title><rect x="67.3735%" y="197" width="0.3221%" height="15" fill="rgb(219,102,11)"/><text x="67.6235%" y="207.50"></text></g><g><title>metadata_register_crate (17,170,291 samples, 11.21%)</title><rect x="80.7031%" y="149" width="11.2112%" height="15" fill="rgb(243,110,44)"/><text x="80.9531%" y="159.50">metadata_register..</text></g><g><title>metadata_register_crate (14,933,436 samples, 9.75%)</title><rect x="82.1636%" y="133" width="9.7507%" height="15" fill="rgb(222,74,54)"/><text x="82.4136%" y="143.50">metadata_regis..</text></g><g><title>metadata_register_crate (9,966,961 samples, 6.51%)</title><rect x="85.4065%" y="117" width="6.5078%" height="15" fill="rgb(216,99,12)"/><text x="85.6565%" y="127.50">metadata_..</text></g><g><title>metadata_register_crate (3,202,966 samples, 2.09%)</title><rect x="89.8229%" y="101" width="2.0913%" height="15" fill="rgb(226,22,26)"/><text x="90.0729%" y="111.50">m..</text></g><g><title>macro_expand_crate (37,154,822 samples, 24.26%)</title><rect x="67.9508%" y="181" width="24.2599%" height="15" fill="rgb(217,163,10)"/><text x="68.2008%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (37,144,612 samples, 24.25%)</title><rect x="67.9575%" y="165" width="24.2533%" height="15" fill="rgb(213,25,53)"/><text x="68.2075%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (454,025 samples, 0.30%)</title><rect x="91.9143%" y="149" width="0.2965%" height="15" fill="rgb(252,105,26)"/><text x="92.1643%" y="159.50"></text></g><g><title>finalize_imports (199,862 samples, 0.13%)</title><rect x="92.2586%" y="165" width="0.1305%" height="15" fill="rgb(220,39,43)"/><text x="92.5086%" y="175.50"></text></g><g><title>late_resolve_crate (1,795,121 samples, 1.17%)</title><rect x="92.4025%" y="165" width="1.1721%" height="15" fill="rgb(229,68,48)"/><text x="92.6525%" y="175.50"></text></g><g><title>configure_and_expand (39,734,351 samples, 25.94%)</title><rect x="67.6956%" y="197" width="25.9442%" height="15" fill="rgb(252,8,32)"/><text x="67.9456%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,119,884 samples, 1.38%)</title><rect x="92.2556%" y="181" width="1.3842%" height="15" fill="rgb(223,20,43)"/><text x="92.5056%" y="191.50"></text></g><g><title>drop_ast (173,852 samples, 0.11%)</title><rect x="93.6398%" y="197" width="0.1135%" height="15" fill="rgb(229,81,49)"/><text x="93.8898%" y="207.50"></text></g><g><title>early_lint_checks (349,423 samples, 0.23%)</title><rect x="93.7669%" y="197" width="0.2282%" height="15" fill="rgb(236,28,36)"/><text x="94.0169%" y="207.50"></text></g><g><title>free_global_ctxt (3,908,873 samples, 2.55%)</title><rect x="93.9951%" y="197" width="2.5523%" height="15" fill="rgb(249,185,26)"/><text x="94.2451%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,093,652 samples, 0.71%)</title><rect x="96.5474%" y="197" width="0.7141%" height="15" fill="rgb(249,174,33)"/><text x="96.7974%" y="207.50"></text></g><g><title>hir_lowering (2,332,177 samples, 1.52%)</title><rect x="97.2615%" y="197" width="1.5228%" height="15" fill="rgb(233,201,37)"/><text x="97.5115%" y="207.50"></text></g><g><title>parse_crate (340,663 samples, 0.22%)</title><rect x="98.8137%" y="197" width="0.2224%" height="15" fill="rgb(221,78,26)"/><text x="99.0637%" y="207.50"></text></g><g><title>prepare_outputs (183,922 samples, 0.12%)</title><rect x="99.0405%" y="197" width="0.1201%" height="15" fill="rgb(250,127,30)"/><text x="99.2905%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (851,490 samples, 0.56%)</title><rect x="99.1606%" y="197" width="0.5560%" height="15" fill="rgb(230,49,44)"/><text x="99.4106%" y="207.50"></text></g><g><title>all (153,153,110 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (153,153,110 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (356,034 samples, 0.23%)</title><rect x="99.7675%" y="197" width="0.2325%" height="15" fill="rgb(215,43,3)"/><text x="100.0175%" y="207.50"></text></g></svg></svg>