<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (221,213 samples, 0.33%)</title><rect x="9.0730%" y="117" width="0.3304%" height="15" fill="rgb(227,0,7)"/><text x="9.3230%" y="127.50"></text></g><g><title>item_attrs (135,341 samples, 0.20%)</title><rect x="9.7995%" y="85" width="0.2021%" height="15" fill="rgb(217,0,24)"/><text x="10.0495%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (131,741 samples, 0.20%)</title><rect x="9.8049%" y="69" width="0.1968%" height="15" fill="rgb(221,193,54)"/><text x="10.0549%" y="79.50"></text></g><g><title>codegen_fn_attrs (211,802 samples, 0.32%)</title><rect x="9.7080%" y="101" width="0.3163%" height="15" fill="rgb(248,212,6)"/><text x="9.9580%" y="111.50"></text></g><g><title>adt_drop_tys (68,321 samples, 0.10%)</title><rect x="12.0529%" y="53" width="0.1020%" height="15" fill="rgb(208,68,35)"/><text x="12.3029%" y="63.50"></text></g><g><title>is_copy_raw (127,232 samples, 0.19%)</title><rect x="12.1550%" y="53" width="0.1900%" height="15" fill="rgb(232,128,0)"/><text x="12.4050%" y="63.50"></text></g><g><title>evaluate_obligation (104,521 samples, 0.16%)</title><rect x="12.1889%" y="37" width="0.1561%" height="15" fill="rgb(207,160,47)"/><text x="12.4389%" y="47.50"></text></g><g><title>param_env (113,721 samples, 0.17%)</title><rect x="12.3450%" y="53" width="0.1698%" height="15" fill="rgb(228,23,34)"/><text x="12.5950%" y="63.50"></text></g><g><title>adt_drop_tys (340,014 samples, 0.51%)</title><rect x="12.0086%" y="69" width="0.5078%" height="15" fill="rgb(218,30,26)"/><text x="12.2586%" y="79.50"></text></g><g><title>predicates_of (70,980 samples, 0.11%)</title><rect x="13.2544%" y="37" width="0.1060%" height="15" fill="rgb(220,122,19)"/><text x="13.5044%" y="47.50"></text></g><g><title>needs_drop_raw (1,165,353 samples, 1.74%)</title><rect x="11.9010%" y="85" width="1.7405%" height="15" fill="rgb(250,228,42)"/><text x="12.1510%" y="95.50"></text></g><g><title>is_copy_raw (748,029 samples, 1.12%)</title><rect x="12.5242%" y="69" width="1.1172%" height="15" fill="rgb(240,193,28)"/><text x="12.7742%" y="79.50"></text></g><g><title>evaluate_obligation (675,096 samples, 1.01%)</title><rect x="12.6332%" y="53" width="1.0083%" height="15" fill="rgb(216,20,37)"/><text x="12.8832%" y="63.50"></text></g><g><title>trait_impls_of (186,622 samples, 0.28%)</title><rect x="13.3627%" y="37" width="0.2787%" height="15" fill="rgb(206,188,39)"/><text x="13.6127%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (91,030 samples, 0.14%)</title><rect x="13.8031%" y="69" width="0.1360%" height="15" fill="rgb(217,207,13)"/><text x="14.0531%" y="79.50"></text></g><g><title>impl_parent (394,322 samples, 0.59%)</title><rect x="14.6808%" y="53" width="0.5889%" height="15" fill="rgb(231,73,38)"/><text x="14.9308%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (273,542 samples, 0.41%)</title><rect x="14.8612%" y="37" width="0.4085%" height="15" fill="rgb(225,20,46)"/><text x="15.1112%" y="47.50"></text></g><g><title>specialization_graph_of (1,924,032 samples, 2.87%)</title><rect x="14.0089%" y="69" width="2.8736%" height="15" fill="rgb(210,31,41)"/><text x="14.2589%" y="79.50">sp..</text></g><g><title>impl_trait_ref (1,079,794 samples, 1.61%)</title><rect x="15.2697%" y="53" width="1.6127%" height="15" fill="rgb(221,200,47)"/><text x="15.5197%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (971,773 samples, 1.45%)</title><rect x="15.4311%" y="37" width="1.4514%" height="15" fill="rgb(226,26,5)"/><text x="15.6811%" y="47.50"></text></g><g><title>resolve_instance (2,212,695 samples, 3.30%)</title><rect x="13.6414%" y="85" width="3.3047%" height="15" fill="rgb(249,33,26)"/><text x="13.8914%" y="95.50">res..</text></g><g><title>thir_body (386,585 samples, 0.58%)</title><rect x="16.9591%" y="85" width="0.5774%" height="15" fill="rgb(235,183,28)"/><text x="17.2091%" y="95.50"></text></g><g><title>mir_const (6,070,727 samples, 9.07%)</title><rect x="8.4778%" y="133" width="9.0667%" height="15" fill="rgb(221,5,38)"/><text x="8.7278%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (5,451,002 samples, 8.14%)</title><rect x="9.4034%" y="117" width="8.1411%" height="15" fill="rgb(247,18,42)"/><text x="9.6534%" y="127.50">unsafety_ch..</text></g><g><title>mir_built (5,035,248 samples, 7.52%)</title><rect x="10.0243%" y="101" width="7.5202%" height="15" fill="rgb(241,131,45)"/><text x="10.2743%" y="111.50">mir_built</text></g><g><title>mir_promoted (6,441,110 samples, 9.62%)</title><rect x="7.9468%" y="149" width="9.6199%" height="15" fill="rgb(249,31,29)"/><text x="8.1968%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (148,442 samples, 0.22%)</title><rect x="17.5771%" y="149" width="0.2217%" height="15" fill="rgb(225,111,53)"/><text x="17.8271%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (193,624 samples, 0.29%)</title><rect x="17.7988%" y="149" width="0.2892%" height="15" fill="rgb(238,160,17)"/><text x="18.0488%" y="159.50"></text></g><g><title>normalize_projection_ty (116,392 samples, 0.17%)</title><rect x="17.9142%" y="133" width="0.1738%" height="15" fill="rgb(214,148,48)"/><text x="18.1642%" y="143.50"></text></g><g><title>type_op_normalize_predicate (99,231 samples, 0.15%)</title><rect x="18.0880%" y="149" width="0.1482%" height="15" fill="rgb(232,36,49)"/><text x="18.3380%" y="159.50"></text></g><g><title>type_op_prove_predicate (595,315 samples, 0.89%)</title><rect x="18.2903%" y="149" width="0.8891%" height="15" fill="rgb(209,103,24)"/><text x="18.5403%" y="159.50"></text></g><g><title>MIR_borrow_checking (11,755,272 samples, 17.56%)</title><rect x="1.6288%" y="181" width="17.5567%" height="15" fill="rgb(229,88,8)"/><text x="1.8788%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (11,725,242 samples, 17.51%)</title><rect x="1.6737%" y="165" width="17.5118%" height="15" fill="rgb(213,181,19)"/><text x="1.9237%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (190,911 samples, 0.29%)</title><rect x="19.2004%" y="181" width="0.2851%" height="15" fill="rgb(254,191,54)"/><text x="19.4504%" y="191.50"></text></g><g><title>get_lang_items (80,171 samples, 0.12%)</title><rect x="19.9013%" y="133" width="0.1197%" height="15" fill="rgb(241,83,37)"/><text x="20.1513%" y="143.50"></text></g><g><title>should_inherit_track_caller (119,411 samples, 0.18%)</title><rect x="20.0210%" y="133" width="0.1783%" height="15" fill="rgb(233,36,39)"/><text x="20.2710%" y="143.50"></text></g><g><title>codegen_fn_attrs (288,043 samples, 0.43%)</title><rect x="19.7969%" y="149" width="0.4302%" height="15" fill="rgb(226,3,54)"/><text x="20.0469%" y="159.50"></text></g><g><title>check_mod_attrs (463,634 samples, 0.69%)</title><rect x="19.5349%" y="165" width="0.6924%" height="15" fill="rgb(245,192,40)"/><text x="19.7849%" y="175.50"></text></g><g><title>check_mod_const_bodies (83,761 samples, 0.13%)</title><rect x="20.2273%" y="165" width="0.1251%" height="15" fill="rgb(238,167,29)"/><text x="20.4773%" y="175.50"></text></g><g><title>lookup_deprecation_entry (122,481 samples, 0.18%)</title><rect x="20.6892%" y="149" width="0.1829%" height="15" fill="rgb(232,182,51)"/><text x="20.9392%" y="159.50"></text></g><g><title>lookup_stability (73,191 samples, 0.11%)</title><rect x="20.8721%" y="149" width="0.1093%" height="15" fill="rgb(231,60,39)"/><text x="21.1221%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (419,784 samples, 0.63%)</title><rect x="20.4354%" y="165" width="0.6270%" height="15" fill="rgb(208,69,12)"/><text x="20.6854%" y="175.50"></text></g><g><title>misc_checking_1 (1,114,372 samples, 1.66%)</title><rect x="19.4862%" y="181" width="1.6643%" height="15" fill="rgb(235,93,37)"/><text x="19.7362%" y="191.50"></text></g><g><title>eval_to_const_value_raw (161,162 samples, 0.24%)</title><rect x="21.5394%" y="85" width="0.2407%" height="15" fill="rgb(213,116,39)"/><text x="21.7894%" y="95.50"></text></g><g><title>eval_to_const_value_raw (146,382 samples, 0.22%)</title><rect x="21.5615%" y="69" width="0.2186%" height="15" fill="rgb(222,207,29)"/><text x="21.8115%" y="79.50"></text></g><g><title>eval_to_allocation_raw (144,392 samples, 0.22%)</title><rect x="21.5645%" y="53" width="0.2157%" height="15" fill="rgb(206,96,30)"/><text x="21.8145%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (72,391 samples, 0.11%)</title><rect x="21.6720%" y="37" width="0.1081%" height="15" fill="rgb(218,138,4)"/><text x="21.9220%" y="47.50"></text></g><g><title>liveness_and_intrinsic_checking (434,885 samples, 0.65%)</title><rect x="21.1532%" y="165" width="0.6495%" height="15" fill="rgb(250,191,14)"/><text x="21.4032%" y="175.50"></text></g><g><title>check_mod_liveness (389,644 samples, 0.58%)</title><rect x="21.2208%" y="149" width="0.5819%" height="15" fill="rgb(239,60,40)"/><text x="21.4708%" y="159.50"></text></g><g><title>type_uninhabited_from (231,363 samples, 0.35%)</title><rect x="21.4572%" y="133" width="0.3455%" height="15" fill="rgb(206,27,48)"/><text x="21.7072%" y="143.50"></text></g><g><title>type_uninhabited_from (207,893 samples, 0.31%)</title><rect x="21.4922%" y="117" width="0.3105%" height="15" fill="rgb(225,35,8)"/><text x="21.7422%" y="127.50"></text></g><g><title>type_uninhabited_from (197,083 samples, 0.29%)</title><rect x="21.5084%" y="101" width="0.2943%" height="15" fill="rgb(250,213,24)"/><text x="21.7584%" y="111.50"></text></g><g><title>misc_checking_2 (716,338 samples, 1.07%)</title><rect x="21.1505%" y="181" width="1.0699%" height="15" fill="rgb(247,123,22)"/><text x="21.4005%" y="191.50"></text></g><g><title>match_checking (279,643 samples, 0.42%)</title><rect x="21.8027%" y="165" width="0.4177%" height="15" fill="rgb(231,138,38)"/><text x="22.0527%" y="175.50"></text></g><g><title>check_match (267,963 samples, 0.40%)</title><rect x="21.8202%" y="149" width="0.4002%" height="15" fill="rgb(231,145,46)"/><text x="22.0702%" y="159.50"></text></g><g><title>check_private_in_public (88,221 samples, 0.13%)</title><rect x="22.2354%" y="165" width="0.1318%" height="15" fill="rgb(251,118,11)"/><text x="22.4854%" y="175.50"></text></g><g><title>codegen_fn_attrs (273,473 samples, 0.41%)</title><rect x="22.5531%" y="149" width="0.4084%" height="15" fill="rgb(217,147,25)"/><text x="22.8031%" y="159.50"></text></g><g><title>death_checking (507,845 samples, 0.76%)</title><rect x="22.3671%" y="165" width="0.7585%" height="15" fill="rgb(247,81,37)"/><text x="22.6171%" y="175.50"></text></g><g><title>lint_levels (104,761 samples, 0.16%)</title><rect x="22.9692%" y="149" width="0.1565%" height="15" fill="rgb(209,12,38)"/><text x="23.2192%" y="159.50"></text></g><g><title>param_env (201,181 samples, 0.30%)</title><rect x="23.3876%" y="133" width="0.3005%" height="15" fill="rgb(227,1,9)"/><text x="23.6376%" y="143.50"></text></g><g><title>predicates_of (106,731 samples, 0.16%)</title><rect x="23.5287%" y="117" width="0.1594%" height="15" fill="rgb(248,47,43)"/><text x="23.7787%" y="127.50"></text></g><g><title>predicates_defined_on (84,630 samples, 0.13%)</title><rect x="23.5617%" y="101" width="0.1264%" height="15" fill="rgb(221,10,30)"/><text x="23.8117%" y="111.50"></text></g><g><title>crate_lints (379,205 samples, 0.57%)</title><rect x="23.1279%" y="149" width="0.5663%" height="15" fill="rgb(210,229,1)"/><text x="23.3779%" y="159.50"></text></g><g><title>adt_sized_constraint (111,121 samples, 0.17%)</title><rect x="24.0338%" y="53" width="0.1660%" height="15" fill="rgb(222,148,37)"/><text x="24.2838%" y="63.50"></text></g><g><title>layout_of (201,242 samples, 0.30%)</title><rect x="23.9928%" y="85" width="0.3006%" height="15" fill="rgb(234,67,33)"/><text x="24.2428%" y="95.50"></text></g><g><title>layout_of (184,992 samples, 0.28%)</title><rect x="24.0171%" y="69" width="0.2763%" height="15" fill="rgb(247,98,35)"/><text x="24.2671%" y="79.50"></text></g><g><title>lint_checking (786,499 samples, 1.17%)</title><rect x="23.1256%" y="165" width="1.1746%" height="15" fill="rgb(247,138,52)"/><text x="23.3756%" y="175.50"></text></g><g><title>module_lints (405,794 samples, 0.61%)</title><rect x="23.6942%" y="149" width="0.6061%" height="15" fill="rgb(213,79,30)"/><text x="23.9442%" y="159.50"></text></g><g><title>lint_mod (401,544 samples, 0.60%)</title><rect x="23.7006%" y="133" width="0.5997%" height="15" fill="rgb(246,177,23)"/><text x="23.9506%" y="143.50"></text></g><g><title>layout_of (229,372 samples, 0.34%)</title><rect x="23.9577%" y="117" width="0.3426%" height="15" fill="rgb(230,62,27)"/><text x="24.2077%" y="127.50"></text></g><g><title>layout_of (217,132 samples, 0.32%)</title><rect x="23.9760%" y="101" width="0.3243%" height="15" fill="rgb(216,154,8)"/><text x="24.2260%" y="111.50"></text></g><g><title>privacy_checking_modules (280,373 samples, 0.42%)</title><rect x="24.3946%" y="165" width="0.4187%" height="15" fill="rgb(244,35,45)"/><text x="24.6446%" y="175.50"></text></g><g><title>check_mod_privacy (277,463 samples, 0.41%)</title><rect x="24.3989%" y="149" width="0.4144%" height="15" fill="rgb(251,115,12)"/><text x="24.6489%" y="159.50"></text></g><g><title>misc_checking_3 (1,750,569 samples, 2.61%)</title><rect x="22.2204%" y="181" width="2.6145%" height="15" fill="rgb(240,54,50)"/><text x="22.4704%" y="191.50">mi..</text></g><g><title>impl_parent (187,583 samples, 0.28%)</title><rect x="25.3834%" y="117" width="0.2802%" height="15" fill="rgb(233,84,52)"/><text x="25.6334%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (127,943 samples, 0.19%)</title><rect x="25.4725%" y="101" width="0.1911%" height="15" fill="rgb(207,117,47)"/><text x="25.7225%" y="111.50"></text></g><g><title>impl_trait_ref (647,925 samples, 0.97%)</title><rect x="25.6636%" y="117" width="0.9677%" height="15" fill="rgb(249,43,39)"/><text x="25.9136%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (586,614 samples, 0.88%)</title><rect x="25.7551%" y="101" width="0.8761%" height="15" fill="rgb(209,38,44)"/><text x="26.0051%" y="111.50"></text></g><g><title>coherent_trait (1,291,434 samples, 1.93%)</title><rect x="24.9117%" y="149" width="1.9288%" height="15" fill="rgb(236,212,23)"/><text x="25.1617%" y="159.50">c..</text></g><g><title>specialization_graph_of (1,281,154 samples, 1.91%)</title><rect x="24.9270%" y="133" width="1.9134%" height="15" fill="rgb(242,79,21)"/><text x="25.1770%" y="143.50">s..</text></g><g><title>trait_impls_of (140,081 samples, 0.21%)</title><rect x="26.6312%" y="117" width="0.2092%" height="15" fill="rgb(211,96,35)"/><text x="26.8812%" y="127.50"></text></g><g><title>coherence_checking (1,353,655 samples, 2.02%)</title><rect x="24.8863%" y="165" width="2.0217%" height="15" fill="rgb(253,215,40)"/><text x="25.1363%" y="175.50">c..</text></g><g><title>associated_item (326,512 samples, 0.49%)</title><rect x="39.1381%" y="101" width="0.4876%" height="15" fill="rgb(211,81,21)"/><text x="39.3881%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (258,881 samples, 0.39%)</title><rect x="39.2391%" y="85" width="0.3866%" height="15" fill="rgb(208,190,38)"/><text x="39.4891%" y="95.50"></text></g><g><title>associated_items (466,023 samples, 0.70%)</title><rect x="38.9784%" y="117" width="0.6960%" height="15" fill="rgb(235,213,38)"/><text x="39.2284%" y="127.50"></text></g><g><title>adt_dtorck_constraint (82,651 samples, 0.12%)</title><rect x="40.2099%" y="37" width="0.1234%" height="15" fill="rgb(237,122,38)"/><text x="40.4599%" y="47.50"></text></g><g><title>adt_dtorck_constraint (105,321 samples, 0.16%)</title><rect x="40.1952%" y="53" width="0.1573%" height="15" fill="rgb(244,218,35)"/><text x="40.4452%" y="63.50"></text></g><g><title>adt_dtorck_constraint (125,601 samples, 0.19%)</title><rect x="40.1751%" y="69" width="0.1876%" height="15" fill="rgb(240,68,47)"/><text x="40.4251%" y="79.50"></text></g><g><title>adt_dtorck_constraint (173,431 samples, 0.26%)</title><rect x="40.1152%" y="85" width="0.2590%" height="15" fill="rgb(210,16,53)"/><text x="40.3652%" y="95.50"></text></g><g><title>dropck_outlives (453,455 samples, 0.68%)</title><rect x="39.7498%" y="117" width="0.6772%" height="15" fill="rgb(235,124,12)"/><text x="39.9998%" y="127.50"></text></g><g><title>adt_dtorck_constraint (314,063 samples, 0.47%)</title><rect x="39.9580%" y="101" width="0.4691%" height="15" fill="rgb(224,169,11)"/><text x="40.2080%" y="111.50"></text></g><g><title>adt_def (182,993 samples, 0.27%)</title><rect x="41.3750%" y="85" width="0.2733%" height="15" fill="rgb(250,166,2)"/><text x="41.6250%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (180,013 samples, 0.27%)</title><rect x="41.3795%" y="69" width="0.2689%" height="15" fill="rgb(242,216,29)"/><text x="41.6295%" y="79.50"></text></g><g><title>item_attrs (138,423 samples, 0.21%)</title><rect x="41.4416%" y="53" width="0.2067%" height="15" fill="rgb(230,116,27)"/><text x="41.6916%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (134,763 samples, 0.20%)</title><rect x="41.4471%" y="37" width="0.2013%" height="15" fill="rgb(228,99,48)"/><text x="41.6971%" y="47.50"></text></g><g><title>adt_sized_constraint (267,003 samples, 0.40%)</title><rect x="41.3473%" y="101" width="0.3988%" height="15" fill="rgb(253,11,6)"/><text x="41.5973%" y="111.50"></text></g><g><title>predicates_of (101,560 samples, 0.15%)</title><rect x="41.9365%" y="101" width="0.1517%" height="15" fill="rgb(247,143,39)"/><text x="42.1865%" y="111.50"></text></g><g><title>evaluate_obligation (1,689,146 samples, 2.52%)</title><rect x="40.4271%" y="117" width="2.5228%" height="15" fill="rgb(236,97,10)"/><text x="40.6771%" y="127.50">ev..</text></g><g><title>trait_impls_of (496,177 samples, 0.74%)</title><rect x="42.2088%" y="101" width="0.7410%" height="15" fill="rgb(233,208,19)"/><text x="42.4588%" y="111.50"></text></g><g><title>implementations_of_trait (183,814 samples, 0.27%)</title><rect x="42.6753%" y="85" width="0.2745%" height="15" fill="rgb(216,164,2)"/><text x="42.9253%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (108,002 samples, 0.16%)</title><rect x="42.7885%" y="69" width="0.1613%" height="15" fill="rgb(220,129,5)"/><text x="43.0385%" y="79.50"></text></g><g><title>fn_sig (159,950 samples, 0.24%)</title><rect x="42.9836%" y="117" width="0.2389%" height="15" fill="rgb(242,17,10)"/><text x="43.2336%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (140,950 samples, 0.21%)</title><rect x="43.0120%" y="101" width="0.2105%" height="15" fill="rgb(242,107,0)"/><text x="43.2620%" y="111.50"></text></g><g><title>generics_of (132,990 samples, 0.20%)</title><rect x="43.2225%" y="117" width="0.1986%" height="15" fill="rgb(251,28,31)"/><text x="43.4725%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (99,060 samples, 0.15%)</title><rect x="43.2731%" y="101" width="0.1479%" height="15" fill="rgb(233,223,10)"/><text x="43.5231%" y="111.50"></text></g><g><title>impl_trait_ref (83,571 samples, 0.12%)</title><rect x="43.5308%" y="117" width="0.1248%" height="15" fill="rgb(215,21,27)"/><text x="43.7808%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (73,811 samples, 0.11%)</title><rect x="43.5454%" y="101" width="0.1102%" height="15" fill="rgb(232,23,21)"/><text x="43.7954%" y="111.50"></text></g><g><title>item_attrs (177,954 samples, 0.27%)</title><rect x="43.7137%" y="117" width="0.2658%" height="15" fill="rgb(244,5,23)"/><text x="43.9637%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (170,114 samples, 0.25%)</title><rect x="43.7254%" y="101" width="0.2541%" height="15" fill="rgb(226,81,46)"/><text x="43.9754%" y="111.50"></text></g><g><title>evaluate_obligation (71,070 samples, 0.11%)</title><rect x="44.2330%" y="101" width="0.1061%" height="15" fill="rgb(247,70,30)"/><text x="44.4830%" y="111.50"></text></g><g><title>method_autoderef_steps (186,491 samples, 0.28%)</title><rect x="44.0708%" y="117" width="0.2785%" height="15" fill="rgb(212,68,19)"/><text x="44.3208%" y="127.50"></text></g><g><title>explicit_predicates_of (104,042 samples, 0.16%)</title><rect x="44.6736%" y="85" width="0.1554%" height="15" fill="rgb(240,187,13)"/><text x="44.9236%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (77,660 samples, 0.12%)</title><rect x="44.7130%" y="69" width="0.1160%" height="15" fill="rgb(223,113,26)"/><text x="44.9630%" y="79.50"></text></g><g><title>predicates_of (353,624 samples, 0.53%)</title><rect x="44.3902%" y="117" width="0.5281%" height="15" fill="rgb(206,192,2)"/><text x="44.6402%" y="127.50"></text></g><g><title>predicates_defined_on (242,864 samples, 0.36%)</title><rect x="44.5557%" y="101" width="0.3627%" height="15" fill="rgb(241,108,4)"/><text x="44.8057%" y="111.50"></text></g><g><title>type_of (99,490 samples, 0.15%)</title><rect x="44.9586%" y="117" width="0.1486%" height="15" fill="rgb(247,173,49)"/><text x="45.2086%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (82,400 samples, 0.12%)</title><rect x="44.9841%" y="101" width="0.1231%" height="15" fill="rgb(224,114,35)"/><text x="45.2341%" y="111.50"></text></g><g><title>item_bodies_checking (12,215,175 samples, 18.24%)</title><rect x="26.9424%" y="165" width="18.2435%" height="15" fill="rgb(245,159,27)"/><text x="27.1924%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,213,135 samples, 18.24%)</title><rect x="26.9455%" y="149" width="18.2405%" height="15" fill="rgb(245,172,44)"/><text x="27.1955%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (12,182,294 samples, 18.19%)</title><rect x="26.9915%" y="133" width="18.1944%" height="15" fill="rgb(236,23,11)"/><text x="27.2415%" y="143.50">typeck</text></g><g><title>item_types_checking (218,503 samples, 0.33%)</title><rect x="45.1860%" y="165" width="0.3263%" height="15" fill="rgb(205,117,38)"/><text x="45.4360%" y="175.50"></text></g><g><title>check_mod_item_types (215,363 samples, 0.32%)</title><rect x="45.1906%" y="149" width="0.3216%" height="15" fill="rgb(237,72,25)"/><text x="45.4406%" y="159.50"></text></g><g><title>late_bound_vars_map (70,161 samples, 0.10%)</title><rect x="46.1835%" y="117" width="0.1048%" height="15" fill="rgb(244,70,9)"/><text x="46.4335%" y="127.50"></text></g><g><title>fn_sig (483,186 samples, 0.72%)</title><rect x="45.7764%" y="133" width="0.7216%" height="15" fill="rgb(217,125,39)"/><text x="46.0264%" y="143.50"></text></g><g><title>type_of (125,040 samples, 0.19%)</title><rect x="46.3113%" y="117" width="0.1867%" height="15" fill="rgb(235,36,10)"/><text x="46.5613%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (79,230 samples, 0.12%)</title><rect x="46.3797%" y="101" width="0.1183%" height="15" fill="rgb(251,123,47)"/><text x="46.6297%" y="111.50"></text></g><g><title>named_region_map (186,713 samples, 0.28%)</title><rect x="46.5930%" y="117" width="0.2789%" height="15" fill="rgb(221,13,13)"/><text x="46.8430%" y="127.50"></text></g><g><title>resolve_lifetimes (165,773 samples, 0.25%)</title><rect x="46.6242%" y="101" width="0.2476%" height="15" fill="rgb(238,131,9)"/><text x="46.8742%" y="111.50"></text></g><g><title>generics_of (265,124 samples, 0.40%)</title><rect x="46.4980%" y="133" width="0.3960%" height="15" fill="rgb(211,50,8)"/><text x="46.7480%" y="143.50"></text></g><g><title>explicit_predicates_of (97,782 samples, 0.15%)</title><rect x="47.0193%" y="101" width="0.1460%" height="15" fill="rgb(245,182,24)"/><text x="47.2693%" y="111.50"></text></g><g><title>predicates_of (311,334 samples, 0.46%)</title><rect x="46.9241%" y="133" width="0.4650%" height="15" fill="rgb(242,14,37)"/><text x="47.1741%" y="143.50"></text></g><g><title>predicates_defined_on (287,774 samples, 0.43%)</title><rect x="46.9593%" y="117" width="0.4298%" height="15" fill="rgb(246,228,12)"/><text x="47.2093%" y="127.50"></text></g><g><title>inferred_outlives_of (149,851 samples, 0.22%)</title><rect x="47.1653%" y="101" width="0.2238%" height="15" fill="rgb(213,55,15)"/><text x="47.4153%" y="111.50"></text></g><g><title>inferred_outlives_crate (132,791 samples, 0.20%)</title><rect x="47.1908%" y="85" width="0.1983%" height="15" fill="rgb(209,9,3)"/><text x="47.4408%" y="95.50"></text></g><g><title>type_collecting (1,284,935 samples, 1.92%)</title><rect x="45.5159%" y="165" width="1.9191%" height="15" fill="rgb(230,59,30)"/><text x="45.7659%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,270,645 samples, 1.90%)</title><rect x="45.5372%" y="149" width="1.8977%" height="15" fill="rgb(209,121,21)"/><text x="45.7872%" y="159.50">c..</text></g><g><title>evaluate_obligation (125,262 samples, 0.19%)</title><rect x="47.8268%" y="133" width="0.1871%" height="15" fill="rgb(220,109,13)"/><text x="48.0768%" y="143.50"></text></g><g><title>check_impl_item_well_formed (426,325 samples, 0.64%)</title><rect x="47.5201%" y="149" width="0.6367%" height="15" fill="rgb(232,18,1)"/><text x="47.7701%" y="159.50"></text></g><g><title>adt_def (115,832 samples, 0.17%)</title><rect x="48.9679%" y="101" width="0.1730%" height="15" fill="rgb(215,41,42)"/><text x="49.2179%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (113,702 samples, 0.17%)</title><rect x="48.9711%" y="85" width="0.1698%" height="15" fill="rgb(224,123,36)"/><text x="49.2211%" y="95.50"></text></g><g><title>item_attrs (90,791 samples, 0.14%)</title><rect x="49.0053%" y="69" width="0.1356%" height="15" fill="rgb(240,125,3)"/><text x="49.2553%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,461 samples, 0.13%)</title><rect x="49.0088%" y="53" width="0.1321%" height="15" fill="rgb(205,98,50)"/><text x="49.2588%" y="63.50"></text></g><g><title>adt_sized_constraint (134,011 samples, 0.20%)</title><rect x="49.1409%" y="101" width="0.2001%" height="15" fill="rgb(205,185,37)"/><text x="49.3909%" y="111.50"></text></g><g><title>adt_sized_constraint (280,223 samples, 0.42%)</title><rect x="48.9531%" y="117" width="0.4185%" height="15" fill="rgb(238,207,15)"/><text x="49.2031%" y="127.50"></text></g><g><title>evaluate_obligation (375,793 samples, 0.56%)</title><rect x="48.8113%" y="133" width="0.5613%" height="15" fill="rgb(213,199,42)"/><text x="49.0613%" y="143.50"></text></g><g><title>implied_outlives_bounds (91,592 samples, 0.14%)</title><rect x="49.3754%" y="133" width="0.1368%" height="15" fill="rgb(235,201,11)"/><text x="49.6254%" y="143.50"></text></g><g><title>param_env (178,211 samples, 0.27%)</title><rect x="49.5135%" y="133" width="0.2662%" height="15" fill="rgb(207,46,11)"/><text x="49.7635%" y="143.50"></text></g><g><title>region_scope_tree (91,920 samples, 0.14%)</title><rect x="49.8545%" y="133" width="0.1373%" height="15" fill="rgb(241,35,35)"/><text x="50.1045%" y="143.50"></text></g><g><title>analysis (32,692,165 samples, 48.83%)</title><rect x="1.2564%" y="197" width="48.8262%" height="15" fill="rgb(243,32,47)"/><text x="1.5064%" y="207.50">analysis</text></g><g><title>type_check_crate (16,904,939 samples, 25.25%)</title><rect x="24.8349%" y="181" width="25.2477%" height="15" fill="rgb(247,202,23)"/><text x="25.0849%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,771,020 samples, 2.65%)</title><rect x="47.4376%" y="165" width="2.6450%" height="15" fill="rgb(219,102,11)"/><text x="47.6876%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,289,415 samples, 1.93%)</title><rect x="48.1569%" y="149" width="1.9258%" height="15" fill="rgb(243,110,44)"/><text x="48.4069%" y="159.50">c..</text></g><g><title>codegen_crate (654,217 samples, 0.98%)</title><rect x="50.0974%" y="197" width="0.9771%" height="15" fill="rgb(222,74,54)"/><text x="50.3474%" y="207.50"></text></g><g><title>AST_validation (100,741 samples, 0.15%)</title><rect x="51.3497%" y="181" width="0.1505%" height="15" fill="rgb(216,99,12)"/><text x="51.5997%" y="191.50"></text></g><g><title>crate_injection (83,981 samples, 0.13%)</title><rect x="51.5718%" y="181" width="0.1254%" height="15" fill="rgb(226,22,26)"/><text x="51.8218%" y="191.50"></text></g><g><title>metadata_load_macro (114,833 samples, 0.17%)</title><rect x="77.3038%" y="149" width="0.1715%" height="15" fill="rgb(217,163,10)"/><text x="77.5538%" y="159.50"></text></g><g><title>metadata_register_crate (2,284,955 samples, 3.41%)</title><rect x="77.4753%" y="149" width="3.4126%" height="15" fill="rgb(213,25,53)"/><text x="77.7253%" y="159.50">met..</text></g><g><title>metadata_register_crate (841,381 samples, 1.26%)</title><rect x="79.6313%" y="133" width="1.2566%" height="15" fill="rgb(252,105,26)"/><text x="79.8813%" y="143.50"></text></g><g><title>metadata_register_crate (67,220 samples, 0.10%)</title><rect x="80.7876%" y="117" width="0.1004%" height="15" fill="rgb(220,39,43)"/><text x="81.0376%" y="127.50"></text></g><g><title>macro_expand_crate (19,574,239 samples, 29.23%)</title><rect x="51.6973%" y="181" width="29.2344%" height="15" fill="rgb(229,68,48)"/><text x="51.9473%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (19,550,928 samples, 29.20%)</title><rect x="51.7321%" y="165" width="29.1996%" height="15" fill="rgb(252,8,32)"/><text x="51.9821%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (168,282 samples, 0.25%)</title><rect x="80.9390%" y="181" width="0.2513%" height="15" fill="rgb(223,20,43)"/><text x="81.1890%" y="191.50"></text></g><g><title>finalize_imports (75,531 samples, 0.11%)</title><rect x="81.2049%" y="165" width="0.1128%" height="15" fill="rgb(229,81,49)"/><text x="81.4549%" y="175.50"></text></g><g><title>finalize_macro_resolutions (224,932 samples, 0.34%)</title><rect x="81.3177%" y="165" width="0.3359%" height="15" fill="rgb(236,28,36)"/><text x="81.5677%" y="175.50"></text></g><g><title>late_resolve_crate (2,332,687 samples, 3.48%)</title><rect x="81.6536%" y="165" width="3.4839%" height="15" fill="rgb(249,185,26)"/><text x="81.9036%" y="175.50">lat..</text></g><g><title>configure_and_expand (22,887,005 samples, 34.18%)</title><rect x="51.0745%" y="197" width="34.1820%" height="15" fill="rgb(249,174,33)"/><text x="51.3245%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,722,570 samples, 4.07%)</title><rect x="81.1904%" y="181" width="4.0662%" height="15" fill="rgb(233,201,37)"/><text x="81.4404%" y="191.50">reso..</text></g><g><title>drop_ast (143,342 samples, 0.21%)</title><rect x="85.2565%" y="197" width="0.2141%" height="15" fill="rgb(221,78,26)"/><text x="85.5065%" y="207.50"></text></g><g><title>early_lint_checks (305,424 samples, 0.46%)</title><rect x="85.4932%" y="197" width="0.4562%" height="15" fill="rgb(250,127,30)"/><text x="85.7432%" y="207.50"></text></g><g><title>free_global_ctxt (2,653,780 samples, 3.96%)</title><rect x="85.9494%" y="197" width="3.9635%" height="15" fill="rgb(230,49,44)"/><text x="86.1994%" y="207.50">free..</text></g><g><title>crate_hash (68,101 samples, 0.10%)</title><rect x="90.4371%" y="181" width="0.1017%" height="15" fill="rgb(229,67,23)"/><text x="90.6871%" y="191.50"></text></g><g><title>generate_crate_metadata (555,196 samples, 0.83%)</title><rect x="89.9129%" y="197" width="0.8292%" height="15" fill="rgb(249,83,47)"/><text x="90.1629%" y="207.50"></text></g><g><title>hir_lowering (2,139,274 samples, 3.20%)</title><rect x="90.7420%" y="197" width="3.1950%" height="15" fill="rgb(215,43,3)"/><text x="90.9920%" y="207.50">hir..</text></g><g><title>parse_crate (2,810,041 samples, 4.20%)</title><rect x="94.0076%" y="197" width="4.1968%" height="15" fill="rgb(238,154,13)"/><text x="94.2576%" y="207.50">parse..</text></g><g><title>prepare_outputs (291,543 samples, 0.44%)</title><rect x="98.2164%" y="197" width="0.4354%" height="15" fill="rgb(219,56,2)"/><text x="98.4664%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (459,055 samples, 0.69%)</title><rect x="98.6518%" y="197" width="0.6856%" height="15" fill="rgb(233,0,4)"/><text x="98.9018%" y="207.50"></text></g><g><title>setup_global_ctxt (134,501 samples, 0.20%)</title><rect x="99.3531%" y="197" width="0.2009%" height="15" fill="rgb(235,30,7)"/><text x="99.6031%" y="207.50"></text></g><g><title>all (66,956,228 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (66,956,228 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (298,653 samples, 0.45%)</title><rect x="99.5540%" y="197" width="0.4460%" height="15" fill="rgb(228,22,38)"/><text x="99.8040%" y="207.50"></text></g></svg></svg>