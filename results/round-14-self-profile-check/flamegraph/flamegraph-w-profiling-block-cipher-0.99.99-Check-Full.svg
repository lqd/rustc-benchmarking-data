<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>needs_drop_raw (176,932 samples, 0.79%)</title><rect x="6.5156%" y="133" width="0.7909%" height="15" fill="rgb(227,0,7)"/><text x="6.7656%" y="143.50"></text></g><g><title>is_copy_raw (172,882 samples, 0.77%)</title><rect x="6.5337%" y="117" width="0.7728%" height="15" fill="rgb(217,0,24)"/><text x="6.7837%" y="127.50"></text></g><g><title>evaluate_obligation (167,492 samples, 0.75%)</title><rect x="6.5578%" y="101" width="0.7487%" height="15" fill="rgb(221,193,54)"/><text x="6.8078%" y="111.50"></text></g><g><title>trait_impls_of (133,942 samples, 0.60%)</title><rect x="6.7078%" y="85" width="0.5987%" height="15" fill="rgb(248,212,6)"/><text x="6.9578%" y="95.50"></text></g><g><title>implementations_of_trait (32,970 samples, 0.15%)</title><rect x="7.1591%" y="69" width="0.1474%" height="15" fill="rgb(208,68,35)"/><text x="7.4091%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (29,120 samples, 0.13%)</title><rect x="7.1763%" y="53" width="0.1302%" height="15" fill="rgb(232,128,0)"/><text x="7.4263%" y="63.50"></text></g><g><title>thir_body (44,221 samples, 0.20%)</title><rect x="7.3500%" y="133" width="0.1977%" height="15" fill="rgb(207,160,47)"/><text x="7.6000%" y="143.50"></text></g><g><title>mir_const (431,475 samples, 1.93%)</title><rect x="5.6389%" y="181" width="1.9287%" height="15" fill="rgb(228,23,34)"/><text x="5.8889%" y="191.50">m..</text></g><g><title>unsafety_check_result (359,534 samples, 1.61%)</title><rect x="5.9605%" y="165" width="1.6071%" height="15" fill="rgb(218,30,26)"/><text x="6.2105%" y="175.50"></text></g><g><title>mir_built (318,293 samples, 1.42%)</title><rect x="6.1448%" y="149" width="1.4227%" height="15" fill="rgb(220,122,19)"/><text x="6.3948%" y="159.50"></text></g><g><title>mir_promoted (532,245 samples, 2.38%)</title><rect x="5.2118%" y="197" width="2.3791%" height="15" fill="rgb(250,228,42)"/><text x="5.4618%" y="207.50">mi..</text></g><g><title>type_op_ascribe_user_type (40,311 samples, 0.18%)</title><rect x="7.5909%" y="197" width="0.1802%" height="15" fill="rgb(240,193,28)"/><text x="7.8409%" y="207.50"></text></g><g><title>type_op_prove_predicate (91,101 samples, 0.41%)</title><rect x="7.7711%" y="197" width="0.4072%" height="15" fill="rgb(216,20,37)"/><text x="8.0211%" y="207.50"></text></g><g><title>MIR_borrow_checking (1,188,223 samples, 5.31%)</title><rect x="2.8913%" y="229" width="5.3112%" height="15" fill="rgb(206,188,39)"/><text x="3.1413%" y="239.50">MIR_bor..</text></g><g><title>mir_borrowck (1,186,033 samples, 5.30%)</title><rect x="2.9010%" y="213" width="5.3015%" height="15" fill="rgb(217,207,13)"/><text x="3.1510%" y="223.50">mir_bo..</text></g><g><title>hir_module_items (90,241 samples, 0.40%)</title><rect x="8.2126%" y="229" width="0.4034%" height="15" fill="rgb(231,73,38)"/><text x="8.4626%" y="239.50"></text></g><g><title>get_lang_items (99,811 samples, 0.45%)</title><rect x="9.1531%" y="181" width="0.4461%" height="15" fill="rgb(225,20,46)"/><text x="9.4031%" y="191.50"></text></g><g><title>check_mod_attrs (228,042 samples, 1.02%)</title><rect x="8.7355%" y="213" width="1.0193%" height="15" fill="rgb(210,31,41)"/><text x="8.9855%" y="223.50"></text></g><g><title>codegen_fn_attrs (183,332 samples, 0.82%)</title><rect x="8.9353%" y="197" width="0.8195%" height="15" fill="rgb(221,200,47)"/><text x="9.1853%" y="207.50"></text></g><g><title>supported_target_features (28,440 samples, 0.13%)</title><rect x="9.6277%" y="181" width="0.1271%" height="15" fill="rgb(226,26,5)"/><text x="9.8777%" y="191.50"></text></g><g><title>lookup_deprecation_entry (24,000 samples, 0.11%)</title><rect x="10.0241%" y="197" width="0.1073%" height="15" fill="rgb(249,33,26)"/><text x="10.2741%" y="207.50"></text></g><g><title>lookup_stability (36,260 samples, 0.16%)</title><rect x="10.1314%" y="197" width="0.1621%" height="15" fill="rgb(235,183,28)"/><text x="10.3814%" y="207.50"></text></g><g><title>metadata_decode_entry_lookup_stability (34,000 samples, 0.15%)</title><rect x="10.1415%" y="181" width="0.1520%" height="15" fill="rgb(221,5,38)"/><text x="10.3915%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (99,242 samples, 0.44%)</title><rect x="9.8742%" y="213" width="0.4436%" height="15" fill="rgb(247,18,42)"/><text x="10.1242%" y="223.50"></text></g><g><title>misc_checking_1 (415,005 samples, 1.86%)</title><rect x="8.6177%" y="229" width="1.8550%" height="15" fill="rgb(241,131,45)"/><text x="8.8677%" y="239.50">m..</text></g><g><title>liveness_and_intrinsic_checking (40,591 samples, 0.18%)</title><rect x="10.4774%" y="213" width="0.1814%" height="15" fill="rgb(249,31,29)"/><text x="10.7274%" y="223.50"></text></g><g><title>check_mod_liveness (29,000 samples, 0.13%)</title><rect x="10.5292%" y="197" width="0.1296%" height="15" fill="rgb(225,111,53)"/><text x="10.7792%" y="207.50"></text></g><g><title>misc_checking_2 (60,111 samples, 0.27%)</title><rect x="10.4727%" y="229" width="0.2687%" height="15" fill="rgb(238,160,17)"/><text x="10.7227%" y="239.50"></text></g><g><title>death_checking (36,800 samples, 0.16%)</title><rect x="10.8183%" y="213" width="0.1645%" height="15" fill="rgb(214,148,48)"/><text x="11.0683%" y="223.50"></text></g><g><title>crate_lints (42,650 samples, 0.19%)</title><rect x="10.9879%" y="197" width="0.1906%" height="15" fill="rgb(232,36,49)"/><text x="11.2379%" y="207.50"></text></g><g><title>lint_checking (61,830 samples, 0.28%)</title><rect x="10.9828%" y="213" width="0.2764%" height="15" fill="rgb(209,103,24)"/><text x="11.2328%" y="223.50"></text></g><g><title>misc_checking_3 (171,041 samples, 0.76%)</title><rect x="10.7414%" y="229" width="0.7645%" height="15" fill="rgb(229,88,8)"/><text x="10.9914%" y="239.50"></text></g><g><title>coherence_checking (22,580 samples, 0.10%)</title><rect x="11.6285%" y="213" width="0.1009%" height="15" fill="rgb(213,181,19)"/><text x="11.8785%" y="223.50"></text></g><g><title>evaluate_obligation (41,181 samples, 0.18%)</title><rect x="11.7294%" y="213" width="0.1841%" height="15" fill="rgb(254,191,54)"/><text x="11.9794%" y="223.50"></text></g><g><title>adt_def (30,000 samples, 0.13%)</title><rect x="14.6406%" y="149" width="0.1341%" height="15" fill="rgb(241,83,37)"/><text x="14.8906%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (28,970 samples, 0.13%)</title><rect x="14.6452%" y="133" width="0.1295%" height="15" fill="rgb(233,36,39)"/><text x="14.8952%" y="143.50"></text></g><g><title>adt_sized_constraint (52,070 samples, 0.23%)</title><rect x="14.6162%" y="165" width="0.2327%" height="15" fill="rgb(226,3,54)"/><text x="14.8662%" y="175.50"></text></g><g><title>associated_items (26,190 samples, 0.12%)</title><rect x="14.8490%" y="165" width="0.1171%" height="15" fill="rgb(245,192,40)"/><text x="15.0990%" y="175.50"></text></g><g><title>impl_parent (92,431 samples, 0.41%)</title><rect x="15.6793%" y="53" width="0.4132%" height="15" fill="rgb(238,167,29)"/><text x="15.9293%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (70,621 samples, 0.32%)</title><rect x="15.7768%" y="37" width="0.3157%" height="15" fill="rgb(232,182,51)"/><text x="16.0268%" y="47.50"></text></g><g><title>impl_trait_ref (326,883 samples, 1.46%)</title><rect x="16.0924%" y="53" width="1.4611%" height="15" fill="rgb(231,60,39)"/><text x="16.3424%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (306,763 samples, 1.37%)</title><rect x="16.1824%" y="37" width="1.3712%" height="15" fill="rgb(208,69,12)"/><text x="16.4324%" y="47.50"></text></g><g><title>coherent_trait (534,606 samples, 2.39%)</title><rect x="15.2811%" y="85" width="2.3896%" height="15" fill="rgb(235,93,37)"/><text x="15.5311%" y="95.50">co..</text></g><g><title>specialization_graph_of (531,126 samples, 2.37%)</title><rect x="15.2967%" y="69" width="2.3741%" height="15" fill="rgb(213,116,39)"/><text x="15.5467%" y="79.50">sp..</text></g><g><title>trait_impls_of (26,211 samples, 0.12%)</title><rect x="17.5536%" y="53" width="0.1172%" height="15" fill="rgb(222,207,29)"/><text x="17.8036%" y="63.50"></text></g><g><title>adt_destructor (541,446 samples, 2.42%)</title><rect x="15.2575%" y="117" width="2.4202%" height="15" fill="rgb(206,96,30)"/><text x="15.5075%" y="127.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (540,886 samples, 2.42%)</title><rect x="15.2600%" y="101" width="2.4177%" height="15" fill="rgb(218,138,4)"/><text x="15.5100%" y="111.50">me..</text></g><g><title>adt_dtorck_constraint (570,136 samples, 2.55%)</title><rect x="15.1706%" y="133" width="2.5485%" height="15" fill="rgb(250,191,14)"/><text x="15.4206%" y="143.50">ad..</text></g><g><title>dropck_outlives (623,826 samples, 2.79%)</title><rect x="14.9844%" y="165" width="2.7884%" height="15" fill="rgb(239,60,40)"/><text x="15.2344%" y="175.50">dr..</text></g><g><title>adt_dtorck_constraint (596,746 samples, 2.67%)</title><rect x="15.1055%" y="149" width="2.6674%" height="15" fill="rgb(206,27,48)"/><text x="15.3555%" y="159.50">ad..</text></g><g><title>fn_sig (35,521 samples, 0.16%)</title><rect x="17.8586%" y="165" width="0.1588%" height="15" fill="rgb(225,35,8)"/><text x="18.1086%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (33,941 samples, 0.15%)</title><rect x="17.8657%" y="149" width="0.1517%" height="15" fill="rgb(250,213,24)"/><text x="18.1157%" y="159.50"></text></g><g><title>impl_trait_ref (24,980 samples, 0.11%)</title><rect x="18.1117%" y="165" width="0.1117%" height="15" fill="rgb(247,123,22)"/><text x="18.3617%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (24,220 samples, 0.11%)</title><rect x="18.1151%" y="149" width="0.1083%" height="15" fill="rgb(231,138,38)"/><text x="18.3651%" y="159.50"></text></g><g><title>predicates_of (47,151 samples, 0.21%)</title><rect x="18.4752%" y="165" width="0.2108%" height="15" fill="rgb(231,145,46)"/><text x="18.7252%" y="175.50"></text></g><g><title>predicates_defined_on (40,601 samples, 0.18%)</title><rect x="18.5045%" y="149" width="0.1815%" height="15" fill="rgb(251,118,11)"/><text x="18.7545%" y="159.50"></text></g><g><title>trait_impls_of (31,271 samples, 0.14%)</title><rect x="18.7033%" y="165" width="0.1398%" height="15" fill="rgb(217,147,25)"/><text x="18.9533%" y="175.50"></text></g><g><title>item_bodies_checking (1,575,517 samples, 7.04%)</title><rect x="11.9265%" y="213" width="7.0424%" height="15" fill="rgb(247,81,37)"/><text x="12.1765%" y="223.50">item_bodi..</text></g><g><title>typeck_item_bodies (1,574,107 samples, 7.04%)</title><rect x="11.9328%" y="197" width="7.0361%" height="15" fill="rgb(209,12,38)"/><text x="12.1828%" y="207.50">typeck_it..</text></g><g><title>typeck (1,571,227 samples, 7.02%)</title><rect x="11.9457%" y="181" width="7.0232%" height="15" fill="rgb(227,1,9)"/><text x="12.1957%" y="191.50">typeck</text></g><g><title>fn_sig (74,411 samples, 0.33%)</title><rect x="19.2096%" y="181" width="0.3326%" height="15" fill="rgb(248,47,43)"/><text x="19.4596%" y="191.50"></text></g><g><title>late_bound_vars_map (42,471 samples, 0.19%)</title><rect x="19.3523%" y="165" width="0.1898%" height="15" fill="rgb(221,10,30)"/><text x="19.6023%" y="175.50"></text></g><g><title>resolve_lifetimes (32,661 samples, 0.15%)</title><rect x="19.3962%" y="149" width="0.1460%" height="15" fill="rgb(210,229,1)"/><text x="19.6462%" y="159.50"></text></g><g><title>generics_of (29,250 samples, 0.13%)</title><rect x="19.5422%" y="181" width="0.1307%" height="15" fill="rgb(222,148,37)"/><text x="19.7922%" y="191.50"></text></g><g><title>predicates_of (34,860 samples, 0.16%)</title><rect x="19.6729%" y="181" width="0.1558%" height="15" fill="rgb(234,67,33)"/><text x="19.9229%" y="191.50"></text></g><g><title>predicates_defined_on (32,390 samples, 0.14%)</title><rect x="19.6840%" y="165" width="0.1448%" height="15" fill="rgb(247,98,35)"/><text x="19.9340%" y="175.50"></text></g><g><title>type_collecting (201,602 samples, 0.90%)</title><rect x="18.9891%" y="213" width="0.9011%" height="15" fill="rgb(247,138,52)"/><text x="19.2391%" y="223.50"></text></g><g><title>collect_mod_item_types (187,312 samples, 0.84%)</title><rect x="19.0529%" y="197" width="0.8373%" height="15" fill="rgb(213,79,30)"/><text x="19.3029%" y="207.50"></text></g><g><title>implied_outlives_bounds (71,770 samples, 0.32%)</title><rect x="20.9623%" y="181" width="0.3208%" height="15" fill="rgb(246,177,23)"/><text x="21.2123%" y="191.50"></text></g><g><title>param_env (167,892 samples, 0.75%)</title><rect x="21.2831%" y="181" width="0.7505%" height="15" fill="rgb(230,62,27)"/><text x="21.5331%" y="191.50"></text></g><g><title>analysis (4,392,398 samples, 19.63%)</title><rect x="2.4722%" y="245" width="19.6336%" height="15" fill="rgb(216,154,8)"/><text x="2.7222%" y="255.50">analysis</text></g><g><title>type_check_crate (2,371,386 samples, 10.60%)</title><rect x="11.5060%" y="229" width="10.5999%" height="15" fill="rgb(244,35,45)"/><text x="11.7560%" y="239.50">type_check_crate</text></g><g><title>wf_checking (495,336 samples, 2.21%)</title><rect x="19.8917%" y="213" width="2.2141%" height="15" fill="rgb(251,115,12)"/><text x="20.1417%" y="223.50">w..</text></g><g><title>check_item_well_formed (475,855 samples, 2.13%)</title><rect x="19.9788%" y="197" width="2.1270%" height="15" fill="rgb(240,54,50)"/><text x="20.2288%" y="207.50">c..</text></g><g><title>native_libraries (25,881 samples, 0.12%)</title><rect x="23.8312%" y="229" width="0.1157%" height="15" fill="rgb(233,84,52)"/><text x="24.0812%" y="239.50"></text></g><g><title>codegen_crate (428,215 samples, 1.91%)</title><rect x="22.1477%" y="245" width="1.9141%" height="15" fill="rgb(207,117,47)"/><text x="22.3977%" y="255.50">c..</text></g><g><title>AST_validation (27,160 samples, 0.12%)</title><rect x="24.9914%" y="229" width="0.1214%" height="15" fill="rgb(249,43,39)"/><text x="25.2414%" y="239.50"></text></g><g><title>crate_injection (93,971 samples, 0.42%)</title><rect x="25.1520%" y="229" width="0.4200%" height="15" fill="rgb(209,38,44)"/><text x="25.4020%" y="239.50"></text></g><g><title>metadata_load_macro (108,921 samples, 0.49%)</title><rect x="65.8913%" y="197" width="0.4869%" height="15" fill="rgb(236,212,23)"/><text x="66.1413%" y="207.50"></text></g><g><title>macro_expand_crate (11,831,361 samples, 52.89%)</title><rect x="25.5720%" y="229" width="52.8850%" height="15" fill="rgb(242,79,21)"/><text x="25.8220%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (11,811,071 samples, 52.79%)</title><rect x="25.6627%" y="213" width="52.7943%" height="15" fill="rgb(211,96,35)"/><text x="25.9127%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,702,270 samples, 12.08%)</title><rect x="66.3781%" y="197" width="12.0789%" height="15" fill="rgb(253,215,40)"/><text x="66.6281%" y="207.50">metadata_register_..</text></g><g><title>metadata_register_crate (976,651 samples, 4.37%)</title><rect x="74.0915%" y="181" width="4.3655%" height="15" fill="rgb(211,81,21)"/><text x="74.3415%" y="191.50">metad..</text></g><g><title>metadata_register_crate (78,191 samples, 0.35%)</title><rect x="78.1075%" y="165" width="0.3495%" height="15" fill="rgb(208,190,38)"/><text x="78.3575%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (54,001 samples, 0.24%)</title><rect x="78.4720%" y="229" width="0.2414%" height="15" fill="rgb(235,213,38)"/><text x="78.7220%" y="239.50"></text></g><g><title>finalize_macro_resolutions (283,934 samples, 1.27%)</title><rect x="78.7967%" y="213" width="1.2692%" height="15" fill="rgb(237,122,38)"/><text x="79.0467%" y="223.50"></text></g><g><title>late_resolve_crate (1,129,082 samples, 5.05%)</title><rect x="80.0659%" y="213" width="5.0469%" height="15" fill="rgb(244,218,35)"/><text x="80.3159%" y="223.50">late_r..</text></g><g><title>configure_and_expand (13,681,942 samples, 61.16%)</title><rect x="24.0617%" y="245" width="61.1569%" height="15" fill="rgb(240,68,47)"/><text x="24.3117%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,455,346 samples, 6.51%)</title><rect x="78.7134%" y="229" width="6.5053%" height="15" fill="rgb(210,16,53)"/><text x="78.9634%" y="239.50">resolve_c..</text></g><g><title>crate_hash (79,331 samples, 0.35%)</title><rect x="85.2187%" y="245" width="0.3546%" height="15" fill="rgb(235,124,12)"/><text x="85.4687%" y="255.50"></text></g><g><title>early_lint_checks (41,630 samples, 0.19%)</title><rect x="85.6889%" y="245" width="0.1861%" height="15" fill="rgb(224,169,11)"/><text x="85.9389%" y="255.50"></text></g><g><title>free_global_ctxt (1,702,609 samples, 7.61%)</title><rect x="85.8750%" y="245" width="7.6105%" height="15" fill="rgb(250,166,2)"/><text x="86.1250%" y="255.50">free_globa..</text></g><g><title>hir_lowering (213,153 samples, 0.95%)</title><rect x="93.4855%" y="245" width="0.9528%" height="15" fill="rgb(242,216,29)"/><text x="93.7355%" y="255.50"></text></g><g><title>link (40,600 samples, 0.18%)</title><rect x="94.4383%" y="245" width="0.1815%" height="15" fill="rgb(230,116,27)"/><text x="94.6883%" y="255.50"></text></g><g><title>parse_crate (294,144 samples, 1.31%)</title><rect x="94.6197%" y="245" width="1.3148%" height="15" fill="rgb(228,99,48)"/><text x="94.8697%" y="255.50"></text></g><g><title>prepare_outputs (241,092 samples, 1.08%)</title><rect x="95.9774%" y="245" width="1.0777%" height="15" fill="rgb(253,11,6)"/><text x="96.2274%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (291,403 samples, 1.30%)</title><rect x="97.0550%" y="245" width="1.3025%" height="15" fill="rgb(247,143,39)"/><text x="97.3050%" y="255.50"></text></g><g><title>setup_global_ctxt (100,651 samples, 0.45%)</title><rect x="98.4050%" y="245" width="0.4499%" height="15" fill="rgb(236,97,10)"/><text x="98.6550%" y="255.50"></text></g><g><title>all (22,371,858 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (22,371,858 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (256,172 samples, 1.15%)</title><rect x="98.8549%" y="245" width="1.1451%" height="15" fill="rgb(220,129,5)"/><text x="99.1049%" y="255.50"></text></g></svg></svg>