<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (52,521 samples, 0.13%)</title><rect x="8.3546%" y="117" width="0.1335%" height="15" fill="rgb(227,0,7)"/><text x="8.6046%" y="127.50"></text></g><g><title>item_attrs (53,990 samples, 0.14%)</title><rect x="8.7861%" y="85" width="0.1373%" height="15" fill="rgb(217,0,24)"/><text x="9.0361%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (52,050 samples, 0.13%)</title><rect x="8.7911%" y="69" width="0.1323%" height="15" fill="rgb(221,193,54)"/><text x="9.0411%" y="79.50"></text></g><g><title>codegen_fn_attrs (84,750 samples, 0.22%)</title><rect x="8.7230%" y="101" width="0.2155%" height="15" fill="rgb(248,212,6)"/><text x="8.9730%" y="111.50"></text></g><g><title>is_copy_raw (82,601 samples, 0.21%)</title><rect x="10.3500%" y="53" width="0.2100%" height="15" fill="rgb(208,68,35)"/><text x="10.6000%" y="63.50"></text></g><g><title>evaluate_obligation (68,601 samples, 0.17%)</title><rect x="10.3855%" y="37" width="0.1744%" height="15" fill="rgb(232,128,0)"/><text x="10.6355%" y="47.50"></text></g><g><title>param_env (44,290 samples, 0.11%)</title><rect x="10.5600%" y="53" width="0.1126%" height="15" fill="rgb(207,160,47)"/><text x="10.8100%" y="63.50"></text></g><g><title>adt_drop_tys (141,112 samples, 0.36%)</title><rect x="10.3158%" y="69" width="0.3588%" height="15" fill="rgb(228,23,34)"/><text x="10.5658%" y="79.50"></text></g><g><title>predicates_of (50,800 samples, 0.13%)</title><rect x="11.2123%" y="37" width="0.1292%" height="15" fill="rgb(218,30,26)"/><text x="11.4623%" y="47.50"></text></g><g><title>needs_drop_raw (563,556 samples, 1.43%)</title><rect x="10.2370%" y="85" width="1.4328%" height="15" fill="rgb(220,122,19)"/><text x="10.4870%" y="95.50"></text></g><g><title>is_copy_raw (391,483 samples, 1.00%)</title><rect x="10.6745%" y="69" width="0.9953%" height="15" fill="rgb(250,228,42)"/><text x="10.9245%" y="79.50"></text></g><g><title>evaluate_obligation (359,703 samples, 0.91%)</title><rect x="10.7553%" y="53" width="0.9145%" height="15" fill="rgb(240,193,28)"/><text x="11.0053%" y="63.50"></text></g><g><title>trait_impls_of (127,841 samples, 0.33%)</title><rect x="11.3448%" y="37" width="0.3250%" height="15" fill="rgb(216,20,37)"/><text x="11.5948%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (71,841 samples, 0.18%)</title><rect x="11.8056%" y="69" width="0.1827%" height="15" fill="rgb(206,188,39)"/><text x="12.0556%" y="79.50"></text></g><g><title>impl_parent (190,001 samples, 0.48%)</title><rect x="13.5373%" y="53" width="0.4831%" height="15" fill="rgb(217,207,13)"/><text x="13.7873%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (125,571 samples, 0.32%)</title><rect x="13.7011%" y="37" width="0.3193%" height="15" fill="rgb(231,73,38)"/><text x="13.9511%" y="47.50"></text></g><g><title>specialization_graph_of (1,286,394 samples, 3.27%)</title><rect x="11.9950%" y="69" width="3.2706%" height="15" fill="rgb(225,20,46)"/><text x="12.2450%" y="79.50">spe..</text></g><g><title>impl_trait_ref (489,796 samples, 1.25%)</title><rect x="14.0204%" y="53" width="1.2453%" height="15" fill="rgb(210,31,41)"/><text x="14.2704%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (426,344 samples, 1.08%)</title><rect x="14.1817%" y="37" width="1.0840%" height="15" fill="rgb(221,200,47)"/><text x="14.4317%" y="47.50"></text></g><g><title>resolve_instance (1,441,096 samples, 3.66%)</title><rect x="11.6699%" y="85" width="3.6639%" height="15" fill="rgb(226,26,5)"/><text x="11.9199%" y="95.50">reso..</text></g><g><title>thir_body (185,173 samples, 0.47%)</title><rect x="15.3428%" y="85" width="0.4708%" height="15" fill="rgb(249,33,26)"/><text x="15.5928%" y="95.50"></text></g><g><title>mir_const (3,103,554 samples, 7.89%)</title><rect x="7.9275%" y="133" width="7.8907%" height="15" fill="rgb(235,183,28)"/><text x="8.1775%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (2,883,013 samples, 7.33%)</title><rect x="8.4882%" y="117" width="7.3300%" height="15" fill="rgb(221,5,38)"/><text x="8.7382%" y="127.50">unsafety_c..</text></g><g><title>mir_built (2,705,901 samples, 6.88%)</title><rect x="8.9385%" y="101" width="6.8797%" height="15" fill="rgb(247,18,42)"/><text x="9.1885%" y="111.50">mir_built</text></g><g><title>mir_promoted (3,292,828 samples, 8.37%)</title><rect x="7.4643%" y="149" width="8.3719%" height="15" fill="rgb(241,131,45)"/><text x="7.7143%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (171,242 samples, 0.44%)</title><rect x="15.8362%" y="149" width="0.4354%" height="15" fill="rgb(249,31,29)"/><text x="16.0862%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (211,362 samples, 0.54%)</title><rect x="16.2716%" y="149" width="0.5374%" height="15" fill="rgb(225,111,53)"/><text x="16.5216%" y="159.50"></text></g><g><title>normalize_projection_ty (129,092 samples, 0.33%)</title><rect x="16.4808%" y="133" width="0.3282%" height="15" fill="rgb(238,160,17)"/><text x="16.7308%" y="143.50"></text></g><g><title>type_op_prove_predicate (663,100 samples, 1.69%)</title><rect x="16.8090%" y="149" width="1.6859%" height="15" fill="rgb(214,148,48)"/><text x="17.0590%" y="159.50"></text></g><g><title>MIR_borrow_checking (6,909,477 samples, 17.57%)</title><rect x="0.9384%" y="181" width="17.5671%" height="15" fill="rgb(232,36,49)"/><text x="1.1884%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,897,817 samples, 17.54%)</title><rect x="0.9680%" y="165" width="17.5375%" height="15" fill="rgb(209,103,24)"/><text x="1.2180%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (52,231 samples, 0.13%)</title><rect x="18.5144%" y="181" width="0.1328%" height="15" fill="rgb(229,88,8)"/><text x="18.7644%" y="191.50"></text></g><g><title>codegen_fn_attrs (87,361 samples, 0.22%)</title><rect x="18.9408%" y="117" width="0.2221%" height="15" fill="rgb(213,181,19)"/><text x="19.1908%" y="127.50"></text></g><g><title>codegen_fn_attrs (141,942 samples, 0.36%)</title><rect x="18.8047%" y="149" width="0.3609%" height="15" fill="rgb(254,191,54)"/><text x="19.0547%" y="159.50"></text></g><g><title>should_inherit_track_caller (120,301 samples, 0.31%)</title><rect x="18.8597%" y="133" width="0.3059%" height="15" fill="rgb(241,83,37)"/><text x="19.1097%" y="143.50"></text></g><g><title>check_mod_attrs (189,212 samples, 0.48%)</title><rect x="18.6849%" y="165" width="0.4811%" height="15" fill="rgb(233,36,39)"/><text x="18.9349%" y="175.50"></text></g><g><title>lookup_deprecation_entry (44,320 samples, 0.11%)</title><rect x="19.3516%" y="149" width="0.1127%" height="15" fill="rgb(226,3,54)"/><text x="19.6016%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (106,811 samples, 0.27%)</title><rect x="19.2642%" y="165" width="0.2716%" height="15" fill="rgb(245,192,40)"/><text x="19.5142%" y="175.50"></text></g><g><title>misc_checking_1 (363,554 samples, 0.92%)</title><rect x="18.6484%" y="181" width="0.9243%" height="15" fill="rgb(238,167,29)"/><text x="18.8984%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (97,181 samples, 0.25%)</title><rect x="19.5754%" y="165" width="0.2471%" height="15" fill="rgb(232,182,51)"/><text x="19.8254%" y="175.50"></text></g><g><title>check_mod_liveness (77,661 samples, 0.20%)</title><rect x="19.6251%" y="149" width="0.1975%" height="15" fill="rgb(231,60,39)"/><text x="19.8751%" y="159.50"></text></g><g><title>misc_checking_2 (201,052 samples, 0.51%)</title><rect x="19.5727%" y="181" width="0.5112%" height="15" fill="rgb(208,69,12)"/><text x="19.8227%" y="191.50"></text></g><g><title>match_checking (102,791 samples, 0.26%)</title><rect x="19.8225%" y="165" width="0.2613%" height="15" fill="rgb(235,93,37)"/><text x="20.0725%" y="175.50"></text></g><g><title>check_match (98,931 samples, 0.25%)</title><rect x="19.8323%" y="149" width="0.2515%" height="15" fill="rgb(213,116,39)"/><text x="20.0823%" y="159.50"></text></g><g><title>check_private_in_public (39,500 samples, 0.10%)</title><rect x="20.1018%" y="165" width="0.1004%" height="15" fill="rgb(222,207,29)"/><text x="20.3518%" y="175.50"></text></g><g><title>death_checking (90,301 samples, 0.23%)</title><rect x="20.2022%" y="165" width="0.2296%" height="15" fill="rgb(206,96,30)"/><text x="20.4522%" y="175.50"></text></g><g><title>param_env (44,111 samples, 0.11%)</title><rect x="21.4810%" y="133" width="0.1122%" height="15" fill="rgb(218,138,4)"/><text x="21.7310%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (48,281 samples, 0.12%)</title><rect x="21.6277%" y="117" width="0.1228%" height="15" fill="rgb(250,191,14)"/><text x="21.8777%" y="127.50"></text></g><g><title>impl_parent (519,096 samples, 1.32%)</title><rect x="23.6788%" y="101" width="1.3198%" height="15" fill="rgb(239,60,40)"/><text x="23.9288%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (308,745 samples, 0.78%)</title><rect x="24.2137%" y="85" width="0.7850%" height="15" fill="rgb(206,27,48)"/><text x="24.4637%" y="95.50"></text></g><g><title>specialization_graph_of (2,300,075 samples, 5.85%)</title><rect x="21.7819%" y="117" width="5.8479%" height="15" fill="rgb(225,35,8)"/><text x="22.0319%" y="127.50">special..</text></g><g><title>impl_trait_ref (1,034,889 samples, 2.63%)</title><rect x="24.9986%" y="101" width="2.6312%" height="15" fill="rgb(250,213,24)"/><text x="25.2486%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (835,907 samples, 2.13%)</title><rect x="25.5045%" y="85" width="2.1253%" height="15" fill="rgb(247,123,22)"/><text x="25.7545%" y="95.50">m..</text></g><g><title>resolve_instance (2,377,047 samples, 6.04%)</title><rect x="21.5931%" y="133" width="6.0436%" height="15" fill="rgb(231,138,38)"/><text x="21.8431%" y="143.50">resolve_..</text></g><g><title>crate_lints (3,819,233 samples, 9.71%)</title><rect x="20.4368%" y="149" width="9.7103%" height="15" fill="rgb(231,145,46)"/><text x="20.6868%" y="159.50">crate_lints</text></g><g><title>type_of (984,879 samples, 2.50%)</title><rect x="27.6431%" y="133" width="2.5040%" height="15" fill="rgb(251,118,11)"/><text x="27.8931%" y="143.50">ty..</text></g><g><title>metadata_decode_entry_type_of (751,346 samples, 1.91%)</title><rect x="28.2368%" y="117" width="1.9103%" height="15" fill="rgb(217,147,25)"/><text x="28.4868%" y="127.50">m..</text></g><g><title>lint_checking (3,895,754 samples, 9.90%)</title><rect x="20.4318%" y="165" width="9.9048%" height="15" fill="rgb(247,81,37)"/><text x="20.6818%" y="175.50">lint_checking</text></g><g><title>module_lints (74,571 samples, 0.19%)</title><rect x="30.1471%" y="149" width="0.1896%" height="15" fill="rgb(209,12,38)"/><text x="30.3971%" y="159.50"></text></g><g><title>lint_mod (71,871 samples, 0.18%)</title><rect x="30.1539%" y="133" width="0.1827%" height="15" fill="rgb(227,1,9)"/><text x="30.4039%" y="143.50"></text></g><g><title>privacy_access_levels (51,581 samples, 0.13%)</title><rect x="30.3367%" y="165" width="0.1311%" height="15" fill="rgb(248,47,43)"/><text x="30.5867%" y="175.50"></text></g><g><title>privacy_checking_modules (148,051 samples, 0.38%)</title><rect x="30.4678%" y="165" width="0.3764%" height="15" fill="rgb(221,10,30)"/><text x="30.7178%" y="175.50"></text></g><g><title>check_mod_privacy (146,741 samples, 0.37%)</title><rect x="30.4711%" y="149" width="0.3731%" height="15" fill="rgb(210,229,1)"/><text x="30.7211%" y="159.50"></text></g><g><title>misc_checking_3 (4,238,217 samples, 10.78%)</title><rect x="20.0839%" y="181" width="10.7755%" height="15" fill="rgb(222,148,37)"/><text x="20.3339%" y="191.50">misc_checking_3</text></g><g><title>impl_parent (868,442 samples, 2.21%)</title><rect x="33.8407%" y="117" width="2.2080%" height="15" fill="rgb(234,67,33)"/><text x="34.0907%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (591,471 samples, 1.50%)</title><rect x="34.5449%" y="101" width="1.5038%" height="15" fill="rgb(247,98,35)"/><text x="34.7949%" y="111.50"></text></g><g><title>impl_trait_ref (2,853,719 samples, 7.26%)</title><rect x="36.0487%" y="117" width="7.2555%" height="15" fill="rgb(247,138,52)"/><text x="36.2987%" y="127.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,575,227 samples, 6.55%)</title><rect x="36.7568%" y="101" width="6.5474%" height="15" fill="rgb(213,79,30)"/><text x="37.0068%" y="111.50">metadata_..</text></g><g><title>coherent_trait (5,100,357 samples, 12.97%)</title><rect x="30.9305%" y="149" width="12.9675%" height="15" fill="rgb(246,177,23)"/><text x="31.1805%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (5,095,117 samples, 12.95%)</title><rect x="30.9438%" y="133" width="12.9542%" height="15" fill="rgb(230,62,27)"/><text x="31.1938%" y="143.50">specialization_grap..</text></g><g><title>trait_impls_of (232,193 samples, 0.59%)</title><rect x="43.3076%" y="117" width="0.5903%" height="15" fill="rgb(216,154,8)"/><text x="43.5576%" y="127.50"></text></g><g><title>implementations_of_trait (53,680 samples, 0.14%)</title><rect x="43.7615%" y="101" width="0.1365%" height="15" fill="rgb(244,35,45)"/><text x="44.0115%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (45,570 samples, 0.12%)</title><rect x="43.7821%" y="85" width="0.1159%" height="15" fill="rgb(251,115,12)"/><text x="44.0321%" y="95.50"></text></g><g><title>coherence_checking (5,136,437 samples, 13.06%)</title><rect x="30.9068%" y="165" width="13.0592%" height="15" fill="rgb(240,54,50)"/><text x="31.1568%" y="175.50">coherence_checking</text></g><g><title>adt_def (77,651 samples, 0.20%)</title><rect x="56.1698%" y="101" width="0.1974%" height="15" fill="rgb(233,84,52)"/><text x="56.4198%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (75,831 samples, 0.19%)</title><rect x="56.1745%" y="85" width="0.1928%" height="15" fill="rgb(207,117,47)"/><text x="56.4245%" y="95.50"></text></g><g><title>item_attrs (50,971 samples, 0.13%)</title><rect x="56.2377%" y="69" width="0.1296%" height="15" fill="rgb(249,43,39)"/><text x="56.4877%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (48,831 samples, 0.12%)</title><rect x="56.2431%" y="53" width="0.1242%" height="15" fill="rgb(209,38,44)"/><text x="56.4931%" y="63.50"></text></g><g><title>adt_sized_constraint (91,852 samples, 0.23%)</title><rect x="56.1491%" y="117" width="0.2335%" height="15" fill="rgb(236,212,23)"/><text x="56.3991%" y="127.50"></text></g><g><title>associated_item (306,604 samples, 0.78%)</title><rect x="56.6339%" y="101" width="0.7795%" height="15" fill="rgb(242,79,21)"/><text x="56.8839%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (241,723 samples, 0.61%)</title><rect x="56.7988%" y="85" width="0.6146%" height="15" fill="rgb(211,96,35)"/><text x="57.0488%" y="95.50"></text></g><g><title>associated_items (421,626 samples, 1.07%)</title><rect x="56.3856%" y="117" width="1.0720%" height="15" fill="rgb(253,215,40)"/><text x="56.6356%" y="127.50"></text></g><g><title>adt_dtorck_constraint (60,950 samples, 0.15%)</title><rect x="57.9274%" y="53" width="0.1550%" height="15" fill="rgb(211,81,21)"/><text x="58.1774%" y="63.50"></text></g><g><title>adt_dtorck_constraint (93,991 samples, 0.24%)</title><rect x="57.8542%" y="69" width="0.2390%" height="15" fill="rgb(208,190,38)"/><text x="58.1042%" y="79.50"></text></g><g><title>adt_dtorck_constraint (130,982 samples, 0.33%)</title><rect x="57.7860%" y="85" width="0.3330%" height="15" fill="rgb(235,213,38)"/><text x="58.0360%" y="95.50"></text></g><g><title>dropck_outlives (251,032 samples, 0.64%)</title><rect x="57.5167%" y="117" width="0.6382%" height="15" fill="rgb(237,122,38)"/><text x="57.7667%" y="127.50"></text></g><g><title>adt_dtorck_constraint (183,062 samples, 0.47%)</title><rect x="57.6895%" y="101" width="0.4654%" height="15" fill="rgb(244,218,35)"/><text x="57.9395%" y="111.50"></text></g><g><title>predicates_of (44,130 samples, 0.11%)</title><rect x="58.8870%" y="101" width="0.1122%" height="15" fill="rgb(240,68,47)"/><text x="59.1370%" y="111.50"></text></g><g><title>specializes (40,791 samples, 0.10%)</title><rect x="58.9992%" y="101" width="0.1037%" height="15" fill="rgb(210,16,53)"/><text x="59.2492%" y="111.50"></text></g><g><title>evaluate_obligation (764,456 samples, 1.94%)</title><rect x="58.1550%" y="117" width="1.9436%" height="15" fill="rgb(235,124,12)"/><text x="58.4050%" y="127.50">e..</text></g><g><title>trait_impls_of (389,395 samples, 0.99%)</title><rect x="59.1085%" y="101" width="0.9900%" height="15" fill="rgb(224,169,11)"/><text x="59.3585%" y="111.50"></text></g><g><title>implementations_of_trait (98,241 samples, 0.25%)</title><rect x="59.8488%" y="85" width="0.2498%" height="15" fill="rgb(250,166,2)"/><text x="60.0988%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (76,111 samples, 0.19%)</title><rect x="59.9051%" y="69" width="0.1935%" height="15" fill="rgb(242,216,29)"/><text x="60.1551%" y="79.50"></text></g><g><title>fn_sig (67,870 samples, 0.17%)</title><rect x="60.1345%" y="117" width="0.1726%" height="15" fill="rgb(230,116,27)"/><text x="60.3845%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (59,620 samples, 0.15%)</title><rect x="60.1555%" y="101" width="0.1516%" height="15" fill="rgb(228,99,48)"/><text x="60.4055%" y="111.50"></text></g><g><title>generics_of (125,791 samples, 0.32%)</title><rect x="60.3070%" y="117" width="0.3198%" height="15" fill="rgb(253,11,6)"/><text x="60.5570%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (106,121 samples, 0.27%)</title><rect x="60.3571%" y="101" width="0.2698%" height="15" fill="rgb(247,143,39)"/><text x="60.6071%" y="111.50"></text></g><g><title>associated_item (41,852 samples, 0.11%)</title><rect x="60.6877%" y="85" width="0.1064%" height="15" fill="rgb(236,97,10)"/><text x="60.9377%" y="95.50"></text></g><g><title>impl_item_implementor_ids (73,902 samples, 0.19%)</title><rect x="60.6269%" y="117" width="0.1879%" height="15" fill="rgb(233,208,19)"/><text x="60.8769%" y="127.50"></text></g><g><title>associated_items (66,762 samples, 0.17%)</title><rect x="60.6450%" y="101" width="0.1697%" height="15" fill="rgb(216,164,2)"/><text x="60.8950%" y="111.50"></text></g><g><title>impl_trait_ref (47,650 samples, 0.12%)</title><rect x="60.8281%" y="117" width="0.1211%" height="15" fill="rgb(220,129,5)"/><text x="61.0781%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (39,940 samples, 0.10%)</title><rect x="60.8477%" y="101" width="0.1015%" height="15" fill="rgb(242,17,10)"/><text x="61.0977%" y="111.50"></text></g><g><title>item_attrs (70,612 samples, 0.18%)</title><rect x="61.0006%" y="117" width="0.1795%" height="15" fill="rgb(242,107,0)"/><text x="61.2506%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (64,852 samples, 0.16%)</title><rect x="61.0153%" y="101" width="0.1649%" height="15" fill="rgb(251,28,31)"/><text x="61.2653%" y="111.50"></text></g><g><title>evaluate_obligation (96,201 samples, 0.24%)</title><rect x="61.5173%" y="101" width="0.2446%" height="15" fill="rgb(233,223,10)"/><text x="61.7673%" y="111.50"></text></g><g><title>method_autoderef_steps (195,304 samples, 0.50%)</title><rect x="61.2930%" y="117" width="0.4966%" height="15" fill="rgb(215,21,27)"/><text x="61.5430%" y="127.50"></text></g><g><title>evaluate_obligation (50,371 samples, 0.13%)</title><rect x="61.8586%" y="101" width="0.1281%" height="15" fill="rgb(232,23,21)"/><text x="62.1086%" y="111.50"></text></g><g><title>object_safety_violations (113,611 samples, 0.29%)</title><rect x="61.7895%" y="117" width="0.2889%" height="15" fill="rgb(244,5,23)"/><text x="62.0395%" y="127.50"></text></g><g><title>explicit_predicates_of (62,521 samples, 0.16%)</title><rect x="62.3902%" y="85" width="0.1590%" height="15" fill="rgb(226,81,46)"/><text x="62.6402%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (48,881 samples, 0.12%)</title><rect x="62.4249%" y="69" width="0.1243%" height="15" fill="rgb(247,70,30)"/><text x="62.6749%" y="79.50"></text></g><g><title>predicates_of (186,881 samples, 0.48%)</title><rect x="62.1295%" y="117" width="0.4751%" height="15" fill="rgb(212,68,19)"/><text x="62.3795%" y="127.50"></text></g><g><title>predicates_defined_on (128,421 samples, 0.33%)</title><rect x="62.2781%" y="101" width="0.3265%" height="15" fill="rgb(240,187,13)"/><text x="62.5281%" y="111.50"></text></g><g><title>trait_impls_of (123,812 samples, 0.31%)</title><rect x="62.6289%" y="117" width="0.3148%" height="15" fill="rgb(223,113,26)"/><text x="62.8789%" y="127.50"></text></g><g><title>type_of (58,850 samples, 0.15%)</title><rect x="62.9436%" y="117" width="0.1496%" height="15" fill="rgb(206,192,2)"/><text x="63.1936%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (44,050 samples, 0.11%)</title><rect x="62.9813%" y="101" width="0.1120%" height="15" fill="rgb(241,108,4)"/><text x="63.2313%" y="111.50"></text></g><g><title>item_bodies_checking (7,528,294 samples, 19.14%)</title><rect x="43.9992%" y="165" width="19.1405%" height="15" fill="rgb(247,173,49)"/><text x="44.2492%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (7,526,624 samples, 19.14%)</title><rect x="44.0034%" y="149" width="19.1362%" height="15" fill="rgb(224,114,35)"/><text x="44.2534%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (7,516,914 samples, 19.11%)</title><rect x="44.0281%" y="133" width="19.1115%" height="15" fill="rgb(245,159,27)"/><text x="44.2781%" y="143.50">typeck</text></g><g><title>impl_parent (55,570 samples, 0.14%)</title><rect x="63.6041%" y="85" width="0.1413%" height="15" fill="rgb(245,172,44)"/><text x="63.8541%" y="95.50"></text></g><g><title>impl_trait_ref (185,741 samples, 0.47%)</title><rect x="63.7454%" y="85" width="0.4722%" height="15" fill="rgb(236,23,11)"/><text x="63.9954%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (166,911 samples, 0.42%)</title><rect x="63.7933%" y="69" width="0.4244%" height="15" fill="rgb(205,117,38)"/><text x="64.0433%" y="79.50"></text></g><g><title>adt_destructor (353,324 samples, 0.90%)</title><rect x="63.4029%" y="133" width="0.8983%" height="15" fill="rgb(237,72,25)"/><text x="63.6529%" y="143.50"></text></g><g><title>coherent_trait (351,014 samples, 0.89%)</title><rect x="63.4087%" y="117" width="0.8924%" height="15" fill="rgb(244,70,9)"/><text x="63.6587%" y="127.50"></text></g><g><title>specialization_graph_of (349,734 samples, 0.89%)</title><rect x="63.4120%" y="101" width="0.8892%" height="15" fill="rgb(217,125,39)"/><text x="63.6620%" y="111.50"></text></g><g><title>item_types_checking (491,455 samples, 1.25%)</title><rect x="63.1396%" y="165" width="1.2495%" height="15" fill="rgb(235,36,10)"/><text x="63.3896%" y="175.50"></text></g><g><title>check_mod_item_types (489,745 samples, 1.25%)</title><rect x="63.1440%" y="149" width="1.2452%" height="15" fill="rgb(251,123,47)"/><text x="63.3940%" y="159.50"></text></g><g><title>fn_sig (44,551 samples, 0.11%)</title><rect x="64.5231%" y="133" width="0.1133%" height="15" fill="rgb(221,13,13)"/><text x="64.7731%" y="143.50"></text></g><g><title>late_bound_vars_map (122,011 samples, 0.31%)</title><rect x="64.9576%" y="85" width="0.3102%" height="15" fill="rgb(238,131,9)"/><text x="65.2076%" y="95.50"></text></g><g><title>resolve_lifetimes (114,271 samples, 0.29%)</title><rect x="64.9773%" y="69" width="0.2905%" height="15" fill="rgb(211,50,8)"/><text x="65.2273%" y="79.50"></text></g><g><title>explicit_predicates_of (194,262 samples, 0.49%)</title><rect x="64.7823%" y="101" width="0.4939%" height="15" fill="rgb(245,182,24)"/><text x="65.0323%" y="111.50"></text></g><g><title>predicates_of (272,704 samples, 0.69%)</title><rect x="64.7365%" y="133" width="0.6933%" height="15" fill="rgb(242,14,37)"/><text x="64.9865%" y="143.50"></text></g><g><title>predicates_defined_on (266,574 samples, 0.68%)</title><rect x="64.7521%" y="117" width="0.6778%" height="15" fill="rgb(246,228,12)"/><text x="65.0021%" y="127.50"></text></g><g><title>inferred_outlives_of (60,431 samples, 0.15%)</title><rect x="65.2762%" y="101" width="0.1536%" height="15" fill="rgb(213,55,15)"/><text x="65.5262%" y="111.50"></text></g><g><title>inferred_outlives_crate (55,941 samples, 0.14%)</title><rect x="65.2877%" y="85" width="0.1422%" height="15" fill="rgb(209,9,3)"/><text x="65.5377%" y="95.50"></text></g><g><title>type_collecting (446,765 samples, 1.14%)</title><rect x="64.3908%" y="165" width="1.1359%" height="15" fill="rgb(230,59,30)"/><text x="64.6408%" y="175.50"></text></g><g><title>collect_mod_item_types (441,995 samples, 1.12%)</title><rect x="64.4029%" y="149" width="1.1238%" height="15" fill="rgb(209,121,21)"/><text x="64.6529%" y="159.50"></text></g><g><title>adt_def (65,210 samples, 0.17%)</title><rect x="66.3604%" y="101" width="0.1658%" height="15" fill="rgb(220,109,13)"/><text x="66.6104%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (64,330 samples, 0.16%)</title><rect x="66.3626%" y="85" width="0.1636%" height="15" fill="rgb(232,18,1)"/><text x="66.6126%" y="95.50"></text></g><g><title>item_attrs (58,280 samples, 0.15%)</title><rect x="66.3780%" y="69" width="0.1482%" height="15" fill="rgb(215,41,42)"/><text x="66.6280%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (57,750 samples, 0.15%)</title><rect x="66.3794%" y="53" width="0.1468%" height="15" fill="rgb(224,123,36)"/><text x="66.6294%" y="63.50"></text></g><g><title>adt_sized_constraint (70,560 samples, 0.18%)</title><rect x="66.3495%" y="133" width="0.1794%" height="15" fill="rgb(240,125,3)"/><text x="66.5995%" y="143.50"></text></g><g><title>adt_sized_constraint (67,610 samples, 0.17%)</title><rect x="66.3570%" y="117" width="0.1719%" height="15" fill="rgb(205,98,50)"/><text x="66.6070%" y="127.50"></text></g><g><title>evaluate_obligation (208,743 samples, 0.53%)</title><rect x="66.5322%" y="133" width="0.5307%" height="15" fill="rgb(205,185,37)"/><text x="66.7822%" y="143.50"></text></g><g><title>implied_outlives_bounds (65,261 samples, 0.17%)</title><rect x="67.0629%" y="133" width="0.1659%" height="15" fill="rgb(238,207,15)"/><text x="67.3129%" y="143.50"></text></g><g><title>check_impl_item_well_formed (756,727 samples, 1.92%)</title><rect x="65.5946%" y="149" width="1.9240%" height="15" fill="rgb(213,199,42)"/><text x="65.8446%" y="159.50">c..</text></g><g><title>region_scope_tree (57,690 samples, 0.15%)</title><rect x="67.3719%" y="133" width="0.1467%" height="15" fill="rgb(235,201,11)"/><text x="67.6219%" y="143.50"></text></g><g><title>implied_outlives_bounds (44,830 samples, 0.11%)</title><rect x="68.1092%" y="133" width="0.1140%" height="15" fill="rgb(207,46,11)"/><text x="68.3592%" y="143.50"></text></g><g><title>param_env (121,782 samples, 0.31%)</title><rect x="68.2232%" y="133" width="0.3096%" height="15" fill="rgb(241,35,35)"/><text x="68.4732%" y="143.50"></text></g><g><title>analysis (26,740,957 samples, 67.99%)</title><rect x="0.7151%" y="197" width="67.9881%" height="15" fill="rgb(243,32,47)"/><text x="0.9651%" y="207.50">analysis</text></g><g><title>type_check_crate (14,884,655 samples, 37.84%)</title><rect x="30.8594%" y="181" width="37.8438%" height="15" fill="rgb(247,202,23)"/><text x="31.1094%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,248,684 samples, 3.17%)</title><rect x="65.5285%" y="165" width="3.1747%" height="15" fill="rgb(219,102,11)"/><text x="65.7785%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (465,956 samples, 1.18%)</title><rect x="67.5185%" y="149" width="1.1847%" height="15" fill="rgb(243,110,44)"/><text x="67.7685%" y="159.50"></text></g><g><title>codegen_crate (344,403 samples, 0.88%)</title><rect x="68.7161%" y="197" width="0.8756%" height="15" fill="rgb(222,74,54)"/><text x="68.9661%" y="207.50"></text></g><g><title>metadata_load_macro (101,991 samples, 0.26%)</title><rect x="82.4236%" y="149" width="0.2593%" height="15" fill="rgb(216,99,12)"/><text x="82.6736%" y="159.50"></text></g><g><title>macro_expand_crate (6,278,800 samples, 15.96%)</title><rect x="70.0332%" y="181" width="15.9637%" height="15" fill="rgb(226,22,26)"/><text x="70.2832%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (6,266,860 samples, 15.93%)</title><rect x="70.0635%" y="165" width="15.9333%" height="15" fill="rgb(217,163,10)"/><text x="70.3135%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,303,414 samples, 3.31%)</title><rect x="82.6830%" y="149" width="3.3139%" height="15" fill="rgb(213,25,53)"/><text x="82.9330%" y="159.50">met..</text></g><g><title>metadata_register_crate (469,326 samples, 1.19%)</title><rect x="84.8036%" y="133" width="1.1932%" height="15" fill="rgb(252,105,26)"/><text x="85.0536%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (41,360 samples, 0.11%)</title><rect x="86.0023%" y="181" width="0.1052%" height="15" fill="rgb(220,39,43)"/><text x="86.2523%" y="191.50"></text></g><g><title>late_resolve_crate (339,154 samples, 0.86%)</title><rect x="86.1782%" y="165" width="0.8623%" height="15" fill="rgb(229,68,48)"/><text x="86.4282%" y="175.50"></text></g><g><title>configure_and_expand (6,884,026 samples, 17.50%)</title><rect x="69.5918%" y="197" width="17.5024%" height="15" fill="rgb(252,8,32)"/><text x="69.8418%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (388,124 samples, 0.99%)</title><rect x="86.1074%" y="181" width="0.9868%" height="15" fill="rgb(223,20,43)"/><text x="86.3574%" y="191.50"></text></g><g><title>early_lint_checks (69,281 samples, 0.18%)</title><rect x="87.2108%" y="197" width="0.1761%" height="15" fill="rgb(229,81,49)"/><text x="87.4608%" y="207.50"></text></g><g><title>free_global_ctxt (2,568,959 samples, 6.53%)</title><rect x="87.3870%" y="197" width="6.5315%" height="15" fill="rgb(236,28,36)"/><text x="87.6370%" y="207.50">free_glob..</text></g><g><title>crate_hash (60,050 samples, 0.15%)</title><rect x="94.4302%" y="181" width="0.1527%" height="15" fill="rgb(249,185,26)"/><text x="94.6802%" y="191.50"></text></g><g><title>generate_crate_metadata (355,744 samples, 0.90%)</title><rect x="93.9185%" y="197" width="0.9045%" height="15" fill="rgb(249,174,33)"/><text x="94.1685%" y="207.50"></text></g><g><title>hir_lowering (457,565 samples, 1.16%)</title><rect x="94.8229%" y="197" width="1.1633%" height="15" fill="rgb(233,201,37)"/><text x="95.0729%" y="207.50"></text></g><g><title>parse_crate (510,646 samples, 1.30%)</title><rect x="96.0778%" y="197" width="1.2983%" height="15" fill="rgb(221,78,26)"/><text x="96.3278%" y="207.50"></text></g><g><title>prepare_outputs (205,763 samples, 0.52%)</title><rect x="97.3859%" y="197" width="0.5231%" height="15" fill="rgb(250,127,30)"/><text x="97.6359%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (439,945 samples, 1.12%)</title><rect x="97.9091%" y="197" width="1.1185%" height="15" fill="rgb(230,49,44)"/><text x="98.1591%" y="207.50"></text></g><g><title>setup_global_ctxt (72,811 samples, 0.19%)</title><rect x="99.0476%" y="197" width="0.1851%" height="15" fill="rgb(229,67,23)"/><text x="99.2976%" y="207.50"></text></g><g><title>all (39,331,806 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (39,331,806 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (301,784 samples, 0.77%)</title><rect x="99.2327%" y="197" width="0.7673%" height="15" fill="rgb(238,154,13)"/><text x="99.4827%" y="207.50"></text></g></svg></svg>