<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (134,922 samples, 0.13%)</title><rect x="10.2462%" y="117" width="0.1323%" height="15" fill="rgb(227,0,7)"/><text x="10.4962%" y="127.50"></text></g><g><title>item_attrs (213,261 samples, 0.21%)</title><rect x="10.7094%" y="85" width="0.2091%" height="15" fill="rgb(217,0,24)"/><text x="10.9594%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (208,141 samples, 0.20%)</title><rect x="10.7145%" y="69" width="0.2041%" height="15" fill="rgb(221,193,54)"/><text x="10.9645%" y="79.50"></text></g><g><title>codegen_fn_attrs (266,682 samples, 0.26%)</title><rect x="10.6637%" y="101" width="0.2615%" height="15" fill="rgb(248,212,6)"/><text x="10.9137%" y="111.50"></text></g><g><title>eval_to_const_value_raw (104,631 samples, 0.10%)</title><rect x="12.6466%" y="85" width="0.1026%" height="15" fill="rgb(208,68,35)"/><text x="12.8966%" y="95.50"></text></g><g><title>adt_drop_tys (166,804 samples, 0.16%)</title><rect x="12.8550%" y="69" width="0.1635%" height="15" fill="rgb(232,128,0)"/><text x="13.1050%" y="79.50"></text></g><g><title>needs_drop_raw (499,497 samples, 0.49%)</title><rect x="12.8171%" y="85" width="0.4897%" height="15" fill="rgb(207,160,47)"/><text x="13.0671%" y="95.50"></text></g><g><title>is_copy_raw (294,012 samples, 0.29%)</title><rect x="13.0185%" y="69" width="0.2883%" height="15" fill="rgb(228,23,34)"/><text x="13.2685%" y="79.50"></text></g><g><title>evaluate_obligation (252,802 samples, 0.25%)</title><rect x="13.0589%" y="53" width="0.2479%" height="15" fill="rgb(218,30,26)"/><text x="13.3089%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (206,762 samples, 0.20%)</title><rect x="13.4316%" y="69" width="0.2027%" height="15" fill="rgb(220,122,19)"/><text x="13.6816%" y="79.50"></text></g><g><title>impl_parent (186,141 samples, 0.18%)</title><rect x="13.9751%" y="53" width="0.1825%" height="15" fill="rgb(250,228,42)"/><text x="14.2251%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (130,380 samples, 0.13%)</title><rect x="14.0298%" y="37" width="0.1278%" height="15" fill="rgb(240,193,28)"/><text x="14.2798%" y="47.50"></text></g><g><title>specialization_graph_of (960,681 samples, 0.94%)</title><rect x="13.7059%" y="69" width="0.9419%" height="15" fill="rgb(216,20,37)"/><text x="13.9559%" y="79.50"></text></g><g><title>impl_trait_ref (500,009 samples, 0.49%)</title><rect x="14.1576%" y="53" width="0.4903%" height="15" fill="rgb(206,188,39)"/><text x="14.4076%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (441,897 samples, 0.43%)</title><rect x="14.2146%" y="37" width="0.4333%" height="15" fill="rgb(217,207,13)"/><text x="14.4646%" y="47.50"></text></g><g><title>resolve_instance (1,387,086 samples, 1.36%)</title><rect x="13.3307%" y="85" width="1.3600%" height="15" fill="rgb(231,73,38)"/><text x="13.5807%" y="95.50"></text></g><g><title>thir_body (605,509 samples, 0.59%)</title><rect x="14.7093%" y="85" width="0.5937%" height="15" fill="rgb(225,20,46)"/><text x="14.9593%" y="95.50"></text></g><g><title>mir_const (5,775,522 samples, 5.66%)</title><rect x="9.6575%" y="133" width="5.6628%" height="15" fill="rgb(210,31,41)"/><text x="9.9075%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (5,040,157 samples, 4.94%)</title><rect x="10.3785%" y="117" width="4.9418%" height="15" fill="rgb(221,200,47)"/><text x="10.6285%" y="127.50">unsafe..</text></g><g><title>mir_built (4,482,610 samples, 4.40%)</title><rect x="10.9252%" y="101" width="4.3951%" height="15" fill="rgb(226,26,5)"/><text x="11.1752%" y="111.50">mir_b..</text></g><g><title>thir_body (116,321 samples, 0.11%)</title><rect x="16.0278%" y="69" width="0.1141%" height="15" fill="rgb(249,33,26)"/><text x="16.2778%" y="79.50"></text></g><g><title>mir_const (617,357 samples, 0.61%)</title><rect x="15.5418%" y="117" width="0.6053%" height="15" fill="rgb(235,183,28)"/><text x="15.7918%" y="127.50"></text></g><g><title>unsafety_check_result (478,984 samples, 0.47%)</title><rect x="15.6775%" y="101" width="0.4696%" height="15" fill="rgb(221,5,38)"/><text x="15.9275%" y="111.50"></text></g><g><title>mir_built (427,433 samples, 0.42%)</title><rect x="15.7280%" y="85" width="0.4191%" height="15" fill="rgb(247,18,42)"/><text x="15.9780%" y="95.50"></text></g><g><title>mir_promoted (7,350,199 samples, 7.21%)</title><rect x="8.9417%" y="149" width="7.2067%" height="15" fill="rgb(241,131,45)"/><text x="9.1917%" y="159.50">mir_promot..</text></g><g><title>mir_const_qualif (844,678 samples, 0.83%)</title><rect x="15.3203%" y="133" width="0.8282%" height="15" fill="rgb(249,31,29)"/><text x="15.5703%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (277,626 samples, 0.27%)</title><rect x="16.1485%" y="149" width="0.2722%" height="15" fill="rgb(225,111,53)"/><text x="16.3985%" y="159.50"></text></g><g><title>type_op_normalize_predicate (211,973 samples, 0.21%)</title><rect x="16.4958%" y="149" width="0.2078%" height="15" fill="rgb(238,160,17)"/><text x="16.7458%" y="159.50"></text></g><g><title>normalize_projection_ty (125,582 samples, 0.12%)</title><rect x="16.5805%" y="133" width="0.1231%" height="15" fill="rgb(214,148,48)"/><text x="16.8305%" y="143.50"></text></g><g><title>type_op_normalize_ty (148,181 samples, 0.15%)</title><rect x="16.7036%" y="149" width="0.1453%" height="15" fill="rgb(232,36,49)"/><text x="16.9536%" y="159.50"></text></g><g><title>type_op_prove_predicate (910,514 samples, 0.89%)</title><rect x="16.8489%" y="149" width="0.8927%" height="15" fill="rgb(209,103,24)"/><text x="17.0989%" y="159.50"></text></g><g><title>MIR_borrow_checking (17,110,179 samples, 16.78%)</title><rect x="0.9703%" y="181" width="16.7762%" height="15" fill="rgb(229,88,8)"/><text x="1.2203%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (16,994,489 samples, 16.66%)</title><rect x="1.0837%" y="165" width="16.6628%" height="15" fill="rgb(213,181,19)"/><text x="1.3337%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (423,425 samples, 0.42%)</title><rect x="17.7465%" y="181" width="0.4152%" height="15" fill="rgb(254,191,54)"/><text x="17.9965%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (367,815 samples, 0.36%)</title><rect x="17.8011%" y="165" width="0.3606%" height="15" fill="rgb(241,83,37)"/><text x="18.0511%" y="175.50"></text></g><g><title>hir_module_items (244,763 samples, 0.24%)</title><rect x="18.1617%" y="181" width="0.2400%" height="15" fill="rgb(233,36,39)"/><text x="18.4117%" y="191.50"></text></g><g><title>codegen_fn_attrs (131,501 samples, 0.13%)</title><rect x="18.8328%" y="117" width="0.1289%" height="15" fill="rgb(226,3,54)"/><text x="19.0828%" y="127.50"></text></g><g><title>should_inherit_track_caller (230,753 samples, 0.23%)</title><rect x="18.7419%" y="133" width="0.2262%" height="15" fill="rgb(245,192,40)"/><text x="18.9919%" y="143.50"></text></g><g><title>codegen_fn_attrs (414,685 samples, 0.41%)</title><rect x="18.5810%" y="149" width="0.4066%" height="15" fill="rgb(238,167,29)"/><text x="18.8310%" y="159.50"></text></g><g><title>check_mod_attrs (576,845 samples, 0.57%)</title><rect x="18.4221%" y="165" width="0.5656%" height="15" fill="rgb(232,182,51)"/><text x="18.6721%" y="175.50"></text></g><g><title>lookup_deprecation_entry (104,601 samples, 0.10%)</title><rect x="19.2764%" y="149" width="0.1026%" height="15" fill="rgb(231,60,39)"/><text x="19.5264%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (334,134 samples, 0.33%)</title><rect x="19.1310%" y="165" width="0.3276%" height="15" fill="rgb(208,69,12)"/><text x="19.3810%" y="175.50"></text></g><g><title>misc_checking_1 (1,131,352 samples, 1.11%)</title><rect x="18.4021%" y="181" width="1.1093%" height="15" fill="rgb(235,93,37)"/><text x="18.6521%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (282,063 samples, 0.28%)</title><rect x="19.5131%" y="165" width="0.2766%" height="15" fill="rgb(213,116,39)"/><text x="19.7631%" y="175.50"></text></g><g><title>check_mod_liveness (212,182 samples, 0.21%)</title><rect x="19.5816%" y="149" width="0.2080%" height="15" fill="rgb(222,207,29)"/><text x="19.8316%" y="159.50"></text></g><g><title>misc_checking_2 (809,549 samples, 0.79%)</title><rect x="19.5114%" y="181" width="0.7937%" height="15" fill="rgb(206,96,30)"/><text x="19.7614%" y="191.50"></text></g><g><title>match_checking (525,736 samples, 0.52%)</title><rect x="19.7896%" y="165" width="0.5155%" height="15" fill="rgb(218,138,4)"/><text x="20.0396%" y="175.50"></text></g><g><title>check_match (494,445 samples, 0.48%)</title><rect x="19.8203%" y="149" width="0.4848%" height="15" fill="rgb(250,191,14)"/><text x="20.0703%" y="159.50"></text></g><g><title>check_private_in_public (167,192 samples, 0.16%)</title><rect x="20.3153%" y="165" width="0.1639%" height="15" fill="rgb(239,60,40)"/><text x="20.5653%" y="175.50"></text></g><g><title>death_checking (775,119 samples, 0.76%)</title><rect x="20.4792%" y="165" width="0.7600%" height="15" fill="rgb(206,27,48)"/><text x="20.7292%" y="175.50"></text></g><g><title>item_attrs (513,805 samples, 0.50%)</title><rect x="20.7355%" y="149" width="0.5038%" height="15" fill="rgb(225,35,8)"/><text x="20.9855%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (511,595 samples, 0.50%)</title><rect x="20.7376%" y="133" width="0.5016%" height="15" fill="rgb(250,213,24)"/><text x="20.9876%" y="143.50"></text></g><g><title>eval_to_const_value_raw (164,732 samples, 0.16%)</title><rect x="21.9503%" y="133" width="0.1615%" height="15" fill="rgb(247,123,22)"/><text x="22.2003%" y="143.50"></text></g><g><title>eval_to_const_value_raw (159,052 samples, 0.16%)</title><rect x="21.9558%" y="117" width="0.1559%" height="15" fill="rgb(231,138,38)"/><text x="22.2058%" y="127.50"></text></g><g><title>eval_to_allocation_raw (148,212 samples, 0.15%)</title><rect x="21.9665%" y="101" width="0.1453%" height="15" fill="rgb(231,145,46)"/><text x="22.2165%" y="111.50"></text></g><g><title>param_env (119,311 samples, 0.12%)</title><rect x="22.1118%" y="133" width="0.1170%" height="15" fill="rgb(251,118,11)"/><text x="22.3618%" y="143.50"></text></g><g><title>crate_lints (2,071,953 samples, 2.03%)</title><rect x="21.2407%" y="149" width="2.0315%" height="15" fill="rgb(217,147,25)"/><text x="21.4907%" y="159.50">c..</text></g><g><title>type_of (1,059,581 samples, 1.04%)</title><rect x="22.2333%" y="133" width="1.0389%" height="15" fill="rgb(247,81,37)"/><text x="22.4833%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (825,967 samples, 0.81%)</title><rect x="22.4623%" y="117" width="0.8098%" height="15" fill="rgb(209,12,38)"/><text x="22.7123%" y="127.50"></text></g><g><title>lint_checking (2,535,428 samples, 2.49%)</title><rect x="21.2392%" y="165" width="2.4859%" height="15" fill="rgb(227,1,9)"/><text x="21.4892%" y="175.50">li..</text></g><g><title>module_lints (462,005 samples, 0.45%)</title><rect x="23.2722%" y="149" width="0.4530%" height="15" fill="rgb(248,47,43)"/><text x="23.5222%" y="159.50"></text></g><g><title>lint_mod (457,965 samples, 0.45%)</title><rect x="23.2762%" y="133" width="0.4490%" height="15" fill="rgb(221,10,30)"/><text x="23.5262%" y="143.50"></text></g><g><title>layout_of (234,142 samples, 0.23%)</title><rect x="23.4956%" y="117" width="0.2296%" height="15" fill="rgb(210,229,1)"/><text x="23.7456%" y="127.50"></text></g><g><title>privacy_access_levels (206,832 samples, 0.20%)</title><rect x="23.7252%" y="165" width="0.2028%" height="15" fill="rgb(222,148,37)"/><text x="23.9752%" y="175.50"></text></g><g><title>privacy_checking_modules (484,645 samples, 0.48%)</title><rect x="23.9280%" y="165" width="0.4752%" height="15" fill="rgb(234,67,33)"/><text x="24.1780%" y="175.50"></text></g><g><title>check_mod_privacy (478,625 samples, 0.47%)</title><rect x="23.9339%" y="149" width="0.4693%" height="15" fill="rgb(247,98,35)"/><text x="24.1839%" y="159.50"></text></g><g><title>misc_checking_3 (4,196,646 samples, 4.11%)</title><rect x="20.3051%" y="181" width="4.1147%" height="15" fill="rgb(247,138,52)"/><text x="20.5551%" y="191.50">misc..</text></g><g><title>impl_trait_ref (200,343 samples, 0.20%)</title><rect x="24.6977%" y="85" width="0.1964%" height="15" fill="rgb(213,79,30)"/><text x="24.9477%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (180,813 samples, 0.18%)</title><rect x="24.7169%" y="69" width="0.1773%" height="15" fill="rgb(246,177,23)"/><text x="24.9669%" y="79.50"></text></g><g><title>adt_destructor (361,284 samples, 0.35%)</title><rect x="24.5629%" y="133" width="0.3542%" height="15" fill="rgb(230,62,27)"/><text x="24.8129%" y="143.50"></text></g><g><title>coherent_trait (349,244 samples, 0.34%)</title><rect x="24.5747%" y="117" width="0.3424%" height="15" fill="rgb(216,154,8)"/><text x="24.8247%" y="127.50"></text></g><g><title>specialization_graph_of (347,974 samples, 0.34%)</title><rect x="24.5759%" y="101" width="0.3412%" height="15" fill="rgb(244,35,45)"/><text x="24.8259%" y="111.50"></text></g><g><title>is_copy_raw (112,992 samples, 0.11%)</title><rect x="24.9171%" y="133" width="0.1108%" height="15" fill="rgb(251,115,12)"/><text x="25.1671%" y="143.50"></text></g><g><title>impl_parent (3,014,799 samples, 2.96%)</title><rect x="30.0607%" y="117" width="2.9560%" height="15" fill="rgb(240,54,50)"/><text x="30.3107%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,737,361 samples, 1.70%)</title><rect x="31.3132%" y="101" width="1.7035%" height="15" fill="rgb(233,84,52)"/><text x="31.5632%" y="111.50"></text></g><g><title>impl_trait_ref (6,214,721 samples, 6.09%)</title><rect x="33.0173%" y="117" width="6.0934%" height="15" fill="rgb(207,117,47)"/><text x="33.2673%" y="127.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,674,433 samples, 4.58%)</title><rect x="34.5276%" y="101" width="4.5832%" height="15" fill="rgb(249,43,39)"/><text x="34.7776%" y="111.50">metad..</text></g><g><title>coherent_trait (16,168,428 samples, 15.85%)</title><rect x="24.5121%" y="149" width="15.8529%" height="15" fill="rgb(209,38,44)"/><text x="24.7621%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (15,540,911 samples, 15.24%)</title><rect x="25.1274%" y="133" width="15.2376%" height="15" fill="rgb(236,212,23)"/><text x="25.3774%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,209,512 samples, 1.19%)</title><rect x="39.1791%" y="117" width="1.1859%" height="15" fill="rgb(242,79,21)"/><text x="39.4291%" y="127.50"></text></g><g><title>implementations_of_trait (322,763 samples, 0.32%)</title><rect x="40.0485%" y="101" width="0.3165%" height="15" fill="rgb(211,96,35)"/><text x="40.2985%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (249,143 samples, 0.24%)</title><rect x="40.1207%" y="85" width="0.2443%" height="15" fill="rgb(253,215,40)"/><text x="40.3707%" y="95.50"></text></g><g><title>coherence_checking (16,263,490 samples, 15.95%)</title><rect x="24.4824%" y="165" width="15.9461%" height="15" fill="rgb(211,81,21)"/><text x="24.7324%" y="175.50">coherence_checking</text></g><g><title>associated_item (308,492 samples, 0.30%)</title><rect x="49.4344%" y="101" width="0.3025%" height="15" fill="rgb(208,190,38)"/><text x="49.6844%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (241,831 samples, 0.24%)</title><rect x="49.4998%" y="85" width="0.2371%" height="15" fill="rgb(235,213,38)"/><text x="49.7498%" y="95.50"></text></g><g><title>associated_items (430,715 samples, 0.42%)</title><rect x="49.3252%" y="117" width="0.4223%" height="15" fill="rgb(237,122,38)"/><text x="49.5752%" y="127.50"></text></g><g><title>predicates_of (132,073 samples, 0.13%)</title><rect x="50.8343%" y="101" width="0.1295%" height="15" fill="rgb(244,218,35)"/><text x="51.0843%" y="111.50"></text></g><g><title>specializes (170,402 samples, 0.17%)</title><rect x="50.9638%" y="101" width="0.1671%" height="15" fill="rgb(240,68,47)"/><text x="51.2138%" y="111.50"></text></g><g><title>param_env (125,442 samples, 0.12%)</title><rect x="51.0079%" y="85" width="0.1230%" height="15" fill="rgb(210,16,53)"/><text x="51.2579%" y="95.50"></text></g><g><title>trait_impls_of (142,753 samples, 0.14%)</title><rect x="51.1381%" y="101" width="0.1400%" height="15" fill="rgb(235,124,12)"/><text x="51.3881%" y="111.50"></text></g><g><title>evaluate_obligation (1,468,548 samples, 1.44%)</title><rect x="49.8426%" y="117" width="1.4399%" height="15" fill="rgb(224,169,11)"/><text x="50.0926%" y="127.50"></text></g><g><title>predicates_of (145,382 samples, 0.14%)</title><rect x="51.6222%" y="117" width="0.1425%" height="15" fill="rgb(250,166,2)"/><text x="51.8722%" y="127.50"></text></g><g><title>adt_sized_constraint (134,062 samples, 0.13%)</title><rect x="54.8193%" y="101" width="0.1314%" height="15" fill="rgb(242,216,29)"/><text x="55.0693%" y="111.50"></text></g><g><title>associated_item (424,545 samples, 0.42%)</title><rect x="55.0251%" y="85" width="0.4163%" height="15" fill="rgb(230,116,27)"/><text x="55.2751%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (176,033 samples, 0.17%)</title><rect x="55.2688%" y="69" width="0.1726%" height="15" fill="rgb(228,99,48)"/><text x="55.5188%" y="79.50"></text></g><g><title>associated_items (510,886 samples, 0.50%)</title><rect x="54.9519%" y="101" width="0.5009%" height="15" fill="rgb(253,11,6)"/><text x="55.2019%" y="111.50"></text></g><g><title>adt_dtorck_constraint (122,843 samples, 0.12%)</title><rect x="55.5658%" y="69" width="0.1204%" height="15" fill="rgb(247,143,39)"/><text x="55.8158%" y="79.50"></text></g><g><title>dropck_outlives (239,684 samples, 0.24%)</title><rect x="55.4660%" y="101" width="0.2350%" height="15" fill="rgb(236,97,10)"/><text x="55.7160%" y="111.50"></text></g><g><title>adt_dtorck_constraint (178,803 samples, 0.18%)</title><rect x="55.5257%" y="85" width="0.1753%" height="15" fill="rgb(233,208,19)"/><text x="55.7757%" y="95.50"></text></g><g><title>evaluate_obligation (793,007 samples, 0.78%)</title><rect x="55.7010%" y="101" width="0.7775%" height="15" fill="rgb(216,164,2)"/><text x="55.9510%" y="111.50"></text></g><g><title>method_autoderef_steps (154,460 samples, 0.15%)</title><rect x="56.7561%" y="101" width="0.1514%" height="15" fill="rgb(220,129,5)"/><text x="57.0061%" y="111.50"></text></g><g><title>predicates_of (157,162 samples, 0.15%)</title><rect x="56.9143%" y="101" width="0.1541%" height="15" fill="rgb(242,17,10)"/><text x="57.1643%" y="111.50"></text></g><g><title>predicates_defined_on (114,392 samples, 0.11%)</title><rect x="56.9562%" y="85" width="0.1122%" height="15" fill="rgb(242,107,0)"/><text x="57.2062%" y="95.50"></text></g><g><title>typeck (5,431,170 samples, 5.33%)</title><rect x="51.8148%" y="117" width="5.3252%" height="15" fill="rgb(251,28,31)"/><text x="52.0648%" y="127.50">typeck</text></g><g><title>item_bodies_checking (17,052,768 samples, 16.72%)</title><rect x="40.4623%" y="165" width="16.7199%" height="15" fill="rgb(233,223,10)"/><text x="40.7123%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,049,588 samples, 16.72%)</title><rect x="40.4654%" y="149" width="16.7168%" height="15" fill="rgb(215,21,27)"/><text x="40.7154%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (16,979,616 samples, 16.65%)</title><rect x="40.5340%" y="133" width="16.6482%" height="15" fill="rgb(232,23,21)"/><text x="40.7840%" y="143.50">typeck</text></g><g><title>item_types_checking (1,631,948 samples, 1.60%)</title><rect x="57.1822%" y="165" width="1.6001%" height="15" fill="rgb(244,5,23)"/><text x="57.4322%" y="175.50"></text></g><g><title>check_mod_item_types (1,628,447 samples, 1.60%)</title><rect x="57.1856%" y="149" width="1.5967%" height="15" fill="rgb(226,81,46)"/><text x="57.4356%" y="159.50"></text></g><g><title>typeck (299,763 samples, 0.29%)</title><rect x="58.4884%" y="133" width="0.2939%" height="15" fill="rgb(247,70,30)"/><text x="58.7384%" y="143.50"></text></g><g><title>late_bound_vars_map (125,110 samples, 0.12%)</title><rect x="59.2944%" y="117" width="0.1227%" height="15" fill="rgb(212,68,19)"/><text x="59.5444%" y="127.50"></text></g><g><title>resolve_lifetimes (103,830 samples, 0.10%)</title><rect x="59.3153%" y="101" width="0.1018%" height="15" fill="rgb(240,187,13)"/><text x="59.5653%" y="111.50"></text></g><g><title>fn_sig (459,753 samples, 0.45%)</title><rect x="59.0414%" y="133" width="0.4508%" height="15" fill="rgb(223,113,26)"/><text x="59.2914%" y="143.50"></text></g><g><title>named_region_map (191,702 samples, 0.19%)</title><rect x="59.5899%" y="117" width="0.1880%" height="15" fill="rgb(206,192,2)"/><text x="59.8399%" y="127.50"></text></g><g><title>resolve_lifetimes (181,592 samples, 0.18%)</title><rect x="59.5998%" y="101" width="0.1780%" height="15" fill="rgb(241,108,4)"/><text x="59.8498%" y="111.50"></text></g><g><title>generics_of (308,272 samples, 0.30%)</title><rect x="59.4921%" y="133" width="0.3023%" height="15" fill="rgb(247,173,49)"/><text x="59.7421%" y="143.50"></text></g><g><title>explicit_predicates_of (267,543 samples, 0.26%)</title><rect x="60.0144%" y="101" width="0.2623%" height="15" fill="rgb(224,114,35)"/><text x="60.2644%" y="111.50"></text></g><g><title>predicates_of (455,285 samples, 0.45%)</title><rect x="59.8750%" y="133" width="0.4464%" height="15" fill="rgb(245,159,27)"/><text x="60.1250%" y="143.50"></text></g><g><title>predicates_defined_on (400,684 samples, 0.39%)</title><rect x="59.9285%" y="117" width="0.3929%" height="15" fill="rgb(245,172,44)"/><text x="60.1785%" y="127.50"></text></g><g><title>type_collecting (1,687,629 samples, 1.65%)</title><rect x="58.7839%" y="165" width="1.6547%" height="15" fill="rgb(236,23,11)"/><text x="59.0339%" y="175.50"></text></g><g><title>collect_mod_item_types (1,679,759 samples, 1.65%)</title><rect x="58.7916%" y="149" width="1.6470%" height="15" fill="rgb(205,117,38)"/><text x="59.0416%" y="159.50"></text></g><g><title>type_of (119,463 samples, 0.12%)</title><rect x="60.3214%" y="133" width="0.1171%" height="15" fill="rgb(237,72,25)"/><text x="60.5714%" y="143.50"></text></g><g><title>adt_def (107,731 samples, 0.11%)</title><rect x="61.8515%" y="101" width="0.1056%" height="15" fill="rgb(244,70,9)"/><text x="62.1015%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (106,131 samples, 0.10%)</title><rect x="61.8530%" y="85" width="0.1041%" height="15" fill="rgb(217,125,39)"/><text x="62.1030%" y="95.50"></text></g><g><title>adt_sized_constraint (182,452 samples, 0.18%)</title><rect x="61.8454%" y="117" width="0.1789%" height="15" fill="rgb(235,36,10)"/><text x="62.0954%" y="127.50"></text></g><g><title>evaluate_obligation (342,495 samples, 0.34%)</title><rect x="61.7186%" y="133" width="0.3358%" height="15" fill="rgb(251,123,47)"/><text x="61.9686%" y="143.50"></text></g><g><title>implied_outlives_bounds (103,880 samples, 0.10%)</title><rect x="62.0837%" y="133" width="0.1019%" height="15" fill="rgb(221,13,13)"/><text x="62.3337%" y="143.50"></text></g><g><title>param_env (246,122 samples, 0.24%)</title><rect x="62.1856%" y="133" width="0.2413%" height="15" fill="rgb(238,131,9)"/><text x="62.4356%" y="143.50"></text></g><g><title>region_scope_tree (219,855 samples, 0.22%)</title><rect x="62.4728%" y="133" width="0.2156%" height="15" fill="rgb(211,50,8)"/><text x="62.7228%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,147,877 samples, 2.11%)</title><rect x="60.5956%" y="149" width="2.1060%" height="15" fill="rgb(245,182,24)"/><text x="60.8456%" y="159.50">c..</text></g><g><title>evaluate_obligation (374,143 samples, 0.37%)</title><rect x="63.7835%" y="133" width="0.3668%" height="15" fill="rgb(242,14,37)"/><text x="64.0335%" y="143.50"></text></g><g><title>param_env (252,905 samples, 0.25%)</title><rect x="64.2157%" y="133" width="0.2480%" height="15" fill="rgb(246,228,12)"/><text x="64.4657%" y="143.50"></text></g><g><title>analysis (65,353,022 samples, 64.08%)</title><rect x="0.6250%" y="197" width="64.0775%" height="15" fill="rgb(213,55,15)"/><text x="0.8750%" y="207.50">analysis</text></g><g><title>type_check_crate (41,084,504 samples, 40.28%)</title><rect x="24.4198%" y="181" width="40.2826%" height="15" fill="rgb(209,9,3)"/><text x="24.6698%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,343,208 samples, 4.26%)</title><rect x="60.4440%" y="165" width="4.2584%" height="15" fill="rgb(230,59,30)"/><text x="60.6940%" y="175.50">wf_ch..</text></g><g><title>check_item_well_formed (2,040,741 samples, 2.00%)</title><rect x="62.7016%" y="149" width="2.0009%" height="15" fill="rgb(209,121,21)"/><text x="62.9516%" y="159.50">c..</text></g><g><title>codegen_crate (536,816 samples, 0.53%)</title><rect x="64.7118%" y="197" width="0.5263%" height="15" fill="rgb(220,109,13)"/><text x="64.9618%" y="207.50"></text></g><g><title>AST_validation (201,792 samples, 0.20%)</title><rect x="65.4210%" y="181" width="0.1979%" height="15" fill="rgb(232,18,1)"/><text x="65.6710%" y="191.50"></text></g><g><title>metadata_load_macro (250,122 samples, 0.25%)</title><rect x="79.9116%" y="149" width="0.2452%" height="15" fill="rgb(215,41,42)"/><text x="80.1616%" y="159.50"></text></g><g><title>metadata_register_crate (2,268,095 samples, 2.22%)</title><rect x="80.1569%" y="149" width="2.2238%" height="15" fill="rgb(224,123,36)"/><text x="80.4069%" y="159.50">m..</text></g><g><title>metadata_register_crate (841,200 samples, 0.82%)</title><rect x="81.5559%" y="133" width="0.8248%" height="15" fill="rgb(240,125,3)"/><text x="81.8059%" y="143.50"></text></g><g><title>macro_expand_crate (17,036,298 samples, 16.70%)</title><rect x="65.7783%" y="181" width="16.7038%" height="15" fill="rgb(205,98,50)"/><text x="66.0283%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (17,015,248 samples, 16.68%)</title><rect x="65.7990%" y="165" width="16.6832%" height="15" fill="rgb(205,185,37)"/><text x="66.0490%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (103,441 samples, 0.10%)</title><rect x="82.3807%" y="149" width="0.1014%" height="15" fill="rgb(238,207,15)"/><text x="82.6307%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (201,672 samples, 0.20%)</title><rect x="82.4867%" y="181" width="0.1977%" height="15" fill="rgb(213,199,42)"/><text x="82.7367%" y="191.50"></text></g><g><title>finalize_macro_resolutions (303,793 samples, 0.30%)</title><rect x="82.7375%" y="165" width="0.2979%" height="15" fill="rgb(235,201,11)"/><text x="82.9875%" y="175.50"></text></g><g><title>late_resolve_crate (2,766,790 samples, 2.71%)</title><rect x="83.0354%" y="165" width="2.7128%" height="15" fill="rgb(207,46,11)"/><text x="83.2854%" y="175.50">la..</text></g><g><title>configure_and_expand (21,047,673 samples, 20.64%)</title><rect x="65.2382%" y="197" width="20.6369%" height="15" fill="rgb(241,35,35)"/><text x="65.4882%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,254,156 samples, 3.19%)</title><rect x="82.6844%" y="181" width="3.1906%" height="15" fill="rgb(243,32,47)"/><text x="82.9344%" y="191.50">res..</text></g><g><title>drop_ast (228,673 samples, 0.22%)</title><rect x="85.8750%" y="197" width="0.2242%" height="15" fill="rgb(247,202,23)"/><text x="86.1250%" y="207.50"></text></g><g><title>early_lint_checks (437,955 samples, 0.43%)</title><rect x="86.1137%" y="197" width="0.4294%" height="15" fill="rgb(219,102,11)"/><text x="86.3637%" y="207.50"></text></g><g><title>free_global_ctxt (3,657,751 samples, 3.59%)</title><rect x="86.5431%" y="197" width="3.5864%" height="15" fill="rgb(243,110,44)"/><text x="86.7931%" y="207.50">free..</text></g><g><title>generate_crate_metadata (1,018,512 samples, 1.00%)</title><rect x="90.1295%" y="197" width="0.9986%" height="15" fill="rgb(222,74,54)"/><text x="90.3795%" y="207.50"></text></g><g><title>hir_lowering (3,968,594 samples, 3.89%)</title><rect x="91.1281%" y="197" width="3.8911%" height="15" fill="rgb(216,99,12)"/><text x="91.3781%" y="207.50">hir_..</text></g><g><title>parse_crate (3,408,098 samples, 3.34%)</title><rect x="95.0831%" y="197" width="3.3416%" height="15" fill="rgb(226,22,26)"/><text x="95.3331%" y="207.50">par..</text></g><g><title>prepare_outputs (281,213 samples, 0.28%)</title><rect x="98.4325%" y="197" width="0.2757%" height="15" fill="rgb(217,163,10)"/><text x="98.6825%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (884,360 samples, 0.87%)</title><rect x="98.7082%" y="197" width="0.8671%" height="15" fill="rgb(213,25,53)"/><text x="98.9582%" y="207.50"></text></g><g><title>setup_global_ctxt (112,681 samples, 0.11%)</title><rect x="99.5870%" y="197" width="0.1105%" height="15" fill="rgb(252,105,26)"/><text x="99.8370%" y="207.50"></text></g><g><title>all (101,990,577 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (101,990,577 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (308,553 samples, 0.30%)</title><rect x="99.6975%" y="197" width="0.3025%" height="15" fill="rgb(252,8,32)"/><text x="99.9475%" y="207.50"></text></g></svg></svg>