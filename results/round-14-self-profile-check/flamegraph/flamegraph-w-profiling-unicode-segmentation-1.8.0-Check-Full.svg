<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (445,585 samples, 0.11%)</title><rect x="15.2247%" y="117" width="0.1096%" height="15" fill="rgb(227,0,7)"/><text x="15.4747%" y="127.50"></text></g><g><title>needs_drop_raw (1,448,554 samples, 0.36%)</title><rect x="17.5125%" y="101" width="0.3563%" height="15" fill="rgb(217,0,24)"/><text x="17.7625%" y="111.50"></text></g><g><title>is_copy_raw (980,930 samples, 0.24%)</title><rect x="17.6275%" y="85" width="0.2413%" height="15" fill="rgb(221,193,54)"/><text x="17.8775%" y="95.50"></text></g><g><title>evaluate_obligation (804,127 samples, 0.20%)</title><rect x="17.6710%" y="69" width="0.1978%" height="15" fill="rgb(248,212,6)"/><text x="17.9210%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (870,130 samples, 0.21%)</title><rect x="17.9778%" y="85" width="0.2140%" height="15" fill="rgb(208,68,35)"/><text x="18.2278%" y="95.50"></text></g><g><title>resolve_instance (1,637,168 samples, 0.40%)</title><rect x="17.8688%" y="101" width="0.4027%" height="15" fill="rgb(232,128,0)"/><text x="18.1188%" y="111.50"></text></g><g><title>thir_body (3,323,539 samples, 0.82%)</title><rect x="18.2942%" y="101" width="0.8175%" height="15" fill="rgb(207,160,47)"/><text x="18.5442%" y="111.50"></text></g><g><title>mir_const (19,751,838 samples, 4.86%)</title><rect x="14.2672%" y="149" width="4.8587%" height="15" fill="rgb(228,23,34)"/><text x="14.5172%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (17,123,083 samples, 4.21%)</title><rect x="14.9138%" y="133" width="4.2120%" height="15" fill="rgb(218,30,26)"/><text x="15.1638%" y="143.50">unsaf..</text></g><g><title>mir_built (15,413,892 samples, 3.79%)</title><rect x="15.3343%" y="117" width="3.7916%" height="15" fill="rgb(220,122,19)"/><text x="15.5843%" y="127.50">mir_..</text></g><g><title>thir_body (10,812,620 samples, 2.66%)</title><rect x="22.1680%" y="85" width="2.6597%" height="15" fill="rgb(250,228,42)"/><text x="22.4180%" y="95.50">th..</text></g><g><title>lit_to_const (847,587 samples, 0.21%)</title><rect x="24.6193%" y="69" width="0.2085%" height="15" fill="rgb(240,193,28)"/><text x="24.8693%" y="79.50"></text></g><g><title>mir_const (22,156,816 samples, 5.45%)</title><rect x="19.3780%" y="133" width="5.4503%" height="15" fill="rgb(216,20,37)"/><text x="19.6280%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (21,318,588 samples, 5.24%)</title><rect x="19.5842%" y="117" width="5.2441%" height="15" fill="rgb(206,188,39)"/><text x="19.8342%" y="127.50">unsafe..</text></g><g><title>mir_built (20,572,218 samples, 5.06%)</title><rect x="19.7678%" y="101" width="5.0605%" height="15" fill="rgb(217,207,13)"/><text x="20.0178%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (50,699,899 samples, 12.47%)</title><rect x="12.3591%" y="165" width="12.4714%" height="15" fill="rgb(231,73,38)"/><text x="12.6091%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (23,190,978 samples, 5.70%)</title><rect x="19.1259%" y="149" width="5.7046%" height="15" fill="rgb(225,20,46)"/><text x="19.3759%" y="159.50">mir_con..</text></g><g><title>type_op_normalize_fn_sig (1,040,593 samples, 0.26%)</title><rect x="24.9015%" y="165" width="0.2560%" height="15" fill="rgb(210,31,41)"/><text x="25.1515%" y="175.50"></text></g><g><title>normalize_projection_ty (640,747 samples, 0.16%)</title><rect x="24.9998%" y="149" width="0.1576%" height="15" fill="rgb(221,200,47)"/><text x="25.2498%" y="159.50"></text></g><g><title>type_op_normalize_predicate (438,166 samples, 0.11%)</title><rect x="25.1574%" y="165" width="0.1078%" height="15" fill="rgb(226,26,5)"/><text x="25.4074%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,489,774 samples, 1.10%)</title><rect x="25.2652%" y="165" width="1.1044%" height="15" fill="rgb(249,33,26)"/><text x="25.5152%" y="175.50"></text></g><g><title>MIR_borrow_checking (104,869,273 samples, 25.80%)</title><rect x="0.5754%" y="197" width="25.7963%" height="15" fill="rgb(235,183,28)"/><text x="0.8254%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (104,461,651 samples, 25.70%)</title><rect x="0.6756%" y="181" width="25.6961%" height="15" fill="rgb(221,5,38)"/><text x="0.9256%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (882,390 samples, 0.22%)</title><rect x="26.3717%" y="197" width="0.2171%" height="15" fill="rgb(247,18,42)"/><text x="26.6217%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (736,628 samples, 0.18%)</title><rect x="26.4075%" y="181" width="0.1812%" height="15" fill="rgb(241,131,45)"/><text x="26.6575%" y="191.50"></text></g><g><title>hir_module_items (674,899 samples, 0.17%)</title><rect x="26.5887%" y="197" width="0.1660%" height="15" fill="rgb(249,31,29)"/><text x="26.8387%" y="207.50"></text></g><g><title>codegen_fn_attrs (614,614 samples, 0.15%)</title><rect x="27.1878%" y="165" width="0.1512%" height="15" fill="rgb(225,111,53)"/><text x="27.4378%" y="175.50"></text></g><g><title>check_mod_attrs (2,332,794 samples, 0.57%)</title><rect x="26.7652%" y="181" width="0.5738%" height="15" fill="rgb(238,160,17)"/><text x="27.0152%" y="191.50"></text></g><g><title>check_mod_const_bodies (428,735 samples, 0.11%)</title><rect x="27.3391%" y="181" width="0.1055%" height="15" fill="rgb(214,148,48)"/><text x="27.5891%" y="191.50"></text></g><g><title>lint_levels (1,090,932 samples, 0.27%)</title><rect x="27.6667%" y="165" width="0.2684%" height="15" fill="rgb(232,36,49)"/><text x="27.9167%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (2,108,313 samples, 0.52%)</title><rect x="27.5321%" y="181" width="0.5186%" height="15" fill="rgb(209,103,24)"/><text x="27.7821%" y="191.50"></text></g><g><title>misc_checking_1 (5,399,229 samples, 1.33%)</title><rect x="26.7549%" y="197" width="1.3281%" height="15" fill="rgb(229,88,8)"/><text x="27.0049%" y="207.50"></text></g><g><title>check_mod_intrinsics (534,288 samples, 0.13%)</title><rect x="28.0875%" y="165" width="0.1314%" height="15" fill="rgb(213,181,19)"/><text x="28.3375%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,882,461 samples, 0.46%)</title><rect x="28.0835%" y="181" width="0.4631%" height="15" fill="rgb(254,191,54)"/><text x="28.3335%" y="191.50"></text></g><g><title>check_mod_liveness (1,331,933 samples, 0.33%)</title><rect x="28.2189%" y="165" width="0.3276%" height="15" fill="rgb(241,83,37)"/><text x="28.4689%" y="175.50"></text></g><g><title>misc_checking_2 (4,353,459 samples, 1.07%)</title><rect x="28.0830%" y="197" width="1.0709%" height="15" fill="rgb(233,36,39)"/><text x="28.3330%" y="207.50"></text></g><g><title>match_checking (2,469,118 samples, 0.61%)</title><rect x="28.5465%" y="181" width="0.6074%" height="15" fill="rgb(226,3,54)"/><text x="28.7965%" y="191.50"></text></g><g><title>check_match (2,378,417 samples, 0.59%)</title><rect x="28.5688%" y="165" width="0.5851%" height="15" fill="rgb(245,192,40)"/><text x="28.8188%" y="175.50"></text></g><g><title>check_private_in_public (617,867 samples, 0.15%)</title><rect x="29.1568%" y="181" width="0.1520%" height="15" fill="rgb(238,167,29)"/><text x="29.4068%" y="191.50"></text></g><g><title>death_checking (1,648,309 samples, 0.41%)</title><rect x="29.3087%" y="181" width="0.4055%" height="15" fill="rgb(232,182,51)"/><text x="29.5587%" y="191.50"></text></g><g><title>eval_to_const_value_raw (39,577,999 samples, 9.74%)</title><rect x="33.2069%" y="85" width="9.7356%" height="15" fill="rgb(231,60,39)"/><text x="33.4569%" y="95.50">eval_to_const_..</text></g><g><title>eval_to_const_value_raw (39,571,019 samples, 9.73%)</title><rect x="33.2086%" y="69" width="9.7339%" height="15" fill="rgb(208,69,12)"/><text x="33.4586%" y="79.50">eval_to_const_..</text></g><g><title>eval_to_allocation_raw (39,540,509 samples, 9.73%)</title><rect x="33.2161%" y="53" width="9.7264%" height="15" fill="rgb(235,93,37)"/><text x="33.4661%" y="63.50">eval_to_alloca..</text></g><g><title>promoted_mir (8,447,075 samples, 2.08%)</title><rect x="40.8646%" y="37" width="2.0779%" height="15" fill="rgb(213,116,39)"/><text x="41.1146%" y="47.50">p..</text></g><g><title>eval_to_const_value_raw (50,929,055 samples, 12.53%)</title><rect x="30.4203%" y="149" width="12.5278%" height="15" fill="rgb(222,207,29)"/><text x="30.6703%" y="159.50">eval_to_const_value..</text></g><g><title>eval_to_const_value_raw (50,921,234 samples, 12.53%)</title><rect x="30.4222%" y="133" width="12.5259%" height="15" fill="rgb(206,96,30)"/><text x="30.6722%" y="143.50">eval_to_const_value..</text></g><g><title>eval_to_allocation_raw (50,907,174 samples, 12.52%)</title><rect x="30.4257%" y="117" width="12.5224%" height="15" fill="rgb(218,138,4)"/><text x="30.6757%" y="127.50">eval_to_allocation_..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (39,650,359 samples, 9.75%)</title><rect x="33.1947%" y="101" width="9.7534%" height="15" fill="rgb(250,191,14)"/><text x="33.4447%" y="111.50">try_normalize_..</text></g><g><title>param_env (744,570 samples, 0.18%)</title><rect x="42.9481%" y="149" width="0.1832%" height="15" fill="rgb(239,60,40)"/><text x="43.1981%" y="159.50"></text></g><g><title>crate_lints (54,988,490 samples, 13.53%)</title><rect x="29.7151%" y="165" width="13.5264%" height="15" fill="rgb(206,27,48)"/><text x="29.9651%" y="175.50">crate_lints</text></g><g><title>lint_checking (59,546,580 samples, 14.65%)</title><rect x="29.7142%" y="181" width="14.6476%" height="15" fill="rgb(225,35,8)"/><text x="29.9642%" y="191.50">lint_checking</text></g><g><title>module_lints (4,554,530 samples, 1.12%)</title><rect x="43.2415%" y="165" width="1.1203%" height="15" fill="rgb(250,213,24)"/><text x="43.4915%" y="175.50"></text></g><g><title>lint_mod (4,540,190 samples, 1.12%)</title><rect x="43.2450%" y="149" width="1.1168%" height="15" fill="rgb(247,123,22)"/><text x="43.4950%" y="159.50"></text></g><g><title>privacy_access_levels (839,279 samples, 0.21%)</title><rect x="44.3618%" y="181" width="0.2065%" height="15" fill="rgb(231,138,38)"/><text x="44.6118%" y="191.50"></text></g><g><title>privacy_checking_modules (4,711,413 samples, 1.16%)</title><rect x="44.5683%" y="181" width="1.1589%" height="15" fill="rgb(231,145,46)"/><text x="44.8183%" y="191.50"></text></g><g><title>check_mod_privacy (4,701,843 samples, 1.16%)</title><rect x="44.5706%" y="165" width="1.1566%" height="15" fill="rgb(251,118,11)"/><text x="44.8206%" y="175.50"></text></g><g><title>misc_checking_3 (67,399,588 samples, 16.58%)</title><rect x="29.1539%" y="197" width="16.5793%" height="15" fill="rgb(217,147,25)"/><text x="29.4039%" y="207.50">misc_checking_3</text></g><g><title>impl_parent (813,057 samples, 0.20%)</title><rect x="46.2338%" y="133" width="0.2000%" height="15" fill="rgb(247,81,37)"/><text x="46.4838%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (494,705 samples, 0.12%)</title><rect x="46.3121%" y="117" width="0.1217%" height="15" fill="rgb(209,12,38)"/><text x="46.5621%" y="127.50"></text></g><g><title>impl_trait_ref (1,638,365 samples, 0.40%)</title><rect x="46.4338%" y="133" width="0.4030%" height="15" fill="rgb(227,1,9)"/><text x="46.6838%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,308,441 samples, 0.32%)</title><rect x="46.5149%" y="117" width="0.3219%" height="15" fill="rgb(248,47,43)"/><text x="46.7649%" y="127.50"></text></g><g><title>coherent_trait (4,579,291 samples, 1.13%)</title><rect x="45.7786%" y="165" width="1.1264%" height="15" fill="rgb(221,10,30)"/><text x="46.0286%" y="175.50"></text></g><g><title>specialization_graph_of (4,240,486 samples, 1.04%)</title><rect x="45.8619%" y="149" width="1.0431%" height="15" fill="rgb(210,229,1)"/><text x="46.1119%" y="159.50"></text></g><g><title>coherence_checking (4,712,512 samples, 1.16%)</title><rect x="45.7733%" y="181" width="1.1592%" height="15" fill="rgb(222,148,37)"/><text x="46.0233%" y="191.50"></text></g><g><title>evaluate_obligation (2,051,120 samples, 0.50%)</title><rect x="57.3610%" y="133" width="0.5045%" height="15" fill="rgb(234,67,33)"/><text x="57.6110%" y="143.50"></text></g><g><title>evaluate_obligation (1,472,187 samples, 0.36%)</title><rect x="61.6201%" y="117" width="0.3621%" height="15" fill="rgb(247,98,35)"/><text x="61.8701%" y="127.50"></text></g><g><title>generics_of (519,304 samples, 0.13%)</title><rect x="61.9972%" y="117" width="0.1277%" height="15" fill="rgb(247,138,52)"/><text x="62.2472%" y="127.50"></text></g><g><title>typeck (16,941,847 samples, 4.17%)</title><rect x="58.2276%" y="133" width="4.1674%" height="15" fill="rgb(213,79,30)"/><text x="58.4776%" y="143.50">typeck</text></g><g><title>item_bodies_checking (62,856,607 samples, 15.46%)</title><rect x="46.9504%" y="181" width="15.4618%" height="15" fill="rgb(246,177,23)"/><text x="47.2004%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (62,853,137 samples, 15.46%)</title><rect x="46.9513%" y="165" width="15.4610%" height="15" fill="rgb(230,62,27)"/><text x="47.2013%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (62,652,253 samples, 15.41%)</title><rect x="47.0007%" y="149" width="15.4116%" height="15" fill="rgb(216,154,8)"/><text x="47.2507%" y="159.50">typeck</text></g><g><title>item_types_checking (38,384,136 samples, 9.44%)</title><rect x="62.4122%" y="181" width="9.4419%" height="15" fill="rgb(244,35,45)"/><text x="62.6622%" y="191.50">item_types_che..</text></g><g><title>check_mod_item_types (38,369,766 samples, 9.44%)</title><rect x="62.4158%" y="165" width="9.4384%" height="15" fill="rgb(251,115,12)"/><text x="62.6658%" y="175.50">check_mod_ite..</text></g><g><title>typeck (35,815,119 samples, 8.81%)</title><rect x="63.0442%" y="149" width="8.8100%" height="15" fill="rgb(240,54,50)"/><text x="63.2942%" y="159.50">typeck</text></g><g><title>fn_sig (688,936 samples, 0.17%)</title><rect x="72.0940%" y="149" width="0.1695%" height="15" fill="rgb(233,84,52)"/><text x="72.3440%" y="159.50"></text></g><g><title>is_late_bound_map (520,906 samples, 0.13%)</title><rect x="72.3364%" y="133" width="0.1281%" height="15" fill="rgb(207,117,47)"/><text x="72.5864%" y="143.50"></text></g><g><title>resolve_lifetimes (466,255 samples, 0.11%)</title><rect x="72.3498%" y="117" width="0.1147%" height="15" fill="rgb(249,43,39)"/><text x="72.5998%" y="127.50"></text></g><g><title>named_region_map (423,235 samples, 0.10%)</title><rect x="72.4645%" y="133" width="0.1041%" height="15" fill="rgb(209,38,44)"/><text x="72.7145%" y="143.50"></text></g><g><title>generics_of (1,272,124 samples, 0.31%)</title><rect x="72.2635%" y="149" width="0.3129%" height="15" fill="rgb(236,212,23)"/><text x="72.5135%" y="159.50"></text></g><g><title>predicates_of (964,287 samples, 0.24%)</title><rect x="72.6030%" y="149" width="0.2372%" height="15" fill="rgb(242,79,21)"/><text x="72.8530%" y="159.50"></text></g><g><title>predicates_defined_on (806,696 samples, 0.20%)</title><rect x="72.6417%" y="133" width="0.1984%" height="15" fill="rgb(211,96,35)"/><text x="72.8917%" y="143.50"></text></g><g><title>type_collecting (4,624,862 samples, 1.14%)</title><rect x="71.8557%" y="181" width="1.1376%" height="15" fill="rgb(253,215,40)"/><text x="72.1057%" y="191.50"></text></g><g><title>collect_mod_item_types (4,604,410 samples, 1.13%)</title><rect x="71.8608%" y="165" width="1.1326%" height="15" fill="rgb(211,81,21)"/><text x="72.1108%" y="175.50"></text></g><g><title>type_of (577,008 samples, 0.14%)</title><rect x="72.8515%" y="149" width="0.1419%" height="15" fill="rgb(208,190,38)"/><text x="73.1015%" y="159.50"></text></g><g><title>evaluate_obligation (724,885 samples, 0.18%)</title><rect x="73.9029%" y="149" width="0.1783%" height="15" fill="rgb(235,213,38)"/><text x="74.1529%" y="159.50"></text></g><g><title>param_env (438,454 samples, 0.11%)</title><rect x="74.1400%" y="149" width="0.1079%" height="15" fill="rgb(237,122,38)"/><text x="74.3900%" y="159.50"></text></g><g><title>check_impl_item_well_formed (5,524,705 samples, 1.36%)</title><rect x="73.1356%" y="165" width="1.3590%" height="15" fill="rgb(244,218,35)"/><text x="73.3856%" y="175.50"></text></g><g><title>region_scope_tree (980,299 samples, 0.24%)</title><rect x="74.2534%" y="149" width="0.2411%" height="15" fill="rgb(240,68,47)"/><text x="74.5034%" y="159.50"></text></g><g><title>evaluate_obligation (624,493 samples, 0.15%)</title><rect x="75.1816%" y="149" width="0.1536%" height="15" fill="rgb(210,16,53)"/><text x="75.4316%" y="159.50"></text></g><g><title>param_env (566,333 samples, 0.14%)</title><rect x="75.3861%" y="149" width="0.1393%" height="15" fill="rgb(235,124,12)"/><text x="75.6361%" y="159.50"></text></g><g><title>region_scope_tree (1,453,387 samples, 0.36%)</title><rect x="75.5431%" y="149" width="0.3575%" height="15" fill="rgb(224,169,11)"/><text x="75.7931%" y="159.50"></text></g><g><title>check_item_well_formed (5,852,672 samples, 1.44%)</title><rect x="74.4946%" y="165" width="1.4397%" height="15" fill="rgb(250,166,2)"/><text x="74.7446%" y="175.50"></text></g><g><title>analysis (308,521,964 samples, 75.89%)</title><rect x="0.1376%" y="213" width="75.8920%" height="15" fill="rgb(242,216,29)"/><text x="0.3876%" y="223.50">analysis</text></g><g><title>type_check_crate (123,162,887 samples, 30.30%)</title><rect x="45.7332%" y="197" width="30.2963%" height="15" fill="rgb(230,116,27)"/><text x="45.9832%" y="207.50">type_check_crate</text></g><g><title>wf_checking (12,328,687 samples, 3.03%)</title><rect x="72.9968%" y="181" width="3.0327%" height="15" fill="rgb(228,99,48)"/><text x="73.2468%" y="191.50">wf_..</text></g><g><title>AST_validation (624,667 samples, 0.15%)</title><rect x="76.1495%" y="197" width="0.1537%" height="15" fill="rgb(253,11,6)"/><text x="76.3995%" y="207.50"></text></g><g><title>macro_expand_crate (42,841,235 samples, 10.54%)</title><rect x="76.4053%" y="197" width="10.5383%" height="15" fill="rgb(247,143,39)"/><text x="76.6553%" y="207.50">macro_expand_cr..</text></g><g><title>expand_crate (42,802,605 samples, 10.53%)</title><rect x="76.4148%" y="181" width="10.5288%" height="15" fill="rgb(236,97,10)"/><text x="76.6648%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,597,176 samples, 0.39%)</title><rect x="86.5507%" y="165" width="0.3929%" height="15" fill="rgb(233,208,19)"/><text x="86.8007%" y="175.50"></text></g><g><title>late_resolve_crate (6,279,930 samples, 1.54%)</title><rect x="87.0741%" y="181" width="1.5448%" height="15" fill="rgb(216,164,2)"/><text x="87.3241%" y="191.50"></text></g><g><title>resolve_check_unused (519,066 samples, 0.13%)</title><rect x="88.6261%" y="181" width="0.1277%" height="15" fill="rgb(220,129,5)"/><text x="88.8761%" y="191.50"></text></g><g><title>configure_and_expand (51,771,035 samples, 12.73%)</title><rect x="76.1155%" y="213" width="12.7349%" height="15" fill="rgb(242,17,10)"/><text x="76.3655%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (7,666,995 samples, 1.89%)</title><rect x="86.9644%" y="197" width="1.8860%" height="15" fill="rgb(242,107,0)"/><text x="87.2144%" y="207.50">r..</text></g><g><title>drop_ast (2,301,286 samples, 0.57%)</title><rect x="88.8504%" y="213" width="0.5661%" height="15" fill="rgb(251,28,31)"/><text x="89.1004%" y="223.50"></text></g><g><title>early_lint_checks (3,413,648 samples, 0.84%)</title><rect x="89.4216%" y="213" width="0.8397%" height="15" fill="rgb(233,223,10)"/><text x="89.6716%" y="223.50"></text></g><g><title>free_global_ctxt (4,851,173 samples, 1.19%)</title><rect x="90.2613%" y="213" width="1.1933%" height="15" fill="rgb(215,21,27)"/><text x="90.5113%" y="223.50"></text></g><g><title>generate_crate_metadata (16,491,553 samples, 4.06%)</title><rect x="91.4546%" y="213" width="4.0567%" height="15" fill="rgb(232,23,21)"/><text x="91.7046%" y="223.50">gene..</text></g><g><title>hir_lowering (15,056,507 samples, 3.70%)</title><rect x="95.5113%" y="213" width="3.7037%" height="15" fill="rgb(244,5,23)"/><text x="95.7613%" y="223.50">hir_..</text></g><g><title>parse_crate (646,397 samples, 0.16%)</title><rect x="99.2297%" y="213" width="0.1590%" height="15" fill="rgb(226,81,46)"/><text x="99.4797%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,056,022 samples, 0.26%)</title><rect x="99.4495%" y="213" width="0.2598%" height="15" fill="rgb(247,70,30)"/><text x="99.6995%" y="223.50"></text></g><g><title>all (406,527,911 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (406,527,911 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (1,064,742 samples, 0.26%)</title><rect x="99.7381%" y="213" width="0.2619%" height="15" fill="rgb(223,113,26)"/><text x="99.9881%" y="223.50"></text></g></svg></svg>