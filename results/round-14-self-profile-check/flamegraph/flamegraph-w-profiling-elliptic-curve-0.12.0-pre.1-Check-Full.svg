<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (806,366 samples, 0.36%)</title><rect x="8.5404%" y="133" width="0.3629%" height="15" fill="rgb(227,0,7)"/><text x="8.7904%" y="143.50"></text></g><g><title>is_sized_raw (319,183 samples, 0.14%)</title><rect x="8.9548%" y="133" width="0.1436%" height="15" fill="rgb(217,0,24)"/><text x="9.2048%" y="143.50"></text></g><g><title>diagnostic_items (399,004 samples, 0.18%)</title><rect x="10.0487%" y="101" width="0.1796%" height="15" fill="rgb(221,193,54)"/><text x="10.2987%" y="111.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (345,864 samples, 0.16%)</title><rect x="10.0727%" y="85" width="0.1556%" height="15" fill="rgb(248,212,6)"/><text x="10.3227%" y="95.50"></text></g><g><title>param_env (781,300 samples, 0.35%)</title><rect x="10.2283%" y="101" width="0.3516%" height="15" fill="rgb(208,68,35)"/><text x="10.4783%" y="111.50"></text></g><g><title>is_copy_raw (1,752,761 samples, 0.79%)</title><rect x="12.7226%" y="53" width="0.7888%" height="15" fill="rgb(232,128,0)"/><text x="12.9726%" y="63.50"></text></g><g><title>evaluate_obligation (1,468,536 samples, 0.66%)</title><rect x="12.8505%" y="37" width="0.6609%" height="15" fill="rgb(207,160,47)"/><text x="13.1005%" y="47.50"></text></g><g><title>needs_drop_raw (2,035,998 samples, 0.92%)</title><rect x="12.6412%" y="69" width="0.9162%" height="15" fill="rgb(228,23,34)"/><text x="12.8912%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,621,206 samples, 1.18%)</title><rect x="13.7745%" y="53" width="1.1796%" height="15" fill="rgb(218,30,26)"/><text x="14.0245%" y="63.50"></text></g><g><title>specialization_graph_of (242,012 samples, 0.11%)</title><rect x="14.9844%" y="53" width="0.1089%" height="15" fill="rgb(220,122,19)"/><text x="15.2344%" y="63.50"></text></g><g><title>resolve_instance (3,607,976 samples, 1.62%)</title><rect x="13.5574%" y="69" width="1.6236%" height="15" fill="rgb(250,228,42)"/><text x="13.8074%" y="79.50"></text></g><g><title>thir_body (1,095,628 samples, 0.49%)</title><rect x="15.1987%" y="69" width="0.4930%" height="15" fill="rgb(240,193,28)"/><text x="15.4487%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (232,682 samples, 0.10%)</title><rect x="15.7024%" y="69" width="0.1047%" height="15" fill="rgb(216,20,37)"/><text x="15.9524%" y="79.50"></text></g><g><title>mir_const (13,862,562 samples, 6.24%)</title><rect x="9.5695%" y="117" width="6.2383%" height="15" fill="rgb(206,188,39)"/><text x="9.8195%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (11,617,309 samples, 5.23%)</title><rect x="10.5799%" y="101" width="5.2279%" height="15" fill="rgb(217,207,13)"/><text x="10.8299%" y="111.50">unsafe..</text></g><g><title>mir_built (10,761,815 samples, 4.84%)</title><rect x="10.9649%" y="85" width="4.8429%" height="15" fill="rgb(231,73,38)"/><text x="11.2149%" y="95.50">mir_bu..</text></g><g><title>mir_const_qualif (387,816 samples, 0.17%)</title><rect x="15.8078%" y="117" width="0.1745%" height="15" fill="rgb(225,20,46)"/><text x="16.0578%" y="127.50"></text></g><g><title>mir_promoted (15,297,692 samples, 6.88%)</title><rect x="9.0984%" y="133" width="6.8841%" height="15" fill="rgb(210,31,41)"/><text x="9.3484%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (2,738,278 samples, 1.23%)</title><rect x="15.9830%" y="133" width="1.2322%" height="15" fill="rgb(221,200,47)"/><text x="16.2330%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,282,157 samples, 0.58%)</title><rect x="17.2152%" y="133" width="0.5770%" height="15" fill="rgb(226,26,5)"/><text x="17.4652%" y="143.50"></text></g><g><title>normalize_projection_ty (672,228 samples, 0.30%)</title><rect x="17.4897%" y="117" width="0.3025%" height="15" fill="rgb(249,33,26)"/><text x="17.7397%" y="127.50"></text></g><g><title>type_op_normalize_predicate (964,073 samples, 0.43%)</title><rect x="17.7922%" y="133" width="0.4338%" height="15" fill="rgb(235,183,28)"/><text x="18.0422%" y="143.50"></text></g><g><title>type_op_normalize_ty (384,214 samples, 0.17%)</title><rect x="18.2260%" y="133" width="0.1729%" height="15" fill="rgb(221,5,38)"/><text x="18.4760%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,508,014 samples, 2.93%)</title><rect x="18.3989%" y="133" width="2.9287%" height="15" fill="rgb(247,18,42)"/><text x="18.6489%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (45,487,128 samples, 20.47%)</title><rect x="0.8663%" y="165" width="20.4696%" height="15" fill="rgb(241,131,45)"/><text x="1.1163%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (45,287,015 samples, 20.38%)</title><rect x="0.9564%" y="149" width="20.3795%" height="15" fill="rgb(249,31,29)"/><text x="1.2064%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (727,268 samples, 0.33%)</title><rect x="21.4185%" y="165" width="0.3273%" height="15" fill="rgb(225,111,53)"/><text x="21.6685%" y="175.50"></text></g><g><title>item_attrs (304,165 samples, 0.14%)</title><rect x="22.4896%" y="85" width="0.1369%" height="15" fill="rgb(238,160,17)"/><text x="22.7396%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (287,875 samples, 0.13%)</title><rect x="22.4970%" y="69" width="0.1295%" height="15" fill="rgb(214,148,48)"/><text x="22.7470%" y="79.50"></text></g><g><title>codegen_fn_attrs (510,815 samples, 0.23%)</title><rect x="22.4566%" y="101" width="0.2299%" height="15" fill="rgb(232,36,49)"/><text x="22.7066%" y="111.50"></text></g><g><title>should_inherit_track_caller (908,609 samples, 0.41%)</title><rect x="22.2888%" y="117" width="0.4089%" height="15" fill="rgb(209,103,24)"/><text x="22.5388%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,321,523 samples, 0.59%)</title><rect x="22.1188%" y="133" width="0.5947%" height="15" fill="rgb(229,88,8)"/><text x="22.3688%" y="143.50"></text></g><g><title>check_mod_attrs (2,075,012 samples, 0.93%)</title><rect x="21.7799%" y="149" width="0.9338%" height="15" fill="rgb(213,181,19)"/><text x="22.0299%" y="159.50"></text></g><g><title>check_mod_const_bodies (416,752 samples, 0.19%)</title><rect x="22.7137%" y="149" width="0.1875%" height="15" fill="rgb(254,191,54)"/><text x="22.9637%" y="159.50"></text></g><g><title>lookup_deprecation_entry (601,005 samples, 0.27%)</title><rect x="23.3183%" y="133" width="0.2705%" height="15" fill="rgb(241,83,37)"/><text x="23.5683%" y="143.50"></text></g><g><title>stability_index (440,165 samples, 0.20%)</title><rect x="23.3906%" y="117" width="0.1981%" height="15" fill="rgb(233,36,39)"/><text x="23.6406%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,469,796 samples, 0.66%)</title><rect x="23.0275%" y="149" width="0.6614%" height="15" fill="rgb(226,3,54)"/><text x="23.2775%" y="159.50"></text></g><g><title>looking_for_derive_registrar (254,793 samples, 0.11%)</title><rect x="23.6902%" y="149" width="0.1147%" height="15" fill="rgb(245,192,40)"/><text x="23.9402%" y="159.50"></text></g><g><title>proc_macro_decls_static (237,082 samples, 0.11%)</title><rect x="23.6982%" y="133" width="0.1067%" height="15" fill="rgb(238,167,29)"/><text x="23.9482%" y="143.50"></text></g><g><title>misc_checking_1 (4,588,701 samples, 2.06%)</title><rect x="21.7461%" y="165" width="2.0650%" height="15" fill="rgb(232,182,51)"/><text x="21.9961%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (489,815 samples, 0.22%)</title><rect x="23.8117%" y="149" width="0.2204%" height="15" fill="rgb(231,60,39)"/><text x="24.0617%" y="159.50"></text></g><g><title>check_mod_liveness (377,242 samples, 0.17%)</title><rect x="23.8624%" y="133" width="0.1698%" height="15" fill="rgb(208,69,12)"/><text x="24.1124%" y="143.50"></text></g><g><title>misc_checking_2 (1,007,451 samples, 0.45%)</title><rect x="23.8110%" y="165" width="0.4534%" height="15" fill="rgb(235,93,37)"/><text x="24.0610%" y="175.50"></text></g><g><title>match_checking (516,066 samples, 0.23%)</title><rect x="24.0321%" y="149" width="0.2322%" height="15" fill="rgb(213,116,39)"/><text x="24.2821%" y="159.50"></text></g><g><title>check_match (470,805 samples, 0.21%)</title><rect x="24.0525%" y="133" width="0.2119%" height="15" fill="rgb(222,207,29)"/><text x="24.3025%" y="143.50"></text></g><g><title>check_private_in_public (465,625 samples, 0.21%)</title><rect x="24.2691%" y="149" width="0.2095%" height="15" fill="rgb(206,96,30)"/><text x="24.5191%" y="159.50"></text></g><g><title>codegen_fn_attrs (239,046 samples, 0.11%)</title><rect x="24.7288%" y="133" width="0.1076%" height="15" fill="rgb(218,138,4)"/><text x="24.9788%" y="143.50"></text></g><g><title>death_checking (962,431 samples, 0.43%)</title><rect x="24.4786%" y="149" width="0.4331%" height="15" fill="rgb(250,191,14)"/><text x="24.7286%" y="159.50"></text></g><g><title>param_env (1,008,263 samples, 0.45%)</title><rect x="25.8091%" y="117" width="0.4537%" height="15" fill="rgb(239,60,40)"/><text x="26.0591%" y="127.50"></text></g><g><title>predicates_of (443,107 samples, 0.20%)</title><rect x="26.0634%" y="101" width="0.1994%" height="15" fill="rgb(206,27,48)"/><text x="26.3134%" y="111.50"></text></g><g><title>predicates_defined_on (352,676 samples, 0.16%)</title><rect x="26.1041%" y="85" width="0.1587%" height="15" fill="rgb(225,35,8)"/><text x="26.3541%" y="95.50"></text></g><g><title>crate_lints (3,373,898 samples, 1.52%)</title><rect x="24.9123%" y="133" width="1.5183%" height="15" fill="rgb(250,213,24)"/><text x="25.1623%" y="143.50"></text></g><g><title>type_of (372,663 samples, 0.17%)</title><rect x="26.2629%" y="117" width="0.1677%" height="15" fill="rgb(247,123,22)"/><text x="26.5129%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (285,963 samples, 0.13%)</title><rect x="26.3019%" y="101" width="0.1287%" height="15" fill="rgb(231,138,38)"/><text x="26.5519%" y="111.50"></text></g><g><title>lint_checking (3,783,322 samples, 1.70%)</title><rect x="24.9117%" y="149" width="1.7025%" height="15" fill="rgb(231,145,46)"/><text x="25.1617%" y="159.50"></text></g><g><title>module_lints (408,054 samples, 0.18%)</title><rect x="26.4306%" y="133" width="0.1836%" height="15" fill="rgb(251,118,11)"/><text x="26.6806%" y="143.50"></text></g><g><title>lint_mod (399,944 samples, 0.18%)</title><rect x="26.4343%" y="117" width="0.1800%" height="15" fill="rgb(217,147,25)"/><text x="26.6843%" y="127.50"></text></g><g><title>privacy_access_levels (502,555 samples, 0.23%)</title><rect x="26.6143%" y="149" width="0.2262%" height="15" fill="rgb(247,81,37)"/><text x="26.8643%" y="159.50"></text></g><g><title>privacy_checking_modules (1,319,365 samples, 0.59%)</title><rect x="26.8404%" y="149" width="0.5937%" height="15" fill="rgb(209,12,38)"/><text x="27.0904%" y="159.50"></text></g><g><title>check_mod_privacy (1,312,705 samples, 0.59%)</title><rect x="26.8434%" y="133" width="0.5907%" height="15" fill="rgb(227,1,9)"/><text x="27.0934%" y="143.50"></text></g><g><title>misc_checking_3 (7,068,949 samples, 3.18%)</title><rect x="24.2644%" y="165" width="3.1811%" height="15" fill="rgb(248,47,43)"/><text x="24.5144%" y="175.50">mis..</text></g><g><title>impl_parent (2,099,328 samples, 0.94%)</title><rect x="29.2281%" y="101" width="0.9447%" height="15" fill="rgb(221,10,30)"/><text x="29.4781%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (901,923 samples, 0.41%)</title><rect x="29.7669%" y="85" width="0.4059%" height="15" fill="rgb(210,229,1)"/><text x="30.0169%" y="95.50"></text></g><g><title>impl_trait_ref (3,260,122 samples, 1.47%)</title><rect x="30.1732%" y="101" width="1.4671%" height="15" fill="rgb(222,148,37)"/><text x="30.4232%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,485,915 samples, 1.12%)</title><rect x="30.5216%" y="85" width="1.1187%" height="15" fill="rgb(234,67,33)"/><text x="30.7716%" y="95.50"></text></g><g><title>item_attrs (245,401 samples, 0.11%)</title><rect x="31.6403%" y="101" width="0.1104%" height="15" fill="rgb(247,98,35)"/><text x="31.8903%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (235,601 samples, 0.11%)</title><rect x="31.6447%" y="85" width="0.1060%" height="15" fill="rgb(247,138,52)"/><text x="31.8947%" y="95.50"></text></g><g><title>trait_impls_of (726,409 samples, 0.33%)</title><rect x="31.8013%" y="101" width="0.3269%" height="15" fill="rgb(213,79,30)"/><text x="32.0513%" y="111.50"></text></g><g><title>implementations_of_trait (250,743 samples, 0.11%)</title><rect x="32.0154%" y="85" width="0.1128%" height="15" fill="rgb(246,177,23)"/><text x="32.2654%" y="95.50"></text></g><g><title>specialization_graph_of (9,893,091 samples, 4.45%)</title><rect x="27.6847%" y="117" width="4.4520%" height="15" fill="rgb(230,62,27)"/><text x="27.9347%" y="127.50">speci..</text></g><g><title>coherent_trait (10,243,885 samples, 4.61%)</title><rect x="27.5271%" y="133" width="4.6098%" height="15" fill="rgb(216,154,8)"/><text x="27.7771%" y="143.50">coher..</text></g><g><title>coherence_checking (10,401,087 samples, 4.68%)</title><rect x="27.5120%" y="149" width="4.6806%" height="15" fill="rgb(244,35,45)"/><text x="27.7620%" y="159.50">coher..</text></g><g><title>associated_item (304,434 samples, 0.14%)</title><rect x="49.6773%" y="85" width="0.1370%" height="15" fill="rgb(251,115,12)"/><text x="49.9273%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (239,863 samples, 0.11%)</title><rect x="49.7063%" y="69" width="0.1079%" height="15" fill="rgb(240,54,50)"/><text x="49.9563%" y="79.50"></text></g><g><title>associated_items (468,706 samples, 0.21%)</title><rect x="49.6196%" y="101" width="0.2109%" height="15" fill="rgb(233,84,52)"/><text x="49.8696%" y="111.50"></text></g><g><title>dropck_outlives (1,331,648 samples, 0.60%)</title><rect x="49.8816%" y="101" width="0.5993%" height="15" fill="rgb(207,117,47)"/><text x="50.1316%" y="111.50"></text></g><g><title>normalize_projection_ty (500,036 samples, 0.23%)</title><rect x="50.2558%" y="85" width="0.2250%" height="15" fill="rgb(249,43,39)"/><text x="50.5058%" y="95.50"></text></g><g><title>evaluate_obligation (3,936,582 samples, 1.77%)</title><rect x="50.4808%" y="101" width="1.7715%" height="15" fill="rgb(209,38,44)"/><text x="50.7308%" y="111.50">e..</text></g><g><title>method_autoderef_steps (1,147,094 samples, 0.52%)</title><rect x="52.5317%" y="101" width="0.5162%" height="15" fill="rgb(236,212,23)"/><text x="52.7817%" y="111.50"></text></g><g><title>evaluate_obligation (588,269 samples, 0.26%)</title><rect x="52.7831%" y="85" width="0.2647%" height="15" fill="rgb(242,79,21)"/><text x="53.0331%" y="95.50"></text></g><g><title>predicates_of (351,842 samples, 0.16%)</title><rect x="53.1430%" y="101" width="0.1583%" height="15" fill="rgb(211,96,35)"/><text x="53.3930%" y="111.50"></text></g><g><title>predicates_defined_on (228,010 samples, 0.10%)</title><rect x="53.1987%" y="85" width="0.1026%" height="15" fill="rgb(253,215,40)"/><text x="53.4487%" y="95.50"></text></g><g><title>typeck (801,689 samples, 0.36%)</title><rect x="53.3766%" y="101" width="0.3608%" height="15" fill="rgb(211,81,21)"/><text x="53.6266%" y="111.50"></text></g><g><title>item_bodies_checking (47,864,564 samples, 21.54%)</title><rect x="32.2277%" y="149" width="21.5394%" height="15" fill="rgb(208,190,38)"/><text x="32.4777%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,861,234 samples, 21.54%)</title><rect x="32.2292%" y="133" width="21.5379%" height="15" fill="rgb(235,213,38)"/><text x="32.4792%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (47,709,552 samples, 21.47%)</title><rect x="32.2975%" y="117" width="21.4697%" height="15" fill="rgb(237,122,38)"/><text x="32.5475%" y="127.50">typeck</text></g><g><title>item_types_checking (3,780,922 samples, 1.70%)</title><rect x="53.7671%" y="149" width="1.7014%" height="15" fill="rgb(244,218,35)"/><text x="54.0171%" y="159.50"></text></g><g><title>check_mod_item_types (3,772,002 samples, 1.70%)</title><rect x="53.7711%" y="133" width="1.6974%" height="15" fill="rgb(240,68,47)"/><text x="54.0211%" y="143.50"></text></g><g><title>fn_sig (999,145 samples, 0.45%)</title><rect x="55.9150%" y="117" width="0.4496%" height="15" fill="rgb(210,16,53)"/><text x="56.1650%" y="127.50"></text></g><g><title>named_region_map (682,007 samples, 0.31%)</title><rect x="56.6270%" y="101" width="0.3069%" height="15" fill="rgb(235,124,12)"/><text x="56.8770%" y="111.50"></text></g><g><title>resolve_lifetimes (633,937 samples, 0.29%)</title><rect x="56.6486%" y="85" width="0.2853%" height="15" fill="rgb(224,169,11)"/><text x="56.8986%" y="95.50"></text></g><g><title>lint_levels (434,835 samples, 0.20%)</title><rect x="56.7382%" y="69" width="0.1957%" height="15" fill="rgb(250,166,2)"/><text x="56.9882%" y="79.50"></text></g><g><title>generics_of (1,332,712 samples, 0.60%)</title><rect x="56.3647%" y="117" width="0.5997%" height="15" fill="rgb(242,216,29)"/><text x="56.6147%" y="127.50"></text></g><g><title>impl_trait_ref (308,463 samples, 0.14%)</title><rect x="56.9644%" y="117" width="0.1388%" height="15" fill="rgb(230,116,27)"/><text x="57.2144%" y="127.50"></text></g><g><title>late_bound_vars_map (243,023 samples, 0.11%)</title><rect x="57.4399%" y="85" width="0.1094%" height="15" fill="rgb(228,99,48)"/><text x="57.6899%" y="95.50"></text></g><g><title>resolve_lifetimes (225,133 samples, 0.10%)</title><rect x="57.4480%" y="69" width="0.1013%" height="15" fill="rgb(253,11,6)"/><text x="57.6980%" y="79.50"></text></g><g><title>explicit_item_bounds (730,597 samples, 0.33%)</title><rect x="57.3101%" y="101" width="0.3288%" height="15" fill="rgb(247,143,39)"/><text x="57.5601%" y="111.50"></text></g><g><title>item_bounds (1,329,585 samples, 0.60%)</title><rect x="57.1032%" y="117" width="0.5983%" height="15" fill="rgb(236,97,10)"/><text x="57.3532%" y="127.50"></text></g><g><title>late_bound_vars_map (1,033,991 samples, 0.47%)</title><rect x="58.2950%" y="69" width="0.4653%" height="15" fill="rgb(233,208,19)"/><text x="58.5450%" y="79.50"></text></g><g><title>resolve_lifetimes (949,580 samples, 0.43%)</title><rect x="58.3330%" y="53" width="0.4273%" height="15" fill="rgb(216,164,2)"/><text x="58.5830%" y="63.50"></text></g><g><title>explicit_predicates_of (1,979,583 samples, 0.89%)</title><rect x="57.9357%" y="85" width="0.8908%" height="15" fill="rgb(220,129,5)"/><text x="58.1857%" y="95.50"></text></g><g><title>predicates_of (2,807,105 samples, 1.26%)</title><rect x="57.7015%" y="117" width="1.2632%" height="15" fill="rgb(242,17,10)"/><text x="57.9515%" y="127.50"></text></g><g><title>predicates_defined_on (2,610,343 samples, 1.17%)</title><rect x="57.7901%" y="101" width="1.1747%" height="15" fill="rgb(242,107,0)"/><text x="58.0401%" y="111.50"></text></g><g><title>inferred_outlives_of (307,234 samples, 0.14%)</title><rect x="58.8265%" y="85" width="0.1383%" height="15" fill="rgb(251,28,31)"/><text x="59.0765%" y="95.50"></text></g><g><title>inferred_outlives_crate (232,153 samples, 0.10%)</title><rect x="58.8603%" y="69" width="0.1045%" height="15" fill="rgb(233,223,10)"/><text x="59.1103%" y="79.50"></text></g><g><title>super_predicates_of (481,785 samples, 0.22%)</title><rect x="58.9648%" y="117" width="0.2168%" height="15" fill="rgb(215,21,27)"/><text x="59.2148%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (453,064 samples, 0.20%)</title><rect x="58.9777%" y="101" width="0.2039%" height="15" fill="rgb(232,23,21)"/><text x="59.2277%" y="111.50"></text></g><g><title>type_collecting (8,698,907 samples, 3.91%)</title><rect x="55.4738%" y="149" width="3.9146%" height="15" fill="rgb(244,5,23)"/><text x="55.7238%" y="159.50">type..</text></g><g><title>collect_mod_item_types (8,670,136 samples, 3.90%)</title><rect x="55.4868%" y="133" width="3.9016%" height="15" fill="rgb(226,81,46)"/><text x="55.7368%" y="143.50">coll..</text></g><g><title>type_of (436,464 samples, 0.20%)</title><rect x="59.1920%" y="117" width="0.1964%" height="15" fill="rgb(247,70,30)"/><text x="59.4420%" y="127.50"></text></g><g><title>evaluate_obligation (499,675 samples, 0.22%)</title><rect x="62.3111%" y="117" width="0.2249%" height="15" fill="rgb(212,68,19)"/><text x="62.5611%" y="127.50"></text></g><g><title>implied_outlives_bounds (568,297 samples, 0.26%)</title><rect x="62.5359%" y="117" width="0.2557%" height="15" fill="rgb(240,187,13)"/><text x="62.7859%" y="127.50"></text></g><g><title>param_env (1,649,334 samples, 0.74%)</title><rect x="62.7917%" y="117" width="0.7422%" height="15" fill="rgb(223,113,26)"/><text x="63.0417%" y="127.50"></text></g><g><title>region_scope_tree (458,745 samples, 0.21%)</title><rect x="63.5546%" y="117" width="0.2064%" height="15" fill="rgb(206,192,2)"/><text x="63.8046%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,231,960 samples, 4.15%)</title><rect x="59.6129%" y="133" width="4.1545%" height="15" fill="rgb(241,108,4)"/><text x="59.8629%" y="143.50">check..</text></g><g><title>implied_outlives_bounds (272,675 samples, 0.12%)</title><rect x="67.5316%" y="117" width="0.1227%" height="15" fill="rgb(247,173,49)"/><text x="67.7816%" y="127.50"></text></g><g><title>param_env (1,526,238 samples, 0.69%)</title><rect x="67.6762%" y="117" width="0.6868%" height="15" fill="rgb(224,114,35)"/><text x="67.9262%" y="127.50"></text></g><g><title>predicates_of (290,123 samples, 0.13%)</title><rect x="68.3630%" y="117" width="0.1306%" height="15" fill="rgb(245,159,27)"/><text x="68.6130%" y="127.50"></text></g><g><title>trait_impls_of (374,873 samples, 0.17%)</title><rect x="68.5194%" y="117" width="0.1687%" height="15" fill="rgb(245,172,44)"/><text x="68.7694%" y="127.50"></text></g><g><title>check_item_well_formed (11,049,857 samples, 4.97%)</title><rect x="63.7674%" y="133" width="4.9725%" height="15" fill="rgb(236,23,11)"/><text x="64.0174%" y="143.50">check_..</text></g><g><title>implied_outlives_bounds (298,021 samples, 0.13%)</title><rect x="70.5165%" y="117" width="0.1341%" height="15" fill="rgb(205,117,38)"/><text x="70.7665%" y="127.50"></text></g><g><title>param_env (319,414 samples, 0.14%)</title><rect x="70.6596%" y="117" width="0.1437%" height="15" fill="rgb(237,72,25)"/><text x="70.9096%" y="127.50"></text></g><g><title>analysis (156,466,696 samples, 70.41%)</title><rect x="0.4719%" y="181" width="70.4112%" height="15" fill="rgb(244,70,9)"/><text x="0.7219%" y="191.50">analysis</text></g><g><title>type_check_crate (96,526,437 samples, 43.44%)</title><rect x="27.4455%" y="165" width="43.4376%" height="15" fill="rgb(217,125,39)"/><text x="27.6955%" y="175.50">type_check_crate</text></g><g><title>wf_checking (25,534,694 samples, 11.49%)</title><rect x="59.3923%" y="149" width="11.4908%" height="15" fill="rgb(235,36,10)"/><text x="59.6423%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (4,762,613 samples, 2.14%)</title><rect x="68.7399%" y="133" width="2.1432%" height="15" fill="rgb(251,123,47)"/><text x="68.9899%" y="143.50">c..</text></g><g><title>codegen_crate (363,314 samples, 0.16%)</title><rect x="70.8860%" y="181" width="0.1635%" height="15" fill="rgb(221,13,13)"/><text x="71.1360%" y="191.50"></text></g><g><title>AST_validation (442,115 samples, 0.20%)</title><rect x="71.1166%" y="165" width="0.1990%" height="15" fill="rgb(238,131,9)"/><text x="71.3666%" y="175.50"></text></g><g><title>metadata_load_macro (305,475 samples, 0.14%)</title><rect x="87.3047%" y="133" width="0.1375%" height="15" fill="rgb(211,50,8)"/><text x="87.5547%" y="143.50"></text></g><g><title>metadata_register_crate (815,529 samples, 0.37%)</title><rect x="87.4422%" y="133" width="0.3670%" height="15" fill="rgb(245,182,24)"/><text x="87.6922%" y="143.50"></text></g><g><title>macro_expand_crate (37,039,323 samples, 16.67%)</title><rect x="71.4249%" y="165" width="16.6680%" height="15" fill="rgb(242,14,37)"/><text x="71.6749%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (37,025,463 samples, 16.66%)</title><rect x="71.4312%" y="149" width="16.6617%" height="15" fill="rgb(246,228,12)"/><text x="71.6812%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (630,547 samples, 0.28%)</title><rect x="87.8091%" y="133" width="0.2838%" height="15" fill="rgb(213,55,15)"/><text x="88.0591%" y="143.50"></text></g><g><title>finalize_imports (504,136 samples, 0.23%)</title><rect x="88.1357%" y="149" width="0.2269%" height="15" fill="rgb(209,9,3)"/><text x="88.3857%" y="159.50"></text></g><g><title>finalize_macro_resolutions (267,603 samples, 0.12%)</title><rect x="88.3626%" y="149" width="0.1204%" height="15" fill="rgb(230,59,30)"/><text x="88.6126%" y="159.50"></text></g><g><title>late_resolve_crate (5,018,636 samples, 2.26%)</title><rect x="88.4830%" y="149" width="2.2584%" height="15" fill="rgb(209,121,21)"/><text x="88.7330%" y="159.50">l..</text></g><g><title>configure_and_expand (44,155,223 samples, 19.87%)</title><rect x="71.0495%" y="181" width="19.8702%" height="15" fill="rgb(220,109,13)"/><text x="71.2995%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (6,197,170 samples, 2.79%)</title><rect x="88.1309%" y="165" width="2.7888%" height="15" fill="rgb(232,18,1)"/><text x="88.3809%" y="175.50">re..</text></g><g><title>drop_ast (663,978 samples, 0.30%)</title><rect x="90.9197%" y="181" width="0.2988%" height="15" fill="rgb(215,41,42)"/><text x="91.1697%" y="191.50"></text></g><g><title>early_lint_checks (1,010,201 samples, 0.45%)</title><rect x="91.2279%" y="181" width="0.4546%" height="15" fill="rgb(224,123,36)"/><text x="91.4779%" y="191.50"></text></g><g><title>free_global_ctxt (2,532,058 samples, 1.14%)</title><rect x="91.6825%" y="181" width="1.1394%" height="15" fill="rgb(240,125,3)"/><text x="91.9325%" y="191.50"></text></g><g><title>generate_crate_metadata (2,308,306 samples, 1.04%)</title><rect x="92.8220%" y="181" width="1.0388%" height="15" fill="rgb(205,98,50)"/><text x="93.0720%" y="191.50"></text></g><g><title>hir_lowering (11,170,704 samples, 5.03%)</title><rect x="93.8607%" y="181" width="5.0269%" height="15" fill="rgb(205,185,37)"/><text x="94.1107%" y="191.50">hir_lo..</text></g><g><title>parse_crate (650,748 samples, 0.29%)</title><rect x="98.9066%" y="181" width="0.2928%" height="15" fill="rgb(238,207,15)"/><text x="99.1566%" y="191.50"></text></g><g><title>prepare_outputs (329,023 samples, 0.15%)</title><rect x="99.2019%" y="181" width="0.1481%" height="15" fill="rgb(213,199,42)"/><text x="99.4519%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (946,501 samples, 0.43%)</title><rect x="99.3500%" y="181" width="0.4259%" height="15" fill="rgb(235,201,11)"/><text x="99.6000%" y="191.50"></text></g><g><title>all (222,218,420 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (222,218,420 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (353,724 samples, 0.16%)</title><rect x="99.8408%" y="181" width="0.1592%" height="15" fill="rgb(243,32,47)"/><text x="100.0908%" y="191.50"></text></g></svg></svg>