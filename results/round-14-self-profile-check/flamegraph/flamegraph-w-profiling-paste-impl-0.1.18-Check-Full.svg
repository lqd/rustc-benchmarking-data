<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (386,034 samples, 0.31%)</title><rect x="13.1448%" y="117" width="0.3120%" height="15" fill="rgb(227,0,7)"/><text x="13.3948%" y="127.50"></text></g><g><title>item_attrs (376,316 samples, 0.30%)</title><rect x="13.9499%" y="85" width="0.3042%" height="15" fill="rgb(217,0,24)"/><text x="14.1999%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (362,726 samples, 0.29%)</title><rect x="13.9609%" y="69" width="0.2932%" height="15" fill="rgb(221,193,54)"/><text x="14.2109%" y="79.50"></text></g><g><title>codegen_fn_attrs (528,908 samples, 0.43%)</title><rect x="13.8504%" y="101" width="0.4275%" height="15" fill="rgb(248,212,6)"/><text x="14.1004%" y="111.50"></text></g><g><title>adt_drop_tys (131,541 samples, 0.11%)</title><rect x="17.3401%" y="53" width="0.1063%" height="15" fill="rgb(208,68,35)"/><text x="17.5901%" y="63.50"></text></g><g><title>adt_drop_tys (429,672 samples, 0.35%)</title><rect x="17.3055%" y="69" width="0.3473%" height="15" fill="rgb(232,128,0)"/><text x="17.5555%" y="79.50"></text></g><g><title>param_env (157,661 samples, 0.13%)</title><rect x="17.5253%" y="53" width="0.1274%" height="15" fill="rgb(207,160,47)"/><text x="17.7753%" y="63.50"></text></g><g><title>needs_drop_raw (1,180,871 samples, 0.95%)</title><rect x="17.2328%" y="85" width="0.9545%" height="15" fill="rgb(228,23,34)"/><text x="17.4828%" y="95.50"></text></g><g><title>is_copy_raw (661,308 samples, 0.53%)</title><rect x="17.6528%" y="69" width="0.5346%" height="15" fill="rgb(218,30,26)"/><text x="17.9028%" y="79.50"></text></g><g><title>evaluate_obligation (552,128 samples, 0.45%)</title><rect x="17.7410%" y="53" width="0.4463%" height="15" fill="rgb(220,122,19)"/><text x="17.9910%" y="63.50"></text></g><g><title>impl_parent (1,324,571 samples, 1.07%)</title><rect x="20.2803%" y="53" width="1.0707%" height="15" fill="rgb(250,228,42)"/><text x="20.5303%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (842,163 samples, 0.68%)</title><rect x="20.6703%" y="37" width="0.6808%" height="15" fill="rgb(240,193,28)"/><text x="20.9203%" y="47.50"></text></g><g><title>specialization_graph_of (7,017,338 samples, 5.67%)</title><rect x="18.4760%" y="69" width="5.6724%" height="15" fill="rgb(216,20,37)"/><text x="18.7260%" y="79.50">special..</text></g><g><title>impl_trait_ref (3,460,655 samples, 2.80%)</title><rect x="21.3510%" y="53" width="2.7974%" height="15" fill="rgb(206,188,39)"/><text x="21.6010%" y="63.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,980,861 samples, 2.41%)</title><rect x="21.7389%" y="37" width="2.4095%" height="15" fill="rgb(217,207,13)"/><text x="21.9889%" y="47.50">me..</text></g><g><title>resolve_instance (7,436,830 samples, 6.01%)</title><rect x="18.1873%" y="85" width="6.0115%" height="15" fill="rgb(231,73,38)"/><text x="18.4373%" y="95.50">resolve_..</text></g><g><title>thir_body (1,424,426 samples, 1.15%)</title><rect x="24.2119%" y="85" width="1.1514%" height="15" fill="rgb(225,20,46)"/><text x="24.4619%" y="95.50"></text></g><g><title>mir_const (16,041,132 samples, 12.97%)</title><rect x="12.4082%" y="133" width="12.9666%" height="15" fill="rgb(210,31,41)"/><text x="12.6582%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (14,743,944 samples, 11.92%)</title><rect x="13.4568%" y="117" width="11.9181%" height="15" fill="rgb(221,200,47)"/><text x="13.7068%" y="127.50">unsafety_check_res..</text></g><g><title>mir_built (13,728,132 samples, 11.10%)</title><rect x="14.2779%" y="101" width="11.0969%" height="15" fill="rgb(226,26,5)"/><text x="14.5279%" y="111.50">mir_built</text></g><g><title>is_freeze_raw (156,882 samples, 0.13%)</title><rect x="25.5077%" y="117" width="0.1268%" height="15" fill="rgb(249,33,26)"/><text x="25.7577%" y="127.50"></text></g><g><title>evaluate_obligation (154,112 samples, 0.12%)</title><rect x="25.5099%" y="101" width="0.1246%" height="15" fill="rgb(235,183,28)"/><text x="25.7599%" y="111.50"></text></g><g><title>mir_promoted (17,473,087 samples, 14.12%)</title><rect x="11.6089%" y="149" width="14.1241%" height="15" fill="rgb(221,5,38)"/><text x="11.8589%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (443,094 samples, 0.36%)</title><rect x="25.3749%" y="133" width="0.3582%" height="15" fill="rgb(247,18,42)"/><text x="25.6249%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (351,134 samples, 0.28%)</title><rect x="25.7391%" y="149" width="0.2838%" height="15" fill="rgb(241,131,45)"/><text x="25.9891%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (454,654 samples, 0.37%)</title><rect x="26.0230%" y="149" width="0.3675%" height="15" fill="rgb(249,31,29)"/><text x="26.2730%" y="159.50"></text></g><g><title>normalize_projection_ty (290,542 samples, 0.23%)</title><rect x="26.1556%" y="133" width="0.2349%" height="15" fill="rgb(225,111,53)"/><text x="26.4056%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,375,008 samples, 1.11%)</title><rect x="26.4484%" y="149" width="1.1115%" height="15" fill="rgb(238,160,17)"/><text x="26.6984%" y="159.50"></text></g><g><title>evaluate_obligation (263,562 samples, 0.21%)</title><rect x="27.3469%" y="133" width="0.2130%" height="15" fill="rgb(214,148,48)"/><text x="27.5969%" y="143.50"></text></g><g><title>MIR_borrow_checking (33,215,082 samples, 26.85%)</title><rect x="0.7237%" y="181" width="26.8489%" height="15" fill="rgb(232,36,49)"/><text x="0.9737%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (33,162,611 samples, 26.81%)</title><rect x="0.7661%" y="165" width="26.8065%" height="15" fill="rgb(209,103,24)"/><text x="1.0161%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (146,061 samples, 0.12%)</title><rect x="27.6726%" y="181" width="0.1181%" height="15" fill="rgb(229,88,8)"/><text x="27.9226%" y="191.50"></text></g><g><title>codegen_fn_attrs (217,693 samples, 0.18%)</title><rect x="27.9647%" y="149" width="0.1760%" height="15" fill="rgb(213,181,19)"/><text x="28.2147%" y="159.50"></text></g><g><title>check_mod_attrs (414,424 samples, 0.33%)</title><rect x="27.8058%" y="165" width="0.3350%" height="15" fill="rgb(254,191,54)"/><text x="28.0558%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (366,194 samples, 0.30%)</title><rect x="28.2623%" y="165" width="0.2960%" height="15" fill="rgb(241,83,37)"/><text x="28.5123%" y="175.50"></text></g><g><title>misc_checking_1 (998,431 samples, 0.81%)</title><rect x="27.7911%" y="181" width="0.8071%" height="15" fill="rgb(233,36,39)"/><text x="28.0411%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (580,157 samples, 0.47%)</title><rect x="28.5997%" y="165" width="0.4690%" height="15" fill="rgb(226,3,54)"/><text x="28.8497%" y="175.50"></text></g><g><title>check_mod_liveness (464,315 samples, 0.38%)</title><rect x="28.6933%" y="149" width="0.3753%" height="15" fill="rgb(245,192,40)"/><text x="28.9433%" y="159.50"></text></g><g><title>misc_checking_2 (1,231,984 samples, 1.00%)</title><rect x="28.5982%" y="181" width="0.9959%" height="15" fill="rgb(238,167,29)"/><text x="28.8482%" y="191.50"></text></g><g><title>match_checking (650,017 samples, 0.53%)</title><rect x="29.0686%" y="165" width="0.5254%" height="15" fill="rgb(232,182,51)"/><text x="29.3186%" y="175.50"></text></g><g><title>check_match (633,977 samples, 0.51%)</title><rect x="29.0816%" y="149" width="0.5125%" height="15" fill="rgb(231,60,39)"/><text x="29.3316%" y="159.50"></text></g><g><title>check_private_in_public (131,821 samples, 0.11%)</title><rect x="29.6016%" y="165" width="0.1066%" height="15" fill="rgb(208,69,12)"/><text x="29.8516%" y="175.50"></text></g><g><title>death_checking (342,634 samples, 0.28%)</title><rect x="29.7082%" y="165" width="0.2770%" height="15" fill="rgb(235,93,37)"/><text x="29.9582%" y="175.50"></text></g><g><title>fn_abi_of_instance (131,031 samples, 0.11%)</title><rect x="30.5278%" y="37" width="0.1059%" height="15" fill="rgb(213,116,39)"/><text x="30.7778%" y="47.50"></text></g><g><title>eval_to_const_value_raw (523,896 samples, 0.42%)</title><rect x="30.3368%" y="85" width="0.4235%" height="15" fill="rgb(222,207,29)"/><text x="30.5868%" y="95.50"></text></g><g><title>eval_to_const_value_raw (523,216 samples, 0.42%)</title><rect x="30.3374%" y="69" width="0.4229%" height="15" fill="rgb(206,96,30)"/><text x="30.5874%" y="79.50"></text></g><g><title>eval_to_allocation_raw (521,316 samples, 0.42%)</title><rect x="30.3389%" y="53" width="0.4214%" height="15" fill="rgb(218,138,4)"/><text x="30.5889%" y="63.50"></text></g><g><title>eval_to_allocation_raw (582,147 samples, 0.47%)</title><rect x="30.2911%" y="133" width="0.4706%" height="15" fill="rgb(250,191,14)"/><text x="30.5411%" y="143.50"></text></g><g><title>eval_to_allocation_raw (581,467 samples, 0.47%)</title><rect x="30.2916%" y="117" width="0.4700%" height="15" fill="rgb(239,60,40)"/><text x="30.5416%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (533,406 samples, 0.43%)</title><rect x="30.3305%" y="101" width="0.4312%" height="15" fill="rgb(206,27,48)"/><text x="30.5805%" y="111.50"></text></g><g><title>param_env (275,584 samples, 0.22%)</title><rect x="30.8508%" y="133" width="0.2228%" height="15" fill="rgb(225,35,8)"/><text x="31.1008%" y="143.50"></text></g><g><title>crate_lints (1,439,386 samples, 1.16%)</title><rect x="29.9865%" y="149" width="1.1635%" height="15" fill="rgb(250,213,24)"/><text x="30.2365%" y="159.50"></text></g><g><title>lint_checking (2,023,563 samples, 1.64%)</title><rect x="29.9851%" y="165" width="1.6357%" height="15" fill="rgb(247,123,22)"/><text x="30.2351%" y="175.50"></text></g><g><title>module_lints (582,547 samples, 0.47%)</title><rect x="31.1500%" y="149" width="0.4709%" height="15" fill="rgb(231,138,38)"/><text x="31.4000%" y="159.50"></text></g><g><title>lint_mod (577,347 samples, 0.47%)</title><rect x="31.1542%" y="133" width="0.4667%" height="15" fill="rgb(231,145,46)"/><text x="31.4042%" y="143.50"></text></g><g><title>privacy_checking_modules (799,439 samples, 0.65%)</title><rect x="31.7118%" y="165" width="0.6462%" height="15" fill="rgb(251,118,11)"/><text x="31.9618%" y="175.50"></text></g><g><title>check_mod_privacy (796,209 samples, 0.64%)</title><rect x="31.7144%" y="149" width="0.6436%" height="15" fill="rgb(217,147,25)"/><text x="31.9644%" y="159.50"></text></g><g><title>misc_checking_3 (3,435,809 samples, 2.78%)</title><rect x="29.5941%" y="181" width="2.7773%" height="15" fill="rgb(247,81,37)"/><text x="29.8441%" y="191.50">mi..</text></g><g><title>impl_parent (566,183 samples, 0.46%)</title><rect x="33.0374%" y="117" width="0.4577%" height="15" fill="rgb(209,12,38)"/><text x="33.2874%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (371,472 samples, 0.30%)</title><rect x="33.1948%" y="101" width="0.3003%" height="15" fill="rgb(227,1,9)"/><text x="33.4448%" y="111.50"></text></g><g><title>impl_trait_ref (1,710,309 samples, 1.38%)</title><rect x="33.4951%" y="117" width="1.3825%" height="15" fill="rgb(248,47,43)"/><text x="33.7451%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,516,647 samples, 1.23%)</title><rect x="33.6516%" y="101" width="1.2260%" height="15" fill="rgb(221,10,30)"/><text x="33.9016%" y="111.50"></text></g><g><title>coherent_trait (3,187,115 samples, 2.58%)</title><rect x="32.4293%" y="149" width="2.5763%" height="15" fill="rgb(210,229,1)"/><text x="32.6793%" y="159.50">co..</text></g><g><title>specialization_graph_of (3,180,194 samples, 2.57%)</title><rect x="32.4349%" y="133" width="2.5707%" height="15" fill="rgb(222,148,37)"/><text x="32.6849%" y="143.50">sp..</text></g><g><title>trait_impls_of (158,331 samples, 0.13%)</title><rect x="34.8776%" y="117" width="0.1280%" height="15" fill="rgb(234,67,33)"/><text x="35.1276%" y="127.50"></text></g><g><title>coherence_checking (3,236,297 samples, 2.62%)</title><rect x="32.4207%" y="165" width="2.6160%" height="15" fill="rgb(247,98,35)"/><text x="32.6707%" y="175.50">co..</text></g><g><title>associated_item (485,336 samples, 0.39%)</title><rect x="51.2429%" y="101" width="0.3923%" height="15" fill="rgb(247,138,52)"/><text x="51.4929%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (368,224 samples, 0.30%)</title><rect x="51.3376%" y="85" width="0.2976%" height="15" fill="rgb(213,79,30)"/><text x="51.5876%" y="95.50"></text></g><g><title>associated_items (727,708 samples, 0.59%)</title><rect x="51.0801%" y="117" width="0.5882%" height="15" fill="rgb(246,177,23)"/><text x="51.3301%" y="127.50"></text></g><g><title>adt_dtorck_constraint (165,601 samples, 0.13%)</title><rect x="51.9765%" y="85" width="0.1339%" height="15" fill="rgb(230,62,27)"/><text x="52.2265%" y="95.50"></text></g><g><title>adt_dtorck_constraint (301,725 samples, 0.24%)</title><rect x="51.8877%" y="101" width="0.2439%" height="15" fill="rgb(216,154,8)"/><text x="52.1377%" y="111.50"></text></g><g><title>dropck_outlives (469,388 samples, 0.38%)</title><rect x="51.7610%" y="117" width="0.3794%" height="15" fill="rgb(244,35,45)"/><text x="52.0110%" y="127.50"></text></g><g><title>adt_def (168,652 samples, 0.14%)</title><rect x="53.7074%" y="85" width="0.1363%" height="15" fill="rgb(251,115,12)"/><text x="53.9574%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (164,482 samples, 0.13%)</title><rect x="53.7108%" y="69" width="0.1330%" height="15" fill="rgb(240,54,50)"/><text x="53.9608%" y="79.50"></text></g><g><title>adt_sized_constraint (287,984 samples, 0.23%)</title><rect x="53.8834%" y="69" width="0.2328%" height="15" fill="rgb(233,84,52)"/><text x="54.1334%" y="79.50"></text></g><g><title>adt_sized_constraint (345,015 samples, 0.28%)</title><rect x="53.8437%" y="85" width="0.2789%" height="15" fill="rgb(207,117,47)"/><text x="54.0937%" y="95.50"></text></g><g><title>adt_sized_constraint (547,417 samples, 0.44%)</title><rect x="53.6889%" y="101" width="0.4425%" height="15" fill="rgb(249,43,39)"/><text x="53.9389%" y="111.50"></text></g><g><title>generics_of (355,205 samples, 0.29%)</title><rect x="54.1334%" y="101" width="0.2871%" height="15" fill="rgb(209,38,44)"/><text x="54.3834%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (267,944 samples, 0.22%)</title><rect x="54.2039%" y="85" width="0.2166%" height="15" fill="rgb(236,212,23)"/><text x="54.4539%" y="95.50"></text></g><g><title>impl_trait_ref (434,885 samples, 0.35%)</title><rect x="54.4711%" y="101" width="0.3515%" height="15" fill="rgb(242,79,21)"/><text x="54.7211%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (352,392 samples, 0.28%)</title><rect x="54.5378%" y="85" width="0.2849%" height="15" fill="rgb(211,96,35)"/><text x="54.7878%" y="95.50"></text></g><g><title>predicates_of (359,013 samples, 0.29%)</title><rect x="54.8439%" y="101" width="0.2902%" height="15" fill="rgb(253,215,40)"/><text x="55.0939%" y="111.50"></text></g><g><title>predicates_defined_on (213,583 samples, 0.17%)</title><rect x="54.9614%" y="85" width="0.1726%" height="15" fill="rgb(211,81,21)"/><text x="55.2114%" y="95.50"></text></g><g><title>specializes (600,307 samples, 0.49%)</title><rect x="55.1341%" y="101" width="0.4852%" height="15" fill="rgb(208,190,38)"/><text x="55.3841%" y="111.50"></text></g><g><title>param_env (340,135 samples, 0.27%)</title><rect x="55.3444%" y="85" width="0.2749%" height="15" fill="rgb(235,213,38)"/><text x="55.5944%" y="95.50"></text></g><g><title>trait_impls_of (908,942 samples, 0.73%)</title><rect x="55.6370%" y="101" width="0.7347%" height="15" fill="rgb(237,122,38)"/><text x="55.8870%" y="111.50"></text></g><g><title>implementations_of_trait (305,352 samples, 0.25%)</title><rect x="56.1249%" y="85" width="0.2468%" height="15" fill="rgb(244,218,35)"/><text x="56.3749%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (199,651 samples, 0.16%)</title><rect x="56.2103%" y="69" width="0.1614%" height="15" fill="rgb(240,68,47)"/><text x="56.4603%" y="79.50"></text></g><g><title>evaluate_obligation (5,245,214 samples, 4.24%)</title><rect x="52.1405%" y="117" width="4.2399%" height="15" fill="rgb(210,16,53)"/><text x="52.3905%" y="127.50">evalu..</text></g><g><title>fn_sig (218,224 samples, 0.18%)</title><rect x="56.4130%" y="117" width="0.1764%" height="15" fill="rgb(235,124,12)"/><text x="56.6630%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (186,704 samples, 0.15%)</title><rect x="56.4385%" y="101" width="0.1509%" height="15" fill="rgb(224,169,11)"/><text x="56.6885%" y="111.50"></text></g><g><title>generics_of (211,991 samples, 0.17%)</title><rect x="56.5894%" y="117" width="0.1714%" height="15" fill="rgb(250,166,2)"/><text x="56.8394%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (148,260 samples, 0.12%)</title><rect x="56.6409%" y="101" width="0.1198%" height="15" fill="rgb(242,216,29)"/><text x="56.8909%" y="111.50"></text></g><g><title>impl_item_implementor_ids (152,930 samples, 0.12%)</title><rect x="56.7607%" y="117" width="0.1236%" height="15" fill="rgb(230,116,27)"/><text x="57.0107%" y="127.50"></text></g><g><title>associated_items (131,360 samples, 0.11%)</title><rect x="56.7782%" y="101" width="0.1062%" height="15" fill="rgb(228,99,48)"/><text x="57.0282%" y="111.50"></text></g><g><title>item_attrs (218,952 samples, 0.18%)</title><rect x="56.9809%" y="117" width="0.1770%" height="15" fill="rgb(253,11,6)"/><text x="57.2309%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (206,842 samples, 0.17%)</title><rect x="56.9907%" y="101" width="0.1672%" height="15" fill="rgb(247,143,39)"/><text x="57.2407%" y="111.50"></text></g><g><title>evaluate_obligation (151,773 samples, 0.12%)</title><rect x="57.3714%" y="101" width="0.1227%" height="15" fill="rgb(236,97,10)"/><text x="57.6214%" y="111.50"></text></g><g><title>method_autoderef_steps (324,363 samples, 0.26%)</title><rect x="57.2395%" y="117" width="0.2622%" height="15" fill="rgb(233,208,19)"/><text x="57.4895%" y="127.50"></text></g><g><title>explicit_predicates_of (161,101 samples, 0.13%)</title><rect x="57.7974%" y="85" width="0.1302%" height="15" fill="rgb(216,164,2)"/><text x="58.0474%" y="95.50"></text></g><g><title>predicates_of (557,525 samples, 0.45%)</title><rect x="57.5514%" y="117" width="0.4507%" height="15" fill="rgb(220,129,5)"/><text x="57.8014%" y="127.50"></text></g><g><title>predicates_defined_on (384,324 samples, 0.31%)</title><rect x="57.6914%" y="101" width="0.3107%" height="15" fill="rgb(242,17,10)"/><text x="57.9414%" y="111.50"></text></g><g><title>dropck_outlives (137,592 samples, 0.11%)</title><rect x="62.1793%" y="101" width="0.1112%" height="15" fill="rgb(242,107,0)"/><text x="62.4293%" y="111.50"></text></g><g><title>evaluate_obligation (659,453 samples, 0.53%)</title><rect x="62.2905%" y="101" width="0.5331%" height="15" fill="rgb(251,28,31)"/><text x="62.5405%" y="111.50"></text></g><g><title>trait_impls_of (234,082 samples, 0.19%)</title><rect x="62.6343%" y="85" width="0.1892%" height="15" fill="rgb(233,223,10)"/><text x="62.8843%" y="95.50"></text></g><g><title>lint_levels (176,122 samples, 0.14%)</title><rect x="63.1097%" y="101" width="0.1424%" height="15" fill="rgb(215,21,27)"/><text x="63.3597%" y="111.50"></text></g><g><title>object_safety_violations (166,882 samples, 0.13%)</title><rect x="63.3232%" y="101" width="0.1349%" height="15" fill="rgb(232,23,21)"/><text x="63.5732%" y="111.50"></text></g><g><title>typeck (6,634,505 samples, 5.36%)</title><rect x="58.2252%" y="117" width="5.3629%" height="15" fill="rgb(244,5,23)"/><text x="58.4752%" y="127.50">typeck</text></g><g><title>item_bodies_checking (35,377,096 samples, 28.60%)</title><rect x="35.0480%" y="165" width="28.5966%" height="15" fill="rgb(226,81,46)"/><text x="35.2980%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (35,374,516 samples, 28.59%)</title><rect x="35.0500%" y="149" width="28.5945%" height="15" fill="rgb(247,70,30)"/><text x="35.3000%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (35,338,546 samples, 28.57%)</title><rect x="35.0791%" y="133" width="28.5654%" height="15" fill="rgb(212,68,19)"/><text x="35.3291%" y="143.50">typeck</text></g><g><title>impl_trait_ref (202,092 samples, 0.16%)</title><rect x="63.8541%" y="85" width="0.1634%" height="15" fill="rgb(240,187,13)"/><text x="64.1041%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (178,192 samples, 0.14%)</title><rect x="63.8734%" y="69" width="0.1440%" height="15" fill="rgb(223,113,26)"/><text x="64.1234%" y="79.50"></text></g><g><title>adt_destructor (374,804 samples, 0.30%)</title><rect x="63.7379%" y="133" width="0.3030%" height="15" fill="rgb(206,192,2)"/><text x="63.9879%" y="143.50"></text></g><g><title>coherent_trait (369,884 samples, 0.30%)</title><rect x="63.7418%" y="117" width="0.2990%" height="15" fill="rgb(241,108,4)"/><text x="63.9918%" y="127.50"></text></g><g><title>specialization_graph_of (368,374 samples, 0.30%)</title><rect x="63.7431%" y="101" width="0.2978%" height="15" fill="rgb(247,173,49)"/><text x="63.9931%" y="111.50"></text></g><g><title>item_types_checking (1,240,494 samples, 1.00%)</title><rect x="63.6445%" y="165" width="1.0027%" height="15" fill="rgb(224,114,35)"/><text x="63.8945%" y="175.50"></text></g><g><title>check_mod_item_types (1,237,414 samples, 1.00%)</title><rect x="63.6470%" y="149" width="1.0002%" height="15" fill="rgb(245,159,27)"/><text x="63.8970%" y="159.50"></text></g><g><title>typeck (689,658 samples, 0.56%)</title><rect x="64.0898%" y="133" width="0.5575%" height="15" fill="rgb(245,172,44)"/><text x="64.3398%" y="143.50"></text></g><g><title>fn_sig (307,562 samples, 0.25%)</title><rect x="64.7746%" y="133" width="0.2486%" height="15" fill="rgb(236,23,11)"/><text x="65.0246%" y="143.50"></text></g><g><title>generics_of (183,383 samples, 0.15%)</title><rect x="65.0232%" y="133" width="0.1482%" height="15" fill="rgb(205,117,38)"/><text x="65.2732%" y="143.50"></text></g><g><title>predicates_of (200,434 samples, 0.16%)</title><rect x="65.1865%" y="133" width="0.1620%" height="15" fill="rgb(237,72,25)"/><text x="65.4365%" y="143.50"></text></g><g><title>predicates_defined_on (181,203 samples, 0.15%)</title><rect x="65.2020%" y="117" width="0.1465%" height="15" fill="rgb(244,70,9)"/><text x="65.4520%" y="127.50"></text></g><g><title>type_collecting (899,350 samples, 0.73%)</title><rect x="64.6505%" y="165" width="0.7270%" height="15" fill="rgb(217,125,39)"/><text x="64.9005%" y="175.50"></text></g><g><title>collect_mod_item_types (890,930 samples, 0.72%)</title><rect x="64.6573%" y="149" width="0.7202%" height="15" fill="rgb(235,36,10)"/><text x="64.9073%" y="159.50"></text></g><g><title>check_impl_item_well_formed (332,183 samples, 0.27%)</title><rect x="65.4573%" y="149" width="0.2685%" height="15" fill="rgb(251,123,47)"/><text x="65.7073%" y="159.50"></text></g><g><title>adt_sized_constraint (170,122 samples, 0.14%)</title><rect x="66.3342%" y="101" width="0.1375%" height="15" fill="rgb(221,13,13)"/><text x="66.5842%" y="111.50"></text></g><g><title>adt_sized_constraint (240,712 samples, 0.19%)</title><rect x="66.2816%" y="117" width="0.1946%" height="15" fill="rgb(238,131,9)"/><text x="66.5316%" y="127.50"></text></g><g><title>evaluate_obligation (559,257 samples, 0.45%)</title><rect x="66.1379%" y="133" width="0.4521%" height="15" fill="rgb(211,50,8)"/><text x="66.3879%" y="143.50"></text></g><g><title>param_env (181,011 samples, 0.15%)</title><rect x="66.6742%" y="133" width="0.1463%" height="15" fill="rgb(245,182,24)"/><text x="66.9242%" y="143.50"></text></g><g><title>region_scope_tree (293,974 samples, 0.24%)</title><rect x="66.8632%" y="133" width="0.2376%" height="15" fill="rgb(242,14,37)"/><text x="67.1132%" y="143.50"></text></g><g><title>analysis (82,415,164 samples, 66.62%)</title><rect x="0.5022%" y="197" width="66.6191%" height="15" fill="rgb(246,228,12)"/><text x="0.7522%" y="207.50">analysis</text></g><g><title>type_check_crate (42,989,482 samples, 34.75%)</title><rect x="32.3714%" y="181" width="34.7499%" height="15" fill="rgb(213,55,15)"/><text x="32.6214%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,154,864 samples, 1.74%)</title><rect x="65.3794%" y="165" width="1.7419%" height="15" fill="rgb(209,9,3)"/><text x="65.6294%" y="175.50"></text></g><g><title>check_item_well_formed (1,726,349 samples, 1.40%)</title><rect x="65.7258%" y="149" width="1.3955%" height="15" fill="rgb(230,59,30)"/><text x="65.9758%" y="159.50"></text></g><g><title>codegen_crate (581,767 samples, 0.47%)</title><rect x="67.1310%" y="197" width="0.4703%" height="15" fill="rgb(209,121,21)"/><text x="67.3810%" y="207.50"></text></g><g><title>metadata_load_macro (352,572 samples, 0.28%)</title><rect x="83.9999%" y="149" width="0.2850%" height="15" fill="rgb(220,109,13)"/><text x="84.2499%" y="159.50"></text></g><g><title>metadata_register_crate (3,524,990 samples, 2.85%)</title><rect x="84.2849%" y="149" width="2.8494%" height="15" fill="rgb(232,18,1)"/><text x="84.5349%" y="159.50">me..</text></g><g><title>metadata_register_crate (975,099 samples, 0.79%)</title><rect x="86.3460%" y="133" width="0.7882%" height="15" fill="rgb(215,41,42)"/><text x="86.5960%" y="143.50"></text></g><g><title>macro_expand_crate (23,800,126 samples, 19.24%)</title><rect x="67.9712%" y="181" width="19.2385%" height="15" fill="rgb(224,123,36)"/><text x="68.2212%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (23,780,276 samples, 19.22%)</title><rect x="67.9873%" y="165" width="19.2224%" height="15" fill="rgb(240,125,3)"/><text x="68.2373%" y="175.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (191,593 samples, 0.15%)</title><rect x="87.2105%" y="181" width="0.1549%" height="15" fill="rgb(205,98,50)"/><text x="87.4605%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (295,703 samples, 0.24%)</title><rect x="87.3654%" y="181" width="0.2390%" height="15" fill="rgb(205,185,37)"/><text x="87.6154%" y="191.50"></text></g><g><title>late_resolve_crate (2,042,263 samples, 1.65%)</title><rect x="87.7237%" y="165" width="1.6508%" height="15" fill="rgb(238,207,15)"/><text x="87.9737%" y="175.50"></text></g><g><title>configure_and_expand (27,041,003 samples, 21.86%)</title><rect x="67.6012%" y="197" width="21.8582%" height="15" fill="rgb(213,199,42)"/><text x="67.8512%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,294,815 samples, 1.85%)</title><rect x="87.6044%" y="181" width="1.8550%" height="15" fill="rgb(235,201,11)"/><text x="87.8544%" y="191.50">r..</text></g><g><title>drop_ast (198,592 samples, 0.16%)</title><rect x="89.4594%" y="197" width="0.1605%" height="15" fill="rgb(207,46,11)"/><text x="89.7094%" y="207.50"></text></g><g><title>early_lint_checks (361,934 samples, 0.29%)</title><rect x="89.6330%" y="197" width="0.2926%" height="15" fill="rgb(241,35,35)"/><text x="89.8830%" y="207.50"></text></g><g><title>free_global_ctxt (3,634,160 samples, 2.94%)</title><rect x="89.9255%" y="197" width="2.9376%" height="15" fill="rgb(243,32,47)"/><text x="90.1755%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (173,882 samples, 0.14%)</title><rect x="92.8632%" y="197" width="0.1406%" height="15" fill="rgb(247,202,23)"/><text x="93.1132%" y="207.50"></text></g><g><title>hir_lowering (2,196,725 samples, 1.78%)</title><rect x="93.0037%" y="197" width="1.7757%" height="15" fill="rgb(219,102,11)"/><text x="93.2537%" y="207.50">h..</text></g><g><title>parse_crate (5,041,296 samples, 4.08%)</title><rect x="94.8269%" y="197" width="4.0751%" height="15" fill="rgb(243,110,44)"/><text x="95.0769%" y="207.50">pars..</text></g><g><title>prepare_outputs (185,032 samples, 0.15%)</title><rect x="98.9100%" y="197" width="0.1496%" height="15" fill="rgb(222,74,54)"/><text x="99.1600%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (774,148 samples, 0.63%)</title><rect x="99.0596%" y="197" width="0.6258%" height="15" fill="rgb(216,99,12)"/><text x="99.3096%" y="207.50"></text></g><g><title>all (123,710,956 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (123,710,956 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (298,763 samples, 0.24%)</title><rect x="99.7585%" y="197" width="0.2415%" height="15" fill="rgb(213,25,53)"/><text x="100.0085%" y="207.50"></text></g></svg></svg>