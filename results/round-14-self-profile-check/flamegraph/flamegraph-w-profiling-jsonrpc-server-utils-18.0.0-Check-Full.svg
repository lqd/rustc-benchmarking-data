<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (663,218 samples, 0.27%)</title><rect x="13.7350%" y="165" width="0.2703%" height="15" fill="rgb(227,0,7)"/><text x="13.9850%" y="175.50"></text></g><g><title>item_attrs (538,876 samples, 0.22%)</title><rect x="14.5373%" y="133" width="0.2196%" height="15" fill="rgb(217,0,24)"/><text x="14.7873%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (519,246 samples, 0.21%)</title><rect x="14.5453%" y="117" width="0.2116%" height="15" fill="rgb(221,193,54)"/><text x="14.7953%" y="127.50"></text></g><g><title>codegen_fn_attrs (776,488 samples, 0.32%)</title><rect x="14.4569%" y="149" width="0.3165%" height="15" fill="rgb(248,212,6)"/><text x="14.7069%" y="159.50"></text></g><g><title>adt_drop_tys (724,958 samples, 0.30%)</title><rect x="17.5326%" y="117" width="0.2955%" height="15" fill="rgb(208,68,35)"/><text x="17.7826%" y="127.50"></text></g><g><title>is_copy_raw (1,625,886 samples, 0.66%)</title><rect x="17.8281%" y="117" width="0.6627%" height="15" fill="rgb(232,128,0)"/><text x="18.0781%" y="127.50"></text></g><g><title>evaluate_obligation (1,326,753 samples, 0.54%)</title><rect x="17.9500%" y="101" width="0.5408%" height="15" fill="rgb(207,160,47)"/><text x="18.2000%" y="111.50"></text></g><g><title>needs_drop_raw (2,650,267 samples, 1.08%)</title><rect x="17.4284%" y="133" width="1.0803%" height="15" fill="rgb(228,23,34)"/><text x="17.6784%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (403,964 samples, 0.16%)</title><rect x="18.6625%" y="117" width="0.1647%" height="15" fill="rgb(218,30,26)"/><text x="18.9125%" y="127.50"></text></g><g><title>impl_parent (297,215 samples, 0.12%)</title><rect x="19.0842%" y="101" width="0.1211%" height="15" fill="rgb(220,122,19)"/><text x="19.3342%" y="111.50"></text></g><g><title>specialization_graph_of (2,045,682 samples, 0.83%)</title><rect x="18.8871%" y="117" width="0.8338%" height="15" fill="rgb(250,228,42)"/><text x="19.1371%" y="127.50"></text></g><g><title>impl_trait_ref (1,264,882 samples, 0.52%)</title><rect x="19.2054%" y="101" width="0.5156%" height="15" fill="rgb(240,193,28)"/><text x="19.4554%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,166,931 samples, 0.48%)</title><rect x="19.2453%" y="85" width="0.4756%" height="15" fill="rgb(216,20,37)"/><text x="19.4953%" y="95.50"></text></g><g><title>resolve_instance (3,115,733 samples, 1.27%)</title><rect x="18.5087%" y="133" width="1.2700%" height="15" fill="rgb(206,188,39)"/><text x="18.7587%" y="143.50"></text></g><g><title>thir_body (3,189,688 samples, 1.30%)</title><rect x="19.8071%" y="133" width="1.3001%" height="15" fill="rgb(217,207,13)"/><text x="20.0571%" y="143.50"></text></g><g><title>mir_const (19,903,477 samples, 8.11%)</title><rect x="13.0133%" y="181" width="8.1127%" height="15" fill="rgb(231,73,38)"/><text x="13.2633%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (17,469,689 samples, 7.12%)</title><rect x="14.0053%" y="165" width="7.1207%" height="15" fill="rgb(225,20,46)"/><text x="14.2553%" y="175.50">unsafety_c..</text></g><g><title>mir_built (15,585,211 samples, 6.35%)</title><rect x="14.7734%" y="149" width="6.3526%" height="15" fill="rgb(210,31,41)"/><text x="15.0234%" y="159.50">mir_built</text></g><g><title>is_freeze_raw (279,713 samples, 0.11%)</title><rect x="21.2455%" y="165" width="0.1140%" height="15" fill="rgb(221,200,47)"/><text x="21.4955%" y="175.50"></text></g><g><title>evaluate_obligation (276,553 samples, 0.11%)</title><rect x="21.2468%" y="149" width="0.1127%" height="15" fill="rgb(226,26,5)"/><text x="21.4968%" y="159.50"></text></g><g><title>mir_const_qualif (694,311 samples, 0.28%)</title><rect x="21.1260%" y="181" width="0.2830%" height="15" fill="rgb(249,33,26)"/><text x="21.3760%" y="191.50"></text></g><g><title>mir_promoted (22,500,280 samples, 9.17%)</title><rect x="12.2391%" y="197" width="9.1712%" height="15" fill="rgb(235,183,28)"/><text x="12.4891%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (867,695 samples, 0.35%)</title><rect x="21.4103%" y="197" width="0.3537%" height="15" fill="rgb(221,5,38)"/><text x="21.6603%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (784,188 samples, 0.32%)</title><rect x="21.7640%" y="197" width="0.3196%" height="15" fill="rgb(247,18,42)"/><text x="22.0140%" y="207.50"></text></g><g><title>normalize_projection_ty (456,513 samples, 0.19%)</title><rect x="21.8975%" y="181" width="0.1861%" height="15" fill="rgb(241,131,45)"/><text x="22.1475%" y="191.50"></text></g><g><title>type_op_normalize_predicate (691,558 samples, 0.28%)</title><rect x="22.0836%" y="197" width="0.2819%" height="15" fill="rgb(249,31,29)"/><text x="22.3336%" y="207.50"></text></g><g><title>normalize_projection_ty (337,072 samples, 0.14%)</title><rect x="22.2281%" y="181" width="0.1374%" height="15" fill="rgb(225,111,53)"/><text x="22.4781%" y="191.50"></text></g><g><title>type_op_prove_predicate (4,970,633 samples, 2.03%)</title><rect x="22.4041%" y="197" width="2.0260%" height="15" fill="rgb(238,160,17)"/><text x="22.6541%" y="207.50">t..</text></g><g><title>MIR_borrow_checking (58,721,562 samples, 23.94%)</title><rect x="0.5017%" y="229" width="23.9350%" height="15" fill="rgb(214,148,48)"/><text x="0.7517%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (58,476,852 samples, 23.84%)</title><rect x="0.6014%" y="213" width="23.8353%" height="15" fill="rgb(232,36,49)"/><text x="0.8514%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (325,875 samples, 0.13%)</title><rect x="24.5202%" y="229" width="0.1328%" height="15" fill="rgb(209,103,24)"/><text x="24.7702%" y="239.50"></text></g><g><title>should_inherit_track_caller (317,494 samples, 0.13%)</title><rect x="24.9175%" y="181" width="0.1294%" height="15" fill="rgb(229,88,8)"/><text x="25.1675%" y="191.50"></text></g><g><title>codegen_fn_attrs (533,338 samples, 0.22%)</title><rect x="24.8374%" y="197" width="0.2174%" height="15" fill="rgb(213,181,19)"/><text x="25.0874%" y="207.50"></text></g><g><title>check_mod_attrs (952,410 samples, 0.39%)</title><rect x="24.6667%" y="213" width="0.3882%" height="15" fill="rgb(254,191,54)"/><text x="24.9167%" y="223.50"></text></g><g><title>lookup_deprecation_entry (281,604 samples, 0.11%)</title><rect x="25.3378%" y="197" width="0.1148%" height="15" fill="rgb(241,83,37)"/><text x="25.5878%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (742,558 samples, 0.30%)</title><rect x="25.2038%" y="213" width="0.3027%" height="15" fill="rgb(233,36,39)"/><text x="25.4538%" y="223.50"></text></g><g><title>misc_checking_1 (2,174,034 samples, 0.89%)</title><rect x="24.6532%" y="229" width="0.8861%" height="15" fill="rgb(226,3,54)"/><text x="24.9032%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,044,402 samples, 0.43%)</title><rect x="25.5416%" y="213" width="0.4257%" height="15" fill="rgb(245,192,40)"/><text x="25.7916%" y="223.50"></text></g><g><title>check_mod_liveness (843,360 samples, 0.34%)</title><rect x="25.6235%" y="197" width="0.3438%" height="15" fill="rgb(238,167,29)"/><text x="25.8735%" y="207.50"></text></g><g><title>type_uninhabited_from (353,975 samples, 0.14%)</title><rect x="25.8230%" y="181" width="0.1443%" height="15" fill="rgb(232,182,51)"/><text x="26.0730%" y="191.50"></text></g><g><title>type_uninhabited_from (290,963 samples, 0.12%)</title><rect x="25.8487%" y="165" width="0.1186%" height="15" fill="rgb(231,60,39)"/><text x="26.0987%" y="175.50"></text></g><g><title>type_uninhabited_from (255,893 samples, 0.10%)</title><rect x="25.8630%" y="149" width="0.1043%" height="15" fill="rgb(208,69,12)"/><text x="26.1130%" y="159.50"></text></g><g><title>misc_checking_2 (2,523,778 samples, 1.03%)</title><rect x="25.5394%" y="229" width="1.0287%" height="15" fill="rgb(235,93,37)"/><text x="25.7894%" y="239.50"></text></g><g><title>match_checking (1,474,036 samples, 0.60%)</title><rect x="25.9673%" y="213" width="0.6008%" height="15" fill="rgb(213,116,39)"/><text x="26.2173%" y="223.50"></text></g><g><title>check_match (1,410,885 samples, 0.58%)</title><rect x="25.9930%" y="197" width="0.5751%" height="15" fill="rgb(222,207,29)"/><text x="26.2430%" y="207.50"></text></g><g><title>check_private_in_public (405,635 samples, 0.17%)</title><rect x="26.5728%" y="213" width="0.1653%" height="15" fill="rgb(206,96,30)"/><text x="26.8228%" y="223.50"></text></g><g><title>death_checking (1,270,934 samples, 0.52%)</title><rect x="26.7382%" y="213" width="0.5180%" height="15" fill="rgb(218,138,4)"/><text x="26.9882%" y="223.50"></text></g><g><title>eval_to_const_value_raw (309,303 samples, 0.13%)</title><rect x="28.0981%" y="69" width="0.1261%" height="15" fill="rgb(250,191,14)"/><text x="28.3481%" y="79.50"></text></g><g><title>eval_to_const_value_raw (308,513 samples, 0.13%)</title><rect x="28.0984%" y="53" width="0.1258%" height="15" fill="rgb(239,60,40)"/><text x="28.3484%" y="63.50"></text></g><g><title>eval_to_allocation_raw (305,633 samples, 0.12%)</title><rect x="28.0996%" y="37" width="0.1246%" height="15" fill="rgb(206,27,48)"/><text x="28.3496%" y="47.50"></text></g><g><title>eval_to_const_value_raw (475,205 samples, 0.19%)</title><rect x="28.0322%" y="133" width="0.1937%" height="15" fill="rgb(225,35,8)"/><text x="28.2822%" y="143.50"></text></g><g><title>eval_to_const_value_raw (473,695 samples, 0.19%)</title><rect x="28.0329%" y="117" width="0.1931%" height="15" fill="rgb(250,213,24)"/><text x="28.2829%" y="127.50"></text></g><g><title>eval_to_allocation_raw (472,195 samples, 0.19%)</title><rect x="28.0335%" y="101" width="0.1925%" height="15" fill="rgb(247,123,22)"/><text x="28.2835%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (318,014 samples, 0.13%)</title><rect x="28.0963%" y="85" width="0.1296%" height="15" fill="rgb(231,138,38)"/><text x="28.3463%" y="95.50"></text></g><g><title>eval_to_allocation_raw (678,698 samples, 0.28%)</title><rect x="27.9499%" y="181" width="0.2766%" height="15" fill="rgb(231,145,46)"/><text x="28.1999%" y="191.50"></text></g><g><title>eval_to_allocation_raw (673,688 samples, 0.27%)</title><rect x="27.9520%" y="165" width="0.2746%" height="15" fill="rgb(251,118,11)"/><text x="28.2020%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (488,645 samples, 0.20%)</title><rect x="28.0274%" y="149" width="0.1992%" height="15" fill="rgb(217,147,25)"/><text x="28.2774%" y="159.50"></text></g><g><title>param_env (352,163 samples, 0.14%)</title><rect x="28.2574%" y="181" width="0.1435%" height="15" fill="rgb(247,81,37)"/><text x="28.5074%" y="191.50"></text></g><g><title>crate_lints (4,754,763 samples, 1.94%)</title><rect x="27.2571%" y="197" width="1.9380%" height="15" fill="rgb(209,12,38)"/><text x="27.5071%" y="207.50">c..</text></g><g><title>type_of (1,879,618 samples, 0.77%)</title><rect x="28.4290%" y="181" width="0.7661%" height="15" fill="rgb(227,1,9)"/><text x="28.6790%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,464,733 samples, 0.60%)</title><rect x="28.5981%" y="165" width="0.5970%" height="15" fill="rgb(248,47,43)"/><text x="28.8481%" y="175.50"></text></g><g><title>layout_of (298,272 samples, 0.12%)</title><rect x="29.7714%" y="37" width="0.1216%" height="15" fill="rgb(221,10,30)"/><text x="30.0214%" y="47.50"></text></g><g><title>layout_of (408,245 samples, 0.17%)</title><rect x="29.7565%" y="53" width="0.1664%" height="15" fill="rgb(210,229,1)"/><text x="30.0065%" y="63.50"></text></g><g><title>layout_of (551,875 samples, 0.22%)</title><rect x="29.7095%" y="69" width="0.2249%" height="15" fill="rgb(222,148,37)"/><text x="29.9595%" y="79.50"></text></g><g><title>layout_of (617,826 samples, 0.25%)</title><rect x="29.6883%" y="85" width="0.2518%" height="15" fill="rgb(234,67,33)"/><text x="29.9383%" y="95.50"></text></g><g><title>layout_of (717,196 samples, 0.29%)</title><rect x="29.6574%" y="101" width="0.2923%" height="15" fill="rgb(247,98,35)"/><text x="29.9074%" y="111.50"></text></g><g><title>layout_of (804,068 samples, 0.33%)</title><rect x="29.6356%" y="117" width="0.3277%" height="15" fill="rgb(247,138,52)"/><text x="29.8856%" y="127.50"></text></g><g><title>layout_of (882,338 samples, 0.36%)</title><rect x="29.6063%" y="149" width="0.3596%" height="15" fill="rgb(213,79,30)"/><text x="29.8563%" y="159.50"></text></g><g><title>layout_of (860,358 samples, 0.35%)</title><rect x="29.6153%" y="133" width="0.3507%" height="15" fill="rgb(246,177,23)"/><text x="29.8653%" y="143.50"></text></g><g><title>layout_of (925,788 samples, 0.38%)</title><rect x="29.5888%" y="165" width="0.3774%" height="15" fill="rgb(230,62,27)"/><text x="29.8388%" y="175.50"></text></g><g><title>lint_checking (6,649,534 samples, 2.71%)</title><rect x="27.2562%" y="213" width="2.7104%" height="15" fill="rgb(216,154,8)"/><text x="27.5062%" y="223.50">li..</text></g><g><title>module_lints (1,892,671 samples, 0.77%)</title><rect x="29.1951%" y="197" width="0.7715%" height="15" fill="rgb(244,35,45)"/><text x="29.4451%" y="207.50"></text></g><g><title>lint_mod (1,880,521 samples, 0.77%)</title><rect x="29.2001%" y="181" width="0.7665%" height="15" fill="rgb(251,115,12)"/><text x="29.4501%" y="191.50"></text></g><g><title>privacy_access_levels (557,556 samples, 0.23%)</title><rect x="29.9666%" y="213" width="0.2273%" height="15" fill="rgb(240,54,50)"/><text x="30.2166%" y="223.50"></text></g><g><title>privacy_checking_modules (1,775,310 samples, 0.72%)</title><rect x="30.1938%" y="213" width="0.7236%" height="15" fill="rgb(233,84,52)"/><text x="30.4438%" y="223.50"></text></g><g><title>check_mod_privacy (1,768,410 samples, 0.72%)</title><rect x="30.1966%" y="197" width="0.7208%" height="15" fill="rgb(207,117,47)"/><text x="30.4466%" y="207.50"></text></g><g><title>misc_checking_3 (10,688,499 samples, 4.36%)</title><rect x="26.5681%" y="229" width="4.3567%" height="15" fill="rgb(249,43,39)"/><text x="26.8181%" y="239.50">misc_..</text></g><g><title>adt_def (348,444 samples, 0.14%)</title><rect x="33.7378%" y="133" width="0.1420%" height="15" fill="rgb(209,38,44)"/><text x="33.9878%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (348,054 samples, 0.14%)</title><rect x="33.7380%" y="117" width="0.1419%" height="15" fill="rgb(236,212,23)"/><text x="33.9880%" y="127.50"></text></g><g><title>item_attrs (342,854 samples, 0.14%)</title><rect x="33.7401%" y="101" width="0.1397%" height="15" fill="rgb(242,79,21)"/><text x="33.9901%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (342,414 samples, 0.14%)</title><rect x="33.7403%" y="85" width="0.1396%" height="15" fill="rgb(211,96,35)"/><text x="33.9903%" y="95.50"></text></g><g><title>adt_sized_constraint (386,914 samples, 0.16%)</title><rect x="33.7370%" y="149" width="0.1577%" height="15" fill="rgb(253,215,40)"/><text x="33.9870%" y="159.50"></text></g><g><title>adt_sized_constraint (416,784 samples, 0.17%)</title><rect x="33.7250%" y="165" width="0.1699%" height="15" fill="rgb(211,81,21)"/><text x="33.9750%" y="175.50"></text></g><g><title>impl_parent (4,081,701 samples, 1.66%)</title><rect x="33.8981%" y="165" width="1.6637%" height="15" fill="rgb(208,190,38)"/><text x="34.1481%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,314,378 samples, 0.94%)</title><rect x="34.6184%" y="149" width="0.9433%" height="15" fill="rgb(235,213,38)"/><text x="34.8684%" y="159.50"></text></g><g><title>impl_trait_ref (8,213,057 samples, 3.35%)</title><rect x="35.5637%" y="165" width="3.3477%" height="15" fill="rgb(237,122,38)"/><text x="35.8137%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,517,850 samples, 2.66%)</title><rect x="36.2547%" y="149" width="2.6567%" height="15" fill="rgb(244,218,35)"/><text x="36.5047%" y="159.50">me..</text></g><g><title>trait_impls_of (1,566,517 samples, 0.64%)</title><rect x="38.9540%" y="165" width="0.6385%" height="15" fill="rgb(240,68,47)"/><text x="39.2040%" y="175.50"></text></g><g><title>implementations_of_trait (536,266 samples, 0.22%)</title><rect x="39.3739%" y="149" width="0.2186%" height="15" fill="rgb(210,16,53)"/><text x="39.6239%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (362,673 samples, 0.15%)</title><rect x="39.4447%" y="133" width="0.1478%" height="15" fill="rgb(235,124,12)"/><text x="39.6947%" y="143.50"></text></g><g><title>coherent_trait (25,872,167 samples, 10.55%)</title><rect x="30.9831%" y="197" width="10.5455%" height="15" fill="rgb(224,169,11)"/><text x="31.2331%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (25,834,637 samples, 10.53%)</title><rect x="30.9984%" y="181" width="10.5302%" height="15" fill="rgb(250,166,2)"/><text x="31.2484%" y="191.50">specialization_..</text></g><g><title>visible_parent_map (4,748,343 samples, 1.94%)</title><rect x="39.5932%" y="165" width="1.9354%" height="15" fill="rgb(242,216,29)"/><text x="39.8432%" y="175.50">v..</text></g><g><title>module_children (4,072,244 samples, 1.66%)</title><rect x="39.8688%" y="149" width="1.6599%" height="15" fill="rgb(230,116,27)"/><text x="40.1188%" y="159.50"></text></g><g><title>metadata_decode_entry_module_children (3,988,504 samples, 1.63%)</title><rect x="39.9029%" y="133" width="1.6257%" height="15" fill="rgb(228,99,48)"/><text x="40.1529%" y="143.50"></text></g><g><title>coherence_checking (26,057,419 samples, 10.62%)</title><rect x="30.9716%" y="213" width="10.6210%" height="15" fill="rgb(253,11,6)"/><text x="31.2216%" y="223.50">coherence_checki..</text></g><g><title>associated_item (338,472 samples, 0.14%)</title><rect x="55.8877%" y="149" width="0.1380%" height="15" fill="rgb(247,143,39)"/><text x="56.1377%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (272,601 samples, 0.11%)</title><rect x="55.9145%" y="133" width="0.1111%" height="15" fill="rgb(236,97,10)"/><text x="56.1645%" y="143.50"></text></g><g><title>associated_items (525,025 samples, 0.21%)</title><rect x="55.8247%" y="165" width="0.2140%" height="15" fill="rgb(233,208,19)"/><text x="56.0747%" y="175.50"></text></g><g><title>adt_def (829,050 samples, 0.34%)</title><rect x="56.7070%" y="133" width="0.3379%" height="15" fill="rgb(216,164,2)"/><text x="56.9570%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (811,110 samples, 0.33%)</title><rect x="56.7143%" y="117" width="0.3306%" height="15" fill="rgb(220,129,5)"/><text x="56.9643%" y="127.50"></text></g><g><title>item_attrs (317,144 samples, 0.13%)</title><rect x="56.9156%" y="101" width="0.1293%" height="15" fill="rgb(242,17,10)"/><text x="57.1656%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (298,963 samples, 0.12%)</title><rect x="56.9230%" y="85" width="0.1219%" height="15" fill="rgb(242,107,0)"/><text x="57.1730%" y="95.50"></text></g><g><title>adt_def (412,746 samples, 0.17%)</title><rect x="57.1768%" y="117" width="0.1682%" height="15" fill="rgb(251,28,31)"/><text x="57.4268%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (402,316 samples, 0.16%)</title><rect x="57.1810%" y="101" width="0.1640%" height="15" fill="rgb(233,223,10)"/><text x="57.4310%" y="111.50"></text></g><g><title>adt_dtorck_constraint (354,645 samples, 0.14%)</title><rect x="57.7390%" y="37" width="0.1446%" height="15" fill="rgb(215,21,27)"/><text x="57.9890%" y="47.50"></text></g><g><title>adt_dtorck_constraint (479,176 samples, 0.20%)</title><rect x="57.6970%" y="53" width="0.1953%" height="15" fill="rgb(232,23,21)"/><text x="57.9470%" y="63.50"></text></g><g><title>adt_dtorck_constraint (605,427 samples, 0.25%)</title><rect x="57.6538%" y="69" width="0.2468%" height="15" fill="rgb(244,5,23)"/><text x="57.9038%" y="79.50"></text></g><g><title>adt_dtorck_constraint (845,029 samples, 0.34%)</title><rect x="57.5639%" y="85" width="0.3444%" height="15" fill="rgb(226,81,46)"/><text x="57.8139%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,087,760 samples, 0.44%)</title><rect x="57.4868%" y="101" width="0.4434%" height="15" fill="rgb(247,70,30)"/><text x="57.7368%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,414,793 samples, 0.58%)</title><rect x="57.3771%" y="117" width="0.5767%" height="15" fill="rgb(212,68,19)"/><text x="57.6271%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,216,024 samples, 0.90%)</title><rect x="57.1063%" y="133" width="0.9033%" height="15" fill="rgb(240,187,13)"/><text x="57.3563%" y="143.50"></text></g><g><title>adt_dtorck_constraint (4,095,128 samples, 1.67%)</title><rect x="56.4796%" y="149" width="1.6692%" height="15" fill="rgb(223,113,26)"/><text x="56.7296%" y="159.50"></text></g><g><title>type_of (271,316 samples, 0.11%)</title><rect x="58.0382%" y="133" width="0.1106%" height="15" fill="rgb(206,192,2)"/><text x="58.2882%" y="143.50"></text></g><g><title>normalize_projection_ty (810,627 samples, 0.33%)</title><rect x="58.2108%" y="149" width="0.3304%" height="15" fill="rgb(241,108,4)"/><text x="58.4608%" y="159.50"></text></g><g><title>dropck_outlives (6,041,877 samples, 2.46%)</title><rect x="56.0811%" y="165" width="2.4627%" height="15" fill="rgb(247,173,49)"/><text x="56.3311%" y="175.50">dr..</text></g><g><title>predicates_of (271,401 samples, 0.11%)</title><rect x="59.3999%" y="149" width="0.1106%" height="15" fill="rgb(224,114,35)"/><text x="59.6499%" y="159.50"></text></g><g><title>evaluate_obligation (2,578,691 samples, 1.05%)</title><rect x="58.5437%" y="165" width="1.0511%" height="15" fill="rgb(245,159,27)"/><text x="58.7937%" y="175.50"></text></g><g><title>item_attrs (418,395 samples, 0.17%)</title><rect x="59.7759%" y="165" width="0.1705%" height="15" fill="rgb(245,172,44)"/><text x="60.0259%" y="175.50"></text></g><g><title>method_autoderef_steps (512,076 samples, 0.21%)</title><rect x="59.9794%" y="165" width="0.2087%" height="15" fill="rgb(236,23,11)"/><text x="60.2294%" y="175.50"></text></g><g><title>predicates_of (353,682 samples, 0.14%)</title><rect x="60.2748%" y="165" width="0.1442%" height="15" fill="rgb(205,117,38)"/><text x="60.5248%" y="175.50"></text></g><g><title>predicates_defined_on (252,030 samples, 0.10%)</title><rect x="60.3163%" y="149" width="0.1027%" height="15" fill="rgb(237,72,25)"/><text x="60.5663%" y="159.50"></text></g><g><title>associated_item (359,615 samples, 0.15%)</title><rect x="67.1611%" y="133" width="0.1466%" height="15" fill="rgb(244,70,9)"/><text x="67.4111%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (287,864 samples, 0.12%)</title><rect x="67.1904%" y="117" width="0.1173%" height="15" fill="rgb(217,125,39)"/><text x="67.4404%" y="127.50"></text></g><g><title>associated_items (533,835 samples, 0.22%)</title><rect x="67.1005%" y="149" width="0.2176%" height="15" fill="rgb(235,36,10)"/><text x="67.3505%" y="159.50"></text></g><g><title>dropck_outlives (1,006,739 samples, 0.41%)</title><rect x="67.3535%" y="149" width="0.4103%" height="15" fill="rgb(251,123,47)"/><text x="67.6035%" y="159.50"></text></g><g><title>adt_dtorck_constraint (404,253 samples, 0.16%)</title><rect x="67.5991%" y="133" width="0.1648%" height="15" fill="rgb(221,13,13)"/><text x="67.8491%" y="143.50"></text></g><g><title>adt_sized_constraint (367,425 samples, 0.15%)</title><rect x="69.3629%" y="133" width="0.1498%" height="15" fill="rgb(238,131,9)"/><text x="69.6129%" y="143.50"></text></g><g><title>generics_of (1,047,164 samples, 0.43%)</title><rect x="69.5127%" y="133" width="0.4268%" height="15" fill="rgb(211,50,8)"/><text x="69.7627%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (831,312 samples, 0.34%)</title><rect x="69.6007%" y="117" width="0.3388%" height="15" fill="rgb(245,182,24)"/><text x="69.8507%" y="127.50"></text></g><g><title>impl_trait_ref (370,144 samples, 0.15%)</title><rect x="69.9727%" y="133" width="0.1509%" height="15" fill="rgb(242,14,37)"/><text x="70.2227%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (312,284 samples, 0.13%)</title><rect x="69.9963%" y="117" width="0.1273%" height="15" fill="rgb(246,228,12)"/><text x="70.2463%" y="127.50"></text></g><g><title>predicates_of (404,025 samples, 0.16%)</title><rect x="70.1351%" y="133" width="0.1647%" height="15" fill="rgb(213,55,15)"/><text x="70.3851%" y="143.50"></text></g><g><title>specializes (614,157 samples, 0.25%)</title><rect x="70.2998%" y="133" width="0.2503%" height="15" fill="rgb(209,9,3)"/><text x="70.5498%" y="143.50"></text></g><g><title>param_env (357,144 samples, 0.15%)</title><rect x="70.4045%" y="117" width="0.1456%" height="15" fill="rgb(230,59,30)"/><text x="70.6545%" y="127.50"></text></g><g><title>trait_impls_of (986,299 samples, 0.40%)</title><rect x="70.5585%" y="133" width="0.4020%" height="15" fill="rgb(209,121,21)"/><text x="70.8085%" y="143.50"></text></g><g><title>implementations_of_trait (446,843 samples, 0.18%)</title><rect x="70.7784%" y="117" width="0.1821%" height="15" fill="rgb(220,109,13)"/><text x="71.0284%" y="127.50"></text></g><g><title>evaluate_obligation (7,854,455 samples, 3.20%)</title><rect x="67.7639%" y="149" width="3.2015%" height="15" fill="rgb(232,18,1)"/><text x="68.0139%" y="159.50">eva..</text></g><g><title>is_copy_raw (371,364 samples, 0.15%)</title><rect x="71.2452%" y="149" width="0.1514%" height="15" fill="rgb(215,41,42)"/><text x="71.4952%" y="159.50"></text></g><g><title>evaluate_obligation (307,774 samples, 0.13%)</title><rect x="71.2712%" y="133" width="0.1254%" height="15" fill="rgb(224,123,36)"/><text x="71.5212%" y="143.50"></text></g><g><title>evaluate_obligation (276,353 samples, 0.11%)</title><rect x="71.6599%" y="133" width="0.1126%" height="15" fill="rgb(240,125,3)"/><text x="71.9099%" y="143.50"></text></g><g><title>method_autoderef_steps (634,055 samples, 0.26%)</title><rect x="71.5210%" y="149" width="0.2584%" height="15" fill="rgb(205,98,50)"/><text x="71.7710%" y="159.50"></text></g><g><title>predicates_of (584,656 samples, 0.24%)</title><rect x="71.8035%" y="149" width="0.2383%" height="15" fill="rgb(205,185,37)"/><text x="72.0535%" y="159.50"></text></g><g><title>predicates_defined_on (401,725 samples, 0.16%)</title><rect x="71.8781%" y="133" width="0.1637%" height="15" fill="rgb(238,207,15)"/><text x="72.1281%" y="143.50"></text></g><g><title>typeck (28,620,157 samples, 11.67%)</title><rect x="60.5035%" y="165" width="11.6656%" height="15" fill="rgb(213,199,42)"/><text x="60.7535%" y="175.50">typeck</text></g><g><title>item_bodies_checking (75,033,804 samples, 30.58%)</title><rect x="41.6153%" y="213" width="30.5839%" height="15" fill="rgb(235,201,11)"/><text x="41.8653%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (75,030,094 samples, 30.58%)</title><rect x="41.6168%" y="197" width="30.5824%" height="15" fill="rgb(207,46,11)"/><text x="41.8668%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (74,870,279 samples, 30.52%)</title><rect x="41.6819%" y="181" width="30.5173%" height="15" fill="rgb(241,35,35)"/><text x="41.9319%" y="191.50">typeck</text></g><g><title>item_types_checking (3,267,546 samples, 1.33%)</title><rect x="72.1992%" y="213" width="1.3319%" height="15" fill="rgb(243,32,47)"/><text x="72.4492%" y="223.50"></text></g><g><title>check_mod_item_types (3,257,076 samples, 1.33%)</title><rect x="72.2034%" y="197" width="1.3276%" height="15" fill="rgb(247,202,23)"/><text x="72.4534%" y="207.50"></text></g><g><title>typeck (622,006 samples, 0.25%)</title><rect x="73.2775%" y="181" width="0.2535%" height="15" fill="rgb(219,102,11)"/><text x="73.5275%" y="191.50"></text></g><g><title>fn_sig (550,279 samples, 0.22%)</title><rect x="73.7552%" y="181" width="0.2243%" height="15" fill="rgb(243,110,44)"/><text x="74.0052%" y="191.50"></text></g><g><title>named_region_map (588,194 samples, 0.24%)</title><rect x="74.0659%" y="165" width="0.2397%" height="15" fill="rgb(222,74,54)"/><text x="74.3159%" y="175.50"></text></g><g><title>resolve_lifetimes (543,744 samples, 0.22%)</title><rect x="74.0840%" y="149" width="0.2216%" height="15" fill="rgb(216,99,12)"/><text x="74.3340%" y="159.50"></text></g><g><title>generics_of (828,655 samples, 0.34%)</title><rect x="73.9795%" y="181" width="0.3378%" height="15" fill="rgb(226,22,26)"/><text x="74.2295%" y="191.50"></text></g><g><title>lint_levels (270,773 samples, 0.11%)</title><rect x="74.7077%" y="101" width="0.1104%" height="15" fill="rgb(217,163,10)"/><text x="74.9577%" y="111.50"></text></g><g><title>late_bound_vars_map (461,374 samples, 0.19%)</title><rect x="74.6303%" y="133" width="0.1881%" height="15" fill="rgb(213,25,53)"/><text x="74.8803%" y="143.50"></text></g><g><title>resolve_lifetimes (447,264 samples, 0.18%)</title><rect x="74.6360%" y="117" width="0.1823%" height="15" fill="rgb(252,105,26)"/><text x="74.8860%" y="127.50"></text></g><g><title>explicit_predicates_of (874,842 samples, 0.36%)</title><rect x="74.4786%" y="149" width="0.3566%" height="15" fill="rgb(220,39,43)"/><text x="74.7286%" y="159.50"></text></g><g><title>predicates_of (1,522,199 samples, 0.62%)</title><rect x="74.3624%" y="181" width="0.6205%" height="15" fill="rgb(229,68,48)"/><text x="74.6124%" y="191.50"></text></g><g><title>predicates_defined_on (1,419,528 samples, 0.58%)</title><rect x="74.4043%" y="165" width="0.5786%" height="15" fill="rgb(252,8,32)"/><text x="74.6543%" y="175.50"></text></g><g><title>inferred_outlives_of (362,283 samples, 0.15%)</title><rect x="74.8352%" y="149" width="0.1477%" height="15" fill="rgb(223,20,43)"/><text x="75.0852%" y="159.50"></text></g><g><title>inferred_outlives_crate (322,683 samples, 0.13%)</title><rect x="74.8514%" y="133" width="0.1315%" height="15" fill="rgb(229,81,49)"/><text x="75.1014%" y="143.50"></text></g><g><title>type_collecting (3,775,533 samples, 1.54%)</title><rect x="73.5323%" y="213" width="1.5389%" height="15" fill="rgb(236,28,36)"/><text x="73.7823%" y="223.50"></text></g><g><title>collect_mod_item_types (3,753,683 samples, 1.53%)</title><rect x="73.5412%" y="197" width="1.5300%" height="15" fill="rgb(249,185,26)"/><text x="73.7912%" y="207.50"></text></g><g><title>evaluate_obligation (917,761 samples, 0.37%)</title><rect x="76.4329%" y="181" width="0.3741%" height="15" fill="rgb(249,174,33)"/><text x="76.6829%" y="191.50"></text></g><g><title>implied_outlives_bounds (321,855 samples, 0.13%)</title><rect x="76.8186%" y="181" width="0.1312%" height="15" fill="rgb(233,201,37)"/><text x="77.0686%" y="191.50"></text></g><g><title>param_env (457,087 samples, 0.19%)</title><rect x="76.9498%" y="181" width="0.1863%" height="15" fill="rgb(221,78,26)"/><text x="77.1998%" y="191.50"></text></g><g><title>region_scope_tree (801,712 samples, 0.33%)</title><rect x="77.1700%" y="181" width="0.3268%" height="15" fill="rgb(250,127,30)"/><text x="77.4200%" y="191.50"></text></g><g><title>check_impl_item_well_formed (5,615,243 samples, 2.29%)</title><rect x="75.2310%" y="197" width="2.2888%" height="15" fill="rgb(230,49,44)"/><text x="75.4810%" y="207.50">c..</text></g><g><title>adt_def (799,631 samples, 0.33%)</title><rect x="78.9839%" y="149" width="0.3259%" height="15" fill="rgb(229,67,23)"/><text x="79.2339%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (796,431 samples, 0.32%)</title><rect x="78.9852%" y="133" width="0.3246%" height="15" fill="rgb(249,83,47)"/><text x="79.2352%" y="143.50"></text></g><g><title>item_attrs (763,310 samples, 0.31%)</title><rect x="78.9987%" y="117" width="0.3111%" height="15" fill="rgb(215,43,3)"/><text x="79.2487%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (760,250 samples, 0.31%)</title><rect x="79.0000%" y="101" width="0.3099%" height="15" fill="rgb(238,154,13)"/><text x="79.2500%" y="111.50"></text></g><g><title>adt_sized_constraint (294,123 samples, 0.12%)</title><rect x="79.3099%" y="149" width="0.1199%" height="15" fill="rgb(219,56,2)"/><text x="79.5599%" y="159.50"></text></g><g><title>adt_sized_constraint (1,124,434 samples, 0.46%)</title><rect x="78.9770%" y="165" width="0.4583%" height="15" fill="rgb(233,0,4)"/><text x="79.2270%" y="175.50"></text></g><g><title>evaluate_obligation (1,934,941 samples, 0.79%)</title><rect x="78.6740%" y="181" width="0.7887%" height="15" fill="rgb(235,30,7)"/><text x="78.9240%" y="191.50"></text></g><g><title>param_env (548,822 samples, 0.22%)</title><rect x="79.5565%" y="181" width="0.2237%" height="15" fill="rgb(250,79,13)"/><text x="79.8065%" y="191.50"></text></g><g><title>trait_impls_of (274,043 samples, 0.11%)</title><rect x="79.8962%" y="181" width="0.1117%" height="15" fill="rgb(211,146,34)"/><text x="80.1462%" y="191.50"></text></g><g><title>check_item_well_formed (6,216,620 samples, 2.53%)</title><rect x="77.5198%" y="197" width="2.5339%" height="15" fill="rgb(228,22,38)"/><text x="77.7698%" y="207.50">ch..</text></g><g><title>analysis (195,907,747 samples, 79.85%)</title><rect x="0.2877%" y="245" width="79.8523%" height="15" fill="rgb(235,168,5)"/><text x="0.5377%" y="255.50">analysis</text></g><g><title>type_check_crate (120,743,632 samples, 49.22%)</title><rect x="30.9247%" y="229" width="49.2153%" height="15" fill="rgb(221,155,16)"/><text x="31.1747%" y="239.50">type_check_crate</text></g><g><title>wf_checking (12,426,619 samples, 5.07%)</title><rect x="75.0749%" y="213" width="5.0651%" height="15" fill="rgb(215,215,53)"/><text x="75.3249%" y="223.50">wf_che..</text></g><g><title>codegen_crate (718,298 samples, 0.29%)</title><rect x="80.1423%" y="245" width="0.2928%" height="15" fill="rgb(223,4,10)"/><text x="80.3923%" y="255.50"></text></g><g><title>metadata_load_macro (302,142 samples, 0.12%)</title><rect x="88.2186%" y="197" width="0.1232%" height="15" fill="rgb(234,103,6)"/><text x="88.4686%" y="207.50"></text></g><g><title>metadata_register_crate (5,939,866 samples, 2.42%)</title><rect x="88.3417%" y="197" width="2.4211%" height="15" fill="rgb(227,97,0)"/><text x="88.5917%" y="207.50">me..</text></g><g><title>metadata_register_crate (4,555,371 samples, 1.86%)</title><rect x="88.9061%" y="181" width="1.8568%" height="15" fill="rgb(234,150,53)"/><text x="89.1561%" y="191.50">m..</text></g><g><title>metadata_register_crate (3,502,470 samples, 1.43%)</title><rect x="89.3352%" y="165" width="1.4276%" height="15" fill="rgb(228,201,54)"/><text x="89.5852%" y="175.50"></text></g><g><title>macro_expand_crate (25,082,649 samples, 10.22%)</title><rect x="80.6491%" y="229" width="10.2237%" height="15" fill="rgb(222,22,37)"/><text x="80.8991%" y="239.50">macro_expand_cr..</text></g><g><title>expand_crate (25,064,649 samples, 10.22%)</title><rect x="80.6564%" y="213" width="10.2164%" height="15" fill="rgb(237,53,32)"/><text x="80.9064%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (269,855 samples, 0.11%)</title><rect x="90.7628%" y="197" width="0.1100%" height="15" fill="rgb(233,25,53)"/><text x="91.0128%" y="207.50"></text></g><g><title>finalize_macro_resolutions (246,553 samples, 0.10%)</title><rect x="90.9419%" y="213" width="0.1005%" height="15" fill="rgb(210,40,34)"/><text x="91.1919%" y="223.50"></text></g><g><title>late_resolve_crate (4,011,674 samples, 1.64%)</title><rect x="91.0424%" y="213" width="1.6352%" height="15" fill="rgb(241,220,44)"/><text x="91.2924%" y="223.50"></text></g><g><title>configure_and_expand (30,266,907 samples, 12.34%)</title><rect x="80.4351%" y="245" width="12.3368%" height="15" fill="rgb(235,28,35)"/><text x="80.6851%" y="255.50">configure_and_expa..</text></g><g><title>resolve_crate (4,589,681 samples, 1.87%)</title><rect x="90.9012%" y="229" width="1.8708%" height="15" fill="rgb(210,56,17)"/><text x="91.1512%" y="239.50">r..</text></g><g><title>drop_ast (353,374 samples, 0.14%)</title><rect x="92.7719%" y="245" width="0.1440%" height="15" fill="rgb(224,130,29)"/><text x="93.0219%" y="255.50"></text></g><g><title>early_lint_checks (700,097 samples, 0.29%)</title><rect x="92.9249%" y="245" width="0.2854%" height="15" fill="rgb(235,212,8)"/><text x="93.1749%" y="255.50"></text></g><g><title>free_global_ctxt (5,915,735 samples, 2.41%)</title><rect x="93.2103%" y="245" width="2.4113%" height="15" fill="rgb(223,33,50)"/><text x="93.4603%" y="255.50">fr..</text></g><g><title>mir_drops_elaborated_and_const_checked (246,993 samples, 0.10%)</title><rect x="96.5985%" y="213" width="0.1007%" height="15" fill="rgb(219,149,13)"/><text x="96.8485%" y="223.50"></text></g><g><title>optimized_mir (550,176 samples, 0.22%)</title><rect x="96.4751%" y="229" width="0.2243%" height="15" fill="rgb(250,156,29)"/><text x="96.7251%" y="239.50"></text></g><g><title>generate_crate_metadata (2,699,860 samples, 1.10%)</title><rect x="95.6216%" y="245" width="1.1005%" height="15" fill="rgb(216,193,19)"/><text x="95.8716%" y="255.50"></text></g><g><title>hir_lowering (5,510,312 samples, 2.25%)</title><rect x="96.7220%" y="245" width="2.2460%" height="15" fill="rgb(216,135,14)"/><text x="96.9720%" y="255.50">h..</text></g><g><title>self_profile_alloc_query_strings (1,518,197 samples, 0.62%)</title><rect x="99.1758%" y="245" width="0.6188%" height="15" fill="rgb(241,47,5)"/><text x="99.4258%" y="255.50"></text></g><g><title>all (245,337,536 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,42,35)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (245,337,536 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(231,13,6)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (401,635 samples, 0.16%)</title><rect x="99.8363%" y="245" width="0.1637%" height="15" fill="rgb(207,181,40)"/><text x="100.0863%" y="255.50"></text></g></svg></svg>