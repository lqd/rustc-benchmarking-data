<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_sized_raw (281,863 samples, 0.12%)</title><rect x="12.6510%" y="149" width="0.1150%" height="15" fill="rgb(227,0,7)"/><text x="12.9010%" y="159.50"></text></g><g><title>param_env (646,388 samples, 0.26%)</title><rect x="14.4769%" y="117" width="0.2638%" height="15" fill="rgb(217,0,24)"/><text x="14.7269%" y="127.50"></text></g><g><title>item_attrs (478,284 samples, 0.20%)</title><rect x="15.3486%" y="85" width="0.1952%" height="15" fill="rgb(221,193,54)"/><text x="15.5986%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (461,524 samples, 0.19%)</title><rect x="15.3555%" y="69" width="0.1883%" height="15" fill="rgb(248,212,6)"/><text x="15.6055%" y="79.50"></text></g><g><title>codegen_fn_attrs (693,347 samples, 0.28%)</title><rect x="15.2716%" y="101" width="0.2830%" height="15" fill="rgb(208,68,35)"/><text x="15.5216%" y="111.50"></text></g><g><title>is_copy_raw (270,522 samples, 0.11%)</title><rect x="18.5180%" y="53" width="0.1104%" height="15" fill="rgb(232,128,0)"/><text x="18.7680%" y="63.50"></text></g><g><title>evaluate_obligation (249,122 samples, 0.10%)</title><rect x="18.5268%" y="37" width="0.1017%" height="15" fill="rgb(207,160,47)"/><text x="18.7768%" y="47.50"></text></g><g><title>adt_drop_tys (378,712 samples, 0.15%)</title><rect x="18.5072%" y="69" width="0.1546%" height="15" fill="rgb(228,23,34)"/><text x="18.7572%" y="79.50"></text></g><g><title>needs_drop_raw (2,281,126 samples, 0.93%)</title><rect x="18.4158%" y="85" width="0.9309%" height="15" fill="rgb(218,30,26)"/><text x="18.6658%" y="95.50"></text></g><g><title>is_copy_raw (1,678,422 samples, 0.68%)</title><rect x="18.6618%" y="69" width="0.6850%" height="15" fill="rgb(220,122,19)"/><text x="18.9118%" y="79.50"></text></g><g><title>evaluate_obligation (1,373,037 samples, 0.56%)</title><rect x="18.7864%" y="53" width="0.5603%" height="15" fill="rgb(250,228,42)"/><text x="19.0364%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (1,103,451 samples, 0.45%)</title><rect x="19.6453%" y="69" width="0.4503%" height="15" fill="rgb(240,193,28)"/><text x="19.8953%" y="79.50"></text></g><g><title>resolve_instance (2,277,132 samples, 0.93%)</title><rect x="19.3575%" y="85" width="0.9293%" height="15" fill="rgb(216,20,37)"/><text x="19.6075%" y="95.50"></text></g><g><title>thir_body (2,732,752 samples, 1.12%)</title><rect x="20.3181%" y="85" width="1.1152%" height="15" fill="rgb(206,188,39)"/><text x="20.5681%" y="95.50"></text></g><g><title>mir_const (19,265,708 samples, 7.86%)</title><rect x="13.5952%" y="133" width="7.8624%" height="15" fill="rgb(217,207,13)"/><text x="13.8452%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,458,751 samples, 6.72%)</title><rect x="14.7407%" y="117" width="6.7169%" height="15" fill="rgb(231,73,38)"/><text x="14.9907%" y="127.50">unsafety_..</text></g><g><title>mir_built (14,464,520 samples, 5.90%)</title><rect x="15.5546%" y="101" width="5.9030%" height="15" fill="rgb(225,20,46)"/><text x="15.8046%" y="111.50">mir_built</text></g><g><title>mir_promoted (21,427,067 samples, 8.74%)</title><rect x="12.7661%" y="149" width="8.7445%" height="15" fill="rgb(210,31,41)"/><text x="13.0161%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,142,723 samples, 0.47%)</title><rect x="21.5105%" y="149" width="0.4663%" height="15" fill="rgb(221,200,47)"/><text x="21.7605%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,457,247 samples, 0.59%)</title><rect x="21.9769%" y="149" width="0.5947%" height="15" fill="rgb(226,26,5)"/><text x="22.2269%" y="159.50"></text></g><g><title>normalize_projection_ty (963,702 samples, 0.39%)</title><rect x="22.1783%" y="133" width="0.3933%" height="15" fill="rgb(249,33,26)"/><text x="22.4283%" y="143.50"></text></g><g><title>type_op_normalize_predicate (258,725 samples, 0.11%)</title><rect x="22.5716%" y="149" width="0.1056%" height="15" fill="rgb(235,183,28)"/><text x="22.8216%" y="159.50"></text></g><g><title>type_op_normalize_ty (409,347 samples, 0.17%)</title><rect x="22.6772%" y="149" width="0.1671%" height="15" fill="rgb(221,5,38)"/><text x="22.9272%" y="159.50"></text></g><g><title>normalize_projection_ty (272,015 samples, 0.11%)</title><rect x="22.7332%" y="133" width="0.1110%" height="15" fill="rgb(247,18,42)"/><text x="22.9832%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,791,862 samples, 2.36%)</title><rect x="22.8442%" y="149" width="2.3637%" height="15" fill="rgb(241,131,45)"/><text x="23.0942%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (60,406,537 samples, 24.65%)</title><rect x="0.5586%" y="181" width="24.6521%" height="15" fill="rgb(249,31,29)"/><text x="0.8086%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (60,071,294 samples, 24.52%)</title><rect x="0.6954%" y="165" width="24.5153%" height="15" fill="rgb(225,111,53)"/><text x="0.9454%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (382,604 samples, 0.16%)</title><rect x="25.2543%" y="181" width="0.1561%" height="15" fill="rgb(238,160,17)"/><text x="25.5043%" y="191.50"></text></g><g><title>should_inherit_track_caller (477,975 samples, 0.20%)</title><rect x="25.7245%" y="133" width="0.1951%" height="15" fill="rgb(214,148,48)"/><text x="25.9745%" y="143.50"></text></g><g><title>codegen_fn_attrs (770,107 samples, 0.31%)</title><rect x="25.6116%" y="149" width="0.3143%" height="15" fill="rgb(232,36,49)"/><text x="25.8616%" y="159.50"></text></g><g><title>check_mod_attrs (1,225,524 samples, 0.50%)</title><rect x="25.4258%" y="165" width="0.5001%" height="15" fill="rgb(209,103,24)"/><text x="25.6758%" y="175.50"></text></g><g><title>check_mod_const_bodies (276,823 samples, 0.11%)</title><rect x="25.9259%" y="165" width="0.1130%" height="15" fill="rgb(229,88,8)"/><text x="26.1759%" y="175.50"></text></g><g><title>lint_levels (258,533 samples, 0.11%)</title><rect x="26.2438%" y="149" width="0.1055%" height="15" fill="rgb(213,181,19)"/><text x="26.4938%" y="159.50"></text></g><g><title>lookup_deprecation_entry (249,943 samples, 0.10%)</title><rect x="26.3493%" y="149" width="0.1020%" height="15" fill="rgb(254,191,54)"/><text x="26.5993%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (961,391 samples, 0.39%)</title><rect x="26.1074%" y="165" width="0.3923%" height="15" fill="rgb(241,83,37)"/><text x="26.3574%" y="175.50"></text></g><g><title>misc_checking_1 (2,750,220 samples, 1.12%)</title><rect x="25.4107%" y="181" width="1.1224%" height="15" fill="rgb(233,36,39)"/><text x="25.6607%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (988,631 samples, 0.40%)</title><rect x="26.5338%" y="165" width="0.4035%" height="15" fill="rgb(226,3,54)"/><text x="26.7838%" y="175.50"></text></g><g><title>check_mod_liveness (784,830 samples, 0.32%)</title><rect x="26.6169%" y="149" width="0.3203%" height="15" fill="rgb(245,192,40)"/><text x="26.8669%" y="159.50"></text></g><g><title>misc_checking_2 (2,138,294 samples, 0.87%)</title><rect x="26.5330%" y="181" width="0.8726%" height="15" fill="rgb(238,167,29)"/><text x="26.7830%" y="191.50"></text></g><g><title>match_checking (1,147,863 samples, 0.47%)</title><rect x="26.9372%" y="165" width="0.4684%" height="15" fill="rgb(232,182,51)"/><text x="27.1872%" y="175.50"></text></g><g><title>check_match (1,069,892 samples, 0.44%)</title><rect x="26.9691%" y="149" width="0.4366%" height="15" fill="rgb(231,60,39)"/><text x="27.2191%" y="159.50"></text></g><g><title>check_private_in_public (497,306 samples, 0.20%)</title><rect x="27.4097%" y="165" width="0.2030%" height="15" fill="rgb(208,69,12)"/><text x="27.6597%" y="175.50"></text></g><g><title>death_checking (977,831 samples, 0.40%)</title><rect x="27.6127%" y="165" width="0.3991%" height="15" fill="rgb(235,93,37)"/><text x="27.8627%" y="175.50"></text></g><g><title>param_env (543,983 samples, 0.22%)</title><rect x="28.3462%" y="133" width="0.2220%" height="15" fill="rgb(213,116,39)"/><text x="28.5962%" y="143.50"></text></g><g><title>predicates_of (250,471 samples, 0.10%)</title><rect x="28.4660%" y="117" width="0.1022%" height="15" fill="rgb(222,207,29)"/><text x="28.7160%" y="127.50"></text></g><g><title>crate_lints (1,803,820 samples, 0.74%)</title><rect x="28.0124%" y="149" width="0.7361%" height="15" fill="rgb(206,96,30)"/><text x="28.2624%" y="159.50"></text></g><g><title>type_of (435,126 samples, 0.18%)</title><rect x="28.5709%" y="133" width="0.1776%" height="15" fill="rgb(218,138,4)"/><text x="28.8209%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (346,395 samples, 0.14%)</title><rect x="28.6071%" y="117" width="0.1414%" height="15" fill="rgb(250,191,14)"/><text x="28.8571%" y="127.50"></text></g><g><title>lint_checking (2,614,279 samples, 1.07%)</title><rect x="28.0117%" y="165" width="1.0669%" height="15" fill="rgb(239,60,40)"/><text x="28.2617%" y="175.50"></text></g><g><title>module_lints (808,909 samples, 0.33%)</title><rect x="28.7485%" y="149" width="0.3301%" height="15" fill="rgb(206,27,48)"/><text x="28.9985%" y="159.50"></text></g><g><title>lint_mod (799,859 samples, 0.33%)</title><rect x="28.7522%" y="133" width="0.3264%" height="15" fill="rgb(225,35,8)"/><text x="29.0022%" y="143.50"></text></g><g><title>privacy_access_levels (908,590 samples, 0.37%)</title><rect x="29.0786%" y="165" width="0.3708%" height="15" fill="rgb(250,213,24)"/><text x="29.3286%" y="175.50"></text></g><g><title>privacy_checking_modules (1,684,848 samples, 0.69%)</title><rect x="29.4494%" y="165" width="0.6876%" height="15" fill="rgb(247,123,22)"/><text x="29.6994%" y="175.50"></text></g><g><title>check_mod_privacy (1,676,838 samples, 0.68%)</title><rect x="29.4527%" y="149" width="0.6843%" height="15" fill="rgb(231,138,38)"/><text x="29.7027%" y="159.50"></text></g><g><title>misc_checking_3 (6,720,404 samples, 2.74%)</title><rect x="27.4057%" y="181" width="2.7426%" height="15" fill="rgb(231,145,46)"/><text x="27.6557%" y="191.50">mi..</text></g><g><title>impl_parent (1,542,453 samples, 0.63%)</title><rect x="31.5224%" y="117" width="0.6295%" height="15" fill="rgb(251,118,11)"/><text x="31.7724%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (771,917 samples, 0.32%)</title><rect x="31.8369%" y="101" width="0.3150%" height="15" fill="rgb(217,147,25)"/><text x="32.0869%" y="111.50"></text></g><g><title>impl_trait_ref (2,725,717 samples, 1.11%)</title><rect x="32.1523%" y="117" width="1.1124%" height="15" fill="rgb(247,81,37)"/><text x="32.4023%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,170,575 samples, 0.89%)</title><rect x="32.3788%" y="101" width="0.8858%" height="15" fill="rgb(209,12,38)"/><text x="32.6288%" y="111.50"></text></g><g><title>trait_impls_of (458,235 samples, 0.19%)</title><rect x="33.3497%" y="117" width="0.1870%" height="15" fill="rgb(227,1,9)"/><text x="33.5997%" y="127.50"></text></g><g><title>coherent_trait (8,138,570 samples, 3.32%)</title><rect x="30.2215%" y="149" width="3.3214%" height="15" fill="rgb(248,47,43)"/><text x="30.4715%" y="159.50">coh..</text></g><g><title>specialization_graph_of (7,777,635 samples, 3.17%)</title><rect x="30.3688%" y="133" width="3.1741%" height="15" fill="rgb(221,10,30)"/><text x="30.6188%" y="143.50">spe..</text></g><g><title>coherence_checking (8,254,181 samples, 3.37%)</title><rect x="30.2109%" y="165" width="3.3686%" height="15" fill="rgb(210,229,1)"/><text x="30.4609%" y="175.50">coh..</text></g><g><title>associated_item (658,278 samples, 0.27%)</title><rect x="54.3039%" y="101" width="0.2686%" height="15" fill="rgb(222,148,37)"/><text x="54.5539%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (535,617 samples, 0.22%)</title><rect x="54.3539%" y="85" width="0.2186%" height="15" fill="rgb(234,67,33)"/><text x="54.6039%" y="95.50"></text></g><g><title>associated_items (948,350 samples, 0.39%)</title><rect x="54.2119%" y="117" width="0.3870%" height="15" fill="rgb(247,98,35)"/><text x="54.4619%" y="127.50"></text></g><g><title>adt_dtorck_constraint (266,724 samples, 0.11%)</title><rect x="54.8532%" y="101" width="0.1089%" height="15" fill="rgb(247,138,52)"/><text x="55.1032%" y="111.50"></text></g><g><title>dropck_outlives (767,488 samples, 0.31%)</title><rect x="54.6521%" y="117" width="0.3132%" height="15" fill="rgb(213,79,30)"/><text x="54.9021%" y="127.50"></text></g><g><title>generics_of (798,389 samples, 0.33%)</title><rect x="57.7977%" y="101" width="0.3258%" height="15" fill="rgb(246,177,23)"/><text x="58.0477%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (591,065 samples, 0.24%)</title><rect x="57.8823%" y="85" width="0.2412%" height="15" fill="rgb(230,62,27)"/><text x="58.1323%" y="95.50"></text></g><g><title>impl_trait_ref (1,152,712 samples, 0.47%)</title><rect x="58.2044%" y="101" width="0.4704%" height="15" fill="rgb(216,154,8)"/><text x="58.4544%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (970,210 samples, 0.40%)</title><rect x="58.2789%" y="85" width="0.3959%" height="15" fill="rgb(244,35,45)"/><text x="58.5289%" y="95.50"></text></g><g><title>predicates_of (942,262 samples, 0.38%)</title><rect x="58.7035%" y="101" width="0.3845%" height="15" fill="rgb(251,115,12)"/><text x="58.9535%" y="111.50"></text></g><g><title>predicates_defined_on (546,509 samples, 0.22%)</title><rect x="58.8650%" y="85" width="0.2230%" height="15" fill="rgb(240,54,50)"/><text x="59.1150%" y="95.50"></text></g><g><title>specializes (2,298,314 samples, 0.94%)</title><rect x="59.0880%" y="101" width="0.9380%" height="15" fill="rgb(233,84,52)"/><text x="59.3380%" y="111.50"></text></g><g><title>param_env (1,360,054 samples, 0.56%)</title><rect x="59.4709%" y="85" width="0.5550%" height="15" fill="rgb(207,117,47)"/><text x="59.7209%" y="95.50"></text></g><g><title>def_span (629,455 samples, 0.26%)</title><rect x="59.7691%" y="69" width="0.2569%" height="15" fill="rgb(249,43,39)"/><text x="60.0191%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (559,475 samples, 0.23%)</title><rect x="59.7977%" y="53" width="0.2283%" height="15" fill="rgb(209,38,44)"/><text x="60.0477%" y="63.50"></text></g><g><title>trait_impls_of (321,563 samples, 0.13%)</title><rect x="60.0346%" y="101" width="0.1312%" height="15" fill="rgb(236,212,23)"/><text x="60.2846%" y="111.50"></text></g><g><title>evaluate_obligation (12,763,707 samples, 5.21%)</title><rect x="54.9653%" y="117" width="5.2089%" height="15" fill="rgb(242,79,21)"/><text x="55.2153%" y="127.50">evalua..</text></g><g><title>evaluate_obligation (382,812 samples, 0.16%)</title><rect x="60.7411%" y="101" width="0.1562%" height="15" fill="rgb(211,96,35)"/><text x="60.9911%" y="111.50"></text></g><g><title>method_autoderef_steps (768,564 samples, 0.31%)</title><rect x="60.5880%" y="117" width="0.3137%" height="15" fill="rgb(253,215,40)"/><text x="60.8380%" y="127.50"></text></g><g><title>predicates_of (638,218 samples, 0.26%)</title><rect x="61.0124%" y="117" width="0.2605%" height="15" fill="rgb(211,81,21)"/><text x="61.2624%" y="127.50"></text></g><g><title>predicates_defined_on (422,884 samples, 0.17%)</title><rect x="61.1003%" y="101" width="0.1726%" height="15" fill="rgb(208,190,38)"/><text x="61.3503%" y="111.50"></text></g><g><title>evaluate_obligation (1,273,491 samples, 0.52%)</title><rect x="64.5493%" y="101" width="0.5197%" height="15" fill="rgb(235,213,38)"/><text x="64.7993%" y="111.50"></text></g><g><title>method_autoderef_steps (403,876 samples, 0.16%)</title><rect x="65.2289%" y="101" width="0.1648%" height="15" fill="rgb(237,122,38)"/><text x="65.4789%" y="111.50"></text></g><g><title>typeck (10,080,343 samples, 4.11%)</title><rect x="61.3440%" y="117" width="4.1138%" height="15" fill="rgb(244,218,35)"/><text x="61.5940%" y="127.50">type..</text></g><g><title>item_bodies_checking (78,131,643 samples, 31.89%)</title><rect x="33.6138%" y="165" width="31.8858%" height="15" fill="rgb(240,68,47)"/><text x="33.8638%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (78,127,173 samples, 31.88%)</title><rect x="33.6156%" y="149" width="31.8840%" height="15" fill="rgb(210,16,53)"/><text x="33.8656%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (77,897,001 samples, 31.79%)</title><rect x="33.7095%" y="133" width="31.7900%" height="15" fill="rgb(235,124,12)"/><text x="33.9595%" y="143.50">typeck</text></g><g><title>item_types_checking (3,667,461 samples, 1.50%)</title><rect x="65.4996%" y="165" width="1.4967%" height="15" fill="rgb(224,169,11)"/><text x="65.7496%" y="175.50"></text></g><g><title>check_mod_item_types (3,656,121 samples, 1.49%)</title><rect x="65.5042%" y="149" width="1.4921%" height="15" fill="rgb(250,166,2)"/><text x="65.7542%" y="159.50"></text></g><g><title>fn_sig (689,456 samples, 0.28%)</title><rect x="67.2523%" y="133" width="0.2814%" height="15" fill="rgb(242,216,29)"/><text x="67.5023%" y="143.50"></text></g><g><title>generics_of (494,406 samples, 0.20%)</title><rect x="67.5337%" y="133" width="0.2018%" height="15" fill="rgb(230,116,27)"/><text x="67.7837%" y="143.50"></text></g><g><title>late_bound_vars_map (852,642 samples, 0.35%)</title><rect x="68.1222%" y="85" width="0.3480%" height="15" fill="rgb(228,99,48)"/><text x="68.3722%" y="95.50"></text></g><g><title>resolve_lifetimes (808,729 samples, 0.33%)</title><rect x="68.1401%" y="69" width="0.3300%" height="15" fill="rgb(253,11,6)"/><text x="68.3901%" y="79.50"></text></g><g><title>explicit_predicates_of (1,415,808 samples, 0.58%)</title><rect x="67.9074%" y="101" width="0.5778%" height="15" fill="rgb(247,143,39)"/><text x="68.1574%" y="111.50"></text></g><g><title>predicates_of (2,165,356 samples, 0.88%)</title><rect x="67.7756%" y="133" width="0.8837%" height="15" fill="rgb(236,97,10)"/><text x="68.0256%" y="143.50"></text></g><g><title>predicates_defined_on (2,045,384 samples, 0.83%)</title><rect x="67.8245%" y="117" width="0.8347%" height="15" fill="rgb(233,208,19)"/><text x="68.0745%" y="127.50"></text></g><g><title>inferred_outlives_of (426,414 samples, 0.17%)</title><rect x="68.4852%" y="101" width="0.1740%" height="15" fill="rgb(216,164,2)"/><text x="68.7352%" y="111.50"></text></g><g><title>inferred_outlives_crate (382,904 samples, 0.16%)</title><rect x="68.5030%" y="85" width="0.1563%" height="15" fill="rgb(220,129,5)"/><text x="68.7530%" y="95.50"></text></g><g><title>type_collecting (4,417,459 samples, 1.80%)</title><rect x="66.9983%" y="165" width="1.8028%" height="15" fill="rgb(242,17,10)"/><text x="67.2483%" y="175.50">t..</text></g><g><title>collect_mod_item_types (4,402,539 samples, 1.80%)</title><rect x="67.0044%" y="149" width="1.7967%" height="15" fill="rgb(242,107,0)"/><text x="67.2544%" y="159.50">c..</text></g><g><title>evaluate_obligation (951,623 samples, 0.39%)</title><rect x="72.1196%" y="133" width="0.3884%" height="15" fill="rgb(251,28,31)"/><text x="72.3696%" y="143.50"></text></g><g><title>implied_outlives_bounds (787,231 samples, 0.32%)</title><rect x="72.5212%" y="133" width="0.3213%" height="15" fill="rgb(233,223,10)"/><text x="72.7712%" y="143.50"></text></g><g><title>param_env (1,589,083 samples, 0.65%)</title><rect x="72.8425%" y="133" width="0.6485%" height="15" fill="rgb(215,21,27)"/><text x="73.0925%" y="143.50"></text></g><g><title>region_scope_tree (951,242 samples, 0.39%)</title><rect x="73.5087%" y="133" width="0.3882%" height="15" fill="rgb(232,23,21)"/><text x="73.7587%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,792,812 samples, 4.81%)</title><rect x="69.0949%" y="149" width="4.8127%" height="15" fill="rgb(244,5,23)"/><text x="69.3449%" y="159.50">check_..</text></g><g><title>param_env (793,236 samples, 0.32%)</title><rect x="75.8436%" y="133" width="0.3237%" height="15" fill="rgb(226,81,46)"/><text x="76.0936%" y="143.50"></text></g><g><title>check_item_well_formed (5,892,165 samples, 2.40%)</title><rect x="73.9076%" y="149" width="2.4046%" height="15" fill="rgb(247,70,30)"/><text x="74.1576%" y="159.50">ch..</text></g><g><title>analysis (186,539,579 samples, 76.13%)</title><rect x="0.3265%" y="197" width="76.1275%" height="15" fill="rgb(212,68,19)"/><text x="0.5765%" y="207.50">analysis</text></g><g><title>type_check_crate (113,465,443 samples, 46.31%)</title><rect x="30.1483%" y="181" width="46.3057%" height="15" fill="rgb(240,187,13)"/><text x="30.3983%" y="191.50">type_check_crate</text></g><g><title>wf_checking (18,738,017 samples, 7.65%)</title><rect x="68.8069%" y="165" width="7.6471%" height="15" fill="rgb(223,113,26)"/><text x="69.0569%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (347,314 samples, 0.14%)</title><rect x="76.3122%" y="149" width="0.1417%" height="15" fill="rgb(206,192,2)"/><text x="76.5622%" y="159.50"></text></g><g><title>macro_expand_crate (36,642,845 samples, 14.95%)</title><rect x="76.7998%" y="181" width="14.9541%" height="15" fill="rgb(241,108,4)"/><text x="77.0498%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (36,624,895 samples, 14.95%)</title><rect x="76.8071%" y="165" width="14.9468%" height="15" fill="rgb(247,173,49)"/><text x="77.0571%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,212,973 samples, 0.50%)</title><rect x="91.2588%" y="149" width="0.4950%" height="15" fill="rgb(224,114,35)"/><text x="91.5088%" y="159.50"></text></g><g><title>late_resolve_crate (2,959,753 samples, 1.21%)</title><rect x="91.9095%" y="165" width="1.2079%" height="15" fill="rgb(245,159,27)"/><text x="92.1595%" y="175.50"></text></g><g><title>configure_and_expand (40,822,650 samples, 16.66%)</title><rect x="76.5529%" y="197" width="16.6599%" height="15" fill="rgb(245,172,44)"/><text x="76.8029%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,403,487 samples, 1.39%)</title><rect x="91.8238%" y="181" width="1.3890%" height="15" fill="rgb(236,23,11)"/><text x="92.0738%" y="191.50"></text></g><g><title>drop_ast (470,195 samples, 0.19%)</title><rect x="93.2128%" y="197" width="0.1919%" height="15" fill="rgb(205,117,38)"/><text x="93.4628%" y="207.50"></text></g><g><title>early_lint_checks (703,498 samples, 0.29%)</title><rect x="93.4109%" y="197" width="0.2871%" height="15" fill="rgb(237,72,25)"/><text x="93.6609%" y="207.50"></text></g><g><title>free_global_ctxt (3,240,635 samples, 1.32%)</title><rect x="93.6980%" y="197" width="1.3225%" height="15" fill="rgb(244,70,9)"/><text x="93.9480%" y="207.50"></text></g><g><title>generate_crate_metadata (2,258,635 samples, 0.92%)</title><rect x="95.0205%" y="197" width="0.9218%" height="15" fill="rgb(217,125,39)"/><text x="95.2705%" y="207.50"></text></g><g><title>hir_lowering (6,368,340 samples, 2.60%)</title><rect x="95.9422%" y="197" width="2.5989%" height="15" fill="rgb(235,36,10)"/><text x="96.1922%" y="207.50">hi..</text></g><g><title>parse_crate (1,676,058 samples, 0.68%)</title><rect x="98.5621%" y="197" width="0.6840%" height="15" fill="rgb(251,123,47)"/><text x="98.8121%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,194,124 samples, 0.49%)</title><rect x="99.3259%" y="197" width="0.4873%" height="15" fill="rgb(221,13,13)"/><text x="99.5759%" y="207.50"></text></g><g><title>all (245,035,815 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (245,035,815 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (373,074 samples, 0.15%)</title><rect x="99.8477%" y="197" width="0.1523%" height="15" fill="rgb(245,182,24)"/><text x="100.0977%" y="207.50"></text></g></svg></svg>