<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (26,423,359 samples, 0.22%)</title><rect x="12.5328%" y="133" width="0.2210%" height="15" fill="rgb(227,0,7)"/><text x="12.7828%" y="143.50"></text></g><g><title>is_copy_raw (97,837,939 samples, 0.82%)</title><rect x="17.8426%" y="53" width="0.8185%" height="15" fill="rgb(217,0,24)"/><text x="18.0926%" y="63.50"></text></g><g><title>evaluate_obligation (73,251,883 samples, 0.61%)</title><rect x="18.0482%" y="37" width="0.6128%" height="15" fill="rgb(221,193,54)"/><text x="18.2982%" y="47.50"></text></g><g><title>needs_drop_raw (118,927,769 samples, 0.99%)</title><rect x="17.6670%" y="69" width="0.9949%" height="15" fill="rgb(248,212,6)"/><text x="17.9170%" y="79.50"></text></g><g><title>resolve_instance (16,776,952 samples, 0.14%)</title><rect x="18.6623%" y="69" width="0.1403%" height="15" fill="rgb(208,68,35)"/><text x="18.9123%" y="79.50"></text></g><g><title>thir_body (129,663,823 samples, 1.08%)</title><rect x="18.8188%" y="69" width="1.0847%" height="15" fill="rgb(232,128,0)"/><text x="19.0688%" y="79.50"></text></g><g><title>mir_const (759,524,621 samples, 6.35%)</title><rect x="13.6365%" y="117" width="6.3538%" height="15" fill="rgb(207,160,47)"/><text x="13.8865%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (673,846,803 samples, 5.64%)</title><rect x="14.3532%" y="101" width="5.6371%" height="15" fill="rgb(228,23,34)"/><text x="14.6032%" y="111.50">unsafet..</text></g><g><title>mir_built (623,478,477 samples, 5.22%)</title><rect x="14.7746%" y="85" width="5.2157%" height="15" fill="rgb(218,30,26)"/><text x="15.0246%" y="95.50">mir_bu..</text></g><g><title>mir_const (25,322,911 samples, 0.21%)</title><rect x="20.0866%" y="101" width="0.2118%" height="15" fill="rgb(220,122,19)"/><text x="20.3366%" y="111.50"></text></g><g><title>unsafety_check_result (19,533,638 samples, 0.16%)</title><rect x="20.1351%" y="85" width="0.1634%" height="15" fill="rgb(250,228,42)"/><text x="20.3851%" y="95.50"></text></g><g><title>mir_built (17,478,936 samples, 0.15%)</title><rect x="20.1523%" y="69" width="0.1462%" height="15" fill="rgb(240,193,28)"/><text x="20.4023%" y="79.50"></text></g><g><title>mir_promoted (887,084,909 samples, 7.42%)</title><rect x="12.8794%" y="133" width="7.4209%" height="15" fill="rgb(216,20,37)"/><text x="13.1294%" y="143.50">mir_promot..</text></g><g><title>mir_const_qualif (37,055,099 samples, 0.31%)</title><rect x="19.9903%" y="117" width="0.3100%" height="15" fill="rgb(206,188,39)"/><text x="20.2403%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (62,323,321 samples, 0.52%)</title><rect x="20.3005%" y="133" width="0.5214%" height="15" fill="rgb(217,207,13)"/><text x="20.5505%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (42,150,736 samples, 0.35%)</title><rect x="20.8219%" y="133" width="0.3526%" height="15" fill="rgb(231,73,38)"/><text x="21.0719%" y="143.50"></text></g><g><title>normalize_projection_ty (12,361,880 samples, 0.10%)</title><rect x="21.0711%" y="117" width="0.1034%" height="15" fill="rgb(225,20,46)"/><text x="21.3211%" y="127.50"></text></g><g><title>type_op_normalize_ty (44,718,297 samples, 0.37%)</title><rect x="21.1839%" y="133" width="0.3741%" height="15" fill="rgb(210,31,41)"/><text x="21.4339%" y="143.50"></text></g><g><title>normalize_projection_ty (16,155,244 samples, 0.14%)</title><rect x="21.4228%" y="117" width="0.1351%" height="15" fill="rgb(221,200,47)"/><text x="21.6728%" y="127.50"></text></g><g><title>type_op_prove_predicate (110,118,903 samples, 0.92%)</title><rect x="21.5580%" y="133" width="0.9212%" height="15" fill="rgb(226,26,5)"/><text x="21.8080%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,652,862,051 samples, 22.19%)</title><rect x="0.2871%" y="165" width="22.1926%" height="15" fill="rgb(249,33,26)"/><text x="0.5371%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (2,628,366,526 samples, 21.99%)</title><rect x="0.4920%" y="149" width="21.9876%" height="15" fill="rgb(235,183,28)"/><text x="0.7420%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (16,451,622 samples, 0.14%)</title><rect x="22.4797%" y="165" width="0.1376%" height="15" fill="rgb(221,5,38)"/><text x="22.7297%" y="175.50"></text></g><g><title>hir_module_items (20,070,181 samples, 0.17%)</title><rect x="22.6173%" y="165" width="0.1679%" height="15" fill="rgb(247,18,42)"/><text x="22.8673%" y="175.50"></text></g><g><title>codegen_fn_attrs (20,170,501 samples, 0.17%)</title><rect x="23.0195%" y="133" width="0.1687%" height="15" fill="rgb(241,131,45)"/><text x="23.2695%" y="143.50"></text></g><g><title>check_mod_attrs (48,049,667 samples, 0.40%)</title><rect x="22.7863%" y="149" width="0.4020%" height="15" fill="rgb(249,31,29)"/><text x="23.0363%" y="159.50"></text></g><g><title>check_mod_const_bodies (15,028,587 samples, 0.13%)</title><rect x="23.1882%" y="149" width="0.1257%" height="15" fill="rgb(225,111,53)"/><text x="23.4382%" y="159.50"></text></g><g><title>check_mod_loops (12,701,249 samples, 0.11%)</title><rect x="23.3139%" y="149" width="0.1063%" height="15" fill="rgb(238,160,17)"/><text x="23.5639%" y="159.50"></text></g><g><title>lookup_deprecation_entry (17,321,252 samples, 0.14%)</title><rect x="23.5701%" y="133" width="0.1449%" height="15" fill="rgb(214,148,48)"/><text x="23.8201%" y="143.50"></text></g><g><title>stability_index (16,736,076 samples, 0.14%)</title><rect x="23.5750%" y="117" width="0.1400%" height="15" fill="rgb(232,36,49)"/><text x="23.8250%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (33,325,036 samples, 0.28%)</title><rect x="23.4376%" y="149" width="0.2788%" height="15" fill="rgb(209,103,24)"/><text x="23.6876%" y="159.50"></text></g><g><title>misc_checking_1 (115,022,827 samples, 0.96%)</title><rect x="22.7852%" y="165" width="0.9622%" height="15" fill="rgb(229,88,8)"/><text x="23.0352%" y="175.50"></text></g><g><title>check_mod_intrinsics (12,396,928 samples, 0.10%)</title><rect x="23.7481%" y="133" width="0.1037%" height="15" fill="rgb(213,181,19)"/><text x="23.9981%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (53,018,178 samples, 0.44%)</title><rect x="23.7474%" y="149" width="0.4435%" height="15" fill="rgb(254,191,54)"/><text x="23.9974%" y="159.50"></text></g><g><title>check_mod_liveness (40,547,070 samples, 0.34%)</title><rect x="23.8518%" y="133" width="0.3392%" height="15" fill="rgb(241,83,37)"/><text x="24.1018%" y="143.50"></text></g><g><title>eval_to_const_value_raw (17,303,417 samples, 0.14%)</title><rect x="24.9487%" y="117" width="0.1448%" height="15" fill="rgb(233,36,39)"/><text x="25.1987%" y="127.50"></text></g><g><title>eval_to_const_value_raw (17,210,396 samples, 0.14%)</title><rect x="24.9495%" y="101" width="0.1440%" height="15" fill="rgb(226,3,54)"/><text x="25.1995%" y="111.50"></text></g><g><title>eval_to_allocation_raw (17,033,332 samples, 0.14%)</title><rect x="24.9510%" y="85" width="0.1425%" height="15" fill="rgb(245,192,40)"/><text x="25.2010%" y="95.50"></text></g><g><title>misc_checking_2 (169,137,978 samples, 1.41%)</title><rect x="23.7474%" y="165" width="1.4149%" height="15" fill="rgb(238,167,29)"/><text x="23.9974%" y="175.50"></text></g><g><title>match_checking (116,115,949 samples, 0.97%)</title><rect x="24.1910%" y="149" width="0.9714%" height="15" fill="rgb(232,182,51)"/><text x="24.4410%" y="159.50"></text></g><g><title>check_match (111,042,167 samples, 0.93%)</title><rect x="24.2334%" y="133" width="0.9289%" height="15" fill="rgb(231,60,39)"/><text x="24.4834%" y="143.50"></text></g><g><title>check_private_in_public (39,249,066 samples, 0.33%)</title><rect x="25.1625%" y="149" width="0.3283%" height="15" fill="rgb(208,69,12)"/><text x="25.4125%" y="159.50"></text></g><g><title>death_checking (42,444,941 samples, 0.36%)</title><rect x="25.4909%" y="149" width="0.3551%" height="15" fill="rgb(235,93,37)"/><text x="25.7409%" y="159.50"></text></g><g><title>eval_to_const_value_raw (25,864,591 samples, 0.22%)</title><rect x="26.2963%" y="117" width="0.2164%" height="15" fill="rgb(213,116,39)"/><text x="26.5463%" y="127.50"></text></g><g><title>eval_to_const_value_raw (25,096,772 samples, 0.21%)</title><rect x="26.3028%" y="101" width="0.2099%" height="15" fill="rgb(222,207,29)"/><text x="26.5528%" y="111.50"></text></g><g><title>eval_to_allocation_raw (24,181,143 samples, 0.20%)</title><rect x="26.3104%" y="85" width="0.2023%" height="15" fill="rgb(206,96,30)"/><text x="26.5604%" y="95.50"></text></g><g><title>param_env (13,025,958 samples, 0.11%)</title><rect x="26.5127%" y="117" width="0.1090%" height="15" fill="rgb(218,138,4)"/><text x="26.7627%" y="127.50"></text></g><g><title>crate_lints (94,219,627 samples, 0.79%)</title><rect x="25.8460%" y="133" width="0.7882%" height="15" fill="rgb(250,191,14)"/><text x="26.0960%" y="143.50"></text></g><g><title>lint_checking (158,450,210 samples, 1.33%)</title><rect x="25.8460%" y="149" width="1.3255%" height="15" fill="rgb(239,60,40)"/><text x="26.0960%" y="159.50"></text></g><g><title>module_lints (64,225,173 samples, 0.54%)</title><rect x="26.6342%" y="133" width="0.5373%" height="15" fill="rgb(206,27,48)"/><text x="26.8842%" y="143.50"></text></g><g><title>lint_mod (64,164,733 samples, 0.54%)</title><rect x="26.6347%" y="117" width="0.5368%" height="15" fill="rgb(225,35,8)"/><text x="26.8847%" y="127.50"></text></g><g><title>privacy_access_levels (41,179,878 samples, 0.34%)</title><rect x="27.1715%" y="149" width="0.3445%" height="15" fill="rgb(250,213,24)"/><text x="27.4215%" y="159.50"></text></g><g><title>privacy_checking_modules (130,315,777 samples, 1.09%)</title><rect x="27.5160%" y="149" width="1.0902%" height="15" fill="rgb(247,123,22)"/><text x="27.7660%" y="159.50"></text></g><g><title>check_mod_privacy (130,266,016 samples, 1.09%)</title><rect x="27.5164%" y="133" width="1.0897%" height="15" fill="rgb(231,138,38)"/><text x="27.7664%" y="143.50"></text></g><g><title>misc_checking_3 (412,445,181 samples, 3.45%)</title><rect x="25.1623%" y="165" width="3.4503%" height="15" fill="rgb(231,145,46)"/><text x="25.4123%" y="175.50">mis..</text></g><g><title>coherent_trait (25,358,430 samples, 0.21%)</title><rect x="28.6605%" y="133" width="0.2121%" height="15" fill="rgb(251,118,11)"/><text x="28.9105%" y="143.50"></text></g><g><title>specialization_graph_of (24,297,929 samples, 0.20%)</title><rect x="28.6694%" y="117" width="0.2033%" height="15" fill="rgb(217,147,25)"/><text x="28.9194%" y="127.50"></text></g><g><title>coherence_checking (29,018,092 samples, 0.24%)</title><rect x="28.6601%" y="149" width="0.2428%" height="15" fill="rgb(247,81,37)"/><text x="28.9101%" y="159.50"></text></g><g><title>dropck_outlives (42,823,417 samples, 0.36%)</title><rect x="50.7114%" y="101" width="0.3582%" height="15" fill="rgb(209,12,38)"/><text x="50.9614%" y="111.50"></text></g><g><title>evaluate_obligation (44,706,258 samples, 0.37%)</title><rect x="51.0696%" y="101" width="0.3740%" height="15" fill="rgb(227,1,9)"/><text x="51.3196%" y="111.50"></text></g><g><title>typeck (32,809,667 samples, 0.27%)</title><rect x="51.5115%" y="101" width="0.2745%" height="15" fill="rgb(248,47,43)"/><text x="51.7615%" y="111.50"></text></g><g><title>item_bodies_checking (2,732,571,926 samples, 22.86%)</title><rect x="28.9470%" y="149" width="22.8594%" height="15" fill="rgb(221,10,30)"/><text x="29.1970%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (2,732,567,706 samples, 22.86%)</title><rect x="28.9470%" y="133" width="22.8593%" height="15" fill="rgb(210,229,1)"/><text x="29.1970%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (2,713,752,988 samples, 22.70%)</title><rect x="29.1044%" y="117" width="22.7019%" height="15" fill="rgb(222,148,37)"/><text x="29.3544%" y="127.50">typeck</text></g><g><title>item_types_checking (217,264,222 samples, 1.82%)</title><rect x="51.8063%" y="149" width="1.8175%" height="15" fill="rgb(234,67,33)"/><text x="52.0563%" y="159.50">i..</text></g><g><title>check_mod_item_types (217,221,282 samples, 1.82%)</title><rect x="51.8067%" y="133" width="1.8172%" height="15" fill="rgb(247,98,35)"/><text x="52.0567%" y="143.50">c..</text></g><g><title>typeck (26,804,667 samples, 0.22%)</title><rect x="53.3996%" y="117" width="0.2242%" height="15" fill="rgb(247,138,52)"/><text x="53.6496%" y="127.50"></text></g><g><title>fn_sig (34,602,460 samples, 0.29%)</title><rect x="53.8874%" y="117" width="0.2895%" height="15" fill="rgb(213,79,30)"/><text x="54.1374%" y="127.50"></text></g><g><title>lint_levels (28,699,758 samples, 0.24%)</title><rect x="54.5528%" y="69" width="0.2401%" height="15" fill="rgb(246,177,23)"/><text x="54.8028%" y="79.50"></text></g><g><title>is_late_bound_map (59,808,505 samples, 0.50%)</title><rect x="54.2944%" y="101" width="0.5003%" height="15" fill="rgb(230,62,27)"/><text x="54.5444%" y="111.50"></text></g><g><title>resolve_lifetimes (58,343,327 samples, 0.49%)</title><rect x="54.3066%" y="85" width="0.4881%" height="15" fill="rgb(216,154,8)"/><text x="54.5566%" y="95.50"></text></g><g><title>named_region_map (17,132,031 samples, 0.14%)</title><rect x="54.7947%" y="101" width="0.1433%" height="15" fill="rgb(244,35,45)"/><text x="55.0447%" y="111.50"></text></g><g><title>resolve_lifetimes (15,355,232 samples, 0.13%)</title><rect x="54.8096%" y="85" width="0.1285%" height="15" fill="rgb(251,115,12)"/><text x="55.0596%" y="95.50"></text></g><g><title>generics_of (92,328,266 samples, 0.77%)</title><rect x="54.1769%" y="117" width="0.7724%" height="15" fill="rgb(240,54,50)"/><text x="54.4269%" y="127.50"></text></g><g><title>explicit_predicates_of (20,133,580 samples, 0.17%)</title><rect x="55.1333%" y="85" width="0.1684%" height="15" fill="rgb(233,84,52)"/><text x="55.3833%" y="95.50"></text></g><g><title>predicates_of (50,038,562 samples, 0.42%)</title><rect x="54.9809%" y="117" width="0.4186%" height="15" fill="rgb(207,117,47)"/><text x="55.2309%" y="127.50"></text></g><g><title>predicates_defined_on (42,981,033 samples, 0.36%)</title><rect x="55.0399%" y="101" width="0.3596%" height="15" fill="rgb(249,43,39)"/><text x="55.2899%" y="111.50"></text></g><g><title>type_collecting (221,426,760 samples, 1.85%)</title><rect x="53.6240%" y="149" width="1.8523%" height="15" fill="rgb(209,38,44)"/><text x="53.8740%" y="159.50">t..</text></g><g><title>collect_mod_item_types (221,366,579 samples, 1.85%)</title><rect x="53.6245%" y="133" width="1.8518%" height="15" fill="rgb(236,212,23)"/><text x="53.8745%" y="143.50">c..</text></g><g><title>evaluate_obligation (30,798,355 samples, 0.26%)</title><rect x="57.7559%" y="117" width="0.2576%" height="15" fill="rgb(242,79,21)"/><text x="58.0059%" y="127.50"></text></g><g><title>implied_outlives_bounds (27,993,235 samples, 0.23%)</title><rect x="58.0296%" y="117" width="0.2342%" height="15" fill="rgb(211,96,35)"/><text x="58.2796%" y="127.50"></text></g><g><title>param_env (38,234,629 samples, 0.32%)</title><rect x="58.2645%" y="117" width="0.3199%" height="15" fill="rgb(253,215,40)"/><text x="58.5145%" y="127.50"></text></g><g><title>region_scope_tree (50,091,977 samples, 0.42%)</title><rect x="58.5852%" y="117" width="0.4190%" height="15" fill="rgb(211,81,21)"/><text x="58.8352%" y="127.50"></text></g><g><title>check_impl_item_well_formed (399,131,978 samples, 3.34%)</title><rect x="55.6685%" y="133" width="3.3389%" height="15" fill="rgb(208,190,38)"/><text x="55.9185%" y="143.50">che..</text></g><g><title>evaluate_obligation (23,071,110 samples, 0.19%)</title><rect x="59.7948%" y="117" width="0.1930%" height="15" fill="rgb(235,213,38)"/><text x="60.0448%" y="127.50"></text></g><g><title>param_env (20,876,659 samples, 0.17%)</title><rect x="60.0352%" y="117" width="0.1746%" height="15" fill="rgb(237,122,38)"/><text x="60.2852%" y="127.50"></text></g><g><title>check_item_well_formed (157,336,495 samples, 1.32%)</title><rect x="59.0074%" y="133" width="1.3162%" height="15" fill="rgb(244,218,35)"/><text x="59.2574%" y="143.50"></text></g><g><title>analysis (7,207,220,989 samples, 60.29%)</title><rect x="0.0362%" y="181" width="60.2921%" height="15" fill="rgb(240,68,47)"/><text x="0.2862%" y="191.50">analysis</text></g><g><title>type_check_crate (3,791,238,974 samples, 31.72%)</title><rect x="28.6126%" y="165" width="31.7157%" height="15" fill="rgb(210,16,53)"/><text x="28.8626%" y="175.50">type_check_crate</text></g><g><title>wf_checking (579,188,253 samples, 4.85%)</title><rect x="55.4831%" y="149" width="4.8452%" height="15" fill="rgb(235,124,12)"/><text x="55.7331%" y="159.50">wf_che..</text></g><g><title>AST_validation (26,521,704 samples, 0.22%)</title><rect x="60.3346%" y="165" width="0.2219%" height="15" fill="rgb(224,169,11)"/><text x="60.5846%" y="175.50"></text></g><g><title>complete_gated_feature_checking (16,345,582 samples, 0.14%)</title><rect x="60.5565%" y="165" width="0.1367%" height="15" fill="rgb(250,166,2)"/><text x="60.8065%" y="175.50"></text></g><g><title>macro_expand_crate (3,533,485,152 samples, 29.56%)</title><rect x="60.6936%" y="165" width="29.5594%" height="15" fill="rgb(242,216,29)"/><text x="60.9436%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (3,533,426,251 samples, 29.56%)</title><rect x="60.6941%" y="149" width="29.5589%" height="15" fill="rgb(230,116,27)"/><text x="60.9441%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (240,791,835 samples, 2.01%)</title><rect x="90.3554%" y="149" width="2.0143%" height="15" fill="rgb(228,99,48)"/><text x="90.6054%" y="159.50">l..</text></g><g><title>resolve_check_unused (13,225,736 samples, 0.11%)</title><rect x="92.3746%" y="149" width="0.1106%" height="15" fill="rgb(253,11,6)"/><text x="92.6246%" y="159.50"></text></g><g><title>resolve_postprocess (12,679,771 samples, 0.11%)</title><rect x="92.4853%" y="149" width="0.1061%" height="15" fill="rgb(247,143,39)"/><text x="92.7353%" y="159.50"></text></g><g><title>configure_and_expand (3,856,077,705 samples, 32.26%)</title><rect x="60.3333%" y="181" width="32.2581%" height="15" fill="rgb(236,97,10)"/><text x="60.5833%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (279,280,872 samples, 2.34%)</title><rect x="90.2550%" y="165" width="2.3363%" height="15" fill="rgb(233,208,19)"/><text x="90.5050%" y="175.50">r..</text></g><g><title>drop_ast (72,908,740 samples, 0.61%)</title><rect x="92.5914%" y="181" width="0.6099%" height="15" fill="rgb(216,164,2)"/><text x="92.8414%" y="191.50"></text></g><g><title>early_lint_checks (72,315,384 samples, 0.60%)</title><rect x="93.2015%" y="181" width="0.6050%" height="15" fill="rgb(220,129,5)"/><text x="93.4515%" y="191.50"></text></g><g><title>free_global_ctxt (61,058,478 samples, 0.51%)</title><rect x="93.8065%" y="181" width="0.5108%" height="15" fill="rgb(242,17,10)"/><text x="94.0565%" y="191.50"></text></g><g><title>generate_crate_metadata (271,912,960 samples, 2.27%)</title><rect x="94.3173%" y="181" width="2.2747%" height="15" fill="rgb(242,107,0)"/><text x="94.5673%" y="191.50">g..</text></g><g><title>hir_lowering (371,570,696 samples, 3.11%)</title><rect x="96.5919%" y="181" width="3.1084%" height="15" fill="rgb(251,28,31)"/><text x="96.8419%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (14,443,620 samples, 0.12%)</title><rect x="99.7519%" y="181" width="0.1208%" height="15" fill="rgb(233,223,10)"/><text x="100.0019%" y="191.50"></text></g><g><title>all (11,953,834,254 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (11,953,834,254 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (14,056,546 samples, 0.12%)</title><rect x="99.8824%" y="181" width="0.1176%" height="15" fill="rgb(244,5,23)"/><text x="100.1324%" y="191.50"></text></g></svg></svg>