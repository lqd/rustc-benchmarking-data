<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (128,911 samples, 0.15%)</title><rect x="8.8519%" y="101" width="0.1473%" height="15" fill="rgb(227,0,7)"/><text x="9.1019%" y="111.50"></text></g><g><title>item_attrs (111,780 samples, 0.13%)</title><rect x="9.2878%" y="69" width="0.1277%" height="15" fill="rgb(217,0,24)"/><text x="9.5378%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (108,180 samples, 0.12%)</title><rect x="9.2919%" y="53" width="0.1236%" height="15" fill="rgb(221,193,54)"/><text x="9.5419%" y="63.50"></text></g><g><title>codegen_fn_attrs (158,550 samples, 0.18%)</title><rect x="9.2416%" y="85" width="0.1812%" height="15" fill="rgb(248,212,6)"/><text x="9.4916%" y="95.50"></text></g><g><title>needs_drop_raw (549,938 samples, 0.63%)</title><rect x="11.0660%" y="69" width="0.6284%" height="15" fill="rgb(208,68,35)"/><text x="11.3160%" y="79.50"></text></g><g><title>is_copy_raw (470,867 samples, 0.54%)</title><rect x="11.1564%" y="53" width="0.5381%" height="15" fill="rgb(232,128,0)"/><text x="11.4064%" y="63.50"></text></g><g><title>evaluate_obligation (433,696 samples, 0.50%)</title><rect x="11.1989%" y="37" width="0.4956%" height="15" fill="rgb(207,160,47)"/><text x="11.4489%" y="47.50"></text></g><g><title>resolve_instance (135,491 samples, 0.15%)</title><rect x="11.6945%" y="69" width="0.1548%" height="15" fill="rgb(228,23,34)"/><text x="11.9445%" y="79.50"></text></g><g><title>thir_body (553,656 samples, 0.63%)</title><rect x="11.8621%" y="69" width="0.6327%" height="15" fill="rgb(218,30,26)"/><text x="12.1121%" y="79.50"></text></g><g><title>mir_const (3,648,248 samples, 4.17%)</title><rect x="8.3412%" y="117" width="4.1691%" height="15" fill="rgb(220,122,19)"/><text x="8.5912%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (3,072,513 samples, 3.51%)</title><rect x="8.9992%" y="101" width="3.5111%" height="15" fill="rgb(250,228,42)"/><text x="9.2492%" y="111.50">uns..</text></g><g><title>mir_built (2,701,861 samples, 3.09%)</title><rect x="9.4227%" y="85" width="3.0876%" height="15" fill="rgb(240,193,28)"/><text x="9.6727%" y="95.50">mir..</text></g><g><title>mir_promoted (4,280,475 samples, 4.89%)</title><rect x="7.7949%" y="133" width="4.8915%" height="15" fill="rgb(216,20,37)"/><text x="8.0449%" y="143.50">mir_pr..</text></g><g><title>mir_const_qualif (154,101 samples, 0.18%)</title><rect x="12.5103%" y="117" width="0.1761%" height="15" fill="rgb(206,188,39)"/><text x="12.7603%" y="127.50"></text></g><g><title>mir_const (111,100 samples, 0.13%)</title><rect x="12.5595%" y="101" width="0.1270%" height="15" fill="rgb(217,207,13)"/><text x="12.8095%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (250,033 samples, 0.29%)</title><rect x="12.6878%" y="133" width="0.2857%" height="15" fill="rgb(231,73,38)"/><text x="12.9378%" y="143.50"></text></g><g><title>type_op_prove_predicate (765,419 samples, 0.87%)</title><rect x="13.1459%" y="133" width="0.8747%" height="15" fill="rgb(225,20,46)"/><text x="13.3959%" y="143.50"></text></g><g><title>MIR_borrow_checking (11,120,625 samples, 12.71%)</title><rect x="1.3186%" y="165" width="12.7082%" height="15" fill="rgb(210,31,41)"/><text x="1.5686%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (11,064,795 samples, 12.64%)</title><rect x="1.3824%" y="149" width="12.6444%" height="15" fill="rgb(221,200,47)"/><text x="1.6324%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (153,732 samples, 0.18%)</title><rect x="14.0268%" y="165" width="0.1757%" height="15" fill="rgb(226,26,5)"/><text x="14.2768%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (122,552 samples, 0.14%)</title><rect x="14.0624%" y="149" width="0.1400%" height="15" fill="rgb(249,33,26)"/><text x="14.3124%" y="159.50"></text></g><g><title>hir_module_items (183,652 samples, 0.21%)</title><rect x="14.2025%" y="165" width="0.2099%" height="15" fill="rgb(235,183,28)"/><text x="14.4525%" y="175.50"></text></g><g><title>should_inherit_track_caller (172,572 samples, 0.20%)</title><rect x="14.7756%" y="117" width="0.1972%" height="15" fill="rgb(221,5,38)"/><text x="15.0256%" y="127.50"></text></g><g><title>codegen_fn_attrs (315,804 samples, 0.36%)</title><rect x="14.6369%" y="133" width="0.3609%" height="15" fill="rgb(247,18,42)"/><text x="14.8869%" y="143.50"></text></g><g><title>check_mod_attrs (490,586 samples, 0.56%)</title><rect x="14.4380%" y="149" width="0.5606%" height="15" fill="rgb(241,131,45)"/><text x="14.6880%" y="159.50"></text></g><g><title>lookup_deprecation_entry (92,620 samples, 0.11%)</title><rect x="15.2646%" y="133" width="0.1058%" height="15" fill="rgb(249,31,29)"/><text x="15.5146%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (265,272 samples, 0.30%)</title><rect x="15.1412%" y="149" width="0.3031%" height="15" fill="rgb(225,111,53)"/><text x="15.3912%" y="159.50"></text></g><g><title>misc_checking_1 (966,830 samples, 1.10%)</title><rect x="14.4130%" y="165" width="1.1049%" height="15" fill="rgb(238,160,17)"/><text x="14.6630%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (172,462 samples, 0.20%)</title><rect x="15.5200%" y="149" width="0.1971%" height="15" fill="rgb(214,148,48)"/><text x="15.7700%" y="159.50"></text></g><g><title>check_mod_liveness (117,701 samples, 0.13%)</title><rect x="15.5826%" y="133" width="0.1345%" height="15" fill="rgb(232,36,49)"/><text x="15.8326%" y="143.50"></text></g><g><title>misc_checking_2 (710,428 samples, 0.81%)</title><rect x="15.5179%" y="165" width="0.8118%" height="15" fill="rgb(209,103,24)"/><text x="15.7679%" y="175.50"></text></g><g><title>match_checking (536,086 samples, 0.61%)</title><rect x="15.7171%" y="149" width="0.6126%" height="15" fill="rgb(229,88,8)"/><text x="15.9671%" y="159.50"></text></g><g><title>check_match (519,966 samples, 0.59%)</title><rect x="15.7356%" y="133" width="0.5942%" height="15" fill="rgb(213,181,19)"/><text x="15.9856%" y="143.50"></text></g><g><title>check_private_in_public (115,552 samples, 0.13%)</title><rect x="16.3403%" y="149" width="0.1320%" height="15" fill="rgb(254,191,54)"/><text x="16.5903%" y="159.50"></text></g><g><title>death_checking (309,673 samples, 0.35%)</title><rect x="16.4723%" y="149" width="0.3539%" height="15" fill="rgb(241,83,37)"/><text x="16.7223%" y="159.50"></text></g><g><title>item_attrs (115,580 samples, 0.13%)</title><rect x="16.6941%" y="133" width="0.1321%" height="15" fill="rgb(233,36,39)"/><text x="16.9441%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (114,280 samples, 0.13%)</title><rect x="16.6956%" y="117" width="0.1306%" height="15" fill="rgb(226,3,54)"/><text x="16.9456%" y="127.50"></text></g><g><title>param_env (118,712 samples, 0.14%)</title><rect x="17.5213%" y="117" width="0.1357%" height="15" fill="rgb(245,192,40)"/><text x="17.7713%" y="127.50"></text></g><g><title>crate_lints (1,790,880 samples, 2.05%)</title><rect x="16.8278%" y="133" width="2.0465%" height="15" fill="rgb(238,167,29)"/><text x="17.0778%" y="143.50">c..</text></g><g><title>type_of (1,063,695 samples, 1.22%)</title><rect x="17.6588%" y="117" width="1.2155%" height="15" fill="rgb(232,182,51)"/><text x="17.9088%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (832,032 samples, 0.95%)</title><rect x="17.9235%" y="101" width="0.9508%" height="15" fill="rgb(231,60,39)"/><text x="18.1735%" y="111.50"></text></g><g><title>lint_checking (2,016,583 samples, 2.30%)</title><rect x="16.8262%" y="149" width="2.3045%" height="15" fill="rgb(208,69,12)"/><text x="17.0762%" y="159.50">l..</text></g><g><title>module_lints (224,342 samples, 0.26%)</title><rect x="18.8743%" y="133" width="0.2564%" height="15" fill="rgb(235,93,37)"/><text x="19.1243%" y="143.50"></text></g><g><title>lint_mod (220,971 samples, 0.25%)</title><rect x="18.8782%" y="117" width="0.2525%" height="15" fill="rgb(213,116,39)"/><text x="19.1282%" y="127.50"></text></g><g><title>privacy_access_levels (155,681 samples, 0.18%)</title><rect x="19.1307%" y="149" width="0.1779%" height="15" fill="rgb(222,207,29)"/><text x="19.3807%" y="159.50"></text></g><g><title>privacy_checking_modules (373,514 samples, 0.43%)</title><rect x="19.3086%" y="149" width="0.4268%" height="15" fill="rgb(206,96,30)"/><text x="19.5586%" y="159.50"></text></g><g><title>check_mod_privacy (371,714 samples, 0.42%)</title><rect x="19.3106%" y="133" width="0.4248%" height="15" fill="rgb(218,138,4)"/><text x="19.5606%" y="143.50"></text></g><g><title>misc_checking_3 (3,000,063 samples, 3.43%)</title><rect x="16.3297%" y="165" width="3.4283%" height="15" fill="rgb(250,191,14)"/><text x="16.5797%" y="175.50">mis..</text></g><g><title>impl_trait_ref (144,682 samples, 0.17%)</title><rect x="20.1242%" y="69" width="0.1653%" height="15" fill="rgb(239,60,40)"/><text x="20.3742%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (125,752 samples, 0.14%)</title><rect x="20.1458%" y="53" width="0.1437%" height="15" fill="rgb(206,27,48)"/><text x="20.3958%" y="63.50"></text></g><g><title>adt_destructor (384,154 samples, 0.44%)</title><rect x="19.8851%" y="117" width="0.4390%" height="15" fill="rgb(225,35,8)"/><text x="20.1351%" y="127.50"></text></g><g><title>coherent_trait (370,974 samples, 0.42%)</title><rect x="19.9001%" y="101" width="0.4239%" height="15" fill="rgb(250,213,24)"/><text x="20.1501%" y="111.50"></text></g><g><title>specialization_graph_of (369,894 samples, 0.42%)</title><rect x="19.9014%" y="85" width="0.4227%" height="15" fill="rgb(247,123,22)"/><text x="20.1514%" y="95.50"></text></g><g><title>param_env (111,432 samples, 0.13%)</title><rect x="20.4215%" y="117" width="0.1273%" height="15" fill="rgb(231,138,38)"/><text x="20.6715%" y="127.50"></text></g><g><title>impl_parent (2,300,469 samples, 2.63%)</title><rect x="24.6280%" y="101" width="2.6289%" height="15" fill="rgb(231,145,46)"/><text x="24.8780%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,345,221 samples, 1.54%)</title><rect x="25.7196%" y="85" width="1.5373%" height="15" fill="rgb(251,118,11)"/><text x="25.9696%" y="95.50"></text></g><g><title>impl_trait_ref (5,389,716 samples, 6.16%)</title><rect x="27.2569%" y="101" width="6.1591%" height="15" fill="rgb(217,147,25)"/><text x="27.5069%" y="111.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,019,036 samples, 4.59%)</title><rect x="28.8232%" y="85" width="4.5928%" height="15" fill="rgb(247,81,37)"/><text x="29.0732%" y="95.50">metad..</text></g><g><title>coherent_trait (12,675,453 samples, 14.48%)</title><rect x="19.8388%" y="133" width="14.4850%" height="15" fill="rgb(209,12,38)"/><text x="20.0888%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (12,054,135 samples, 13.77%)</title><rect x="20.5488%" y="117" width="13.7750%" height="15" fill="rgb(227,1,9)"/><text x="20.7988%" y="127.50">specialization_graph_..</text></g><g><title>trait_impls_of (792,307 samples, 0.91%)</title><rect x="33.4183%" y="101" width="0.9054%" height="15" fill="rgb(248,47,43)"/><text x="33.6683%" y="111.50"></text></g><g><title>implementations_of_trait (198,700 samples, 0.23%)</title><rect x="34.0967%" y="85" width="0.2271%" height="15" fill="rgb(221,10,30)"/><text x="34.3467%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (160,510 samples, 0.18%)</title><rect x="34.1403%" y="69" width="0.1834%" height="15" fill="rgb(210,229,1)"/><text x="34.3903%" y="79.50"></text></g><g><title>coherence_checking (12,751,803 samples, 14.57%)</title><rect x="19.8076%" y="149" width="14.5722%" height="15" fill="rgb(222,148,37)"/><text x="20.0576%" y="159.50">coherence_checking</text></g><g><title>associated_item (170,881 samples, 0.20%)</title><rect x="45.0697%" y="85" width="0.1953%" height="15" fill="rgb(234,67,33)"/><text x="45.3197%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (131,650 samples, 0.15%)</title><rect x="45.1145%" y="69" width="0.1504%" height="15" fill="rgb(247,98,35)"/><text x="45.3645%" y="79.50"></text></g><g><title>associated_items (259,893 samples, 0.30%)</title><rect x="44.9802%" y="101" width="0.2970%" height="15" fill="rgb(247,138,52)"/><text x="45.2302%" y="111.50"></text></g><g><title>generics_of (723,434 samples, 0.83%)</title><rect x="47.2118%" y="85" width="0.8267%" height="15" fill="rgb(213,79,30)"/><text x="47.4618%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (601,443 samples, 0.69%)</title><rect x="47.3512%" y="69" width="0.6873%" height="15" fill="rgb(246,177,23)"/><text x="47.6012%" y="79.50"></text></g><g><title>impl_trait_ref (741,483 samples, 0.85%)</title><rect x="48.0767%" y="85" width="0.8473%" height="15" fill="rgb(230,62,27)"/><text x="48.3267%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (621,071 samples, 0.71%)</title><rect x="48.2143%" y="69" width="0.7097%" height="15" fill="rgb(216,154,8)"/><text x="48.4643%" y="79.50"></text></g><g><title>predicates_of (177,312 samples, 0.20%)</title><rect x="48.9382%" y="85" width="0.2026%" height="15" fill="rgb(244,35,45)"/><text x="49.1882%" y="95.50"></text></g><g><title>predicates_defined_on (95,502 samples, 0.11%)</title><rect x="49.0317%" y="69" width="0.1091%" height="15" fill="rgb(251,115,12)"/><text x="49.2817%" y="79.50"></text></g><g><title>specializes (394,674 samples, 0.45%)</title><rect x="49.1409%" y="85" width="0.4510%" height="15" fill="rgb(240,54,50)"/><text x="49.3909%" y="95.50"></text></g><g><title>param_env (231,573 samples, 0.26%)</title><rect x="49.3272%" y="69" width="0.2646%" height="15" fill="rgb(233,84,52)"/><text x="49.5772%" y="79.50"></text></g><g><title>def_span (89,661 samples, 0.10%)</title><rect x="49.4894%" y="53" width="0.1025%" height="15" fill="rgb(207,117,47)"/><text x="49.7394%" y="63.50"></text></g><g><title>trait_impls_of (106,442 samples, 0.12%)</title><rect x="49.5971%" y="85" width="0.1216%" height="15" fill="rgb(249,43,39)"/><text x="49.8471%" y="95.50"></text></g><g><title>evaluate_obligation (3,806,972 samples, 4.35%)</title><rect x="45.3892%" y="101" width="4.3504%" height="15" fill="rgb(209,38,44)"/><text x="45.6392%" y="111.50">evalu..</text></g><g><title>generics_of (619,168 samples, 0.71%)</title><rect x="49.8080%" y="101" width="0.7076%" height="15" fill="rgb(236,212,23)"/><text x="50.0580%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (491,197 samples, 0.56%)</title><rect x="49.9543%" y="85" width="0.5613%" height="15" fill="rgb(242,79,21)"/><text x="50.2043%" y="95.50"></text></g><g><title>object_safety_violations (159,081 samples, 0.18%)</title><rect x="50.7831%" y="101" width="0.1818%" height="15" fill="rgb(211,96,35)"/><text x="51.0331%" y="111.50"></text></g><g><title>predicates_of (169,981 samples, 0.19%)</title><rect x="51.0007%" y="101" width="0.1942%" height="15" fill="rgb(253,215,40)"/><text x="51.2507%" y="111.50"></text></g><g><title>predicates_defined_on (110,920 samples, 0.13%)</title><rect x="51.0682%" y="85" width="0.1268%" height="15" fill="rgb(211,81,21)"/><text x="51.3182%" y="95.50"></text></g><g><title>specializes (88,811 samples, 0.10%)</title><rect x="51.2022%" y="101" width="0.1015%" height="15" fill="rgb(208,190,38)"/><text x="51.4522%" y="111.50"></text></g><g><title>associated_item (147,732 samples, 0.17%)</title><rect x="53.7027%" y="69" width="0.1688%" height="15" fill="rgb(235,213,38)"/><text x="53.9527%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (112,421 samples, 0.13%)</title><rect x="53.7431%" y="53" width="0.1285%" height="15" fill="rgb(237,122,38)"/><text x="53.9931%" y="63.50"></text></g><g><title>associated_items (215,553 samples, 0.25%)</title><rect x="53.6325%" y="85" width="0.2463%" height="15" fill="rgb(244,218,35)"/><text x="53.8825%" y="95.50"></text></g><g><title>evaluate_obligation (232,752 samples, 0.27%)</title><rect x="53.9697%" y="85" width="0.2660%" height="15" fill="rgb(240,68,47)"/><text x="54.2197%" y="95.50"></text></g><g><title>typeck (2,841,312 samples, 3.25%)</title><rect x="51.3817%" y="101" width="3.2469%" height="15" fill="rgb(210,16,53)"/><text x="51.6317%" y="111.50">typ..</text></g><g><title>item_bodies_checking (17,712,139 samples, 20.24%)</title><rect x="34.4068%" y="149" width="20.2407%" height="15" fill="rgb(235,124,12)"/><text x="34.6568%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,709,119 samples, 20.24%)</title><rect x="34.4103%" y="133" width="20.2372%" height="15" fill="rgb(224,169,11)"/><text x="34.6603%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (17,670,059 samples, 20.19%)</title><rect x="34.4549%" y="117" width="20.1926%" height="15" fill="rgb(250,166,2)"/><text x="34.7049%" y="127.50">typeck</text></g><g><title>item_types_checking (551,486 samples, 0.63%)</title><rect x="54.6475%" y="149" width="0.6302%" height="15" fill="rgb(242,216,29)"/><text x="54.8975%" y="159.50"></text></g><g><title>check_mod_item_types (548,516 samples, 0.63%)</title><rect x="54.6509%" y="133" width="0.6268%" height="15" fill="rgb(230,116,27)"/><text x="54.9009%" y="143.50"></text></g><g><title>fn_sig (243,323 samples, 0.28%)</title><rect x="55.4938%" y="117" width="0.2781%" height="15" fill="rgb(228,99,48)"/><text x="55.7438%" y="127.50"></text></g><g><title>named_region_map (95,150 samples, 0.11%)</title><rect x="55.8447%" y="101" width="0.1087%" height="15" fill="rgb(253,11,6)"/><text x="56.0947%" y="111.50"></text></g><g><title>generics_of (170,191 samples, 0.19%)</title><rect x="55.7718%" y="117" width="0.1945%" height="15" fill="rgb(247,143,39)"/><text x="56.0218%" y="127.50"></text></g><g><title>late_bound_vars_map (212,312 samples, 0.24%)</title><rect x="56.2614%" y="69" width="0.2426%" height="15" fill="rgb(236,97,10)"/><text x="56.5114%" y="79.50"></text></g><g><title>resolve_lifetimes (205,242 samples, 0.23%)</title><rect x="56.2695%" y="53" width="0.2345%" height="15" fill="rgb(233,208,19)"/><text x="56.5195%" y="63.50"></text></g><g><title>lint_levels (93,321 samples, 0.11%)</title><rect x="56.3973%" y="37" width="0.1066%" height="15" fill="rgb(216,164,2)"/><text x="56.6473%" y="47.50"></text></g><g><title>explicit_predicates_of (334,274 samples, 0.38%)</title><rect x="56.1334%" y="85" width="0.3820%" height="15" fill="rgb(220,129,5)"/><text x="56.3834%" y="95.50"></text></g><g><title>predicates_of (525,635 samples, 0.60%)</title><rect x="56.0289%" y="117" width="0.6007%" height="15" fill="rgb(242,17,10)"/><text x="56.2789%" y="127.50"></text></g><g><title>predicates_defined_on (490,755 samples, 0.56%)</title><rect x="56.0687%" y="101" width="0.5608%" height="15" fill="rgb(242,107,0)"/><text x="56.3187%" y="111.50"></text></g><g><title>inferred_outlives_of (99,861 samples, 0.11%)</title><rect x="56.5154%" y="85" width="0.1141%" height="15" fill="rgb(251,28,31)"/><text x="56.7654%" y="95.50"></text></g><g><title>super_predicates_of (104,861 samples, 0.12%)</title><rect x="56.6295%" y="117" width="0.1198%" height="15" fill="rgb(233,223,10)"/><text x="56.8795%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (100,321 samples, 0.11%)</title><rect x="56.6347%" y="101" width="0.1146%" height="15" fill="rgb(215,21,27)"/><text x="56.8847%" y="111.50"></text></g><g><title>type_collecting (1,369,436 samples, 1.56%)</title><rect x="55.2796%" y="149" width="1.5649%" height="15" fill="rgb(232,23,21)"/><text x="55.5296%" y="159.50"></text></g><g><title>collect_mod_item_types (1,361,725 samples, 1.56%)</title><rect x="55.2884%" y="133" width="1.5561%" height="15" fill="rgb(244,5,23)"/><text x="55.5384%" y="143.50"></text></g><g><title>evaluate_obligation (216,373 samples, 0.25%)</title><rect x="57.9822%" y="117" width="0.2473%" height="15" fill="rgb(226,81,46)"/><text x="58.2322%" y="127.50"></text></g><g><title>implied_outlives_bounds (108,122 samples, 0.12%)</title><rect x="58.2423%" y="117" width="0.1236%" height="15" fill="rgb(247,70,30)"/><text x="58.4923%" y="127.50"></text></g><g><title>param_env (155,865 samples, 0.18%)</title><rect x="58.3659%" y="117" width="0.1781%" height="15" fill="rgb(212,68,19)"/><text x="58.6159%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,659,382 samples, 1.90%)</title><rect x="56.9667%" y="133" width="1.8963%" height="15" fill="rgb(240,187,13)"/><text x="57.2167%" y="143.50">c..</text></g><g><title>region_scope_tree (256,351 samples, 0.29%)</title><rect x="58.5700%" y="117" width="0.2929%" height="15" fill="rgb(223,113,26)"/><text x="58.8200%" y="127.50"></text></g><g><title>evaluate_obligation (402,453 samples, 0.46%)</title><rect x="59.8866%" y="117" width="0.4599%" height="15" fill="rgb(206,192,2)"/><text x="60.1366%" y="127.50"></text></g><g><title>param_env (163,131 samples, 0.19%)</title><rect x="60.4483%" y="117" width="0.1864%" height="15" fill="rgb(241,108,4)"/><text x="60.6983%" y="127.50"></text></g><g><title>trait_impls_of (90,931 samples, 0.10%)</title><rect x="60.7643%" y="117" width="0.1039%" height="15" fill="rgb(247,173,49)"/><text x="61.0143%" y="127.50"></text></g><g><title>check_item_well_formed (1,809,027 samples, 2.07%)</title><rect x="58.8629%" y="133" width="2.0673%" height="15" fill="rgb(224,114,35)"/><text x="59.1129%" y="143.50">c..</text></g><g><title>analysis (52,587,919 samples, 60.10%)</title><rect x="0.9462%" y="181" width="60.0953%" height="15" fill="rgb(245,159,27)"/><text x="1.1962%" y="191.50">analysis</text></g><g><title>type_check_crate (36,126,115 samples, 41.28%)</title><rect x="19.7581%" y="165" width="41.2834%" height="15" fill="rgb(245,172,44)"/><text x="20.0081%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,670,161 samples, 4.19%)</title><rect x="56.8474%" y="149" width="4.1941%" height="15" fill="rgb(236,23,11)"/><text x="57.0974%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (97,361 samples, 0.11%)</title><rect x="60.9302%" y="133" width="0.1113%" height="15" fill="rgb(205,117,38)"/><text x="61.1802%" y="143.50"></text></g><g><title>codegen_crate (355,344 samples, 0.41%)</title><rect x="61.0562%" y="181" width="0.4061%" height="15" fill="rgb(237,72,25)"/><text x="61.3062%" y="191.50"></text></g><g><title>AST_validation (204,413 samples, 0.23%)</title><rect x="61.7122%" y="165" width="0.2336%" height="15" fill="rgb(244,70,9)"/><text x="61.9622%" y="175.50"></text></g><g><title>complete_gated_feature_checking (95,661 samples, 0.11%)</title><rect x="61.9458%" y="165" width="0.1093%" height="15" fill="rgb(217,125,39)"/><text x="62.1958%" y="175.50"></text></g><g><title>crate_injection (94,721 samples, 0.11%)</title><rect x="62.0551%" y="165" width="0.1082%" height="15" fill="rgb(235,36,10)"/><text x="62.3051%" y="175.50"></text></g><g><title>metadata_load_macro (206,771 samples, 0.24%)</title><rect x="78.4204%" y="133" width="0.2363%" height="15" fill="rgb(251,123,47)"/><text x="78.6704%" y="143.50"></text></g><g><title>metadata_register_crate (2,660,600 samples, 3.04%)</title><rect x="78.6567%" y="133" width="3.0404%" height="15" fill="rgb(221,13,13)"/><text x="78.9067%" y="143.50">met..</text></g><g><title>metadata_register_crate (991,772 samples, 1.13%)</title><rect x="80.5638%" y="117" width="1.1334%" height="15" fill="rgb(238,131,9)"/><text x="80.8138%" y="127.50"></text></g><g><title>macro_expand_crate (17,160,352 samples, 19.61%)</title><rect x="62.1633%" y="165" width="19.6101%" height="15" fill="rgb(211,50,8)"/><text x="62.4133%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (17,143,182 samples, 19.59%)</title><rect x="62.1830%" y="149" width="19.5905%" height="15" fill="rgb(245,182,24)"/><text x="62.4330%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (221,812 samples, 0.25%)</title><rect x="81.7804%" y="165" width="0.2535%" height="15" fill="rgb(242,14,37)"/><text x="82.0304%" y="175.50"></text></g><g><title>finalize_macro_resolutions (335,364 samples, 0.38%)</title><rect x="82.1132%" y="149" width="0.3832%" height="15" fill="rgb(246,228,12)"/><text x="82.3632%" y="159.50"></text></g><g><title>late_resolve_crate (2,946,213 samples, 3.37%)</title><rect x="82.4965%" y="149" width="3.3668%" height="15" fill="rgb(213,55,15)"/><text x="82.7465%" y="159.50">lat..</text></g><g><title>configure_and_expand (21,495,392 samples, 24.56%)</title><rect x="61.4623%" y="181" width="24.5640%" height="15" fill="rgb(209,9,3)"/><text x="61.7123%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,493,650 samples, 3.99%)</title><rect x="82.0339%" y="165" width="3.9924%" height="15" fill="rgb(230,59,30)"/><text x="82.2839%" y="175.50">reso..</text></g><g><title>drop_ast (168,682 samples, 0.19%)</title><rect x="86.0263%" y="181" width="0.1928%" height="15" fill="rgb(209,121,21)"/><text x="86.2763%" y="191.50"></text></g><g><title>early_lint_checks (444,775 samples, 0.51%)</title><rect x="86.2373%" y="181" width="0.5083%" height="15" fill="rgb(220,109,13)"/><text x="86.4873%" y="191.50"></text></g><g><title>free_global_ctxt (3,351,477 samples, 3.83%)</title><rect x="86.7456%" y="181" width="3.8299%" height="15" fill="rgb(232,18,1)"/><text x="86.9956%" y="191.50">free..</text></g><g><title>mir_for_ctfe (142,202 samples, 0.16%)</title><rect x="91.5294%" y="165" width="0.1625%" height="15" fill="rgb(215,41,42)"/><text x="91.7794%" y="175.50"></text></g><g><title>generate_crate_metadata (1,037,772 samples, 1.19%)</title><rect x="90.5755%" y="181" width="1.1859%" height="15" fill="rgb(224,123,36)"/><text x="90.8255%" y="191.50"></text></g><g><title>hir_lowering (2,665,280 samples, 3.05%)</title><rect x="91.7614%" y="181" width="3.0458%" height="15" fill="rgb(240,125,3)"/><text x="92.0114%" y="191.50">hir..</text></g><g><title>parse_crate (2,875,982 samples, 3.29%)</title><rect x="94.8660%" y="181" width="3.2866%" height="15" fill="rgb(205,98,50)"/><text x="95.1160%" y="191.50">par..</text></g><g><title>prepare_outputs (357,974 samples, 0.41%)</title><rect x="98.1621%" y="181" width="0.4091%" height="15" fill="rgb(205,185,37)"/><text x="98.4121%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (816,569 samples, 0.93%)</title><rect x="98.5712%" y="181" width="0.9331%" height="15" fill="rgb(238,207,15)"/><text x="98.8212%" y="191.50"></text></g><g><title>setup_global_ctxt (114,831 samples, 0.13%)</title><rect x="99.5167%" y="181" width="0.1312%" height="15" fill="rgb(213,199,42)"/><text x="99.7667%" y="191.50"></text></g><g><title>all (87,507,611 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (87,507,611 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (308,123 samples, 0.35%)</title><rect x="99.6479%" y="181" width="0.3521%" height="15" fill="rgb(241,35,35)"/><text x="99.8979%" y="191.50"></text></g></svg></svg>