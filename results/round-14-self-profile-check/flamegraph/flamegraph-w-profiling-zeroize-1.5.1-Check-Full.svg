<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (145,531 samples, 0.16%)</title><rect x="10.2618%" y="117" width="0.1560%" height="15" fill="rgb(227,0,7)"/><text x="10.5118%" y="127.50"></text></g><g><title>item_attrs (113,701 samples, 0.12%)</title><rect x="10.8787%" y="85" width="0.1219%" height="15" fill="rgb(217,0,24)"/><text x="11.1287%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (109,751 samples, 0.12%)</title><rect x="10.8829%" y="69" width="0.1177%" height="15" fill="rgb(221,193,54)"/><text x="11.1329%" y="79.50"></text></g><g><title>codegen_fn_attrs (226,494 samples, 0.24%)</title><rect x="10.7730%" y="101" width="0.2428%" height="15" fill="rgb(248,212,6)"/><text x="11.0230%" y="111.50"></text></g><g><title>is_copy_raw (95,462 samples, 0.10%)</title><rect x="12.9482%" y="53" width="0.1024%" height="15" fill="rgb(208,68,35)"/><text x="13.1982%" y="63.50"></text></g><g><title>adt_drop_tys (130,932 samples, 0.14%)</title><rect x="12.9380%" y="69" width="0.1404%" height="15" fill="rgb(232,128,0)"/><text x="13.1880%" y="79.50"></text></g><g><title>needs_drop_raw (424,665 samples, 0.46%)</title><rect x="12.8708%" y="85" width="0.4553%" height="15" fill="rgb(207,160,47)"/><text x="13.1208%" y="95.50"></text></g><g><title>is_copy_raw (231,132 samples, 0.25%)</title><rect x="13.0783%" y="69" width="0.2478%" height="15" fill="rgb(228,23,34)"/><text x="13.3283%" y="79.50"></text></g><g><title>evaluate_obligation (163,221 samples, 0.17%)</title><rect x="13.1512%" y="53" width="0.1750%" height="15" fill="rgb(218,30,26)"/><text x="13.4012%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (295,722 samples, 0.32%)</title><rect x="13.5730%" y="69" width="0.3171%" height="15" fill="rgb(220,122,19)"/><text x="13.8230%" y="79.50"></text></g><g><title>impl_parent (97,760 samples, 0.10%)</title><rect x="14.0863%" y="53" width="0.1048%" height="15" fill="rgb(250,228,42)"/><text x="14.3363%" y="63.50"></text></g><g><title>specialization_graph_of (462,956 samples, 0.50%)</title><rect x="13.9219%" y="69" width="0.4964%" height="15" fill="rgb(240,193,28)"/><text x="14.1719%" y="79.50"></text></g><g><title>impl_trait_ref (211,785 samples, 0.23%)</title><rect x="14.1912%" y="53" width="0.2271%" height="15" fill="rgb(216,20,37)"/><text x="14.4412%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (181,975 samples, 0.20%)</title><rect x="14.2231%" y="37" width="0.1951%" height="15" fill="rgb(206,188,39)"/><text x="14.4731%" y="47.50"></text></g><g><title>resolve_instance (1,105,433 samples, 1.19%)</title><rect x="13.3262%" y="85" width="1.1852%" height="15" fill="rgb(217,207,13)"/><text x="13.5762%" y="95.50"></text></g><g><title>thir_body (651,368 samples, 0.70%)</title><rect x="14.5345%" y="85" width="0.6984%" height="15" fill="rgb(231,73,38)"/><text x="14.7845%" y="95.50"></text></g><g><title>mir_const (5,237,635 samples, 5.62%)</title><rect x="9.6298%" y="133" width="5.6156%" height="15" fill="rgb(225,20,46)"/><text x="9.8798%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (4,502,686 samples, 4.83%)</title><rect x="10.4178%" y="117" width="4.8276%" height="15" fill="rgb(210,31,41)"/><text x="10.6678%" y="127.50">unsafe..</text></g><g><title>mir_built (3,944,898 samples, 4.23%)</title><rect x="11.0158%" y="101" width="4.2295%" height="15" fill="rgb(221,200,47)"/><text x="11.2658%" y="111.50">mir_b..</text></g><g><title>mir_promoted (5,864,492 samples, 6.29%)</title><rect x="9.0543%" y="149" width="6.2876%" height="15" fill="rgb(226,26,5)"/><text x="9.3043%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (111,721 samples, 0.12%)</title><rect x="15.3426%" y="149" width="0.1198%" height="15" fill="rgb(249,33,26)"/><text x="15.5926%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (182,281 samples, 0.20%)</title><rect x="15.4624%" y="149" width="0.1954%" height="15" fill="rgb(235,183,28)"/><text x="15.7124%" y="159.50"></text></g><g><title>normalize_projection_ty (116,721 samples, 0.13%)</title><rect x="15.5327%" y="133" width="0.1251%" height="15" fill="rgb(221,5,38)"/><text x="15.7827%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,380,425 samples, 1.48%)</title><rect x="15.6579%" y="149" width="1.4800%" height="15" fill="rgb(247,18,42)"/><text x="15.9079%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,904,438 samples, 15.98%)</title><rect x="1.1605%" y="181" width="15.9799%" height="15" fill="rgb(241,131,45)"/><text x="1.4105%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,804,238 samples, 15.87%)</title><rect x="1.2679%" y="165" width="15.8724%" height="15" fill="rgb(249,31,29)"/><text x="1.5179%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (139,622 samples, 0.15%)</title><rect x="17.1403%" y="181" width="0.1497%" height="15" fill="rgb(225,111,53)"/><text x="17.3903%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (94,921 samples, 0.10%)</title><rect x="17.1882%" y="165" width="0.1018%" height="15" fill="rgb(238,160,17)"/><text x="17.4382%" y="175.50"></text></g><g><title>hir_module_items (169,642 samples, 0.18%)</title><rect x="17.2900%" y="181" width="0.1819%" height="15" fill="rgb(214,148,48)"/><text x="17.5400%" y="191.50"></text></g><g><title>codegen_fn_attrs (93,831 samples, 0.10%)</title><rect x="17.9336%" y="117" width="0.1006%" height="15" fill="rgb(232,36,49)"/><text x="18.1836%" y="127.50"></text></g><g><title>should_inherit_track_caller (200,822 samples, 0.22%)</title><rect x="17.8252%" y="133" width="0.2153%" height="15" fill="rgb(209,103,24)"/><text x="18.0752%" y="143.50"></text></g><g><title>codegen_fn_attrs (356,303 samples, 0.38%)</title><rect x="17.6788%" y="149" width="0.3820%" height="15" fill="rgb(229,88,8)"/><text x="17.9288%" y="159.50"></text></g><g><title>check_mod_attrs (529,786 samples, 0.57%)</title><rect x="17.4929%" y="165" width="0.5680%" height="15" fill="rgb(213,181,19)"/><text x="17.7429%" y="175.50"></text></g><g><title>lookup_stability (142,072 samples, 0.15%)</title><rect x="18.5528%" y="149" width="0.1523%" height="15" fill="rgb(254,191,54)"/><text x="18.8028%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (510,596 samples, 0.55%)</title><rect x="18.2134%" y="165" width="0.5474%" height="15" fill="rgb(241,83,37)"/><text x="18.4634%" y="175.50"></text></g><g><title>misc_checking_1 (1,260,275 samples, 1.35%)</title><rect x="17.4724%" y="181" width="1.3512%" height="15" fill="rgb(233,36,39)"/><text x="17.7224%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (286,163 samples, 0.31%)</title><rect x="18.8255%" y="165" width="0.3068%" height="15" fill="rgb(226,3,54)"/><text x="19.0755%" y="175.50"></text></g><g><title>check_mod_liveness (228,672 samples, 0.25%)</title><rect x="18.8871%" y="149" width="0.2452%" height="15" fill="rgb(245,192,40)"/><text x="19.1371%" y="159.50"></text></g><g><title>misc_checking_2 (598,697 samples, 0.64%)</title><rect x="18.8236%" y="181" width="0.6419%" height="15" fill="rgb(238,167,29)"/><text x="19.0736%" y="191.50"></text></g><g><title>match_checking (310,734 samples, 0.33%)</title><rect x="19.1323%" y="165" width="0.3332%" height="15" fill="rgb(232,182,51)"/><text x="19.3823%" y="175.50"></text></g><g><title>check_match (286,573 samples, 0.31%)</title><rect x="19.1582%" y="149" width="0.3073%" height="15" fill="rgb(231,60,39)"/><text x="19.4082%" y="159.50"></text></g><g><title>check_private_in_public (199,942 samples, 0.21%)</title><rect x="19.4759%" y="165" width="0.2144%" height="15" fill="rgb(208,69,12)"/><text x="19.7259%" y="175.50"></text></g><g><title>codegen_fn_attrs (95,532 samples, 0.10%)</title><rect x="19.9513%" y="149" width="0.1024%" height="15" fill="rgb(235,93,37)"/><text x="20.2013%" y="159.50"></text></g><g><title>death_checking (462,565 samples, 0.50%)</title><rect x="19.6902%" y="165" width="0.4959%" height="15" fill="rgb(213,116,39)"/><text x="19.9402%" y="175.50"></text></g><g><title>item_attrs (110,401 samples, 0.12%)</title><rect x="20.0678%" y="149" width="0.1184%" height="15" fill="rgb(222,207,29)"/><text x="20.3178%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (108,881 samples, 0.12%)</title><rect x="20.0694%" y="133" width="0.1167%" height="15" fill="rgb(206,96,30)"/><text x="20.3194%" y="143.50"></text></g><g><title>param_env (228,132 samples, 0.24%)</title><rect x="20.8790%" y="133" width="0.2446%" height="15" fill="rgb(218,138,4)"/><text x="21.1290%" y="143.50"></text></g><g><title>predicates_of (101,150 samples, 0.11%)</title><rect x="21.0151%" y="117" width="0.1084%" height="15" fill="rgb(250,191,14)"/><text x="21.2651%" y="127.50"></text></g><g><title>crate_lints (1,274,465 samples, 1.37%)</title><rect x="20.1877%" y="149" width="1.3664%" height="15" fill="rgb(239,60,40)"/><text x="20.4377%" y="159.50"></text></g><g><title>type_of (399,314 samples, 0.43%)</title><rect x="21.1260%" y="133" width="0.4281%" height="15" fill="rgb(206,27,48)"/><text x="21.3760%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (309,193 samples, 0.33%)</title><rect x="21.2226%" y="117" width="0.3315%" height="15" fill="rgb(225,35,8)"/><text x="21.4726%" y="127.50"></text></g><g><title>lint_checking (1,515,837 samples, 1.63%)</title><rect x="20.1862%" y="165" width="1.6252%" height="15" fill="rgb(250,213,24)"/><text x="20.4362%" y="175.50"></text></g><g><title>module_lints (239,952 samples, 0.26%)</title><rect x="21.5541%" y="149" width="0.2573%" height="15" fill="rgb(247,123,22)"/><text x="21.8041%" y="159.50"></text></g><g><title>lint_mod (236,502 samples, 0.25%)</title><rect x="21.5578%" y="133" width="0.2536%" height="15" fill="rgb(231,138,38)"/><text x="21.8078%" y="143.50"></text></g><g><title>privacy_access_levels (269,033 samples, 0.29%)</title><rect x="21.8114%" y="165" width="0.2884%" height="15" fill="rgb(231,145,46)"/><text x="22.0614%" y="175.50"></text></g><g><title>privacy_checking_modules (567,627 samples, 0.61%)</title><rect x="22.0998%" y="165" width="0.6086%" height="15" fill="rgb(251,118,11)"/><text x="22.3498%" y="175.50"></text></g><g><title>check_mod_privacy (565,177 samples, 0.61%)</title><rect x="22.1024%" y="149" width="0.6060%" height="15" fill="rgb(217,147,25)"/><text x="22.3524%" y="159.50"></text></g><g><title>misc_checking_3 (3,039,364 samples, 3.26%)</title><rect x="19.4655%" y="181" width="3.2587%" height="15" fill="rgb(247,81,37)"/><text x="19.7155%" y="191.50">mis..</text></g><g><title>adt_def (410,213 samples, 0.44%)</title><rect x="25.2007%" y="101" width="0.4398%" height="15" fill="rgb(209,12,38)"/><text x="25.4507%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (403,833 samples, 0.43%)</title><rect x="25.2075%" y="85" width="0.4330%" height="15" fill="rgb(227,1,9)"/><text x="25.4575%" y="95.50"></text></g><g><title>item_attrs (342,991 samples, 0.37%)</title><rect x="25.2728%" y="69" width="0.3677%" height="15" fill="rgb(248,47,43)"/><text x="25.5228%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (334,951 samples, 0.36%)</title><rect x="25.2814%" y="53" width="0.3591%" height="15" fill="rgb(221,10,30)"/><text x="25.5314%" y="63.50"></text></g><g><title>adt_sized_constraint (532,414 samples, 0.57%)</title><rect x="25.1719%" y="117" width="0.5708%" height="15" fill="rgb(210,229,1)"/><text x="25.4219%" y="127.50"></text></g><g><title>impl_parent (905,448 samples, 0.97%)</title><rect x="25.7452%" y="117" width="0.9708%" height="15" fill="rgb(222,148,37)"/><text x="25.9952%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (513,222 samples, 0.55%)</title><rect x="26.1657%" y="101" width="0.5503%" height="15" fill="rgb(234,67,33)"/><text x="26.4157%" y="111.50"></text></g><g><title>impl_trait_ref (2,201,477 samples, 2.36%)</title><rect x="26.7165%" y="117" width="2.3603%" height="15" fill="rgb(247,98,35)"/><text x="26.9665%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,596,242 samples, 1.71%)</title><rect x="27.3654%" y="101" width="1.7114%" height="15" fill="rgb(247,138,52)"/><text x="27.6154%" y="111.50"></text></g><g><title>trait_impls_of (312,998 samples, 0.34%)</title><rect x="29.1237%" y="117" width="0.3356%" height="15" fill="rgb(213,79,30)"/><text x="29.3737%" y="127.50"></text></g><g><title>coherent_trait (6,201,099 samples, 6.65%)</title><rect x="22.8120%" y="149" width="6.6485%" height="15" fill="rgb(246,177,23)"/><text x="23.0620%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (6,175,859 samples, 6.62%)</title><rect x="22.8390%" y="133" width="6.6215%" height="15" fill="rgb(230,62,27)"/><text x="23.0890%" y="143.50">specializ..</text></g><g><title>coherence_checking (6,290,671 samples, 6.74%)</title><rect x="22.7899%" y="165" width="6.7446%" height="15" fill="rgb(216,154,8)"/><text x="23.0399%" y="175.50">coherence..</text></g><g><title>associated_item (763,778 samples, 0.82%)</title><rect x="42.1390%" y="101" width="0.8189%" height="15" fill="rgb(244,35,45)"/><text x="42.3890%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (603,166 samples, 0.65%)</title><rect x="42.3112%" y="85" width="0.6467%" height="15" fill="rgb(251,115,12)"/><text x="42.5612%" y="95.50"></text></g><g><title>associated_items (1,114,420 samples, 1.19%)</title><rect x="41.8248%" y="117" width="1.1948%" height="15" fill="rgb(240,54,50)"/><text x="42.0748%" y="127.50"></text></g><g><title>dropck_outlives (273,812 samples, 0.29%)</title><rect x="43.0728%" y="117" width="0.2936%" height="15" fill="rgb(233,84,52)"/><text x="43.3228%" y="127.50"></text></g><g><title>adt_dtorck_constraint (141,502 samples, 0.15%)</title><rect x="43.2146%" y="101" width="0.1517%" height="15" fill="rgb(207,117,47)"/><text x="43.4646%" y="111.50"></text></g><g><title>predicates_of (106,811 samples, 0.11%)</title><rect x="44.4760%" y="101" width="0.1145%" height="15" fill="rgb(249,43,39)"/><text x="44.7260%" y="111.50"></text></g><g><title>evaluate_obligation (1,258,053 samples, 1.35%)</title><rect x="43.3663%" y="117" width="1.3488%" height="15" fill="rgb(209,38,44)"/><text x="43.6163%" y="127.50"></text></g><g><title>trait_impls_of (114,091 samples, 0.12%)</title><rect x="44.5928%" y="101" width="0.1223%" height="15" fill="rgb(236,212,23)"/><text x="44.8428%" y="111.50"></text></g><g><title>fn_sig (93,952 samples, 0.10%)</title><rect x="44.7451%" y="117" width="0.1007%" height="15" fill="rgb(242,79,21)"/><text x="44.9951%" y="127.50"></text></g><g><title>generics_of (104,322 samples, 0.11%)</title><rect x="44.8459%" y="117" width="0.1118%" height="15" fill="rgb(211,96,35)"/><text x="45.0959%" y="127.50"></text></g><g><title>item_attrs (264,304 samples, 0.28%)</title><rect x="45.1576%" y="117" width="0.2834%" height="15" fill="rgb(253,215,40)"/><text x="45.4076%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (255,034 samples, 0.27%)</title><rect x="45.1676%" y="101" width="0.2734%" height="15" fill="rgb(211,81,21)"/><text x="45.4176%" y="111.50"></text></g><g><title>evaluate_obligation (355,066 samples, 0.38%)</title><rect x="45.9341%" y="101" width="0.3807%" height="15" fill="rgb(208,190,38)"/><text x="46.1841%" y="111.50"></text></g><g><title>method_autoderef_steps (778,271 samples, 0.83%)</title><rect x="45.4973%" y="117" width="0.8344%" height="15" fill="rgb(235,213,38)"/><text x="45.7473%" y="127.50"></text></g><g><title>object_safety_violations (139,701 samples, 0.15%)</title><rect x="46.3317%" y="117" width="0.1498%" height="15" fill="rgb(237,122,38)"/><text x="46.5817%" y="127.50"></text></g><g><title>predicates_of (266,311 samples, 0.29%)</title><rect x="46.5631%" y="117" width="0.2855%" height="15" fill="rgb(244,218,35)"/><text x="46.8131%" y="127.50"></text></g><g><title>predicates_defined_on (183,151 samples, 0.20%)</title><rect x="46.6523%" y="101" width="0.1964%" height="15" fill="rgb(240,68,47)"/><text x="46.9023%" y="111.50"></text></g><g><title>type_of (95,581 samples, 0.10%)</title><rect x="46.8737%" y="117" width="0.1025%" height="15" fill="rgb(210,16,53)"/><text x="47.1237%" y="127.50"></text></g><g><title>item_bodies_checking (16,264,373 samples, 17.44%)</title><rect x="29.5938%" y="165" width="17.4379%" height="15" fill="rgb(235,124,12)"/><text x="29.8438%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,261,323 samples, 17.43%)</title><rect x="29.5971%" y="149" width="17.4347%" height="15" fill="rgb(224,169,11)"/><text x="29.8471%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (16,188,311 samples, 17.36%)</title><rect x="29.6754%" y="133" width="17.3564%" height="15" fill="rgb(250,166,2)"/><text x="29.9254%" y="143.50">typeck</text></g><g><title>item_types_checking (1,102,073 samples, 1.18%)</title><rect x="47.0317%" y="165" width="1.1816%" height="15" fill="rgb(242,216,29)"/><text x="47.2817%" y="175.50"></text></g><g><title>check_mod_item_types (1,098,043 samples, 1.18%)</title><rect x="47.0360%" y="149" width="1.1773%" height="15" fill="rgb(230,116,27)"/><text x="47.2860%" y="159.50"></text></g><g><title>fn_sig (125,832 samples, 0.13%)</title><rect x="48.5426%" y="133" width="0.1349%" height="15" fill="rgb(228,99,48)"/><text x="48.7926%" y="143.50"></text></g><g><title>named_region_map (95,350 samples, 0.10%)</title><rect x="48.8661%" y="117" width="0.1022%" height="15" fill="rgb(253,11,6)"/><text x="49.1161%" y="127.50"></text></g><g><title>generics_of (289,693 samples, 0.31%)</title><rect x="48.6775%" y="133" width="0.3106%" height="15" fill="rgb(247,143,39)"/><text x="48.9275%" y="143.50"></text></g><g><title>late_bound_vars_map (285,662 samples, 0.31%)</title><rect x="49.5622%" y="85" width="0.3063%" height="15" fill="rgb(236,97,10)"/><text x="49.8122%" y="95.50"></text></g><g><title>resolve_lifetimes (259,822 samples, 0.28%)</title><rect x="49.5900%" y="69" width="0.2786%" height="15" fill="rgb(233,208,19)"/><text x="49.8400%" y="79.50"></text></g><g><title>explicit_predicates_of (634,106 samples, 0.68%)</title><rect x="49.2367%" y="101" width="0.6799%" height="15" fill="rgb(216,164,2)"/><text x="49.4867%" y="111.50"></text></g><g><title>predicates_of (837,108 samples, 0.90%)</title><rect x="49.0649%" y="133" width="0.8975%" height="15" fill="rgb(220,129,5)"/><text x="49.3149%" y="143.50"></text></g><g><title>predicates_defined_on (772,037 samples, 0.83%)</title><rect x="49.1347%" y="117" width="0.8277%" height="15" fill="rgb(242,17,10)"/><text x="49.3847%" y="127.50"></text></g><g><title>super_predicates_of (104,981 samples, 0.11%)</title><rect x="49.9625%" y="133" width="0.1126%" height="15" fill="rgb(242,107,0)"/><text x="50.2125%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (93,271 samples, 0.10%)</title><rect x="49.9750%" y="117" width="0.1000%" height="15" fill="rgb(251,28,31)"/><text x="50.2250%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (104,140 samples, 0.11%)</title><rect x="50.2860%" y="101" width="0.1117%" height="15" fill="rgb(233,223,10)"/><text x="50.5360%" y="111.50"></text></g><g><title>type_collecting (2,035,313 samples, 2.18%)</title><rect x="48.2168%" y="165" width="2.1822%" height="15" fill="rgb(215,21,27)"/><text x="48.4668%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,027,473 samples, 2.17%)</title><rect x="48.2252%" y="149" width="2.1738%" height="15" fill="rgb(232,23,21)"/><text x="48.4752%" y="159.50">c..</text></g><g><title>type_of (298,694 samples, 0.32%)</title><rect x="50.0787%" y="133" width="0.3202%" height="15" fill="rgb(244,5,23)"/><text x="50.3287%" y="143.50"></text></g><g><title>type_of (114,121 samples, 0.12%)</title><rect x="50.2766%" y="117" width="0.1224%" height="15" fill="rgb(226,81,46)"/><text x="50.5266%" y="127.50"></text></g><g><title>evaluate_obligation (789,652 samples, 0.85%)</title><rect x="52.7482%" y="133" width="0.8466%" height="15" fill="rgb(247,70,30)"/><text x="52.9982%" y="143.50"></text></g><g><title>implied_outlives_bounds (330,605 samples, 0.35%)</title><rect x="53.5948%" y="133" width="0.3545%" height="15" fill="rgb(212,68,19)"/><text x="53.8448%" y="143.50"></text></g><g><title>param_env (309,400 samples, 0.33%)</title><rect x="53.9493%" y="133" width="0.3317%" height="15" fill="rgb(240,187,13)"/><text x="54.1993%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,660,572 samples, 3.92%)</title><rect x="50.6642%" y="149" width="3.9247%" height="15" fill="rgb(223,113,26)"/><text x="50.9142%" y="159.50">chec..</text></g><g><title>region_scope_tree (274,711 samples, 0.29%)</title><rect x="54.2943%" y="133" width="0.2945%" height="15" fill="rgb(206,192,2)"/><text x="54.5443%" y="143.50"></text></g><g><title>predicates_of (141,851 samples, 0.15%)</title><rect x="60.3509%" y="117" width="0.1521%" height="15" fill="rgb(241,108,4)"/><text x="60.6009%" y="127.50"></text></g><g><title>evaluate_obligation (932,502 samples, 1.00%)</title><rect x="59.5076%" y="133" width="0.9998%" height="15" fill="rgb(247,173,49)"/><text x="59.7576%" y="143.50"></text></g><g><title>implied_outlives_bounds (247,464 samples, 0.27%)</title><rect x="60.5411%" y="133" width="0.2653%" height="15" fill="rgb(224,114,35)"/><text x="60.7911%" y="143.50"></text></g><g><title>param_env (597,276 samples, 0.64%)</title><rect x="60.8065%" y="133" width="0.6404%" height="15" fill="rgb(245,159,27)"/><text x="61.0565%" y="143.50"></text></g><g><title>predicates_of (157,211 samples, 0.17%)</title><rect x="61.4468%" y="133" width="0.1686%" height="15" fill="rgb(245,172,44)"/><text x="61.6968%" y="143.50"></text></g><g><title>predicates_defined_on (124,330 samples, 0.13%)</title><rect x="61.4821%" y="117" width="0.1333%" height="15" fill="rgb(236,23,11)"/><text x="61.7321%" y="127.50"></text></g><g><title>check_item_well_formed (6,739,356 samples, 7.23%)</title><rect x="54.5889%" y="149" width="7.2256%" height="15" fill="rgb(205,117,38)"/><text x="54.8389%" y="159.50">check_item..</text></g><g><title>evaluate_obligation (121,671 samples, 0.13%)</title><rect x="62.0088%" y="133" width="0.1305%" height="15" fill="rgb(237,72,25)"/><text x="62.2588%" y="143.50"></text></g><g><title>analysis (57,179,834 samples, 61.31%)</title><rect x="0.9188%" y="197" width="61.3056%" height="15" fill="rgb(244,70,9)"/><text x="1.1688%" y="207.50">analysis</text></g><g><title>type_check_crate (36,841,994 samples, 39.50%)</title><rect x="22.7241%" y="181" width="39.5003%" height="15" fill="rgb(217,125,39)"/><text x="22.9741%" y="191.50">type_check_crate</text></g><g><title>wf_checking (11,025,554 samples, 11.82%)</title><rect x="50.4033%" y="165" width="11.8211%" height="15" fill="rgb(235,36,10)"/><text x="50.6533%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (382,364 samples, 0.41%)</title><rect x="61.8145%" y="149" width="0.4100%" height="15" fill="rgb(251,123,47)"/><text x="62.0645%" y="159.50"></text></g><g><title>codegen_crate (300,914 samples, 0.32%)</title><rect x="62.2370%" y="197" width="0.3226%" height="15" fill="rgb(221,13,13)"/><text x="62.4870%" y="207.50"></text></g><g><title>AST_validation (132,992 samples, 0.14%)</title><rect x="62.7738%" y="181" width="0.1426%" height="15" fill="rgb(238,131,9)"/><text x="63.0238%" y="191.50"></text></g><g><title>crate_injection (101,422 samples, 0.11%)</title><rect x="62.9715%" y="181" width="0.1087%" height="15" fill="rgb(211,50,8)"/><text x="63.2215%" y="191.50"></text></g><g><title>metadata_load_macro (101,680 samples, 0.11%)</title><rect x="81.9659%" y="149" width="0.1090%" height="15" fill="rgb(245,182,24)"/><text x="82.2159%" y="159.50"></text></g><g><title>metadata_register_crate (255,052 samples, 0.27%)</title><rect x="82.0750%" y="149" width="0.2735%" height="15" fill="rgb(242,14,37)"/><text x="82.3250%" y="159.50"></text></g><g><title>macro_expand_crate (17,994,012 samples, 19.29%)</title><rect x="63.0802%" y="181" width="19.2924%" height="15" fill="rgb(246,228,12)"/><text x="63.3302%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (17,979,002 samples, 19.28%)</title><rect x="63.0963%" y="165" width="19.2763%" height="15" fill="rgb(213,55,15)"/><text x="63.3463%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (290,303 samples, 0.31%)</title><rect x="82.3769%" y="181" width="0.3112%" height="15" fill="rgb(209,9,3)"/><text x="82.6269%" y="191.50"></text></g><g><title>finalize_imports (200,202 samples, 0.21%)</title><rect x="82.6929%" y="165" width="0.2146%" height="15" fill="rgb(230,59,30)"/><text x="82.9429%" y="175.50"></text></g><g><title>late_resolve_crate (2,007,713 samples, 2.15%)</title><rect x="82.9968%" y="165" width="2.1526%" height="15" fill="rgb(209,121,21)"/><text x="83.2468%" y="175.50">l..</text></g><g><title>configure_and_expand (21,148,478 samples, 22.67%)</title><rect x="62.5596%" y="197" width="22.6744%" height="15" fill="rgb(220,109,13)"/><text x="62.8096%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,374,606 samples, 2.55%)</title><rect x="82.6881%" y="181" width="2.5459%" height="15" fill="rgb(232,18,1)"/><text x="82.9381%" y="191.50">re..</text></g><g><title>drop_ast (158,582 samples, 0.17%)</title><rect x="85.2341%" y="197" width="0.1700%" height="15" fill="rgb(215,41,42)"/><text x="85.4841%" y="207.50"></text></g><g><title>early_lint_checks (289,243 samples, 0.31%)</title><rect x="85.4195%" y="197" width="0.3101%" height="15" fill="rgb(224,123,36)"/><text x="85.6695%" y="207.50"></text></g><g><title>free_global_ctxt (2,514,248 samples, 2.70%)</title><rect x="85.7296%" y="197" width="2.6957%" height="15" fill="rgb(240,125,3)"/><text x="85.9796%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (2,250,585 samples, 2.41%)</title><rect x="88.4252%" y="197" width="2.4130%" height="15" fill="rgb(205,98,50)"/><text x="88.6752%" y="207.50">ge..</text></g><g><title>hir_lowering (2,398,728 samples, 2.57%)</title><rect x="90.8382%" y="197" width="2.5718%" height="15" fill="rgb(205,185,37)"/><text x="91.0882%" y="207.50">hi..</text></g><g><title>parse_crate (4,599,942 samples, 4.93%)</title><rect x="93.4539%" y="197" width="4.9318%" height="15" fill="rgb(238,207,15)"/><text x="93.7039%" y="207.50">parse_..</text></g><g><title>prepare_outputs (203,382 samples, 0.22%)</title><rect x="98.3965%" y="197" width="0.2181%" height="15" fill="rgb(213,199,42)"/><text x="98.6465%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (729,968 samples, 0.78%)</title><rect x="98.6146%" y="197" width="0.7826%" height="15" fill="rgb(235,201,11)"/><text x="98.8646%" y="207.50"></text></g><g><title>all (93,270,130 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (93,270,130 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (465,715 samples, 0.50%)</title><rect x="99.5007%" y="197" width="0.4993%" height="15" fill="rgb(243,32,47)"/><text x="99.7507%" y="207.50"></text></g></svg></svg>