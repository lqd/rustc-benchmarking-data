<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (64,940 samples, 0.13%)</title><rect x="9.2836%" y="165" width="0.1264%" height="15" fill="rgb(227,0,7)"/><text x="9.5336%" y="175.50"></text></g><g><title>codegen_fn_attrs (67,120 samples, 0.13%)</title><rect x="9.7258%" y="149" width="0.1307%" height="15" fill="rgb(217,0,24)"/><text x="9.9758%" y="159.50"></text></g><g><title>explicit_predicates_of (129,661 samples, 0.25%)</title><rect x="11.5264%" y="53" width="0.2524%" height="15" fill="rgb(221,193,54)"/><text x="11.7764%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (128,591 samples, 0.25%)</title><rect x="11.5285%" y="37" width="0.2503%" height="15" fill="rgb(248,212,6)"/><text x="11.7785%" y="47.50"></text></g><g><title>predicates_of (141,041 samples, 0.27%)</title><rect x="11.5080%" y="85" width="0.2746%" height="15" fill="rgb(208,68,35)"/><text x="11.7580%" y="95.50"></text></g><g><title>predicates_defined_on (135,481 samples, 0.26%)</title><rect x="11.5189%" y="69" width="0.2638%" height="15" fill="rgb(232,128,0)"/><text x="11.7689%" y="79.50"></text></g><g><title>is_copy_raw (522,889 samples, 1.02%)</title><rect x="11.0154%" y="117" width="1.0180%" height="15" fill="rgb(207,160,47)"/><text x="11.2654%" y="127.50"></text></g><g><title>evaluate_obligation (480,716 samples, 0.94%)</title><rect x="11.0975%" y="101" width="0.9359%" height="15" fill="rgb(228,23,34)"/><text x="11.3475%" y="111.50"></text></g><g><title>trait_impls_of (127,261 samples, 0.25%)</title><rect x="11.7856%" y="85" width="0.2478%" height="15" fill="rgb(218,30,26)"/><text x="12.0356%" y="95.50"></text></g><g><title>needs_drop_raw (551,309 samples, 1.07%)</title><rect x="10.9622%" y="133" width="1.0733%" height="15" fill="rgb(220,122,19)"/><text x="11.2122%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (75,041 samples, 0.15%)</title><rect x="12.1643%" y="117" width="0.1461%" height="15" fill="rgb(250,228,42)"/><text x="12.4143%" y="127.50"></text></g><g><title>specialization_graph_of (60,010 samples, 0.12%)</title><rect x="12.3314%" y="117" width="0.1168%" height="15" fill="rgb(240,193,28)"/><text x="12.5814%" y="127.50"></text></g><g><title>resolve_instance (242,394 samples, 0.47%)</title><rect x="12.0355%" y="133" width="0.4719%" height="15" fill="rgb(216,20,37)"/><text x="12.2855%" y="143.50"></text></g><g><title>thir_body (157,591 samples, 0.31%)</title><rect x="12.5245%" y="133" width="0.3068%" height="15" fill="rgb(206,188,39)"/><text x="12.7745%" y="143.50"></text></g><g><title>mir_const (2,090,634 samples, 4.07%)</title><rect x="8.7819%" y="181" width="4.0701%" height="15" fill="rgb(217,207,13)"/><text x="9.0319%" y="191.50">mir_..</text></g><g><title>unsafety_check_result (1,767,969 samples, 3.44%)</title><rect x="9.4100%" y="165" width="3.4419%" height="15" fill="rgb(231,73,38)"/><text x="9.6600%" y="175.50">uns..</text></g><g><title>mir_built (1,538,657 samples, 3.00%)</title><rect x="9.8565%" y="149" width="2.9955%" height="15" fill="rgb(225,20,46)"/><text x="10.1065%" y="159.50">mir..</text></g><g><title>mir_promoted (2,310,126 samples, 4.50%)</title><rect x="8.3866%" y="197" width="4.4974%" height="15" fill="rgb(210,31,41)"/><text x="8.6366%" y="207.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (89,581 samples, 0.17%)</title><rect x="12.8840%" y="197" width="0.1744%" height="15" fill="rgb(221,200,47)"/><text x="13.1340%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (135,192 samples, 0.26%)</title><rect x="13.0584%" y="197" width="0.2632%" height="15" fill="rgb(226,26,5)"/><text x="13.3084%" y="207.50"></text></g><g><title>normalize_projection_ty (52,461 samples, 0.10%)</title><rect x="13.2194%" y="181" width="0.1021%" height="15" fill="rgb(249,33,26)"/><text x="13.4694%" y="191.50"></text></g><g><title>type_op_normalize_ty (207,655 samples, 0.40%)</title><rect x="13.3320%" y="197" width="0.4043%" height="15" fill="rgb(235,183,28)"/><text x="13.5820%" y="207.50"></text></g><g><title>normalize_projection_ty (120,325 samples, 0.23%)</title><rect x="13.5020%" y="181" width="0.2342%" height="15" fill="rgb(221,5,38)"/><text x="13.7520%" y="191.50"></text></g><g><title>type_op_prove_predicate (441,575 samples, 0.86%)</title><rect x="13.7362%" y="197" width="0.8597%" height="15" fill="rgb(247,18,42)"/><text x="13.9862%" y="207.50"></text></g><g><title>MIR_borrow_checking (6,380,231 samples, 12.42%)</title><rect x="2.1985%" y="229" width="12.4211%" height="15" fill="rgb(241,131,45)"/><text x="2.4485%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,340,981 samples, 12.34%)</title><rect x="2.2749%" y="213" width="12.3447%" height="15" fill="rgb(249,31,29)"/><text x="2.5249%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (188,472 samples, 0.37%)</title><rect x="14.6332%" y="229" width="0.3669%" height="15" fill="rgb(225,111,53)"/><text x="14.8832%" y="239.50"></text></g><g><title>get_lang_items (128,771 samples, 0.25%)</title><rect x="15.6044%" y="181" width="0.2507%" height="15" fill="rgb(238,160,17)"/><text x="15.8544%" y="191.50"></text></g><g><title>associated_item (72,750 samples, 0.14%)</title><rect x="15.9658%" y="165" width="0.1416%" height="15" fill="rgb(214,148,48)"/><text x="16.2158%" y="175.50"></text></g><g><title>should_inherit_track_caller (135,441 samples, 0.26%)</title><rect x="15.8551%" y="181" width="0.2637%" height="15" fill="rgb(232,36,49)"/><text x="16.1051%" y="191.50"></text></g><g><title>codegen_fn_attrs (395,343 samples, 0.77%)</title><rect x="15.4071%" y="197" width="0.7697%" height="15" fill="rgb(209,103,24)"/><text x="15.6571%" y="207.50"></text></g><g><title>check_mod_attrs (571,737 samples, 1.11%)</title><rect x="15.0649%" y="213" width="1.1131%" height="15" fill="rgb(229,88,8)"/><text x="15.3149%" y="223.50"></text></g><g><title>check_mod_const_bodies (88,250 samples, 0.17%)</title><rect x="16.1780%" y="213" width="0.1718%" height="15" fill="rgb(213,181,19)"/><text x="16.4280%" y="223.50"></text></g><g><title>lookup_deprecation_entry (67,400 samples, 0.13%)</title><rect x="16.7208%" y="197" width="0.1312%" height="15" fill="rgb(254,191,54)"/><text x="16.9708%" y="207.50"></text></g><g><title>lookup_stability (122,411 samples, 0.24%)</title><rect x="16.8521%" y="197" width="0.2383%" height="15" fill="rgb(241,83,37)"/><text x="17.1021%" y="207.50"></text></g><g><title>stability_index (55,641 samples, 0.11%)</title><rect x="16.9820%" y="181" width="0.1083%" height="15" fill="rgb(233,36,39)"/><text x="17.2320%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (362,474 samples, 0.71%)</title><rect x="16.4445%" y="213" width="0.7057%" height="15" fill="rgb(226,3,54)"/><text x="16.6945%" y="223.50"></text></g><g><title>misc_checking_1 (1,149,463 samples, 2.24%)</title><rect x="15.0008%" y="229" width="2.2378%" height="15" fill="rgb(245,192,40)"/><text x="15.2508%" y="239.50">m..</text></g><g><title>liveness_and_intrinsic_checking (114,791 samples, 0.22%)</title><rect x="17.2409%" y="213" width="0.2235%" height="15" fill="rgb(238,167,29)"/><text x="17.4909%" y="223.50"></text></g><g><title>check_mod_liveness (92,651 samples, 0.18%)</title><rect x="17.2840%" y="197" width="0.1804%" height="15" fill="rgb(232,182,51)"/><text x="17.5340%" y="207.50"></text></g><g><title>misc_checking_2 (235,563 samples, 0.46%)</title><rect x="17.2386%" y="229" width="0.4586%" height="15" fill="rgb(231,60,39)"/><text x="17.4886%" y="239.50"></text></g><g><title>match_checking (119,582 samples, 0.23%)</title><rect x="17.4644%" y="213" width="0.2328%" height="15" fill="rgb(208,69,12)"/><text x="17.7144%" y="223.50"></text></g><g><title>check_match (111,152 samples, 0.22%)</title><rect x="17.4808%" y="197" width="0.2164%" height="15" fill="rgb(235,93,37)"/><text x="17.7308%" y="207.50"></text></g><g><title>check_private_in_public (76,820 samples, 0.15%)</title><rect x="17.7126%" y="213" width="0.1496%" height="15" fill="rgb(213,116,39)"/><text x="17.9626%" y="223.50"></text></g><g><title>death_checking (127,162 samples, 0.25%)</title><rect x="17.8622%" y="213" width="0.2476%" height="15" fill="rgb(222,207,29)"/><text x="18.1122%" y="223.50"></text></g><g><title>crate_lints (150,982 samples, 0.29%)</title><rect x="18.1124%" y="197" width="0.2939%" height="15" fill="rgb(206,96,30)"/><text x="18.3624%" y="207.50"></text></g><g><title>param_env (61,571 samples, 0.12%)</title><rect x="18.2865%" y="181" width="0.1199%" height="15" fill="rgb(218,138,4)"/><text x="18.5365%" y="191.50"></text></g><g><title>lint_checking (229,873 samples, 0.45%)</title><rect x="18.1097%" y="213" width="0.4475%" height="15" fill="rgb(250,191,14)"/><text x="18.3597%" y="223.50"></text></g><g><title>module_lints (77,501 samples, 0.15%)</title><rect x="18.4063%" y="197" width="0.1509%" height="15" fill="rgb(239,60,40)"/><text x="18.6563%" y="207.50"></text></g><g><title>lint_mod (75,641 samples, 0.15%)</title><rect x="18.4100%" y="181" width="0.1473%" height="15" fill="rgb(206,27,48)"/><text x="18.6600%" y="191.50"></text></g><g><title>privacy_access_levels (99,312 samples, 0.19%)</title><rect x="18.5572%" y="213" width="0.1933%" height="15" fill="rgb(225,35,8)"/><text x="18.8072%" y="223.50"></text></g><g><title>privacy_checking_modules (333,743 samples, 0.65%)</title><rect x="18.7506%" y="213" width="0.6497%" height="15" fill="rgb(250,213,24)"/><text x="19.0006%" y="223.50"></text></g><g><title>check_mod_privacy (331,873 samples, 0.65%)</title><rect x="18.7542%" y="197" width="0.6461%" height="15" fill="rgb(247,123,22)"/><text x="19.0042%" y="207.50"></text></g><g><title>misc_checking_3 (888,090 samples, 1.73%)</title><rect x="17.6972%" y="229" width="1.7289%" height="15" fill="rgb(231,138,38)"/><text x="17.9472%" y="239.50"></text></g><g><title>coherent_trait (124,972 samples, 0.24%)</title><rect x="19.5201%" y="197" width="0.2433%" height="15" fill="rgb(231,145,46)"/><text x="19.7701%" y="207.50"></text></g><g><title>specialization_graph_of (117,091 samples, 0.23%)</title><rect x="19.5354%" y="181" width="0.2280%" height="15" fill="rgb(251,118,11)"/><text x="19.7854%" y="191.50"></text></g><g><title>coherence_checking (188,282 samples, 0.37%)</title><rect x="19.4873%" y="213" width="0.3665%" height="15" fill="rgb(217,147,25)"/><text x="19.7373%" y="223.50"></text></g><g><title>associated_item (240,793 samples, 0.47%)</title><rect x="30.7060%" y="149" width="0.4688%" height="15" fill="rgb(247,81,37)"/><text x="30.9560%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (189,571 samples, 0.37%)</title><rect x="30.8057%" y="133" width="0.3691%" height="15" fill="rgb(209,12,38)"/><text x="31.0557%" y="143.50"></text></g><g><title>associated_items (344,974 samples, 0.67%)</title><rect x="30.5284%" y="165" width="0.6716%" height="15" fill="rgb(227,1,9)"/><text x="30.7784%" y="175.50"></text></g><g><title>impl_parent (100,881 samples, 0.20%)</title><rect x="31.5864%" y="69" width="0.1964%" height="15" fill="rgb(248,47,43)"/><text x="31.8364%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (80,631 samples, 0.16%)</title><rect x="31.6258%" y="53" width="0.1570%" height="15" fill="rgb(221,10,30)"/><text x="31.8758%" y="63.50"></text></g><g><title>impl_trait_ref (296,414 samples, 0.58%)</title><rect x="31.7828%" y="69" width="0.5771%" height="15" fill="rgb(210,229,1)"/><text x="32.0328%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (276,963 samples, 0.54%)</title><rect x="31.8207%" y="53" width="0.5392%" height="15" fill="rgb(222,148,37)"/><text x="32.0707%" y="63.50"></text></g><g><title>adt_destructor (512,596 samples, 1.00%)</title><rect x="31.4101%" y="133" width="0.9979%" height="15" fill="rgb(234,67,33)"/><text x="31.6601%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (510,996 samples, 0.99%)</title><rect x="31.4132%" y="117" width="0.9948%" height="15" fill="rgb(247,98,35)"/><text x="31.6632%" y="127.50"></text></g><g><title>coherent_trait (506,696 samples, 0.99%)</title><rect x="31.4216%" y="101" width="0.9864%" height="15" fill="rgb(247,138,52)"/><text x="31.6716%" y="111.50"></text></g><g><title>specialization_graph_of (505,076 samples, 0.98%)</title><rect x="31.4247%" y="85" width="0.9833%" height="15" fill="rgb(213,79,30)"/><text x="31.6747%" y="95.50"></text></g><g><title>adt_dtorck_constraint (527,696 samples, 1.03%)</title><rect x="31.3888%" y="149" width="1.0273%" height="15" fill="rgb(246,177,23)"/><text x="31.6388%" y="159.50"></text></g><g><title>dropck_outlives (629,337 samples, 1.23%)</title><rect x="31.2330%" y="165" width="1.2252%" height="15" fill="rgb(230,62,27)"/><text x="31.4830%" y="175.50"></text></g><g><title>evaluate_obligation (205,362 samples, 0.40%)</title><rect x="32.4582%" y="165" width="0.3998%" height="15" fill="rgb(216,154,8)"/><text x="32.7082%" y="175.50"></text></g><g><title>evaluate_obligation (139,111 samples, 0.27%)</title><rect x="33.6594%" y="149" width="0.2708%" height="15" fill="rgb(244,35,45)"/><text x="33.9094%" y="159.50"></text></g><g><title>method_autoderef_steps (416,774 samples, 0.81%)</title><rect x="33.1361%" y="165" width="0.8114%" height="15" fill="rgb(251,115,12)"/><text x="33.3861%" y="175.50"></text></g><g><title>predicates_of (57,721 samples, 0.11%)</title><rect x="33.9674%" y="165" width="0.1124%" height="15" fill="rgb(240,54,50)"/><text x="34.2174%" y="175.50"></text></g><g><title>item_bodies_checking (7,325,491 samples, 14.26%)</title><rect x="19.9464%" y="213" width="14.2613%" height="15" fill="rgb(233,84,52)"/><text x="20.1964%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (7,323,611 samples, 14.26%)</title><rect x="19.9501%" y="197" width="14.2577%" height="15" fill="rgb(207,117,47)"/><text x="20.2001%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (7,294,721 samples, 14.20%)</title><rect x="20.0063%" y="181" width="14.2014%" height="15" fill="rgb(249,43,39)"/><text x="20.2563%" y="191.50">typeck</text></g><g><title>item_types_checking (1,052,452 samples, 2.05%)</title><rect x="34.2078%" y="213" width="2.0489%" height="15" fill="rgb(209,38,44)"/><text x="34.4578%" y="223.50">i..</text></g><g><title>check_mod_item_types (1,049,622 samples, 2.04%)</title><rect x="34.2133%" y="197" width="2.0434%" height="15" fill="rgb(236,212,23)"/><text x="34.4633%" y="207.50">c..</text></g><g><title>fn_sig (488,965 samples, 0.95%)</title><rect x="36.7569%" y="181" width="0.9519%" height="15" fill="rgb(242,79,21)"/><text x="37.0069%" y="191.50"></text></g><g><title>is_late_bound_map (125,311 samples, 0.24%)</title><rect x="37.9493%" y="165" width="0.2440%" height="15" fill="rgb(211,96,35)"/><text x="38.1993%" y="175.50"></text></g><g><title>resolve_lifetimes (118,111 samples, 0.23%)</title><rect x="37.9633%" y="149" width="0.2299%" height="15" fill="rgb(253,215,40)"/><text x="38.2133%" y="159.50"></text></g><g><title>named_region_map (158,972 samples, 0.31%)</title><rect x="38.1932%" y="165" width="0.3095%" height="15" fill="rgb(211,81,21)"/><text x="38.4432%" y="175.50"></text></g><g><title>resolve_lifetimes (137,151 samples, 0.27%)</title><rect x="38.2357%" y="149" width="0.2670%" height="15" fill="rgb(208,190,38)"/><text x="38.4857%" y="159.50"></text></g><g><title>generics_of (441,233 samples, 0.86%)</title><rect x="37.7088%" y="181" width="0.8590%" height="15" fill="rgb(235,213,38)"/><text x="37.9588%" y="191.50"></text></g><g><title>item_bounds (102,651 samples, 0.20%)</title><rect x="38.6111%" y="181" width="0.1998%" height="15" fill="rgb(237,122,38)"/><text x="38.8611%" y="191.50"></text></g><g><title>late_bound_vars_map (125,261 samples, 0.24%)</title><rect x="39.4485%" y="133" width="0.2439%" height="15" fill="rgb(244,218,35)"/><text x="39.6985%" y="143.50"></text></g><g><title>resolve_lifetimes (119,171 samples, 0.23%)</title><rect x="39.4604%" y="117" width="0.2320%" height="15" fill="rgb(240,68,47)"/><text x="39.7104%" y="127.50"></text></g><g><title>trait_explicit_predicates_and_bounds (68,461 samples, 0.13%)</title><rect x="39.7278%" y="133" width="0.1333%" height="15" fill="rgb(210,16,53)"/><text x="39.9778%" y="143.50"></text></g><g><title>type_param_predicates (172,442 samples, 0.34%)</title><rect x="39.8610%" y="133" width="0.3357%" height="15" fill="rgb(235,124,12)"/><text x="40.1110%" y="143.50"></text></g><g><title>explicit_predicates_of (603,136 samples, 1.17%)</title><rect x="39.0247%" y="149" width="1.1742%" height="15" fill="rgb(224,169,11)"/><text x="39.2747%" y="159.50"></text></g><g><title>predicates_of (731,698 samples, 1.42%)</title><rect x="38.8109%" y="181" width="1.4245%" height="15" fill="rgb(250,166,2)"/><text x="39.0609%" y="191.50"></text></g><g><title>predicates_defined_on (696,088 samples, 1.36%)</title><rect x="38.8802%" y="165" width="1.3551%" height="15" fill="rgb(242,216,29)"/><text x="39.1302%" y="175.50"></text></g><g><title>super_predicates_of (65,810 samples, 0.13%)</title><rect x="40.2354%" y="181" width="0.1281%" height="15" fill="rgb(230,116,27)"/><text x="40.4854%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (52,090 samples, 0.10%)</title><rect x="40.2621%" y="165" width="0.1014%" height="15" fill="rgb(228,99,48)"/><text x="40.5121%" y="175.50"></text></g><g><title>type_of (106,203 samples, 0.21%)</title><rect x="40.6627%" y="165" width="0.2068%" height="15" fill="rgb(253,11,6)"/><text x="40.9127%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (100,543 samples, 0.20%)</title><rect x="40.6737%" y="149" width="0.1957%" height="15" fill="rgb(247,143,39)"/><text x="40.9237%" y="159.50"></text></g><g><title>type_collecting (2,402,867 samples, 4.68%)</title><rect x="36.2595%" y="213" width="4.6779%" height="15" fill="rgb(236,97,10)"/><text x="36.5095%" y="223.50">type_..</text></g><g><title>collect_mod_item_types (2,385,197 samples, 4.64%)</title><rect x="36.2939%" y="197" width="4.6435%" height="15" fill="rgb(233,208,19)"/><text x="36.5439%" y="207.50">colle..</text></g><g><title>type_of (284,634 samples, 0.55%)</title><rect x="40.3833%" y="181" width="0.5541%" height="15" fill="rgb(216,164,2)"/><text x="40.6333%" y="191.50"></text></g><g><title>evaluate_obligation (372,665 samples, 0.73%)</title><rect x="46.0873%" y="181" width="0.7255%" height="15" fill="rgb(220,129,5)"/><text x="46.3373%" y="191.50"></text></g><g><title>implied_outlives_bounds (188,421 samples, 0.37%)</title><rect x="46.8512%" y="181" width="0.3668%" height="15" fill="rgb(242,17,10)"/><text x="47.1012%" y="191.50"></text></g><g><title>param_env (270,673 samples, 0.53%)</title><rect x="47.2180%" y="181" width="0.5269%" height="15" fill="rgb(242,107,0)"/><text x="47.4680%" y="191.50"></text></g><g><title>check_impl_item_well_formed (3,503,028 samples, 6.82%)</title><rect x="41.1466%" y="197" width="6.8197%" height="15" fill="rgb(251,28,31)"/><text x="41.3966%" y="207.50">check_imp..</text></g><g><title>region_scope_tree (101,832 samples, 0.20%)</title><rect x="47.7681%" y="181" width="0.1982%" height="15" fill="rgb(233,223,10)"/><text x="48.0181%" y="191.50"></text></g><g><title>evaluate_obligation (56,941 samples, 0.11%)</title><rect x="49.0279%" y="181" width="0.1109%" height="15" fill="rgb(215,21,27)"/><text x="49.2779%" y="191.50"></text></g><g><title>param_env (194,763 samples, 0.38%)</title><rect x="49.2456%" y="181" width="0.3792%" height="15" fill="rgb(232,23,21)"/><text x="49.4956%" y="191.50"></text></g><g><title>predicates_of (64,590 samples, 0.13%)</title><rect x="49.6248%" y="181" width="0.1257%" height="15" fill="rgb(244,5,23)"/><text x="49.8748%" y="191.50"></text></g><g><title>check_item_well_formed (978,813 samples, 1.91%)</title><rect x="47.9663%" y="197" width="1.9056%" height="15" fill="rgb(226,81,46)"/><text x="48.2163%" y="207.50">c..</text></g><g><title>trait_impls_of (57,021 samples, 0.11%)</title><rect x="49.7609%" y="181" width="0.1110%" height="15" fill="rgb(247,70,30)"/><text x="50.0109%" y="191.50"></text></g><g><title>evaluate_obligation (396,604 samples, 0.77%)</title><rect x="51.5236%" y="181" width="0.7721%" height="15" fill="rgb(212,68,19)"/><text x="51.7736%" y="191.50"></text></g><g><title>trait_impls_of (77,461 samples, 0.15%)</title><rect x="52.1449%" y="165" width="0.1508%" height="15" fill="rgb(240,187,13)"/><text x="52.3949%" y="175.50"></text></g><g><title>implied_outlives_bounds (116,842 samples, 0.23%)</title><rect x="52.3359%" y="181" width="0.2275%" height="15" fill="rgb(223,113,26)"/><text x="52.5859%" y="191.50"></text></g><g><title>param_env (63,470 samples, 0.12%)</title><rect x="52.5633%" y="181" width="0.1236%" height="15" fill="rgb(206,192,2)"/><text x="52.8133%" y="191.50"></text></g><g><title>analysis (26,254,083 samples, 51.11%)</title><rect x="1.6699%" y="245" width="51.1116%" height="15" fill="rgb(241,108,4)"/><text x="1.9199%" y="255.50">analysis</text></g><g><title>type_check_crate (17,133,381 samples, 33.36%)</title><rect x="19.4261%" y="229" width="33.3554%" height="15" fill="rgb(247,173,49)"/><text x="19.6761%" y="239.50">type_check_crate</text></g><g><title>wf_checking (6,082,218 samples, 11.84%)</title><rect x="40.9406%" y="213" width="11.8409%" height="15" fill="rgb(224,114,35)"/><text x="41.1906%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,494,566 samples, 2.91%)</title><rect x="49.8719%" y="197" width="2.9096%" height="15" fill="rgb(245,159,27)"/><text x="50.1219%" y="207.50">ch..</text></g><g><title>codegen_crate (336,414 samples, 0.65%)</title><rect x="52.8078%" y="245" width="0.6549%" height="15" fill="rgb(245,172,44)"/><text x="53.0578%" y="255.50"></text></g><g><title>AST_validation (182,192 samples, 0.35%)</title><rect x="53.9653%" y="229" width="0.3547%" height="15" fill="rgb(236,23,11)"/><text x="54.2153%" y="239.50"></text></g><g><title>complete_gated_feature_checking (63,601 samples, 0.12%)</title><rect x="54.3200%" y="229" width="0.1238%" height="15" fill="rgb(205,117,38)"/><text x="54.5700%" y="239.50"></text></g><g><title>crate_injection (98,861 samples, 0.19%)</title><rect x="54.4438%" y="229" width="0.1925%" height="15" fill="rgb(237,72,25)"/><text x="54.6938%" y="239.50"></text></g><g><title>metadata_load_macro (56,390 samples, 0.11%)</title><rect x="73.8435%" y="197" width="0.1098%" height="15" fill="rgb(244,70,9)"/><text x="74.0935%" y="207.50"></text></g><g><title>macro_expand_crate (12,609,111 samples, 24.55%)</title><rect x="54.6362%" y="229" width="24.5475%" height="15" fill="rgb(217,125,39)"/><text x="54.8862%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,590,861 samples, 24.51%)</title><rect x="54.6718%" y="213" width="24.5120%" height="15" fill="rgb(235,36,10)"/><text x="54.9218%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,686,700 samples, 5.23%)</title><rect x="73.9533%" y="197" width="5.2305%" height="15" fill="rgb(251,123,47)"/><text x="74.2033%" y="207.50">metada..</text></g><g><title>metadata_register_crate (959,491 samples, 1.87%)</title><rect x="77.3158%" y="181" width="1.8679%" height="15" fill="rgb(221,13,13)"/><text x="77.5658%" y="191.50">m..</text></g><g><title>metadata_register_crate (75,151 samples, 0.15%)</title><rect x="79.0374%" y="165" width="0.1463%" height="15" fill="rgb(238,131,9)"/><text x="79.2874%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (189,422 samples, 0.37%)</title><rect x="79.1934%" y="229" width="0.3688%" height="15" fill="rgb(211,50,8)"/><text x="79.4434%" y="239.50"></text></g><g><title>finalize_imports (271,663 samples, 0.53%)</title><rect x="79.5813%" y="213" width="0.5289%" height="15" fill="rgb(245,182,24)"/><text x="79.8313%" y="223.50"></text></g><g><title>late_resolve_crate (1,748,659 samples, 3.40%)</title><rect x="80.1311%" y="213" width="3.4043%" height="15" fill="rgb(242,14,37)"/><text x="80.3811%" y="223.50">lat..</text></g><g><title>configure_and_expand (15,531,444 samples, 30.24%)</title><rect x="53.4628%" y="245" width="30.2367%" height="15" fill="rgb(246,228,12)"/><text x="53.7128%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,125,154 samples, 4.14%)</title><rect x="79.5622%" y="229" width="4.1373%" height="15" fill="rgb(213,55,15)"/><text x="79.8122%" y="239.50">resol..</text></g><g><title>drop_ast (125,472 samples, 0.24%)</title><rect x="83.6995%" y="245" width="0.2443%" height="15" fill="rgb(209,9,3)"/><text x="83.9495%" y="255.50"></text></g><g><title>early_lint_checks (257,903 samples, 0.50%)</title><rect x="83.9705%" y="245" width="0.5021%" height="15" fill="rgb(230,59,30)"/><text x="84.2205%" y="255.50"></text></g><g><title>free_global_ctxt (1,836,250 samples, 3.57%)</title><rect x="84.4726%" y="245" width="3.5748%" height="15" fill="rgb(209,121,21)"/><text x="84.7226%" y="255.50">free..</text></g><g><title>crate_hash (66,460 samples, 0.13%)</title><rect x="88.7051%" y="229" width="0.1294%" height="15" fill="rgb(220,109,13)"/><text x="88.9551%" y="239.50"></text></g><g><title>generate_crate_metadata (533,656 samples, 1.04%)</title><rect x="88.0475%" y="245" width="1.0389%" height="15" fill="rgb(232,18,1)"/><text x="88.2975%" y="255.50"></text></g><g><title>hir_lowering (1,891,571 samples, 3.68%)</title><rect x="89.0864%" y="245" width="3.6825%" height="15" fill="rgb(215,41,42)"/><text x="89.3364%" y="255.50">hir_..</text></g><g><title>parse_crate (2,487,537 samples, 4.84%)</title><rect x="92.8597%" y="245" width="4.8428%" height="15" fill="rgb(224,123,36)"/><text x="93.1097%" y="255.50">parse_..</text></g><g><title>prepare_outputs (328,313 samples, 0.64%)</title><rect x="97.7190%" y="245" width="0.6392%" height="15" fill="rgb(240,125,3)"/><text x="97.9690%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (378,424 samples, 0.74%)</title><rect x="98.3582%" y="245" width="0.7367%" height="15" fill="rgb(205,98,50)"/><text x="98.6082%" y="255.50"></text></g><g><title>setup_global_ctxt (143,681 samples, 0.28%)</title><rect x="99.1193%" y="245" width="0.2797%" height="15" fill="rgb(205,185,37)"/><text x="99.3693%" y="255.50"></text></g><g><title>all (51,366,162 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (51,366,162 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (308,713 samples, 0.60%)</title><rect x="99.3990%" y="245" width="0.6010%" height="15" fill="rgb(235,201,11)"/><text x="99.6490%" y="255.50"></text></g></svg></svg>