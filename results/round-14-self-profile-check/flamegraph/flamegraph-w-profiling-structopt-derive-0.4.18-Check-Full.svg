<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (1,026,593 samples, 0.16%)</title><rect x="14.5650%" y="117" width="0.1554%" height="15" fill="rgb(227,0,7)"/><text x="14.8150%" y="127.50"></text></g><g><title>item_attrs (811,685 samples, 0.12%)</title><rect x="15.1791%" y="85" width="0.1229%" height="15" fill="rgb(217,0,24)"/><text x="15.4291%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (776,575 samples, 0.12%)</title><rect x="15.1844%" y="69" width="0.1176%" height="15" fill="rgb(221,193,54)"/><text x="15.4344%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,174,036 samples, 0.18%)</title><rect x="15.1332%" y="101" width="0.1777%" height="15" fill="rgb(248,212,6)"/><text x="15.3832%" y="111.50"></text></g><g><title>adt_drop_tys (1,039,867 samples, 0.16%)</title><rect x="18.4973%" y="69" width="0.1574%" height="15" fill="rgb(208,68,35)"/><text x="18.7473%" y="79.50"></text></g><g><title>is_copy_raw (2,027,749 samples, 0.31%)</title><rect x="18.6548%" y="69" width="0.3070%" height="15" fill="rgb(232,128,0)"/><text x="18.9048%" y="79.50"></text></g><g><title>evaluate_obligation (1,630,075 samples, 0.25%)</title><rect x="18.7150%" y="53" width="0.2468%" height="15" fill="rgb(207,160,47)"/><text x="18.9650%" y="63.50"></text></g><g><title>needs_drop_raw (3,555,307 samples, 0.54%)</title><rect x="18.4326%" y="85" width="0.5383%" height="15" fill="rgb(228,23,34)"/><text x="18.6826%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,676,084 samples, 0.41%)</title><rect x="19.0946%" y="69" width="0.4051%" height="15" fill="rgb(218,30,26)"/><text x="19.3446%" y="79.50"></text></g><g><title>specialization_graph_of (3,592,971 samples, 0.54%)</title><rect x="19.5416%" y="69" width="0.5440%" height="15" fill="rgb(220,122,19)"/><text x="19.7916%" y="79.50"></text></g><g><title>impl_trait_ref (2,580,326 samples, 0.39%)</title><rect x="19.6949%" y="53" width="0.3907%" height="15" fill="rgb(250,228,42)"/><text x="19.9449%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,443,015 samples, 0.37%)</title><rect x="19.7157%" y="37" width="0.3699%" height="15" fill="rgb(240,193,28)"/><text x="19.9657%" y="47.50"></text></g><g><title>resolve_instance (7,654,181 samples, 1.16%)</title><rect x="18.9708%" y="85" width="1.1588%" height="15" fill="rgb(216,20,37)"/><text x="19.2208%" y="95.50"></text></g><g><title>thir_body (8,568,647 samples, 1.30%)</title><rect x="20.1481%" y="85" width="1.2973%" height="15" fill="rgb(206,188,39)"/><text x="20.3981%" y="95.50"></text></g><g><title>mir_const (49,299,508 samples, 7.46%)</title><rect x="13.9936%" y="133" width="7.4638%" height="15" fill="rgb(217,207,13)"/><text x="14.2436%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (44,499,038 samples, 6.74%)</title><rect x="14.7204%" y="117" width="6.7370%" height="15" fill="rgb(231,73,38)"/><text x="14.9704%" y="127.50">unsafety_..</text></g><g><title>mir_built (40,594,842 samples, 6.15%)</title><rect x="15.3115%" y="101" width="6.1459%" height="15" fill="rgb(225,20,46)"/><text x="15.5615%" y="111.50">mir_built</text></g><g><title>mir_promoted (53,961,049 samples, 8.17%)</title><rect x="13.3764%" y="149" width="8.1695%" height="15" fill="rgb(210,31,41)"/><text x="13.6264%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (973,049 samples, 0.15%)</title><rect x="21.5466%" y="149" width="0.1473%" height="15" fill="rgb(221,200,47)"/><text x="21.7966%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,369,745 samples, 0.36%)</title><rect x="21.6939%" y="149" width="0.3588%" height="15" fill="rgb(226,26,5)"/><text x="21.9439%" y="159.50"></text></g><g><title>normalize_projection_ty (1,584,098 samples, 0.24%)</title><rect x="21.8128%" y="133" width="0.2398%" height="15" fill="rgb(249,33,26)"/><text x="22.0628%" y="143.50"></text></g><g><title>type_op_normalize_predicate (2,002,871 samples, 0.30%)</title><rect x="22.0527%" y="149" width="0.3032%" height="15" fill="rgb(235,183,28)"/><text x="22.3027%" y="159.50"></text></g><g><title>normalize_projection_ty (1,014,742 samples, 0.15%)</title><rect x="22.2023%" y="133" width="0.1536%" height="15" fill="rgb(221,5,38)"/><text x="22.4523%" y="143.50"></text></g><g><title>type_op_prove_predicate (8,975,987 samples, 1.36%)</title><rect x="22.3559%" y="149" width="1.3589%" height="15" fill="rgb(247,18,42)"/><text x="22.6059%" y="159.50"></text></g><g><title>MIR_borrow_checking (153,355,107 samples, 23.22%)</title><rect x="0.4991%" y="181" width="23.2174%" height="15" fill="rgb(241,131,45)"/><text x="0.7491%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (153,004,535 samples, 23.16%)</title><rect x="0.5521%" y="165" width="23.1644%" height="15" fill="rgb(249,31,29)"/><text x="0.8021%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (815,768 samples, 0.12%)</title><rect x="23.7516%" y="181" width="0.1235%" height="15" fill="rgb(225,111,53)"/><text x="24.0016%" y="191.50"></text></g><g><title>check_mod_attrs (1,710,520 samples, 0.26%)</title><rect x="23.8803%" y="165" width="0.2590%" height="15" fill="rgb(238,160,17)"/><text x="24.1303%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,024,920 samples, 0.16%)</title><rect x="24.2460%" y="165" width="0.1552%" height="15" fill="rgb(214,148,48)"/><text x="24.4960%" y="175.50"></text></g><g><title>misc_checking_1 (3,653,051 samples, 0.55%)</title><rect x="23.8751%" y="181" width="0.5531%" height="15" fill="rgb(232,36,49)"/><text x="24.1251%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (3,245,816 samples, 0.49%)</title><rect x="24.4285%" y="165" width="0.4914%" height="15" fill="rgb(209,103,24)"/><text x="24.6785%" y="175.50"></text></g><g><title>check_mod_liveness (2,682,869 samples, 0.41%)</title><rect x="24.5137%" y="149" width="0.4062%" height="15" fill="rgb(229,88,8)"/><text x="24.7637%" y="159.50"></text></g><g><title>misc_checking_2 (6,483,992 samples, 0.98%)</title><rect x="24.4282%" y="181" width="0.9817%" height="15" fill="rgb(213,181,19)"/><text x="24.6782%" y="191.50"></text></g><g><title>match_checking (3,236,206 samples, 0.49%)</title><rect x="24.9199%" y="165" width="0.4900%" height="15" fill="rgb(254,191,54)"/><text x="25.1699%" y="175.50"></text></g><g><title>check_match (3,150,153 samples, 0.48%)</title><rect x="24.9329%" y="149" width="0.4769%" height="15" fill="rgb(241,83,37)"/><text x="25.1829%" y="159.50"></text></g><g><title>check_private_in_public (795,799 samples, 0.12%)</title><rect x="25.4117%" y="165" width="0.1205%" height="15" fill="rgb(233,36,39)"/><text x="25.6617%" y="175.50"></text></g><g><title>death_checking (1,675,359 samples, 0.25%)</title><rect x="25.5322%" y="165" width="0.2536%" height="15" fill="rgb(226,3,54)"/><text x="25.7822%" y="175.50"></text></g><g><title>param_env (1,830,340 samples, 0.28%)</title><rect x="26.2347%" y="133" width="0.2771%" height="15" fill="rgb(245,192,40)"/><text x="26.4847%" y="143.50"></text></g><g><title>predicates_of (796,201 samples, 0.12%)</title><rect x="26.3913%" y="117" width="0.1205%" height="15" fill="rgb(238,167,29)"/><text x="26.6413%" y="127.50"></text></g><g><title>crate_lints (5,054,247 samples, 0.77%)</title><rect x="25.7863%" y="149" width="0.7652%" height="15" fill="rgb(232,182,51)"/><text x="26.0363%" y="159.50"></text></g><g><title>layout_of (1,014,890 samples, 0.15%)</title><rect x="27.1401%" y="37" width="0.1537%" height="15" fill="rgb(231,60,39)"/><text x="27.3901%" y="47.50"></text></g><g><title>layout_of (1,324,805 samples, 0.20%)</title><rect x="27.1101%" y="53" width="0.2006%" height="15" fill="rgb(208,69,12)"/><text x="27.3601%" y="63.50"></text></g><g><title>lint_checking (10,243,794 samples, 1.55%)</title><rect x="25.7858%" y="165" width="1.5509%" height="15" fill="rgb(235,93,37)"/><text x="26.0358%" y="175.50"></text></g><g><title>module_lints (5,186,647 samples, 0.79%)</title><rect x="26.5515%" y="149" width="0.7852%" height="15" fill="rgb(213,116,39)"/><text x="26.8015%" y="159.50"></text></g><g><title>lint_mod (5,176,997 samples, 0.78%)</title><rect x="26.5529%" y="133" width="0.7838%" height="15" fill="rgb(222,207,29)"/><text x="26.8029%" y="143.50"></text></g><g><title>layout_of (1,765,041 samples, 0.27%)</title><rect x="27.0695%" y="117" width="0.2672%" height="15" fill="rgb(206,96,30)"/><text x="27.3195%" y="127.50"></text></g><g><title>layout_of (1,726,920 samples, 0.26%)</title><rect x="27.0752%" y="101" width="0.2614%" height="15" fill="rgb(218,138,4)"/><text x="27.3252%" y="111.50"></text></g><g><title>layout_of (1,706,649 samples, 0.26%)</title><rect x="27.0783%" y="85" width="0.2584%" height="15" fill="rgb(250,191,14)"/><text x="27.3283%" y="95.50"></text></g><g><title>layout_of (1,650,138 samples, 0.25%)</title><rect x="27.0869%" y="69" width="0.2498%" height="15" fill="rgb(239,60,40)"/><text x="27.3369%" y="79.50"></text></g><g><title>privacy_checking_modules (4,974,086 samples, 0.75%)</title><rect x="27.4174%" y="165" width="0.7531%" height="15" fill="rgb(206,27,48)"/><text x="27.6674%" y="175.50"></text></g><g><title>check_mod_privacy (4,967,775 samples, 0.75%)</title><rect x="27.4183%" y="149" width="0.7521%" height="15" fill="rgb(225,35,8)"/><text x="27.6683%" y="159.50"></text></g><g><title>misc_checking_3 (18,256,744 samples, 2.76%)</title><rect x="25.4099%" y="181" width="2.7640%" height="15" fill="rgb(250,213,24)"/><text x="25.6599%" y="191.50">mi..</text></g><g><title>adt_destructor (661,727 samples, 0.10%)</title><rect x="28.2309%" y="133" width="0.1002%" height="15" fill="rgb(247,123,22)"/><text x="28.4809%" y="143.50"></text></g><g><title>impl_parent (2,704,072 samples, 0.41%)</title><rect x="29.0509%" y="117" width="0.4094%" height="15" fill="rgb(231,138,38)"/><text x="29.3009%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,541,184 samples, 0.23%)</title><rect x="29.2270%" y="101" width="0.2333%" height="15" fill="rgb(231,145,46)"/><text x="29.4770%" y="111.50"></text></g><g><title>impl_trait_ref (6,059,906 samples, 0.92%)</title><rect x="29.4603%" y="117" width="0.9174%" height="15" fill="rgb(251,118,11)"/><text x="29.7103%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,701,144 samples, 0.71%)</title><rect x="29.6660%" y="101" width="0.7117%" height="15" fill="rgb(217,147,25)"/><text x="29.9160%" y="111.50"></text></g><g><title>trait_impls_of (961,471 samples, 0.15%)</title><rect x="30.3817%" y="117" width="0.1456%" height="15" fill="rgb(247,81,37)"/><text x="30.6317%" y="127.50"></text></g><g><title>coherent_trait (15,200,849 samples, 2.30%)</title><rect x="28.2261%" y="149" width="2.3014%" height="15" fill="rgb(209,12,38)"/><text x="28.4761%" y="159.50">c..</text></g><g><title>specialization_graph_of (14,454,710 samples, 2.19%)</title><rect x="28.3390%" y="133" width="2.1884%" height="15" fill="rgb(227,1,9)"/><text x="28.5890%" y="143.50">s..</text></g><g><title>coherence_checking (15,340,940 samples, 2.32%)</title><rect x="28.2228%" y="165" width="2.3226%" height="15" fill="rgb(248,47,43)"/><text x="28.4728%" y="175.50">c..</text></g><g><title>adt_dtorck_constraint (847,457 samples, 0.13%)</title><rect x="39.6489%" y="53" width="0.1283%" height="15" fill="rgb(221,10,30)"/><text x="39.8989%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,532,468 samples, 0.23%)</title><rect x="39.5585%" y="69" width="0.2320%" height="15" fill="rgb(210,229,1)"/><text x="39.8085%" y="79.50"></text></g><g><title>adt_dtorck_constraint (2,197,366 samples, 0.33%)</title><rect x="39.4732%" y="85" width="0.3327%" height="15" fill="rgb(222,148,37)"/><text x="39.7232%" y="95.50"></text></g><g><title>dropck_outlives (3,954,408 samples, 0.60%)</title><rect x="39.2228%" y="117" width="0.5987%" height="15" fill="rgb(234,67,33)"/><text x="39.4728%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,925,693 samples, 0.44%)</title><rect x="39.3785%" y="101" width="0.4429%" height="15" fill="rgb(247,98,35)"/><text x="39.6285%" y="111.50"></text></g><g><title>evaluate_obligation (2,766,771 samples, 0.42%)</title><rect x="39.8215%" y="117" width="0.4189%" height="15" fill="rgb(247,138,52)"/><text x="40.0715%" y="127.50"></text></g><g><title>dropck_outlives (3,173,139 samples, 0.48%)</title><rect x="54.8058%" y="101" width="0.4804%" height="15" fill="rgb(213,79,30)"/><text x="55.0558%" y="111.50"></text></g><g><title>evaluate_obligation (6,360,852 samples, 0.96%)</title><rect x="55.2862%" y="101" width="0.9630%" height="15" fill="rgb(246,177,23)"/><text x="55.5362%" y="111.50"></text></g><g><title>is_copy_raw (766,614 samples, 0.12%)</title><rect x="56.4171%" y="101" width="0.1161%" height="15" fill="rgb(230,62,27)"/><text x="56.6671%" y="111.50"></text></g><g><title>method_autoderef_steps (1,461,405 samples, 0.22%)</title><rect x="56.5708%" y="101" width="0.2213%" height="15" fill="rgb(216,154,8)"/><text x="56.8208%" y="111.50"></text></g><g><title>predicates_of (786,431 samples, 0.12%)</title><rect x="56.8002%" y="101" width="0.1191%" height="15" fill="rgb(244,35,45)"/><text x="57.0502%" y="111.50"></text></g><g><title>typeck (108,005,207 samples, 16.35%)</title><rect x="40.6647%" y="117" width="16.3516%" height="15" fill="rgb(251,115,12)"/><text x="40.9147%" y="127.50">typeck</text></g><g><title>item_bodies_checking (174,885,207 samples, 26.48%)</title><rect x="30.5527%" y="165" width="26.4770%" height="15" fill="rgb(240,54,50)"/><text x="30.8027%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (174,881,377 samples, 26.48%)</title><rect x="30.5533%" y="149" width="26.4764%" height="15" fill="rgb(233,84,52)"/><text x="30.8033%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (174,699,233 samples, 26.45%)</title><rect x="30.5809%" y="133" width="26.4489%" height="15" fill="rgb(207,117,47)"/><text x="30.8309%" y="143.50">typeck</text></g><g><title>item_types_checking (3,096,754 samples, 0.47%)</title><rect x="57.0297%" y="165" width="0.4688%" height="15" fill="rgb(249,43,39)"/><text x="57.2797%" y="175.50"></text></g><g><title>check_mod_item_types (3,089,664 samples, 0.47%)</title><rect x="57.0308%" y="149" width="0.4678%" height="15" fill="rgb(209,38,44)"/><text x="57.2808%" y="159.50"></text></g><g><title>named_region_map (1,834,579 samples, 0.28%)</title><rect x="57.7153%" y="117" width="0.2777%" height="15" fill="rgb(236,212,23)"/><text x="57.9653%" y="127.50"></text></g><g><title>resolve_lifetimes (1,800,139 samples, 0.27%)</title><rect x="57.7205%" y="101" width="0.2725%" height="15" fill="rgb(242,79,21)"/><text x="57.9705%" y="111.50"></text></g><g><title>lint_levels (998,791 samples, 0.15%)</title><rect x="57.8418%" y="85" width="0.1512%" height="15" fill="rgb(211,96,35)"/><text x="58.0918%" y="95.50"></text></g><g><title>generics_of (2,080,680 samples, 0.32%)</title><rect x="57.6808%" y="133" width="0.3150%" height="15" fill="rgb(253,215,40)"/><text x="57.9308%" y="143.50"></text></g><g><title>predicates_of (1,024,831 samples, 0.16%)</title><rect x="58.0070%" y="133" width="0.1552%" height="15" fill="rgb(211,81,21)"/><text x="58.2570%" y="143.50"></text></g><g><title>predicates_defined_on (930,170 samples, 0.14%)</title><rect x="58.0214%" y="117" width="0.1408%" height="15" fill="rgb(208,190,38)"/><text x="58.2714%" y="127.50"></text></g><g><title>type_collecting (4,535,131 samples, 0.69%)</title><rect x="57.5030%" y="165" width="0.6866%" height="15" fill="rgb(235,213,38)"/><text x="57.7530%" y="175.50"></text></g><g><title>collect_mod_item_types (4,518,261 samples, 0.68%)</title><rect x="57.5055%" y="149" width="0.6840%" height="15" fill="rgb(237,122,38)"/><text x="57.7555%" y="159.50"></text></g><g><title>adt_sized_constraint (684,618 samples, 0.10%)</title><rect x="58.6921%" y="69" width="0.1036%" height="15" fill="rgb(244,218,35)"/><text x="58.9421%" y="79.50"></text></g><g><title>adt_sized_constraint (818,579 samples, 0.12%)</title><rect x="58.6741%" y="85" width="0.1239%" height="15" fill="rgb(240,68,47)"/><text x="58.9241%" y="95.50"></text></g><g><title>adt_sized_constraint (943,850 samples, 0.14%)</title><rect x="58.6576%" y="101" width="0.1429%" height="15" fill="rgb(210,16,53)"/><text x="58.9076%" y="111.50"></text></g><g><title>adt_sized_constraint (1,121,491 samples, 0.17%)</title><rect x="58.6324%" y="117" width="0.1698%" height="15" fill="rgb(235,124,12)"/><text x="58.8824%" y="127.50"></text></g><g><title>evaluate_obligation (1,598,716 samples, 0.24%)</title><rect x="58.5658%" y="133" width="0.2420%" height="15" fill="rgb(224,169,11)"/><text x="58.8158%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,711,893 samples, 0.71%)</title><rect x="58.3027%" y="149" width="0.7134%" height="15" fill="rgb(250,166,2)"/><text x="58.5527%" y="159.50"></text></g><g><title>region_scope_tree (811,117 samples, 0.12%)</title><rect x="58.8933%" y="133" width="0.1228%" height="15" fill="rgb(242,216,29)"/><text x="59.1433%" y="143.50"></text></g><g><title>evaluate_obligation (665,576 samples, 0.10%)</title><rect x="59.3254%" y="133" width="0.1008%" height="15" fill="rgb(230,116,27)"/><text x="59.5754%" y="143.50"></text></g><g><title>region_scope_tree (1,565,736 samples, 0.24%)</title><rect x="59.5439%" y="133" width="0.2370%" height="15" fill="rgb(228,99,48)"/><text x="59.7939%" y="143.50"></text></g><g><title>analysis (393,373,910 samples, 59.56%)</title><rect x="0.2513%" y="197" width="59.5555%" height="15" fill="rgb(253,11,6)"/><text x="0.5013%" y="207.50">analysis</text></g><g><title>type_check_crate (208,940,586 samples, 31.63%)</title><rect x="28.1739%" y="181" width="31.6329%" height="15" fill="rgb(247,143,39)"/><text x="28.4239%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,670,000 samples, 1.62%)</title><rect x="58.1914%" y="165" width="1.6154%" height="15" fill="rgb(236,97,10)"/><text x="58.4414%" y="175.50"></text></g><g><title>check_item_well_formed (5,222,376 samples, 0.79%)</title><rect x="59.0161%" y="149" width="0.7906%" height="15" fill="rgb(233,208,19)"/><text x="59.2661%" y="159.50"></text></g><g><title>metadata_load_macro (1,013,356 samples, 0.15%)</title><rect x="91.9281%" y="149" width="0.1534%" height="15" fill="rgb(216,164,2)"/><text x="92.1781%" y="159.50"></text></g><g><title>metadata_register_crate (2,698,441 samples, 0.41%)</title><rect x="92.0815%" y="149" width="0.4085%" height="15" fill="rgb(220,129,5)"/><text x="92.3315%" y="159.50"></text></g><g><title>metadata_register_crate (1,430,646 samples, 0.22%)</title><rect x="92.2735%" y="133" width="0.2166%" height="15" fill="rgb(242,17,10)"/><text x="92.5235%" y="143.50"></text></g><g><title>macro_expand_crate (214,376,907 samples, 32.46%)</title><rect x="60.0716%" y="181" width="32.4559%" height="15" fill="rgb(242,107,0)"/><text x="60.3216%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (214,362,336 samples, 32.45%)</title><rect x="60.0738%" y="165" width="32.4537%" height="15" fill="rgb(251,28,31)"/><text x="60.3238%" y="175.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (875,439 samples, 0.13%)</title><rect x="92.5278%" y="181" width="0.1325%" height="15" fill="rgb(233,223,10)"/><text x="92.7778%" y="191.50"></text></g><g><title>finalize_macro_resolutions (3,125,885 samples, 0.47%)</title><rect x="92.7709%" y="165" width="0.4732%" height="15" fill="rgb(215,21,27)"/><text x="93.0209%" y="175.50"></text></g><g><title>late_resolve_crate (9,990,911 samples, 1.51%)</title><rect x="93.2442%" y="165" width="1.5126%" height="15" fill="rgb(232,23,21)"/><text x="93.4942%" y="175.50"></text></g><g><title>resolve_check_unused (728,688 samples, 0.11%)</title><rect x="94.7603%" y="165" width="0.1103%" height="15" fill="rgb(244,5,23)"/><text x="95.0103%" y="175.50"></text></g><g><title>configure_and_expand (231,431,087 samples, 35.04%)</title><rect x="59.8852%" y="197" width="35.0379%" height="15" fill="rgb(226,81,46)"/><text x="60.1352%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (14,689,704 samples, 2.22%)</title><rect x="92.6991%" y="181" width="2.2240%" height="15" fill="rgb(247,70,30)"/><text x="92.9491%" y="191.50">r..</text></g><g><title>drop_ast (1,285,125 samples, 0.19%)</title><rect x="94.9230%" y="197" width="0.1946%" height="15" fill="rgb(212,68,19)"/><text x="95.1730%" y="207.50"></text></g><g><title>early_lint_checks (3,308,407 samples, 0.50%)</title><rect x="95.1218%" y="197" width="0.5009%" height="15" fill="rgb(240,187,13)"/><text x="95.3718%" y="207.50"></text></g><g><title>free_global_ctxt (6,582,243 samples, 1.00%)</title><rect x="95.6227%" y="197" width="0.9965%" height="15" fill="rgb(223,113,26)"/><text x="95.8727%" y="207.50"></text></g><g><title>hir_lowering (16,653,166 samples, 2.52%)</title><rect x="96.6539%" y="197" width="2.5212%" height="15" fill="rgb(206,192,2)"/><text x="96.9039%" y="207.50">hi..</text></g><g><title>parse_crate (3,172,915 samples, 0.48%)</title><rect x="99.1870%" y="197" width="0.4804%" height="15" fill="rgb(241,108,4)"/><text x="99.4370%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,391,646 samples, 0.21%)</title><rect x="99.7078%" y="197" width="0.2107%" height="15" fill="rgb(247,173,49)"/><text x="99.9578%" y="207.50"></text></g><g><title>all (660,516,854 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (660,516,854 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>