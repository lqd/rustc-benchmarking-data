<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (399,437 samples, 0.10%)</title><rect x="14.1221%" y="213" width="0.1050%" height="15" fill="rgb(227,0,7)"/><text x="14.3721%" y="223.50"></text></g><g><title>is_sized_raw (531,178 samples, 0.14%)</title><rect x="14.2814%" y="213" width="0.1396%" height="15" fill="rgb(217,0,24)"/><text x="14.5314%" y="223.50"></text></g><g><title>evaluate_obligation (429,176 samples, 0.11%)</title><rect x="14.3082%" y="197" width="0.1128%" height="15" fill="rgb(221,193,54)"/><text x="14.5582%" y="207.50"></text></g><g><title>param_env (593,557 samples, 0.16%)</title><rect x="15.9943%" y="181" width="0.1560%" height="15" fill="rgb(248,212,6)"/><text x="16.2443%" y="191.50"></text></g><g><title>item_attrs (416,136 samples, 0.11%)</title><rect x="16.6415%" y="149" width="0.1094%" height="15" fill="rgb(208,68,35)"/><text x="16.8915%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (398,924 samples, 0.10%)</title><rect x="16.6461%" y="133" width="0.1048%" height="15" fill="rgb(232,128,0)"/><text x="16.8961%" y="143.50"></text></g><g><title>codegen_fn_attrs (593,937 samples, 0.16%)</title><rect x="16.6034%" y="165" width="0.1561%" height="15" fill="rgb(207,160,47)"/><text x="16.8534%" y="175.50"></text></g><g><title>adt_drop_tys (414,266 samples, 0.11%)</title><rect x="19.7280%" y="117" width="0.1089%" height="15" fill="rgb(228,23,34)"/><text x="19.9780%" y="127.50"></text></g><g><title>adt_drop_tys (917,968 samples, 0.24%)</title><rect x="19.7082%" y="133" width="0.2412%" height="15" fill="rgb(218,30,26)"/><text x="19.9582%" y="143.50"></text></g><g><title>is_copy_raw (3,259,030 samples, 0.86%)</title><rect x="19.9496%" y="133" width="0.8564%" height="15" fill="rgb(220,122,19)"/><text x="20.1996%" y="143.50"></text></g><g><title>evaluate_obligation (2,667,287 samples, 0.70%)</title><rect x="20.1051%" y="117" width="0.7009%" height="15" fill="rgb(250,228,42)"/><text x="20.3551%" y="127.50"></text></g><g><title>needs_drop_raw (4,698,414 samples, 1.23%)</title><rect x="19.5842%" y="149" width="1.2347%" height="15" fill="rgb(240,193,28)"/><text x="19.8342%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (1,199,855 samples, 0.32%)</title><rect x="21.0114%" y="133" width="0.3153%" height="15" fill="rgb(216,20,37)"/><text x="21.2614%" y="143.50"></text></g><g><title>impl_parent (678,487 samples, 0.18%)</title><rect x="21.6674%" y="117" width="0.1783%" height="15" fill="rgb(206,188,39)"/><text x="21.9174%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (428,993 samples, 0.11%)</title><rect x="21.7329%" y="101" width="0.1127%" height="15" fill="rgb(217,207,13)"/><text x="21.9829%" y="111.50"></text></g><g><title>specialization_graph_of (4,596,710 samples, 1.21%)</title><rect x="21.3576%" y="133" width="1.2079%" height="15" fill="rgb(231,73,38)"/><text x="21.6076%" y="143.50"></text></g><g><title>impl_trait_ref (2,739,321 samples, 0.72%)</title><rect x="21.8456%" y="117" width="0.7199%" height="15" fill="rgb(225,20,46)"/><text x="22.0956%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,496,658 samples, 0.66%)</title><rect x="21.9094%" y="101" width="0.6561%" height="15" fill="rgb(210,31,41)"/><text x="22.1594%" y="111.50"></text></g><g><title>resolve_instance (6,764,630 samples, 1.78%)</title><rect x="20.8188%" y="149" width="1.7776%" height="15" fill="rgb(221,200,47)"/><text x="21.0688%" y="159.50">r..</text></g><g><title>thir_body (3,640,326 samples, 0.96%)</title><rect x="22.6206%" y="149" width="0.9566%" height="15" fill="rgb(226,26,5)"/><text x="22.8706%" y="159.50"></text></g><g><title>mir_const (31,848,245 samples, 8.37%)</title><rect x="15.2412%" y="197" width="8.3692%" height="15" fill="rgb(249,33,26)"/><text x="15.4912%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (28,388,885 samples, 7.46%)</title><rect x="16.1503%" y="181" width="7.4602%" height="15" fill="rgb(235,183,28)"/><text x="16.4003%" y="191.50">unsafety_c..</text></g><g><title>mir_built (26,068,317 samples, 6.85%)</title><rect x="16.7601%" y="165" width="6.8504%" height="15" fill="rgb(221,5,38)"/><text x="17.0101%" y="175.50">mir_built</text></g><g><title>mir_promoted (35,477,973 samples, 9.32%)</title><rect x="14.4210%" y="213" width="9.3231%" height="15" fill="rgb(247,18,42)"/><text x="14.6710%" y="223.50">mir_promoted</text></g><g><title>mir_const_qualif (508,294 samples, 0.13%)</title><rect x="23.6105%" y="197" width="0.1336%" height="15" fill="rgb(241,131,45)"/><text x="23.8605%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (1,540,329 samples, 0.40%)</title><rect x="23.7451%" y="213" width="0.4048%" height="15" fill="rgb(249,31,29)"/><text x="23.9951%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (4,227,995 samples, 1.11%)</title><rect x="24.1499%" y="213" width="1.1111%" height="15" fill="rgb(225,111,53)"/><text x="24.3999%" y="223.50"></text></g><g><title>normalize_projection_ty (2,806,687 samples, 0.74%)</title><rect x="24.5234%" y="197" width="0.7376%" height="15" fill="rgb(238,160,17)"/><text x="24.7734%" y="207.50"></text></g><g><title>type_op_normalize_predicate (998,930 samples, 0.26%)</title><rect x="25.2610%" y="213" width="0.2625%" height="15" fill="rgb(214,148,48)"/><text x="25.5110%" y="223.50"></text></g><g><title>normalize_projection_ty (443,466 samples, 0.12%)</title><rect x="25.4069%" y="197" width="0.1165%" height="15" fill="rgb(232,36,49)"/><text x="25.6569%" y="207.50"></text></g><g><title>type_op_normalize_ty (1,189,891 samples, 0.31%)</title><rect x="25.5235%" y="213" width="0.3127%" height="15" fill="rgb(209,103,24)"/><text x="25.7735%" y="223.50"></text></g><g><title>normalize_projection_ty (686,728 samples, 0.18%)</title><rect x="25.6557%" y="197" width="0.1805%" height="15" fill="rgb(229,88,8)"/><text x="25.9057%" y="207.50"></text></g><g><title>type_op_prove_predicate (10,810,885 samples, 2.84%)</title><rect x="25.8362%" y="213" width="2.8409%" height="15" fill="rgb(213,181,19)"/><text x="26.0862%" y="223.50">ty..</text></g><g><title>MIR_borrow_checking (107,463,479 samples, 28.24%)</title><rect x="0.4419%" y="245" width="28.2398%" height="15" fill="rgb(254,191,54)"/><text x="0.6919%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (106,985,946 samples, 28.11%)</title><rect x="0.5674%" y="229" width="28.1143%" height="15" fill="rgb(241,83,37)"/><text x="0.8174%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (462,157 samples, 0.12%)</title><rect x="28.7409%" y="245" width="0.1214%" height="15" fill="rgb(233,36,39)"/><text x="28.9909%" y="255.50"></text></g><g><title>codegen_fn_attrs (524,146 samples, 0.14%)</title><rect x="29.1745%" y="181" width="0.1377%" height="15" fill="rgb(226,3,54)"/><text x="29.4245%" y="191.50"></text></g><g><title>should_inherit_track_caller (831,668 samples, 0.22%)</title><rect x="29.0998%" y="197" width="0.2185%" height="15" fill="rgb(245,192,40)"/><text x="29.3498%" y="207.50"></text></g><g><title>codegen_fn_attrs (1,086,780 samples, 0.29%)</title><rect x="29.0378%" y="213" width="0.2856%" height="15" fill="rgb(238,167,29)"/><text x="29.2878%" y="223.50"></text></g><g><title>check_mod_attrs (1,726,771 samples, 0.45%)</title><rect x="28.8697%" y="229" width="0.4538%" height="15" fill="rgb(232,182,51)"/><text x="29.1197%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (853,859 samples, 0.22%)</title><rect x="29.4680%" y="229" width="0.2244%" height="15" fill="rgb(231,60,39)"/><text x="29.7180%" y="239.50"></text></g><g><title>misc_checking_1 (3,222,346 samples, 0.85%)</title><rect x="28.8625%" y="245" width="0.8468%" height="15" fill="rgb(208,69,12)"/><text x="29.1125%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (2,072,733 samples, 0.54%)</title><rect x="29.7099%" y="229" width="0.5447%" height="15" fill="rgb(235,93,37)"/><text x="29.9599%" y="239.50"></text></g><g><title>check_mod_liveness (1,808,701 samples, 0.48%)</title><rect x="29.7793%" y="213" width="0.4753%" height="15" fill="rgb(213,116,39)"/><text x="30.0293%" y="223.50"></text></g><g><title>type_uninhabited_from (728,666 samples, 0.19%)</title><rect x="30.0631%" y="197" width="0.1915%" height="15" fill="rgb(222,207,29)"/><text x="30.3131%" y="207.50"></text></g><g><title>type_uninhabited_from (625,095 samples, 0.16%)</title><rect x="30.0903%" y="181" width="0.1643%" height="15" fill="rgb(206,96,30)"/><text x="30.3403%" y="191.50"></text></g><g><title>misc_checking_2 (4,362,628 samples, 1.15%)</title><rect x="29.7093%" y="245" width="1.1464%" height="15" fill="rgb(218,138,4)"/><text x="29.9593%" y="255.50"></text></g><g><title>match_checking (2,287,735 samples, 0.60%)</title><rect x="30.2546%" y="229" width="0.6012%" height="15" fill="rgb(250,191,14)"/><text x="30.5046%" y="239.50"></text></g><g><title>check_match (2,176,064 samples, 0.57%)</title><rect x="30.2839%" y="213" width="0.5718%" height="15" fill="rgb(239,60,40)"/><text x="30.5339%" y="223.50"></text></g><g><title>check_private_in_public (575,856 samples, 0.15%)</title><rect x="30.8587%" y="229" width="0.1513%" height="15" fill="rgb(206,27,48)"/><text x="31.1087%" y="239.50"></text></g><g><title>death_checking (840,659 samples, 0.22%)</title><rect x="31.0100%" y="229" width="0.2209%" height="15" fill="rgb(225,35,8)"/><text x="31.2600%" y="239.50"></text></g><g><title>eval_to_const_value_raw (682,517 samples, 0.18%)</title><rect x="31.7685%" y="69" width="0.1794%" height="15" fill="rgb(250,213,24)"/><text x="32.0185%" y="79.50"></text></g><g><title>eval_to_const_value_raw (681,207 samples, 0.18%)</title><rect x="31.7688%" y="53" width="0.1790%" height="15" fill="rgb(247,123,22)"/><text x="32.0188%" y="63.50"></text></g><g><title>eval_to_allocation_raw (678,626 samples, 0.18%)</title><rect x="31.7695%" y="37" width="0.1783%" height="15" fill="rgb(231,138,38)"/><text x="32.0195%" y="47.50"></text></g><g><title>eval_to_const_value_raw (900,201 samples, 0.24%)</title><rect x="31.7122%" y="133" width="0.2366%" height="15" fill="rgb(231,145,46)"/><text x="31.9622%" y="143.50"></text></g><g><title>eval_to_const_value_raw (898,061 samples, 0.24%)</title><rect x="31.7127%" y="117" width="0.2360%" height="15" fill="rgb(251,118,11)"/><text x="31.9627%" y="127.50"></text></g><g><title>eval_to_allocation_raw (894,831 samples, 0.24%)</title><rect x="31.7136%" y="101" width="0.2351%" height="15" fill="rgb(217,147,25)"/><text x="31.9636%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (690,977 samples, 0.18%)</title><rect x="31.7672%" y="85" width="0.1816%" height="15" fill="rgb(247,81,37)"/><text x="32.0172%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,084,362 samples, 0.28%)</title><rect x="31.6646%" y="197" width="0.2850%" height="15" fill="rgb(209,12,38)"/><text x="31.9146%" y="207.50"></text></g><g><title>eval_to_const_value_raw (1,082,632 samples, 0.28%)</title><rect x="31.6650%" y="181" width="0.2845%" height="15" fill="rgb(227,1,9)"/><text x="31.9150%" y="191.50"></text></g><g><title>eval_to_allocation_raw (1,080,622 samples, 0.28%)</title><rect x="31.6656%" y="165" width="0.2840%" height="15" fill="rgb(248,47,43)"/><text x="31.9156%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (916,011 samples, 0.24%)</title><rect x="31.7088%" y="149" width="0.2407%" height="15" fill="rgb(221,10,30)"/><text x="31.9588%" y="159.50"></text></g><g><title>crate_lints (4,435,299 samples, 1.17%)</title><rect x="31.2315%" y="213" width="1.1655%" height="15" fill="rgb(210,229,1)"/><text x="31.4815%" y="223.50"></text></g><g><title>type_of (1,196,493 samples, 0.31%)</title><rect x="32.0826%" y="197" width="0.3144%" height="15" fill="rgb(222,148,37)"/><text x="32.3326%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (953,390 samples, 0.25%)</title><rect x="32.1465%" y="181" width="0.2505%" height="15" fill="rgb(234,67,33)"/><text x="32.3965%" y="191.50"></text></g><g><title>lint_checking (6,145,688 samples, 1.61%)</title><rect x="31.2309%" y="229" width="1.6150%" height="15" fill="rgb(247,98,35)"/><text x="31.4809%" y="239.50"></text></g><g><title>module_lints (1,708,169 samples, 0.45%)</title><rect x="32.3970%" y="213" width="0.4489%" height="15" fill="rgb(247,138,52)"/><text x="32.6470%" y="223.50"></text></g><g><title>lint_mod (1,701,439 samples, 0.45%)</title><rect x="32.3988%" y="197" width="0.4471%" height="15" fill="rgb(213,79,30)"/><text x="32.6488%" y="207.50"></text></g><g><title>privacy_access_levels (626,427 samples, 0.16%)</title><rect x="32.8459%" y="229" width="0.1646%" height="15" fill="rgb(246,177,23)"/><text x="33.0959%" y="239.50"></text></g><g><title>privacy_checking_modules (3,543,649 samples, 0.93%)</title><rect x="33.0105%" y="229" width="0.9312%" height="15" fill="rgb(230,62,27)"/><text x="33.2605%" y="239.50"></text></g><g><title>check_mod_privacy (3,538,729 samples, 0.93%)</title><rect x="33.0118%" y="213" width="0.9299%" height="15" fill="rgb(216,154,8)"/><text x="33.2618%" y="223.50"></text></g><g><title>misc_checking_3 (11,766,400 samples, 3.09%)</title><rect x="30.8557%" y="245" width="3.0920%" height="15" fill="rgb(244,35,45)"/><text x="31.1057%" y="255.50">mis..</text></g><g><title>impl_parent (1,599,866 samples, 0.42%)</title><rect x="34.5435%" y="181" width="0.4204%" height="15" fill="rgb(251,115,12)"/><text x="34.7935%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (867,708 samples, 0.23%)</title><rect x="34.7359%" y="165" width="0.2280%" height="15" fill="rgb(240,54,50)"/><text x="34.9859%" y="175.50"></text></g><g><title>impl_trait_ref (4,021,798 samples, 1.06%)</title><rect x="34.9639%" y="181" width="1.0569%" height="15" fill="rgb(233,84,52)"/><text x="35.2139%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,525,868 samples, 0.93%)</title><rect x="35.0942%" y="165" width="0.9265%" height="15" fill="rgb(207,117,47)"/><text x="35.3442%" y="175.50"></text></g><g><title>trait_impls_of (599,878 samples, 0.16%)</title><rect x="36.0285%" y="181" width="0.1576%" height="15" fill="rgb(249,43,39)"/><text x="36.2785%" y="191.50"></text></g><g><title>coherent_trait (8,323,113 samples, 2.19%)</title><rect x="33.9997%" y="213" width="2.1872%" height="15" fill="rgb(209,38,44)"/><text x="34.2497%" y="223.50">c..</text></g><g><title>specialization_graph_of (8,299,252 samples, 2.18%)</title><rect x="34.0060%" y="197" width="2.1809%" height="15" fill="rgb(236,212,23)"/><text x="34.2560%" y="207.50">s..</text></g><g><title>coherence_checking (8,431,283 samples, 2.22%)</title><rect x="33.9934%" y="229" width="2.2156%" height="15" fill="rgb(242,79,21)"/><text x="34.2434%" y="239.50">c..</text></g><g><title>associated_item (1,403,516 samples, 0.37%)</title><rect x="58.4641%" y="165" width="0.3688%" height="15" fill="rgb(211,96,35)"/><text x="58.7141%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (1,102,510 samples, 0.29%)</title><rect x="58.5432%" y="149" width="0.2897%" height="15" fill="rgb(253,215,40)"/><text x="58.7932%" y="159.50"></text></g><g><title>associated_items (1,964,055 samples, 0.52%)</title><rect x="58.3385%" y="181" width="0.5161%" height="15" fill="rgb(211,81,21)"/><text x="58.5885%" y="191.50"></text></g><g><title>adt_dtorck_constraint (550,737 samples, 0.14%)</title><rect x="59.1865%" y="165" width="0.1447%" height="15" fill="rgb(208,190,38)"/><text x="59.4365%" y="175.50"></text></g><g><title>dropck_outlives (2,002,260 samples, 0.53%)</title><rect x="58.8893%" y="181" width="0.5262%" height="15" fill="rgb(235,213,38)"/><text x="59.1393%" y="191.50"></text></g><g><title>adt_def (421,655 samples, 0.11%)</title><rect x="60.5345%" y="149" width="0.1108%" height="15" fill="rgb(237,122,38)"/><text x="60.7845%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (420,055 samples, 0.11%)</title><rect x="60.5350%" y="133" width="0.1104%" height="15" fill="rgb(244,218,35)"/><text x="60.7850%" y="143.50"></text></g><g><title>item_attrs (404,505 samples, 0.11%)</title><rect x="60.5391%" y="117" width="0.1063%" height="15" fill="rgb(240,68,47)"/><text x="60.7891%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (402,675 samples, 0.11%)</title><rect x="60.5395%" y="101" width="0.1058%" height="15" fill="rgb(210,16,53)"/><text x="60.7895%" y="111.50"></text></g><g><title>adt_sized_constraint (432,115 samples, 0.11%)</title><rect x="60.5329%" y="165" width="0.1136%" height="15" fill="rgb(235,124,12)"/><text x="60.7829%" y="175.50"></text></g><g><title>predicates_of (580,825 samples, 0.15%)</title><rect x="60.7640%" y="165" width="0.1526%" height="15" fill="rgb(224,169,11)"/><text x="61.0140%" y="175.50"></text></g><g><title>specializes (396,683 samples, 0.10%)</title><rect x="60.9167%" y="165" width="0.1042%" height="15" fill="rgb(250,166,2)"/><text x="61.1667%" y="175.50"></text></g><g><title>trait_impls_of (493,464 samples, 0.13%)</title><rect x="61.0257%" y="165" width="0.1297%" height="15" fill="rgb(242,216,29)"/><text x="61.2757%" y="175.50"></text></g><g><title>evaluate_obligation (6,621,774 samples, 1.74%)</title><rect x="59.4155%" y="181" width="1.7401%" height="15" fill="rgb(230,116,27)"/><text x="59.6655%" y="191.50"></text></g><g><title>fn_sig (405,828 samples, 0.11%)</title><rect x="61.1671%" y="181" width="0.1066%" height="15" fill="rgb(228,99,48)"/><text x="61.4171%" y="191.50"></text></g><g><title>associated_item (777,367 samples, 0.20%)</title><rect x="61.3918%" y="149" width="0.2043%" height="15" fill="rgb(253,11,6)"/><text x="61.6418%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (676,807 samples, 0.18%)</title><rect x="61.4182%" y="133" width="0.1779%" height="15" fill="rgb(247,143,39)"/><text x="61.6682%" y="143.50"></text></g><g><title>impl_item_implementor_ids (1,096,010 samples, 0.29%)</title><rect x="61.3212%" y="181" width="0.2880%" height="15" fill="rgb(236,97,10)"/><text x="61.5712%" y="191.50"></text></g><g><title>associated_items (1,009,279 samples, 0.27%)</title><rect x="61.3439%" y="165" width="0.2652%" height="15" fill="rgb(233,208,19)"/><text x="61.5939%" y="175.50"></text></g><g><title>evaluate_obligation (798,408 samples, 0.21%)</title><rect x="62.0373%" y="165" width="0.2098%" height="15" fill="rgb(216,164,2)"/><text x="62.2873%" y="175.50"></text></g><g><title>method_autoderef_steps (1,933,942 samples, 0.51%)</title><rect x="61.7417%" y="181" width="0.5082%" height="15" fill="rgb(220,129,5)"/><text x="61.9917%" y="191.50"></text></g><g><title>predicates_of (606,774 samples, 0.16%)</title><rect x="62.2883%" y="181" width="0.1595%" height="15" fill="rgb(242,17,10)"/><text x="62.5383%" y="191.50"></text></g><g><title>predicates_defined_on (402,854 samples, 0.11%)</title><rect x="62.3419%" y="165" width="0.1059%" height="15" fill="rgb(242,107,0)"/><text x="62.5919%" y="175.50"></text></g><g><title>evaluate_obligation (1,172,051 samples, 0.31%)</title><rect x="66.9861%" y="165" width="0.3080%" height="15" fill="rgb(251,28,31)"/><text x="67.2361%" y="175.50"></text></g><g><title>typeck (19,443,858 samples, 5.11%)</title><rect x="62.5093%" y="181" width="5.1096%" height="15" fill="rgb(233,223,10)"/><text x="62.7593%" y="191.50">typeck</text></g><g><title>item_bodies_checking (119,614,703 samples, 31.43%)</title><rect x="36.2280%" y="229" width="31.4329%" height="15" fill="rgb(215,21,27)"/><text x="36.4780%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (119,610,813 samples, 31.43%)</title><rect x="36.2291%" y="213" width="31.4319%" height="15" fill="rgb(232,23,21)"/><text x="36.4791%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (119,293,058 samples, 31.35%)</title><rect x="36.3126%" y="197" width="31.3484%" height="15" fill="rgb(244,5,23)"/><text x="36.5626%" y="207.50">typeck</text></g><g><title>evaluate_obligation (409,766 samples, 0.11%)</title><rect x="69.8604%" y="197" width="0.1077%" height="15" fill="rgb(226,81,46)"/><text x="70.1104%" y="207.50"></text></g><g><title>item_types_checking (10,115,634 samples, 2.66%)</title><rect x="67.6610%" y="229" width="2.6582%" height="15" fill="rgb(247,70,30)"/><text x="67.9110%" y="239.50">it..</text></g><g><title>check_mod_item_types (10,108,864 samples, 2.66%)</title><rect x="67.6627%" y="213" width="2.6565%" height="15" fill="rgb(212,68,19)"/><text x="67.9127%" y="223.50">ch..</text></g><g><title>typeck (449,176 samples, 0.12%)</title><rect x="70.2012%" y="197" width="0.1180%" height="15" fill="rgb(240,187,13)"/><text x="70.4512%" y="207.50"></text></g><g><title>fn_sig (1,886,351 samples, 0.50%)</title><rect x="70.5177%" y="197" width="0.4957%" height="15" fill="rgb(223,113,26)"/><text x="70.7677%" y="207.50"></text></g><g><title>is_late_bound_map (937,641 samples, 0.25%)</title><rect x="71.1022%" y="181" width="0.2464%" height="15" fill="rgb(206,192,2)"/><text x="71.3522%" y="191.50"></text></g><g><title>resolve_lifetimes (905,531 samples, 0.24%)</title><rect x="71.1106%" y="165" width="0.2380%" height="15" fill="rgb(241,108,4)"/><text x="71.3606%" y="175.50"></text></g><g><title>generics_of (1,416,132 samples, 0.37%)</title><rect x="71.0134%" y="197" width="0.3721%" height="15" fill="rgb(247,173,49)"/><text x="71.2634%" y="207.50"></text></g><g><title>explicit_predicates_of (688,498 samples, 0.18%)</title><rect x="71.5077%" y="165" width="0.1809%" height="15" fill="rgb(224,114,35)"/><text x="71.7577%" y="175.50"></text></g><g><title>is_late_bound_map (531,816 samples, 0.14%)</title><rect x="71.7998%" y="101" width="0.1398%" height="15" fill="rgb(245,159,27)"/><text x="72.0498%" y="111.50"></text></g><g><title>resolve_lifetimes (526,166 samples, 0.14%)</title><rect x="71.8013%" y="85" width="0.1383%" height="15" fill="rgb(245,172,44)"/><text x="72.0513%" y="95.50"></text></g><g><title>lint_levels (416,395 samples, 0.11%)</title><rect x="71.8301%" y="69" width="0.1094%" height="15" fill="rgb(236,23,11)"/><text x="72.0801%" y="79.50"></text></g><g><title>generics_of (556,206 samples, 0.15%)</title><rect x="71.7949%" y="117" width="0.1462%" height="15" fill="rgb(205,117,38)"/><text x="72.0449%" y="127.50"></text></g><g><title>predicates_of (2,214,676 samples, 0.58%)</title><rect x="71.4055%" y="197" width="0.5820%" height="15" fill="rgb(237,72,25)"/><text x="71.6555%" y="207.50"></text></g><g><title>predicates_defined_on (2,071,754 samples, 0.54%)</title><rect x="71.4431%" y="181" width="0.5444%" height="15" fill="rgb(244,70,9)"/><text x="71.6931%" y="191.50"></text></g><g><title>inferred_outlives_of (1,137,372 samples, 0.30%)</title><rect x="71.6886%" y="165" width="0.2989%" height="15" fill="rgb(217,125,39)"/><text x="71.9386%" y="175.50"></text></g><g><title>inferred_outlives_crate (1,089,292 samples, 0.29%)</title><rect x="71.7013%" y="149" width="0.2862%" height="15" fill="rgb(235,36,10)"/><text x="71.9513%" y="159.50"></text></g><g><title>type_of (817,508 samples, 0.21%)</title><rect x="71.7727%" y="133" width="0.2148%" height="15" fill="rgb(251,123,47)"/><text x="72.0227%" y="143.50"></text></g><g><title>type_collecting (6,642,385 samples, 1.75%)</title><rect x="70.3201%" y="229" width="1.7455%" height="15" fill="rgb(221,13,13)"/><text x="70.5701%" y="239.50"></text></g><g><title>collect_mod_item_types (6,627,765 samples, 1.74%)</title><rect x="70.3239%" y="213" width="1.7417%" height="15" fill="rgb(238,131,9)"/><text x="70.5739%" y="223.50"></text></g><g><title>evaluate_obligation (793,088 samples, 0.21%)</title><rect x="74.8688%" y="197" width="0.2084%" height="15" fill="rgb(211,50,8)"/><text x="75.1188%" y="207.50"></text></g><g><title>implied_outlives_bounds (593,070 samples, 0.16%)</title><rect x="75.0982%" y="197" width="0.1558%" height="15" fill="rgb(245,182,24)"/><text x="75.3482%" y="207.50"></text></g><g><title>object_safety_violations (458,735 samples, 0.12%)</title><rect x="75.2583%" y="197" width="0.1205%" height="15" fill="rgb(242,14,37)"/><text x="75.5083%" y="207.50"></text></g><g><title>param_env (1,426,289 samples, 0.37%)</title><rect x="75.3793%" y="197" width="0.3748%" height="15" fill="rgb(246,228,12)"/><text x="75.6293%" y="207.50"></text></g><g><title>region_scope_tree (1,290,621 samples, 0.34%)</title><rect x="75.7881%" y="197" width="0.3392%" height="15" fill="rgb(213,55,15)"/><text x="76.0381%" y="207.50"></text></g><g><title>check_impl_item_well_formed (14,935,169 samples, 3.92%)</title><rect x="72.2260%" y="213" width="3.9247%" height="15" fill="rgb(209,9,3)"/><text x="72.4760%" y="223.50">chec..</text></g><g><title>evaluate_obligation (488,605 samples, 0.13%)</title><rect x="76.6681%" y="197" width="0.1284%" height="15" fill="rgb(230,59,30)"/><text x="76.9181%" y="207.50"></text></g><g><title>analysis (292,388,339 samples, 76.84%)</title><rect x="0.2334%" y="261" width="76.8352%" height="15" fill="rgb(209,121,21)"/><text x="0.4834%" y="271.50">analysis</text></g><g><title>type_check_crate (164,091,770 samples, 43.12%)</title><rect x="33.9478%" y="245" width="43.1208%" height="15" fill="rgb(220,109,13)"/><text x="34.1978%" y="255.50">type_check_crate</text></g><g><title>wf_checking (19,023,062 samples, 5.00%)</title><rect x="72.0696%" y="229" width="4.9990%" height="15" fill="rgb(232,18,1)"/><text x="72.3196%" y="239.50">wf_che..</text></g><g><title>check_item_well_formed (3,493,018 samples, 0.92%)</title><rect x="76.1507%" y="213" width="0.9179%" height="15" fill="rgb(215,41,42)"/><text x="76.4007%" y="223.50"></text></g><g><title>codegen_crate (401,984 samples, 0.11%)</title><rect x="77.0715%" y="261" width="0.1056%" height="15" fill="rgb(224,123,36)"/><text x="77.3215%" y="271.50"></text></g><g><title>metadata_register_crate (13,491,811 samples, 3.55%)</title><rect x="89.2717%" y="213" width="3.5454%" height="15" fill="rgb(240,125,3)"/><text x="89.5217%" y="223.50">meta..</text></g><g><title>metadata_register_crate (10,790,499 samples, 2.84%)</title><rect x="89.9816%" y="197" width="2.8356%" height="15" fill="rgb(205,98,50)"/><text x="90.2316%" y="207.50">me..</text></g><g><title>macro_expand_crate (59,521,984 samples, 15.64%)</title><rect x="77.3750%" y="245" width="15.6415%" height="15" fill="rgb(205,185,37)"/><text x="77.6250%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (59,507,924 samples, 15.64%)</title><rect x="77.3787%" y="229" width="15.6378%" height="15" fill="rgb(238,207,15)"/><text x="77.6287%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (758,527 samples, 0.20%)</title><rect x="92.8172%" y="213" width="0.1993%" height="15" fill="rgb(213,199,42)"/><text x="93.0672%" y="223.50"></text></g><g><title>late_resolve_crate (4,791,053 samples, 1.26%)</title><rect x="93.0983%" y="229" width="1.2590%" height="15" fill="rgb(235,201,11)"/><text x="93.3483%" y="239.50"></text></g><g><title>configure_and_expand (65,651,692 samples, 17.25%)</title><rect x="77.1771%" y="261" width="17.2523%" height="15" fill="rgb(207,46,11)"/><text x="77.4271%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (5,319,659 samples, 1.40%)</title><rect x="93.0315%" y="245" width="1.3979%" height="15" fill="rgb(241,35,35)"/><text x="93.2815%" y="255.50"></text></g><g><title>drop_ast (506,426 samples, 0.13%)</title><rect x="94.4294%" y="261" width="0.1331%" height="15" fill="rgb(243,32,47)"/><text x="94.6794%" y="271.50"></text></g><g><title>early_lint_checks (1,006,711 samples, 0.26%)</title><rect x="94.5677%" y="261" width="0.2645%" height="15" fill="rgb(247,202,23)"/><text x="94.8177%" y="271.50"></text></g><g><title>free_global_ctxt (5,113,297 samples, 1.34%)</title><rect x="94.8322%" y="261" width="1.3437%" height="15" fill="rgb(219,102,11)"/><text x="95.0822%" y="271.50"></text></g><g><title>generate_crate_metadata (2,746,511 samples, 0.72%)</title><rect x="96.1759%" y="261" width="0.7217%" height="15" fill="rgb(243,110,44)"/><text x="96.4259%" y="271.50"></text></g><g><title>hir_lowering (9,157,412 samples, 2.41%)</title><rect x="96.8977%" y="261" width="2.4064%" height="15" fill="rgb(222,74,54)"/><text x="97.1477%" y="271.50">hi..</text></g><g><title>parse_crate (591,807 samples, 0.16%)</title><rect x="99.3201%" y="261" width="0.1555%" height="15" fill="rgb(216,99,12)"/><text x="99.5701%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (1,255,784 samples, 0.33%)</title><rect x="99.5330%" y="261" width="0.3300%" height="15" fill="rgb(226,22,26)"/><text x="99.7830%" y="271.50"></text></g><g><title>all (380,539,373 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (380,539,373 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (415,555 samples, 0.11%)</title><rect x="99.8908%" y="261" width="0.1092%" height="15" fill="rgb(252,105,26)"/><text x="100.1408%" y="271.50"></text></g></svg></svg>