<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (156,573 samples, 0.18%)</title><rect x="6.3129%" y="117" width="0.1821%" height="15" fill="rgb(227,0,7)"/><text x="6.5629%" y="127.50"></text></g><g><title>item_attrs (161,702 samples, 0.19%)</title><rect x="6.7522%" y="85" width="0.1881%" height="15" fill="rgb(217,0,24)"/><text x="7.0022%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (156,542 samples, 0.18%)</title><rect x="6.7582%" y="69" width="0.1821%" height="15" fill="rgb(221,193,54)"/><text x="7.0082%" y="79.50"></text></g><g><title>codegen_fn_attrs (243,212 samples, 0.28%)</title><rect x="6.6771%" y="101" width="0.2829%" height="15" fill="rgb(248,212,6)"/><text x="6.9271%" y="111.50"></text></g><g><title>is_copy_raw (112,281 samples, 0.13%)</title><rect x="7.9600%" y="85" width="0.1306%" height="15" fill="rgb(208,68,35)"/><text x="8.2100%" y="95.50"></text></g><g><title>evaluate_obligation (99,501 samples, 0.12%)</title><rect x="7.9748%" y="69" width="0.1157%" height="15" fill="rgb(232,128,0)"/><text x="8.2248%" y="79.50"></text></g><g><title>adt_drop_tys (137,940 samples, 0.16%)</title><rect x="8.1470%" y="69" width="0.1604%" height="15" fill="rgb(207,160,47)"/><text x="8.3970%" y="79.50"></text></g><g><title>needs_drop_raw (489,026 samples, 0.57%)</title><rect x="8.0941%" y="85" width="0.5688%" height="15" fill="rgb(228,23,34)"/><text x="8.3441%" y="95.50"></text></g><g><title>is_copy_raw (305,626 samples, 0.36%)</title><rect x="8.3074%" y="69" width="0.3555%" height="15" fill="rgb(218,30,26)"/><text x="8.5574%" y="79.50"></text></g><g><title>evaluate_obligation (260,974 samples, 0.30%)</title><rect x="8.3594%" y="53" width="0.3035%" height="15" fill="rgb(220,122,19)"/><text x="8.6094%" y="63.50"></text></g><g><title>impl_parent (153,651 samples, 0.18%)</title><rect x="9.5925%" y="53" width="0.1787%" height="15" fill="rgb(250,228,42)"/><text x="9.8425%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (104,341 samples, 0.12%)</title><rect x="9.6498%" y="37" width="0.1214%" height="15" fill="rgb(240,193,28)"/><text x="9.8998%" y="47.50"></text></g><g><title>specialization_graph_of (1,314,204 samples, 1.53%)</title><rect x="8.8696%" y="69" width="1.5285%" height="15" fill="rgb(216,20,37)"/><text x="9.1196%" y="79.50"></text></g><g><title>impl_trait_ref (539,015 samples, 0.63%)</title><rect x="9.7712%" y="53" width="0.6269%" height="15" fill="rgb(206,188,39)"/><text x="10.0212%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (488,795 samples, 0.57%)</title><rect x="9.8296%" y="37" width="0.5685%" height="15" fill="rgb(217,207,13)"/><text x="10.0796%" y="47.50"></text></g><g><title>resolve_instance (1,557,266 samples, 1.81%)</title><rect x="8.6629%" y="85" width="1.8112%" height="15" fill="rgb(231,73,38)"/><text x="8.9129%" y="95.50">r..</text></g><g><title>thir_body (306,821 samples, 0.36%)</title><rect x="10.4851%" y="85" width="0.3568%" height="15" fill="rgb(225,20,46)"/><text x="10.7351%" y="95.50"></text></g><g><title>mir_const (4,212,395 samples, 4.90%)</title><rect x="5.9502%" y="133" width="4.8992%" height="15" fill="rgb(210,31,41)"/><text x="6.2002%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (3,743,961 samples, 4.35%)</title><rect x="6.4950%" y="117" width="4.3544%" height="15" fill="rgb(221,200,47)"/><text x="6.7450%" y="127.50">unsaf..</text></g><g><title>mir_built (3,344,187 samples, 3.89%)</title><rect x="6.9599%" y="101" width="3.8894%" height="15" fill="rgb(226,26,5)"/><text x="7.2099%" y="111.50">mir_..</text></g><g><title>mir_promoted (4,690,344 samples, 5.46%)</title><rect x="5.5935%" y="149" width="5.4551%" height="15" fill="rgb(249,33,26)"/><text x="5.8435%" y="159.50">mir_pro..</text></g><g><title>mir_const_qualif (171,272 samples, 0.20%)</title><rect x="10.8494%" y="133" width="0.1992%" height="15" fill="rgb(235,183,28)"/><text x="11.0994%" y="143.50"></text></g><g><title>mir_const (130,641 samples, 0.15%)</title><rect x="10.8966%" y="117" width="0.1519%" height="15" fill="rgb(221,5,38)"/><text x="11.1466%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (211,504 samples, 0.25%)</title><rect x="11.0486%" y="149" width="0.2460%" height="15" fill="rgb(247,18,42)"/><text x="11.2986%" y="159.50"></text></g><g><title>type_op_prove_predicate (601,945 samples, 0.70%)</title><rect x="11.4347%" y="149" width="0.7001%" height="15" fill="rgb(241,131,45)"/><text x="11.6847%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,600,406 samples, 11.17%)</title><rect x="0.9768%" y="181" width="11.1657%" height="15" fill="rgb(249,31,29)"/><text x="1.2268%" y="191.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (9,559,985 samples, 11.12%)</title><rect x="1.0238%" y="165" width="11.1187%" height="15" fill="rgb(225,111,53)"/><text x="1.2738%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (89,381 samples, 0.10%)</title><rect x="12.1425%" y="181" width="0.1040%" height="15" fill="rgb(238,160,17)"/><text x="12.3925%" y="191.50"></text></g><g><title>hir_module_items (164,052 samples, 0.19%)</title><rect x="12.2464%" y="181" width="0.1908%" height="15" fill="rgb(214,148,48)"/><text x="12.4964%" y="191.50"></text></g><g><title>get_lang_items (102,582 samples, 0.12%)</title><rect x="12.8982%" y="101" width="0.1193%" height="15" fill="rgb(232,36,49)"/><text x="13.1482%" y="111.50"></text></g><g><title>codegen_fn_attrs (310,835 samples, 0.36%)</title><rect x="12.8402%" y="117" width="0.3615%" height="15" fill="rgb(209,103,24)"/><text x="13.0902%" y="127.50"></text></g><g><title>codegen_fn_attrs (473,285 samples, 0.55%)</title><rect x="12.6578%" y="149" width="0.5505%" height="15" fill="rgb(229,88,8)"/><text x="12.9078%" y="159.50"></text></g><g><title>should_inherit_track_caller (427,995 samples, 0.50%)</title><rect x="12.7105%" y="133" width="0.4978%" height="15" fill="rgb(213,181,19)"/><text x="12.9605%" y="143.50"></text></g><g><title>check_mod_attrs (643,997 samples, 0.75%)</title><rect x="12.4597%" y="165" width="0.7490%" height="15" fill="rgb(254,191,54)"/><text x="12.7097%" y="175.50"></text></g><g><title>check_mod_const_bodies (92,721 samples, 0.11%)</title><rect x="13.2087%" y="165" width="0.1078%" height="15" fill="rgb(241,83,37)"/><text x="13.4587%" y="175.50"></text></g><g><title>lookup_deprecation_entry (123,851 samples, 0.14%)</title><rect x="13.5294%" y="149" width="0.1440%" height="15" fill="rgb(233,36,39)"/><text x="13.7794%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (332,644 samples, 0.39%)</title><rect x="13.3840%" y="165" width="0.3869%" height="15" fill="rgb(226,3,54)"/><text x="13.6340%" y="175.50"></text></g><g><title>misc_checking_1 (1,196,223 samples, 1.39%)</title><rect x="12.4376%" y="181" width="1.3913%" height="15" fill="rgb(245,192,40)"/><text x="12.6876%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (161,082 samples, 0.19%)</title><rect x="13.8303%" y="165" width="0.1873%" height="15" fill="rgb(238,167,29)"/><text x="14.0803%" y="175.50"></text></g><g><title>check_mod_liveness (127,851 samples, 0.15%)</title><rect x="13.8690%" y="149" width="0.1487%" height="15" fill="rgb(232,182,51)"/><text x="14.1190%" y="159.50"></text></g><g><title>misc_checking_2 (338,694 samples, 0.39%)</title><rect x="13.8289%" y="181" width="0.3939%" height="15" fill="rgb(231,60,39)"/><text x="14.0789%" y="191.50"></text></g><g><title>match_checking (176,372 samples, 0.21%)</title><rect x="14.0177%" y="165" width="0.2051%" height="15" fill="rgb(208,69,12)"/><text x="14.2677%" y="175.50"></text></g><g><title>check_match (165,442 samples, 0.19%)</title><rect x="14.0304%" y="149" width="0.1924%" height="15" fill="rgb(235,93,37)"/><text x="14.2804%" y="159.50"></text></g><g><title>death_checking (182,882 samples, 0.21%)</title><rect x="14.3245%" y="165" width="0.2127%" height="15" fill="rgb(213,116,39)"/><text x="14.5745%" y="175.50"></text></g><g><title>eval_to_const_value_raw (107,211 samples, 0.12%)</title><rect x="15.0536%" y="133" width="0.1247%" height="15" fill="rgb(222,207,29)"/><text x="15.3036%" y="143.50"></text></g><g><title>eval_to_const_value_raw (104,761 samples, 0.12%)</title><rect x="15.0564%" y="117" width="0.1218%" height="15" fill="rgb(206,96,30)"/><text x="15.3064%" y="127.50"></text></g><g><title>eval_to_allocation_raw (99,171 samples, 0.12%)</title><rect x="15.0629%" y="101" width="0.1153%" height="15" fill="rgb(218,138,4)"/><text x="15.3129%" y="111.50"></text></g><g><title>crate_lints (1,638,598 samples, 1.91%)</title><rect x="14.5388%" y="149" width="1.9058%" height="15" fill="rgb(250,191,14)"/><text x="14.7888%" y="159.50">c..</text></g><g><title>type_of (1,012,623 samples, 1.18%)</title><rect x="15.2669%" y="133" width="1.1777%" height="15" fill="rgb(239,60,40)"/><text x="15.5169%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (779,230 samples, 0.91%)</title><rect x="15.5383%" y="117" width="0.9063%" height="15" fill="rgb(206,27,48)"/><text x="15.7883%" y="127.50"></text></g><g><title>lint_checking (1,769,669 samples, 2.06%)</title><rect x="14.5372%" y="165" width="2.0582%" height="15" fill="rgb(225,35,8)"/><text x="14.7872%" y="175.50">l..</text></g><g><title>module_lints (129,661 samples, 0.15%)</title><rect x="16.4446%" y="149" width="0.1508%" height="15" fill="rgb(250,213,24)"/><text x="16.6946%" y="159.50"></text></g><g><title>lint_mod (127,301 samples, 0.15%)</title><rect x="16.4474%" y="133" width="0.1481%" height="15" fill="rgb(247,123,22)"/><text x="16.6974%" y="143.50"></text></g><g><title>privacy_access_levels (97,781 samples, 0.11%)</title><rect x="16.5954%" y="165" width="0.1137%" height="15" fill="rgb(231,138,38)"/><text x="16.8454%" y="175.50"></text></g><g><title>privacy_checking_modules (273,594 samples, 0.32%)</title><rect x="16.7091%" y="165" width="0.3182%" height="15" fill="rgb(231,145,46)"/><text x="16.9591%" y="175.50"></text></g><g><title>check_mod_privacy (272,184 samples, 0.32%)</title><rect x="16.7108%" y="149" width="0.3166%" height="15" fill="rgb(251,118,11)"/><text x="16.9608%" y="159.50"></text></g><g><title>misc_checking_3 (2,426,438 samples, 2.82%)</title><rect x="14.2228%" y="181" width="2.8221%" height="15" fill="rgb(217,147,25)"/><text x="14.4728%" y="191.50">mi..</text></g><g><title>impl_parent (95,612 samples, 0.11%)</title><rect x="17.3771%" y="85" width="0.1112%" height="15" fill="rgb(247,81,37)"/><text x="17.6271%" y="95.50"></text></g><g><title>impl_trait_ref (284,001 samples, 0.33%)</title><rect x="17.4883%" y="85" width="0.3303%" height="15" fill="rgb(209,12,38)"/><text x="17.7383%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (240,901 samples, 0.28%)</title><rect x="17.5384%" y="69" width="0.2802%" height="15" fill="rgb(227,1,9)"/><text x="17.7884%" y="79.50"></text></g><g><title>adt_destructor (609,667 samples, 0.71%)</title><rect x="17.1753%" y="133" width="0.7091%" height="15" fill="rgb(248,47,43)"/><text x="17.4253%" y="143.50"></text></g><g><title>coherent_trait (593,227 samples, 0.69%)</title><rect x="17.1944%" y="117" width="0.6899%" height="15" fill="rgb(221,10,30)"/><text x="17.4444%" y="127.50"></text></g><g><title>specialization_graph_of (590,887 samples, 0.69%)</title><rect x="17.1972%" y="101" width="0.6872%" height="15" fill="rgb(210,229,1)"/><text x="17.4472%" y="111.50"></text></g><g><title>param_env (142,692 samples, 0.17%)</title><rect x="17.8844%" y="133" width="0.1660%" height="15" fill="rgb(222,148,37)"/><text x="18.1344%" y="143.50"></text></g><g><title>impl_parent (3,066,022 samples, 3.57%)</title><rect x="25.0369%" y="117" width="3.5659%" height="15" fill="rgb(234,67,33)"/><text x="25.2869%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (1,601,980 samples, 1.86%)</title><rect x="26.7397%" y="101" width="1.8632%" height="15" fill="rgb(247,98,35)"/><text x="26.9897%" y="111.50">m..</text></g><g><title>impl_trait_ref (8,367,859 samples, 9.73%)</title><rect x="28.6028%" y="117" width="9.7322%" height="15" fill="rgb(247,138,52)"/><text x="28.8528%" y="127.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,863,132 samples, 7.98%)</title><rect x="30.3529%" y="101" width="7.9821%" height="15" fill="rgb(213,79,30)"/><text x="30.6029%" y="111.50">metadata_de..</text></g><g><title>coherent_trait (19,371,705 samples, 22.53%)</title><rect x="17.1213%" y="149" width="22.5301%" height="15" fill="rgb(246,177,23)"/><text x="17.3713%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (18,572,936 samples, 21.60%)</title><rect x="18.0503%" y="133" width="21.6011%" height="15" fill="rgb(230,62,27)"/><text x="18.3003%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,128,873 samples, 1.31%)</title><rect x="38.3385%" y="117" width="1.3129%" height="15" fill="rgb(216,154,8)"/><text x="38.5885%" y="127.50"></text></g><g><title>implementations_of_trait (279,362 samples, 0.32%)</title><rect x="39.3266%" y="101" width="0.3249%" height="15" fill="rgb(244,35,45)"/><text x="39.5766%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (224,082 samples, 0.26%)</title><rect x="39.3909%" y="85" width="0.2606%" height="15" fill="rgb(251,115,12)"/><text x="39.6409%" y="95.50"></text></g><g><title>coherence_checking (19,480,056 samples, 22.66%)</title><rect x="17.0936%" y="165" width="22.6562%" height="15" fill="rgb(240,54,50)"/><text x="17.3436%" y="175.50">coherence_checking</text></g><g><title>adt_sized_constraint (128,871 samples, 0.15%)</title><rect x="53.3592%" y="117" width="0.1499%" height="15" fill="rgb(233,84,52)"/><text x="53.6092%" y="127.50"></text></g><g><title>associated_item (670,457 samples, 0.78%)</title><rect x="53.8316%" y="101" width="0.7798%" height="15" fill="rgb(207,117,47)"/><text x="54.0816%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (497,772 samples, 0.58%)</title><rect x="54.0325%" y="85" width="0.5789%" height="15" fill="rgb(249,43,39)"/><text x="54.2825%" y="95.50"></text></g><g><title>associated_items (986,149 samples, 1.15%)</title><rect x="53.5158%" y="117" width="1.1469%" height="15" fill="rgb(209,38,44)"/><text x="53.7658%" y="127.50"></text></g><g><title>adt_dtorck_constraint (162,171 samples, 0.19%)</title><rect x="55.3013%" y="69" width="0.1886%" height="15" fill="rgb(236,212,23)"/><text x="55.5513%" y="79.50"></text></g><g><title>adt_dtorck_constraint (284,692 samples, 0.33%)</title><rect x="55.1823%" y="85" width="0.3311%" height="15" fill="rgb(242,79,21)"/><text x="55.4323%" y="95.50"></text></g><g><title>dropck_outlives (689,967 samples, 0.80%)</title><rect x="54.7748%" y="117" width="0.8025%" height="15" fill="rgb(211,96,35)"/><text x="55.0248%" y="127.50"></text></g><g><title>adt_dtorck_constraint (500,615 samples, 0.58%)</title><rect x="54.9950%" y="101" width="0.5822%" height="15" fill="rgb(253,215,40)"/><text x="55.2450%" y="111.50"></text></g><g><title>adt_def (115,972 samples, 0.13%)</title><rect x="56.9044%" y="85" width="0.1349%" height="15" fill="rgb(211,81,21)"/><text x="57.1544%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (113,062 samples, 0.13%)</title><rect x="56.9078%" y="69" width="0.1315%" height="15" fill="rgb(208,190,38)"/><text x="57.1578%" y="79.50"></text></g><g><title>adt_sized_constraint (190,652 samples, 0.22%)</title><rect x="56.8839%" y="101" width="0.2217%" height="15" fill="rgb(235,213,38)"/><text x="57.1339%" y="111.50"></text></g><g><title>impl_trait_ref (99,070 samples, 0.12%)</title><rect x="57.2829%" y="101" width="0.1152%" height="15" fill="rgb(237,122,38)"/><text x="57.5329%" y="111.50"></text></g><g><title>predicates_of (222,981 samples, 0.26%)</title><rect x="57.4245%" y="101" width="0.2593%" height="15" fill="rgb(244,218,35)"/><text x="57.6745%" y="111.50"></text></g><g><title>predicates_defined_on (141,850 samples, 0.16%)</title><rect x="57.5188%" y="85" width="0.1650%" height="15" fill="rgb(240,68,47)"/><text x="57.7688%" y="95.50"></text></g><g><title>specializes (269,674 samples, 0.31%)</title><rect x="57.6838%" y="101" width="0.3136%" height="15" fill="rgb(210,16,53)"/><text x="57.9338%" y="111.50"></text></g><g><title>param_env (212,684 samples, 0.25%)</title><rect x="57.7501%" y="85" width="0.2474%" height="15" fill="rgb(235,124,12)"/><text x="58.0001%" y="95.50"></text></g><g><title>def_span (141,842 samples, 0.16%)</title><rect x="57.8325%" y="69" width="0.1650%" height="15" fill="rgb(224,169,11)"/><text x="58.0825%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (136,612 samples, 0.16%)</title><rect x="57.8385%" y="53" width="0.1589%" height="15" fill="rgb(250,166,2)"/><text x="58.0885%" y="63.50"></text></g><g><title>trait_impls_of (822,609 samples, 0.96%)</title><rect x="58.0165%" y="101" width="0.9567%" height="15" fill="rgb(242,216,29)"/><text x="58.2665%" y="111.50"></text></g><g><title>implementations_of_trait (299,594 samples, 0.35%)</title><rect x="58.6248%" y="85" width="0.3484%" height="15" fill="rgb(230,116,27)"/><text x="58.8748%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (183,694 samples, 0.21%)</title><rect x="58.7596%" y="69" width="0.2136%" height="15" fill="rgb(228,99,48)"/><text x="59.0096%" y="79.50"></text></g><g><title>evaluate_obligation (2,930,068 samples, 3.41%)</title><rect x="55.5772%" y="117" width="3.4078%" height="15" fill="rgb(253,11,6)"/><text x="55.8272%" y="127.50">eva..</text></g><g><title>fn_sig (208,392 samples, 0.24%)</title><rect x="59.0407%" y="117" width="0.2424%" height="15" fill="rgb(247,143,39)"/><text x="59.2907%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (179,092 samples, 0.21%)</title><rect x="59.0748%" y="101" width="0.2083%" height="15" fill="rgb(236,97,10)"/><text x="59.3248%" y="111.50"></text></g><g><title>generics_of (141,501 samples, 0.16%)</title><rect x="59.2831%" y="117" width="0.1646%" height="15" fill="rgb(233,208,19)"/><text x="59.5331%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (95,100 samples, 0.11%)</title><rect x="59.3370%" y="101" width="0.1106%" height="15" fill="rgb(216,164,2)"/><text x="59.5870%" y="111.50"></text></g><g><title>associated_item (91,382 samples, 0.11%)</title><rect x="59.4801%" y="85" width="0.1063%" height="15" fill="rgb(220,129,5)"/><text x="59.7301%" y="95.50"></text></g><g><title>impl_item_implementor_ids (124,992 samples, 0.15%)</title><rect x="59.4476%" y="117" width="0.1454%" height="15" fill="rgb(242,17,10)"/><text x="59.6976%" y="127.50"></text></g><g><title>associated_items (114,832 samples, 0.13%)</title><rect x="59.4594%" y="101" width="0.1336%" height="15" fill="rgb(242,107,0)"/><text x="59.7094%" y="111.50"></text></g><g><title>item_attrs (221,872 samples, 0.26%)</title><rect x="59.7007%" y="117" width="0.2580%" height="15" fill="rgb(251,28,31)"/><text x="59.9507%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (211,642 samples, 0.25%)</title><rect x="59.7126%" y="101" width="0.2461%" height="15" fill="rgb(233,223,10)"/><text x="59.9626%" y="111.50"></text></g><g><title>evaluate_obligation (327,113 samples, 0.38%)</title><rect x="60.4106%" y="101" width="0.3804%" height="15" fill="rgb(215,21,27)"/><text x="60.6606%" y="111.50"></text></g><g><title>method_autoderef_steps (630,236 samples, 0.73%)</title><rect x="60.0810%" y="117" width="0.7330%" height="15" fill="rgb(232,23,21)"/><text x="60.3310%" y="127.50"></text></g><g><title>object_safety_violations (127,222 samples, 0.15%)</title><rect x="60.8140%" y="117" width="0.1480%" height="15" fill="rgb(244,5,23)"/><text x="61.0640%" y="127.50"></text></g><g><title>explicit_predicates_of (194,262 samples, 0.23%)</title><rect x="61.3972%" y="85" width="0.2259%" height="15" fill="rgb(226,81,46)"/><text x="61.6472%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (154,872 samples, 0.18%)</title><rect x="61.4430%" y="69" width="0.1801%" height="15" fill="rgb(247,70,30)"/><text x="61.6930%" y="79.50"></text></g><g><title>predicates_of (566,710 samples, 0.66%)</title><rect x="61.0432%" y="117" width="0.6591%" height="15" fill="rgb(212,68,19)"/><text x="61.2932%" y="127.50"></text></g><g><title>predicates_defined_on (401,325 samples, 0.47%)</title><rect x="61.2355%" y="101" width="0.4668%" height="15" fill="rgb(240,187,13)"/><text x="61.4855%" y="111.50"></text></g><g><title>trait_impls_of (202,203 samples, 0.24%)</title><rect x="61.7180%" y="117" width="0.2352%" height="15" fill="rgb(223,113,26)"/><text x="61.9680%" y="127.50"></text></g><g><title>type_of (98,281 samples, 0.11%)</title><rect x="61.9532%" y="117" width="0.1143%" height="15" fill="rgb(206,192,2)"/><text x="62.2032%" y="127.50"></text></g><g><title>item_bodies_checking (19,238,584 samples, 22.38%)</title><rect x="39.7805%" y="165" width="22.3753%" height="15" fill="rgb(241,108,4)"/><text x="40.0305%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,235,823 samples, 22.37%)</title><rect x="39.7837%" y="149" width="22.3721%" height="15" fill="rgb(247,173,49)"/><text x="40.0337%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (19,185,282 samples, 22.31%)</title><rect x="39.8425%" y="133" width="22.3133%" height="15" fill="rgb(224,114,35)"/><text x="40.0925%" y="143.50">typeck</text></g><g><title>item_types_checking (901,910 samples, 1.05%)</title><rect x="62.1558%" y="165" width="1.0490%" height="15" fill="rgb(245,159,27)"/><text x="62.4058%" y="175.50"></text></g><g><title>check_mod_item_types (898,410 samples, 1.04%)</title><rect x="62.1599%" y="149" width="1.0449%" height="15" fill="rgb(245,172,44)"/><text x="62.4099%" y="159.50"></text></g><g><title>typeck (141,291 samples, 0.16%)</title><rect x="63.0405%" y="133" width="0.1643%" height="15" fill="rgb(236,23,11)"/><text x="63.2905%" y="143.50"></text></g><g><title>late_bound_vars_map (89,450 samples, 0.10%)</title><rect x="63.6724%" y="117" width="0.1040%" height="15" fill="rgb(205,117,38)"/><text x="63.9224%" y="127.50"></text></g><g><title>fn_sig (334,981 samples, 0.39%)</title><rect x="63.4775%" y="133" width="0.3896%" height="15" fill="rgb(237,72,25)"/><text x="63.7275%" y="143.50"></text></g><g><title>is_late_bound_map (241,833 samples, 0.28%)</title><rect x="63.9973%" y="117" width="0.2813%" height="15" fill="rgb(244,70,9)"/><text x="64.2473%" y="127.50"></text></g><g><title>resolve_lifetimes (233,783 samples, 0.27%)</title><rect x="64.0067%" y="101" width="0.2719%" height="15" fill="rgb(217,125,39)"/><text x="64.2567%" y="111.50"></text></g><g><title>lint_levels (111,081 samples, 0.13%)</title><rect x="64.1494%" y="85" width="0.1292%" height="15" fill="rgb(235,36,10)"/><text x="64.3994%" y="95.50"></text></g><g><title>named_region_map (145,562 samples, 0.17%)</title><rect x="64.2786%" y="117" width="0.1693%" height="15" fill="rgb(251,123,47)"/><text x="64.5286%" y="127.50"></text></g><g><title>resolve_lifetimes (130,442 samples, 0.15%)</title><rect x="64.2962%" y="101" width="0.1517%" height="15" fill="rgb(221,13,13)"/><text x="64.5462%" y="111.50"></text></g><g><title>generics_of (521,317 samples, 0.61%)</title><rect x="63.8671%" y="133" width="0.6063%" height="15" fill="rgb(238,131,9)"/><text x="64.1171%" y="143.50"></text></g><g><title>explicit_predicates_of (132,600 samples, 0.15%)</title><rect x="64.6545%" y="101" width="0.1542%" height="15" fill="rgb(211,50,8)"/><text x="64.9045%" y="111.50"></text></g><g><title>predicates_of (518,866 samples, 0.60%)</title><rect x="64.5295%" y="133" width="0.6035%" height="15" fill="rgb(245,182,24)"/><text x="64.7795%" y="143.50"></text></g><g><title>predicates_defined_on (479,135 samples, 0.56%)</title><rect x="64.5757%" y="117" width="0.5573%" height="15" fill="rgb(242,14,37)"/><text x="64.8257%" y="127.50"></text></g><g><title>inferred_outlives_of (278,763 samples, 0.32%)</title><rect x="64.8087%" y="101" width="0.3242%" height="15" fill="rgb(246,228,12)"/><text x="65.0587%" y="111.50"></text></g><g><title>inferred_outlives_crate (257,593 samples, 0.30%)</title><rect x="64.8334%" y="85" width="0.2996%" height="15" fill="rgb(213,55,15)"/><text x="65.0834%" y="95.50"></text></g><g><title>type_of (156,662 samples, 0.18%)</title><rect x="64.9508%" y="69" width="0.1822%" height="15" fill="rgb(209,9,3)"/><text x="65.2008%" y="79.50"></text></g><g><title>type_collecting (1,768,320 samples, 2.06%)</title><rect x="63.2065%" y="165" width="2.0566%" height="15" fill="rgb(230,59,30)"/><text x="63.4565%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,758,790 samples, 2.05%)</title><rect x="63.2176%" y="149" width="2.0455%" height="15" fill="rgb(209,121,21)"/><text x="63.4676%" y="159.50">c..</text></g><g><title>type_of (111,941 samples, 0.13%)</title><rect x="65.1330%" y="133" width="0.1302%" height="15" fill="rgb(220,109,13)"/><text x="65.3830%" y="143.50"></text></g><g><title>adt_def (274,203 samples, 0.32%)</title><rect x="67.6169%" y="101" width="0.3189%" height="15" fill="rgb(232,18,1)"/><text x="67.8669%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (269,583 samples, 0.31%)</title><rect x="67.6223%" y="85" width="0.3135%" height="15" fill="rgb(215,41,42)"/><text x="67.8723%" y="95.50"></text></g><g><title>item_attrs (232,003 samples, 0.27%)</title><rect x="67.6660%" y="69" width="0.2698%" height="15" fill="rgb(224,123,36)"/><text x="67.9160%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (228,063 samples, 0.27%)</title><rect x="67.6706%" y="53" width="0.2652%" height="15" fill="rgb(240,125,3)"/><text x="67.9206%" y="63.50"></text></g><g><title>adt_sized_constraint (87,851 samples, 0.10%)</title><rect x="67.9575%" y="85" width="0.1022%" height="15" fill="rgb(205,98,50)"/><text x="68.2075%" y="95.50"></text></g><g><title>adt_sized_constraint (116,342 samples, 0.14%)</title><rect x="67.9358%" y="101" width="0.1353%" height="15" fill="rgb(205,185,37)"/><text x="68.1858%" y="111.50"></text></g><g><title>adt_sized_constraint (408,965 samples, 0.48%)</title><rect x="67.5996%" y="117" width="0.4756%" height="15" fill="rgb(238,207,15)"/><text x="67.8496%" y="127.50"></text></g><g><title>evaluate_obligation (912,391 samples, 1.06%)</title><rect x="67.1618%" y="133" width="1.0612%" height="15" fill="rgb(213,199,42)"/><text x="67.4118%" y="143.50"></text></g><g><title>implied_outlives_bounds (253,592 samples, 0.29%)</title><rect x="68.2229%" y="133" width="0.2949%" height="15" fill="rgb(235,201,11)"/><text x="68.4729%" y="143.50"></text></g><g><title>param_env (236,995 samples, 0.28%)</title><rect x="68.5179%" y="133" width="0.2756%" height="15" fill="rgb(207,46,11)"/><text x="68.7679%" y="143.50"></text></g><g><title>region_scope_tree (260,271 samples, 0.30%)</title><rect x="68.8783%" y="133" width="0.3027%" height="15" fill="rgb(241,35,35)"/><text x="69.1283%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,259,817 samples, 3.79%)</title><rect x="65.4279%" y="149" width="3.7913%" height="15" fill="rgb(243,32,47)"/><text x="65.6779%" y="159.50">chec..</text></g><g><title>evaluate_obligation (199,612 samples, 0.23%)</title><rect x="69.9697%" y="133" width="0.2322%" height="15" fill="rgb(247,202,23)"/><text x="70.2197%" y="143.50"></text></g><g><title>param_env (119,690 samples, 0.14%)</title><rect x="70.2708%" y="133" width="0.1392%" height="15" fill="rgb(219,102,11)"/><text x="70.5208%" y="143.50"></text></g><g><title>analysis (60,124,329 samples, 69.93%)</title><rect x="0.7099%" y="197" width="69.9272%" height="15" fill="rgb(243,110,44)"/><text x="0.9599%" y="207.50">analysis</text></g><g><title>type_check_crate (46,079,293 samples, 53.59%)</title><rect x="17.0449%" y="181" width="53.5922%" height="15" fill="rgb(222,74,54)"/><text x="17.2949%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,618,442 samples, 5.37%)</title><rect x="65.2656%" y="165" width="5.3715%" height="15" fill="rgb(216,99,12)"/><text x="65.5156%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (1,219,083 samples, 1.42%)</title><rect x="69.2192%" y="149" width="1.4178%" height="15" fill="rgb(226,22,26)"/><text x="69.4692%" y="159.50"></text></g><g><title>codegen_crate (325,464 samples, 0.38%)</title><rect x="70.6488%" y="197" width="0.3785%" height="15" fill="rgb(217,163,10)"/><text x="70.8988%" y="207.50"></text></g><g><title>AST_validation (99,591 samples, 0.12%)</title><rect x="71.2482%" y="181" width="0.1158%" height="15" fill="rgb(213,25,53)"/><text x="71.4982%" y="191.50"></text></g><g><title>metadata_load_macro (205,273 samples, 0.24%)</title><rect x="83.5732%" y="149" width="0.2387%" height="15" fill="rgb(252,105,26)"/><text x="83.8232%" y="159.50"></text></g><g><title>macro_expand_crate (12,920,814 samples, 15.03%)</title><rect x="71.5041%" y="181" width="15.0275%" height="15" fill="rgb(220,39,43)"/><text x="71.7541%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (12,898,504 samples, 15.00%)</title><rect x="71.5301%" y="165" width="15.0015%" height="15" fill="rgb(229,68,48)"/><text x="71.7801%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,338,395 samples, 2.72%)</title><rect x="83.8120%" y="149" width="2.7197%" height="15" fill="rgb(252,8,32)"/><text x="84.0620%" y="159.50">me..</text></g><g><title>metadata_register_crate (849,950 samples, 0.99%)</title><rect x="85.5431%" y="133" width="0.9885%" height="15" fill="rgb(223,20,43)"/><text x="85.7931%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (186,942 samples, 0.22%)</title><rect x="86.5365%" y="181" width="0.2174%" height="15" fill="rgb(229,81,49)"/><text x="86.7865%" y="191.50"></text></g><g><title>finalize_macro_resolutions (177,042 samples, 0.21%)</title><rect x="86.8039%" y="165" width="0.2059%" height="15" fill="rgb(236,28,36)"/><text x="87.0539%" y="175.50"></text></g><g><title>late_resolve_crate (1,755,370 samples, 2.04%)</title><rect x="87.0098%" y="165" width="2.0416%" height="15" fill="rgb(249,185,26)"/><text x="87.2598%" y="175.50">l..</text></g><g><title>configure_and_expand (15,568,193 samples, 18.11%)</title><rect x="71.0273%" y="197" width="18.1065%" height="15" fill="rgb(249,174,33)"/><text x="71.2773%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,046,282 samples, 2.38%)</title><rect x="86.7539%" y="181" width="2.3799%" height="15" fill="rgb(233,201,37)"/><text x="87.0039%" y="191.50">re..</text></g><g><title>drop_ast (118,281 samples, 0.14%)</title><rect x="89.1338%" y="197" width="0.1376%" height="15" fill="rgb(221,78,26)"/><text x="89.3838%" y="207.50"></text></g><g><title>early_lint_checks (275,213 samples, 0.32%)</title><rect x="89.2891%" y="197" width="0.3201%" height="15" fill="rgb(250,127,30)"/><text x="89.5391%" y="207.50"></text></g><g><title>free_global_ctxt (3,003,593 samples, 3.49%)</title><rect x="89.6092%" y="197" width="3.4933%" height="15" fill="rgb(230,49,44)"/><text x="89.8592%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (540,886 samples, 0.63%)</title><rect x="93.1025%" y="197" width="0.6291%" height="15" fill="rgb(229,67,23)"/><text x="93.3525%" y="207.50"></text></g><g><title>hir_lowering (1,832,690 samples, 2.13%)</title><rect x="93.7316%" y="197" width="2.1315%" height="15" fill="rgb(249,83,47)"/><text x="93.9816%" y="207.50">h..</text></g><g><title>parse_crate (2,259,035 samples, 2.63%)</title><rect x="95.9214%" y="197" width="2.6274%" height="15" fill="rgb(215,43,3)"/><text x="96.1714%" y="207.50">pa..</text></g><g><title>prepare_outputs (263,893 samples, 0.31%)</title><rect x="98.5580%" y="197" width="0.3069%" height="15" fill="rgb(238,154,13)"/><text x="98.8080%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (552,536 samples, 0.64%)</title><rect x="98.8649%" y="197" width="0.6426%" height="15" fill="rgb(219,56,2)"/><text x="99.1149%" y="207.50"></text></g><g><title>setup_global_ctxt (125,141 samples, 0.15%)</title><rect x="99.5202%" y="197" width="0.1455%" height="15" fill="rgb(233,0,4)"/><text x="99.7702%" y="207.50"></text></g><g><title>all (85,981,286 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (85,981,286 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (287,383 samples, 0.33%)</title><rect x="99.6658%" y="197" width="0.3342%" height="15" fill="rgb(211,146,34)"/><text x="99.9158%" y="207.50"></text></g></svg></svg>