<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (137,200 samples, 0.17%)</title><rect x="7.7118%" y="197" width="0.1733%" height="15" fill="rgb(227,0,7)"/><text x="7.9618%" y="207.50"></text></g><g><title>param_env (225,723 samples, 0.29%)</title><rect x="8.9433%" y="165" width="0.2851%" height="15" fill="rgb(217,0,24)"/><text x="9.1933%" y="175.50"></text></g><g><title>item_attrs (207,162 samples, 0.26%)</title><rect x="9.5493%" y="133" width="0.2616%" height="15" fill="rgb(221,193,54)"/><text x="9.7993%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (198,822 samples, 0.25%)</title><rect x="9.5599%" y="117" width="0.2511%" height="15" fill="rgb(248,212,6)"/><text x="9.8099%" y="127.50"></text></g><g><title>codegen_fn_attrs (270,892 samples, 0.34%)</title><rect x="9.4795%" y="149" width="0.3421%" height="15" fill="rgb(208,68,35)"/><text x="9.7295%" y="159.50"></text></g><g><title>adt_drop_tys (125,412 samples, 0.16%)</title><rect x="11.1926%" y="101" width="0.1584%" height="15" fill="rgb(232,128,0)"/><text x="11.4426%" y="111.50"></text></g><g><title>adt_drop_tys (264,054 samples, 0.33%)</title><rect x="11.1610%" y="117" width="0.3335%" height="15" fill="rgb(207,160,47)"/><text x="11.4110%" y="127.50"></text></g><g><title>needs_drop_raw (592,596 samples, 0.75%)</title><rect x="11.0586%" y="133" width="0.7484%" height="15" fill="rgb(228,23,34)"/><text x="11.3086%" y="143.50"></text></g><g><title>is_copy_raw (244,832 samples, 0.31%)</title><rect x="11.4978%" y="117" width="0.3092%" height="15" fill="rgb(218,30,26)"/><text x="11.7478%" y="127.50"></text></g><g><title>evaluate_obligation (179,492 samples, 0.23%)</title><rect x="11.5803%" y="101" width="0.2267%" height="15" fill="rgb(220,122,19)"/><text x="11.8303%" y="111.50"></text></g><g><title>specialization_graph_of (134,132 samples, 0.17%)</title><rect x="11.8948%" y="117" width="0.1694%" height="15" fill="rgb(250,228,42)"/><text x="12.1448%" y="127.50"></text></g><g><title>resolve_instance (224,942 samples, 0.28%)</title><rect x="11.8070%" y="133" width="0.2841%" height="15" fill="rgb(240,193,28)"/><text x="12.0570%" y="143.50"></text></g><g><title>thir_body (303,481 samples, 0.38%)</title><rect x="12.1205%" y="133" width="0.3833%" height="15" fill="rgb(216,20,37)"/><text x="12.3705%" y="143.50"></text></g><g><title>mir_const (3,225,845 samples, 4.07%)</title><rect x="8.4573%" y="181" width="4.0739%" height="15" fill="rgb(206,188,39)"/><text x="8.7073%" y="191.50">mir_..</text></g><g><title>unsafety_check_result (2,615,277 samples, 3.30%)</title><rect x="9.2284%" y="165" width="3.3028%" height="15" fill="rgb(217,207,13)"/><text x="9.4784%" y="175.50">uns..</text></g><g><title>mir_built (2,145,523 samples, 2.71%)</title><rect x="9.8216%" y="149" width="2.7096%" height="15" fill="rgb(231,73,38)"/><text x="10.0716%" y="159.50">mi..</text></g><g><title>has_structural_eq_impls (190,063 samples, 0.24%)</title><rect x="12.7710%" y="165" width="0.2400%" height="15" fill="rgb(225,20,46)"/><text x="13.0210%" y="175.50"></text></g><g><title>evaluate_obligation (170,152 samples, 0.21%)</title><rect x="12.7962%" y="149" width="0.2149%" height="15" fill="rgb(210,31,41)"/><text x="13.0462%" y="159.50"></text></g><g><title>trait_impls_of (142,812 samples, 0.18%)</title><rect x="12.8307%" y="133" width="0.1804%" height="15" fill="rgb(221,200,47)"/><text x="13.0807%" y="143.50"></text></g><g><title>mir_const_qualif (585,686 samples, 0.74%)</title><rect x="12.5312%" y="181" width="0.7397%" height="15" fill="rgb(226,26,5)"/><text x="12.7812%" y="191.50"></text></g><g><title>mir_promoted (4,207,409 samples, 5.31%)</title><rect x="7.9576%" y="197" width="5.3136%" height="15" fill="rgb(249,33,26)"/><text x="8.2076%" y="207.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (180,303 samples, 0.23%)</title><rect x="13.2712%" y="197" width="0.2277%" height="15" fill="rgb(235,183,28)"/><text x="13.5212%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (480,647 samples, 0.61%)</title><rect x="13.4989%" y="197" width="0.6070%" height="15" fill="rgb(221,5,38)"/><text x="13.7489%" y="207.50"></text></g><g><title>normalize_projection_ty (266,425 samples, 0.34%)</title><rect x="13.7694%" y="181" width="0.3365%" height="15" fill="rgb(247,18,42)"/><text x="14.0194%" y="191.50"></text></g><g><title>type_op_normalize_predicate (232,543 samples, 0.29%)</title><rect x="14.1059%" y="197" width="0.2937%" height="15" fill="rgb(241,131,45)"/><text x="14.3559%" y="207.50"></text></g><g><title>normalize_projection_ty (155,283 samples, 0.20%)</title><rect x="14.2035%" y="181" width="0.1961%" height="15" fill="rgb(249,31,29)"/><text x="14.4535%" y="191.50"></text></g><g><title>type_op_prove_predicate (2,102,090 samples, 2.65%)</title><rect x="14.4183%" y="197" width="2.6547%" height="15" fill="rgb(225,111,53)"/><text x="14.6683%" y="207.50">ty..</text></g><g><title>MIR_borrow_checking (12,527,380 samples, 15.82%)</title><rect x="1.2540%" y="229" width="15.8209%" height="15" fill="rgb(238,160,17)"/><text x="1.5040%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,478,520 samples, 15.76%)</title><rect x="1.3157%" y="213" width="15.7592%" height="15" fill="rgb(214,148,48)"/><text x="1.5657%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (284,433 samples, 0.36%)</title><rect x="17.0749%" y="229" width="0.3592%" height="15" fill="rgb(232,36,49)"/><text x="17.3249%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (119,211 samples, 0.15%)</title><rect x="17.2835%" y="213" width="0.1506%" height="15" fill="rgb(209,103,24)"/><text x="17.5335%" y="223.50"></text></g><g><title>hir_module_items (144,252 samples, 0.18%)</title><rect x="17.4341%" y="229" width="0.1822%" height="15" fill="rgb(229,88,8)"/><text x="17.6841%" y="239.50"></text></g><g><title>get_lang_items (89,791 samples, 0.11%)</title><rect x="17.9677%" y="181" width="0.1134%" height="15" fill="rgb(213,181,19)"/><text x="18.2177%" y="191.50"></text></g><g><title>should_inherit_track_caller (130,562 samples, 0.16%)</title><rect x="18.0811%" y="181" width="0.1649%" height="15" fill="rgb(254,191,54)"/><text x="18.3311%" y="191.50"></text></g><g><title>codegen_fn_attrs (339,534 samples, 0.43%)</title><rect x="17.8618%" y="197" width="0.4288%" height="15" fill="rgb(241,83,37)"/><text x="18.1118%" y="207.50"></text></g><g><title>check_mod_attrs (504,476 samples, 0.64%)</title><rect x="17.6537%" y="213" width="0.6371%" height="15" fill="rgb(233,36,39)"/><text x="17.9037%" y="223.50"></text></g><g><title>check_mod_const_bodies (87,341 samples, 0.11%)</title><rect x="18.2908%" y="213" width="0.1103%" height="15" fill="rgb(226,3,54)"/><text x="18.5408%" y="223.50"></text></g><g><title>lookup_deprecation_entry (112,481 samples, 0.14%)</title><rect x="18.6332%" y="197" width="0.1421%" height="15" fill="rgb(245,192,40)"/><text x="18.8832%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (339,264 samples, 0.43%)</title><rect x="18.4690%" y="213" width="0.4285%" height="15" fill="rgb(238,167,29)"/><text x="18.7190%" y="223.50"></text></g><g><title>misc_checking_1 (1,066,232 samples, 1.35%)</title><rect x="17.6167%" y="229" width="1.3465%" height="15" fill="rgb(232,182,51)"/><text x="17.8667%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (213,182 samples, 0.27%)</title><rect x="18.9653%" y="213" width="0.2692%" height="15" fill="rgb(231,60,39)"/><text x="19.2153%" y="223.50"></text></g><g><title>check_mod_liveness (183,972 samples, 0.23%)</title><rect x="19.0022%" y="197" width="0.2323%" height="15" fill="rgb(208,69,12)"/><text x="19.2522%" y="207.50"></text></g><g><title>misc_checking_2 (485,055 samples, 0.61%)</title><rect x="18.9633%" y="229" width="0.6126%" height="15" fill="rgb(235,93,37)"/><text x="19.2133%" y="239.50"></text></g><g><title>match_checking (270,243 samples, 0.34%)</title><rect x="19.2346%" y="213" width="0.3413%" height="15" fill="rgb(213,116,39)"/><text x="19.4846%" y="223.50"></text></g><g><title>check_match (255,643 samples, 0.32%)</title><rect x="19.2530%" y="197" width="0.3229%" height="15" fill="rgb(222,207,29)"/><text x="19.5030%" y="207.50"></text></g><g><title>param_env (91,531 samples, 0.12%)</title><rect x="19.4603%" y="181" width="0.1156%" height="15" fill="rgb(206,96,30)"/><text x="19.7103%" y="191.50"></text></g><g><title>death_checking (83,240 samples, 0.11%)</title><rect x="19.6558%" y="213" width="0.1051%" height="15" fill="rgb(218,138,4)"/><text x="19.9058%" y="223.50"></text></g><g><title>fn_abi_of_instance (116,002 samples, 0.15%)</title><rect x="20.4574%" y="149" width="0.1465%" height="15" fill="rgb(250,191,14)"/><text x="20.7074%" y="159.50"></text></g><g><title>eval_to_allocation_raw (276,983 samples, 0.35%)</title><rect x="20.3559%" y="181" width="0.3498%" height="15" fill="rgb(239,60,40)"/><text x="20.6059%" y="191.50"></text></g><g><title>eval_to_allocation_raw (276,113 samples, 0.35%)</title><rect x="20.3570%" y="165" width="0.3487%" height="15" fill="rgb(206,27,48)"/><text x="20.6070%" y="175.50"></text></g><g><title>eval_to_const_value_raw (228,073 samples, 0.29%)</title><rect x="20.7057%" y="181" width="0.2880%" height="15" fill="rgb(225,35,8)"/><text x="20.9557%" y="191.50"></text></g><g><title>eval_to_const_value_raw (225,533 samples, 0.28%)</title><rect x="20.7089%" y="165" width="0.2848%" height="15" fill="rgb(250,213,24)"/><text x="20.9589%" y="175.50"></text></g><g><title>eval_to_allocation_raw (221,052 samples, 0.28%)</title><rect x="20.7145%" y="149" width="0.2792%" height="15" fill="rgb(247,123,22)"/><text x="20.9645%" y="159.50"></text></g><g><title>impl_parent (688,454 samples, 0.87%)</title><rect x="22.5013%" y="149" width="0.8695%" height="15" fill="rgb(231,138,38)"/><text x="22.7513%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (461,353 samples, 0.58%)</title><rect x="22.7881%" y="133" width="0.5826%" height="15" fill="rgb(231,145,46)"/><text x="23.0381%" y="143.50"></text></g><g><title>specialization_graph_of (4,127,606 samples, 5.21%)</title><rect x="21.1211%" y="165" width="5.2128%" height="15" fill="rgb(251,118,11)"/><text x="21.3711%" y="175.50">specia..</text></g><g><title>impl_trait_ref (2,346,273 samples, 2.96%)</title><rect x="23.3707%" y="149" width="2.9631%" height="15" fill="rgb(217,147,25)"/><text x="23.6207%" y="159.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,130,613 samples, 2.69%)</title><rect x="23.6431%" y="133" width="2.6908%" height="15" fill="rgb(247,81,37)"/><text x="23.8931%" y="143.50">me..</text></g><g><title>resolve_instance (4,177,576 samples, 5.28%)</title><rect x="21.0616%" y="181" width="5.2759%" height="15" fill="rgb(209,12,38)"/><text x="21.3116%" y="191.50">resolv..</text></g><g><title>trait_impls_of (219,542 samples, 0.28%)</title><rect x="26.3375%" y="181" width="0.2773%" height="15" fill="rgb(227,1,9)"/><text x="26.5875%" y="191.50"></text></g><g><title>crate_lints (6,799,465 samples, 8.59%)</title><rect x="19.7645%" y="197" width="8.5871%" height="15" fill="rgb(248,47,43)"/><text x="20.0145%" y="207.50">crate_lints</text></g><g><title>type_of (1,365,668 samples, 1.72%)</title><rect x="26.6269%" y="181" width="1.7247%" height="15" fill="rgb(221,10,30)"/><text x="26.8769%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,130,214 samples, 1.43%)</title><rect x="26.9242%" y="165" width="1.4274%" height="15" fill="rgb(210,229,1)"/><text x="27.1742%" y="175.50"></text></g><g><title>lint_checking (6,929,426 samples, 8.75%)</title><rect x="19.7610%" y="213" width="8.7512%" height="15" fill="rgb(222,148,37)"/><text x="20.0110%" y="223.50">lint_checking</text></g><g><title>module_lints (127,151 samples, 0.16%)</title><rect x="28.3516%" y="197" width="0.1606%" height="15" fill="rgb(234,67,33)"/><text x="28.6016%" y="207.50"></text></g><g><title>lint_mod (123,121 samples, 0.16%)</title><rect x="28.3567%" y="181" width="0.1555%" height="15" fill="rgb(247,98,35)"/><text x="28.6067%" y="191.50"></text></g><g><title>privacy_checking_modules (338,174 samples, 0.43%)</title><rect x="28.6010%" y="213" width="0.4271%" height="15" fill="rgb(247,138,52)"/><text x="28.8510%" y="223.50"></text></g><g><title>check_mod_privacy (336,744 samples, 0.43%)</title><rect x="28.6028%" y="197" width="0.4253%" height="15" fill="rgb(213,79,30)"/><text x="28.8528%" y="207.50"></text></g><g><title>misc_checking_3 (7,493,703 samples, 9.46%)</title><rect x="19.5759%" y="229" width="9.4638%" height="15" fill="rgb(246,177,23)"/><text x="19.8259%" y="239.50">misc_checking_3</text></g><g><title>impl_parent (157,883 samples, 0.20%)</title><rect x="29.4860%" y="165" width="0.1994%" height="15" fill="rgb(230,62,27)"/><text x="29.7360%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (110,401 samples, 0.14%)</title><rect x="29.5460%" y="149" width="0.1394%" height="15" fill="rgb(216,154,8)"/><text x="29.7960%" y="159.50"></text></g><g><title>impl_trait_ref (684,716 samples, 0.86%)</title><rect x="29.6854%" y="165" width="0.8647%" height="15" fill="rgb(244,35,45)"/><text x="29.9354%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (630,075 samples, 0.80%)</title><rect x="29.7544%" y="149" width="0.7957%" height="15" fill="rgb(251,115,12)"/><text x="30.0044%" y="159.50"></text></g><g><title>coherent_trait (1,235,064 samples, 1.56%)</title><rect x="29.1140%" y="197" width="1.5598%" height="15" fill="rgb(240,54,50)"/><text x="29.3640%" y="207.50"></text></g><g><title>specialization_graph_of (1,226,144 samples, 1.55%)</title><rect x="29.1253%" y="181" width="1.5485%" height="15" fill="rgb(233,84,52)"/><text x="29.3753%" y="191.50"></text></g><g><title>trait_impls_of (97,911 samples, 0.12%)</title><rect x="30.5501%" y="165" width="0.1237%" height="15" fill="rgb(207,117,47)"/><text x="30.8001%" y="175.50"></text></g><g><title>coherence_checking (1,306,565 samples, 1.65%)</title><rect x="29.0934%" y="213" width="1.6501%" height="15" fill="rgb(249,43,39)"/><text x="29.3434%" y="223.50"></text></g><g><title>evaluate_obligation (217,373 samples, 0.27%)</title><rect x="32.7008%" y="165" width="0.2745%" height="15" fill="rgb(209,38,44)"/><text x="32.9508%" y="175.50"></text></g><g><title>adt_def (81,040 samples, 0.10%)</title><rect x="46.0705%" y="133" width="0.1023%" height="15" fill="rgb(236,212,23)"/><text x="46.3205%" y="143.50"></text></g><g><title>adt_sized_constraint (115,801 samples, 0.15%)</title><rect x="46.0561%" y="149" width="0.1462%" height="15" fill="rgb(242,79,21)"/><text x="46.3061%" y="159.50"></text></g><g><title>associated_item (621,997 samples, 0.79%)</title><rect x="46.5418%" y="133" width="0.7855%" height="15" fill="rgb(211,96,35)"/><text x="46.7918%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (475,626 samples, 0.60%)</title><rect x="46.7266%" y="117" width="0.6007%" height="15" fill="rgb(253,215,40)"/><text x="46.9766%" y="127.50"></text></g><g><title>associated_items (932,271 samples, 1.18%)</title><rect x="46.2023%" y="149" width="1.1774%" height="15" fill="rgb(211,81,21)"/><text x="46.4523%" y="159.50"></text></g><g><title>adt_dtorck_constraint (137,362 samples, 0.17%)</title><rect x="47.8403%" y="117" width="0.1735%" height="15" fill="rgb(208,190,38)"/><text x="48.0903%" y="127.50"></text></g><g><title>adt_dtorck_constraint (288,254 samples, 0.36%)</title><rect x="47.6865%" y="133" width="0.3640%" height="15" fill="rgb(235,213,38)"/><text x="47.9365%" y="143.50"></text></g><g><title>dropck_outlives (502,756 samples, 0.63%)</title><rect x="47.4399%" y="149" width="0.6349%" height="15" fill="rgb(237,122,38)"/><text x="47.6899%" y="159.50"></text></g><g><title>predicates_of (110,770 samples, 0.14%)</title><rect x="50.2542%" y="133" width="0.1399%" height="15" fill="rgb(244,218,35)"/><text x="50.5042%" y="143.50"></text></g><g><title>evaluate_obligation (2,439,467 samples, 3.08%)</title><rect x="48.0748%" y="149" width="3.0808%" height="15" fill="rgb(240,68,47)"/><text x="48.3248%" y="159.50">eva..</text></g><g><title>trait_impls_of (596,298 samples, 0.75%)</title><rect x="50.4026%" y="133" width="0.7531%" height="15" fill="rgb(210,16,53)"/><text x="50.6526%" y="143.50"></text></g><g><title>implementations_of_trait (188,602 samples, 0.24%)</title><rect x="50.9174%" y="117" width="0.2382%" height="15" fill="rgb(235,124,12)"/><text x="51.1674%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (111,760 samples, 0.14%)</title><rect x="51.0145%" y="101" width="0.1411%" height="15" fill="rgb(224,169,11)"/><text x="51.2645%" y="111.50"></text></g><g><title>fn_sig (137,731 samples, 0.17%)</title><rect x="51.1777%" y="149" width="0.1739%" height="15" fill="rgb(250,166,2)"/><text x="51.4277%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (123,011 samples, 0.16%)</title><rect x="51.1963%" y="133" width="0.1554%" height="15" fill="rgb(242,216,29)"/><text x="51.4463%" y="143.50"></text></g><g><title>generics_of (84,571 samples, 0.11%)</title><rect x="51.3516%" y="149" width="0.1068%" height="15" fill="rgb(230,116,27)"/><text x="51.6016%" y="159.50"></text></g><g><title>implied_outlives_bounds (115,263 samples, 0.15%)</title><rect x="51.6206%" y="149" width="0.1456%" height="15" fill="rgb(228,99,48)"/><text x="51.8706%" y="159.50"></text></g><g><title>explicit_predicates_of (127,141 samples, 0.16%)</title><rect x="52.4994%" y="85" width="0.1606%" height="15" fill="rgb(253,11,6)"/><text x="52.7494%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (124,921 samples, 0.16%)</title><rect x="52.5022%" y="69" width="0.1578%" height="15" fill="rgb(247,143,39)"/><text x="52.7522%" y="79.50"></text></g><g><title>predicates_of (148,411 samples, 0.19%)</title><rect x="52.4769%" y="117" width="0.1874%" height="15" fill="rgb(236,97,10)"/><text x="52.7269%" y="127.50"></text></g><g><title>predicates_defined_on (137,651 samples, 0.17%)</title><rect x="52.4905%" y="101" width="0.1738%" height="15" fill="rgb(233,208,19)"/><text x="52.7405%" y="111.50"></text></g><g><title>is_copy_raw (979,449 samples, 1.24%)</title><rect x="51.8094%" y="149" width="1.2369%" height="15" fill="rgb(216,164,2)"/><text x="52.0594%" y="159.50"></text></g><g><title>evaluate_obligation (864,949 samples, 1.09%)</title><rect x="51.9540%" y="133" width="1.0923%" height="15" fill="rgb(220,129,5)"/><text x="52.2040%" y="143.50"></text></g><g><title>trait_impls_of (299,514 samples, 0.38%)</title><rect x="52.6681%" y="117" width="0.3783%" height="15" fill="rgb(242,17,10)"/><text x="52.9181%" y="127.50"></text></g><g><title>lint_levels (103,871 samples, 0.13%)</title><rect x="53.0845%" y="149" width="0.1312%" height="15" fill="rgb(242,107,0)"/><text x="53.3345%" y="159.50"></text></g><g><title>evaluate_obligation (569,234 samples, 0.72%)</title><rect x="53.8030%" y="133" width="0.7189%" height="15" fill="rgb(251,28,31)"/><text x="54.0530%" y="143.50"></text></g><g><title>method_autoderef_steps (1,041,190 samples, 1.31%)</title><rect x="53.2746%" y="149" width="1.3149%" height="15" fill="rgb(233,223,10)"/><text x="53.5246%" y="159.50"></text></g><g><title>explicit_predicates_of (197,073 samples, 0.25%)</title><rect x="54.8351%" y="117" width="0.2489%" height="15" fill="rgb(215,21,27)"/><text x="55.0851%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (166,603 samples, 0.21%)</title><rect x="54.8736%" y="101" width="0.2104%" height="15" fill="rgb(232,23,21)"/><text x="55.1236%" y="111.50"></text></g><g><title>predicates_of (399,895 samples, 0.51%)</title><rect x="54.6241%" y="149" width="0.5050%" height="15" fill="rgb(244,5,23)"/><text x="54.8741%" y="159.50"></text></g><g><title>predicates_defined_on (304,865 samples, 0.39%)</title><rect x="54.7441%" y="133" width="0.3850%" height="15" fill="rgb(226,81,46)"/><text x="54.9941%" y="143.50"></text></g><g><title>typeck (17,482,133 samples, 22.08%)</title><rect x="33.2288%" y="165" width="22.0782%" height="15" fill="rgb(247,70,30)"/><text x="33.4788%" y="175.50">typeck</text></g><g><title>item_bodies_checking (19,428,636 samples, 24.54%)</title><rect x="30.7770%" y="213" width="24.5365%" height="15" fill="rgb(212,68,19)"/><text x="31.0270%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,425,616 samples, 24.53%)</title><rect x="30.7809%" y="197" width="24.5327%" height="15" fill="rgb(240,187,13)"/><text x="31.0309%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (19,395,604 samples, 24.49%)</title><rect x="30.8188%" y="181" width="24.4948%" height="15" fill="rgb(223,113,26)"/><text x="31.0688%" y="191.50">typeck</text></g><g><title>layout_of (115,221 samples, 0.15%)</title><rect x="56.0155%" y="37" width="0.1455%" height="15" fill="rgb(206,192,2)"/><text x="56.2655%" y="47.50"></text></g><g><title>layout_of (181,332 samples, 0.23%)</title><rect x="55.9902%" y="53" width="0.2290%" height="15" fill="rgb(241,108,4)"/><text x="56.2402%" y="63.50"></text></g><g><title>layout_of (227,592 samples, 0.29%)</title><rect x="55.9633%" y="69" width="0.2874%" height="15" fill="rgb(247,173,49)"/><text x="56.2133%" y="79.50"></text></g><g><title>layout_of (319,572 samples, 0.40%)</title><rect x="55.8929%" y="85" width="0.4036%" height="15" fill="rgb(224,114,35)"/><text x="56.1429%" y="95.50"></text></g><g><title>layout_of (357,384 samples, 0.45%)</title><rect x="55.8528%" y="101" width="0.4513%" height="15" fill="rgb(245,159,27)"/><text x="56.1028%" y="111.50"></text></g><g><title>layout_of (431,104 samples, 0.54%)</title><rect x="55.7673%" y="149" width="0.5444%" height="15" fill="rgb(245,172,44)"/><text x="56.0173%" y="159.50"></text></g><g><title>layout_of (416,804 samples, 0.53%)</title><rect x="55.7854%" y="133" width="0.5264%" height="15" fill="rgb(236,23,11)"/><text x="56.0354%" y="143.50"></text></g><g><title>layout_of (391,334 samples, 0.49%)</title><rect x="55.8176%" y="117" width="0.4942%" height="15" fill="rgb(205,117,38)"/><text x="56.0676%" y="127.50"></text></g><g><title>layout_of (523,795 samples, 0.66%)</title><rect x="55.7103%" y="165" width="0.6615%" height="15" fill="rgb(237,72,25)"/><text x="55.9603%" y="175.50"></text></g><g><title>layout_of (588,326 samples, 0.74%)</title><rect x="55.6430%" y="181" width="0.7430%" height="15" fill="rgb(244,70,9)"/><text x="55.8930%" y="191.50"></text></g><g><title>adt_dtorck_constraint (139,201 samples, 0.18%)</title><rect x="57.7984%" y="101" width="0.1758%" height="15" fill="rgb(217,125,39)"/><text x="58.0484%" y="111.50"></text></g><g><title>adt_dtorck_constraint (249,013 samples, 0.31%)</title><rect x="57.7013%" y="117" width="0.3145%" height="15" fill="rgb(235,36,10)"/><text x="57.9513%" y="127.50"></text></g><g><title>adt_dtorck_constraint (320,123 samples, 0.40%)</title><rect x="57.6442%" y="133" width="0.4043%" height="15" fill="rgb(251,123,47)"/><text x="57.8942%" y="143.50"></text></g><g><title>dropck_outlives (455,135 samples, 0.57%)</title><rect x="57.5034%" y="165" width="0.5748%" height="15" fill="rgb(221,13,13)"/><text x="57.7534%" y="175.50"></text></g><g><title>adt_dtorck_constraint (398,914 samples, 0.50%)</title><rect x="57.5744%" y="149" width="0.5038%" height="15" fill="rgb(238,131,9)"/><text x="57.8244%" y="159.50"></text></g><g><title>item_types_checking (2,440,647 samples, 3.08%)</title><rect x="55.3135%" y="213" width="3.0823%" height="15" fill="rgb(211,50,8)"/><text x="55.5635%" y="223.50">ite..</text></g><g><title>check_mod_item_types (2,436,307 samples, 3.08%)</title><rect x="55.3190%" y="197" width="3.0768%" height="15" fill="rgb(245,182,24)"/><text x="55.5690%" y="207.50">che..</text></g><g><title>typeck (1,586,097 samples, 2.00%)</title><rect x="56.3927%" y="181" width="2.0031%" height="15" fill="rgb(242,14,37)"/><text x="56.6427%" y="191.50">t..</text></g><g><title>fn_sig (249,031 samples, 0.31%)</title><rect x="58.6527%" y="181" width="0.3145%" height="15" fill="rgb(246,228,12)"/><text x="58.9027%" y="191.50"></text></g><g><title>named_region_map (142,351 samples, 0.18%)</title><rect x="59.1258%" y="165" width="0.1798%" height="15" fill="rgb(213,55,15)"/><text x="59.3758%" y="175.50"></text></g><g><title>resolve_lifetimes (132,641 samples, 0.17%)</title><rect x="59.1381%" y="149" width="0.1675%" height="15" fill="rgb(209,9,3)"/><text x="59.3881%" y="159.50"></text></g><g><title>generics_of (279,533 samples, 0.35%)</title><rect x="58.9672%" y="181" width="0.3530%" height="15" fill="rgb(230,59,30)"/><text x="59.2172%" y="191.50"></text></g><g><title>late_bound_vars_map (167,132 samples, 0.21%)</title><rect x="59.9714%" y="133" width="0.2111%" height="15" fill="rgb(209,121,21)"/><text x="60.2214%" y="143.50"></text></g><g><title>resolve_lifetimes (158,262 samples, 0.20%)</title><rect x="59.9826%" y="117" width="0.1999%" height="15" fill="rgb(220,109,13)"/><text x="60.2326%" y="127.50"></text></g><g><title>explicit_predicates_of (658,426 samples, 0.83%)</title><rect x="59.4156%" y="149" width="0.8315%" height="15" fill="rgb(232,18,1)"/><text x="59.6656%" y="159.50"></text></g><g><title>predicates_of (859,658 samples, 1.09%)</title><rect x="59.3342%" y="181" width="1.0857%" height="15" fill="rgb(215,41,42)"/><text x="59.5842%" y="191.50"></text></g><g><title>predicates_defined_on (836,118 samples, 1.06%)</title><rect x="59.3640%" y="165" width="1.0559%" height="15" fill="rgb(224,123,36)"/><text x="59.6140%" y="175.50"></text></g><g><title>inferred_outlives_of (136,822 samples, 0.17%)</title><rect x="60.2471%" y="149" width="0.1728%" height="15" fill="rgb(240,125,3)"/><text x="60.4971%" y="159.50"></text></g><g><title>inferred_outlives_crate (121,991 samples, 0.15%)</title><rect x="60.2658%" y="133" width="0.1541%" height="15" fill="rgb(205,98,50)"/><text x="60.5158%" y="143.50"></text></g><g><title>type_collecting (1,821,921 samples, 2.30%)</title><rect x="58.3970%" y="213" width="2.3009%" height="15" fill="rgb(205,185,37)"/><text x="58.6470%" y="223.50">t..</text></g><g><title>collect_mod_item_types (1,810,461 samples, 2.29%)</title><rect x="58.4114%" y="197" width="2.2864%" height="15" fill="rgb(238,207,15)"/><text x="58.6614%" y="207.50">c..</text></g><g><title>type_of (220,113 samples, 0.28%)</title><rect x="60.4199%" y="181" width="0.2780%" height="15" fill="rgb(213,199,42)"/><text x="60.6699%" y="191.50"></text></g><g><title>type_of (93,433 samples, 0.12%)</title><rect x="60.5799%" y="165" width="0.1180%" height="15" fill="rgb(235,201,11)"/><text x="60.8299%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (89,052 samples, 0.11%)</title><rect x="60.5854%" y="149" width="0.1125%" height="15" fill="rgb(207,46,11)"/><text x="60.8354%" y="159.50"></text></g><g><title>evaluate_obligation (163,442 samples, 0.21%)</title><rect x="61.0476%" y="181" width="0.2064%" height="15" fill="rgb(241,35,35)"/><text x="61.2976%" y="191.50"></text></g><g><title>check_impl_item_well_formed (428,835 samples, 0.54%)</title><rect x="60.8248%" y="197" width="0.5416%" height="15" fill="rgb(243,32,47)"/><text x="61.0748%" y="207.50"></text></g><g><title>adt_def (421,425 samples, 0.53%)</title><rect x="63.9277%" y="149" width="0.5322%" height="15" fill="rgb(247,202,23)"/><text x="64.1777%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (414,185 samples, 0.52%)</title><rect x="63.9369%" y="133" width="0.5231%" height="15" fill="rgb(219,102,11)"/><text x="64.1869%" y="143.50"></text></g><g><title>item_attrs (346,975 samples, 0.44%)</title><rect x="64.0218%" y="117" width="0.4382%" height="15" fill="rgb(243,110,44)"/><text x="64.2718%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (339,105 samples, 0.43%)</title><rect x="64.0317%" y="101" width="0.4283%" height="15" fill="rgb(222,74,54)"/><text x="64.2817%" y="111.50"></text></g><g><title>adt_def (504,037 samples, 0.64%)</title><rect x="64.4811%" y="133" width="0.6366%" height="15" fill="rgb(216,99,12)"/><text x="64.7311%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (501,317 samples, 0.63%)</title><rect x="64.4845%" y="117" width="0.6331%" height="15" fill="rgb(226,22,26)"/><text x="64.7345%" y="127.50"></text></g><g><title>item_attrs (273,885 samples, 0.35%)</title><rect x="64.7717%" y="101" width="0.3459%" height="15" fill="rgb(217,163,10)"/><text x="65.0217%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (270,444 samples, 0.34%)</title><rect x="64.7761%" y="85" width="0.3415%" height="15" fill="rgb(213,25,53)"/><text x="65.0261%" y="95.50"></text></g><g><title>adt_sized_constraint (86,241 samples, 0.11%)</title><rect x="65.1176%" y="133" width="0.1089%" height="15" fill="rgb(252,105,26)"/><text x="65.3676%" y="143.50"></text></g><g><title>adt_sized_constraint (632,368 samples, 0.80%)</title><rect x="64.4600%" y="149" width="0.7986%" height="15" fill="rgb(220,39,43)"/><text x="64.7100%" y="159.50"></text></g><g><title>adt_sized_constraint (1,143,134 samples, 1.44%)</title><rect x="63.8798%" y="165" width="1.4437%" height="15" fill="rgb(229,68,48)"/><text x="64.1298%" y="175.50"></text></g><g><title>evaluate_obligation (1,462,667 samples, 1.85%)</title><rect x="63.5290%" y="181" width="1.8472%" height="15" fill="rgb(252,8,32)"/><text x="63.7790%" y="191.50">e..</text></g><g><title>implied_outlives_bounds (226,412 samples, 0.29%)</title><rect x="65.4492%" y="181" width="0.2859%" height="15" fill="rgb(223,20,43)"/><text x="65.6992%" y="191.50"></text></g><g><title>param_env (402,225 samples, 0.51%)</title><rect x="65.7406%" y="181" width="0.5080%" height="15" fill="rgb(229,81,49)"/><text x="65.9906%" y="191.50"></text></g><g><title>explicit_predicates_of (88,580 samples, 0.11%)</title><rect x="66.3609%" y="149" width="0.1119%" height="15" fill="rgb(236,28,36)"/><text x="66.6109%" y="159.50"></text></g><g><title>predicates_of (218,983 samples, 0.28%)</title><rect x="66.2485%" y="181" width="0.2766%" height="15" fill="rgb(249,185,26)"/><text x="66.4985%" y="191.50"></text></g><g><title>predicates_defined_on (164,732 samples, 0.21%)</title><rect x="66.3171%" y="165" width="0.2080%" height="15" fill="rgb(249,174,33)"/><text x="66.5671%" y="175.50"></text></g><g><title>region_scope_tree (154,531 samples, 0.20%)</title><rect x="66.5251%" y="181" width="0.1952%" height="15" fill="rgb(233,201,37)"/><text x="66.7751%" y="191.50"></text></g><g><title>trait_impls_of (872,700 samples, 1.10%)</title><rect x="66.7298%" y="181" width="1.1021%" height="15" fill="rgb(221,78,26)"/><text x="66.9798%" y="191.50"></text></g><g><title>implementations_of_trait (278,672 samples, 0.35%)</title><rect x="67.4800%" y="165" width="0.3519%" height="15" fill="rgb(250,127,30)"/><text x="67.7300%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (206,501 samples, 0.26%)</title><rect x="67.5711%" y="149" width="0.2608%" height="15" fill="rgb(230,49,44)"/><text x="67.8211%" y="159.50"></text></g><g><title>analysis (53,020,959 samples, 66.96%)</title><rect x="0.9367%" y="245" width="66.9604%" height="15" fill="rgb(229,67,23)"/><text x="1.1867%" y="255.50">analysis</text></g><g><title>type_check_crate (30,768,302 samples, 38.86%)</title><rect x="29.0397%" y="229" width="38.8574%" height="15" fill="rgb(249,83,47)"/><text x="29.2897%" y="239.50">type_check_crate</text></g><g><title>wf_checking (5,698,433 samples, 7.20%)</title><rect x="60.7005%" y="213" width="7.1966%" height="15" fill="rgb(215,43,3)"/><text x="60.9505%" y="223.50">wf_checking</text></g><g><title>check_item_well_formed (5,171,147 samples, 6.53%)</title><rect x="61.3664%" y="197" width="6.5307%" height="15" fill="rgb(238,154,13)"/><text x="61.6164%" y="207.50">check_ite..</text></g><g><title>codegen_crate (543,506 samples, 0.69%)</title><rect x="67.9114%" y="245" width="0.6864%" height="15" fill="rgb(219,56,2)"/><text x="68.1614%" y="255.50"></text></g><g><title>AST_validation (132,432 samples, 0.17%)</title><rect x="68.8891%" y="229" width="0.1672%" height="15" fill="rgb(233,0,4)"/><text x="69.1391%" y="239.50"></text></g><g><title>crate_injection (79,281 samples, 0.10%)</title><rect x="69.1246%" y="229" width="0.1001%" height="15" fill="rgb(235,30,7)"/><text x="69.3746%" y="239.50"></text></g><g><title>metadata_load_macro (325,363 samples, 0.41%)</title><rect x="82.9970%" y="197" width="0.4109%" height="15" fill="rgb(250,79,13)"/><text x="83.2470%" y="207.50"></text></g><g><title>macro_expand_crate (13,894,394 samples, 17.55%)</title><rect x="69.2248%" y="229" width="17.5473%" height="15" fill="rgb(211,146,34)"/><text x="69.4748%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (13,867,984 samples, 17.51%)</title><rect x="69.2581%" y="213" width="17.5139%" height="15" fill="rgb(228,22,38)"/><text x="69.5081%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,663,840 samples, 3.36%)</title><rect x="83.4079%" y="197" width="3.3642%" height="15" fill="rgb(235,168,5)"/><text x="83.6579%" y="207.50">met..</text></g><g><title>metadata_register_crate (961,468 samples, 1.21%)</title><rect x="85.5578%" y="181" width="1.2142%" height="15" fill="rgb(221,155,16)"/><text x="85.8078%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (162,162 samples, 0.20%)</title><rect x="86.7875%" y="229" width="0.2048%" height="15" fill="rgb(215,215,53)"/><text x="87.0375%" y="239.50"></text></g><g><title>finalize_macro_resolutions (278,073 samples, 0.35%)</title><rect x="87.0553%" y="213" width="0.3512%" height="15" fill="rgb(223,4,10)"/><text x="87.3053%" y="223.50"></text></g><g><title>late_resolve_crate (1,418,405 samples, 1.79%)</title><rect x="87.4065%" y="213" width="1.7913%" height="15" fill="rgb(234,103,6)"/><text x="87.6565%" y="223.50">l..</text></g><g><title>configure_and_expand (16,393,002 samples, 20.70%)</title><rect x="68.5978%" y="245" width="20.7028%" height="15" fill="rgb(227,97,0)"/><text x="68.8478%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,827,770 samples, 2.31%)</title><rect x="86.9923%" y="229" width="2.3083%" height="15" fill="rgb(234,150,53)"/><text x="87.2423%" y="239.50">r..</text></g><g><title>drop_ast (136,582 samples, 0.17%)</title><rect x="89.3006%" y="245" width="0.1725%" height="15" fill="rgb(228,201,54)"/><text x="89.5506%" y="255.50"></text></g><g><title>early_lint_checks (229,352 samples, 0.29%)</title><rect x="89.4908%" y="245" width="0.2896%" height="15" fill="rgb(222,22,37)"/><text x="89.7408%" y="255.50"></text></g><g><title>free_global_ctxt (2,757,051 samples, 3.48%)</title><rect x="89.7804%" y="245" width="3.4819%" height="15" fill="rgb(237,53,32)"/><text x="90.0304%" y="255.50">fre..</text></g><g><title>generate_crate_metadata (599,197 samples, 0.76%)</title><rect x="93.2623%" y="245" width="0.7567%" height="15" fill="rgb(233,25,53)"/><text x="93.5123%" y="255.50"></text></g><g><title>hir_lowering (1,540,517 samples, 1.95%)</title><rect x="94.0191%" y="245" width="1.9455%" height="15" fill="rgb(210,40,34)"/><text x="94.2691%" y="255.50">h..</text></g><g><title>parse_crate (1,831,561 samples, 2.31%)</title><rect x="96.0250%" y="245" width="2.3131%" height="15" fill="rgb(241,220,44)"/><text x="96.2750%" y="255.50">p..</text></g><g><title>prepare_outputs (355,804 samples, 0.45%)</title><rect x="98.3499%" y="245" width="0.4493%" height="15" fill="rgb(235,28,35)"/><text x="98.5999%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (490,726 samples, 0.62%)</title><rect x="98.7993%" y="245" width="0.6197%" height="15" fill="rgb(210,56,17)"/><text x="99.0493%" y="255.50"></text></g><g><title>setup_global_ctxt (150,322 samples, 0.19%)</title><rect x="99.4319%" y="245" width="0.1898%" height="15" fill="rgb(224,130,29)"/><text x="99.6819%" y="255.50"></text></g><g><title>all (79,182,619 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,212,8)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (79,182,619 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(223,33,50)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (299,533 samples, 0.38%)</title><rect x="99.6217%" y="245" width="0.3783%" height="15" fill="rgb(219,149,13)"/><text x="99.8717%" y="255.50"></text></g></svg></svg>