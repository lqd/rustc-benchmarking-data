<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (70,781 samples, 0.23%)</title><rect x="7.5302%" y="149" width="0.2329%" height="15" fill="rgb(227,0,7)"/><text x="7.7802%" y="159.50"></text></g><g><title>codegen_fn_attrs (39,732 samples, 0.13%)</title><rect x="8.0428%" y="133" width="0.1307%" height="15" fill="rgb(217,0,24)"/><text x="8.2928%" y="143.50"></text></g><g><title>is_copy_raw (45,961 samples, 0.15%)</title><rect x="8.9813%" y="117" width="0.1512%" height="15" fill="rgb(221,193,54)"/><text x="9.2313%" y="127.50"></text></g><g><title>evaluate_obligation (35,271 samples, 0.12%)</title><rect x="9.0165%" y="101" width="0.1161%" height="15" fill="rgb(248,212,6)"/><text x="9.2665%" y="111.50"></text></g><g><title>needs_drop_raw (136,881 samples, 0.45%)</title><rect x="9.1326%" y="117" width="0.4504%" height="15" fill="rgb(208,68,35)"/><text x="9.3826%" y="127.50"></text></g><g><title>is_copy_raw (116,111 samples, 0.38%)</title><rect x="9.2009%" y="101" width="0.3821%" height="15" fill="rgb(232,128,0)"/><text x="9.4509%" y="111.50"></text></g><g><title>evaluate_obligation (99,331 samples, 0.33%)</title><rect x="9.2561%" y="85" width="0.3269%" height="15" fill="rgb(207,160,47)"/><text x="9.5061%" y="95.50"></text></g><g><title>trait_impls_of (32,380 samples, 0.11%)</title><rect x="9.4764%" y="69" width="0.1066%" height="15" fill="rgb(228,23,34)"/><text x="9.7264%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (57,872 samples, 0.19%)</title><rect x="9.7571%" y="101" width="0.1904%" height="15" fill="rgb(218,30,26)"/><text x="10.0071%" y="111.50"></text></g><g><title>impl_parent (230,783 samples, 0.76%)</title><rect x="11.0007%" y="85" width="0.7594%" height="15" fill="rgb(220,122,19)"/><text x="11.2507%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (160,651 samples, 0.53%)</title><rect x="11.2315%" y="69" width="0.5287%" height="15" fill="rgb(250,228,42)"/><text x="11.4815%" y="79.50"></text></g><g><title>specialization_graph_of (1,241,314 samples, 4.08%)</title><rect x="10.0019%" y="101" width="4.0848%" height="15" fill="rgb(240,193,28)"/><text x="10.2519%" y="111.50">spec..</text></g><g><title>impl_trait_ref (706,998 samples, 2.33%)</title><rect x="11.7601%" y="85" width="2.3265%" height="15" fill="rgb(216,20,37)"/><text x="12.0101%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (637,647 samples, 2.10%)</title><rect x="11.9883%" y="69" width="2.0983%" height="15" fill="rgb(206,188,39)"/><text x="12.2383%" y="79.50">m..</text></g><g><title>resolve_instance (1,380,756 samples, 4.54%)</title><rect x="9.5830%" y="117" width="4.5436%" height="15" fill="rgb(217,207,13)"/><text x="9.8330%" y="127.50">resol..</text></g><g><title>thir_body (83,622 samples, 0.28%)</title><rect x="14.1369%" y="117" width="0.2752%" height="15" fill="rgb(231,73,38)"/><text x="14.3869%" y="127.50"></text></g><g><title>mir_const (2,215,375 samples, 7.29%)</title><rect x="7.1390%" y="165" width="7.2901%" height="15" fill="rgb(225,20,46)"/><text x="7.3890%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (2,025,723 samples, 6.67%)</title><rect x="7.7631%" y="149" width="6.6660%" height="15" fill="rgb(210,31,41)"/><text x="8.0131%" y="159.50">unsafety_..</text></g><g><title>mir_built (1,901,001 samples, 6.26%)</title><rect x="8.1735%" y="133" width="6.2556%" height="15" fill="rgb(221,200,47)"/><text x="8.4235%" y="143.50">mir_built</text></g><g><title>has_structural_eq_impls (83,251 samples, 0.27%)</title><rect x="14.7049%" y="149" width="0.2740%" height="15" fill="rgb(226,26,5)"/><text x="14.9549%" y="159.50"></text></g><g><title>evaluate_obligation (71,111 samples, 0.23%)</title><rect x="14.7449%" y="133" width="0.2340%" height="15" fill="rgb(249,33,26)"/><text x="14.9949%" y="143.50"></text></g><g><title>trait_impls_of (44,051 samples, 0.14%)</title><rect x="14.8339%" y="117" width="0.1450%" height="15" fill="rgb(235,183,28)"/><text x="15.0839%" y="127.50"></text></g><g><title>is_freeze_raw (38,320 samples, 0.13%)</title><rect x="14.9824%" y="149" width="0.1261%" height="15" fill="rgb(221,5,38)"/><text x="15.2324%" y="159.50"></text></g><g><title>evaluate_obligation (36,050 samples, 0.12%)</title><rect x="14.9899%" y="133" width="0.1186%" height="15" fill="rgb(247,18,42)"/><text x="15.2399%" y="143.50"></text></g><g><title>mir_const (40,580 samples, 0.13%)</title><rect x="15.1341%" y="149" width="0.1335%" height="15" fill="rgb(241,131,45)"/><text x="15.3841%" y="159.50"></text></g><g><title>mir_const_qualif (266,763 samples, 0.88%)</title><rect x="14.4291%" y="165" width="0.8778%" height="15" fill="rgb(249,31,29)"/><text x="14.6791%" y="175.50"></text></g><g><title>mir_promoted (2,631,760 samples, 8.66%)</title><rect x="6.6475%" y="181" width="8.6603%" height="15" fill="rgb(225,111,53)"/><text x="6.8975%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (236,905 samples, 0.78%)</title><rect x="15.3093%" y="181" width="0.7796%" height="15" fill="rgb(238,160,17)"/><text x="15.5593%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (70,061 samples, 0.23%)</title><rect x="16.0889%" y="181" width="0.2305%" height="15" fill="rgb(214,148,48)"/><text x="16.3389%" y="191.50"></text></g><g><title>normalize_projection_ty (30,750 samples, 0.10%)</title><rect x="16.2183%" y="165" width="0.1012%" height="15" fill="rgb(232,36,49)"/><text x="16.4683%" y="175.50"></text></g><g><title>MIR_borrow_checking (4,242,698 samples, 13.96%)</title><rect x="2.7321%" y="213" width="13.9614%" height="15" fill="rgb(209,103,24)"/><text x="2.9821%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (4,231,348 samples, 13.92%)</title><rect x="2.7694%" y="197" width="13.9240%" height="15" fill="rgb(229,88,8)"/><text x="3.0194%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (113,650 samples, 0.37%)</title><rect x="16.3195%" y="181" width="0.3740%" height="15" fill="rgb(213,181,19)"/><text x="16.5695%" y="191.50"></text></g><g><title>lint_levels (35,890 samples, 0.12%)</title><rect x="16.7860%" y="197" width="0.1181%" height="15" fill="rgb(254,191,54)"/><text x="17.0360%" y="207.50"></text></g><g><title>MIR_effect_checking (175,462 samples, 0.58%)</title><rect x="16.6935%" y="213" width="0.5774%" height="15" fill="rgb(241,83,37)"/><text x="16.9435%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (111,442 samples, 0.37%)</title><rect x="16.9041%" y="197" width="0.3667%" height="15" fill="rgb(233,36,39)"/><text x="17.1541%" y="207.50"></text></g><g><title>hir_module_items (123,232 samples, 0.41%)</title><rect x="17.2708%" y="213" width="0.4055%" height="15" fill="rgb(226,3,54)"/><text x="17.5208%" y="223.50"></text></g><g><title>get_lang_items (58,820 samples, 0.19%)</title><rect x="18.2366%" y="165" width="0.1936%" height="15" fill="rgb(245,192,40)"/><text x="18.4866%" y="175.50"></text></g><g><title>associated_item (30,630 samples, 0.10%)</title><rect x="18.4777%" y="149" width="0.1008%" height="15" fill="rgb(238,167,29)"/><text x="18.7277%" y="159.50"></text></g><g><title>should_inherit_track_caller (47,870 samples, 0.16%)</title><rect x="18.4302%" y="165" width="0.1575%" height="15" fill="rgb(232,182,51)"/><text x="18.6802%" y="175.50"></text></g><g><title>codegen_fn_attrs (199,441 samples, 0.66%)</title><rect x="18.0456%" y="181" width="0.6563%" height="15" fill="rgb(231,60,39)"/><text x="18.2956%" y="191.50"></text></g><g><title>supported_target_features (34,700 samples, 0.11%)</title><rect x="18.5877%" y="165" width="0.1142%" height="15" fill="rgb(208,69,12)"/><text x="18.8377%" y="175.50"></text></g><g><title>check_mod_attrs (283,863 samples, 0.93%)</title><rect x="17.7685%" y="197" width="0.9341%" height="15" fill="rgb(235,93,37)"/><text x="18.0185%" y="207.50"></text></g><g><title>check_mod_const_bodies (50,181 samples, 0.17%)</title><rect x="18.7026%" y="197" width="0.1651%" height="15" fill="rgb(213,116,39)"/><text x="18.9526%" y="207.50"></text></g><g><title>lookup_deprecation_entry (90,390 samples, 0.30%)</title><rect x="19.2014%" y="181" width="0.2974%" height="15" fill="rgb(222,207,29)"/><text x="19.4514%" y="191.50"></text></g><g><title>stability_index (32,860 samples, 0.11%)</title><rect x="19.3907%" y="165" width="0.1081%" height="15" fill="rgb(206,96,30)"/><text x="19.6407%" y="175.50"></text></g><g><title>lookup_stability (48,310 samples, 0.16%)</title><rect x="19.4988%" y="181" width="0.1590%" height="15" fill="rgb(218,138,4)"/><text x="19.7488%" y="191.50"></text></g><g><title>metadata_decode_entry_lookup_stability (40,270 samples, 0.13%)</title><rect x="19.5253%" y="165" width="0.1325%" height="15" fill="rgb(250,191,14)"/><text x="19.7753%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (237,373 samples, 0.78%)</title><rect x="18.9684%" y="197" width="0.7811%" height="15" fill="rgb(239,60,40)"/><text x="19.2184%" y="207.50"></text></g><g><title>looking_for_derive_registrar (44,991 samples, 0.15%)</title><rect x="19.7547%" y="197" width="0.1481%" height="15" fill="rgb(206,27,48)"/><text x="20.0047%" y="207.50"></text></g><g><title>misc_checking_1 (680,888 samples, 2.24%)</title><rect x="17.6777%" y="213" width="2.2406%" height="15" fill="rgb(225,35,8)"/><text x="17.9277%" y="223.50">m..</text></g><g><title>liveness_and_intrinsic_checking (68,091 samples, 0.22%)</title><rect x="19.9220%" y="197" width="0.2241%" height="15" fill="rgb(250,213,24)"/><text x="20.1720%" y="207.50"></text></g><g><title>check_mod_liveness (54,501 samples, 0.18%)</title><rect x="19.9667%" y="181" width="0.1793%" height="15" fill="rgb(247,123,22)"/><text x="20.2167%" y="191.50"></text></g><g><title>misc_checking_2 (139,122 samples, 0.46%)</title><rect x="19.9183%" y="213" width="0.4578%" height="15" fill="rgb(231,138,38)"/><text x="20.1683%" y="223.50"></text></g><g><title>match_checking (69,891 samples, 0.23%)</title><rect x="20.1461%" y="197" width="0.2300%" height="15" fill="rgb(231,145,46)"/><text x="20.3961%" y="207.50"></text></g><g><title>check_match (66,341 samples, 0.22%)</title><rect x="20.1578%" y="181" width="0.2183%" height="15" fill="rgb(251,118,11)"/><text x="20.4078%" y="191.50"></text></g><g><title>check_private_in_public (36,170 samples, 0.12%)</title><rect x="20.3978%" y="197" width="0.1190%" height="15" fill="rgb(217,147,25)"/><text x="20.6478%" y="207.50"></text></g><g><title>death_checking (51,451 samples, 0.17%)</title><rect x="20.5168%" y="197" width="0.1693%" height="15" fill="rgb(247,81,37)"/><text x="20.7668%" y="207.50"></text></g><g><title>crate_lints (127,151 samples, 0.42%)</title><rect x="20.6903%" y="181" width="0.4184%" height="15" fill="rgb(209,12,38)"/><text x="20.9403%" y="191.50"></text></g><g><title>param_env (74,201 samples, 0.24%)</title><rect x="20.8645%" y="165" width="0.2442%" height="15" fill="rgb(227,1,9)"/><text x="21.1145%" y="175.50"></text></g><g><title>predicates_of (39,350 samples, 0.13%)</title><rect x="20.9792%" y="149" width="0.1295%" height="15" fill="rgb(248,47,43)"/><text x="21.2292%" y="159.50"></text></g><g><title>predicates_defined_on (32,970 samples, 0.11%)</title><rect x="21.0002%" y="133" width="0.1085%" height="15" fill="rgb(221,10,30)"/><text x="21.2502%" y="143.50"></text></g><g><title>lint_checking (166,912 samples, 0.55%)</title><rect x="20.6861%" y="197" width="0.5493%" height="15" fill="rgb(210,229,1)"/><text x="20.9361%" y="207.50"></text></g><g><title>module_lints (38,491 samples, 0.13%)</title><rect x="21.1087%" y="181" width="0.1267%" height="15" fill="rgb(222,148,37)"/><text x="21.3587%" y="191.50"></text></g><g><title>lint_mod (35,301 samples, 0.12%)</title><rect x="21.1192%" y="165" width="0.1162%" height="15" fill="rgb(234,67,33)"/><text x="21.3692%" y="175.50"></text></g><g><title>privacy_access_levels (35,491 samples, 0.12%)</title><rect x="21.2353%" y="197" width="0.1168%" height="15" fill="rgb(247,98,35)"/><text x="21.4853%" y="207.50"></text></g><g><title>privacy_checking_modules (71,251 samples, 0.23%)</title><rect x="21.3521%" y="197" width="0.2345%" height="15" fill="rgb(247,138,52)"/><text x="21.6021%" y="207.50"></text></g><g><title>check_mod_privacy (70,081 samples, 0.23%)</title><rect x="21.3560%" y="181" width="0.2306%" height="15" fill="rgb(213,79,30)"/><text x="21.6060%" y="191.50"></text></g><g><title>misc_checking_3 (377,735 samples, 1.24%)</title><rect x="20.3761%" y="213" width="1.2430%" height="15" fill="rgb(246,177,23)"/><text x="20.6261%" y="223.50"></text></g><g><title>coherence_checking (35,980 samples, 0.12%)</title><rect x="21.7142%" y="197" width="0.1184%" height="15" fill="rgb(230,62,27)"/><text x="21.9642%" y="207.50"></text></g><g><title>impl_wf_inference (30,751 samples, 0.10%)</title><rect x="21.8326%" y="197" width="0.1012%" height="15" fill="rgb(216,154,8)"/><text x="22.0826%" y="207.50"></text></g><g><title>adt_def (124,761 samples, 0.41%)</title><rect x="32.1363%" y="133" width="0.4105%" height="15" fill="rgb(244,35,45)"/><text x="32.3863%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (118,101 samples, 0.39%)</title><rect x="32.1583%" y="117" width="0.3886%" height="15" fill="rgb(251,115,12)"/><text x="32.4083%" y="127.50"></text></g><g><title>item_attrs (106,521 samples, 0.35%)</title><rect x="32.1964%" y="101" width="0.3505%" height="15" fill="rgb(240,54,50)"/><text x="32.4464%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (105,211 samples, 0.35%)</title><rect x="32.2007%" y="85" width="0.3462%" height="15" fill="rgb(233,84,52)"/><text x="32.4507%" y="95.50"></text></g><g><title>adt_sized_constraint (53,031 samples, 0.17%)</title><rect x="32.5469%" y="133" width="0.1745%" height="15" fill="rgb(207,117,47)"/><text x="32.7969%" y="143.50"></text></g><g><title>adt_def (52,041 samples, 0.17%)</title><rect x="32.5501%" y="117" width="0.1713%" height="15" fill="rgb(249,43,39)"/><text x="32.8001%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (51,631 samples, 0.17%)</title><rect x="32.5515%" y="101" width="0.1699%" height="15" fill="rgb(209,38,44)"/><text x="32.8015%" y="111.50"></text></g><g><title>item_attrs (47,191 samples, 0.16%)</title><rect x="32.5661%" y="85" width="0.1553%" height="15" fill="rgb(236,212,23)"/><text x="32.8161%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (46,731 samples, 0.15%)</title><rect x="32.5676%" y="69" width="0.1538%" height="15" fill="rgb(242,79,21)"/><text x="32.8176%" y="79.50"></text></g><g><title>adt_sized_constraint (184,702 samples, 0.61%)</title><rect x="32.1151%" y="149" width="0.6078%" height="15" fill="rgb(211,96,35)"/><text x="32.3651%" y="159.50"></text></g><g><title>associated_item (99,951 samples, 0.33%)</title><rect x="32.8842%" y="133" width="0.3289%" height="15" fill="rgb(253,215,40)"/><text x="33.1342%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (81,251 samples, 0.27%)</title><rect x="32.9457%" y="117" width="0.2674%" height="15" fill="rgb(211,81,21)"/><text x="33.1957%" y="127.50"></text></g><g><title>associated_items (167,592 samples, 0.55%)</title><rect x="32.7229%" y="149" width="0.5515%" height="15" fill="rgb(208,190,38)"/><text x="32.9729%" y="159.50"></text></g><g><title>adt_def (232,863 samples, 0.77%)</title><rect x="33.7959%" y="101" width="0.7663%" height="15" fill="rgb(235,213,38)"/><text x="34.0459%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (231,963 samples, 0.76%)</title><rect x="33.7989%" y="85" width="0.7633%" height="15" fill="rgb(237,122,38)"/><text x="34.0489%" y="95.50"></text></g><g><title>item_attrs (42,731 samples, 0.14%)</title><rect x="34.4216%" y="69" width="0.1406%" height="15" fill="rgb(244,218,35)"/><text x="34.6716%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (41,391 samples, 0.14%)</title><rect x="34.4260%" y="53" width="0.1362%" height="15" fill="rgb(240,68,47)"/><text x="34.6760%" y="63.50"></text></g><g><title>adt_def (46,850 samples, 0.15%)</title><rect x="34.6295%" y="85" width="0.1542%" height="15" fill="rgb(210,16,53)"/><text x="34.8795%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (46,390 samples, 0.15%)</title><rect x="34.6310%" y="69" width="0.1527%" height="15" fill="rgb(235,124,12)"/><text x="34.8810%" y="79.50"></text></g><g><title>item_attrs (41,860 samples, 0.14%)</title><rect x="34.6459%" y="53" width="0.1377%" height="15" fill="rgb(224,169,11)"/><text x="34.8959%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (41,460 samples, 0.14%)</title><rect x="34.6472%" y="37" width="0.1364%" height="15" fill="rgb(250,166,2)"/><text x="34.8972%" y="47.50"></text></g><g><title>adt_dtorck_constraint (62,451 samples, 0.21%)</title><rect x="34.6151%" y="101" width="0.2055%" height="15" fill="rgb(242,216,29)"/><text x="34.8651%" y="111.50"></text></g><g><title>adt_dtorck_constraint (344,654 samples, 1.13%)</title><rect x="33.7469%" y="117" width="1.1341%" height="15" fill="rgb(230,116,27)"/><text x="33.9969%" y="127.50"></text></g><g><title>dropck_outlives (493,225 samples, 1.62%)</title><rect x="33.3276%" y="149" width="1.6230%" height="15" fill="rgb(228,99,48)"/><text x="33.5776%" y="159.50"></text></g><g><title>adt_dtorck_constraint (424,785 samples, 1.40%)</title><rect x="33.5528%" y="133" width="1.3978%" height="15" fill="rgb(253,11,6)"/><text x="33.8028%" y="143.50"></text></g><g><title>adt_def (31,350 samples, 0.10%)</title><rect x="36.0792%" y="117" width="0.1032%" height="15" fill="rgb(247,143,39)"/><text x="36.3292%" y="127.50"></text></g><g><title>adt_sized_constraint (58,201 samples, 0.19%)</title><rect x="36.0556%" y="133" width="0.1915%" height="15" fill="rgb(236,97,10)"/><text x="36.3056%" y="143.50"></text></g><g><title>evaluate_obligation (481,939 samples, 1.59%)</title><rect x="34.9506%" y="149" width="1.5859%" height="15" fill="rgb(233,208,19)"/><text x="35.2006%" y="159.50"></text></g><g><title>trait_impls_of (61,771 samples, 0.20%)</title><rect x="36.3333%" y="133" width="0.2033%" height="15" fill="rgb(216,164,2)"/><text x="36.5833%" y="143.50"></text></g><g><title>fn_sig (54,211 samples, 0.18%)</title><rect x="36.5865%" y="149" width="0.1784%" height="15" fill="rgb(220,129,5)"/><text x="36.8365%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (48,130 samples, 0.16%)</title><rect x="36.6065%" y="133" width="0.1584%" height="15" fill="rgb(242,17,10)"/><text x="36.8565%" y="143.50"></text></g><g><title>generics_of (40,911 samples, 0.13%)</title><rect x="36.7649%" y="149" width="0.1346%" height="15" fill="rgb(242,107,0)"/><text x="37.0149%" y="159.50"></text></g><g><title>impl_trait_ref (34,520 samples, 0.11%)</title><rect x="36.9164%" y="149" width="0.1136%" height="15" fill="rgb(251,28,31)"/><text x="37.1664%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (32,080 samples, 0.11%)</title><rect x="36.9244%" y="133" width="0.1056%" height="15" fill="rgb(233,223,10)"/><text x="37.1744%" y="143.50"></text></g><g><title>inherent_impls (32,720 samples, 0.11%)</title><rect x="37.0364%" y="149" width="0.1077%" height="15" fill="rgb(215,21,27)"/><text x="37.2864%" y="159.50"></text></g><g><title>item_attrs (147,671 samples, 0.49%)</title><rect x="37.1441%" y="149" width="0.4859%" height="15" fill="rgb(232,23,21)"/><text x="37.3941%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (142,211 samples, 0.47%)</title><rect x="37.1620%" y="133" width="0.4680%" height="15" fill="rgb(244,5,23)"/><text x="37.4120%" y="143.50"></text></g><g><title>evaluate_obligation (57,911 samples, 0.19%)</title><rect x="37.8574%" y="133" width="0.1906%" height="15" fill="rgb(226,81,46)"/><text x="38.1074%" y="143.50"></text></g><g><title>method_autoderef_steps (119,022 samples, 0.39%)</title><rect x="37.7075%" y="149" width="0.3917%" height="15" fill="rgb(247,70,30)"/><text x="37.9575%" y="159.50"></text></g><g><title>explicit_predicates_of (41,651 samples, 0.14%)</title><rect x="38.3986%" y="117" width="0.1371%" height="15" fill="rgb(212,68,19)"/><text x="38.6486%" y="127.50"></text></g><g><title>predicates_of (139,332 samples, 0.46%)</title><rect x="38.1435%" y="149" width="0.4585%" height="15" fill="rgb(240,187,13)"/><text x="38.3935%" y="159.50"></text></g><g><title>predicates_defined_on (94,372 samples, 0.31%)</title><rect x="38.2915%" y="133" width="0.3105%" height="15" fill="rgb(223,113,26)"/><text x="38.5415%" y="143.50"></text></g><g><title>type_of (62,390 samples, 0.21%)</title><rect x="38.6712%" y="149" width="0.2053%" height="15" fill="rgb(206,192,2)"/><text x="38.9212%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (51,790 samples, 0.17%)</title><rect x="38.7061%" y="133" width="0.1704%" height="15" fill="rgb(241,108,4)"/><text x="38.9561%" y="143.50"></text></g><g><title>variances_of (34,390 samples, 0.11%)</title><rect x="38.8850%" y="149" width="0.1132%" height="15" fill="rgb(247,173,49)"/><text x="39.1350%" y="159.50"></text></g><g><title>item_bodies_checking (5,196,118 samples, 17.10%)</title><rect x="21.9338%" y="197" width="17.0988%" height="15" fill="rgb(224,114,35)"/><text x="22.1838%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (5,193,928 samples, 17.09%)</title><rect x="21.9410%" y="181" width="17.0916%" height="15" fill="rgb(245,159,27)"/><text x="22.1910%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (5,181,268 samples, 17.05%)</title><rect x="21.9827%" y="165" width="17.0499%" height="15" fill="rgb(245,172,44)"/><text x="22.2327%" y="175.50">typeck</text></g><g><title>impl_parent (63,740 samples, 0.21%)</title><rect x="39.5260%" y="117" width="0.2097%" height="15" fill="rgb(236,23,11)"/><text x="39.7760%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (36,730 samples, 0.12%)</title><rect x="39.6149%" y="101" width="0.1209%" height="15" fill="rgb(205,117,38)"/><text x="39.8649%" y="111.50"></text></g><g><title>impl_trait_ref (321,825 samples, 1.06%)</title><rect x="39.7357%" y="117" width="1.0590%" height="15" fill="rgb(237,72,25)"/><text x="39.9857%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (301,125 samples, 0.99%)</title><rect x="39.8038%" y="101" width="0.9909%" height="15" fill="rgb(244,70,9)"/><text x="40.0538%" y="111.50"></text></g><g><title>item_types_checking (563,196 samples, 1.85%)</title><rect x="39.0326%" y="197" width="1.8533%" height="15" fill="rgb(217,125,39)"/><text x="39.2826%" y="207.50">i..</text></g><g><title>check_mod_item_types (560,096 samples, 1.84%)</title><rect x="39.0428%" y="181" width="1.8431%" height="15" fill="rgb(235,36,10)"/><text x="39.2928%" y="191.50">c..</text></g><g><title>adt_destructor (545,136 samples, 1.79%)</title><rect x="39.0920%" y="165" width="1.7939%" height="15" fill="rgb(251,123,47)"/><text x="39.3420%" y="175.50">a..</text></g><g><title>coherent_trait (533,866 samples, 1.76%)</title><rect x="39.1291%" y="149" width="1.7568%" height="15" fill="rgb(221,13,13)"/><text x="39.3791%" y="159.50"></text></g><g><title>specialization_graph_of (525,476 samples, 1.73%)</title><rect x="39.1567%" y="133" width="1.7292%" height="15" fill="rgb(238,131,9)"/><text x="39.4067%" y="143.50"></text></g><g><title>fn_sig (62,291 samples, 0.20%)</title><rect x="41.2358%" y="165" width="0.2050%" height="15" fill="rgb(211,50,8)"/><text x="41.4858%" y="175.50"></text></g><g><title>generics_of (75,761 samples, 0.25%)</title><rect x="41.4408%" y="165" width="0.2493%" height="15" fill="rgb(245,182,24)"/><text x="41.6908%" y="175.50"></text></g><g><title>associated_items (31,830 samples, 0.10%)</title><rect x="42.9018%" y="117" width="0.1047%" height="15" fill="rgb(242,14,37)"/><text x="43.1518%" y="127.50"></text></g><g><title>late_bound_vars_map (115,221 samples, 0.38%)</title><rect x="43.0613%" y="117" width="0.3792%" height="15" fill="rgb(246,228,12)"/><text x="43.3113%" y="127.50"></text></g><g><title>resolve_lifetimes (100,881 samples, 0.33%)</title><rect x="43.1085%" y="101" width="0.3320%" height="15" fill="rgb(213,55,15)"/><text x="43.3585%" y="111.50"></text></g><g><title>explicit_predicates_of (542,216 samples, 1.78%)</title><rect x="41.7965%" y="133" width="1.7843%" height="15" fill="rgb(209,9,3)"/><text x="42.0465%" y="143.50">e..</text></g><g><title>predicates_of (610,076 samples, 2.01%)</title><rect x="41.6926%" y="165" width="2.0076%" height="15" fill="rgb(230,59,30)"/><text x="41.9426%" y="175.50">p..</text></g><g><title>predicates_defined_on (598,996 samples, 1.97%)</title><rect x="41.7290%" y="149" width="1.9711%" height="15" fill="rgb(209,121,21)"/><text x="41.9790%" y="159.50">p..</text></g><g><title>inferred_outlives_of (36,280 samples, 0.12%)</title><rect x="43.5807%" y="133" width="0.1194%" height="15" fill="rgb(220,109,13)"/><text x="43.8307%" y="143.50"></text></g><g><title>type_collecting (924,990 samples, 3.04%)</title><rect x="40.8908%" y="197" width="3.0438%" height="15" fill="rgb(232,18,1)"/><text x="41.1408%" y="207.50">typ..</text></g><g><title>collect_mod_item_types (908,070 samples, 2.99%)</title><rect x="40.9465%" y="181" width="2.9882%" height="15" fill="rgb(215,41,42)"/><text x="41.1965%" y="191.50">col..</text></g><g><title>type_of (71,261 samples, 0.23%)</title><rect x="43.7001%" y="165" width="0.2345%" height="15" fill="rgb(224,123,36)"/><text x="43.9501%" y="175.50"></text></g><g><title>param_env (110,861 samples, 0.36%)</title><rect x="45.3488%" y="165" width="0.3648%" height="15" fill="rgb(240,125,3)"/><text x="45.5988%" y="175.50"></text></g><g><title>predicates_of (31,431 samples, 0.10%)</title><rect x="45.7137%" y="165" width="0.1034%" height="15" fill="rgb(205,98,50)"/><text x="45.9637%" y="175.50"></text></g><g><title>check_impl_item_well_formed (569,507 samples, 1.87%)</title><rect x="44.0899%" y="181" width="1.8741%" height="15" fill="rgb(205,185,37)"/><text x="44.3399%" y="191.50">c..</text></g><g><title>region_scope_tree (44,650 samples, 0.15%)</title><rect x="45.8171%" y="165" width="0.1469%" height="15" fill="rgb(238,207,15)"/><text x="46.0671%" y="175.50"></text></g><g><title>evaluate_obligation (75,361 samples, 0.25%)</title><rect x="47.9006%" y="165" width="0.2480%" height="15" fill="rgb(213,199,42)"/><text x="48.1506%" y="175.50"></text></g><g><title>implied_outlives_bounds (128,951 samples, 0.42%)</title><rect x="48.1523%" y="165" width="0.4243%" height="15" fill="rgb(235,201,11)"/><text x="48.4023%" y="175.50"></text></g><g><title>param_env (256,043 samples, 0.84%)</title><rect x="48.5799%" y="165" width="0.8426%" height="15" fill="rgb(207,46,11)"/><text x="48.8299%" y="175.50"></text></g><g><title>predicates_of (81,121 samples, 0.27%)</title><rect x="49.4224%" y="165" width="0.2669%" height="15" fill="rgb(241,35,35)"/><text x="49.6724%" y="175.50"></text></g><g><title>predicates_defined_on (58,831 samples, 0.19%)</title><rect x="49.4958%" y="149" width="0.1936%" height="15" fill="rgb(243,32,47)"/><text x="49.7458%" y="159.50"></text></g><g><title>trait_impls_of (111,152 samples, 0.37%)</title><rect x="49.7732%" y="165" width="0.3658%" height="15" fill="rgb(247,202,23)"/><text x="50.0232%" y="175.50"></text></g><g><title>implementations_of_trait (34,101 samples, 0.11%)</title><rect x="50.0268%" y="149" width="0.1122%" height="15" fill="rgb(219,102,11)"/><text x="50.2768%" y="159.50"></text></g><g><title>analysis (14,617,475 samples, 48.10%)</title><rect x="2.1854%" y="229" width="48.1015%" height="15" fill="rgb(243,110,44)"/><text x="2.4354%" y="239.50">analysis</text></g><g><title>type_check_crate (8,711,817 samples, 28.67%)</title><rect x="21.6191%" y="213" width="28.6678%" height="15" fill="rgb(222,74,54)"/><text x="21.8691%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,929,552 samples, 6.35%)</title><rect x="43.9374%" y="197" width="6.3495%" height="15" fill="rgb(216,99,12)"/><text x="44.1874%" y="207.50">wf_check..</text></g><g><title>check_item_well_formed (1,313,675 samples, 4.32%)</title><rect x="45.9640%" y="181" width="4.3229%" height="15" fill="rgb(226,22,26)"/><text x="46.2140%" y="191.50">check..</text></g><g><title>variances_of (44,941 samples, 0.15%)</title><rect x="50.1390%" y="165" width="0.1479%" height="15" fill="rgb(217,163,10)"/><text x="50.3890%" y="175.50"></text></g><g><title>crate_variances (39,651 samples, 0.13%)</title><rect x="50.1564%" y="149" width="0.1305%" height="15" fill="rgb(213,25,53)"/><text x="50.4064%" y="159.50"></text></g><g><title>codegen_crate (313,664 samples, 1.03%)</title><rect x="50.3246%" y="229" width="1.0322%" height="15" fill="rgb(252,105,26)"/><text x="50.5746%" y="239.50"></text></g><g><title>AST_validation (88,181 samples, 0.29%)</title><rect x="52.0690%" y="213" width="0.2902%" height="15" fill="rgb(220,39,43)"/><text x="52.3190%" y="223.50"></text></g><g><title>crate_injection (102,421 samples, 0.34%)</title><rect x="52.4494%" y="213" width="0.3370%" height="15" fill="rgb(229,68,48)"/><text x="52.6994%" y="223.50"></text></g><g><title>macro_expand_crate (8,237,463 samples, 27.11%)</title><rect x="52.7864%" y="213" width="27.1069%" height="15" fill="rgb(252,8,32)"/><text x="53.0364%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (8,213,933 samples, 27.03%)</title><rect x="52.8639%" y="197" width="27.0294%" height="15" fill="rgb(223,20,43)"/><text x="53.1139%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (250,672 samples, 0.82%)</title><rect x="79.0684%" y="181" width="0.8249%" height="15" fill="rgb(229,81,49)"/><text x="79.3184%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (140,142 samples, 0.46%)</title><rect x="79.9303%" y="213" width="0.4612%" height="15" fill="rgb(236,28,36)"/><text x="80.1803%" y="223.50"></text></g><g><title>finalize_imports (239,033 samples, 0.79%)</title><rect x="80.4202%" y="197" width="0.7866%" height="15" fill="rgb(249,185,26)"/><text x="80.6702%" y="207.50"></text></g><g><title>late_resolve_crate (806,210 samples, 2.65%)</title><rect x="81.2340%" y="197" width="2.6530%" height="15" fill="rgb(249,174,33)"/><text x="81.4840%" y="207.50">la..</text></g><g><title>configure_and_expand (9,935,613 samples, 32.69%)</title><rect x="51.3568%" y="229" width="32.6949%" height="15" fill="rgb(233,201,37)"/><text x="51.6068%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,112,303 samples, 3.66%)</title><rect x="80.3915%" y="213" width="3.6602%" height="15" fill="rgb(221,78,26)"/><text x="80.6415%" y="223.50">reso..</text></g><g><title>drop_ast (58,321 samples, 0.19%)</title><rect x="84.0517%" y="229" width="0.1919%" height="15" fill="rgb(250,127,30)"/><text x="84.3017%" y="239.50"></text></g><g><title>early_lint_checks (142,202 samples, 0.47%)</title><rect x="84.2986%" y="229" width="0.4679%" height="15" fill="rgb(230,49,44)"/><text x="84.5486%" y="239.50"></text></g><g><title>free_global_ctxt (1,382,635 samples, 4.55%)</title><rect x="84.7665%" y="229" width="4.5498%" height="15" fill="rgb(229,67,23)"/><text x="85.0165%" y="239.50">free_..</text></g><g><title>crate_hash (60,431 samples, 0.20%)</title><rect x="90.1713%" y="213" width="0.1989%" height="15" fill="rgb(249,83,47)"/><text x="90.4213%" y="223.50"></text></g><g><title>mir_for_ctfe (87,020 samples, 0.29%)</title><rect x="90.4375%" y="213" width="0.2864%" height="15" fill="rgb(215,43,3)"/><text x="90.6875%" y="223.50"></text></g><g><title>generate_crate_metadata (456,725 samples, 1.50%)</title><rect x="89.3164%" y="229" width="1.5029%" height="15" fill="rgb(238,154,13)"/><text x="89.5664%" y="239.50"></text></g><g><title>hir_lowering (721,058 samples, 2.37%)</title><rect x="90.8193%" y="229" width="2.3728%" height="15" fill="rgb(219,56,2)"/><text x="91.0693%" y="239.50">hi..</text></g><g><title>link (33,790 samples, 0.11%)</title><rect x="93.1921%" y="229" width="0.1112%" height="15" fill="rgb(233,0,4)"/><text x="93.4421%" y="239.50"></text></g><g><title>parse_crate (931,441 samples, 3.07%)</title><rect x="93.3033%" y="229" width="3.0651%" height="15" fill="rgb(235,30,7)"/><text x="93.5533%" y="239.50">par..</text></g><g><title>prepare_outputs (314,953 samples, 1.04%)</title><rect x="96.4008%" y="229" width="1.0364%" height="15" fill="rgb(250,79,13)"/><text x="96.6508%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (331,193 samples, 1.09%)</title><rect x="97.4373%" y="229" width="1.0899%" height="15" fill="rgb(211,146,34)"/><text x="97.6873%" y="239.50"></text></g><g><title>setup_global_ctxt (149,141 samples, 0.49%)</title><rect x="98.5599%" y="229" width="0.4908%" height="15" fill="rgb(228,22,38)"/><text x="98.8099%" y="239.50"></text></g><g><title>all (30,388,833 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (30,388,833 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (288,483 samples, 0.95%)</title><rect x="99.0507%" y="229" width="0.9493%" height="15" fill="rgb(215,215,53)"/><text x="99.3007%" y="239.50"></text></g></svg></svg>