<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (643,170 samples, 0.36%)</title><rect x="12.1530%" y="149" width="0.3620%" height="15" fill="rgb(227,0,7)"/><text x="12.4030%" y="159.50"></text></g><g><title>param_env (475,743 samples, 0.27%)</title><rect x="13.9695%" y="117" width="0.2678%" height="15" fill="rgb(217,0,24)"/><text x="14.2195%" y="127.50"></text></g><g><title>item_attrs (340,902 samples, 0.19%)</title><rect x="14.7479%" y="85" width="0.1919%" height="15" fill="rgb(221,193,54)"/><text x="14.9979%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (325,982 samples, 0.18%)</title><rect x="14.7563%" y="69" width="0.1835%" height="15" fill="rgb(248,212,6)"/><text x="15.0063%" y="79.50"></text></g><g><title>codegen_fn_attrs (535,605 samples, 0.30%)</title><rect x="14.6564%" y="101" width="0.3015%" height="15" fill="rgb(208,68,35)"/><text x="14.9064%" y="111.50"></text></g><g><title>adt_drop_tys (278,103 samples, 0.16%)</title><rect x="17.3473%" y="69" width="0.1565%" height="15" fill="rgb(232,128,0)"/><text x="17.5973%" y="79.50"></text></g><g><title>is_copy_raw (1,135,231 samples, 0.64%)</title><rect x="17.5039%" y="69" width="0.6390%" height="15" fill="rgb(207,160,47)"/><text x="17.7539%" y="79.50"></text></g><g><title>evaluate_obligation (888,660 samples, 0.50%)</title><rect x="17.6426%" y="53" width="0.5002%" height="15" fill="rgb(228,23,34)"/><text x="17.8926%" y="63.50"></text></g><g><title>needs_drop_raw (1,592,137 samples, 0.90%)</title><rect x="17.2477%" y="85" width="0.8961%" height="15" fill="rgb(218,30,26)"/><text x="17.4977%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (486,375 samples, 0.27%)</title><rect x="18.3298%" y="69" width="0.2738%" height="15" fill="rgb(220,122,19)"/><text x="18.5798%" y="79.50"></text></g><g><title>impl_parent (706,142 samples, 0.40%)</title><rect x="19.2830%" y="53" width="0.3975%" height="15" fill="rgb(250,228,42)"/><text x="19.5330%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (432,796 samples, 0.24%)</title><rect x="19.4369%" y="37" width="0.2436%" height="15" fill="rgb(240,193,28)"/><text x="19.6869%" y="47.50"></text></g><g><title>specialization_graph_of (3,545,699 samples, 2.00%)</title><rect x="18.6801%" y="69" width="1.9957%" height="15" fill="rgb(216,20,37)"/><text x="18.9301%" y="79.50">s..</text></g><g><title>impl_trait_ref (1,768,398 samples, 1.00%)</title><rect x="19.6805%" y="53" width="0.9954%" height="15" fill="rgb(206,188,39)"/><text x="19.9305%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,263,392 samples, 0.71%)</title><rect x="19.9647%" y="37" width="0.7111%" height="15" fill="rgb(217,207,13)"/><text x="20.2147%" y="47.50"></text></g><g><title>resolve_instance (4,681,620 samples, 2.64%)</title><rect x="18.1439%" y="85" width="2.6351%" height="15" fill="rgb(231,73,38)"/><text x="18.3939%" y="95.50">re..</text></g><g><title>thir_body (1,538,463 samples, 0.87%)</title><rect x="20.8083%" y="85" width="0.8659%" height="15" fill="rgb(225,20,46)"/><text x="21.0583%" y="95.50"></text></g><g><title>mir_const (15,043,225 samples, 8.47%)</title><rect x="13.2760%" y="133" width="8.4672%" height="15" fill="rgb(210,31,41)"/><text x="13.5260%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (13,335,364 samples, 7.51%)</title><rect x="14.2373%" y="117" width="7.5059%" height="15" fill="rgb(221,200,47)"/><text x="14.4873%" y="127.50">unsafety_c..</text></g><g><title>mir_built (12,052,012 samples, 6.78%)</title><rect x="14.9597%" y="101" width="6.7836%" height="15" fill="rgb(226,26,5)"/><text x="15.2097%" y="111.50">mir_built</text></g><g><title>has_structural_eq_impls (182,132 samples, 0.10%)</title><rect x="21.8225%" y="117" width="0.1025%" height="15" fill="rgb(249,33,26)"/><text x="22.0725%" y="127.50"></text></g><g><title>mir_const_qualif (429,405 samples, 0.24%)</title><rect x="21.7432%" y="133" width="0.2417%" height="15" fill="rgb(235,183,28)"/><text x="21.9932%" y="143.50"></text></g><g><title>mir_promoted (16,701,812 samples, 9.40%)</title><rect x="12.5845%" y="149" width="9.4008%" height="15" fill="rgb(221,5,38)"/><text x="12.8345%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (656,939 samples, 0.37%)</title><rect x="21.9879%" y="149" width="0.3698%" height="15" fill="rgb(247,18,42)"/><text x="22.2379%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (572,605 samples, 0.32%)</title><rect x="22.3577%" y="149" width="0.3223%" height="15" fill="rgb(241,131,45)"/><text x="22.6077%" y="159.50"></text></g><g><title>normalize_projection_ty (237,022 samples, 0.13%)</title><rect x="22.5465%" y="133" width="0.1334%" height="15" fill="rgb(249,31,29)"/><text x="22.7965%" y="143.50"></text></g><g><title>type_op_normalize_predicate (213,123 samples, 0.12%)</title><rect x="22.6800%" y="149" width="0.1200%" height="15" fill="rgb(225,111,53)"/><text x="22.9300%" y="159.50"></text></g><g><title>type_op_normalize_ty (278,882 samples, 0.16%)</title><rect x="22.7999%" y="149" width="0.1570%" height="15" fill="rgb(238,160,17)"/><text x="23.0499%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,739,388 samples, 2.67%)</title><rect x="22.9569%" y="149" width="2.6676%" height="15" fill="rgb(214,148,48)"/><text x="23.2069%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (44,540,348 samples, 25.07%)</title><rect x="0.5599%" y="181" width="25.0699%" height="15" fill="rgb(232,36,49)"/><text x="0.8099%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (44,362,216 samples, 24.97%)</title><rect x="0.6602%" y="165" width="24.9697%" height="15" fill="rgb(209,103,24)"/><text x="0.9102%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (219,002 samples, 0.12%)</title><rect x="25.7115%" y="181" width="0.1233%" height="15" fill="rgb(229,88,8)"/><text x="25.9615%" y="191.50"></text></g><g><title>should_inherit_track_caller (241,173 samples, 0.14%)</title><rect x="26.1106%" y="133" width="0.1357%" height="15" fill="rgb(213,181,19)"/><text x="26.3606%" y="143.50"></text></g><g><title>codegen_fn_attrs (447,936 samples, 0.25%)</title><rect x="26.0028%" y="149" width="0.2521%" height="15" fill="rgb(254,191,54)"/><text x="26.2528%" y="159.50"></text></g><g><title>check_mod_attrs (720,558 samples, 0.41%)</title><rect x="25.8494%" y="165" width="0.4056%" height="15" fill="rgb(241,83,37)"/><text x="26.0994%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (640,937 samples, 0.36%)</title><rect x="26.3944%" y="165" width="0.3608%" height="15" fill="rgb(233,36,39)"/><text x="26.6444%" y="175.50"></text></g><g><title>misc_checking_1 (1,694,619 samples, 0.95%)</title><rect x="25.8351%" y="181" width="0.9538%" height="15" fill="rgb(226,3,54)"/><text x="26.0851%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (642,347 samples, 0.36%)</title><rect x="26.7901%" y="165" width="0.3616%" height="15" fill="rgb(245,192,40)"/><text x="27.0401%" y="175.50"></text></g><g><title>check_mod_liveness (525,896 samples, 0.30%)</title><rect x="26.8557%" y="149" width="0.2960%" height="15" fill="rgb(238,167,29)"/><text x="27.1057%" y="159.50"></text></g><g><title>misc_checking_2 (1,365,715 samples, 0.77%)</title><rect x="26.7889%" y="181" width="0.7687%" height="15" fill="rgb(232,182,51)"/><text x="27.0389%" y="191.50"></text></g><g><title>match_checking (721,178 samples, 0.41%)</title><rect x="27.1517%" y="165" width="0.4059%" height="15" fill="rgb(231,60,39)"/><text x="27.4017%" y="175.50"></text></g><g><title>check_match (677,858 samples, 0.38%)</title><rect x="27.1760%" y="149" width="0.3815%" height="15" fill="rgb(208,69,12)"/><text x="27.4260%" y="159.50"></text></g><g><title>check_private_in_public (290,494 samples, 0.16%)</title><rect x="27.5634%" y="165" width="0.1635%" height="15" fill="rgb(235,93,37)"/><text x="27.8134%" y="175.50"></text></g><g><title>death_checking (586,176 samples, 0.33%)</title><rect x="27.7269%" y="165" width="0.3299%" height="15" fill="rgb(213,116,39)"/><text x="27.9769%" y="175.50"></text></g><g><title>eval_to_allocation_raw (270,713 samples, 0.15%)</title><rect x="28.5398%" y="133" width="0.1524%" height="15" fill="rgb(222,207,29)"/><text x="28.7898%" y="143.50"></text></g><g><title>eval_to_allocation_raw (267,923 samples, 0.15%)</title><rect x="28.5414%" y="117" width="0.1508%" height="15" fill="rgb(206,96,30)"/><text x="28.7914%" y="127.50"></text></g><g><title>param_env (320,974 samples, 0.18%)</title><rect x="28.6922%" y="133" width="0.1807%" height="15" fill="rgb(218,138,4)"/><text x="28.9422%" y="143.50"></text></g><g><title>crate_lints (2,585,659 samples, 1.46%)</title><rect x="28.0576%" y="149" width="1.4554%" height="15" fill="rgb(250,191,14)"/><text x="28.3076%" y="159.50"></text></g><g><title>type_of (1,128,352 samples, 0.64%)</title><rect x="28.8779%" y="133" width="0.6351%" height="15" fill="rgb(239,60,40)"/><text x="29.1279%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (891,669 samples, 0.50%)</title><rect x="29.0111%" y="117" width="0.5019%" height="15" fill="rgb(206,27,48)"/><text x="29.2611%" y="127.50"></text></g><g><title>lint_checking (3,262,607 samples, 1.84%)</title><rect x="28.0568%" y="165" width="1.8364%" height="15" fill="rgb(225,35,8)"/><text x="28.3068%" y="175.50">l..</text></g><g><title>module_lints (675,488 samples, 0.38%)</title><rect x="29.5130%" y="149" width="0.3802%" height="15" fill="rgb(250,213,24)"/><text x="29.7630%" y="159.50"></text></g><g><title>lint_mod (669,568 samples, 0.38%)</title><rect x="29.5163%" y="133" width="0.3769%" height="15" fill="rgb(247,123,22)"/><text x="29.7663%" y="143.50"></text></g><g><title>privacy_access_levels (350,864 samples, 0.20%)</title><rect x="29.8932%" y="165" width="0.1975%" height="15" fill="rgb(231,138,38)"/><text x="30.1432%" y="175.50"></text></g><g><title>privacy_checking_modules (1,489,847 samples, 0.84%)</title><rect x="30.0907%" y="165" width="0.8386%" height="15" fill="rgb(231,145,46)"/><text x="30.3407%" y="175.50"></text></g><g><title>check_mod_privacy (1,485,617 samples, 0.84%)</title><rect x="30.0931%" y="149" width="0.8362%" height="15" fill="rgb(251,118,11)"/><text x="30.3431%" y="159.50"></text></g><g><title>misc_checking_3 (6,012,388 samples, 3.38%)</title><rect x="27.5576%" y="181" width="3.3841%" height="15" fill="rgb(217,147,25)"/><text x="27.8076%" y="191.50">mis..</text></g><g><title>impl_trait_ref (226,701 samples, 0.13%)</title><rect x="31.1167%" y="85" width="0.1276%" height="15" fill="rgb(247,81,37)"/><text x="31.3667%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (204,991 samples, 0.12%)</title><rect x="31.1289%" y="69" width="0.1154%" height="15" fill="rgb(209,12,38)"/><text x="31.3789%" y="79.50"></text></g><g><title>adt_destructor (419,775 samples, 0.24%)</title><rect x="31.0275%" y="133" width="0.2363%" height="15" fill="rgb(227,1,9)"/><text x="31.2775%" y="143.50"></text></g><g><title>coherent_trait (412,255 samples, 0.23%)</title><rect x="31.0317%" y="117" width="0.2320%" height="15" fill="rgb(248,47,43)"/><text x="31.2817%" y="127.50"></text></g><g><title>specialization_graph_of (410,475 samples, 0.23%)</title><rect x="31.0327%" y="101" width="0.2310%" height="15" fill="rgb(221,10,30)"/><text x="31.2827%" y="111.50"></text></g><g><title>impl_parent (2,009,123 samples, 1.13%)</title><rect x="33.2352%" y="117" width="1.1309%" height="15" fill="rgb(210,229,1)"/><text x="33.4852%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,236,960 samples, 0.70%)</title><rect x="33.6698%" y="101" width="0.6962%" height="15" fill="rgb(222,148,37)"/><text x="33.9198%" y="111.50"></text></g><g><title>impl_trait_ref (4,616,444 samples, 2.60%)</title><rect x="34.3660%" y="117" width="2.5984%" height="15" fill="rgb(234,67,33)"/><text x="34.6160%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,857,615 samples, 2.17%)</title><rect x="34.7932%" y="101" width="2.1713%" height="15" fill="rgb(247,98,35)"/><text x="35.0432%" y="111.50">m..</text></g><g><title>coherent_trait (11,267,246 samples, 6.34%)</title><rect x="31.0030%" y="149" width="6.3419%" height="15" fill="rgb(247,138,52)"/><text x="31.2530%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (10,728,850 samples, 6.04%)</title><rect x="31.3060%" y="133" width="6.0388%" height="15" fill="rgb(213,79,30)"/><text x="31.5560%" y="143.50">speciali..</text></g><g><title>trait_impls_of (675,857 samples, 0.38%)</title><rect x="36.9645%" y="117" width="0.3804%" height="15" fill="rgb(246,177,23)"/><text x="37.2145%" y="127.50"></text></g><g><title>implementations_of_trait (187,241 samples, 0.11%)</title><rect x="37.2395%" y="101" width="0.1054%" height="15" fill="rgb(230,62,27)"/><text x="37.4895%" y="111.50"></text></g><g><title>coherence_checking (11,347,657 samples, 6.39%)</title><rect x="30.9923%" y="165" width="6.3871%" height="15" fill="rgb(216,154,8)"/><text x="31.2423%" y="175.50">coherenc..</text></g><g><title>associated_item (341,814 samples, 0.19%)</title><rect x="53.1122%" y="101" width="0.1924%" height="15" fill="rgb(244,35,45)"/><text x="53.3622%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (270,763 samples, 0.15%)</title><rect x="53.1522%" y="85" width="0.1524%" height="15" fill="rgb(251,115,12)"/><text x="53.4022%" y="95.50"></text></g><g><title>associated_items (505,386 samples, 0.28%)</title><rect x="53.0374%" y="117" width="0.2845%" height="15" fill="rgb(240,54,50)"/><text x="53.2874%" y="127.50"></text></g><g><title>adt_dtorck_constraint (262,843 samples, 0.15%)</title><rect x="53.8079%" y="85" width="0.1479%" height="15" fill="rgb(233,84,52)"/><text x="54.0579%" y="95.50"></text></g><g><title>adt_dtorck_constraint (527,038 samples, 0.30%)</title><rect x="53.6941%" y="101" width="0.2966%" height="15" fill="rgb(207,117,47)"/><text x="53.9441%" y="111.50"></text></g><g><title>dropck_outlives (1,133,604 samples, 0.64%)</title><rect x="53.3684%" y="117" width="0.6381%" height="15" fill="rgb(249,43,39)"/><text x="53.6184%" y="127.50"></text></g><g><title>generics_of (279,553 samples, 0.16%)</title><rect x="55.1082%" y="101" width="0.1573%" height="15" fill="rgb(209,38,44)"/><text x="55.3582%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (223,023 samples, 0.13%)</title><rect x="55.1400%" y="85" width="0.1255%" height="15" fill="rgb(236,212,23)"/><text x="55.3900%" y="95.50"></text></g><g><title>impl_trait_ref (474,046 samples, 0.27%)</title><rect x="55.2984%" y="101" width="0.2668%" height="15" fill="rgb(242,79,21)"/><text x="55.5484%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (421,726 samples, 0.24%)</title><rect x="55.3278%" y="85" width="0.2374%" height="15" fill="rgb(211,96,35)"/><text x="55.5778%" y="95.50"></text></g><g><title>predicates_of (236,822 samples, 0.13%)</title><rect x="55.5860%" y="101" width="0.1333%" height="15" fill="rgb(253,215,40)"/><text x="55.8360%" y="111.50"></text></g><g><title>specializes (299,774 samples, 0.17%)</title><rect x="55.7193%" y="101" width="0.1687%" height="15" fill="rgb(211,81,21)"/><text x="55.9693%" y="111.50"></text></g><g><title>param_env (195,932 samples, 0.11%)</title><rect x="55.7777%" y="85" width="0.1103%" height="15" fill="rgb(208,190,38)"/><text x="56.0277%" y="95.50"></text></g><g><title>trait_impls_of (508,764 samples, 0.29%)</title><rect x="55.8954%" y="101" width="0.2864%" height="15" fill="rgb(235,213,38)"/><text x="56.1454%" y="111.50"></text></g><g><title>implementations_of_trait (203,013 samples, 0.11%)</title><rect x="56.0675%" y="85" width="0.1143%" height="15" fill="rgb(237,122,38)"/><text x="56.3175%" y="95.50"></text></g><g><title>evaluate_obligation (3,871,211 samples, 2.18%)</title><rect x="54.0101%" y="117" width="2.1789%" height="15" fill="rgb(244,218,35)"/><text x="54.2601%" y="127.50">e..</text></g><g><title>item_attrs (258,613 samples, 0.15%)</title><rect x="56.4858%" y="117" width="0.1456%" height="15" fill="rgb(240,68,47)"/><text x="56.7358%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (247,053 samples, 0.14%)</title><rect x="56.4923%" y="101" width="0.1391%" height="15" fill="rgb(210,16,53)"/><text x="56.7423%" y="111.50"></text></g><g><title>evaluate_obligation (350,347 samples, 0.20%)</title><rect x="56.8779%" y="101" width="0.1972%" height="15" fill="rgb(235,124,12)"/><text x="57.1279%" y="111.50"></text></g><g><title>method_autoderef_steps (722,924 samples, 0.41%)</title><rect x="56.6725%" y="117" width="0.4069%" height="15" fill="rgb(224,169,11)"/><text x="56.9225%" y="127.50"></text></g><g><title>predicates_of (483,086 samples, 0.27%)</title><rect x="57.1283%" y="117" width="0.2719%" height="15" fill="rgb(250,166,2)"/><text x="57.3783%" y="127.50"></text></g><g><title>predicates_defined_on (320,883 samples, 0.18%)</title><rect x="57.2196%" y="101" width="0.1806%" height="15" fill="rgb(242,216,29)"/><text x="57.4696%" y="111.50"></text></g><g><title>associated_item (203,722 samples, 0.11%)</title><rect x="62.2046%" y="85" width="0.1147%" height="15" fill="rgb(230,116,27)"/><text x="62.4546%" y="95.50"></text></g><g><title>associated_items (314,832 samples, 0.18%)</title><rect x="62.1544%" y="101" width="0.1772%" height="15" fill="rgb(228,99,48)"/><text x="62.4044%" y="111.50"></text></g><g><title>dropck_outlives (331,957 samples, 0.19%)</title><rect x="62.3594%" y="101" width="0.1868%" height="15" fill="rgb(253,11,6)"/><text x="62.6094%" y="111.50"></text></g><g><title>evaluate_obligation (1,484,233 samples, 0.84%)</title><rect x="62.5463%" y="101" width="0.8354%" height="15" fill="rgb(247,143,39)"/><text x="62.7963%" y="111.50"></text></g><g><title>trait_impls_of (296,714 samples, 0.17%)</title><rect x="63.2147%" y="85" width="0.1670%" height="15" fill="rgb(236,97,10)"/><text x="63.4647%" y="95.50"></text></g><g><title>is_copy_raw (298,734 samples, 0.17%)</title><rect x="63.5541%" y="101" width="0.1681%" height="15" fill="rgb(233,208,19)"/><text x="63.8041%" y="111.50"></text></g><g><title>evaluate_obligation (235,464 samples, 0.13%)</title><rect x="63.5897%" y="85" width="0.1325%" height="15" fill="rgb(216,164,2)"/><text x="63.8397%" y="95.50"></text></g><g><title>method_autoderef_steps (349,512 samples, 0.20%)</title><rect x="63.7864%" y="101" width="0.1967%" height="15" fill="rgb(220,129,5)"/><text x="64.0364%" y="111.50"></text></g><g><title>evaluate_obligation (179,652 samples, 0.10%)</title><rect x="63.8820%" y="85" width="0.1011%" height="15" fill="rgb(242,17,10)"/><text x="64.1320%" y="95.50"></text></g><g><title>predicates_of (432,634 samples, 0.24%)</title><rect x="63.9927%" y="101" width="0.2435%" height="15" fill="rgb(242,107,0)"/><text x="64.2427%" y="111.50"></text></g><g><title>typeck (12,022,274 samples, 6.77%)</title><rect x="57.5425%" y="117" width="6.7668%" height="15" fill="rgb(251,28,31)"/><text x="57.7925%" y="127.50">typeck</text></g><g><title>item_bodies_checking (47,864,464 samples, 26.94%)</title><rect x="37.4023%" y="165" width="26.9409%" height="15" fill="rgb(233,223,10)"/><text x="37.6523%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,860,994 samples, 26.94%)</title><rect x="37.4043%" y="149" width="26.9390%" height="15" fill="rgb(215,21,27)"/><text x="37.6543%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (47,744,122 samples, 26.87%)</title><rect x="37.4701%" y="133" width="26.8732%" height="15" fill="rgb(232,23,21)"/><text x="37.7201%" y="143.50">typeck</text></g><g><title>item_attrs (402,434 samples, 0.23%)</title><rect x="65.1249%" y="117" width="0.2265%" height="15" fill="rgb(244,5,23)"/><text x="65.3749%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (401,934 samples, 0.23%)</title><rect x="65.1252%" y="101" width="0.2262%" height="15" fill="rgb(226,81,46)"/><text x="65.3752%" y="111.50"></text></g><g><title>item_types_checking (1,834,551 samples, 1.03%)</title><rect x="64.3433%" y="165" width="1.0326%" height="15" fill="rgb(247,70,30)"/><text x="64.5933%" y="175.50"></text></g><g><title>check_mod_item_types (1,829,181 samples, 1.03%)</title><rect x="64.3463%" y="149" width="1.0296%" height="15" fill="rgb(212,68,19)"/><text x="64.5963%" y="159.50"></text></g><g><title>typeck (688,688 samples, 0.39%)</title><rect x="64.9882%" y="133" width="0.3876%" height="15" fill="rgb(240,187,13)"/><text x="65.2382%" y="143.50"></text></g><g><title>fn_sig (436,696 samples, 0.25%)</title><rect x="65.5901%" y="133" width="0.2458%" height="15" fill="rgb(223,113,26)"/><text x="65.8401%" y="143.50"></text></g><g><title>named_region_map (279,772 samples, 0.16%)</title><rect x="65.9316%" y="117" width="0.1575%" height="15" fill="rgb(206,192,2)"/><text x="66.1816%" y="127.50"></text></g><g><title>resolve_lifetimes (252,252 samples, 0.14%)</title><rect x="65.9471%" y="101" width="0.1420%" height="15" fill="rgb(241,108,4)"/><text x="66.1971%" y="111.50"></text></g><g><title>generics_of (473,395 samples, 0.27%)</title><rect x="65.8359%" y="133" width="0.2665%" height="15" fill="rgb(247,173,49)"/><text x="66.0859%" y="143.50"></text></g><g><title>late_bound_vars_map (215,113 samples, 0.12%)</title><rect x="66.3851%" y="85" width="0.1211%" height="15" fill="rgb(224,114,35)"/><text x="66.6351%" y="95.50"></text></g><g><title>resolve_lifetimes (205,423 samples, 0.12%)</title><rect x="66.3906%" y="69" width="0.1156%" height="15" fill="rgb(245,159,27)"/><text x="66.6406%" y="79.50"></text></g><g><title>explicit_predicates_of (444,935 samples, 0.25%)</title><rect x="66.2752%" y="101" width="0.2504%" height="15" fill="rgb(245,172,44)"/><text x="66.5252%" y="111.50"></text></g><g><title>predicates_of (1,531,398 samples, 0.86%)</title><rect x="66.1535%" y="133" width="0.8620%" height="15" fill="rgb(236,23,11)"/><text x="66.4035%" y="143.50"></text></g><g><title>predicates_defined_on (1,446,647 samples, 0.81%)</title><rect x="66.2012%" y="117" width="0.8143%" height="15" fill="rgb(205,117,38)"/><text x="66.4512%" y="127.50"></text></g><g><title>inferred_outlives_of (870,270 samples, 0.49%)</title><rect x="66.5257%" y="101" width="0.4898%" height="15" fill="rgb(237,72,25)"/><text x="66.7757%" y="111.50"></text></g><g><title>inferred_outlives_crate (838,800 samples, 0.47%)</title><rect x="66.5434%" y="85" width="0.4721%" height="15" fill="rgb(244,70,9)"/><text x="66.7934%" y="95.50"></text></g><g><title>type_of (570,016 samples, 0.32%)</title><rect x="66.6947%" y="69" width="0.3208%" height="15" fill="rgb(217,125,39)"/><text x="66.9447%" y="79.50"></text></g><g><title>type_collecting (3,154,485 samples, 1.78%)</title><rect x="65.3781%" y="165" width="1.7755%" height="15" fill="rgb(235,36,10)"/><text x="65.6281%" y="175.50">t..</text></g><g><title>collect_mod_item_types (3,145,155 samples, 1.77%)</title><rect x="65.3833%" y="149" width="1.7703%" height="15" fill="rgb(251,123,47)"/><text x="65.6333%" y="159.50">c..</text></g><g><title>evaluate_obligation (475,126 samples, 0.27%)</title><rect x="68.9040%" y="133" width="0.2674%" height="15" fill="rgb(221,13,13)"/><text x="69.1540%" y="143.50"></text></g><g><title>implied_outlives_bounds (429,252 samples, 0.24%)</title><rect x="69.1714%" y="133" width="0.2416%" height="15" fill="rgb(238,131,9)"/><text x="69.4214%" y="143.50"></text></g><g><title>param_env (484,294 samples, 0.27%)</title><rect x="69.4130%" y="133" width="0.2726%" height="15" fill="rgb(211,50,8)"/><text x="69.6630%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,681,085 samples, 2.63%)</title><rect x="67.3191%" y="149" width="2.6348%" height="15" fill="rgb(245,182,24)"/><text x="67.5691%" y="159.50">ch..</text></g><g><title>region_scope_tree (466,037 samples, 0.26%)</title><rect x="69.6916%" y="133" width="0.2623%" height="15" fill="rgb(242,14,37)"/><text x="69.9416%" y="143.50"></text></g><g><title>adt_def (214,790 samples, 0.12%)</title><rect x="71.4652%" y="101" width="0.1209%" height="15" fill="rgb(246,228,12)"/><text x="71.7152%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (207,640 samples, 0.12%)</title><rect x="71.4693%" y="85" width="0.1169%" height="15" fill="rgb(213,55,15)"/><text x="71.7193%" y="95.50"></text></g><g><title>adt_sized_constraint (181,952 samples, 0.10%)</title><rect x="71.6670%" y="85" width="0.1024%" height="15" fill="rgb(209,9,3)"/><text x="71.9170%" y="95.50"></text></g><g><title>adt_sized_constraint (335,124 samples, 0.19%)</title><rect x="71.5861%" y="101" width="0.1886%" height="15" fill="rgb(230,59,30)"/><text x="71.8361%" y="111.50"></text></g><g><title>adt_sized_constraint (584,914 samples, 0.33%)</title><rect x="71.4532%" y="117" width="0.3292%" height="15" fill="rgb(209,121,21)"/><text x="71.7032%" y="127.50"></text></g><g><title>evaluate_obligation (1,064,640 samples, 0.60%)</title><rect x="71.2140%" y="133" width="0.5992%" height="15" fill="rgb(220,109,13)"/><text x="71.4640%" y="143.50"></text></g><g><title>evaluate_obligation (192,603 samples, 0.11%)</title><rect x="72.0332%" y="117" width="0.1084%" height="15" fill="rgb(232,18,1)"/><text x="72.2832%" y="127.50"></text></g><g><title>object_safety_violations (634,378 samples, 0.36%)</title><rect x="71.9181%" y="133" width="0.3571%" height="15" fill="rgb(215,41,42)"/><text x="72.1681%" y="143.50"></text></g><g><title>param_env (424,709 samples, 0.24%)</title><rect x="72.2752%" y="133" width="0.2391%" height="15" fill="rgb(224,123,36)"/><text x="72.5252%" y="143.50"></text></g><g><title>check_item_well_formed (4,920,513 samples, 2.77%)</title><rect x="69.9539%" y="149" width="2.7696%" height="15" fill="rgb(240,125,3)"/><text x="70.2039%" y="159.50">ch..</text></g><g><title>analysis (129,388,647 samples, 72.83%)</title><rect x="0.3653%" y="197" width="72.8275%" height="15" fill="rgb(205,98,50)"/><text x="0.6153%" y="207.50">analysis</text></g><g><title>type_check_crate (75,065,299 samples, 42.25%)</title><rect x="30.9417%" y="181" width="42.2512%" height="15" fill="rgb(205,185,37)"/><text x="31.1917%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,721,940 samples, 6.03%)</title><rect x="67.1579%" y="165" width="6.0349%" height="15" fill="rgb(238,207,15)"/><text x="67.4079%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (834,050 samples, 0.47%)</title><rect x="72.7234%" y="149" width="0.4695%" height="15" fill="rgb(213,199,42)"/><text x="72.9734%" y="159.50"></text></g><g><title>codegen_crate (401,695 samples, 0.23%)</title><rect x="73.1986%" y="197" width="0.2261%" height="15" fill="rgb(235,201,11)"/><text x="73.4486%" y="207.50"></text></g><g><title>AST_validation (250,472 samples, 0.14%)</title><rect x="73.5359%" y="181" width="0.1410%" height="15" fill="rgb(207,46,11)"/><text x="73.7859%" y="191.50"></text></g><g><title>metadata_load_macro (528,124 samples, 0.30%)</title><rect x="85.0354%" y="149" width="0.2973%" height="15" fill="rgb(241,35,35)"/><text x="85.2854%" y="159.50"></text></g><g><title>metadata_register_crate (2,946,374 samples, 1.66%)</title><rect x="85.3327%" y="149" width="1.6584%" height="15" fill="rgb(243,32,47)"/><text x="85.5827%" y="159.50"></text></g><g><title>metadata_register_crate (1,106,784 samples, 0.62%)</title><rect x="86.3681%" y="133" width="0.6230%" height="15" fill="rgb(247,202,23)"/><text x="86.6181%" y="143.50"></text></g><g><title>macro_expand_crate (23,627,625 samples, 13.30%)</title><rect x="73.7970%" y="181" width="13.2990%" height="15" fill="rgb(219,102,11)"/><text x="74.0470%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (23,605,664 samples, 13.29%)</title><rect x="73.8093%" y="165" width="13.2867%" height="15" fill="rgb(243,110,44)"/><text x="74.0593%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (186,443 samples, 0.10%)</title><rect x="86.9911%" y="149" width="0.1049%" height="15" fill="rgb(222,74,54)"/><text x="87.2411%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (299,784 samples, 0.17%)</title><rect x="87.0987%" y="181" width="0.1687%" height="15" fill="rgb(216,99,12)"/><text x="87.3487%" y="191.50"></text></g><g><title>finalize_macro_resolutions (193,692 samples, 0.11%)</title><rect x="87.3605%" y="165" width="0.1090%" height="15" fill="rgb(226,22,26)"/><text x="87.6105%" y="175.50"></text></g><g><title>late_resolve_crate (4,152,236 samples, 2.34%)</title><rect x="87.4695%" y="165" width="2.3371%" height="15" fill="rgb(217,163,10)"/><text x="87.7195%" y="175.50">l..</text></g><g><title>configure_and_expand (29,352,808 samples, 16.52%)</title><rect x="73.4247%" y="197" width="16.5215%" height="15" fill="rgb(213,25,53)"/><text x="73.6747%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,759,044 samples, 2.68%)</title><rect x="87.2675%" y="181" width="2.6787%" height="15" fill="rgb(252,105,26)"/><text x="87.5175%" y="191.50">re..</text></g><g><title>drop_ast (215,582 samples, 0.12%)</title><rect x="89.9461%" y="197" width="0.1213%" height="15" fill="rgb(220,39,43)"/><text x="90.1961%" y="207.50"></text></g><g><title>early_lint_checks (436,425 samples, 0.25%)</title><rect x="90.0779%" y="197" width="0.2456%" height="15" fill="rgb(229,68,48)"/><text x="90.3279%" y="207.50"></text></g><g><title>free_global_ctxt (4,346,649 samples, 2.45%)</title><rect x="90.3235%" y="197" width="2.4465%" height="15" fill="rgb(252,8,32)"/><text x="90.5735%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,355,075 samples, 0.76%)</title><rect x="92.7701%" y="197" width="0.7627%" height="15" fill="rgb(223,20,43)"/><text x="93.0201%" y="207.50"></text></g><g><title>hir_lowering (4,840,044 samples, 2.72%)</title><rect x="93.5328%" y="197" width="2.7243%" height="15" fill="rgb(229,81,49)"/><text x="93.7828%" y="207.50">hi..</text></g><g><title>parse_crate (4,844,154 samples, 2.73%)</title><rect x="96.2915%" y="197" width="2.7266%" height="15" fill="rgb(236,28,36)"/><text x="96.5415%" y="207.50">pa..</text></g><g><title>prepare_outputs (269,153 samples, 0.15%)</title><rect x="99.0229%" y="197" width="0.1515%" height="15" fill="rgb(249,185,26)"/><text x="99.2729%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (987,191 samples, 0.56%)</title><rect x="99.1744%" y="197" width="0.5556%" height="15" fill="rgb(249,174,33)"/><text x="99.4244%" y="207.50"></text></g><g><title>all (177,664,427 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (177,664,427 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (394,034 samples, 0.22%)</title><rect x="99.7782%" y="197" width="0.2218%" height="15" fill="rgb(250,127,30)"/><text x="100.0282%" y="207.50"></text></g></svg></svg>