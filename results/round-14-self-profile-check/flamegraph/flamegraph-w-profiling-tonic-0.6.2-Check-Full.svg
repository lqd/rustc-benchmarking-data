<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (2,650,505 samples, 0.16%)</title><rect x="9.8199%" y="261" width="0.1569%" height="15" fill="rgb(227,0,7)"/><text x="10.0699%" y="271.50"></text></g><g><title>param_env (2,290,633 samples, 0.14%)</title><rect x="11.1091%" y="229" width="0.1356%" height="15" fill="rgb(217,0,24)"/><text x="11.3591%" y="239.50"></text></g><g><title>codegen_fn_attrs (2,079,992 samples, 0.12%)</title><rect x="11.5636%" y="213" width="0.1231%" height="15" fill="rgb(221,193,54)"/><text x="11.8136%" y="223.50"></text></g><g><title>is_copy_raw (10,790,200 samples, 0.64%)</title><rect x="13.7908%" y="181" width="0.6386%" height="15" fill="rgb(248,212,6)"/><text x="14.0408%" y="191.50"></text></g><g><title>evaluate_obligation (8,389,851 samples, 0.50%)</title><rect x="13.9329%" y="165" width="0.4965%" height="15" fill="rgb(208,68,35)"/><text x="14.1829%" y="175.50"></text></g><g><title>needs_drop_raw (14,161,039 samples, 0.84%)</title><rect x="13.5943%" y="197" width="0.8380%" height="15" fill="rgb(232,128,0)"/><text x="13.8443%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (5,433,947 samples, 0.32%)</title><rect x="14.5898%" y="181" width="0.3216%" height="15" fill="rgb(207,160,47)"/><text x="14.8398%" y="191.50"></text></g><g><title>resolve_instance (11,131,677 samples, 0.66%)</title><rect x="14.4324%" y="197" width="0.6588%" height="15" fill="rgb(228,23,34)"/><text x="14.6824%" y="207.50"></text></g><g><title>thir_body (13,467,336 samples, 0.80%)</title><rect x="15.1112%" y="197" width="0.7970%" height="15" fill="rgb(218,30,26)"/><text x="15.3612%" y="207.50"></text></g><g><title>mir_const (90,266,619 samples, 5.34%)</title><rect x="10.6093%" y="245" width="5.3419%" height="15" fill="rgb(220,122,19)"/><text x="10.8593%" y="255.50">mir_con..</text></g><g><title>unsafety_check_result (79,530,069 samples, 4.71%)</title><rect x="11.2446%" y="229" width="4.7065%" height="15" fill="rgb(250,228,42)"/><text x="11.4946%" y="239.50">unsaf..</text></g><g><title>mir_built (72,060,876 samples, 4.26%)</title><rect x="11.6867%" y="213" width="4.2645%" height="15" fill="rgb(240,193,28)"/><text x="11.9367%" y="223.50">mir_b..</text></g><g><title>mir_const (2,947,315 samples, 0.17%)</title><rect x="16.0973%" y="229" width="0.1744%" height="15" fill="rgb(216,20,37)"/><text x="16.3473%" y="239.50"></text></g><g><title>unsafety_check_result (2,438,797 samples, 0.14%)</title><rect x="16.1274%" y="213" width="0.1443%" height="15" fill="rgb(206,188,39)"/><text x="16.3774%" y="223.50"></text></g><g><title>mir_built (2,122,193 samples, 0.13%)</title><rect x="16.1461%" y="197" width="0.1256%" height="15" fill="rgb(217,207,13)"/><text x="16.3961%" y="207.50"></text></g><g><title>mir_const_qualif (5,495,597 samples, 0.33%)</title><rect x="15.9511%" y="245" width="0.3252%" height="15" fill="rgb(231,73,38)"/><text x="16.2011%" y="255.50"></text></g><g><title>mir_promoted (104,815,435 samples, 6.20%)</title><rect x="10.0738%" y="261" width="6.2029%" height="15" fill="rgb(225,20,46)"/><text x="10.3238%" y="271.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (13,986,958 samples, 0.83%)</title><rect x="16.2767%" y="261" width="0.8277%" height="15" fill="rgb(210,31,41)"/><text x="16.5267%" y="271.50"></text></g><g><title>type_op_normalize_fn_sig (5,684,621 samples, 0.34%)</title><rect x="17.1045%" y="261" width="0.3364%" height="15" fill="rgb(221,200,47)"/><text x="17.3545%" y="271.50"></text></g><g><title>normalize_projection_ty (3,946,054 samples, 0.23%)</title><rect x="17.2073%" y="245" width="0.2335%" height="15" fill="rgb(226,26,5)"/><text x="17.4573%" y="255.50"></text></g><g><title>type_op_normalize_predicate (1,848,660 samples, 0.11%)</title><rect x="17.4413%" y="261" width="0.1094%" height="15" fill="rgb(249,33,26)"/><text x="17.6913%" y="271.50"></text></g><g><title>type_op_normalize_ty (3,987,056 samples, 0.24%)</title><rect x="17.5507%" y="261" width="0.2360%" height="15" fill="rgb(235,183,28)"/><text x="17.8007%" y="271.50"></text></g><g><title>normalize_projection_ty (2,701,953 samples, 0.16%)</title><rect x="17.6268%" y="245" width="0.1599%" height="15" fill="rgb(221,5,38)"/><text x="17.8768%" y="255.50"></text></g><g><title>type_op_prove_predicate (34,342,037 samples, 2.03%)</title><rect x="17.7867%" y="261" width="2.0323%" height="15" fill="rgb(247,18,42)"/><text x="18.0367%" y="271.50">t..</text></g><g><title>MIR_borrow_checking (330,504,272 samples, 19.56%)</title><rect x="0.2616%" y="293" width="19.5589%" height="15" fill="rgb(241,131,45)"/><text x="0.5116%" y="303.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (328,738,977 samples, 19.45%)</title><rect x="0.3660%" y="277" width="19.4544%" height="15" fill="rgb(249,31,29)"/><text x="0.6160%" y="287.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,360,766 samples, 0.14%)</title><rect x="19.8205%" y="293" width="0.1397%" height="15" fill="rgb(225,111,53)"/><text x="20.0705%" y="303.50"></text></g><g><title>hir_module_items (2,548,391 samples, 0.15%)</title><rect x="19.9602%" y="293" width="0.1508%" height="15" fill="rgb(238,160,17)"/><text x="20.2102%" y="303.50"></text></g><g><title>codegen_fn_attrs (2,518,053 samples, 0.15%)</title><rect x="20.2918%" y="261" width="0.1490%" height="15" fill="rgb(214,148,48)"/><text x="20.5418%" y="271.50"></text></g><g><title>check_mod_attrs (5,208,781 samples, 0.31%)</title><rect x="20.1325%" y="277" width="0.3083%" height="15" fill="rgb(232,36,49)"/><text x="20.3825%" y="287.50"></text></g><g><title>lint_levels (2,616,299 samples, 0.15%)</title><rect x="20.7033%" y="261" width="0.1548%" height="15" fill="rgb(209,103,24)"/><text x="20.9533%" y="271.50"></text></g><g><title>lookup_deprecation_entry (1,912,751 samples, 0.11%)</title><rect x="20.8581%" y="261" width="0.1132%" height="15" fill="rgb(229,88,8)"/><text x="21.1081%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (6,405,605 samples, 0.38%)</title><rect x="20.6057%" y="277" width="0.3791%" height="15" fill="rgb(213,181,19)"/><text x="20.8557%" y="287.50"></text></g><g><title>misc_checking_1 (15,320,801 samples, 0.91%)</title><rect x="20.1110%" y="293" width="0.9067%" height="15" fill="rgb(254,191,54)"/><text x="20.3610%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (8,300,263 samples, 0.49%)</title><rect x="21.0179%" y="277" width="0.4912%" height="15" fill="rgb(241,83,37)"/><text x="21.2679%" y="287.50"></text></g><g><title>check_mod_liveness (7,142,060 samples, 0.42%)</title><rect x="21.0864%" y="261" width="0.4227%" height="15" fill="rgb(233,36,39)"/><text x="21.3364%" y="271.50"></text></g><g><title>type_uninhabited_from (2,575,895 samples, 0.15%)</title><rect x="21.3567%" y="245" width="0.1524%" height="15" fill="rgb(226,3,54)"/><text x="21.6067%" y="255.50"></text></g><g><title>type_uninhabited_from (2,003,238 samples, 0.12%)</title><rect x="21.3906%" y="229" width="0.1185%" height="15" fill="rgb(245,192,40)"/><text x="21.6406%" y="239.50"></text></g><g><title>misc_checking_2 (18,173,422 samples, 1.08%)</title><rect x="21.0177%" y="293" width="1.0755%" height="15" fill="rgb(238,167,29)"/><text x="21.2677%" y="303.50"></text></g><g><title>match_checking (9,869,869 samples, 0.58%)</title><rect x="21.5091%" y="277" width="0.5841%" height="15" fill="rgb(232,182,51)"/><text x="21.7591%" y="287.50"></text></g><g><title>check_match (9,333,496 samples, 0.55%)</title><rect x="21.5409%" y="261" width="0.5523%" height="15" fill="rgb(231,60,39)"/><text x="21.7909%" y="271.50"></text></g><g><title>check_private_in_public (4,245,388 samples, 0.25%)</title><rect x="22.0944%" y="277" width="0.2512%" height="15" fill="rgb(208,69,12)"/><text x="22.3444%" y="287.50"></text></g><g><title>death_checking (7,816,036 samples, 0.46%)</title><rect x="22.3457%" y="277" width="0.4625%" height="15" fill="rgb(235,93,37)"/><text x="22.5957%" y="287.50"></text></g><g><title>eval_to_allocation_raw (4,805,283 samples, 0.28%)</title><rect x="23.3810%" y="245" width="0.2844%" height="15" fill="rgb(213,116,39)"/><text x="23.6310%" y="255.50"></text></g><g><title>eval_to_allocation_raw (4,759,043 samples, 0.28%)</title><rect x="23.3837%" y="229" width="0.2816%" height="15" fill="rgb(222,207,29)"/><text x="23.6337%" y="239.50"></text></g><g><title>param_env (6,173,747 samples, 0.37%)</title><rect x="23.7223%" y="245" width="0.3654%" height="15" fill="rgb(206,96,30)"/><text x="23.9723%" y="255.50"></text></g><g><title>predicates_of (2,635,995 samples, 0.16%)</title><rect x="23.9316%" y="229" width="0.1560%" height="15" fill="rgb(218,138,4)"/><text x="24.1816%" y="239.50"></text></g><g><title>predicates_defined_on (2,115,266 samples, 0.13%)</title><rect x="23.9624%" y="213" width="0.1252%" height="15" fill="rgb(250,191,14)"/><text x="24.2124%" y="223.50"></text></g><g><title>crate_lints (24,600,934 samples, 1.46%)</title><rect x="22.8084%" y="261" width="1.4559%" height="15" fill="rgb(239,60,40)"/><text x="23.0584%" y="271.50"></text></g><g><title>type_of (2,542,975 samples, 0.15%)</title><rect x="24.1138%" y="245" width="0.1505%" height="15" fill="rgb(206,27,48)"/><text x="24.3638%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (2,047,901 samples, 0.12%)</title><rect x="24.1431%" y="229" width="0.1212%" height="15" fill="rgb(225,35,8)"/><text x="24.3931%" y="239.50"></text></g><g><title>lint_checking (34,213,351 samples, 2.02%)</title><rect x="22.8082%" y="277" width="2.0247%" height="15" fill="rgb(250,213,24)"/><text x="23.0582%" y="287.50">l..</text></g><g><title>module_lints (9,608,827 samples, 0.57%)</title><rect x="24.2643%" y="261" width="0.5686%" height="15" fill="rgb(247,123,22)"/><text x="24.5143%" y="271.50"></text></g><g><title>lint_mod (9,559,846 samples, 0.57%)</title><rect x="24.2672%" y="245" width="0.5657%" height="15" fill="rgb(231,138,38)"/><text x="24.5172%" y="255.50"></text></g><g><title>privacy_access_levels (9,553,016 samples, 0.57%)</title><rect x="24.8329%" y="277" width="0.5653%" height="15" fill="rgb(231,145,46)"/><text x="25.0829%" y="287.50"></text></g><g><title>privacy_checking_modules (18,969,110 samples, 1.12%)</title><rect x="25.3982%" y="277" width="1.1226%" height="15" fill="rgb(251,118,11)"/><text x="25.6482%" y="287.50"></text></g><g><title>check_mod_privacy (18,922,509 samples, 1.12%)</title><rect x="25.4010%" y="261" width="1.1198%" height="15" fill="rgb(217,147,25)"/><text x="25.6510%" y="271.50"></text></g><g><title>misc_checking_3 (75,049,804 samples, 4.44%)</title><rect x="22.0932%" y="293" width="4.4414%" height="15" fill="rgb(247,81,37)"/><text x="22.3432%" y="303.50">misc_..</text></g><g><title>impl_parent (6,336,117 samples, 0.37%)</title><rect x="27.4307%" y="229" width="0.3750%" height="15" fill="rgb(209,12,38)"/><text x="27.6807%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_parent (3,937,218 samples, 0.23%)</title><rect x="27.5727%" y="213" width="0.2330%" height="15" fill="rgb(227,1,9)"/><text x="27.8227%" y="223.50"></text></g><g><title>impl_trait_ref (12,284,073 samples, 0.73%)</title><rect x="27.8058%" y="229" width="0.7270%" height="15" fill="rgb(248,47,43)"/><text x="28.0558%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (9,935,392 samples, 0.59%)</title><rect x="27.9448%" y="213" width="0.5880%" height="15" fill="rgb(221,10,30)"/><text x="28.1948%" y="223.50"></text></g><g><title>trait_impls_of (3,475,578 samples, 0.21%)</title><rect x="28.5758%" y="229" width="0.2057%" height="15" fill="rgb(210,229,1)"/><text x="28.8258%" y="239.50"></text></g><g><title>coherent_trait (36,481,515 samples, 2.16%)</title><rect x="26.6255%" y="261" width="2.1589%" height="15" fill="rgb(222,148,37)"/><text x="26.8755%" y="271.50">c..</text></g><g><title>specialization_graph_of (35,456,065 samples, 2.10%)</title><rect x="26.6861%" y="245" width="2.0983%" height="15" fill="rgb(234,67,33)"/><text x="26.9361%" y="255.50">s..</text></g><g><title>coherence_checking (37,142,302 samples, 2.20%)</title><rect x="26.6216%" y="277" width="2.1980%" height="15" fill="rgb(247,98,35)"/><text x="26.8716%" y="287.50">c..</text></g><g><title>adt_dtorck_constraint (1,984,102 samples, 0.12%)</title><rect x="43.3326%" y="213" width="0.1174%" height="15" fill="rgb(247,138,52)"/><text x="43.5826%" y="223.50"></text></g><g><title>dropck_outlives (7,891,462 samples, 0.47%)</title><rect x="43.0699%" y="229" width="0.4670%" height="15" fill="rgb(213,79,30)"/><text x="43.3199%" y="239.50"></text></g><g><title>evaluate_obligation (18,508,665 samples, 1.10%)</title><rect x="43.5370%" y="229" width="1.0953%" height="15" fill="rgb(246,177,23)"/><text x="43.7870%" y="239.50"></text></g><g><title>evaluate_obligation (2,356,207 samples, 0.14%)</title><rect x="44.9814%" y="213" width="0.1394%" height="15" fill="rgb(230,62,27)"/><text x="45.2314%" y="223.50"></text></g><g><title>method_autoderef_steps (5,794,908 samples, 0.34%)</title><rect x="44.7790%" y="229" width="0.3429%" height="15" fill="rgb(216,154,8)"/><text x="45.0290%" y="239.50"></text></g><g><title>dropck_outlives (4,972,264 samples, 0.29%)</title><rect x="50.9044%" y="213" width="0.2943%" height="15" fill="rgb(244,35,45)"/><text x="51.1544%" y="223.50"></text></g><g><title>normalize_projection_ty (2,491,986 samples, 0.15%)</title><rect x="51.0512%" y="197" width="0.1475%" height="15" fill="rgb(251,115,12)"/><text x="51.3012%" y="207.50"></text></g><g><title>evaluate_obligation (11,247,648 samples, 0.67%)</title><rect x="51.1986%" y="213" width="0.6656%" height="15" fill="rgb(240,54,50)"/><text x="51.4486%" y="223.50"></text></g><g><title>method_autoderef_steps (2,948,938 samples, 0.17%)</title><rect x="52.1030%" y="213" width="0.1745%" height="15" fill="rgb(233,84,52)"/><text x="52.3530%" y="223.50"></text></g><g><title>typeck (119,006,074 samples, 7.04%)</title><rect x="45.3183%" y="229" width="7.0427%" height="15" fill="rgb(207,117,47)"/><text x="45.5683%" y="239.50">typeck</text></g><g><title>item_bodies_checking (397,552,507 samples, 23.53%)</title><rect x="28.8523%" y="277" width="23.5268%" height="15" fill="rgb(249,43,39)"/><text x="29.1023%" y="287.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (397,548,707 samples, 23.53%)</title><rect x="28.8525%" y="261" width="23.5265%" height="15" fill="rgb(209,38,44)"/><text x="29.1025%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (396,026,983 samples, 23.44%)</title><rect x="28.9426%" y="245" width="23.4365%" height="15" fill="rgb(236,212,23)"/><text x="29.1926%" y="255.50">typeck</text></g><g><title>mir_borrowck (5,491,590 samples, 0.32%)</title><rect x="56.2427%" y="197" width="0.3250%" height="15" fill="rgb(242,79,21)"/><text x="56.4927%" y="207.50"></text></g><g><title>mir_const (1,689,998 samples, 0.10%)</title><rect x="56.6299%" y="181" width="0.1000%" height="15" fill="rgb(211,96,35)"/><text x="56.8799%" y="191.50"></text></g><g><title>mir_promoted (2,768,453 samples, 0.16%)</title><rect x="56.5677%" y="197" width="0.1638%" height="15" fill="rgb(253,215,40)"/><text x="56.8177%" y="207.50"></text></g><g><title>type_op_ascribe_user_type (4,092,815 samples, 0.24%)</title><rect x="56.7315%" y="197" width="0.2422%" height="15" fill="rgb(211,81,21)"/><text x="56.9815%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (13,807,144 samples, 0.82%)</title><rect x="56.9737%" y="197" width="0.8171%" height="15" fill="rgb(208,190,38)"/><text x="57.2237%" y="207.50"></text></g><g><title>normalize_projection_ty (11,673,293 samples, 0.69%)</title><rect x="57.1000%" y="181" width="0.6908%" height="15" fill="rgb(235,213,38)"/><text x="57.3500%" y="191.50"></text></g><g><title>type_op_normalize_predicate (3,554,545 samples, 0.21%)</title><rect x="57.7908%" y="197" width="0.2104%" height="15" fill="rgb(237,122,38)"/><text x="58.0408%" y="207.50"></text></g><g><title>normalize_projection_ty (1,818,468 samples, 0.11%)</title><rect x="57.8936%" y="181" width="0.1076%" height="15" fill="rgb(244,218,35)"/><text x="58.1436%" y="191.50"></text></g><g><title>type_op_prove_predicate (24,439,273 samples, 1.45%)</title><rect x="58.0366%" y="197" width="1.4463%" height="15" fill="rgb(240,68,47)"/><text x="58.2866%" y="207.50"></text></g><g><title>mir_borrowck (80,650,589 samples, 4.77%)</title><rect x="54.7115%" y="213" width="4.7728%" height="15" fill="rgb(210,16,53)"/><text x="54.9615%" y="223.50">mir_bo..</text></g><g><title>adt_dtorck_constraint (2,641,157 samples, 0.16%)</title><rect x="65.6866%" y="117" width="0.1563%" height="15" fill="rgb(235,124,12)"/><text x="65.9366%" y="127.50"></text></g><g><title>dropck_outlives (7,496,780 samples, 0.44%)</title><rect x="65.4950%" y="133" width="0.4437%" height="15" fill="rgb(224,169,11)"/><text x="65.7450%" y="143.50"></text></g><g><title>evaluate_obligation (18,321,158 samples, 1.08%)</title><rect x="65.9481%" y="133" width="1.0842%" height="15" fill="rgb(250,166,2)"/><text x="66.1981%" y="143.50"></text></g><g><title>is_copy_raw (3,940,245 samples, 0.23%)</title><rect x="67.1488%" y="133" width="0.2332%" height="15" fill="rgb(242,216,29)"/><text x="67.3988%" y="143.50"></text></g><g><title>evaluate_obligation (2,650,197 samples, 0.16%)</title><rect x="67.2251%" y="117" width="0.1568%" height="15" fill="rgb(230,116,27)"/><text x="67.4751%" y="127.50"></text></g><g><title>method_autoderef_steps (1,733,414 samples, 0.10%)</title><rect x="67.4612%" y="133" width="0.1026%" height="15" fill="rgb(228,99,48)"/><text x="67.7112%" y="143.50"></text></g><g><title>mir_borrowck (4,548,191 samples, 0.27%)</title><rect x="67.7618%" y="101" width="0.2692%" height="15" fill="rgb(253,11,6)"/><text x="68.0118%" y="111.50"></text></g><g><title>mir_built (11,414,967 samples, 0.68%)</title><rect x="68.0406%" y="53" width="0.6755%" height="15" fill="rgb(247,143,39)"/><text x="68.2906%" y="63.50"></text></g><g><title>typeck (10,975,802 samples, 0.65%)</title><rect x="68.0666%" y="37" width="0.6495%" height="15" fill="rgb(236,97,10)"/><text x="68.3166%" y="47.50"></text></g><g><title>mir_const (12,430,339 samples, 0.74%)</title><rect x="68.0331%" y="85" width="0.7356%" height="15" fill="rgb(233,208,19)"/><text x="68.2831%" y="95.50"></text></g><g><title>unsafety_check_result (12,355,597 samples, 0.73%)</title><rect x="68.0376%" y="69" width="0.7312%" height="15" fill="rgb(216,164,2)"/><text x="68.2876%" y="79.50"></text></g><g><title>mir_promoted (12,469,169 samples, 0.74%)</title><rect x="68.0310%" y="101" width="0.7379%" height="15" fill="rgb(220,129,5)"/><text x="68.2810%" y="111.50"></text></g><g><title>type_of (19,241,993 samples, 1.14%)</title><rect x="67.6728%" y="133" width="1.1387%" height="15" fill="rgb(242,17,10)"/><text x="67.9228%" y="143.50"></text></g><g><title>mir_borrowck (18,541,527 samples, 1.10%)</title><rect x="67.7142%" y="117" width="1.0973%" height="15" fill="rgb(242,107,0)"/><text x="67.9642%" y="127.50"></text></g><g><title>mir_built (157,587,302 samples, 9.33%)</title><rect x="59.5344%" y="165" width="9.3259%" height="15" fill="rgb(251,28,31)"/><text x="59.7844%" y="175.50">mir_built</text></g><g><title>typeck (154,350,233 samples, 9.13%)</title><rect x="59.7260%" y="149" width="9.1343%" height="15" fill="rgb(233,223,10)"/><text x="59.9760%" y="159.50">typeck</text></g><g><title>needs_drop_raw (1,887,834 samples, 0.11%)</title><rect x="69.1720%" y="133" width="0.1117%" height="15" fill="rgb(215,21,27)"/><text x="69.4220%" y="143.50"></text></g><g><title>thir_body (1,826,521 samples, 0.11%)</title><rect x="69.2887%" y="133" width="0.1081%" height="15" fill="rgb(232,23,21)"/><text x="69.5387%" y="143.50"></text></g><g><title>mir_built (8,346,433 samples, 0.49%)</title><rect x="68.9197%" y="149" width="0.4939%" height="15" fill="rgb(244,5,23)"/><text x="69.1697%" y="159.50"></text></g><g><title>mir_const (168,845,984 samples, 9.99%)</title><rect x="59.5018%" y="197" width="9.9921%" height="15" fill="rgb(226,81,46)"/><text x="59.7518%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (168,443,048 samples, 9.97%)</title><rect x="59.5257%" y="181" width="9.9683%" height="15" fill="rgb(247,70,30)"/><text x="59.7757%" y="191.50">unsafety_check..</text></g><g><title>unsafety_check_result (10,707,996 samples, 0.63%)</title><rect x="68.8603%" y="165" width="0.6337%" height="15" fill="rgb(212,68,19)"/><text x="69.1103%" y="175.50"></text></g><g><title>mir_promoted (169,170,877 samples, 10.01%)</title><rect x="59.4843%" y="213" width="10.0114%" height="15" fill="rgb(240,187,13)"/><text x="59.7343%" y="223.50">mir_promoted</text></g><g><title>type_op_prove_predicate (3,065,165 samples, 0.18%)</title><rect x="69.5844%" y="213" width="0.1814%" height="15" fill="rgb(223,113,26)"/><text x="69.8344%" y="223.50"></text></g><g><title>type_of (264,962,865 samples, 15.68%)</title><rect x="54.0857%" y="245" width="15.6802%" height="15" fill="rgb(206,192,2)"/><text x="54.3357%" y="255.50">type_of</text></g><g><title>mir_borrowck (264,489,508 samples, 15.65%)</title><rect x="54.1137%" y="229" width="15.6522%" height="15" fill="rgb(241,108,4)"/><text x="54.3637%" y="239.50">mir_borrowck</text></g><g><title>evaluate_obligation (1,980,762 samples, 0.12%)</title><rect x="70.4224%" y="229" width="0.1172%" height="15" fill="rgb(247,173,49)"/><text x="70.6724%" y="239.50"></text></g><g><title>item_types_checking (307,415,235 samples, 18.19%)</title><rect x="52.3791%" y="277" width="18.1925%" height="15" fill="rgb(224,114,35)"/><text x="52.6291%" y="287.50">item_types_checking</text></g><g><title>check_mod_item_types (307,357,925 samples, 18.19%)</title><rect x="52.3825%" y="261" width="18.1891%" height="15" fill="rgb(245,159,27)"/><text x="52.6325%" y="271.50">check_mod_item_types</text></g><g><title>typeck (13,614,726 samples, 0.81%)</title><rect x="69.7659%" y="245" width="0.8057%" height="15" fill="rgb(245,172,44)"/><text x="70.0159%" y="255.50"></text></g><g><title>mir_for_ctfe (1,705,611 samples, 0.10%)</title><rect x="70.8851%" y="197" width="0.1009%" height="15" fill="rgb(236,23,11)"/><text x="71.1351%" y="207.50"></text></g><g><title>eval_to_const_value_raw (4,172,137 samples, 0.25%)</title><rect x="70.7843%" y="245" width="0.2469%" height="15" fill="rgb(205,117,38)"/><text x="71.0343%" y="255.50"></text></g><g><title>eval_to_const_value_raw (4,140,857 samples, 0.25%)</title><rect x="70.7861%" y="229" width="0.2451%" height="15" fill="rgb(237,72,25)"/><text x="71.0361%" y="239.50"></text></g><g><title>eval_to_allocation_raw (4,103,667 samples, 0.24%)</title><rect x="70.7883%" y="213" width="0.2429%" height="15" fill="rgb(244,70,9)"/><text x="71.0383%" y="223.50"></text></g><g><title>fn_sig (3,805,961 samples, 0.23%)</title><rect x="71.0312%" y="245" width="0.2252%" height="15" fill="rgb(217,125,39)"/><text x="71.2812%" y="255.50"></text></g><g><title>generics_of (4,503,400 samples, 0.27%)</title><rect x="71.2564%" y="245" width="0.2665%" height="15" fill="rgb(235,36,10)"/><text x="71.5064%" y="255.50"></text></g><g><title>late_bound_vars_map (2,640,540 samples, 0.16%)</title><rect x="71.9026%" y="197" width="0.1563%" height="15" fill="rgb(251,123,47)"/><text x="72.1526%" y="207.50"></text></g><g><title>resolve_lifetimes (2,495,620 samples, 0.15%)</title><rect x="71.9112%" y="181" width="0.1477%" height="15" fill="rgb(221,13,13)"/><text x="72.1612%" y="191.50"></text></g><g><title>explicit_predicates_of (6,743,448 samples, 0.40%)</title><rect x="71.7140%" y="213" width="0.3991%" height="15" fill="rgb(238,131,9)"/><text x="71.9640%" y="223.50"></text></g><g><title>predicates_of (11,390,550 samples, 0.67%)</title><rect x="71.5943%" y="245" width="0.6741%" height="15" fill="rgb(211,50,8)"/><text x="71.8443%" y="255.50"></text></g><g><title>predicates_defined_on (10,709,451 samples, 0.63%)</title><rect x="71.6346%" y="229" width="0.6338%" height="15" fill="rgb(245,182,24)"/><text x="71.8846%" y="239.50"></text></g><g><title>inferred_outlives_of (2,623,860 samples, 0.16%)</title><rect x="72.1131%" y="213" width="0.1553%" height="15" fill="rgb(242,14,37)"/><text x="72.3631%" y="223.50"></text></g><g><title>inferred_outlives_crate (2,366,946 samples, 0.14%)</title><rect x="72.1283%" y="197" width="0.1401%" height="15" fill="rgb(246,228,12)"/><text x="72.3783%" y="207.50"></text></g><g><title>type_collecting (31,043,245 samples, 1.84%)</title><rect x="70.5745%" y="277" width="1.8371%" height="15" fill="rgb(213,55,15)"/><text x="70.8245%" y="287.50">t..</text></g><g><title>collect_mod_item_types (30,992,205 samples, 1.83%)</title><rect x="70.5775%" y="261" width="1.8341%" height="15" fill="rgb(209,9,3)"/><text x="70.8275%" y="271.50">c..</text></g><g><title>type_of (2,255,871 samples, 0.13%)</title><rect x="72.2781%" y="245" width="0.1335%" height="15" fill="rgb(230,59,30)"/><text x="72.5281%" y="255.50"></text></g><g><title>evaluate_obligation (7,096,728 samples, 0.42%)</title><rect x="74.8410%" y="245" width="0.4200%" height="15" fill="rgb(209,121,21)"/><text x="75.0910%" y="255.50"></text></g><g><title>implied_outlives_bounds (4,041,804 samples, 0.24%)</title><rect x="75.2726%" y="245" width="0.2392%" height="15" fill="rgb(220,109,13)"/><text x="75.5226%" y="255.50"></text></g><g><title>param_env (6,754,128 samples, 0.40%)</title><rect x="75.5421%" y="245" width="0.3997%" height="15" fill="rgb(232,18,1)"/><text x="75.7921%" y="255.50"></text></g><g><title>region_scope_tree (4,322,936 samples, 0.26%)</title><rect x="75.9583%" y="245" width="0.2558%" height="15" fill="rgb(215,41,42)"/><text x="76.2083%" y="255.50"></text></g><g><title>check_impl_item_well_formed (61,437,550 samples, 3.64%)</title><rect x="72.6091%" y="261" width="3.6358%" height="15" fill="rgb(224,123,36)"/><text x="72.8591%" y="271.50">chec..</text></g><g><title>evaluate_obligation (2,517,921 samples, 0.15%)</title><rect x="77.5779%" y="245" width="0.1490%" height="15" fill="rgb(240,125,3)"/><text x="77.8279%" y="255.50"></text></g><g><title>param_env (4,040,914 samples, 0.24%)</title><rect x="77.8803%" y="245" width="0.2391%" height="15" fill="rgb(205,98,50)"/><text x="78.1303%" y="255.50"></text></g><g><title>check_item_well_formed (33,761,532 samples, 2.00%)</title><rect x="76.2450%" y="261" width="1.9980%" height="15" fill="rgb(205,185,37)"/><text x="76.4950%" y="271.50">c..</text></g><g><title>analysis (1,323,884,269 samples, 78.35%)</title><rect x="0.0910%" y="309" width="78.3462%" height="15" fill="rgb(238,207,15)"/><text x="0.3410%" y="319.50">analysis</text></g><g><title>type_check_crate (877,044,064 samples, 51.90%)</title><rect x="26.5346%" y="293" width="51.9026%" height="15" fill="rgb(213,199,42)"/><text x="26.7846%" y="303.50">type_check_crate</text></g><g><title>wf_checking (101,693,710 samples, 6.02%)</title><rect x="72.4190%" y="277" width="6.0181%" height="15" fill="rgb(235,201,11)"/><text x="72.6690%" y="287.50">wf_check..</text></g><g><title>check_trait_item_well_formed (3,282,346 samples, 0.19%)</title><rect x="78.2429%" y="261" width="0.1942%" height="15" fill="rgb(207,46,11)"/><text x="78.4929%" y="271.50"></text></g><g><title>AST_validation (2,304,486 samples, 0.14%)</title><rect x="78.5023%" y="293" width="0.1364%" height="15" fill="rgb(241,35,35)"/><text x="78.7523%" y="303.50"></text></g><g><title>metadata_register_crate (30,720,941 samples, 1.82%)</title><rect x="88.7832%" y="261" width="1.8180%" height="15" fill="rgb(243,32,47)"/><text x="89.0332%" y="271.50">m..</text></g><g><title>metadata_register_crate (23,504,619 samples, 1.39%)</title><rect x="89.2103%" y="245" width="1.3910%" height="15" fill="rgb(247,202,23)"/><text x="89.4603%" y="255.50"></text></g><g><title>metadata_register_crate (4,634,461 samples, 0.27%)</title><rect x="90.3270%" y="229" width="0.2743%" height="15" fill="rgb(219,102,11)"/><text x="90.5770%" y="239.50"></text></g><g><title>macro_expand_crate (202,555,341 samples, 11.99%)</title><rect x="78.7167%" y="293" width="11.9870%" height="15" fill="rgb(243,110,44)"/><text x="78.9667%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (202,539,341 samples, 11.99%)</title><rect x="78.7176%" y="277" width="11.9861%" height="15" fill="rgb(222,74,54)"/><text x="78.9676%" y="287.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,730,965 samples, 0.10%)</title><rect x="90.6013%" y="261" width="0.1024%" height="15" fill="rgb(216,99,12)"/><text x="90.8513%" y="271.50"></text></g><g><title>late_resolve_crate (18,790,879 samples, 1.11%)</title><rect x="90.8502%" y="277" width="1.1120%" height="15" fill="rgb(226,22,26)"/><text x="91.1002%" y="287.50"></text></g><g><title>configure_and_expand (230,518,932 samples, 13.64%)</title><rect x="78.4924%" y="309" width="13.6419%" height="15" fill="rgb(217,163,10)"/><text x="78.7424%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (24,099,057 samples, 1.43%)</title><rect x="90.7082%" y="293" width="1.4262%" height="15" fill="rgb(213,25,53)"/><text x="90.9582%" y="303.50"></text></g><g><title>drop_ast (4,504,140 samples, 0.27%)</title><rect x="92.1343%" y="309" width="0.2666%" height="15" fill="rgb(252,105,26)"/><text x="92.3843%" y="319.50"></text></g><g><title>early_lint_checks (5,769,264 samples, 0.34%)</title><rect x="92.4044%" y="309" width="0.3414%" height="15" fill="rgb(220,39,43)"/><text x="92.6544%" y="319.50"></text></g><g><title>free_global_ctxt (19,032,301 samples, 1.13%)</title><rect x="92.7458%" y="309" width="1.1263%" height="15" fill="rgb(229,68,48)"/><text x="92.9958%" y="319.50"></text></g><g><title>layout_of (1,786,840 samples, 0.11%)</title><rect x="95.9103%" y="213" width="0.1057%" height="15" fill="rgb(252,8,32)"/><text x="96.1603%" y="223.50"></text></g><g><title>layout_of (1,938,912 samples, 0.11%)</title><rect x="95.9030%" y="229" width="0.1147%" height="15" fill="rgb(223,20,43)"/><text x="96.1530%" y="239.50"></text></g><g><title>layout_of (2,342,296 samples, 0.14%)</title><rect x="95.8796%" y="277" width="0.1386%" height="15" fill="rgb(229,81,49)"/><text x="96.1296%" y="287.50"></text></g><g><title>layout_of (2,143,023 samples, 0.13%)</title><rect x="95.8914%" y="261" width="0.1268%" height="15" fill="rgb(236,28,36)"/><text x="96.1414%" y="271.50"></text></g><g><title>layout_of (2,047,593 samples, 0.12%)</title><rect x="95.8970%" y="245" width="0.1212%" height="15" fill="rgb(249,185,26)"/><text x="96.1470%" y="255.50"></text></g><g><title>is_copy_raw (3,607,465 samples, 0.21%)</title><rect x="96.8674%" y="245" width="0.2135%" height="15" fill="rgb(249,174,33)"/><text x="97.1174%" y="255.50"></text></g><g><title>evaluate_obligation (2,473,980 samples, 0.15%)</title><rect x="96.9345%" y="229" width="0.1464%" height="15" fill="rgb(233,201,37)"/><text x="97.1845%" y="239.50"></text></g><g><title>needs_drop_raw (4,572,242 samples, 0.27%)</title><rect x="96.8165%" y="261" width="0.2706%" height="15" fill="rgb(221,78,26)"/><text x="97.0665%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (19,820,602 samples, 1.17%)</title><rect x="96.0182%" y="277" width="1.1730%" height="15" fill="rgb(250,127,30)"/><text x="96.2682%" y="287.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,696,109 samples, 0.10%)</title><rect x="97.0908%" y="261" width="0.1004%" height="15" fill="rgb(230,49,44)"/><text x="97.3408%" y="271.50"></text></g><g><title>optimized_mir (33,184,767 samples, 1.96%)</title><rect x="95.2304%" y="293" width="1.9638%" height="15" fill="rgb(229,67,23)"/><text x="95.4804%" y="303.50">o..</text></g><g><title>generate_crate_metadata (56,648,839 samples, 3.35%)</title><rect x="93.8721%" y="309" width="3.3524%" height="15" fill="rgb(249,83,47)"/><text x="94.1221%" y="319.50">gen..</text></g><g><title>hir_lowering (39,463,169 samples, 2.34%)</title><rect x="97.2246%" y="309" width="2.3354%" height="15" fill="rgb(215,43,3)"/><text x="97.4746%" y="319.50">h..</text></g><g><title>self_profile_alloc_query_strings (5,165,187 samples, 0.31%)</title><rect x="99.6027%" y="309" width="0.3057%" height="15" fill="rgb(238,154,13)"/><text x="99.8527%" y="319.50"></text></g><g><title>all (1,689,788,155 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (1,689,788,155 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="335.50">rustc</text></g></svg></svg>