<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (339,732 samples, 0.30%)</title><rect x="14.2085%" y="117" width="0.2959%" height="15" fill="rgb(227,0,7)"/><text x="14.4585%" y="127.50"></text></g><g><title>item_attrs (276,203 samples, 0.24%)</title><rect x="15.0804%" y="85" width="0.2406%" height="15" fill="rgb(217,0,24)"/><text x="15.3304%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (265,863 samples, 0.23%)</title><rect x="15.0894%" y="69" width="0.2315%" height="15" fill="rgb(221,193,54)"/><text x="15.3394%" y="79.50"></text></g><g><title>codegen_fn_attrs (378,484 samples, 0.33%)</title><rect x="15.0012%" y="101" width="0.3296%" height="15" fill="rgb(248,212,6)"/><text x="15.2512%" y="111.50"></text></g><g><title>is_copy_raw (167,511 samples, 0.15%)</title><rect x="18.2032%" y="85" width="0.1459%" height="15" fill="rgb(208,68,35)"/><text x="18.4532%" y="95.50"></text></g><g><title>evaluate_obligation (127,801 samples, 0.11%)</title><rect x="18.2378%" y="69" width="0.1113%" height="15" fill="rgb(232,128,0)"/><text x="18.4878%" y="79.50"></text></g><g><title>adt_drop_tys (252,043 samples, 0.22%)</title><rect x="18.4544%" y="69" width="0.2195%" height="15" fill="rgb(207,160,47)"/><text x="18.7044%" y="79.50"></text></g><g><title>needs_drop_raw (1,212,795 samples, 1.06%)</title><rect x="18.3551%" y="85" width="1.0563%" height="15" fill="rgb(228,23,34)"/><text x="18.6051%" y="95.50"></text></g><g><title>is_copy_raw (846,739 samples, 0.74%)</title><rect x="18.6739%" y="69" width="0.7374%" height="15" fill="rgb(218,30,26)"/><text x="18.9239%" y="79.50"></text></g><g><title>evaluate_obligation (730,858 samples, 0.64%)</title><rect x="18.7749%" y="53" width="0.6365%" height="15" fill="rgb(220,122,19)"/><text x="19.0249%" y="63.50"></text></g><g><title>trait_impls_of (133,581 samples, 0.12%)</title><rect x="19.2950%" y="37" width="0.1163%" height="15" fill="rgb(250,228,42)"/><text x="19.5450%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (564,494 samples, 0.49%)</title><rect x="19.6479%" y="69" width="0.4916%" height="15" fill="rgb(240,193,28)"/><text x="19.8979%" y="79.50"></text></g><g><title>specialization_graph_of (262,104 samples, 0.23%)</title><rect x="20.2107%" y="69" width="0.2283%" height="15" fill="rgb(216,20,37)"/><text x="20.4607%" y="79.50"></text></g><g><title>resolve_instance (1,300,354 samples, 1.13%)</title><rect x="19.4114%" y="85" width="1.1325%" height="15" fill="rgb(206,188,39)"/><text x="19.6614%" y="95.50"></text></g><g><title>thir_body (1,229,209 samples, 1.07%)</title><rect x="20.5660%" y="85" width="1.0705%" height="15" fill="rgb(217,207,13)"/><text x="20.8160%" y="95.50"></text></g><g><title>mir_const (9,538,962 samples, 8.31%)</title><rect x="13.3462%" y="133" width="8.3077%" height="15" fill="rgb(231,73,38)"/><text x="13.5962%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,209,133 samples, 7.15%)</title><rect x="14.5044%" y="117" width="7.1495%" height="15" fill="rgb(225,20,46)"/><text x="14.7544%" y="127.50">unsafety_c..</text></g><g><title>mir_built (7,260,201 samples, 6.32%)</title><rect x="15.3308%" y="101" width="6.3231%" height="15" fill="rgb(210,31,41)"/><text x="15.5808%" y="111.50">mir_built</text></g><g><title>mir_promoted (10,515,810 samples, 9.16%)</title><rect x="12.5353%" y="149" width="9.1585%" height="15" fill="rgb(221,200,47)"/><text x="12.7853%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (182,852 samples, 0.16%)</title><rect x="21.6938%" y="149" width="0.1593%" height="15" fill="rgb(226,26,5)"/><text x="21.9438%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,207,955 samples, 1.05%)</title><rect x="21.8530%" y="149" width="1.0520%" height="15" fill="rgb(249,33,26)"/><text x="22.1030%" y="159.50"></text></g><g><title>normalize_projection_ty (832,762 samples, 0.73%)</title><rect x="22.1798%" y="133" width="0.7253%" height="15" fill="rgb(235,183,28)"/><text x="22.4298%" y="143.50"></text></g><g><title>type_op_normalize_ty (151,832 samples, 0.13%)</title><rect x="22.9123%" y="149" width="0.1322%" height="15" fill="rgb(221,5,38)"/><text x="23.1623%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,393,361 samples, 2.08%)</title><rect x="23.0445%" y="149" width="2.0844%" height="15" fill="rgb(247,18,42)"/><text x="23.2945%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (28,001,692 samples, 24.39%)</title><rect x="0.7458%" y="181" width="24.3874%" height="15" fill="rgb(241,131,45)"/><text x="0.9958%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (27,882,462 samples, 24.28%)</title><rect x="0.8496%" y="165" width="24.2835%" height="15" fill="rgb(249,31,29)"/><text x="1.0996%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (162,682 samples, 0.14%)</title><rect x="25.1657%" y="181" width="0.1417%" height="15" fill="rgb(225,111,53)"/><text x="25.4157%" y="191.50"></text></g><g><title>codegen_fn_attrs (279,252 samples, 0.24%)</title><rect x="25.6583%" y="117" width="0.2432%" height="15" fill="rgb(238,160,17)"/><text x="25.9083%" y="127.50"></text></g><g><title>codegen_fn_attrs (445,436 samples, 0.39%)</title><rect x="25.5189%" y="149" width="0.3879%" height="15" fill="rgb(214,148,48)"/><text x="25.7689%" y="159.50"></text></g><g><title>should_inherit_track_caller (392,625 samples, 0.34%)</title><rect x="25.5649%" y="133" width="0.3419%" height="15" fill="rgb(232,36,49)"/><text x="25.8149%" y="143.50"></text></g><g><title>check_mod_attrs (670,517 samples, 0.58%)</title><rect x="25.3230%" y="165" width="0.5840%" height="15" fill="rgb(209,103,24)"/><text x="25.5730%" y="175.50"></text></g><g><title>check_mod_const_bodies (114,822 samples, 0.10%)</title><rect x="25.9070%" y="165" width="0.1000%" height="15" fill="rgb(229,88,8)"/><text x="26.1570%" y="175.50"></text></g><g><title>lookup_deprecation_entry (127,381 samples, 0.11%)</title><rect x="26.2104%" y="149" width="0.1109%" height="15" fill="rgb(213,181,19)"/><text x="26.4604%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (363,104 samples, 0.32%)</title><rect x="26.0771%" y="165" width="0.3162%" height="15" fill="rgb(254,191,54)"/><text x="26.3271%" y="175.50"></text></g><g><title>misc_checking_1 (1,290,225 samples, 1.12%)</title><rect x="25.3078%" y="181" width="1.1237%" height="15" fill="rgb(241,83,37)"/><text x="25.5578%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (519,576 samples, 0.45%)</title><rect x="26.4329%" y="165" width="0.4525%" height="15" fill="rgb(233,36,39)"/><text x="26.6829%" y="175.50"></text></g><g><title>check_mod_liveness (425,775 samples, 0.37%)</title><rect x="26.5146%" y="149" width="0.3708%" height="15" fill="rgb(226,3,54)"/><text x="26.7646%" y="159.50"></text></g><g><title>misc_checking_2 (1,067,412 samples, 0.93%)</title><rect x="26.4315%" y="181" width="0.9296%" height="15" fill="rgb(245,192,40)"/><text x="26.6815%" y="191.50"></text></g><g><title>match_checking (546,246 samples, 0.48%)</title><rect x="26.8854%" y="165" width="0.4757%" height="15" fill="rgb(238,167,29)"/><text x="27.1354%" y="175.50"></text></g><g><title>check_match (517,274 samples, 0.45%)</title><rect x="26.9106%" y="149" width="0.4505%" height="15" fill="rgb(232,182,51)"/><text x="27.1606%" y="159.50"></text></g><g><title>check_private_in_public (202,412 samples, 0.18%)</title><rect x="27.3693%" y="165" width="0.1763%" height="15" fill="rgb(231,60,39)"/><text x="27.6193%" y="175.50"></text></g><g><title>death_checking (372,084 samples, 0.32%)</title><rect x="27.5455%" y="165" width="0.3241%" height="15" fill="rgb(208,69,12)"/><text x="27.7955%" y="175.50"></text></g><g><title>crate_lints (2,042,493 samples, 1.78%)</title><rect x="27.8710%" y="149" width="1.7789%" height="15" fill="rgb(235,93,37)"/><text x="28.1210%" y="159.50">c..</text></g><g><title>type_of (1,055,344 samples, 0.92%)</title><rect x="28.7307%" y="133" width="0.9191%" height="15" fill="rgb(213,116,39)"/><text x="28.9807%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (823,690 samples, 0.72%)</title><rect x="28.9325%" y="117" width="0.7174%" height="15" fill="rgb(222,207,29)"/><text x="29.1825%" y="127.50"></text></g><g><title>lint_checking (2,449,068 samples, 2.13%)</title><rect x="27.8696%" y="165" width="2.1330%" height="15" fill="rgb(206,96,30)"/><text x="28.1196%" y="175.50">l..</text></g><g><title>module_lints (404,965 samples, 0.35%)</title><rect x="29.6499%" y="149" width="0.3527%" height="15" fill="rgb(218,138,4)"/><text x="29.8999%" y="159.50"></text></g><g><title>lint_mod (402,405 samples, 0.35%)</title><rect x="29.6521%" y="133" width="0.3505%" height="15" fill="rgb(250,191,14)"/><text x="29.9021%" y="143.50"></text></g><g><title>privacy_access_levels (265,743 samples, 0.23%)</title><rect x="30.0025%" y="165" width="0.2314%" height="15" fill="rgb(239,60,40)"/><text x="30.2525%" y="175.50"></text></g><g><title>privacy_checking_modules (849,269 samples, 0.74%)</title><rect x="30.2340%" y="165" width="0.7396%" height="15" fill="rgb(206,27,48)"/><text x="30.4840%" y="175.50"></text></g><g><title>check_mod_privacy (847,609 samples, 0.74%)</title><rect x="30.2354%" y="149" width="0.7382%" height="15" fill="rgb(225,35,8)"/><text x="30.4854%" y="159.50"></text></g><g><title>misc_checking_3 (4,162,176 samples, 3.62%)</title><rect x="27.3611%" y="181" width="3.6249%" height="15" fill="rgb(250,213,24)"/><text x="27.6111%" y="191.50">misc..</text></g><g><title>impl_parent (1,808,480 samples, 1.58%)</title><rect x="33.9477%" y="117" width="1.5750%" height="15" fill="rgb(247,123,22)"/><text x="34.1977%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,132,200 samples, 0.99%)</title><rect x="34.5367%" y="101" width="0.9861%" height="15" fill="rgb(231,138,38)"/><text x="34.7867%" y="111.50"></text></g><g><title>impl_trait_ref (4,803,175 samples, 4.18%)</title><rect x="35.5241%" y="117" width="4.1832%" height="15" fill="rgb(231,145,46)"/><text x="35.7741%" y="127.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,146,220 samples, 3.61%)</title><rect x="36.0962%" y="101" width="3.6110%" height="15" fill="rgb(251,118,11)"/><text x="36.3462%" y="111.50">meta..</text></g><g><title>item_attrs (123,352 samples, 0.11%)</title><rect x="39.7073%" y="117" width="0.1074%" height="15" fill="rgb(217,147,25)"/><text x="39.9573%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (115,752 samples, 0.10%)</title><rect x="39.7139%" y="101" width="0.1008%" height="15" fill="rgb(247,81,37)"/><text x="39.9639%" y="111.50"></text></g><g><title>explicit_predicates_of (129,461 samples, 0.11%)</title><rect x="39.8570%" y="85" width="0.1128%" height="15" fill="rgb(209,12,38)"/><text x="40.1070%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (122,391 samples, 0.11%)</title><rect x="39.8631%" y="69" width="0.1066%" height="15" fill="rgb(227,1,9)"/><text x="40.1131%" y="79.50"></text></g><g><title>predicates_of (197,801 samples, 0.17%)</title><rect x="39.8150%" y="117" width="0.1723%" height="15" fill="rgb(248,47,43)"/><text x="40.0650%" y="127.50"></text></g><g><title>predicates_defined_on (166,801 samples, 0.15%)</title><rect x="39.8420%" y="101" width="0.1453%" height="15" fill="rgb(221,10,30)"/><text x="40.0920%" y="111.50"></text></g><g><title>trait_impls_of (625,289 samples, 0.54%)</title><rect x="39.9890%" y="117" width="0.5446%" height="15" fill="rgb(210,229,1)"/><text x="40.2390%" y="127.50"></text></g><g><title>implementations_of_trait (167,011 samples, 0.15%)</title><rect x="40.3881%" y="101" width="0.1455%" height="15" fill="rgb(222,148,37)"/><text x="40.6381%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (120,731 samples, 0.11%)</title><rect x="40.4284%" y="85" width="0.1051%" height="15" fill="rgb(234,67,33)"/><text x="40.6784%" y="95.50"></text></g><g><title>coherent_trait (10,913,562 samples, 9.50%)</title><rect x="31.0548%" y="149" width="9.5049%" height="15" fill="rgb(247,98,35)"/><text x="31.3048%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (10,893,352 samples, 9.49%)</title><rect x="31.0724%" y="133" width="9.4873%" height="15" fill="rgb(247,138,52)"/><text x="31.3224%" y="143.50">specialization..</text></g><g><title>coherence_checking (11,003,773 samples, 9.58%)</title><rect x="31.0370%" y="165" width="9.5835%" height="15" fill="rgb(213,79,30)"/><text x="31.2870%" y="175.50">coherence_chec..</text></g><g><title>associated_item (442,944 samples, 0.39%)</title><rect x="62.1684%" y="101" width="0.3858%" height="15" fill="rgb(246,177,23)"/><text x="62.4184%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (365,674 samples, 0.32%)</title><rect x="62.2357%" y="85" width="0.3185%" height="15" fill="rgb(230,62,27)"/><text x="62.4857%" y="95.50"></text></g><g><title>associated_items (617,949 samples, 0.54%)</title><rect x="62.0420%" y="117" width="0.5382%" height="15" fill="rgb(216,154,8)"/><text x="62.2920%" y="127.50"></text></g><g><title>adt_dtorck_constraint (260,473 samples, 0.23%)</title><rect x="62.9166%" y="101" width="0.2269%" height="15" fill="rgb(244,35,45)"/><text x="63.1666%" y="111.50"></text></g><g><title>dropck_outlives (574,526 samples, 0.50%)</title><rect x="62.6491%" y="117" width="0.5004%" height="15" fill="rgb(251,115,12)"/><text x="62.8991%" y="127.50"></text></g><g><title>predicates_of (262,513 samples, 0.23%)</title><rect x="64.6603%" y="101" width="0.2286%" height="15" fill="rgb(240,54,50)"/><text x="64.9103%" y="111.50"></text></g><g><title>predicates_defined_on (189,523 samples, 0.17%)</title><rect x="64.7239%" y="85" width="0.1651%" height="15" fill="rgb(233,84,52)"/><text x="64.9739%" y="95.50"></text></g><g><title>specializes (160,162 samples, 0.14%)</title><rect x="64.8890%" y="101" width="0.1395%" height="15" fill="rgb(207,117,47)"/><text x="65.1390%" y="111.50"></text></g><g><title>param_env (124,751 samples, 0.11%)</title><rect x="64.9198%" y="85" width="0.1086%" height="15" fill="rgb(249,43,39)"/><text x="65.1698%" y="95.50"></text></g><g><title>trait_impls_of (610,210 samples, 0.53%)</title><rect x="65.0403%" y="101" width="0.5314%" height="15" fill="rgb(209,38,44)"/><text x="65.2903%" y="111.50"></text></g><g><title>implementations_of_trait (379,215 samples, 0.33%)</title><rect x="65.2415%" y="85" width="0.3303%" height="15" fill="rgb(236,212,23)"/><text x="65.4915%" y="95.50"></text></g><g><title>evaluate_obligation (2,786,888 samples, 2.43%)</title><rect x="63.1494%" y="117" width="2.4272%" height="15" fill="rgb(242,79,21)"/><text x="63.3994%" y="127.50">ev..</text></g><g><title>fn_sig (168,681 samples, 0.15%)</title><rect x="65.5987%" y="117" width="0.1469%" height="15" fill="rgb(211,96,35)"/><text x="65.8487%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (150,421 samples, 0.13%)</title><rect x="65.6146%" y="101" width="0.1310%" height="15" fill="rgb(253,215,40)"/><text x="65.8646%" y="111.50"></text></g><g><title>generics_of (132,580 samples, 0.12%)</title><rect x="65.7456%" y="117" width="0.1155%" height="15" fill="rgb(211,81,21)"/><text x="65.9956%" y="127.50"></text></g><g><title>impl_item_implementor_ids (155,071 samples, 0.14%)</title><rect x="65.8618%" y="117" width="0.1351%" height="15" fill="rgb(208,190,38)"/><text x="66.1118%" y="127.50"></text></g><g><title>associated_items (136,791 samples, 0.12%)</title><rect x="65.8778%" y="101" width="0.1191%" height="15" fill="rgb(235,213,38)"/><text x="66.1278%" y="111.50"></text></g><g><title>item_attrs (533,366 samples, 0.46%)</title><rect x="66.1209%" y="117" width="0.4645%" height="15" fill="rgb(237,122,38)"/><text x="66.3709%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (528,126 samples, 0.46%)</title><rect x="66.1254%" y="101" width="0.4600%" height="15" fill="rgb(244,218,35)"/><text x="66.3754%" y="111.50"></text></g><g><title>evaluate_obligation (334,845 samples, 0.29%)</title><rect x="66.9166%" y="101" width="0.2916%" height="15" fill="rgb(240,68,47)"/><text x="67.1666%" y="111.50"></text></g><g><title>method_autoderef_steps (650,227 samples, 0.57%)</title><rect x="66.6512%" y="117" width="0.5663%" height="15" fill="rgb(210,16,53)"/><text x="66.9012%" y="127.50"></text></g><g><title>object_safety_violations (141,362 samples, 0.12%)</title><rect x="67.2175%" y="117" width="0.1231%" height="15" fill="rgb(235,124,12)"/><text x="67.4675%" y="127.50"></text></g><g><title>explicit_predicates_of (131,821 samples, 0.11%)</title><rect x="67.5626%" y="85" width="0.1148%" height="15" fill="rgb(224,169,11)"/><text x="67.8126%" y="95.50"></text></g><g><title>predicates_of (374,463 samples, 0.33%)</title><rect x="67.3975%" y="117" width="0.3261%" height="15" fill="rgb(250,166,2)"/><text x="67.6475%" y="127.50"></text></g><g><title>predicates_defined_on (268,913 samples, 0.23%)</title><rect x="67.4894%" y="101" width="0.2342%" height="15" fill="rgb(242,216,29)"/><text x="67.7394%" y="111.50"></text></g><g><title>trait_impls_of (183,343 samples, 0.16%)</title><rect x="67.7317%" y="117" width="0.1597%" height="15" fill="rgb(230,116,27)"/><text x="67.9817%" y="127.50"></text></g><g><title>item_bodies_checking (31,393,100 samples, 27.34%)</title><rect x="40.6534%" y="165" width="27.3410%" height="15" fill="rgb(228,99,48)"/><text x="40.9034%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (31,389,640 samples, 27.34%)</title><rect x="40.6565%" y="149" width="27.3380%" height="15" fill="rgb(253,11,6)"/><text x="40.9065%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (31,302,119 samples, 27.26%)</title><rect x="40.7327%" y="133" width="27.2618%" height="15" fill="rgb(247,143,39)"/><text x="40.9827%" y="143.50">typeck</text></g><g><title>item_types_checking (1,913,522 samples, 1.67%)</title><rect x="67.9945%" y="165" width="1.6665%" height="15" fill="rgb(236,97,10)"/><text x="68.2445%" y="175.50"></text></g><g><title>check_mod_item_types (1,911,112 samples, 1.66%)</title><rect x="67.9966%" y="149" width="1.6644%" height="15" fill="rgb(233,208,19)"/><text x="68.2466%" y="159.50"></text></g><g><title>late_bound_vars_map (122,171 samples, 0.11%)</title><rect x="70.1329%" y="117" width="0.1064%" height="15" fill="rgb(216,164,2)"/><text x="70.3829%" y="127.50"></text></g><g><title>fn_sig (404,885 samples, 0.35%)</title><rect x="69.9131%" y="133" width="0.3526%" height="15" fill="rgb(220,129,5)"/><text x="70.1631%" y="143.50"></text></g><g><title>is_late_bound_map (353,942 samples, 0.31%)</title><rect x="70.3811%" y="117" width="0.3083%" height="15" fill="rgb(242,17,10)"/><text x="70.6311%" y="127.50"></text></g><g><title>resolve_lifetimes (333,242 samples, 0.29%)</title><rect x="70.3991%" y="101" width="0.2902%" height="15" fill="rgb(242,107,0)"/><text x="70.6491%" y="111.50"></text></g><g><title>lint_levels (129,411 samples, 0.11%)</title><rect x="70.5766%" y="85" width="0.1127%" height="15" fill="rgb(251,28,31)"/><text x="70.8266%" y="95.50"></text></g><g><title>generics_of (565,973 samples, 0.49%)</title><rect x="70.2658%" y="133" width="0.4929%" height="15" fill="rgb(233,223,10)"/><text x="70.5158%" y="143.50"></text></g><g><title>explicit_predicates_of (386,435 samples, 0.34%)</title><rect x="70.9370%" y="101" width="0.3366%" height="15" fill="rgb(215,21,27)"/><text x="71.1870%" y="111.50"></text></g><g><title>predicates_of (907,042 samples, 0.79%)</title><rect x="70.8089%" y="133" width="0.7900%" height="15" fill="rgb(232,23,21)"/><text x="71.0589%" y="143.50"></text></g><g><title>predicates_defined_on (852,541 samples, 0.74%)</title><rect x="70.8563%" y="117" width="0.7425%" height="15" fill="rgb(244,5,23)"/><text x="71.1063%" y="127.50"></text></g><g><title>inferred_outlives_of (373,484 samples, 0.33%)</title><rect x="71.2735%" y="101" width="0.3253%" height="15" fill="rgb(226,81,46)"/><text x="71.5235%" y="111.50"></text></g><g><title>inferred_outlives_crate (350,954 samples, 0.31%)</title><rect x="71.2932%" y="85" width="0.3057%" height="15" fill="rgb(247,70,30)"/><text x="71.5432%" y="95.50"></text></g><g><title>type_of (192,381 samples, 0.17%)</title><rect x="71.4313%" y="69" width="0.1675%" height="15" fill="rgb(212,68,19)"/><text x="71.6813%" y="79.50"></text></g><g><title>type_collecting (2,372,766 samples, 2.07%)</title><rect x="69.6622%" y="165" width="2.0665%" height="15" fill="rgb(240,187,13)"/><text x="69.9122%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,362,666 samples, 2.06%)</title><rect x="69.6710%" y="149" width="2.0577%" height="15" fill="rgb(223,113,26)"/><text x="69.9210%" y="159.50">c..</text></g><g><title>type_of (149,132 samples, 0.13%)</title><rect x="71.5988%" y="133" width="0.1299%" height="15" fill="rgb(206,192,2)"/><text x="71.8488%" y="143.50"></text></g><g><title>evaluate_obligation (485,917 samples, 0.42%)</title><rect x="74.2869%" y="133" width="0.4232%" height="15" fill="rgb(241,108,4)"/><text x="74.5369%" y="143.50"></text></g><g><title>implied_outlives_bounds (319,713 samples, 0.28%)</title><rect x="74.7238%" y="133" width="0.2784%" height="15" fill="rgb(247,173,49)"/><text x="74.9738%" y="143.50"></text></g><g><title>param_env (445,427 samples, 0.39%)</title><rect x="75.0023%" y="133" width="0.3879%" height="15" fill="rgb(224,114,35)"/><text x="75.2523%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,544,799 samples, 3.96%)</title><rect x="71.9326%" y="149" width="3.9582%" height="15" fill="rgb(245,159,27)"/><text x="72.1826%" y="159.50">chec..</text></g><g><title>region_scope_tree (536,266 samples, 0.47%)</title><rect x="75.4237%" y="133" width="0.4670%" height="15" fill="rgb(245,172,44)"/><text x="75.6737%" y="143.50"></text></g><g><title>adt_def (149,231 samples, 0.13%)</title><rect x="77.6494%" y="117" width="0.1300%" height="15" fill="rgb(236,23,11)"/><text x="77.8994%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (146,081 samples, 0.13%)</title><rect x="77.6522%" y="101" width="0.1272%" height="15" fill="rgb(205,117,38)"/><text x="77.9022%" y="111.50"></text></g><g><title>adt_sized_constraint (224,442 samples, 0.20%)</title><rect x="77.6377%" y="133" width="0.1955%" height="15" fill="rgb(237,72,25)"/><text x="77.8877%" y="143.50"></text></g><g><title>implied_outlives_bounds (151,901 samples, 0.13%)</title><rect x="77.9062%" y="133" width="0.1323%" height="15" fill="rgb(244,70,9)"/><text x="78.1562%" y="143.50"></text></g><g><title>param_env (301,655 samples, 0.26%)</title><rect x="78.0385%" y="133" width="0.2627%" height="15" fill="rgb(217,125,39)"/><text x="78.2885%" y="143.50"></text></g><g><title>analysis (89,580,538 samples, 78.02%)</title><rect x="0.4848%" y="197" width="78.0179%" height="15" fill="rgb(235,36,10)"/><text x="0.7348%" y="207.50">analysis</text></g><g><title>type_check_crate (54,558,857 samples, 47.52%)</title><rect x="30.9861%" y="181" width="47.5167%" height="15" fill="rgb(251,123,47)"/><text x="31.2361%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,773,166 samples, 6.77%)</title><rect x="71.7329%" y="165" width="6.7698%" height="15" fill="rgb(221,13,13)"/><text x="71.9829%" y="175.50">wf_checki..</text></g><g><title>check_item_well_formed (2,999,052 samples, 2.61%)</title><rect x="75.8908%" y="149" width="2.6119%" height="15" fill="rgb(238,131,9)"/><text x="76.1408%" y="159.50">ch..</text></g><g><title>variances_of (123,562 samples, 0.11%)</title><rect x="78.3951%" y="133" width="0.1076%" height="15" fill="rgb(211,50,8)"/><text x="78.6451%" y="143.50"></text></g><g><title>crate_variances (117,591 samples, 0.10%)</title><rect x="78.4003%" y="117" width="0.1024%" height="15" fill="rgb(245,182,24)"/><text x="78.6503%" y="127.50"></text></g><g><title>codegen_crate (461,055 samples, 0.40%)</title><rect x="78.5087%" y="197" width="0.4015%" height="15" fill="rgb(242,14,37)"/><text x="78.7587%" y="207.50"></text></g><g><title>AST_validation (131,272 samples, 0.11%)</title><rect x="79.0197%" y="181" width="0.1143%" height="15" fill="rgb(246,228,12)"/><text x="79.2697%" y="191.50"></text></g><g><title>metadata_load_macro (154,211 samples, 0.13%)</title><rect x="85.2280%" y="149" width="0.1343%" height="15" fill="rgb(213,55,15)"/><text x="85.4780%" y="159.50"></text></g><g><title>macro_expand_crate (8,370,993 samples, 7.29%)</title><rect x="79.2509%" y="181" width="7.2905%" height="15" fill="rgb(209,9,3)"/><text x="79.5009%" y="191.50">macro_expa..</text></g><g><title>expand_crate (8,361,003 samples, 7.28%)</title><rect x="79.2596%" y="165" width="7.2818%" height="15" fill="rgb(230,59,30)"/><text x="79.5096%" y="175.50">expand_cra..</text></g><g><title>metadata_register_crate (1,353,875 samples, 1.18%)</title><rect x="85.3623%" y="149" width="1.1791%" height="15" fill="rgb(209,121,21)"/><text x="85.6123%" y="159.50"></text></g><g><title>metadata_register_crate (474,794 samples, 0.41%)</title><rect x="86.1279%" y="133" width="0.4135%" height="15" fill="rgb(220,109,13)"/><text x="86.3779%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (177,832 samples, 0.15%)</title><rect x="86.5443%" y="181" width="0.1549%" height="15" fill="rgb(232,18,1)"/><text x="86.7943%" y="191.50"></text></g><g><title>late_resolve_crate (1,962,122 samples, 1.71%)</title><rect x="86.7666%" y="165" width="1.7089%" height="15" fill="rgb(215,41,42)"/><text x="87.0166%" y="175.50"></text></g><g><title>configure_and_expand (11,085,404 samples, 9.65%)</title><rect x="78.9103%" y="197" width="9.6546%" height="15" fill="rgb(224,123,36)"/><text x="79.1603%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (2,142,184 samples, 1.87%)</title><rect x="86.6991%" y="181" width="1.8657%" height="15" fill="rgb(240,125,3)"/><text x="86.9491%" y="191.50">r..</text></g><g><title>drop_ast (198,562 samples, 0.17%)</title><rect x="88.5648%" y="197" width="0.1729%" height="15" fill="rgb(205,98,50)"/><text x="88.8148%" y="207.50"></text></g><g><title>early_lint_checks (409,555 samples, 0.36%)</title><rect x="88.7501%" y="197" width="0.3567%" height="15" fill="rgb(205,185,37)"/><text x="89.0001%" y="207.50"></text></g><g><title>free_global_ctxt (3,609,370 samples, 3.14%)</title><rect x="89.1067%" y="197" width="3.1435%" height="15" fill="rgb(238,207,15)"/><text x="89.3567%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (1,202,464 samples, 1.05%)</title><rect x="92.2502%" y="197" width="1.0473%" height="15" fill="rgb(213,199,42)"/><text x="92.5002%" y="207.50"></text></g><g><title>hir_lowering (2,759,891 samples, 2.40%)</title><rect x="93.2975%" y="197" width="2.4037%" height="15" fill="rgb(235,201,11)"/><text x="93.5475%" y="207.50">hi..</text></g><g><title>parse_crate (3,481,909 samples, 3.03%)</title><rect x="95.7468%" y="197" width="3.0325%" height="15" fill="rgb(207,46,11)"/><text x="95.9968%" y="207.50">par..</text></g><g><title>prepare_outputs (208,032 samples, 0.18%)</title><rect x="98.7839%" y="197" width="0.1812%" height="15" fill="rgb(241,35,35)"/><text x="99.0339%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (733,428 samples, 0.64%)</title><rect x="98.9650%" y="197" width="0.6388%" height="15" fill="rgb(243,32,47)"/><text x="99.2150%" y="207.50"></text></g><g><title>all (114,820,499 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (114,820,499 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (351,334 samples, 0.31%)</title><rect x="99.6940%" y="197" width="0.3060%" height="15" fill="rgb(243,110,44)"/><text x="99.9440%" y="207.50"></text></g></svg></svg>