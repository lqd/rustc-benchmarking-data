<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (205,211 samples, 0.14%)</title><rect x="11.9416%" y="165" width="0.1404%" height="15" fill="rgb(227,0,7)"/><text x="12.1916%" y="175.50"></text></g><g><title>item_attrs (234,254 samples, 0.16%)</title><rect x="12.4763%" y="133" width="0.1603%" height="15" fill="rgb(217,0,24)"/><text x="12.7263%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (227,444 samples, 0.16%)</title><rect x="12.4810%" y="117" width="0.1556%" height="15" fill="rgb(221,193,54)"/><text x="12.7310%" y="127.50"></text></g><g><title>codegen_fn_attrs (326,634 samples, 0.22%)</title><rect x="12.4280%" y="149" width="0.2235%" height="15" fill="rgb(248,212,6)"/><text x="12.6780%" y="159.50"></text></g><g><title>adt_drop_tys (229,894 samples, 0.16%)</title><rect x="15.0963%" y="101" width="0.1573%" height="15" fill="rgb(208,68,35)"/><text x="15.3463%" y="111.50"></text></g><g><title>adt_drop_tys (624,499 samples, 0.43%)</title><rect x="15.0535%" y="117" width="0.4273%" height="15" fill="rgb(232,128,0)"/><text x="15.3035%" y="127.50"></text></g><g><title>is_copy_raw (721,916 samples, 0.49%)</title><rect x="15.4808%" y="117" width="0.4940%" height="15" fill="rgb(207,160,47)"/><text x="15.7308%" y="127.50"></text></g><g><title>evaluate_obligation (611,734 samples, 0.42%)</title><rect x="15.5562%" y="101" width="0.4186%" height="15" fill="rgb(228,23,34)"/><text x="15.8062%" y="111.50"></text></g><g><title>needs_drop_raw (1,517,807 samples, 1.04%)</title><rect x="14.9649%" y="133" width="1.0386%" height="15" fill="rgb(218,30,26)"/><text x="15.2149%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (384,245 samples, 0.26%)</title><rect x="16.1772%" y="117" width="0.2629%" height="15" fill="rgb(220,122,19)"/><text x="16.4272%" y="127.50"></text></g><g><title>impl_parent (188,711 samples, 0.13%)</title><rect x="16.7487%" y="101" width="0.1291%" height="15" fill="rgb(250,228,42)"/><text x="16.9987%" y="111.50"></text></g><g><title>specialization_graph_of (919,110 samples, 0.63%)</title><rect x="16.5486%" y="117" width="0.6289%" height="15" fill="rgb(240,193,28)"/><text x="16.7986%" y="127.50"></text></g><g><title>impl_trait_ref (437,907 samples, 0.30%)</title><rect x="16.8779%" y="101" width="0.2997%" height="15" fill="rgb(216,20,37)"/><text x="17.1279%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (376,685 samples, 0.26%)</title><rect x="16.9198%" y="85" width="0.2578%" height="15" fill="rgb(206,188,39)"/><text x="17.1698%" y="95.50"></text></g><g><title>resolve_instance (1,763,719 samples, 1.21%)</title><rect x="16.0246%" y="133" width="1.2069%" height="15" fill="rgb(217,207,13)"/><text x="16.2746%" y="143.50"></text></g><g><title>thir_body (1,201,832 samples, 0.82%)</title><rect x="17.2448%" y="133" width="0.8224%" height="15" fill="rgb(231,73,38)"/><text x="17.4948%" y="143.50"></text></g><g><title>mir_const (9,799,734 samples, 6.71%)</title><rect x="11.3746%" y="181" width="6.7059%" height="15" fill="rgb(225,20,46)"/><text x="11.6246%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (8,765,937 samples, 6.00%)</title><rect x="12.0820%" y="165" width="5.9985%" height="15" fill="rgb(210,31,41)"/><text x="12.3320%" y="175.50">unsafety..</text></g><g><title>mir_built (7,933,711 samples, 5.43%)</title><rect x="12.6515%" y="149" width="5.4290%" height="15" fill="rgb(221,200,47)"/><text x="12.9015%" y="159.50">mir_bui..</text></g><g><title>mir_promoted (10,712,440 samples, 7.33%)</title><rect x="10.7731%" y="197" width="7.3305%" height="15" fill="rgb(226,26,5)"/><text x="11.0231%" y="207.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (411,975 samples, 0.28%)</title><rect x="18.1036%" y="197" width="0.2819%" height="15" fill="rgb(249,33,26)"/><text x="18.3536%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (508,494 samples, 0.35%)</title><rect x="18.3855%" y="197" width="0.3480%" height="15" fill="rgb(235,183,28)"/><text x="18.6355%" y="207.50"></text></g><g><title>normalize_projection_ty (337,421 samples, 0.23%)</title><rect x="18.5026%" y="181" width="0.2309%" height="15" fill="rgb(221,5,38)"/><text x="18.7526%" y="191.50"></text></g><g><title>type_op_normalize_predicate (250,593 samples, 0.17%)</title><rect x="18.7335%" y="197" width="0.1715%" height="15" fill="rgb(247,18,42)"/><text x="18.9835%" y="207.50"></text></g><g><title>normalize_projection_ty (174,273 samples, 0.12%)</title><rect x="18.7857%" y="181" width="0.1193%" height="15" fill="rgb(241,131,45)"/><text x="19.0357%" y="191.50"></text></g><g><title>type_op_prove_predicate (2,387,479 samples, 1.63%)</title><rect x="18.9190%" y="197" width="1.6337%" height="15" fill="rgb(249,31,29)"/><text x="19.1690%" y="207.50"></text></g><g><title>evaluate_obligation (160,791 samples, 0.11%)</title><rect x="20.4428%" y="181" width="0.1100%" height="15" fill="rgb(225,111,53)"/><text x="20.6928%" y="191.50"></text></g><g><title>MIR_borrow_checking (28,492,329 samples, 19.50%)</title><rect x="1.0689%" y="229" width="19.4972%" height="15" fill="rgb(238,160,17)"/><text x="1.3189%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (28,407,188 samples, 19.44%)</title><rect x="1.1271%" y="213" width="19.4389%" height="15" fill="rgb(214,148,48)"/><text x="1.3771%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (315,843 samples, 0.22%)</title><rect x="20.5814%" y="229" width="0.2161%" height="15" fill="rgb(232,36,49)"/><text x="20.8314%" y="239.50"></text></g><g><title>codegen_fn_attrs (243,791 samples, 0.17%)</title><rect x="21.5076%" y="165" width="0.1668%" height="15" fill="rgb(209,103,24)"/><text x="21.7576%" y="175.50"></text></g><g><title>should_inherit_track_caller (439,456 samples, 0.30%)</title><rect x="21.3819%" y="181" width="0.3007%" height="15" fill="rgb(229,88,8)"/><text x="21.6319%" y="191.50"></text></g><g><title>codegen_fn_attrs (728,241 samples, 0.50%)</title><rect x="21.2070%" y="197" width="0.4983%" height="15" fill="rgb(213,181,19)"/><text x="21.4570%" y="207.50"></text></g><g><title>check_mod_attrs (1,297,554 samples, 0.89%)</title><rect x="20.8177%" y="213" width="0.8879%" height="15" fill="rgb(254,191,54)"/><text x="21.0677%" y="223.50"></text></g><g><title>check_mod_const_bodies (220,842 samples, 0.15%)</title><rect x="21.7056%" y="213" width="0.1511%" height="15" fill="rgb(241,83,37)"/><text x="21.9556%" y="223.50"></text></g><g><title>lookup_deprecation_entry (264,064 samples, 0.18%)</title><rect x="22.2109%" y="197" width="0.1807%" height="15" fill="rgb(233,36,39)"/><text x="22.4609%" y="207.50"></text></g><g><title>stability_index (162,392 samples, 0.11%)</title><rect x="22.2805%" y="181" width="0.1111%" height="15" fill="rgb(226,3,54)"/><text x="22.5305%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (832,030 samples, 0.57%)</title><rect x="21.9588%" y="213" width="0.5694%" height="15" fill="rgb(245,192,40)"/><text x="22.2088%" y="223.50"></text></g><g><title>misc_checking_1 (2,606,329 samples, 1.78%)</title><rect x="20.7978%" y="229" width="1.7835%" height="15" fill="rgb(238,167,29)"/><text x="21.0478%" y="239.50">m..</text></g><g><title>liveness_and_intrinsic_checking (383,354 samples, 0.26%)</title><rect x="22.5824%" y="213" width="0.2623%" height="15" fill="rgb(232,182,51)"/><text x="22.8324%" y="223.50"></text></g><g><title>check_mod_liveness (287,763 samples, 0.20%)</title><rect x="22.6478%" y="197" width="0.1969%" height="15" fill="rgb(231,60,39)"/><text x="22.8978%" y="207.50"></text></g><g><title>misc_checking_2 (1,265,124 samples, 0.87%)</title><rect x="22.5813%" y="229" width="0.8657%" height="15" fill="rgb(208,69,12)"/><text x="22.8313%" y="239.50"></text></g><g><title>match_checking (880,110 samples, 0.60%)</title><rect x="22.8447%" y="213" width="0.6023%" height="15" fill="rgb(235,93,37)"/><text x="23.0947%" y="223.50"></text></g><g><title>check_match (855,509 samples, 0.59%)</title><rect x="22.8616%" y="197" width="0.5854%" height="15" fill="rgb(213,116,39)"/><text x="23.1116%" y="207.50"></text></g><g><title>check_private_in_public (175,752 samples, 0.12%)</title><rect x="23.4541%" y="213" width="0.1203%" height="15" fill="rgb(222,207,29)"/><text x="23.7041%" y="223.50"></text></g><g><title>death_checking (497,965 samples, 0.34%)</title><rect x="23.5744%" y="213" width="0.3408%" height="15" fill="rgb(206,96,30)"/><text x="23.8244%" y="223.50"></text></g><g><title>item_attrs (206,643 samples, 0.14%)</title><rect x="23.7737%" y="197" width="0.1414%" height="15" fill="rgb(218,138,4)"/><text x="24.0237%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (204,393 samples, 0.14%)</title><rect x="23.7752%" y="181" width="0.1399%" height="15" fill="rgb(250,191,14)"/><text x="24.0252%" y="191.50"></text></g><g><title>param_env (148,672 samples, 0.10%)</title><rect x="24.5641%" y="181" width="0.1017%" height="15" fill="rgb(239,60,40)"/><text x="24.8141%" y="191.50"></text></g><g><title>crate_lints (2,201,975 samples, 1.51%)</title><rect x="23.9161%" y="197" width="1.5068%" height="15" fill="rgb(206,27,48)"/><text x="24.1661%" y="207.50"></text></g><g><title>type_of (1,097,630 samples, 0.75%)</title><rect x="24.6718%" y="181" width="0.7511%" height="15" fill="rgb(225,35,8)"/><text x="24.9218%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (860,819 samples, 0.59%)</title><rect x="24.8339%" y="165" width="0.5891%" height="15" fill="rgb(250,213,24)"/><text x="25.0839%" y="175.50"></text></g><g><title>layout_of (152,412 samples, 0.10%)</title><rect x="25.7961%" y="133" width="0.1043%" height="15" fill="rgb(247,123,22)"/><text x="26.0461%" y="143.50"></text></g><g><title>layout_of (220,742 samples, 0.15%)</title><rect x="25.7513%" y="165" width="0.1511%" height="15" fill="rgb(231,138,38)"/><text x="26.0013%" y="175.50"></text></g><g><title>layout_of (180,622 samples, 0.12%)</title><rect x="25.7788%" y="149" width="0.1236%" height="15" fill="rgb(231,145,46)"/><text x="26.0288%" y="159.50"></text></g><g><title>lint_checking (2,904,663 samples, 1.99%)</title><rect x="23.9151%" y="213" width="1.9876%" height="15" fill="rgb(251,118,11)"/><text x="24.1651%" y="223.50">l..</text></g><g><title>module_lints (701,188 samples, 0.48%)</title><rect x="25.4229%" y="197" width="0.4798%" height="15" fill="rgb(217,147,25)"/><text x="25.6729%" y="207.50"></text></g><g><title>lint_mod (698,408 samples, 0.48%)</title><rect x="25.4248%" y="181" width="0.4779%" height="15" fill="rgb(247,81,37)"/><text x="25.6748%" y="191.50"></text></g><g><title>privacy_access_levels (250,863 samples, 0.17%)</title><rect x="25.9028%" y="213" width="0.1717%" height="15" fill="rgb(209,12,38)"/><text x="26.1528%" y="223.50"></text></g><g><title>privacy_checking_modules (928,590 samples, 0.64%)</title><rect x="26.0744%" y="213" width="0.6354%" height="15" fill="rgb(227,1,9)"/><text x="26.3244%" y="223.50"></text></g><g><title>check_mod_privacy (926,670 samples, 0.63%)</title><rect x="26.0757%" y="197" width="0.6341%" height="15" fill="rgb(248,47,43)"/><text x="26.3257%" y="207.50"></text></g><g><title>misc_checking_3 (4,780,803 samples, 3.27%)</title><rect x="23.4470%" y="229" width="3.2715%" height="15" fill="rgb(221,10,30)"/><text x="23.6970%" y="239.50">mis..</text></g><g><title>impl_trait_ref (183,332 samples, 0.13%)</title><rect x="26.8893%" y="133" width="0.1255%" height="15" fill="rgb(210,229,1)"/><text x="27.1393%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (164,912 samples, 0.11%)</title><rect x="26.9019%" y="117" width="0.1128%" height="15" fill="rgb(222,148,37)"/><text x="27.1519%" y="127.50"></text></g><g><title>adt_destructor (335,984 samples, 0.23%)</title><rect x="26.8008%" y="181" width="0.2299%" height="15" fill="rgb(234,67,33)"/><text x="27.0508%" y="191.50"></text></g><g><title>coherent_trait (332,614 samples, 0.23%)</title><rect x="26.8031%" y="165" width="0.2276%" height="15" fill="rgb(247,98,35)"/><text x="27.0531%" y="175.50"></text></g><g><title>specialization_graph_of (331,584 samples, 0.23%)</title><rect x="26.8038%" y="149" width="0.2269%" height="15" fill="rgb(247,138,52)"/><text x="27.0538%" y="159.50"></text></g><g><title>impl_parent (3,217,846 samples, 2.20%)</title><rect x="30.5029%" y="165" width="2.2020%" height="15" fill="rgb(213,79,30)"/><text x="30.7529%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,684,757 samples, 1.15%)</title><rect x="31.5520%" y="149" width="1.1529%" height="15" fill="rgb(246,177,23)"/><text x="31.8020%" y="159.50"></text></g><g><title>impl_trait_ref (6,521,940 samples, 4.46%)</title><rect x="32.7049%" y="165" width="4.4629%" height="15" fill="rgb(230,62,27)"/><text x="32.9549%" y="175.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,264,672 samples, 3.60%)</title><rect x="33.5652%" y="149" width="3.6026%" height="15" fill="rgb(216,154,8)"/><text x="33.8152%" y="159.50">meta..</text></g><g><title>trait_impls_of (1,137,754 samples, 0.78%)</title><rect x="37.1859%" y="165" width="0.7786%" height="15" fill="rgb(244,35,45)"/><text x="37.4359%" y="175.50"></text></g><g><title>implementations_of_trait (299,628 samples, 0.21%)</title><rect x="37.7595%" y="149" width="0.2050%" height="15" fill="rgb(251,115,12)"/><text x="38.0095%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (237,628 samples, 0.16%)</title><rect x="37.8019%" y="133" width="0.1626%" height="15" fill="rgb(240,54,50)"/><text x="38.0519%" y="143.50"></text></g><g><title>coherent_trait (16,351,423 samples, 11.19%)</title><rect x="26.7758%" y="197" width="11.1892%" height="15" fill="rgb(233,84,52)"/><text x="27.0258%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (15,936,758 samples, 10.91%)</title><rect x="27.0596%" y="181" width="10.9055%" height="15" fill="rgb(207,117,47)"/><text x="27.3096%" y="191.50">specialization_g..</text></g><g><title>coherence_checking (16,442,845 samples, 11.25%)</title><rect x="26.7572%" y="213" width="11.2518%" height="15" fill="rgb(249,43,39)"/><text x="27.0072%" y="223.50">coherence_checking</text></g><g><title>associated_items (208,013 samples, 0.14%)</title><rect x="52.0644%" y="165" width="0.1423%" height="15" fill="rgb(209,38,44)"/><text x="52.3144%" y="175.50"></text></g><g><title>adt_dtorck_constraint (151,651 samples, 0.10%)</title><rect x="52.3543%" y="117" width="0.1038%" height="15" fill="rgb(236,212,23)"/><text x="52.6043%" y="127.50"></text></g><g><title>adt_dtorck_constraint (180,341 samples, 0.12%)</title><rect x="52.3387%" y="133" width="0.1234%" height="15" fill="rgb(242,79,21)"/><text x="52.5887%" y="143.50"></text></g><g><title>adt_dtorck_constraint (244,332 samples, 0.17%)</title><rect x="52.3050%" y="149" width="0.1672%" height="15" fill="rgb(211,96,35)"/><text x="52.5550%" y="159.50"></text></g><g><title>dropck_outlives (375,393 samples, 0.26%)</title><rect x="52.2215%" y="165" width="0.2569%" height="15" fill="rgb(253,215,40)"/><text x="52.4715%" y="175.50"></text></g><g><title>predicates_of (222,864 samples, 0.15%)</title><rect x="53.2638%" y="149" width="0.1525%" height="15" fill="rgb(211,81,21)"/><text x="53.5138%" y="159.50"></text></g><g><title>evaluate_obligation (1,475,506 samples, 1.01%)</title><rect x="52.4784%" y="165" width="1.0097%" height="15" fill="rgb(208,190,38)"/><text x="52.7284%" y="175.50"></text></g><g><title>evaluate_obligation (172,982 samples, 0.12%)</title><rect x="53.7982%" y="149" width="0.1184%" height="15" fill="rgb(235,213,38)"/><text x="54.0482%" y="159.50"></text></g><g><title>method_autoderef_steps (243,152 samples, 0.17%)</title><rect x="53.7543%" y="165" width="0.1664%" height="15" fill="rgb(237,122,38)"/><text x="54.0043%" y="175.50"></text></g><g><title>predicates_of (172,653 samples, 0.12%)</title><rect x="53.9571%" y="165" width="0.1181%" height="15" fill="rgb(244,218,35)"/><text x="54.2071%" y="175.50"></text></g><g><title>adt_sized_constraint (151,131 samples, 0.10%)</title><rect x="59.6275%" y="133" width="0.1034%" height="15" fill="rgb(240,68,47)"/><text x="59.8775%" y="143.50"></text></g><g><title>adt_sized_constraint (287,132 samples, 0.20%)</title><rect x="59.5420%" y="149" width="0.1965%" height="15" fill="rgb(210,16,53)"/><text x="59.7920%" y="159.50"></text></g><g><title>associated_item (223,871 samples, 0.15%)</title><rect x="59.8067%" y="133" width="0.1532%" height="15" fill="rgb(235,124,12)"/><text x="60.0567%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (178,011 samples, 0.12%)</title><rect x="59.8381%" y="117" width="0.1218%" height="15" fill="rgb(224,169,11)"/><text x="60.0881%" y="127.50"></text></g><g><title>associated_items (337,644 samples, 0.23%)</title><rect x="59.7420%" y="149" width="0.2310%" height="15" fill="rgb(250,166,2)"/><text x="59.9920%" y="159.50"></text></g><g><title>adt_def (410,104 samples, 0.28%)</title><rect x="60.2704%" y="85" width="0.2806%" height="15" fill="rgb(242,216,29)"/><text x="60.5204%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (408,734 samples, 0.28%)</title><rect x="60.2713%" y="69" width="0.2797%" height="15" fill="rgb(230,116,27)"/><text x="60.5213%" y="79.50"></text></g><g><title>item_attrs (383,354 samples, 0.26%)</title><rect x="60.2887%" y="53" width="0.2623%" height="15" fill="rgb(228,99,48)"/><text x="60.5387%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (381,684 samples, 0.26%)</title><rect x="60.2898%" y="37" width="0.2612%" height="15" fill="rgb(253,11,6)"/><text x="60.5398%" y="47.50"></text></g><g><title>adt_dtorck_constraint (558,716 samples, 0.38%)</title><rect x="60.2542%" y="101" width="0.3823%" height="15" fill="rgb(247,143,39)"/><text x="60.5042%" y="111.50"></text></g><g><title>adt_dtorck_constraint (656,109 samples, 0.45%)</title><rect x="60.2126%" y="117" width="0.4490%" height="15" fill="rgb(236,97,10)"/><text x="60.4626%" y="127.50"></text></g><g><title>adt_dtorck_constraint (836,779 samples, 0.57%)</title><rect x="60.1101%" y="133" width="0.5726%" height="15" fill="rgb(233,208,19)"/><text x="60.3601%" y="143.50"></text></g><g><title>dropck_outlives (1,081,461 samples, 0.74%)</title><rect x="60.0015%" y="149" width="0.7400%" height="15" fill="rgb(216,164,2)"/><text x="60.2515%" y="159.50"></text></g><g><title>specializes (176,282 samples, 0.12%)</title><rect x="61.4887%" y="133" width="0.1206%" height="15" fill="rgb(220,129,5)"/><text x="61.7387%" y="143.50"></text></g><g><title>trait_impls_of (169,723 samples, 0.12%)</title><rect x="61.6119%" y="133" width="0.1161%" height="15" fill="rgb(242,17,10)"/><text x="61.8619%" y="143.50"></text></g><g><title>evaluate_obligation (1,442,557 samples, 0.99%)</title><rect x="60.7416%" y="149" width="0.9871%" height="15" fill="rgb(242,107,0)"/><text x="60.9916%" y="159.50"></text></g><g><title>is_copy_raw (354,363 samples, 0.24%)</title><rect x="61.9584%" y="149" width="0.2425%" height="15" fill="rgb(251,28,31)"/><text x="62.2084%" y="159.50"></text></g><g><title>evaluate_obligation (331,023 samples, 0.23%)</title><rect x="61.9744%" y="133" width="0.2265%" height="15" fill="rgb(233,223,10)"/><text x="62.2244%" y="143.50"></text></g><g><title>predicates_of (239,162 samples, 0.16%)</title><rect x="62.0373%" y="117" width="0.1637%" height="15" fill="rgb(215,21,27)"/><text x="62.2873%" y="127.50"></text></g><g><title>method_autoderef_steps (247,781 samples, 0.17%)</title><rect x="62.2873%" y="149" width="0.1696%" height="15" fill="rgb(232,23,21)"/><text x="62.5373%" y="159.50"></text></g><g><title>predicates_of (286,351 samples, 0.20%)</title><rect x="62.4708%" y="149" width="0.1959%" height="15" fill="rgb(244,5,23)"/><text x="62.7208%" y="159.50"></text></g><g><title>predicates_defined_on (208,431 samples, 0.14%)</title><rect x="62.5241%" y="133" width="0.1426%" height="15" fill="rgb(226,81,46)"/><text x="62.7741%" y="143.50"></text></g><g><title>typeck (12,599,721 samples, 8.62%)</title><rect x="54.1414%" y="165" width="8.6219%" height="15" fill="rgb(247,70,30)"/><text x="54.3914%" y="175.50">typeck</text></g><g><title>item_bodies_checking (36,184,735 samples, 24.76%)</title><rect x="38.0390%" y="213" width="24.7611%" height="15" fill="rgb(212,68,19)"/><text x="38.2890%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (36,181,634 samples, 24.76%)</title><rect x="38.0411%" y="197" width="24.7589%" height="15" fill="rgb(240,187,13)"/><text x="38.2911%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (36,121,952 samples, 24.72%)</title><rect x="38.0819%" y="181" width="24.7181%" height="15" fill="rgb(223,113,26)"/><text x="38.3319%" y="191.50">typeck</text></g><g><title>item_types_checking (927,450 samples, 0.63%)</title><rect x="62.8000%" y="213" width="0.6347%" height="15" fill="rgb(206,192,2)"/><text x="63.0500%" y="223.50"></text></g><g><title>check_mod_item_types (925,180 samples, 0.63%)</title><rect x="62.8016%" y="197" width="0.6331%" height="15" fill="rgb(241,108,4)"/><text x="63.0516%" y="207.50"></text></g><g><title>fn_sig (889,409 samples, 0.61%)</title><rect x="63.8072%" y="181" width="0.6086%" height="15" fill="rgb(247,173,49)"/><text x="64.0572%" y="191.50"></text></g><g><title>named_region_map (1,120,734 samples, 0.77%)</title><rect x="64.5539%" y="165" width="0.7669%" height="15" fill="rgb(224,114,35)"/><text x="64.8039%" y="175.50"></text></g><g><title>resolve_lifetimes (1,077,374 samples, 0.74%)</title><rect x="64.5836%" y="149" width="0.7372%" height="15" fill="rgb(245,159,27)"/><text x="64.8336%" y="159.50"></text></g><g><title>lint_levels (440,295 samples, 0.30%)</title><rect x="65.0196%" y="133" width="0.3013%" height="15" fill="rgb(245,172,44)"/><text x="65.2696%" y="143.50"></text></g><g><title>generics_of (1,347,616 samples, 0.92%)</title><rect x="64.4159%" y="181" width="0.9222%" height="15" fill="rgb(236,23,11)"/><text x="64.6659%" y="191.50"></text></g><g><title>explicit_predicates_of (225,701 samples, 0.15%)</title><rect x="65.6307%" y="149" width="0.1544%" height="15" fill="rgb(205,117,38)"/><text x="65.8807%" y="159.50"></text></g><g><title>predicates_of (980,627 samples, 0.67%)</title><rect x="65.4350%" y="181" width="0.6710%" height="15" fill="rgb(237,72,25)"/><text x="65.6850%" y="191.50"></text></g><g><title>predicates_defined_on (875,627 samples, 0.60%)</title><rect x="65.5069%" y="165" width="0.5992%" height="15" fill="rgb(244,70,9)"/><text x="65.7569%" y="175.50"></text></g><g><title>inferred_outlives_of (468,926 samples, 0.32%)</title><rect x="65.7852%" y="149" width="0.3209%" height="15" fill="rgb(217,125,39)"/><text x="66.0352%" y="159.50"></text></g><g><title>inferred_outlives_crate (425,555 samples, 0.29%)</title><rect x="65.8148%" y="133" width="0.2912%" height="15" fill="rgb(235,36,10)"/><text x="66.0648%" y="143.50"></text></g><g><title>type_of (185,363 samples, 0.13%)</title><rect x="65.9792%" y="117" width="0.1268%" height="15" fill="rgb(251,123,47)"/><text x="66.2292%" y="127.50"></text></g><g><title>type_collecting (4,040,535 samples, 2.76%)</title><rect x="63.4357%" y="213" width="2.7649%" height="15" fill="rgb(221,13,13)"/><text x="63.6857%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (4,029,965 samples, 2.76%)</title><rect x="63.4429%" y="197" width="2.7577%" height="15" fill="rgb(238,131,9)"/><text x="63.6929%" y="207.50">co..</text></g><g><title>adt_sized_constraint (341,084 samples, 0.23%)</title><rect x="67.2129%" y="165" width="0.2334%" height="15" fill="rgb(211,50,8)"/><text x="67.4629%" y="175.50"></text></g><g><title>adt_sized_constraint (281,783 samples, 0.19%)</title><rect x="67.2534%" y="149" width="0.1928%" height="15" fill="rgb(245,182,24)"/><text x="67.5034%" y="159.50"></text></g><g><title>evaluate_obligation (559,487 samples, 0.38%)</title><rect x="67.0800%" y="181" width="0.3829%" height="15" fill="rgb(242,14,37)"/><text x="67.3300%" y="191.50"></text></g><g><title>object_safety_violations (472,005 samples, 0.32%)</title><rect x="67.5455%" y="181" width="0.3230%" height="15" fill="rgb(246,228,12)"/><text x="67.7955%" y="191.50"></text></g><g><title>param_env (147,020 samples, 0.10%)</title><rect x="67.8685%" y="181" width="0.1006%" height="15" fill="rgb(213,55,15)"/><text x="68.1185%" y="191.50"></text></g><g><title>region_scope_tree (434,415 samples, 0.30%)</title><rect x="67.9990%" y="181" width="0.2973%" height="15" fill="rgb(209,9,3)"/><text x="68.2490%" y="191.50"></text></g><g><title>check_impl_item_well_formed (2,917,032 samples, 2.00%)</title><rect x="66.3095%" y="197" width="1.9961%" height="15" fill="rgb(230,59,30)"/><text x="66.5595%" y="207.50">c..</text></g><g><title>evaluate_obligation (488,206 samples, 0.33%)</title><rect x="68.9400%" y="181" width="0.3341%" height="15" fill="rgb(209,121,21)"/><text x="69.1900%" y="191.50"></text></g><g><title>param_env (185,361 samples, 0.13%)</title><rect x="69.3371%" y="181" width="0.1268%" height="15" fill="rgb(220,109,13)"/><text x="69.5871%" y="191.50"></text></g><g><title>analysis (100,846,216 samples, 69.01%)</title><rect x="0.5995%" y="245" width="69.0086%" height="15" fill="rgb(232,18,1)"/><text x="0.8495%" y="255.50">analysis</text></g><g><title>type_check_crate (62,677,150 samples, 42.89%)</title><rect x="26.7185%" y="229" width="42.8897%" height="15" fill="rgb(215,41,42)"/><text x="26.9685%" y="239.50">type_check_crate</text></g><g><title>wf_checking (4,975,855 samples, 3.40%)</title><rect x="66.2032%" y="213" width="3.4050%" height="15" fill="rgb(224,123,36)"/><text x="66.4532%" y="223.50">wf_..</text></g><g><title>check_item_well_formed (1,903,561 samples, 1.30%)</title><rect x="68.3056%" y="197" width="1.3026%" height="15" fill="rgb(240,125,3)"/><text x="68.5556%" y="207.50"></text></g><g><title>codegen_crate (388,795 samples, 0.27%)</title><rect x="69.6158%" y="245" width="0.2661%" height="15" fill="rgb(205,98,50)"/><text x="69.8658%" y="255.50"></text></g><g><title>AST_validation (215,412 samples, 0.15%)</title><rect x="70.0210%" y="229" width="0.1474%" height="15" fill="rgb(205,185,37)"/><text x="70.2710%" y="239.50"></text></g><g><title>complete_gated_feature_checking (151,672 samples, 0.10%)</title><rect x="70.1684%" y="229" width="0.1038%" height="15" fill="rgb(238,207,15)"/><text x="70.4184%" y="239.50"></text></g><g><title>metadata_load_macro (413,794 samples, 0.28%)</title><rect x="81.9779%" y="197" width="0.2832%" height="15" fill="rgb(213,199,42)"/><text x="82.2279%" y="207.50"></text></g><g><title>macro_expand_crate (20,076,645 samples, 13.74%)</title><rect x="70.3203%" y="229" width="13.7384%" height="15" fill="rgb(235,201,11)"/><text x="70.5703%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (20,050,473 samples, 13.72%)</title><rect x="70.3383%" y="213" width="13.7205%" height="15" fill="rgb(207,46,11)"/><text x="70.5883%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,627,019 samples, 1.80%)</title><rect x="82.2610%" y="197" width="1.7977%" height="15" fill="rgb(241,35,35)"/><text x="82.5110%" y="207.50">m..</text></g><g><title>metadata_register_crate (950,020 samples, 0.65%)</title><rect x="83.4086%" y="181" width="0.6501%" height="15" fill="rgb(243,32,47)"/><text x="83.6586%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (232,192 samples, 0.16%)</title><rect x="84.0619%" y="229" width="0.1589%" height="15" fill="rgb(247,202,23)"/><text x="84.3119%" y="239.50"></text></g><g><title>finalize_macro_resolutions (368,384 samples, 0.25%)</title><rect x="84.2760%" y="213" width="0.2521%" height="15" fill="rgb(219,102,11)"/><text x="84.5260%" y="223.50"></text></g><g><title>late_resolve_crate (4,754,944 samples, 3.25%)</title><rect x="84.5281%" y="213" width="3.2538%" height="15" fill="rgb(243,110,44)"/><text x="84.7781%" y="223.50">lat..</text></g><g><title>configure_and_expand (26,385,645 samples, 18.06%)</title><rect x="69.8819%" y="245" width="18.0556%" height="15" fill="rgb(222,74,54)"/><text x="70.1319%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (5,431,441 samples, 3.72%)</title><rect x="84.2208%" y="229" width="3.7167%" height="15" fill="rgb(216,99,12)"/><text x="84.4708%" y="239.50">reso..</text></g><g><title>drop_ast (345,204 samples, 0.24%)</title><rect x="87.9375%" y="245" width="0.2362%" height="15" fill="rgb(226,22,26)"/><text x="88.1875%" y="255.50"></text></g><g><title>early_lint_checks (922,290 samples, 0.63%)</title><rect x="88.1841%" y="245" width="0.6311%" height="15" fill="rgb(217,163,10)"/><text x="88.4341%" y="255.50"></text></g><g><title>free_global_ctxt (3,760,692 samples, 2.57%)</title><rect x="88.8152%" y="245" width="2.5734%" height="15" fill="rgb(213,25,53)"/><text x="89.0652%" y="255.50">fr..</text></g><g><title>generate_crate_metadata (1,022,731 samples, 0.70%)</title><rect x="91.3886%" y="245" width="0.6999%" height="15" fill="rgb(252,105,26)"/><text x="91.6386%" y="255.50"></text></g><g><title>hir_lowering (6,610,224 samples, 4.52%)</title><rect x="92.0885%" y="245" width="4.5233%" height="15" fill="rgb(220,39,43)"/><text x="92.3385%" y="255.50">hir_l..</text></g><g><title>parse_crate (3,318,497 samples, 2.27%)</title><rect x="96.6483%" y="245" width="2.2708%" height="15" fill="rgb(229,68,48)"/><text x="96.8983%" y="255.50">p..</text></g><g><title>prepare_outputs (316,693 samples, 0.22%)</title><rect x="98.9252%" y="245" width="0.2167%" height="15" fill="rgb(252,8,32)"/><text x="99.1752%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (820,579 samples, 0.56%)</title><rect x="99.1419%" y="245" width="0.5615%" height="15" fill="rgb(223,20,43)"/><text x="99.3919%" y="255.50"></text></g><g><title>all (146,135,622 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (146,135,622 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (291,473 samples, 0.20%)</title><rect x="99.8005%" y="245" width="0.1995%" height="15" fill="rgb(249,185,26)"/><text x="100.0505%" y="255.50"></text></g></svg></svg>