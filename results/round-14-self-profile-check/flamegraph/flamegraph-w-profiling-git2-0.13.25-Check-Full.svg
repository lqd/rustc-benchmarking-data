<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (2,762,974 samples, 0.10%)</title><rect x="16.3970%" y="165" width="0.1024%" height="15" fill="rgb(227,0,7)"/><text x="16.6470%" y="175.50"></text></g><g><title>is_late_bound_map (3,822,589 samples, 0.14%)</title><rect x="16.4995%" y="165" width="0.1417%" height="15" fill="rgb(217,0,24)"/><text x="16.7495%" y="175.50"></text></g><g><title>param_env (3,143,284 samples, 0.12%)</title><rect x="18.8475%" y="133" width="0.1165%" height="15" fill="rgb(221,193,54)"/><text x="19.0975%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,964,852 samples, 0.11%)</title><rect x="19.6047%" y="117" width="0.1099%" height="15" fill="rgb(248,212,6)"/><text x="19.8547%" y="127.50"></text></g><g><title>is_copy_raw (12,516,358 samples, 0.46%)</title><rect x="23.6600%" y="85" width="0.4641%" height="15" fill="rgb(208,68,35)"/><text x="23.9100%" y="95.50"></text></g><g><title>evaluate_obligation (10,007,788 samples, 0.37%)</title><rect x="23.7530%" y="69" width="0.3711%" height="15" fill="rgb(232,128,0)"/><text x="24.0030%" y="79.50"></text></g><g><title>needs_drop_raw (15,803,291 samples, 0.59%)</title><rect x="23.5404%" y="101" width="0.5860%" height="15" fill="rgb(207,160,47)"/><text x="23.7904%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,477,513 samples, 0.13%)</title><rect x="24.2852%" y="85" width="0.1289%" height="15" fill="rgb(228,23,34)"/><text x="24.5352%" y="95.50"></text></g><g><title>resolve_instance (9,490,563 samples, 0.35%)</title><rect x="24.1281%" y="101" width="0.3519%" height="15" fill="rgb(218,30,26)"/><text x="24.3781%" y="111.50"></text></g><g><title>thir_body (40,170,417 samples, 1.49%)</title><rect x="24.5222%" y="101" width="1.4894%" height="15" fill="rgb(220,122,19)"/><text x="24.7722%" y="111.50"></text></g><g><title>mir_const (222,402,643 samples, 8.25%)</title><rect x="17.7937%" y="149" width="8.2462%" height="15" fill="rgb(250,228,42)"/><text x="18.0437%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (190,837,967 samples, 7.08%)</title><rect x="18.9640%" y="133" width="7.0758%" height="15" fill="rgb(240,193,28)"/><text x="19.2140%" y="143.50">unsafety_..</text></g><g><title>mir_built (170,576,116 samples, 6.32%)</title><rect x="19.7153%" y="117" width="6.3246%" height="15" fill="rgb(216,20,37)"/><text x="19.9653%" y="127.50">mir_built</text></g><g><title>thir_body (2,811,038 samples, 0.10%)</title><rect x="26.8725%" y="85" width="0.1042%" height="15" fill="rgb(206,188,39)"/><text x="27.1225%" y="95.50"></text></g><g><title>mir_const (18,121,220 samples, 0.67%)</title><rect x="26.3093%" y="133" width="0.6719%" height="15" fill="rgb(217,207,13)"/><text x="26.5593%" y="143.50"></text></g><g><title>unsafety_check_result (13,518,205 samples, 0.50%)</title><rect x="26.4800%" y="117" width="0.5012%" height="15" fill="rgb(231,73,38)"/><text x="26.7300%" y="127.50"></text></g><g><title>mir_built (12,030,641 samples, 0.45%)</title><rect x="26.5352%" y="101" width="0.4461%" height="15" fill="rgb(225,20,46)"/><text x="26.7852%" y="111.50"></text></g><g><title>mir_const_qualif (26,022,333 samples, 0.96%)</title><rect x="26.0399%" y="149" width="0.9648%" height="15" fill="rgb(210,31,41)"/><text x="26.2899%" y="159.50"></text></g><g><title>mir_promoted (279,052,795 samples, 10.35%)</title><rect x="16.6584%" y="165" width="10.3466%" height="15" fill="rgb(221,200,47)"/><text x="16.9084%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (7,746,037 samples, 0.29%)</title><rect x="27.0073%" y="165" width="0.2872%" height="15" fill="rgb(226,26,5)"/><text x="27.2573%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (7,523,223 samples, 0.28%)</title><rect x="27.2945%" y="165" width="0.2789%" height="15" fill="rgb(249,33,26)"/><text x="27.5445%" y="175.50"></text></g><g><title>normalize_projection_ty (4,650,744 samples, 0.17%)</title><rect x="27.4010%" y="149" width="0.1724%" height="15" fill="rgb(235,183,28)"/><text x="27.6510%" y="159.50"></text></g><g><title>type_op_prove_predicate (49,978,665 samples, 1.85%)</title><rect x="27.6601%" y="165" width="1.8531%" height="15" fill="rgb(221,5,38)"/><text x="27.9101%" y="175.50">t..</text></g><g><title>evaluate_obligation (4,665,137 samples, 0.17%)</title><rect x="29.3402%" y="149" width="0.1730%" height="15" fill="rgb(247,18,42)"/><text x="29.5902%" y="159.50"></text></g><g><title>MIR_borrow_checking (786,355,441 samples, 29.16%)</title><rect x="0.3592%" y="197" width="29.1563%" height="15" fill="rgb(241,131,45)"/><text x="0.6092%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (780,191,573 samples, 28.93%)</title><rect x="0.5877%" y="181" width="28.9277%" height="15" fill="rgb(249,31,29)"/><text x="0.8377%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (11,218,975 samples, 0.42%)</title><rect x="29.5155%" y="197" width="0.4160%" height="15" fill="rgb(225,111,53)"/><text x="29.7655%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,296,023 samples, 0.31%)</title><rect x="29.6238%" y="181" width="0.3076%" height="15" fill="rgb(238,160,17)"/><text x="29.8738%" y="191.50"></text></g><g><title>hir_module_items (6,321,520 samples, 0.23%)</title><rect x="29.9314%" y="197" width="0.2344%" height="15" fill="rgb(214,148,48)"/><text x="30.1814%" y="207.50"></text></g><g><title>get_lang_items (2,948,213 samples, 0.11%)</title><rect x="30.5673%" y="149" width="0.1093%" height="15" fill="rgb(232,36,49)"/><text x="30.8173%" y="159.50"></text></g><g><title>should_inherit_track_caller (3,687,726 samples, 0.14%)</title><rect x="30.6766%" y="149" width="0.1367%" height="15" fill="rgb(209,103,24)"/><text x="30.9266%" y="159.50"></text></g><g><title>codegen_fn_attrs (8,133,700 samples, 0.30%)</title><rect x="30.5130%" y="165" width="0.3016%" height="15" fill="rgb(229,88,8)"/><text x="30.7630%" y="175.50"></text></g><g><title>check_mod_attrs (17,334,853 samples, 0.64%)</title><rect x="30.1719%" y="181" width="0.6427%" height="15" fill="rgb(213,181,19)"/><text x="30.4219%" y="191.50"></text></g><g><title>check_mod_const_bodies (4,378,291 samples, 0.16%)</title><rect x="30.8146%" y="181" width="0.1623%" height="15" fill="rgb(254,191,54)"/><text x="31.0646%" y="191.50"></text></g><g><title>check_mod_loops (3,513,837 samples, 0.13%)</title><rect x="30.9770%" y="181" width="0.1303%" height="15" fill="rgb(241,83,37)"/><text x="31.2270%" y="191.50"></text></g><g><title>lookup_deprecation_entry (5,198,015 samples, 0.19%)</title><rect x="31.2769%" y="165" width="0.1927%" height="15" fill="rgb(233,36,39)"/><text x="31.5269%" y="175.50"></text></g><g><title>stability_index (4,674,991 samples, 0.17%)</title><rect x="31.2963%" y="149" width="0.1733%" height="15" fill="rgb(226,3,54)"/><text x="31.5463%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (9,482,586 samples, 0.35%)</title><rect x="31.1296%" y="181" width="0.3516%" height="15" fill="rgb(245,192,40)"/><text x="31.3796%" y="191.50"></text></g><g><title>misc_checking_1 (36,773,530 samples, 1.36%)</title><rect x="30.1658%" y="197" width="1.3635%" height="15" fill="rgb(238,167,29)"/><text x="30.4158%" y="207.50"></text></g><g><title>check_mod_intrinsics (3,497,098 samples, 0.13%)</title><rect x="31.5327%" y="165" width="0.1297%" height="15" fill="rgb(232,182,51)"/><text x="31.7827%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (21,819,873 samples, 0.81%)</title><rect x="31.5295%" y="181" width="0.8090%" height="15" fill="rgb(231,60,39)"/><text x="31.7795%" y="191.50"></text></g><g><title>check_mod_liveness (18,236,345 samples, 0.68%)</title><rect x="31.6623%" y="165" width="0.6762%" height="15" fill="rgb(208,69,12)"/><text x="31.9123%" y="175.50"></text></g><g><title>type_uninhabited_from (5,210,345 samples, 0.19%)</title><rect x="32.1453%" y="149" width="0.1932%" height="15" fill="rgb(235,93,37)"/><text x="32.3953%" y="159.50"></text></g><g><title>type_uninhabited_from (4,738,590 samples, 0.18%)</title><rect x="32.1628%" y="133" width="0.1757%" height="15" fill="rgb(213,116,39)"/><text x="32.4128%" y="143.50"></text></g><g><title>type_uninhabited_from (4,414,290 samples, 0.16%)</title><rect x="32.1748%" y="117" width="0.1637%" height="15" fill="rgb(222,207,29)"/><text x="32.4248%" y="127.50"></text></g><g><title>type_uninhabited_from (4,210,837 samples, 0.16%)</title><rect x="32.1824%" y="101" width="0.1561%" height="15" fill="rgb(206,96,30)"/><text x="32.4324%" y="111.50"></text></g><g><title>type_uninhabited_from (4,120,094 samples, 0.15%)</title><rect x="32.1857%" y="85" width="0.1528%" height="15" fill="rgb(218,138,4)"/><text x="32.4357%" y="95.50"></text></g><g><title>type_uninhabited_from (3,790,871 samples, 0.14%)</title><rect x="32.1979%" y="69" width="0.1406%" height="15" fill="rgb(250,191,14)"/><text x="32.4479%" y="79.50"></text></g><g><title>type_uninhabited_from (3,739,661 samples, 0.14%)</title><rect x="32.1998%" y="53" width="0.1387%" height="15" fill="rgb(239,60,40)"/><text x="32.4498%" y="63.50"></text></g><g><title>type_uninhabited_from (3,717,011 samples, 0.14%)</title><rect x="32.2007%" y="37" width="0.1378%" height="15" fill="rgb(206,27,48)"/><text x="32.4507%" y="47.50"></text></g><g><title>eval_to_const_value_raw (2,951,863 samples, 0.11%)</title><rect x="33.0904%" y="149" width="0.1094%" height="15" fill="rgb(225,35,8)"/><text x="33.3404%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,849,722 samples, 0.11%)</title><rect x="33.0942%" y="133" width="0.1057%" height="15" fill="rgb(250,213,24)"/><text x="33.3442%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,706,971 samples, 0.10%)</title><rect x="33.0995%" y="117" width="0.1004%" height="15" fill="rgb(247,123,22)"/><text x="33.3495%" y="127.50"></text></g><g><title>misc_checking_2 (46,722,290 samples, 1.73%)</title><rect x="31.5293%" y="197" width="1.7324%" height="15" fill="rgb(231,138,38)"/><text x="31.7793%" y="207.50"></text></g><g><title>match_checking (24,898,827 samples, 0.92%)</title><rect x="32.3385%" y="181" width="0.9232%" height="15" fill="rgb(231,145,46)"/><text x="32.5885%" y="191.50"></text></g><g><title>check_match (22,956,326 samples, 0.85%)</title><rect x="32.4105%" y="165" width="0.8512%" height="15" fill="rgb(251,118,11)"/><text x="32.6605%" y="175.50"></text></g><g><title>check_private_in_public (11,815,882 samples, 0.44%)</title><rect x="33.2626%" y="181" width="0.4381%" height="15" fill="rgb(217,147,25)"/><text x="33.5126%" y="191.50"></text></g><g><title>death_checking (16,919,879 samples, 0.63%)</title><rect x="33.7008%" y="181" width="0.6274%" height="15" fill="rgb(247,81,37)"/><text x="33.9508%" y="191.50"></text></g><g><title>param_env (6,186,215 samples, 0.23%)</title><rect x="34.9738%" y="149" width="0.2294%" height="15" fill="rgb(209,12,38)"/><text x="35.2238%" y="159.50"></text></g><g><title>predicates_of (2,905,648 samples, 0.11%)</title><rect x="35.0954%" y="133" width="0.1077%" height="15" fill="rgb(227,1,9)"/><text x="35.3454%" y="143.50"></text></g><g><title>crate_lints (25,265,731 samples, 0.94%)</title><rect x="34.3282%" y="165" width="0.9368%" height="15" fill="rgb(248,47,43)"/><text x="34.5782%" y="175.50"></text></g><g><title>lint_checking (45,149,023 samples, 1.67%)</title><rect x="34.3281%" y="181" width="1.6740%" height="15" fill="rgb(221,10,30)"/><text x="34.5781%" y="191.50"></text></g><g><title>module_lints (19,879,612 samples, 0.74%)</title><rect x="35.2650%" y="165" width="0.7371%" height="15" fill="rgb(210,229,1)"/><text x="35.5150%" y="175.50"></text></g><g><title>lint_mod (19,819,122 samples, 0.73%)</title><rect x="35.2673%" y="149" width="0.7348%" height="15" fill="rgb(222,148,37)"/><text x="35.5173%" y="159.50"></text></g><g><title>privacy_access_levels (19,640,899 samples, 0.73%)</title><rect x="36.0021%" y="181" width="0.7282%" height="15" fill="rgb(234,67,33)"/><text x="36.2521%" y="191.50"></text></g><g><title>privacy_checking_modules (33,830,027 samples, 1.25%)</title><rect x="36.7304%" y="181" width="1.2543%" height="15" fill="rgb(247,98,35)"/><text x="36.9804%" y="191.50"></text></g><g><title>check_mod_privacy (33,777,595 samples, 1.25%)</title><rect x="36.7323%" y="165" width="1.2524%" height="15" fill="rgb(247,138,52)"/><text x="36.9823%" y="175.50"></text></g><g><title>misc_checking_3 (127,756,754 samples, 4.74%)</title><rect x="33.2617%" y="197" width="4.7369%" height="15" fill="rgb(213,79,30)"/><text x="33.5117%" y="207.50">misc_c..</text></g><g><title>impl_parent (4,799,648 samples, 0.18%)</title><rect x="38.4718%" y="133" width="0.1780%" height="15" fill="rgb(246,177,23)"/><text x="38.7218%" y="143.50"></text></g><g><title>impl_trait_ref (8,754,954 samples, 0.32%)</title><rect x="38.6498%" y="133" width="0.3246%" height="15" fill="rgb(230,62,27)"/><text x="38.8998%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,905,369 samples, 0.26%)</title><rect x="38.7183%" y="117" width="0.2560%" height="15" fill="rgb(216,154,8)"/><text x="38.9683%" y="127.50"></text></g><g><title>coherent_trait (25,898,499 samples, 0.96%)</title><rect x="38.1223%" y="165" width="0.9603%" height="15" fill="rgb(244,35,45)"/><text x="38.3723%" y="175.50"></text></g><g><title>specialization_graph_of (24,775,788 samples, 0.92%)</title><rect x="38.1639%" y="149" width="0.9186%" height="15" fill="rgb(251,115,12)"/><text x="38.4139%" y="159.50"></text></g><g><title>coherence_checking (27,430,676 samples, 1.02%)</title><rect x="38.1200%" y="181" width="1.0171%" height="15" fill="rgb(240,54,50)"/><text x="38.3700%" y="191.50"></text></g><g><title>dropck_outlives (5,459,878 samples, 0.20%)</title><rect x="62.7097%" y="133" width="0.2024%" height="15" fill="rgb(233,84,52)"/><text x="62.9597%" y="143.50"></text></g><g><title>mir_for_ctfe (3,733,663 samples, 0.14%)</title><rect x="62.9881%" y="85" width="0.1384%" height="15" fill="rgb(207,117,47)"/><text x="63.2381%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,407,396 samples, 0.13%)</title><rect x="63.0002%" y="69" width="0.1263%" height="15" fill="rgb(249,43,39)"/><text x="63.2502%" y="79.50"></text></g><g><title>eval_to_const_value_raw (5,798,637 samples, 0.22%)</title><rect x="62.9121%" y="133" width="0.2150%" height="15" fill="rgb(209,38,44)"/><text x="63.1621%" y="143.50"></text></g><g><title>eval_to_const_value_raw (5,762,417 samples, 0.21%)</title><rect x="62.9135%" y="117" width="0.2137%" height="15" fill="rgb(236,212,23)"/><text x="63.1635%" y="127.50"></text></g><g><title>eval_to_allocation_raw (5,680,726 samples, 0.21%)</title><rect x="62.9165%" y="101" width="0.2106%" height="15" fill="rgb(242,79,21)"/><text x="63.1665%" y="111.50"></text></g><g><title>specializes (2,987,638 samples, 0.11%)</title><rect x="63.9118%" y="117" width="0.1108%" height="15" fill="rgb(211,96,35)"/><text x="64.1618%" y="127.50"></text></g><g><title>evaluate_obligation (24,524,795 samples, 0.91%)</title><rect x="63.1271%" y="133" width="0.9093%" height="15" fill="rgb(253,215,40)"/><text x="63.3771%" y="143.50"></text></g><g><title>method_autoderef_steps (3,762,068 samples, 0.14%)</title><rect x="64.2800%" y="133" width="0.1395%" height="15" fill="rgb(211,81,21)"/><text x="64.5300%" y="143.50"></text></g><g><title>predicates_of (5,047,119 samples, 0.19%)</title><rect x="64.5099%" y="133" width="0.1871%" height="15" fill="rgb(208,190,38)"/><text x="64.7599%" y="143.50"></text></g><g><title>predicates_defined_on (2,885,258 samples, 0.11%)</title><rect x="64.5901%" y="117" width="0.1070%" height="15" fill="rgb(235,213,38)"/><text x="64.8401%" y="127.50"></text></g><g><title>evaluate_obligation (12,076,255 samples, 0.45%)</title><rect x="70.5485%" y="117" width="0.4478%" height="15" fill="rgb(237,122,38)"/><text x="70.7985%" y="127.50"></text></g><g><title>method_autoderef_steps (2,872,076 samples, 0.11%)</title><rect x="71.1175%" y="117" width="0.1065%" height="15" fill="rgb(244,218,35)"/><text x="71.3675%" y="127.50"></text></g><g><title>typeck (176,715,610 samples, 6.55%)</title><rect x="64.7686%" y="133" width="6.5522%" height="15" fill="rgb(240,68,47)"/><text x="65.0186%" y="143.50">typeck</text></g><g><title>item_bodies_checking (867,201,801 samples, 32.15%)</title><rect x="39.2041%" y="181" width="32.1539%" height="15" fill="rgb(210,16,53)"/><text x="39.4541%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (867,197,841 samples, 32.15%)</title><rect x="39.2043%" y="165" width="32.1537%" height="15" fill="rgb(235,124,12)"/><text x="39.4543%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (860,256,012 samples, 31.90%)</title><rect x="39.4617%" y="149" width="31.8964%" height="15" fill="rgb(224,169,11)"/><text x="39.7117%" y="159.50">typeck</text></g><g><title>item_types_checking (30,924,925 samples, 1.15%)</title><rect x="71.3580%" y="181" width="1.1466%" height="15" fill="rgb(250,166,2)"/><text x="71.6080%" y="191.50"></text></g><g><title>check_mod_item_types (30,855,775 samples, 1.14%)</title><rect x="71.3606%" y="165" width="1.1441%" height="15" fill="rgb(242,216,29)"/><text x="71.6106%" y="175.50"></text></g><g><title>eval_to_const_value_raw (6,306,388 samples, 0.23%)</title><rect x="72.8544%" y="149" width="0.2338%" height="15" fill="rgb(230,116,27)"/><text x="73.1044%" y="159.50"></text></g><g><title>eval_to_const_value_raw (6,275,157 samples, 0.23%)</title><rect x="72.8556%" y="133" width="0.2327%" height="15" fill="rgb(228,99,48)"/><text x="73.1056%" y="143.50"></text></g><g><title>eval_to_allocation_raw (6,245,297 samples, 0.23%)</title><rect x="72.8567%" y="117" width="0.2316%" height="15" fill="rgb(253,11,6)"/><text x="73.1067%" y="127.50"></text></g><g><title>late_bound_vars_map (3,627,087 samples, 0.13%)</title><rect x="73.3015%" y="133" width="0.1345%" height="15" fill="rgb(247,143,39)"/><text x="73.5515%" y="143.50"></text></g><g><title>resolve_lifetimes (2,969,008 samples, 0.11%)</title><rect x="73.3259%" y="117" width="0.1101%" height="15" fill="rgb(236,97,10)"/><text x="73.5759%" y="127.50"></text></g><g><title>fn_sig (9,509,898 samples, 0.35%)</title><rect x="73.0882%" y="149" width="0.3526%" height="15" fill="rgb(233,208,19)"/><text x="73.3382%" y="159.50"></text></g><g><title>is_late_bound_map (5,071,763 samples, 0.19%)</title><rect x="73.5911%" y="133" width="0.1880%" height="15" fill="rgb(216,164,2)"/><text x="73.8411%" y="143.50"></text></g><g><title>resolve_lifetimes (4,744,122 samples, 0.18%)</title><rect x="73.6033%" y="117" width="0.1759%" height="15" fill="rgb(220,129,5)"/><text x="73.8533%" y="127.50"></text></g><g><title>named_region_map (14,016,078 samples, 0.52%)</title><rect x="73.7792%" y="133" width="0.5197%" height="15" fill="rgb(242,17,10)"/><text x="74.0292%" y="143.50"></text></g><g><title>resolve_lifetimes (12,991,958 samples, 0.48%)</title><rect x="73.8171%" y="117" width="0.4817%" height="15" fill="rgb(242,107,0)"/><text x="74.0671%" y="127.50"></text></g><g><title>lint_levels (8,520,414 samples, 0.32%)</title><rect x="73.9829%" y="101" width="0.3159%" height="15" fill="rgb(251,28,31)"/><text x="74.2329%" y="111.50"></text></g><g><title>generics_of (23,606,483 samples, 0.88%)</title><rect x="73.4409%" y="149" width="0.8753%" height="15" fill="rgb(233,223,10)"/><text x="73.6909%" y="159.50"></text></g><g><title>explicit_predicates_of (4,893,679 samples, 0.18%)</title><rect x="74.5484%" y="117" width="0.1814%" height="15" fill="rgb(215,21,27)"/><text x="74.7984%" y="127.50"></text></g><g><title>predicates_of (15,598,935 samples, 0.58%)</title><rect x="74.3556%" y="149" width="0.5784%" height="15" fill="rgb(232,23,21)"/><text x="74.6056%" y="159.50"></text></g><g><title>predicates_defined_on (13,615,828 samples, 0.50%)</title><rect x="74.4292%" y="133" width="0.5048%" height="15" fill="rgb(244,5,23)"/><text x="74.6792%" y="143.50"></text></g><g><title>inferred_outlives_of (5,504,999 samples, 0.20%)</title><rect x="74.7299%" y="117" width="0.2041%" height="15" fill="rgb(226,81,46)"/><text x="74.9799%" y="127.50"></text></g><g><title>inferred_outlives_crate (4,962,525 samples, 0.18%)</title><rect x="74.7500%" y="101" width="0.1840%" height="15" fill="rgb(247,70,30)"/><text x="75.0000%" y="111.50"></text></g><g><title>type_of (2,884,928 samples, 0.11%)</title><rect x="74.8270%" y="85" width="0.1070%" height="15" fill="rgb(212,68,19)"/><text x="75.0770%" y="95.50"></text></g><g><title>type_collecting (68,244,070 samples, 2.53%)</title><rect x="72.5068%" y="181" width="2.5303%" height="15" fill="rgb(240,187,13)"/><text x="72.7568%" y="191.50">ty..</text></g><g><title>collect_mod_item_types (68,173,870 samples, 2.53%)</title><rect x="72.5094%" y="165" width="2.5277%" height="15" fill="rgb(223,113,26)"/><text x="72.7594%" y="175.50">co..</text></g><g><title>evaluate_obligation (6,939,664 samples, 0.26%)</title><rect x="77.6446%" y="149" width="0.2573%" height="15" fill="rgb(206,192,2)"/><text x="77.8946%" y="159.50"></text></g><g><title>implied_outlives_bounds (3,972,695 samples, 0.15%)</title><rect x="77.9029%" y="149" width="0.1473%" height="15" fill="rgb(241,108,4)"/><text x="78.1529%" y="159.50"></text></g><g><title>param_env (10,787,757 samples, 0.40%)</title><rect x="78.0502%" y="149" width="0.4000%" height="15" fill="rgb(247,173,49)"/><text x="78.3002%" y="159.50"></text></g><g><title>region_scope_tree (14,835,802 samples, 0.55%)</title><rect x="78.4534%" y="149" width="0.5501%" height="15" fill="rgb(224,114,35)"/><text x="78.7034%" y="159.50"></text></g><g><title>check_impl_item_well_formed (99,644,423 samples, 3.69%)</title><rect x="75.3112%" y="165" width="3.6946%" height="15" fill="rgb(245,159,27)"/><text x="75.5612%" y="175.50">chec..</text></g><g><title>evaluate_obligation (8,058,733 samples, 0.30%)</title><rect x="79.9399%" y="149" width="0.2988%" height="15" fill="rgb(245,172,44)"/><text x="80.1899%" y="159.50"></text></g><g><title>param_env (5,440,304 samples, 0.20%)</title><rect x="80.3077%" y="149" width="0.2017%" height="15" fill="rgb(236,23,11)"/><text x="80.5577%" y="159.50"></text></g><g><title>check_item_well_formed (44,222,568 samples, 1.64%)</title><rect x="79.0058%" y="165" width="1.6397%" height="15" fill="rgb(205,117,38)"/><text x="79.2558%" y="175.50"></text></g><g><title>analysis (2,179,514,903 samples, 80.81%)</title><rect x="0.0700%" y="213" width="80.8115%" height="15" fill="rgb(237,72,25)"/><text x="0.3200%" y="223.50">analysis</text></g><g><title>type_check_crate (1,156,567,465 samples, 42.88%)</title><rect x="37.9986%" y="197" width="42.8829%" height="15" fill="rgb(244,70,9)"/><text x="38.2486%" y="207.50">type_check_crate</text></g><g><title>wf_checking (157,253,982 samples, 5.83%)</title><rect x="75.0509%" y="181" width="5.8306%" height="15" fill="rgb(217,125,39)"/><text x="75.3009%" y="191.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (6,366,954 samples, 0.24%)</title><rect x="80.6455%" y="165" width="0.2361%" height="15" fill="rgb(235,36,10)"/><text x="80.8955%" y="175.50"></text></g><g><title>AST_validation (5,799,425 samples, 0.22%)</title><rect x="80.9083%" y="197" width="0.2150%" height="15" fill="rgb(251,123,47)"/><text x="81.1583%" y="207.50"></text></g><g><title>complete_gated_feature_checking (4,364,708 samples, 0.16%)</title><rect x="81.1233%" y="197" width="0.1618%" height="15" fill="rgb(221,13,13)"/><text x="81.3733%" y="207.50"></text></g><g><title>macro_expand_crate (230,952,663 samples, 8.56%)</title><rect x="81.2880%" y="197" width="8.5632%" height="15" fill="rgb(238,131,9)"/><text x="81.5380%" y="207.50">macro_expand..</text></g><g><title>expand_crate (230,935,343 samples, 8.56%)</title><rect x="81.2886%" y="181" width="8.5626%" height="15" fill="rgb(211,50,8)"/><text x="81.5386%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (4,507,005 samples, 0.17%)</title><rect x="89.6841%" y="165" width="0.1671%" height="15" fill="rgb(245,182,24)"/><text x="89.9341%" y="175.50"></text></g><g><title>late_resolve_crate (46,802,542 samples, 1.74%)</title><rect x="89.9914%" y="181" width="1.7353%" height="15" fill="rgb(242,14,37)"/><text x="90.2414%" y="191.50"></text></g><g><title>resolve_check_unused (3,582,170 samples, 0.13%)</title><rect x="91.7385%" y="181" width="0.1328%" height="15" fill="rgb(246,228,12)"/><text x="91.9885%" y="191.50"></text></g><g><title>resolve_postprocess (3,328,437 samples, 0.12%)</title><rect x="91.8713%" y="181" width="0.1234%" height="15" fill="rgb(213,55,15)"/><text x="92.1213%" y="191.50"></text></g><g><title>configure_and_expand (299,219,403 samples, 11.09%)</title><rect x="80.9004%" y="213" width="11.0944%" height="15" fill="rgb(209,9,3)"/><text x="81.1504%" y="223.50">configure_and_ex..</text></g><g><title>resolve_crate (57,424,630 samples, 2.13%)</title><rect x="89.8656%" y="197" width="2.1292%" height="15" fill="rgb(230,59,30)"/><text x="90.1156%" y="207.50">r..</text></g><g><title>drop_ast (12,106,395 samples, 0.45%)</title><rect x="91.9948%" y="213" width="0.4489%" height="15" fill="rgb(209,121,21)"/><text x="92.2448%" y="223.50"></text></g><g><title>early_lint_checks (13,468,510 samples, 0.50%)</title><rect x="92.4450%" y="213" width="0.4994%" height="15" fill="rgb(220,109,13)"/><text x="92.6950%" y="223.50"></text></g><g><title>free_global_ctxt (22,518,390 samples, 0.83%)</title><rect x="92.9444%" y="213" width="0.8349%" height="15" fill="rgb(232,18,1)"/><text x="93.1944%" y="223.50"></text></g><g><title>eval_to_const_value_raw (3,528,467 samples, 0.13%)</title><rect x="95.2401%" y="165" width="0.1308%" height="15" fill="rgb(215,41,42)"/><text x="95.4901%" y="175.50"></text></g><g><title>eval_to_const_value_raw (3,364,737 samples, 0.12%)</title><rect x="95.2462%" y="149" width="0.1248%" height="15" fill="rgb(224,123,36)"/><text x="95.4962%" y="159.50"></text></g><g><title>eval_to_allocation_raw (2,920,423 samples, 0.11%)</title><rect x="95.2627%" y="133" width="0.1083%" height="15" fill="rgb(240,125,3)"/><text x="95.5127%" y="143.50"></text></g><g><title>mir_for_ctfe (10,000,024 samples, 0.37%)</title><rect x="95.0115%" y="197" width="0.3708%" height="15" fill="rgb(205,98,50)"/><text x="95.2615%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,384,482 samples, 0.16%)</title><rect x="95.2197%" y="181" width="0.1626%" height="15" fill="rgb(205,185,37)"/><text x="95.4697%" y="191.50"></text></g><g><title>generate_crate_metadata (45,894,311 samples, 1.70%)</title><rect x="93.7793%" y="213" width="1.7017%" height="15" fill="rgb(238,207,15)"/><text x="94.0293%" y="223.50"></text></g><g><title>hir_lowering (105,870,050 samples, 3.93%)</title><rect x="95.4810%" y="213" width="3.9254%" height="15" fill="rgb(213,199,42)"/><text x="95.7310%" y="223.50">hir_..</text></g><g><title>parse_crate (6,380,102 samples, 0.24%)</title><rect x="99.4091%" y="213" width="0.2366%" height="15" fill="rgb(235,201,11)"/><text x="99.6591%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (6,871,557 samples, 0.25%)</title><rect x="99.6554%" y="213" width="0.2548%" height="15" fill="rgb(207,46,11)"/><text x="99.9054%" y="223.50"></text></g><g><title>all (2,697,035,739 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (2,697,035,739 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>