<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>mir_promoted (923,790 samples, 0.34%)</title><rect x="10.1513%" y="229" width="0.3416%" height="15" fill="rgb(227,0,7)"/><text x="10.4013%" y="239.50"></text></g><g><title>mir_const_qualif_const_arg (775,369 samples, 0.29%)</title><rect x="10.2061%" y="213" width="0.2867%" height="15" fill="rgb(217,0,24)"/><text x="10.4561%" y="223.50"></text></g><g><title>mir_const (654,438 samples, 0.24%)</title><rect x="10.2509%" y="197" width="0.2420%" height="15" fill="rgb(221,193,54)"/><text x="10.5009%" y="207.50"></text></g><g><title>unsafety_check_result_for_const_arg (446,343 samples, 0.17%)</title><rect x="10.3278%" y="181" width="0.1650%" height="15" fill="rgb(248,212,6)"/><text x="10.5778%" y="191.50"></text></g><g><title>mir_built (388,933 samples, 0.14%)</title><rect x="10.3490%" y="165" width="0.1438%" height="15" fill="rgb(208,68,35)"/><text x="10.5990%" y="175.50"></text></g><g><title>mir_borrowck_const_arg (2,286,815 samples, 0.85%)</title><rect x="9.6500%" y="245" width="0.8455%" height="15" fill="rgb(232,128,0)"/><text x="9.9000%" y="255.50"></text></g><g><title>param_env (390,237 samples, 0.14%)</title><rect x="11.8375%" y="213" width="0.1443%" height="15" fill="rgb(207,160,47)"/><text x="12.0875%" y="223.50"></text></g><g><title>codegen_fn_attrs (395,634 samples, 0.15%)</title><rect x="12.3217%" y="197" width="0.1463%" height="15" fill="rgb(228,23,34)"/><text x="12.5717%" y="207.50"></text></g><g><title>is_copy_raw (480,445 samples, 0.18%)</title><rect x="15.2062%" y="181" width="0.1776%" height="15" fill="rgb(218,30,26)"/><text x="15.4562%" y="191.50"></text></g><g><title>evaluate_obligation (385,895 samples, 0.14%)</title><rect x="15.2412%" y="165" width="0.1427%" height="15" fill="rgb(220,122,19)"/><text x="15.4912%" y="175.50"></text></g><g><title>is_copy_raw (835,146 samples, 0.31%)</title><rect x="15.4414%" y="165" width="0.3088%" height="15" fill="rgb(250,228,42)"/><text x="15.6914%" y="175.50"></text></g><g><title>evaluate_obligation (699,105 samples, 0.26%)</title><rect x="15.4917%" y="149" width="0.2585%" height="15" fill="rgb(240,193,28)"/><text x="15.7417%" y="159.50"></text></g><g><title>needs_drop_raw (994,728 samples, 0.37%)</title><rect x="15.3838%" y="181" width="0.3678%" height="15" fill="rgb(216,20,37)"/><text x="15.6338%" y="191.50"></text></g><g><title>resolve_instance (565,727 samples, 0.21%)</title><rect x="15.7516%" y="181" width="0.2092%" height="15" fill="rgb(206,188,39)"/><text x="16.0016%" y="191.50"></text></g><g><title>thir_body (2,674,119 samples, 0.99%)</title><rect x="15.9809%" y="181" width="0.9887%" height="15" fill="rgb(217,207,13)"/><text x="16.2309%" y="191.50"></text></g><g><title>mir_const (15,973,526 samples, 5.91%)</title><rect x="11.0870%" y="229" width="5.9060%" height="15" fill="rgb(231,73,38)"/><text x="11.3370%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (13,553,420 samples, 5.01%)</title><rect x="11.9818%" y="213" width="5.0112%" height="15" fill="rgb(225,20,46)"/><text x="12.2318%" y="223.50">unsafe..</text></g><g><title>mir_built (12,238,568 samples, 4.53%)</title><rect x="12.4679%" y="197" width="4.5250%" height="15" fill="rgb(210,31,41)"/><text x="12.7179%" y="207.50">mir_b..</text></g><g><title>mir_const (288,677 samples, 0.11%)</title><rect x="17.1827%" y="213" width="0.1067%" height="15" fill="rgb(221,200,47)"/><text x="17.4327%" y="223.50"></text></g><g><title>mir_const_qualif (894,603 samples, 0.33%)</title><rect x="16.9930%" y="229" width="0.3308%" height="15" fill="rgb(226,26,5)"/><text x="17.2430%" y="239.50"></text></g><g><title>mir_promoted (18,468,662 samples, 6.83%)</title><rect x="10.4955%" y="245" width="6.8285%" height="15" fill="rgb(249,33,26)"/><text x="10.7455%" y="255.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (612,945 samples, 0.23%)</title><rect x="17.3245%" y="245" width="0.2266%" height="15" fill="rgb(235,183,28)"/><text x="17.5745%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (498,083 samples, 0.18%)</title><rect x="17.5511%" y="245" width="0.1842%" height="15" fill="rgb(221,5,38)"/><text x="17.8011%" y="255.50"></text></g><g><title>normalize_projection_ty (274,753 samples, 0.10%)</title><rect x="17.6337%" y="229" width="0.1016%" height="15" fill="rgb(247,18,42)"/><text x="17.8837%" y="239.50"></text></g><g><title>type_op_prove_predicate (2,094,156 samples, 0.77%)</title><rect x="17.8504%" y="245" width="0.7743%" height="15" fill="rgb(241,131,45)"/><text x="18.1004%" y="255.50"></text></g><g><title>MIR_borrow_checking (48,442,227 samples, 17.91%)</title><rect x="0.7188%" y="277" width="17.9107%" height="15" fill="rgb(249,31,29)"/><text x="0.9688%" y="287.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (48,146,283 samples, 17.80%)</title><rect x="0.8282%" y="261" width="17.8013%" height="15" fill="rgb(225,111,53)"/><text x="1.0782%" y="271.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (386,316 samples, 0.14%)</title><rect x="18.8832%" y="245" width="0.1428%" height="15" fill="rgb(238,160,17)"/><text x="19.1332%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (601,869 samples, 0.22%)</title><rect x="18.8043%" y="261" width="0.2225%" height="15" fill="rgb(214,148,48)"/><text x="19.0543%" y="271.50"></text></g><g><title>MIR_effect_checking (1,095,792 samples, 0.41%)</title><rect x="18.6295%" y="277" width="0.4052%" height="15" fill="rgb(232,36,49)"/><text x="18.8795%" y="287.50"></text></g><g><title>hir_module_items (395,705 samples, 0.15%)</title><rect x="19.0347%" y="277" width="0.1463%" height="15" fill="rgb(209,103,24)"/><text x="19.2847%" y="287.50"></text></g><g><title>codegen_fn_attrs (630,866 samples, 0.23%)</title><rect x="19.4005%" y="245" width="0.2333%" height="15" fill="rgb(229,88,8)"/><text x="19.6505%" y="255.50"></text></g><g><title>check_mod_attrs (1,188,575 samples, 0.44%)</title><rect x="19.1943%" y="261" width="0.4395%" height="15" fill="rgb(213,181,19)"/><text x="19.4443%" y="271.50"></text></g><g><title>check_mod_const_bodies (283,761 samples, 0.10%)</title><rect x="19.6338%" y="261" width="0.1049%" height="15" fill="rgb(254,191,54)"/><text x="19.8838%" y="271.50"></text></g><g><title>lookup_deprecation_entry (292,594 samples, 0.11%)</title><rect x="19.9403%" y="245" width="0.1082%" height="15" fill="rgb(241,83,37)"/><text x="20.1903%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (779,679 samples, 0.29%)</title><rect x="19.8084%" y="261" width="0.2883%" height="15" fill="rgb(233,36,39)"/><text x="20.0584%" y="271.50"></text></g><g><title>misc_checking_1 (2,575,248 samples, 0.95%)</title><rect x="19.1812%" y="277" width="0.9522%" height="15" fill="rgb(226,3,54)"/><text x="19.4312%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (1,341,315 samples, 0.50%)</title><rect x="20.1338%" y="261" width="0.4959%" height="15" fill="rgb(245,192,40)"/><text x="20.3838%" y="271.50"></text></g><g><title>check_mod_liveness (1,086,502 samples, 0.40%)</title><rect x="20.2280%" y="245" width="0.4017%" height="15" fill="rgb(238,167,29)"/><text x="20.4780%" y="255.50"></text></g><g><title>misc_checking_2 (2,611,630 samples, 0.97%)</title><rect x="20.1333%" y="277" width="0.9656%" height="15" fill="rgb(232,182,51)"/><text x="20.3833%" y="287.50"></text></g><g><title>match_checking (1,268,935 samples, 0.47%)</title><rect x="20.6297%" y="261" width="0.4692%" height="15" fill="rgb(231,60,39)"/><text x="20.8797%" y="271.50"></text></g><g><title>check_match (1,175,054 samples, 0.43%)</title><rect x="20.6645%" y="245" width="0.4345%" height="15" fill="rgb(208,69,12)"/><text x="20.9145%" y="255.50"></text></g><g><title>check_private_in_public (408,544 samples, 0.15%)</title><rect x="21.1028%" y="261" width="0.1511%" height="15" fill="rgb(235,93,37)"/><text x="21.3528%" y="271.50"></text></g><g><title>death_checking (782,718 samples, 0.29%)</title><rect x="21.2538%" y="261" width="0.2894%" height="15" fill="rgb(213,116,39)"/><text x="21.5038%" y="271.50"></text></g><g><title>eval_to_const_value_raw (496,375 samples, 0.18%)</title><rect x="21.9676%" y="229" width="0.1835%" height="15" fill="rgb(222,207,29)"/><text x="22.2176%" y="239.50"></text></g><g><title>eval_to_const_value_raw (489,185 samples, 0.18%)</title><rect x="21.9703%" y="213" width="0.1809%" height="15" fill="rgb(206,96,30)"/><text x="22.2203%" y="223.50"></text></g><g><title>eval_to_allocation_raw (471,613 samples, 0.17%)</title><rect x="21.9767%" y="197" width="0.1744%" height="15" fill="rgb(218,138,4)"/><text x="22.2267%" y="207.50"></text></g><g><title>param_env (498,978 samples, 0.18%)</title><rect x="22.1511%" y="229" width="0.1845%" height="15" fill="rgb(250,191,14)"/><text x="22.4011%" y="239.50"></text></g><g><title>crate_lints (2,149,754 samples, 0.79%)</title><rect x="21.5438%" y="245" width="0.7948%" height="15" fill="rgb(239,60,40)"/><text x="21.7938%" y="255.50"></text></g><g><title>lint_checking (3,299,227 samples, 1.22%)</title><rect x="21.5432%" y="261" width="1.2198%" height="15" fill="rgb(206,27,48)"/><text x="21.7932%" y="271.50"></text></g><g><title>module_lints (1,147,873 samples, 0.42%)</title><rect x="22.3387%" y="245" width="0.4244%" height="15" fill="rgb(225,35,8)"/><text x="22.5887%" y="255.50"></text></g><g><title>lint_mod (1,136,743 samples, 0.42%)</title><rect x="22.3428%" y="229" width="0.4203%" height="15" fill="rgb(250,213,24)"/><text x="22.5928%" y="239.50"></text></g><g><title>privacy_checking_modules (1,452,596 samples, 0.54%)</title><rect x="22.8531%" y="261" width="0.5371%" height="15" fill="rgb(247,123,22)"/><text x="23.1031%" y="271.50"></text></g><g><title>check_mod_privacy (1,444,746 samples, 0.53%)</title><rect x="22.8560%" y="245" width="0.5342%" height="15" fill="rgb(231,138,38)"/><text x="23.1060%" y="255.50"></text></g><g><title>misc_checking_3 (6,223,960 samples, 2.30%)</title><rect x="21.0989%" y="277" width="2.3012%" height="15" fill="rgb(231,145,46)"/><text x="21.3489%" y="287.50">m..</text></g><g><title>adt_destructor (300,473 samples, 0.11%)</title><rect x="23.4952%" y="229" width="0.1111%" height="15" fill="rgb(251,118,11)"/><text x="23.7452%" y="239.50"></text></g><g><title>coherent_trait (293,723 samples, 0.11%)</title><rect x="23.4977%" y="213" width="0.1086%" height="15" fill="rgb(217,147,25)"/><text x="23.7477%" y="223.50"></text></g><g><title>specialization_graph_of (291,943 samples, 0.11%)</title><rect x="23.4983%" y="197" width="0.1079%" height="15" fill="rgb(247,81,37)"/><text x="23.7483%" y="207.50"></text></g><g><title>impl_parent (1,184,570 samples, 0.44%)</title><rect x="24.3362%" y="213" width="0.4380%" height="15" fill="rgb(209,12,38)"/><text x="24.5862%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (751,561 samples, 0.28%)</title><rect x="24.4963%" y="197" width="0.2779%" height="15" fill="rgb(227,1,9)"/><text x="24.7463%" y="207.50"></text></g><g><title>impl_trait_ref (3,282,270 samples, 1.21%)</title><rect x="24.7742%" y="213" width="1.2136%" height="15" fill="rgb(248,47,43)"/><text x="25.0242%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,855,508 samples, 1.06%)</title><rect x="24.9320%" y="197" width="1.0558%" height="15" fill="rgb(221,10,30)"/><text x="25.1820%" y="207.50"></text></g><g><title>coherent_trait (7,434,572 samples, 2.75%)</title><rect x="23.4788%" y="245" width="2.7488%" height="15" fill="rgb(210,229,1)"/><text x="23.7288%" y="255.50">co..</text></g><g><title>specialization_graph_of (6,912,196 samples, 2.56%)</title><rect x="23.6719%" y="229" width="2.5557%" height="15" fill="rgb(222,148,37)"/><text x="23.9219%" y="239.50">sp..</text></g><g><title>trait_impls_of (648,648 samples, 0.24%)</title><rect x="25.9877%" y="213" width="0.2398%" height="15" fill="rgb(234,67,33)"/><text x="26.2377%" y="223.50"></text></g><g><title>coherence_checking (7,538,444 samples, 2.79%)</title><rect x="23.4725%" y="261" width="2.7872%" height="15" fill="rgb(247,98,35)"/><text x="23.7225%" y="271.50">co..</text></g><g><title>associated_items (357,355 samples, 0.13%)</title><rect x="34.0145%" y="213" width="0.1321%" height="15" fill="rgb(247,138,52)"/><text x="34.2645%" y="223.50"></text></g><g><title>mir_borrowck (536,406 samples, 0.20%)</title><rect x="34.4840%" y="133" width="0.1983%" height="15" fill="rgb(213,79,30)"/><text x="34.7340%" y="143.50"></text></g><g><title>mir_for_ctfe (808,658 samples, 0.30%)</title><rect x="34.3846%" y="165" width="0.2990%" height="15" fill="rgb(246,177,23)"/><text x="34.6346%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (737,658 samples, 0.27%)</title><rect x="34.4109%" y="149" width="0.2727%" height="15" fill="rgb(230,62,27)"/><text x="34.6609%" y="159.50"></text></g><g><title>mir_for_ctfe (356,244 samples, 0.13%)</title><rect x="34.7445%" y="101" width="0.1317%" height="15" fill="rgb(216,154,8)"/><text x="34.9945%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (330,824 samples, 0.12%)</title><rect x="34.7539%" y="85" width="0.1223%" height="15" fill="rgb(244,35,45)"/><text x="35.0039%" y="95.50"></text></g><g><title>eval_to_const_value_raw (431,614 samples, 0.16%)</title><rect x="34.8820%" y="85" width="0.1596%" height="15" fill="rgb(251,115,12)"/><text x="35.1320%" y="95.50"></text></g><g><title>eval_to_const_value_raw (428,804 samples, 0.16%)</title><rect x="34.8830%" y="69" width="0.1585%" height="15" fill="rgb(240,54,50)"/><text x="35.1330%" y="79.50"></text></g><g><title>eval_to_allocation_raw (423,014 samples, 0.16%)</title><rect x="34.8852%" y="53" width="0.1564%" height="15" fill="rgb(233,84,52)"/><text x="35.1352%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,007,481 samples, 0.37%)</title><rect x="34.6906%" y="149" width="0.3725%" height="15" fill="rgb(207,117,47)"/><text x="34.9406%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,003,731 samples, 0.37%)</title><rect x="34.6920%" y="133" width="0.3711%" height="15" fill="rgb(249,43,39)"/><text x="34.9420%" y="143.50"></text></g><g><title>eval_to_allocation_raw (999,151 samples, 0.37%)</title><rect x="34.6937%" y="117" width="0.3694%" height="15" fill="rgb(209,38,44)"/><text x="34.9437%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (505,476 samples, 0.19%)</title><rect x="34.8762%" y="101" width="0.1869%" height="15" fill="rgb(236,212,23)"/><text x="35.1262%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,204,895 samples, 0.82%)</title><rect x="34.2497%" y="213" width="0.8152%" height="15" fill="rgb(242,79,21)"/><text x="34.4997%" y="223.50"></text></g><g><title>eval_to_const_value_raw (2,198,675 samples, 0.81%)</title><rect x="34.2520%" y="197" width="0.8129%" height="15" fill="rgb(211,96,35)"/><text x="34.5020%" y="207.50"></text></g><g><title>eval_to_allocation_raw (2,185,635 samples, 0.81%)</title><rect x="34.2568%" y="181" width="0.8081%" height="15" fill="rgb(253,215,40)"/><text x="34.5068%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,029,272 samples, 0.38%)</title><rect x="34.6843%" y="165" width="0.3806%" height="15" fill="rgb(211,81,21)"/><text x="34.9343%" y="175.50"></text></g><g><title>specializes (526,855 samples, 0.19%)</title><rect x="36.2741%" y="197" width="0.1948%" height="15" fill="rgb(208,190,38)"/><text x="36.5241%" y="207.50"></text></g><g><title>param_env (431,154 samples, 0.16%)</title><rect x="36.3095%" y="181" width="0.1594%" height="15" fill="rgb(235,213,38)"/><text x="36.5595%" y="191.50"></text></g><g><title>trait_impls_of (436,494 samples, 0.16%)</title><rect x="36.4722%" y="197" width="0.1614%" height="15" fill="rgb(237,122,38)"/><text x="36.7222%" y="207.50"></text></g><g><title>evaluate_obligation (4,246,150 samples, 1.57%)</title><rect x="35.0649%" y="213" width="1.5699%" height="15" fill="rgb(244,218,35)"/><text x="35.3149%" y="223.50"></text></g><g><title>mir_borrowck (414,554 samples, 0.15%)</title><rect x="50.9782%" y="117" width="0.1533%" height="15" fill="rgb(240,68,47)"/><text x="51.2282%" y="127.50"></text></g><g><title>mir_for_ctfe (603,428 samples, 0.22%)</title><rect x="50.9116%" y="149" width="0.2231%" height="15" fill="rgb(210,16,53)"/><text x="51.1616%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (551,957 samples, 0.20%)</title><rect x="50.9307%" y="133" width="0.2041%" height="15" fill="rgb(235,124,12)"/><text x="51.1807%" y="143.50"></text></g><g><title>eval_to_const_value_raw (402,145 samples, 0.15%)</title><rect x="51.2402%" y="69" width="0.1487%" height="15" fill="rgb(224,169,11)"/><text x="51.4902%" y="79.50"></text></g><g><title>eval_to_const_value_raw (400,305 samples, 0.15%)</title><rect x="51.2409%" y="53" width="0.1480%" height="15" fill="rgb(250,166,2)"/><text x="51.4909%" y="63.50"></text></g><g><title>eval_to_allocation_raw (397,445 samples, 0.15%)</title><rect x="51.2420%" y="37" width="0.1469%" height="15" fill="rgb(242,216,29)"/><text x="51.4920%" y="47.50"></text></g><g><title>eval_to_const_value_raw (703,328 samples, 0.26%)</title><rect x="51.1449%" y="133" width="0.2600%" height="15" fill="rgb(230,116,27)"/><text x="51.3949%" y="143.50"></text></g><g><title>eval_to_const_value_raw (702,068 samples, 0.26%)</title><rect x="51.1454%" y="117" width="0.2596%" height="15" fill="rgb(228,99,48)"/><text x="51.3954%" y="127.50"></text></g><g><title>eval_to_allocation_raw (700,058 samples, 0.26%)</title><rect x="51.1461%" y="101" width="0.2588%" height="15" fill="rgb(253,11,6)"/><text x="51.3961%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (453,185 samples, 0.17%)</title><rect x="51.2374%" y="85" width="0.1676%" height="15" fill="rgb(247,143,39)"/><text x="51.4874%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (732,328 samples, 0.27%)</title><rect x="51.1351%" y="149" width="0.2708%" height="15" fill="rgb(236,97,10)"/><text x="51.3851%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,960,339 samples, 0.72%)</title><rect x="50.7147%" y="165" width="0.7248%" height="15" fill="rgb(233,208,19)"/><text x="50.9647%" y="175.50"></text></g><g><title>mir_const_qualif_const_arg (902,091 samples, 0.33%)</title><rect x="51.6532%" y="133" width="0.3335%" height="15" fill="rgb(216,164,2)"/><text x="51.9032%" y="143.50"></text></g><g><title>mir_const (774,589 samples, 0.29%)</title><rect x="51.7004%" y="117" width="0.2864%" height="15" fill="rgb(220,129,5)"/><text x="51.9504%" y="127.50"></text></g><g><title>unsafety_check_result_for_const_arg (520,537 samples, 0.19%)</title><rect x="51.7943%" y="101" width="0.1925%" height="15" fill="rgb(242,17,10)"/><text x="52.0443%" y="111.50"></text></g><g><title>mir_built (454,317 samples, 0.17%)</title><rect x="51.8188%" y="85" width="0.1680%" height="15" fill="rgb(242,107,0)"/><text x="52.0688%" y="95.50"></text></g><g><title>mir_borrowck_const_arg (1,856,531 samples, 0.69%)</title><rect x="52.3709%" y="101" width="0.6864%" height="15" fill="rgb(251,28,31)"/><text x="52.6209%" y="111.50"></text></g><g><title>mir_for_ctfe_of_const_arg (2,907,063 samples, 1.07%)</title><rect x="51.9868%" y="133" width="1.0748%" height="15" fill="rgb(233,223,10)"/><text x="52.2368%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,638,927 samples, 0.98%)</title><rect x="52.0859%" y="117" width="0.9757%" height="15" fill="rgb(215,21,27)"/><text x="52.3359%" y="127.50"></text></g><g><title>mir_borrowck (501,656 samples, 0.19%)</title><rect x="53.3370%" y="37" width="0.1855%" height="15" fill="rgb(232,23,21)"/><text x="53.5870%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,207,413 samples, 0.45%)</title><rect x="53.0770%" y="117" width="0.4464%" height="15" fill="rgb(244,5,23)"/><text x="53.3270%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,197,663 samples, 0.44%)</title><rect x="53.0806%" y="101" width="0.4428%" height="15" fill="rgb(226,81,46)"/><text x="53.3306%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,184,893 samples, 0.44%)</title><rect x="53.0853%" y="85" width="0.4381%" height="15" fill="rgb(247,70,30)"/><text x="53.3353%" y="95.50"></text></g><g><title>mir_for_ctfe (788,008 samples, 0.29%)</title><rect x="53.2321%" y="69" width="0.2914%" height="15" fill="rgb(212,68,19)"/><text x="53.4821%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (711,268 samples, 0.26%)</title><rect x="53.2604%" y="53" width="0.2630%" height="15" fill="rgb(240,187,13)"/><text x="53.5104%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,250,293 samples, 0.46%)</title><rect x="53.0643%" y="133" width="0.4623%" height="15" fill="rgb(223,113,26)"/><text x="53.3143%" y="143.50"></text></g><g><title>param_env (328,702 samples, 0.12%)</title><rect x="54.2128%" y="117" width="0.1215%" height="15" fill="rgb(206,192,2)"/><text x="54.4628%" y="127.50"></text></g><g><title>eval_to_const_value_raw (9,979,705 samples, 3.69%)</title><rect x="50.6813%" y="181" width="3.6898%" height="15" fill="rgb(241,108,4)"/><text x="50.9313%" y="191.50">eval..</text></g><g><title>eval_to_const_value_raw (7,929,016 samples, 2.93%)</title><rect x="51.4395%" y="165" width="2.9316%" height="15" fill="rgb(247,173,49)"/><text x="51.6895%" y="175.50">ev..</text></g><g><title>eval_to_allocation_raw (7,873,936 samples, 2.91%)</title><rect x="51.4598%" y="149" width="2.9113%" height="15" fill="rgb(224,114,35)"/><text x="51.7098%" y="159.50">ev..</text></g><g><title>typeck_const_arg (2,284,144 samples, 0.84%)</title><rect x="53.5266%" y="133" width="0.8445%" height="15" fill="rgb(245,159,27)"/><text x="53.7766%" y="143.50"></text></g><g><title>evaluate_obligation (2,240,819 samples, 0.83%)</title><rect x="54.3711%" y="181" width="0.8285%" height="15" fill="rgb(245,172,44)"/><text x="54.6211%" y="191.50"></text></g><g><title>opt_const_param_of (50,525,871 samples, 18.68%)</title><rect x="36.8746%" y="213" width="18.6811%" height="15" fill="rgb(236,23,11)"/><text x="37.1246%" y="223.50">opt_const_param_of</text></g><g><title>typeck (50,417,520 samples, 18.64%)</title><rect x="36.9147%" y="197" width="18.6411%" height="15" fill="rgb(205,117,38)"/><text x="37.1647%" y="207.50">typeck</text></g><g><title>evaluate_obligation (601,538 samples, 0.22%)</title><rect x="58.0564%" y="197" width="0.2224%" height="15" fill="rgb(237,72,25)"/><text x="58.3064%" y="207.50"></text></g><g><title>typeck (7,395,682 samples, 2.73%)</title><rect x="55.7841%" y="213" width="2.7344%" height="15" fill="rgb(244,70,9)"/><text x="56.0341%" y="223.50">ty..</text></g><g><title>param_env (307,455 samples, 0.11%)</title><rect x="58.7255%" y="197" width="0.1137%" height="15" fill="rgb(217,125,39)"/><text x="58.9755%" y="207.50"></text></g><g><title>typeck_const_arg (934,048 samples, 0.35%)</title><rect x="58.5185%" y="213" width="0.3453%" height="15" fill="rgb(235,36,10)"/><text x="58.7685%" y="223.50"></text></g><g><title>item_bodies_checking (88,184,719 samples, 32.60%)</title><rect x="26.2780%" y="261" width="32.6049%" height="15" fill="rgb(251,123,47)"/><text x="26.5280%" y="271.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (88,180,539 samples, 32.60%)</title><rect x="26.2795%" y="245" width="32.6033%" height="15" fill="rgb(221,13,13)"/><text x="26.5295%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (87,995,236 samples, 32.53%)</title><rect x="26.3480%" y="229" width="32.5348%" height="15" fill="rgb(238,131,9)"/><text x="26.5980%" y="239.50">typeck</text></g><g><title>generics_of (634,826 samples, 0.23%)</title><rect x="61.4875%" y="197" width="0.2347%" height="15" fill="rgb(211,50,8)"/><text x="61.7375%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (449,244 samples, 0.17%)</title><rect x="61.5561%" y="181" width="0.1661%" height="15" fill="rgb(245,182,24)"/><text x="61.8061%" y="191.50"></text></g><g><title>impl_trait_ref (900,905 samples, 0.33%)</title><rect x="61.7708%" y="197" width="0.3331%" height="15" fill="rgb(242,14,37)"/><text x="62.0208%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (719,213 samples, 0.27%)</title><rect x="61.8379%" y="181" width="0.2659%" height="15" fill="rgb(246,228,12)"/><text x="62.0879%" y="191.50"></text></g><g><title>predicates_of (674,608 samples, 0.25%)</title><rect x="62.1172%" y="197" width="0.2494%" height="15" fill="rgb(213,55,15)"/><text x="62.3672%" y="207.50"></text></g><g><title>predicates_defined_on (374,275 samples, 0.14%)</title><rect x="62.2283%" y="181" width="0.1384%" height="15" fill="rgb(209,9,3)"/><text x="62.4783%" y="191.50"></text></g><g><title>specializes (2,043,402 samples, 0.76%)</title><rect x="62.3666%" y="197" width="0.7555%" height="15" fill="rgb(230,59,30)"/><text x="62.6166%" y="207.50"></text></g><g><title>param_env (1,164,342 samples, 0.43%)</title><rect x="62.6917%" y="181" width="0.4305%" height="15" fill="rgb(209,121,21)"/><text x="62.9417%" y="191.50"></text></g><g><title>def_span (518,144 samples, 0.19%)</title><rect x="62.9306%" y="165" width="0.1916%" height="15" fill="rgb(220,109,13)"/><text x="63.1806%" y="175.50"></text></g><g><title>metadata_decode_entry_def_span (454,924 samples, 0.17%)</title><rect x="62.9540%" y="149" width="0.1682%" height="15" fill="rgb(232,18,1)"/><text x="63.2040%" y="159.50"></text></g><g><title>evaluate_obligation (7,279,691 samples, 2.69%)</title><rect x="60.4794%" y="213" width="2.6915%" height="15" fill="rgb(215,41,42)"/><text x="60.7294%" y="223.50">ev..</text></g><g><title>item_types_checking (11,909,492 samples, 4.40%)</title><rect x="58.8828%" y="261" width="4.4033%" height="15" fill="rgb(224,123,36)"/><text x="59.1328%" y="271.50">item_..</text></g><g><title>check_mod_item_types (11,896,882 samples, 4.40%)</title><rect x="58.8875%" y="245" width="4.3987%" height="15" fill="rgb(240,125,3)"/><text x="59.1375%" y="255.50">check..</text></g><g><title>typeck (10,327,545 samples, 3.82%)</title><rect x="59.4677%" y="229" width="3.8184%" height="15" fill="rgb(205,98,50)"/><text x="59.7177%" y="239.50">type..</text></g><g><title>fn_sig (688,157 samples, 0.25%)</title><rect x="63.4829%" y="229" width="0.2544%" height="15" fill="rgb(205,185,37)"/><text x="63.7329%" y="239.50"></text></g><g><title>named_region_map (463,765 samples, 0.17%)</title><rect x="63.8187%" y="213" width="0.1715%" height="15" fill="rgb(238,207,15)"/><text x="64.0687%" y="223.50"></text></g><g><title>resolve_lifetimes (453,175 samples, 0.17%)</title><rect x="63.8227%" y="197" width="0.1676%" height="15" fill="rgb(213,199,42)"/><text x="64.0727%" y="207.50"></text></g><g><title>lint_levels (352,794 samples, 0.13%)</title><rect x="63.8598%" y="181" width="0.1304%" height="15" fill="rgb(235,201,11)"/><text x="64.1098%" y="191.50"></text></g><g><title>generics_of (706,978 samples, 0.26%)</title><rect x="63.7373%" y="229" width="0.2614%" height="15" fill="rgb(207,46,11)"/><text x="63.9873%" y="239.50"></text></g><g><title>explicit_predicates_of (577,068 samples, 0.21%)</title><rect x="64.1498%" y="197" width="0.2134%" height="15" fill="rgb(241,35,35)"/><text x="64.3998%" y="207.50"></text></g><g><title>predicates_of (1,034,563 samples, 0.38%)</title><rect x="64.0486%" y="229" width="0.3825%" height="15" fill="rgb(243,32,47)"/><text x="64.2986%" y="239.50"></text></g><g><title>predicates_defined_on (931,012 samples, 0.34%)</title><rect x="64.0869%" y="213" width="0.3442%" height="15" fill="rgb(247,202,23)"/><text x="64.3369%" y="223.50"></text></g><g><title>type_collecting (3,327,397 samples, 1.23%)</title><rect x="63.2878%" y="261" width="1.2303%" height="15" fill="rgb(219,102,11)"/><text x="63.5378%" y="271.50"></text></g><g><title>collect_mod_item_types (3,312,517 samples, 1.22%)</title><rect x="63.2933%" y="245" width="1.2247%" height="15" fill="rgb(243,110,44)"/><text x="63.5433%" y="255.50"></text></g><g><title>param_env (388,744 samples, 0.14%)</title><rect x="65.2973%" y="229" width="0.1437%" height="15" fill="rgb(222,74,54)"/><text x="65.5473%" y="239.50"></text></g><g><title>check_impl_item_well_formed (2,392,526 samples, 0.88%)</title><rect x="64.6566%" y="245" width="0.8846%" height="15" fill="rgb(216,99,12)"/><text x="64.9066%" y="255.50"></text></g><g><title>mir_borrowck (364,764 samples, 0.13%)</title><rect x="66.5107%" y="149" width="0.1349%" height="15" fill="rgb(226,22,26)"/><text x="66.7607%" y="159.50"></text></g><g><title>mir_for_ctfe (494,485 samples, 0.18%)</title><rect x="66.4628%" y="181" width="0.1828%" height="15" fill="rgb(217,163,10)"/><text x="66.7128%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (455,525 samples, 0.17%)</title><rect x="66.4772%" y="165" width="0.1684%" height="15" fill="rgb(213,25,53)"/><text x="66.7272%" y="175.50"></text></g><g><title>evaluate_obligation (1,185,754 samples, 0.44%)</title><rect x="66.9810%" y="37" width="0.4384%" height="15" fill="rgb(252,105,26)"/><text x="67.2310%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,908,821 samples, 0.71%)</title><rect x="66.7379%" y="101" width="0.7058%" height="15" fill="rgb(220,39,43)"/><text x="66.9879%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,906,651 samples, 0.70%)</title><rect x="66.7387%" y="85" width="0.7050%" height="15" fill="rgb(229,68,48)"/><text x="66.9887%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,900,771 samples, 0.70%)</title><rect x="66.7408%" y="69" width="0.7028%" height="15" fill="rgb(252,8,32)"/><text x="66.9908%" y="79.50"></text></g><g><title>typeck (1,577,038 samples, 0.58%)</title><rect x="66.8605%" y="53" width="0.5831%" height="15" fill="rgb(223,20,43)"/><text x="67.1105%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,925,221 samples, 0.71%)</title><rect x="66.7340%" y="117" width="0.7118%" height="15" fill="rgb(229,81,49)"/><text x="66.9840%" y="127.50"></text></g><g><title>evaluate_obligation (321,364 samples, 0.12%)</title><rect x="67.5135%" y="101" width="0.1188%" height="15" fill="rgb(236,28,36)"/><text x="67.7635%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,708,270 samples, 1.00%)</title><rect x="66.6480%" y="165" width="1.0013%" height="15" fill="rgb(249,185,26)"/><text x="66.8980%" y="175.50"></text></g><g><title>eval_to_const_value_raw (2,707,420 samples, 1.00%)</title><rect x="66.6483%" y="149" width="1.0010%" height="15" fill="rgb(249,174,33)"/><text x="66.8983%" y="159.50"></text></g><g><title>eval_to_allocation_raw (2,706,500 samples, 1.00%)</title><rect x="66.6486%" y="133" width="1.0007%" height="15" fill="rgb(233,201,37)"/><text x="66.8986%" y="143.50"></text></g><g><title>typeck (550,446 samples, 0.20%)</title><rect x="67.4458%" y="117" width="0.2035%" height="15" fill="rgb(221,78,26)"/><text x="67.6958%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,717,570 samples, 1.00%)</title><rect x="66.6457%" y="181" width="1.0048%" height="15" fill="rgb(250,127,30)"/><text x="66.8957%" y="191.50"></text></g><g><title>eval_to_const_value_raw (3,655,550 samples, 1.35%)</title><rect x="66.3345%" y="229" width="1.3516%" height="15" fill="rgb(230,49,44)"/><text x="66.5845%" y="239.50"></text></g><g><title>eval_to_const_value_raw (3,641,430 samples, 1.35%)</title><rect x="66.3397%" y="213" width="1.3464%" height="15" fill="rgb(229,67,23)"/><text x="66.5897%" y="223.50"></text></g><g><title>eval_to_allocation_raw (3,639,600 samples, 1.35%)</title><rect x="66.3404%" y="197" width="1.3457%" height="15" fill="rgb(249,83,47)"/><text x="66.5904%" y="207.50"></text></g><g><title>evaluate_obligation (408,807 samples, 0.15%)</title><rect x="67.6861%" y="229" width="0.1511%" height="15" fill="rgb(215,43,3)"/><text x="67.9361%" y="239.50"></text></g><g><title>param_env (476,855 samples, 0.18%)</title><rect x="67.9320%" y="229" width="0.1763%" height="15" fill="rgb(238,154,13)"/><text x="68.1820%" y="239.50"></text></g><g><title>region_scope_tree (806,253 samples, 0.30%)</title><rect x="68.1419%" y="229" width="0.2981%" height="15" fill="rgb(219,56,2)"/><text x="68.3919%" y="239.50"></text></g><g><title>check_item_well_formed (7,928,258 samples, 2.93%)</title><rect x="65.5412%" y="245" width="2.9313%" height="15" fill="rgb(233,0,4)"/><text x="65.7912%" y="255.50">ch..</text></g><g><title>analysis (184,633,380 samples, 68.27%)</title><rect x="0.4805%" y="293" width="68.2652%" height="15" fill="rgb(235,30,7)"/><text x="0.7305%" y="303.50">analysis</text></g><g><title>type_check_crate (122,643,932 samples, 45.35%)</title><rect x="23.4001%" y="277" width="45.3456%" height="15" fill="rgb(250,79,13)"/><text x="23.6501%" y="287.50">type_check_crate</text></g><g><title>wf_checking (11,412,637 samples, 4.22%)</title><rect x="64.5261%" y="261" width="4.2196%" height="15" fill="rgb(211,146,34)"/><text x="64.7761%" y="271.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (738,719 samples, 0.27%)</title><rect x="68.4726%" y="245" width="0.2731%" height="15" fill="rgb(228,22,38)"/><text x="68.7226%" y="255.50"></text></g><g><title>codegen_crate (366,354 samples, 0.14%)</title><rect x="68.7497%" y="293" width="0.1355%" height="15" fill="rgb(235,168,5)"/><text x="68.9997%" y="303.50"></text></g><g><title>AST_validation (480,705 samples, 0.18%)</title><rect x="68.9696%" y="277" width="0.1777%" height="15" fill="rgb(221,155,16)"/><text x="69.2196%" y="287.50"></text></g><g><title>metadata_load_macro (454,085 samples, 0.17%)</title><rect x="88.8485%" y="245" width="0.1679%" height="15" fill="rgb(215,215,53)"/><text x="89.0985%" y="255.50"></text></g><g><title>metadata_register_crate (2,655,990 samples, 0.98%)</title><rect x="89.0164%" y="245" width="0.9820%" height="15" fill="rgb(223,4,10)"/><text x="89.2664%" y="255.50"></text></g><g><title>metadata_register_crate (967,080 samples, 0.36%)</title><rect x="89.6409%" y="229" width="0.3576%" height="15" fill="rgb(234,103,6)"/><text x="89.8909%" y="239.50"></text></g><g><title>macro_expand_crate (57,533,459 samples, 21.27%)</title><rect x="69.2264%" y="277" width="21.2721%" height="15" fill="rgb(227,97,0)"/><text x="69.4764%" y="287.50">macro_expand_crate</text></g><g><title>expand_crate (57,518,779 samples, 21.27%)</title><rect x="69.2318%" y="261" width="21.2666%" height="15" fill="rgb(234,150,53)"/><text x="69.4818%" y="271.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,352,435 samples, 0.50%)</title><rect x="89.9984%" y="245" width="0.5000%" height="15" fill="rgb(228,201,54)"/><text x="90.2484%" y="255.50"></text></g><g><title>finalize_imports (569,207 samples, 0.21%)</title><rect x="90.5264%" y="261" width="0.2105%" height="15" fill="rgb(222,22,37)"/><text x="90.7764%" y="271.50"></text></g><g><title>finalize_macro_resolutions (307,043 samples, 0.11%)</title><rect x="90.7369%" y="261" width="0.1135%" height="15" fill="rgb(237,53,32)"/><text x="90.9869%" y="271.50"></text></g><g><title>late_resolve_crate (4,013,235 samples, 1.48%)</title><rect x="90.8504%" y="261" width="1.4838%" height="15" fill="rgb(233,25,53)"/><text x="91.1004%" y="271.50"></text></g><g><title>configure_and_expand (63,671,407 samples, 23.54%)</title><rect x="68.8851%" y="293" width="23.5415%" height="15" fill="rgb(210,40,34)"/><text x="69.1351%" y="303.50">configure_and_expand</text></g><g><title>resolve_crate (5,144,927 samples, 1.90%)</title><rect x="90.5243%" y="277" width="1.9023%" height="15" fill="rgb(241,220,44)"/><text x="90.7743%" y="287.50">r..</text></g><g><title>drop_ast (522,366 samples, 0.19%)</title><rect x="92.4266%" y="293" width="0.1931%" height="15" fill="rgb(235,28,35)"/><text x="92.6766%" y="303.50"></text></g><g><title>early_lint_checks (860,320 samples, 0.32%)</title><rect x="92.6267%" y="293" width="0.3181%" height="15" fill="rgb(210,56,17)"/><text x="92.8767%" y="303.50"></text></g><g><title>free_global_ctxt (4,264,257 samples, 1.58%)</title><rect x="92.9448%" y="293" width="1.5766%" height="15" fill="rgb(224,130,29)"/><text x="93.1948%" y="303.50"></text></g><g><title>generate_crate_metadata (5,163,757 samples, 1.91%)</title><rect x="94.5215%" y="293" width="1.9092%" height="15" fill="rgb(235,212,8)"/><text x="94.7715%" y="303.50">g..</text></g><g><title>hir_lowering (6,477,132 samples, 2.39%)</title><rect x="96.4307%" y="293" width="2.3948%" height="15" fill="rgb(223,33,50)"/><text x="96.6807%" y="303.50">hi..</text></g><g><title>parse_crate (623,157 samples, 0.23%)</title><rect x="98.8491%" y="293" width="0.2304%" height="15" fill="rgb(219,149,13)"/><text x="99.0991%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (1,236,474 samples, 0.46%)</title><rect x="99.1794%" y="293" width="0.4572%" height="15" fill="rgb(250,156,29)"/><text x="99.4294%" y="303.50"></text></g><g><title>all (270,464,963 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(216,193,19)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (270,464,963 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(216,135,14)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (868,100 samples, 0.32%)</title><rect x="99.6790%" y="293" width="0.3210%" height="15" fill="rgb(241,47,5)"/><text x="99.9290%" y="303.50"></text></g></svg></svg>