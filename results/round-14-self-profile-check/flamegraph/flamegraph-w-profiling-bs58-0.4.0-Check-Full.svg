<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (216,674 samples, 0.16%)</title><rect x="10.4990%" y="229" width="0.1576%" height="15" fill="rgb(227,0,7)"/><text x="10.7490%" y="239.50"></text></g><g><title>item_attrs (216,682 samples, 0.16%)</title><rect x="11.0144%" y="197" width="0.1577%" height="15" fill="rgb(217,0,24)"/><text x="11.2644%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (209,251 samples, 0.15%)</title><rect x="11.0198%" y="181" width="0.1522%" height="15" fill="rgb(221,193,54)"/><text x="11.2698%" y="191.50"></text></g><g><title>codegen_fn_attrs (317,513 samples, 0.23%)</title><rect x="10.9549%" y="213" width="0.2310%" height="15" fill="rgb(248,212,6)"/><text x="11.2049%" y="223.50"></text></g><g><title>is_copy_raw (139,951 samples, 0.10%)</title><rect x="13.1608%" y="165" width="0.1018%" height="15" fill="rgb(208,68,35)"/><text x="13.4108%" y="175.50"></text></g><g><title>adt_drop_tys (208,462 samples, 0.15%)</title><rect x="13.1481%" y="181" width="0.1517%" height="15" fill="rgb(232,128,0)"/><text x="13.3981%" y="191.50"></text></g><g><title>needs_drop_raw (1,080,551 samples, 0.79%)</title><rect x="13.0735%" y="197" width="0.7862%" height="15" fill="rgb(207,160,47)"/><text x="13.3235%" y="207.50"></text></g><g><title>is_copy_raw (769,468 samples, 0.56%)</title><rect x="13.2998%" y="181" width="0.5599%" height="15" fill="rgb(228,23,34)"/><text x="13.5498%" y="191.50"></text></g><g><title>evaluate_obligation (638,456 samples, 0.46%)</title><rect x="13.3951%" y="165" width="0.4645%" height="15" fill="rgb(218,30,26)"/><text x="13.6451%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (217,762 samples, 0.16%)</title><rect x="13.9565%" y="181" width="0.1584%" height="15" fill="rgb(220,122,19)"/><text x="14.2065%" y="191.50"></text></g><g><title>impl_parent (209,772 samples, 0.15%)</title><rect x="14.3482%" y="165" width="0.1526%" height="15" fill="rgb(250,228,42)"/><text x="14.5982%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (142,931 samples, 0.10%)</title><rect x="14.3968%" y="149" width="0.1040%" height="15" fill="rgb(240,193,28)"/><text x="14.6468%" y="159.50"></text></g><g><title>specialization_graph_of (975,521 samples, 0.71%)</title><rect x="14.1273%" y="181" width="0.7098%" height="15" fill="rgb(216,20,37)"/><text x="14.3773%" y="191.50"></text></g><g><title>impl_trait_ref (462,166 samples, 0.34%)</title><rect x="14.5008%" y="165" width="0.3363%" height="15" fill="rgb(206,188,39)"/><text x="14.7508%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (398,016 samples, 0.29%)</title><rect x="14.5475%" y="149" width="0.2896%" height="15" fill="rgb(217,207,13)"/><text x="14.7975%" y="159.50"></text></g><g><title>resolve_instance (1,399,115 samples, 1.02%)</title><rect x="13.8597%" y="197" width="1.0180%" height="15" fill="rgb(231,73,38)"/><text x="14.1097%" y="207.50"></text></g><g><title>thir_body (863,361 samples, 0.63%)</title><rect x="14.8954%" y="197" width="0.6282%" height="15" fill="rgb(225,20,46)"/><text x="15.1454%" y="207.50"></text></g><g><title>mir_const (7,528,216 samples, 5.48%)</title><rect x="10.0634%" y="245" width="5.4774%" height="15" fill="rgb(210,31,41)"/><text x="10.3134%" y="255.50">mir_con..</text></g><g><title>unsafety_check_result (6,712,906 samples, 4.88%)</title><rect x="10.6567%" y="229" width="4.8842%" height="15" fill="rgb(221,200,47)"/><text x="10.9067%" y="239.50">unsafe..</text></g><g><title>mir_built (5,985,439 samples, 4.35%)</title><rect x="11.1859%" y="213" width="4.3549%" height="15" fill="rgb(226,26,5)"/><text x="11.4359%" y="223.50">mir_b..</text></g><g><title>thir_body (150,542 samples, 0.11%)</title><rect x="16.3360%" y="181" width="0.1095%" height="15" fill="rgb(249,33,26)"/><text x="16.5860%" y="191.50"></text></g><g><title>mir_const (880,340 samples, 0.64%)</title><rect x="15.8080%" y="229" width="0.6405%" height="15" fill="rgb(235,183,28)"/><text x="16.0580%" y="239.50"></text></g><g><title>unsafety_check_result (653,028 samples, 0.48%)</title><rect x="15.9734%" y="213" width="0.4751%" height="15" fill="rgb(221,5,38)"/><text x="16.2234%" y="223.50"></text></g><g><title>mir_built (539,447 samples, 0.39%)</title><rect x="16.0560%" y="197" width="0.3925%" height="15" fill="rgb(247,18,42)"/><text x="16.3060%" y="207.50"></text></g><g><title>mir_const_qualif (1,276,908 samples, 0.93%)</title><rect x="15.5408%" y="245" width="0.9291%" height="15" fill="rgb(241,131,45)"/><text x="15.7908%" y="255.50"></text></g><g><title>mir_promoted (9,602,881 samples, 6.99%)</title><rect x="9.4859%" y="261" width="6.9869%" height="15" fill="rgb(249,31,29)"/><text x="9.7359%" y="271.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (319,864 samples, 0.23%)</title><rect x="16.4750%" y="261" width="0.2327%" height="15" fill="rgb(225,111,53)"/><text x="16.7250%" y="271.50"></text></g><g><title>type_op_normalize_fn_sig (1,150,436 samples, 0.84%)</title><rect x="16.7078%" y="261" width="0.8370%" height="15" fill="rgb(238,160,17)"/><text x="16.9578%" y="271.50"></text></g><g><title>normalize_projection_ty (815,602 samples, 0.59%)</title><rect x="16.9514%" y="245" width="0.5934%" height="15" fill="rgb(214,148,48)"/><text x="17.2014%" y="255.50"></text></g><g><title>type_op_normalize_predicate (233,730 samples, 0.17%)</title><rect x="17.5448%" y="261" width="0.1701%" height="15" fill="rgb(232,36,49)"/><text x="17.7948%" y="271.50"></text></g><g><title>type_op_prove_predicate (2,666,999 samples, 1.94%)</title><rect x="17.7350%" y="261" width="1.9405%" height="15" fill="rgb(209,103,24)"/><text x="17.9850%" y="271.50">t..</text></g><g><title>MIR_borrow_checking (26,160,139 samples, 19.03%)</title><rect x="0.6487%" y="293" width="19.0337%" height="15" fill="rgb(229,88,8)"/><text x="0.8987%" y="303.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,051,017 samples, 18.95%)</title><rect x="0.7281%" y="277" width="18.9543%" height="15" fill="rgb(213,181,19)"/><text x="0.9781%" y="287.50">mir_borrowck</text></g><g><title>MIR_effect_checking (460,475 samples, 0.34%)</title><rect x="19.6823%" y="293" width="0.3350%" height="15" fill="rgb(254,191,54)"/><text x="19.9323%" y="303.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (404,695 samples, 0.29%)</title><rect x="19.7229%" y="277" width="0.2944%" height="15" fill="rgb(241,83,37)"/><text x="19.9729%" y="287.50"></text></g><g><title>hir_module_items (169,304 samples, 0.12%)</title><rect x="20.0174%" y="293" width="0.1232%" height="15" fill="rgb(233,36,39)"/><text x="20.2674%" y="303.50"></text></g><g><title>should_inherit_track_caller (142,752 samples, 0.10%)</title><rect x="20.4337%" y="245" width="0.1039%" height="15" fill="rgb(226,3,54)"/><text x="20.6837%" y="255.50"></text></g><g><title>codegen_fn_attrs (303,564 samples, 0.22%)</title><rect x="20.3308%" y="261" width="0.2209%" height="15" fill="rgb(245,192,40)"/><text x="20.5808%" y="271.50"></text></g><g><title>check_mod_attrs (541,486 samples, 0.39%)</title><rect x="20.1577%" y="277" width="0.3940%" height="15" fill="rgb(238,167,29)"/><text x="20.4077%" y="287.50"></text></g><g><title>check_mod_unstable_api_usage (354,493 samples, 0.26%)</title><rect x="20.6815%" y="277" width="0.2579%" height="15" fill="rgb(232,182,51)"/><text x="20.9315%" y="287.50"></text></g><g><title>misc_checking_1 (1,139,383 samples, 0.83%)</title><rect x="20.1409%" y="293" width="0.8290%" height="15" fill="rgb(231,60,39)"/><text x="20.3909%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (437,615 samples, 0.32%)</title><rect x="20.9712%" y="277" width="0.3184%" height="15" fill="rgb(208,69,12)"/><text x="21.2212%" y="287.50"></text></g><g><title>check_mod_liveness (338,243 samples, 0.25%)</title><rect x="21.0435%" y="261" width="0.2461%" height="15" fill="rgb(235,93,37)"/><text x="21.2935%" y="271.50"></text></g><g><title>misc_checking_2 (1,043,322 samples, 0.76%)</title><rect x="20.9699%" y="293" width="0.7591%" height="15" fill="rgb(213,116,39)"/><text x="21.2199%" y="303.50"></text></g><g><title>match_checking (603,867 samples, 0.44%)</title><rect x="21.2896%" y="277" width="0.4394%" height="15" fill="rgb(222,207,29)"/><text x="21.5396%" y="287.50"></text></g><g><title>check_match (574,657 samples, 0.42%)</title><rect x="21.3109%" y="261" width="0.4181%" height="15" fill="rgb(206,96,30)"/><text x="21.5609%" y="271.50"></text></g><g><title>check_private_in_public (190,742 samples, 0.14%)</title><rect x="21.7359%" y="277" width="0.1388%" height="15" fill="rgb(218,138,4)"/><text x="21.9859%" y="287.50"></text></g><g><title>death_checking (441,955 samples, 0.32%)</title><rect x="21.8747%" y="277" width="0.3216%" height="15" fill="rgb(250,191,14)"/><text x="22.1247%" y="287.50"></text></g><g><title>layout_of (140,942 samples, 0.10%)</title><rect x="26.1946%" y="37" width="0.1025%" height="15" fill="rgb(239,60,40)"/><text x="26.4446%" y="47.50"></text></g><g><title>layout_of (190,073 samples, 0.14%)</title><rect x="26.1600%" y="53" width="0.1383%" height="15" fill="rgb(206,27,48)"/><text x="26.4100%" y="63.50"></text></g><g><title>mir_for_ctfe (4,554,520 samples, 3.31%)</title><rect x="23.0966%" y="133" width="3.3138%" height="15" fill="rgb(225,35,8)"/><text x="23.3466%" y="143.50">mir..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,396,257 samples, 3.20%)</title><rect x="23.2118%" y="117" width="3.1986%" height="15" fill="rgb(250,213,24)"/><text x="23.4618%" y="127.50">try..</text></g><g><title>eval_to_const_value_raw (4,385,847 samples, 3.19%)</title><rect x="23.2194%" y="101" width="3.1911%" height="15" fill="rgb(247,123,22)"/><text x="23.4694%" y="111.50">eva..</text></g><g><title>eval_to_const_value_raw (4,382,517 samples, 3.19%)</title><rect x="23.2218%" y="85" width="3.1886%" height="15" fill="rgb(231,138,38)"/><text x="23.4718%" y="95.50">eva..</text></g><g><title>eval_to_allocation_raw (4,373,857 samples, 3.18%)</title><rect x="23.2281%" y="69" width="3.1823%" height="15" fill="rgb(231,145,46)"/><text x="23.4781%" y="79.50">eva..</text></g><g><title>eval_to_const_value_raw (4,632,961 samples, 3.37%)</title><rect x="23.0450%" y="181" width="3.3709%" height="15" fill="rgb(251,118,11)"/><text x="23.2950%" y="191.50">eva..</text></g><g><title>eval_to_const_value_raw (4,628,891 samples, 3.37%)</title><rect x="23.0479%" y="165" width="3.3679%" height="15" fill="rgb(217,147,25)"/><text x="23.2979%" y="175.50">eva..</text></g><g><title>eval_to_allocation_raw (4,623,550 samples, 3.36%)</title><rect x="23.0518%" y="149" width="3.3640%" height="15" fill="rgb(247,81,37)"/><text x="23.3018%" y="159.50">eva..</text></g><g><title>eval_to_const_value_raw (4,773,753 samples, 3.47%)</title><rect x="22.9488%" y="245" width="3.4733%" height="15" fill="rgb(209,12,38)"/><text x="23.1988%" y="255.50">eva..</text></g><g><title>eval_to_const_value_raw (4,765,963 samples, 3.47%)</title><rect x="22.9544%" y="229" width="3.4676%" height="15" fill="rgb(227,1,9)"/><text x="23.2044%" y="239.50">eva..</text></g><g><title>eval_to_allocation_raw (4,763,013 samples, 3.47%)</title><rect x="22.9566%" y="213" width="3.4655%" height="15" fill="rgb(248,47,43)"/><text x="23.2066%" y="223.50">eva..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,658,132 samples, 3.39%)</title><rect x="23.0329%" y="197" width="3.3892%" height="15" fill="rgb(221,10,30)"/><text x="23.2829%" y="207.50">try..</text></g><g><title>param_env (154,962 samples, 0.11%)</title><rect x="26.4221%" y="245" width="0.1127%" height="15" fill="rgb(210,229,1)"/><text x="26.6721%" y="255.50"></text></g><g><title>crate_lints (7,070,658 samples, 5.14%)</title><rect x="22.1978%" y="261" width="5.1445%" height="15" fill="rgb(222,148,37)"/><text x="22.4478%" y="271.50">crate_..</text></g><g><title>type_of (1,101,154 samples, 0.80%)</title><rect x="26.5411%" y="245" width="0.8012%" height="15" fill="rgb(234,67,33)"/><text x="26.7911%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (872,680 samples, 0.63%)</title><rect x="26.7073%" y="229" width="0.6349%" height="15" fill="rgb(247,98,35)"/><text x="26.9573%" y="239.50"></text></g><g><title>lint_checking (7,491,953 samples, 5.45%)</title><rect x="22.1962%" y="277" width="5.4510%" height="15" fill="rgb(247,138,52)"/><text x="22.4462%" y="287.50">lint_ch..</text></g><g><title>module_lints (419,185 samples, 0.30%)</title><rect x="27.3423%" y="261" width="0.3050%" height="15" fill="rgb(213,79,30)"/><text x="27.5923%" y="271.50"></text></g><g><title>lint_mod (413,755 samples, 0.30%)</title><rect x="27.3462%" y="245" width="0.3010%" height="15" fill="rgb(246,177,23)"/><text x="27.5962%" y="255.50"></text></g><g><title>privacy_access_levels (256,223 samples, 0.19%)</title><rect x="27.6473%" y="277" width="0.1864%" height="15" fill="rgb(230,62,27)"/><text x="27.8973%" y="287.50"></text></g><g><title>privacy_checking_modules (770,288 samples, 0.56%)</title><rect x="27.8337%" y="277" width="0.5604%" height="15" fill="rgb(216,154,8)"/><text x="28.0837%" y="287.50"></text></g><g><title>check_mod_privacy (766,808 samples, 0.56%)</title><rect x="27.8362%" y="261" width="0.5579%" height="15" fill="rgb(244,35,45)"/><text x="28.0862%" y="271.50"></text></g><g><title>misc_checking_3 (9,175,951 samples, 6.68%)</title><rect x="21.7290%" y="293" width="6.6763%" height="15" fill="rgb(251,115,12)"/><text x="21.9790%" y="303.50">misc_chec..</text></g><g><title>impl_trait_ref (179,152 samples, 0.13%)</title><rect x="28.6443%" y="197" width="0.1303%" height="15" fill="rgb(240,54,50)"/><text x="28.8943%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (160,541 samples, 0.12%)</title><rect x="28.6578%" y="181" width="0.1168%" height="15" fill="rgb(233,84,52)"/><text x="28.9078%" y="191.50"></text></g><g><title>adt_destructor (407,225 samples, 0.30%)</title><rect x="28.4959%" y="245" width="0.2963%" height="15" fill="rgb(207,117,47)"/><text x="28.7459%" y="255.50"></text></g><g><title>coherent_trait (403,765 samples, 0.29%)</title><rect x="28.4984%" y="229" width="0.2938%" height="15" fill="rgb(249,43,39)"/><text x="28.7484%" y="239.50"></text></g><g><title>specialization_graph_of (401,955 samples, 0.29%)</title><rect x="28.4997%" y="213" width="0.2925%" height="15" fill="rgb(209,38,44)"/><text x="28.7497%" y="223.50"></text></g><g><title>is_copy_raw (234,172 samples, 0.17%)</title><rect x="28.7922%" y="245" width="0.1704%" height="15" fill="rgb(236,212,23)"/><text x="29.0422%" y="255.50"></text></g><g><title>evaluate_obligation (209,232 samples, 0.15%)</title><rect x="28.8103%" y="229" width="0.1522%" height="15" fill="rgb(242,79,21)"/><text x="29.0603%" y="239.50"></text></g><g><title>impl_parent (2,417,590 samples, 1.76%)</title><rect x="31.7793%" y="229" width="1.7590%" height="15" fill="rgb(211,96,35)"/><text x="32.0293%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,317,876 samples, 0.96%)</title><rect x="32.5794%" y="213" width="0.9589%" height="15" fill="rgb(253,215,40)"/><text x="32.8294%" y="223.50"></text></g><g><title>impl_trait_ref (4,929,745 samples, 3.59%)</title><rect x="33.5383%" y="229" width="3.5868%" height="15" fill="rgb(211,81,21)"/><text x="33.7883%" y="239.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,987,512 samples, 2.90%)</title><rect x="34.2239%" y="213" width="2.9012%" height="15" fill="rgb(208,190,38)"/><text x="34.4739%" y="223.50">me..</text></g><g><title>coherent_trait (12,675,660 samples, 9.22%)</title><rect x="28.4644%" y="261" width="9.2226%" height="15" fill="rgb(235,213,38)"/><text x="28.7144%" y="271.50">coherent_trait</text></g><g><title>specialization_graph_of (11,869,702 samples, 8.64%)</title><rect x="29.0508%" y="245" width="8.6362%" height="15" fill="rgb(237,122,38)"/><text x="29.3008%" y="255.50">specializati..</text></g><g><title>trait_impls_of (770,210 samples, 0.56%)</title><rect x="37.1266%" y="229" width="0.5604%" height="15" fill="rgb(244,218,35)"/><text x="37.3766%" y="239.50"></text></g><g><title>implementations_of_trait (207,261 samples, 0.15%)</title><rect x="37.5362%" y="213" width="0.1508%" height="15" fill="rgb(240,68,47)"/><text x="37.7862%" y="223.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (171,300 samples, 0.12%)</title><rect x="37.5624%" y="197" width="0.1246%" height="15" fill="rgb(210,16,53)"/><text x="37.8124%" y="207.50"></text></g><g><title>coherence_checking (12,749,881 samples, 9.28%)</title><rect x="28.4505%" y="277" width="9.2766%" height="15" fill="rgb(235,124,12)"/><text x="28.7005%" y="287.50">coherence_che..</text></g><g><title>associated_item (299,683 samples, 0.22%)</title><rect x="50.1567%" y="213" width="0.2180%" height="15" fill="rgb(224,169,11)"/><text x="50.4067%" y="223.50"></text></g><g><title>metadata_decode_entry_associated_item (242,543 samples, 0.18%)</title><rect x="50.1983%" y="197" width="0.1765%" height="15" fill="rgb(250,166,2)"/><text x="50.4483%" y="207.50"></text></g><g><title>associated_items (421,956 samples, 0.31%)</title><rect x="50.0808%" y="229" width="0.3070%" height="15" fill="rgb(242,216,29)"/><text x="50.3308%" y="239.50"></text></g><g><title>dropck_outlives (277,335 samples, 0.20%)</title><rect x="50.4193%" y="229" width="0.2018%" height="15" fill="rgb(230,116,27)"/><text x="50.6693%" y="239.50"></text></g><g><title>adt_sized_constraint (157,381 samples, 0.11%)</title><rect x="51.8037%" y="213" width="0.1145%" height="15" fill="rgb(228,99,48)"/><text x="52.0537%" y="223.50"></text></g><g><title>generics_of (451,045 samples, 0.33%)</title><rect x="51.9182%" y="213" width="0.3282%" height="15" fill="rgb(253,11,6)"/><text x="52.1682%" y="223.50"></text></g><g><title>metadata_decode_entry_generics_of (388,475 samples, 0.28%)</title><rect x="51.9637%" y="197" width="0.2826%" height="15" fill="rgb(247,143,39)"/><text x="52.2137%" y="207.50"></text></g><g><title>impl_trait_ref (245,784 samples, 0.18%)</title><rect x="52.2695%" y="213" width="0.1788%" height="15" fill="rgb(236,97,10)"/><text x="52.5195%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (186,593 samples, 0.14%)</title><rect x="52.3125%" y="197" width="0.1358%" height="15" fill="rgb(233,208,19)"/><text x="52.5625%" y="207.50"></text></g><g><title>trait_impls_of (239,302 samples, 0.17%)</title><rect x="52.6413%" y="213" width="0.1741%" height="15" fill="rgb(216,164,2)"/><text x="52.8913%" y="223.50"></text></g><g><title>evaluate_obligation (3,021,163 samples, 2.20%)</title><rect x="50.6211%" y="229" width="2.1981%" height="15" fill="rgb(220,129,5)"/><text x="50.8711%" y="239.50">e..</text></g><g><title>generics_of (676,897 samples, 0.49%)</title><rect x="52.9172%" y="229" width="0.4925%" height="15" fill="rgb(242,17,10)"/><text x="53.1672%" y="239.50"></text></g><g><title>metadata_decode_entry_generics_of (535,075 samples, 0.39%)</title><rect x="53.0204%" y="213" width="0.3893%" height="15" fill="rgb(242,107,0)"/><text x="53.2704%" y="223.50"></text></g><g><title>item_attrs (160,362 samples, 0.12%)</title><rect x="53.4965%" y="229" width="0.1167%" height="15" fill="rgb(251,28,31)"/><text x="53.7465%" y="239.50"></text></g><g><title>metadata_decode_entry_item_attrs (154,061 samples, 0.11%)</title><rect x="53.5011%" y="213" width="0.1121%" height="15" fill="rgb(233,223,10)"/><text x="53.7511%" y="223.50"></text></g><g><title>method_autoderef_steps (247,064 samples, 0.18%)</title><rect x="53.6570%" y="229" width="0.1798%" height="15" fill="rgb(215,21,27)"/><text x="53.9070%" y="239.50"></text></g><g><title>predicates_of (307,276 samples, 0.22%)</title><rect x="54.0265%" y="229" width="0.2236%" height="15" fill="rgb(232,23,21)"/><text x="54.2765%" y="239.50"></text></g><g><title>predicates_defined_on (207,715 samples, 0.15%)</title><rect x="54.0990%" y="213" width="0.1511%" height="15" fill="rgb(244,5,23)"/><text x="54.3490%" y="223.50"></text></g><g><title>associated_item (196,173 samples, 0.14%)</title><rect x="61.3356%" y="197" width="0.1427%" height="15" fill="rgb(226,81,46)"/><text x="61.5856%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (152,332 samples, 0.11%)</title><rect x="61.3675%" y="181" width="0.1108%" height="15" fill="rgb(247,70,30)"/><text x="61.6175%" y="191.50"></text></g><g><title>associated_items (281,683 samples, 0.20%)</title><rect x="61.2865%" y="213" width="0.2049%" height="15" fill="rgb(212,68,19)"/><text x="61.5365%" y="223.50"></text></g><g><title>adt_dtorck_constraint (210,543 samples, 0.15%)</title><rect x="61.5996%" y="197" width="0.1532%" height="15" fill="rgb(240,187,13)"/><text x="61.8496%" y="207.50"></text></g><g><title>dropck_outlives (349,813 samples, 0.25%)</title><rect x="61.5210%" y="213" width="0.2545%" height="15" fill="rgb(223,113,26)"/><text x="61.7710%" y="223.50"></text></g><g><title>predicates_of (174,671 samples, 0.13%)</title><rect x="62.8510%" y="197" width="0.1271%" height="15" fill="rgb(206,192,2)"/><text x="63.1010%" y="207.50"></text></g><g><title>specializes (832,769 samples, 0.61%)</title><rect x="62.9781%" y="197" width="0.6059%" height="15" fill="rgb(241,108,4)"/><text x="63.2281%" y="207.50"></text></g><g><title>param_env (666,416 samples, 0.48%)</title><rect x="63.0991%" y="181" width="0.4849%" height="15" fill="rgb(247,173,49)"/><text x="63.3491%" y="191.50"></text></g><g><title>def_span (502,705 samples, 0.37%)</title><rect x="63.2182%" y="165" width="0.3658%" height="15" fill="rgb(224,114,35)"/><text x="63.4682%" y="175.50"></text></g><g><title>metadata_decode_entry_def_span (489,405 samples, 0.36%)</title><rect x="63.2279%" y="149" width="0.3561%" height="15" fill="rgb(245,159,27)"/><text x="63.4779%" y="159.50"></text></g><g><title>trait_impls_of (352,624 samples, 0.26%)</title><rect x="63.5935%" y="197" width="0.2566%" height="15" fill="rgb(245,172,44)"/><text x="63.8435%" y="207.50"></text></g><g><title>implementations_of_trait (150,652 samples, 0.11%)</title><rect x="63.7405%" y="181" width="0.1096%" height="15" fill="rgb(236,23,11)"/><text x="63.9905%" y="191.50"></text></g><g><title>evaluate_obligation (2,852,142 samples, 2.08%)</title><rect x="61.7755%" y="213" width="2.0752%" height="15" fill="rgb(205,117,38)"/><text x="62.0255%" y="223.50">e..</text></g><g><title>generics_of (897,160 samples, 0.65%)</title><rect x="63.9104%" y="213" width="0.6528%" height="15" fill="rgb(237,72,25)"/><text x="64.1604%" y="223.50"></text></g><g><title>metadata_decode_entry_generics_of (655,890 samples, 0.48%)</title><rect x="64.0859%" y="197" width="0.4772%" height="15" fill="rgb(244,70,9)"/><text x="64.3359%" y="207.50"></text></g><g><title>impl_item_implementor_ids (374,595 samples, 0.27%)</title><rect x="64.5640%" y="213" width="0.2725%" height="15" fill="rgb(217,125,39)"/><text x="64.8140%" y="223.50"></text></g><g><title>associated_items (356,815 samples, 0.26%)</title><rect x="64.5770%" y="197" width="0.2596%" height="15" fill="rgb(235,36,10)"/><text x="64.8270%" y="207.50"></text></g><g><title>method_autoderef_steps (218,643 samples, 0.16%)</title><rect x="65.1098%" y="213" width="0.1591%" height="15" fill="rgb(251,123,47)"/><text x="65.3598%" y="223.50"></text></g><g><title>predicates_of (263,062 samples, 0.19%)</title><rect x="65.2804%" y="213" width="0.1914%" height="15" fill="rgb(221,13,13)"/><text x="65.5304%" y="223.50"></text></g><g><title>predicates_defined_on (177,422 samples, 0.13%)</title><rect x="65.3427%" y="197" width="0.1291%" height="15" fill="rgb(238,131,9)"/><text x="65.5927%" y="207.50"></text></g><g><title>typeck (15,363,539 samples, 11.18%)</title><rect x="54.3783%" y="229" width="11.1782%" height="15" fill="rgb(211,50,8)"/><text x="54.6283%" y="239.50">typeck</text></g><g><title>item_bodies_checking (38,251,302 samples, 27.83%)</title><rect x="37.7520%" y="277" width="27.8310%" height="15" fill="rgb(245,182,24)"/><text x="38.0020%" y="287.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (38,248,202 samples, 27.83%)</title><rect x="37.7543%" y="261" width="27.8287%" height="15" fill="rgb(242,14,37)"/><text x="38.0043%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (38,172,872 samples, 27.77%)</title><rect x="37.8091%" y="245" width="27.7739%" height="15" fill="rgb(246,228,12)"/><text x="38.0591%" y="255.50">typeck</text></g><g><title>item_types_checking (1,163,223 samples, 0.85%)</title><rect x="65.5830%" y="277" width="0.8463%" height="15" fill="rgb(213,55,15)"/><text x="65.8330%" y="287.50"></text></g><g><title>check_mod_item_types (1,158,763 samples, 0.84%)</title><rect x="65.5862%" y="261" width="0.8431%" height="15" fill="rgb(209,9,3)"/><text x="65.8362%" y="271.50"></text></g><g><title>typeck (197,512 samples, 0.14%)</title><rect x="66.2856%" y="245" width="0.1437%" height="15" fill="rgb(230,59,30)"/><text x="66.5356%" y="255.50"></text></g><g><title>fn_sig (215,566 samples, 0.16%)</title><rect x="66.6230%" y="245" width="0.1568%" height="15" fill="rgb(209,121,21)"/><text x="66.8730%" y="255.50"></text></g><g><title>named_region_map (434,766 samples, 0.32%)</title><rect x="66.9612%" y="229" width="0.3163%" height="15" fill="rgb(220,109,13)"/><text x="67.2112%" y="239.50"></text></g><g><title>resolve_lifetimes (413,146 samples, 0.30%)</title><rect x="66.9770%" y="213" width="0.3006%" height="15" fill="rgb(232,18,1)"/><text x="67.2270%" y="223.50"></text></g><g><title>lint_levels (148,962 samples, 0.11%)</title><rect x="67.1692%" y="197" width="0.1084%" height="15" fill="rgb(215,41,42)"/><text x="67.4192%" y="207.50"></text></g><g><title>generics_of (698,508 samples, 0.51%)</title><rect x="66.7799%" y="245" width="0.5082%" height="15" fill="rgb(224,123,36)"/><text x="67.0299%" y="255.50"></text></g><g><title>explicit_predicates_of (236,322 samples, 0.17%)</title><rect x="67.4100%" y="213" width="0.1719%" height="15" fill="rgb(240,125,3)"/><text x="67.6600%" y="223.50"></text></g><g><title>predicates_of (591,494 samples, 0.43%)</title><rect x="67.3254%" y="245" width="0.4304%" height="15" fill="rgb(205,98,50)"/><text x="67.5754%" y="255.50"></text></g><g><title>predicates_defined_on (546,424 samples, 0.40%)</title><rect x="67.3582%" y="229" width="0.3976%" height="15" fill="rgb(205,185,37)"/><text x="67.6082%" y="239.50"></text></g><g><title>inferred_outlives_of (238,852 samples, 0.17%)</title><rect x="67.5820%" y="213" width="0.1738%" height="15" fill="rgb(238,207,15)"/><text x="67.8320%" y="223.50"></text></g><g><title>inferred_outlives_crate (217,812 samples, 0.16%)</title><rect x="67.5973%" y="197" width="0.1585%" height="15" fill="rgb(213,199,42)"/><text x="67.8473%" y="207.50"></text></g><g><title>type_of (139,091 samples, 0.10%)</title><rect x="67.6545%" y="181" width="0.1012%" height="15" fill="rgb(235,201,11)"/><text x="67.9045%" y="191.50"></text></g><g><title>type_collecting (1,967,702 samples, 1.43%)</title><rect x="66.4304%" y="277" width="1.4317%" height="15" fill="rgb(207,46,11)"/><text x="66.6804%" y="287.50"></text></g><g><title>collect_mod_item_types (1,958,232 samples, 1.42%)</title><rect x="66.4373%" y="261" width="1.4248%" height="15" fill="rgb(241,35,35)"/><text x="66.6873%" y="271.50"></text></g><g><title>evaluate_obligation (468,192 samples, 0.34%)</title><rect x="68.9308%" y="245" width="0.3406%" height="15" fill="rgb(243,32,47)"/><text x="69.1808%" y="255.50"></text></g><g><title>implied_outlives_bounds (186,214 samples, 0.14%)</title><rect x="69.2715%" y="245" width="0.1355%" height="15" fill="rgb(247,202,23)"/><text x="69.5215%" y="255.50"></text></g><g><title>param_env (190,552 samples, 0.14%)</title><rect x="69.4070%" y="245" width="0.1386%" height="15" fill="rgb(219,102,11)"/><text x="69.6570%" y="255.50"></text></g><g><title>region_scope_tree (330,364 samples, 0.24%)</title><rect x="69.5747%" y="245" width="0.2404%" height="15" fill="rgb(243,110,44)"/><text x="69.8247%" y="255.50"></text></g><g><title>check_impl_item_well_formed (2,528,052 samples, 1.84%)</title><rect x="67.9847%" y="261" width="1.8394%" height="15" fill="rgb(222,74,54)"/><text x="68.2347%" y="271.50">c..</text></g><g><title>evaluate_obligation (276,233 samples, 0.20%)</title><rect x="70.5777%" y="245" width="0.2010%" height="15" fill="rgb(216,99,12)"/><text x="70.8277%" y="255.50"></text></g><g><title>param_env (222,773 samples, 0.16%)</title><rect x="70.8765%" y="245" width="0.1621%" height="15" fill="rgb(226,22,26)"/><text x="71.1265%" y="255.50"></text></g><g><title>check_item_well_formed (2,062,990 samples, 1.50%)</title><rect x="69.8241%" y="261" width="1.5010%" height="15" fill="rgb(217,163,10)"/><text x="70.0741%" y="271.50"></text></g><g><title>analysis (97,549,477 samples, 70.98%)</title><rect x="0.4434%" y="309" width="70.9753%" height="15" fill="rgb(213,25,53)"/><text x="0.6934%" y="319.50">analysis</text></g><g><title>type_check_crate (59,118,333 samples, 43.01%)</title><rect x="28.4052%" y="293" width="43.0135%" height="15" fill="rgb(252,105,26)"/><text x="28.6552%" y="303.50">type_check_crate</text></g><g><title>wf_checking (4,883,764 samples, 3.55%)</title><rect x="67.8653%" y="277" width="3.5533%" height="15" fill="rgb(220,39,43)"/><text x="68.1153%" y="287.50">wf_c..</text></g><g><title>codegen_crate (382,444 samples, 0.28%)</title><rect x="71.4254%" y="309" width="0.2783%" height="15" fill="rgb(229,68,48)"/><text x="71.6754%" y="319.50"></text></g><g><title>AST_validation (316,434 samples, 0.23%)</title><rect x="71.8290%" y="293" width="0.2302%" height="15" fill="rgb(252,8,32)"/><text x="72.0790%" y="303.50"></text></g><g><title>metadata_load_macro (296,044 samples, 0.22%)</title><rect x="86.6851%" y="261" width="0.2154%" height="15" fill="rgb(223,20,43)"/><text x="86.9351%" y="271.50"></text></g><g><title>metadata_register_crate (1,937,752 samples, 1.41%)</title><rect x="86.9005%" y="261" width="1.4099%" height="15" fill="rgb(229,81,49)"/><text x="87.1505%" y="271.50"></text></g><g><title>metadata_register_crate (724,806 samples, 0.53%)</title><rect x="87.7830%" y="245" width="0.5274%" height="15" fill="rgb(236,28,36)"/><text x="88.0330%" y="255.50"></text></g><g><title>macro_expand_crate (22,477,988 samples, 16.35%)</title><rect x="72.1975%" y="293" width="16.3546%" height="15" fill="rgb(249,185,26)"/><text x="72.4475%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (22,463,108 samples, 16.34%)</title><rect x="72.2083%" y="277" width="16.3438%" height="15" fill="rgb(249,174,33)"/><text x="72.4583%" y="287.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (332,243 samples, 0.24%)</title><rect x="88.3104%" y="261" width="0.2417%" height="15" fill="rgb(233,201,37)"/><text x="88.5604%" y="271.50"></text></g><g><title>finalize_macro_resolutions (325,774 samples, 0.24%)</title><rect x="88.6850%" y="277" width="0.2370%" height="15" fill="rgb(221,78,26)"/><text x="88.9350%" y="287.50"></text></g><g><title>late_resolve_crate (4,037,254 samples, 2.94%)</title><rect x="88.9220%" y="277" width="2.9374%" height="15" fill="rgb(250,127,30)"/><text x="89.1720%" y="287.50">la..</text></g><g><title>configure_and_expand (27,906,859 samples, 20.30%)</title><rect x="71.7036%" y="309" width="20.3045%" height="15" fill="rgb(230,49,44)"/><text x="71.9536%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (4,638,161 samples, 3.37%)</title><rect x="88.6335%" y="293" width="3.3746%" height="15" fill="rgb(229,67,23)"/><text x="88.8835%" y="303.50">res..</text></g><g><title>drop_ast (196,032 samples, 0.14%)</title><rect x="92.0082%" y="309" width="0.1426%" height="15" fill="rgb(249,83,47)"/><text x="92.2582%" y="319.50"></text></g><g><title>early_lint_checks (378,764 samples, 0.28%)</title><rect x="92.1611%" y="309" width="0.2756%" height="15" fill="rgb(215,43,3)"/><text x="92.4111%" y="319.50"></text></g><g><title>free_global_ctxt (4,134,136 samples, 3.01%)</title><rect x="92.4367%" y="309" width="3.0079%" height="15" fill="rgb(238,154,13)"/><text x="92.6867%" y="319.50">fre..</text></g><g><title>generate_crate_metadata (1,193,833 samples, 0.87%)</title><rect x="95.4447%" y="309" width="0.8686%" height="15" fill="rgb(219,56,2)"/><text x="95.6947%" y="319.50"></text></g><g><title>hir_lowering (2,652,750 samples, 1.93%)</title><rect x="96.3133%" y="309" width="1.9301%" height="15" fill="rgb(233,0,4)"/><text x="96.5633%" y="319.50">h..</text></g><g><title>parse_crate (777,249 samples, 0.57%)</title><rect x="98.2804%" y="309" width="0.5655%" height="15" fill="rgb(235,30,7)"/><text x="98.5304%" y="319.50"></text></g><g><title>prepare_outputs (195,682 samples, 0.14%)</title><rect x="98.8515%" y="309" width="0.1424%" height="15" fill="rgb(250,79,13)"/><text x="99.1015%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (950,821 samples, 0.69%)</title><rect x="98.9938%" y="309" width="0.6918%" height="15" fill="rgb(211,146,34)"/><text x="99.2438%" y="319.50"></text></g><g><title>all (137,441,469 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (137,441,469 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (331,654 samples, 0.24%)</title><rect x="99.7587%" y="309" width="0.2413%" height="15" fill="rgb(221,155,16)"/><text x="100.0087%" y="319.50"></text></g></svg></svg>