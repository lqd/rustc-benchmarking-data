<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (7,186,874 samples, 0.17%)</title><rect x="11.8026%" y="133" width="0.1697%" height="15" fill="rgb(227,0,7)"/><text x="12.0526%" y="143.50"></text></g><g><title>is_sized_raw (4,678,007 samples, 0.11%)</title><rect x="12.0423%" y="133" width="0.1105%" height="15" fill="rgb(217,0,24)"/><text x="12.2923%" y="143.50"></text></g><g><title>is_copy_raw (4,488,132 samples, 0.11%)</title><rect x="16.4454%" y="69" width="0.1060%" height="15" fill="rgb(221,193,54)"/><text x="16.6954%" y="79.50"></text></g><g><title>is_copy_raw (45,744,974 samples, 1.08%)</title><rect x="16.6949%" y="53" width="1.0804%" height="15" fill="rgb(248,212,6)"/><text x="16.9449%" y="63.50"></text></g><g><title>evaluate_obligation (38,055,443 samples, 0.90%)</title><rect x="16.8766%" y="37" width="0.8988%" height="15" fill="rgb(208,68,35)"/><text x="17.1266%" y="47.50"></text></g><g><title>needs_drop_raw (52,101,579 samples, 1.23%)</title><rect x="16.5522%" y="69" width="1.2306%" height="15" fill="rgb(232,128,0)"/><text x="16.8022%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (28,604,771 samples, 0.68%)</title><rect x="18.0046%" y="53" width="0.6756%" height="15" fill="rgb(207,160,47)"/><text x="18.2546%" y="63.50"></text></g><g><title>evaluate_obligation (5,057,923 samples, 0.12%)</title><rect x="18.5607%" y="37" width="0.1195%" height="15" fill="rgb(228,23,34)"/><text x="18.8107%" y="47.50"></text></g><g><title>resolve_instance (41,969,863 samples, 0.99%)</title><rect x="17.7838%" y="69" width="0.9913%" height="15" fill="rgb(218,30,26)"/><text x="18.0338%" y="79.50"></text></g><g><title>thir_body (34,829,985 samples, 0.82%)</title><rect x="18.8071%" y="69" width="0.8226%" height="15" fill="rgb(220,122,19)"/><text x="19.0571%" y="79.50"></text></g><g><title>mir_const (293,961,414 samples, 6.94%)</title><rect x="12.7491%" y="117" width="6.9429%" height="15" fill="rgb(250,228,42)"/><text x="12.9991%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (266,154,714 samples, 6.29%)</title><rect x="13.4059%" y="101" width="6.2862%" height="15" fill="rgb(240,193,28)"/><text x="13.6559%" y="111.50">unsafety..</text></g><g><title>mir_built (247,316,187 samples, 5.84%)</title><rect x="13.8508%" y="85" width="5.8412%" height="15" fill="rgb(216,20,37)"/><text x="14.1008%" y="95.50">mir_bui..</text></g><g><title>mir_const (4,247,237 samples, 0.10%)</title><rect x="19.7666%" y="101" width="0.1003%" height="15" fill="rgb(206,188,39)"/><text x="20.0166%" y="111.50"></text></g><g><title>mir_const_qualif (7,693,498 samples, 0.18%)</title><rect x="19.6921%" y="117" width="0.1817%" height="15" fill="rgb(217,207,13)"/><text x="19.9421%" y="127.50"></text></g><g><title>mir_promoted (326,905,838 samples, 7.72%)</title><rect x="12.1528%" y="133" width="7.7210%" height="15" fill="rgb(231,73,38)"/><text x="12.4028%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (40,621,044 samples, 0.96%)</title><rect x="19.8753%" y="133" width="0.9594%" height="15" fill="rgb(225,20,46)"/><text x="20.1253%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (41,305,402 samples, 0.98%)</title><rect x="20.8348%" y="133" width="0.9756%" height="15" fill="rgb(210,31,41)"/><text x="21.0848%" y="143.50"></text></g><g><title>normalize_projection_ty (23,578,475 samples, 0.56%)</title><rect x="21.2534%" y="117" width="0.5569%" height="15" fill="rgb(221,200,47)"/><text x="21.5034%" y="127.50"></text></g><g><title>type_op_normalize_predicate (24,052,338 samples, 0.57%)</title><rect x="21.8103%" y="133" width="0.5681%" height="15" fill="rgb(226,26,5)"/><text x="22.0603%" y="143.50"></text></g><g><title>normalize_projection_ty (8,706,939 samples, 0.21%)</title><rect x="22.1728%" y="117" width="0.2056%" height="15" fill="rgb(249,33,26)"/><text x="22.4228%" y="127.50"></text></g><g><title>type_op_normalize_ty (30,158,020 samples, 0.71%)</title><rect x="22.3784%" y="133" width="0.7123%" height="15" fill="rgb(235,183,28)"/><text x="22.6284%" y="143.50"></text></g><g><title>normalize_projection_ty (17,267,169 samples, 0.41%)</title><rect x="22.6829%" y="117" width="0.4078%" height="15" fill="rgb(221,5,38)"/><text x="22.9329%" y="127.50"></text></g><g><title>type_op_prove_predicate (191,788,027 samples, 4.53%)</title><rect x="23.0907%" y="133" width="4.5297%" height="15" fill="rgb(247,18,42)"/><text x="23.3407%" y="143.50">type_..</text></g><g><title>MIR_borrow_checking (1,161,367,820 samples, 27.43%)</title><rect x="0.1931%" y="165" width="27.4298%" height="15" fill="rgb(241,131,45)"/><text x="0.4431%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,153,264,637 samples, 27.24%)</title><rect x="0.3845%" y="149" width="27.2384%" height="15" fill="rgb(249,31,29)"/><text x="0.6345%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (4,866,865 samples, 0.11%)</title><rect x="27.6229%" y="165" width="0.1149%" height="15" fill="rgb(225,111,53)"/><text x="27.8729%" y="175.50"></text></g><g><title>hir_module_items (5,966,078 samples, 0.14%)</title><rect x="27.7378%" y="165" width="0.1409%" height="15" fill="rgb(238,160,17)"/><text x="27.9878%" y="175.50"></text></g><g><title>codegen_fn_attrs (7,789,154 samples, 0.18%)</title><rect x="28.0279%" y="133" width="0.1840%" height="15" fill="rgb(214,148,48)"/><text x="28.2779%" y="143.50"></text></g><g><title>check_mod_attrs (13,929,720 samples, 0.33%)</title><rect x="27.8828%" y="149" width="0.3290%" height="15" fill="rgb(232,36,49)"/><text x="28.1328%" y="159.50"></text></g><g><title>lint_levels (5,411,531 samples, 0.13%)</title><rect x="28.4878%" y="133" width="0.1278%" height="15" fill="rgb(209,103,24)"/><text x="28.7378%" y="143.50"></text></g><g><title>lookup_deprecation_entry (5,097,405 samples, 0.12%)</title><rect x="28.6156%" y="133" width="0.1204%" height="15" fill="rgb(229,88,8)"/><text x="28.8656%" y="143.50"></text></g><g><title>stability_index (4,719,583 samples, 0.11%)</title><rect x="28.6245%" y="117" width="0.1115%" height="15" fill="rgb(213,181,19)"/><text x="28.8745%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (15,230,512 samples, 0.36%)</title><rect x="28.3848%" y="149" width="0.3597%" height="15" fill="rgb(254,191,54)"/><text x="28.6348%" y="159.50"></text></g><g><title>misc_checking_1 (37,733,113 samples, 0.89%)</title><rect x="27.8787%" y="165" width="0.8912%" height="15" fill="rgb(241,83,37)"/><text x="28.1287%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (17,928,171 samples, 0.42%)</title><rect x="28.7700%" y="149" width="0.4234%" height="15" fill="rgb(233,36,39)"/><text x="29.0200%" y="159.50"></text></g><g><title>check_mod_liveness (15,378,924 samples, 0.36%)</title><rect x="28.8302%" y="133" width="0.3632%" height="15" fill="rgb(226,3,54)"/><text x="29.0802%" y="143.50"></text></g><g><title>param_env (13,036,514 samples, 0.31%)</title><rect x="29.5186%" y="117" width="0.3079%" height="15" fill="rgb(245,192,40)"/><text x="29.7686%" y="127.50"></text></g><g><title>misc_checking_2 (44,872,043 samples, 1.06%)</title><rect x="28.7699%" y="165" width="1.0598%" height="15" fill="rgb(238,167,29)"/><text x="29.0199%" y="175.50"></text></g><g><title>match_checking (26,940,752 samples, 0.64%)</title><rect x="29.1934%" y="149" width="0.6363%" height="15" fill="rgb(232,182,51)"/><text x="29.4434%" y="159.50"></text></g><g><title>check_match (25,071,625 samples, 0.59%)</title><rect x="29.2376%" y="133" width="0.5922%" height="15" fill="rgb(231,60,39)"/><text x="29.4876%" y="143.50"></text></g><g><title>check_private_in_public (11,407,518 samples, 0.27%)</title><rect x="29.8303%" y="149" width="0.2694%" height="15" fill="rgb(208,69,12)"/><text x="30.0803%" y="159.50"></text></g><g><title>death_checking (14,707,305 samples, 0.35%)</title><rect x="30.0998%" y="149" width="0.3474%" height="15" fill="rgb(235,93,37)"/><text x="30.3498%" y="159.50"></text></g><g><title>param_env (5,947,084 samples, 0.14%)</title><rect x="30.8027%" y="117" width="0.1405%" height="15" fill="rgb(213,116,39)"/><text x="31.0527%" y="127.50"></text></g><g><title>crate_lints (22,911,817 samples, 0.54%)</title><rect x="30.4472%" y="133" width="0.5411%" height="15" fill="rgb(222,207,29)"/><text x="30.6972%" y="143.50"></text></g><g><title>lint_checking (38,229,419 samples, 0.90%)</title><rect x="30.4471%" y="149" width="0.9029%" height="15" fill="rgb(206,96,30)"/><text x="30.6971%" y="159.50"></text></g><g><title>module_lints (15,313,862 samples, 0.36%)</title><rect x="30.9883%" y="133" width="0.3617%" height="15" fill="rgb(218,138,4)"/><text x="31.2383%" y="143.50"></text></g><g><title>lint_mod (15,248,969 samples, 0.36%)</title><rect x="30.9899%" y="117" width="0.3602%" height="15" fill="rgb(250,191,14)"/><text x="31.2399%" y="127.50"></text></g><g><title>privacy_access_levels (20,747,762 samples, 0.49%)</title><rect x="31.3500%" y="149" width="0.4900%" height="15" fill="rgb(239,60,40)"/><text x="31.6000%" y="159.50"></text></g><g><title>privacy_checking_modules (36,654,861 samples, 0.87%)</title><rect x="31.8401%" y="149" width="0.8657%" height="15" fill="rgb(206,27,48)"/><text x="32.0901%" y="159.50"></text></g><g><title>check_mod_privacy (36,588,850 samples, 0.86%)</title><rect x="31.8416%" y="133" width="0.8642%" height="15" fill="rgb(225,35,8)"/><text x="32.0916%" y="143.50"></text></g><g><title>misc_checking_3 (122,094,999 samples, 2.88%)</title><rect x="29.8297%" y="165" width="2.8837%" height="15" fill="rgb(250,213,24)"/><text x="30.0797%" y="175.50">mi..</text></g><g><title>impl_parent (5,889,455 samples, 0.14%)</title><rect x="33.8392%" y="101" width="0.1391%" height="15" fill="rgb(247,123,22)"/><text x="34.0892%" y="111.50"></text></g><g><title>impl_trait_ref (11,473,629 samples, 0.27%)</title><rect x="33.9784%" y="101" width="0.2710%" height="15" fill="rgb(231,138,38)"/><text x="34.2284%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,589,487 samples, 0.20%)</title><rect x="34.0465%" y="85" width="0.2029%" height="15" fill="rgb(231,145,46)"/><text x="34.2965%" y="95.50"></text></g><g><title>item_attrs (7,332,446 samples, 0.17%)</title><rect x="34.2494%" y="101" width="0.1732%" height="15" fill="rgb(251,118,11)"/><text x="34.4994%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (6,750,888 samples, 0.16%)</title><rect x="34.2631%" y="85" width="0.1594%" height="15" fill="rgb(217,147,25)"/><text x="34.5131%" y="95.50"></text></g><g><title>predicates_of (5,826,182 samples, 0.14%)</title><rect x="34.4225%" y="101" width="0.1376%" height="15" fill="rgb(247,81,37)"/><text x="34.6725%" y="111.50"></text></g><g><title>coherent_trait (79,811,614 samples, 1.89%)</title><rect x="32.7666%" y="133" width="1.8850%" height="15" fill="rgb(209,12,38)"/><text x="33.0166%" y="143.50">c..</text></g><g><title>specialization_graph_of (78,319,837 samples, 1.85%)</title><rect x="32.8018%" y="117" width="1.8498%" height="15" fill="rgb(227,1,9)"/><text x="33.0518%" y="127.50">s..</text></g><g><title>coherence_checking (81,713,206 samples, 1.93%)</title><rect x="32.7645%" y="149" width="1.9299%" height="15" fill="rgb(248,47,43)"/><text x="33.0145%" y="159.50">c..</text></g><g><title>dropck_outlives (11,103,915 samples, 0.26%)</title><rect x="53.8955%" y="101" width="0.2623%" height="15" fill="rgb(221,10,30)"/><text x="54.1455%" y="111.50"></text></g><g><title>evaluate_obligation (100,104,043 samples, 2.36%)</title><rect x="54.2337%" y="101" width="2.3643%" height="15" fill="rgb(210,229,1)"/><text x="54.4837%" y="111.50">ev..</text></g><g><title>evaluate_obligation (8,566,444 samples, 0.20%)</title><rect x="56.9420%" y="85" width="0.2023%" height="15" fill="rgb(222,148,37)"/><text x="57.1920%" y="95.50"></text></g><g><title>method_autoderef_steps (18,470,813 samples, 0.44%)</title><rect x="56.7086%" y="101" width="0.4363%" height="15" fill="rgb(234,67,33)"/><text x="56.9586%" y="111.50"></text></g><g><title>specializes (5,547,327 samples, 0.13%)</title><rect x="65.6555%" y="69" width="0.1310%" height="15" fill="rgb(247,98,35)"/><text x="65.9055%" y="79.50"></text></g><g><title>evaluate_obligation (54,625,826 samples, 1.29%)</title><rect x="64.4988%" y="85" width="1.2902%" height="15" fill="rgb(247,138,52)"/><text x="64.7488%" y="95.50"></text></g><g><title>is_copy_raw (6,476,743 samples, 0.15%)</title><rect x="65.8615%" y="85" width="0.1530%" height="15" fill="rgb(213,79,30)"/><text x="66.1115%" y="95.50"></text></g><g><title>evaluate_obligation (4,764,394 samples, 0.11%)</title><rect x="65.9019%" y="69" width="0.1125%" height="15" fill="rgb(246,177,23)"/><text x="66.1519%" y="79.50"></text></g><g><title>method_autoderef_steps (11,363,866 samples, 0.27%)</title><rect x="66.0230%" y="85" width="0.2684%" height="15" fill="rgb(230,62,27)"/><text x="66.2730%" y="95.50"></text></g><g><title>typeck (383,200,440 samples, 9.05%)</title><rect x="57.2887%" y="101" width="9.0506%" height="15" fill="rgb(216,154,8)"/><text x="57.5387%" y="111.50">typeck</text></g><g><title>item_bodies_checking (1,338,542,877 samples, 31.61%)</title><rect x="34.7420%" y="149" width="31.6144%" height="15" fill="rgb(244,35,45)"/><text x="34.9920%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,338,538,267 samples, 31.61%)</title><rect x="34.7421%" y="133" width="31.6143%" height="15" fill="rgb(251,115,12)"/><text x="34.9921%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,334,932,361 samples, 31.53%)</title><rect x="34.8273%" y="117" width="31.5291%" height="15" fill="rgb(240,54,50)"/><text x="35.0773%" y="127.50">typeck</text></g><g><title>evaluate_obligation (4,899,544 samples, 0.12%)</title><rect x="69.8564%" y="117" width="0.1157%" height="15" fill="rgb(233,84,52)"/><text x="70.1064%" y="127.50"></text></g><g><title>item_types_checking (160,762,393 samples, 3.80%)</title><rect x="66.3564%" y="149" width="3.7970%" height="15" fill="rgb(207,117,47)"/><text x="66.6064%" y="159.50">item..</text></g><g><title>check_mod_item_types (160,674,812 samples, 3.79%)</title><rect x="66.3585%" y="133" width="3.7949%" height="15" fill="rgb(249,43,39)"/><text x="66.6085%" y="143.50">chec..</text></g><g><title>fn_sig (8,975,748 samples, 0.21%)</title><rect x="70.4561%" y="117" width="0.2120%" height="15" fill="rgb(209,38,44)"/><text x="70.7061%" y="127.50"></text></g><g><title>resolve_lifetimes (6,302,954 samples, 0.15%)</title><rect x="70.7783%" y="85" width="0.1489%" height="15" fill="rgb(236,212,23)"/><text x="71.0283%" y="95.50"></text></g><g><title>is_late_bound_map (6,777,608 samples, 0.16%)</title><rect x="70.7674%" y="101" width="0.1601%" height="15" fill="rgb(242,79,21)"/><text x="71.0174%" y="111.50"></text></g><g><title>generics_of (14,366,660 samples, 0.34%)</title><rect x="70.6681%" y="117" width="0.3393%" height="15" fill="rgb(211,96,35)"/><text x="70.9181%" y="127.50"></text></g><g><title>late_bound_vars_map (7,445,425 samples, 0.18%)</title><rect x="71.4580%" y="69" width="0.1758%" height="15" fill="rgb(253,215,40)"/><text x="71.7080%" y="79.50"></text></g><g><title>resolve_lifetimes (7,031,039 samples, 0.17%)</title><rect x="71.4678%" y="53" width="0.1661%" height="15" fill="rgb(211,81,21)"/><text x="71.7178%" y="63.50"></text></g><g><title>explicit_predicates_of (19,806,991 samples, 0.47%)</title><rect x="71.1925%" y="85" width="0.4678%" height="15" fill="rgb(208,190,38)"/><text x="71.4425%" y="95.50"></text></g><g><title>predicates_of (27,117,969 samples, 0.64%)</title><rect x="71.0744%" y="117" width="0.6405%" height="15" fill="rgb(235,213,38)"/><text x="71.3244%" y="127.50"></text></g><g><title>predicates_defined_on (25,349,422 samples, 0.60%)</title><rect x="71.1162%" y="101" width="0.5987%" height="15" fill="rgb(237,122,38)"/><text x="71.3662%" y="111.50"></text></g><g><title>type_collecting (71,189,548 samples, 1.68%)</title><rect x="70.1546%" y="149" width="1.6814%" height="15" fill="rgb(244,218,35)"/><text x="70.4046%" y="159.50"></text></g><g><title>collect_mod_item_types (70,873,446 samples, 1.67%)</title><rect x="70.1620%" y="133" width="1.6739%" height="15" fill="rgb(240,68,47)"/><text x="70.4120%" y="143.50"></text></g><g><title>type_of (4,915,826 samples, 0.12%)</title><rect x="71.7198%" y="117" width="0.1161%" height="15" fill="rgb(210,16,53)"/><text x="71.9698%" y="127.50"></text></g><g><title>evaluate_obligation (10,361,631 samples, 0.24%)</title><rect x="78.6393%" y="117" width="0.2447%" height="15" fill="rgb(235,124,12)"/><text x="78.8893%" y="127.50"></text></g><g><title>implied_outlives_bounds (11,504,399 samples, 0.27%)</title><rect x="78.9030%" y="117" width="0.2717%" height="15" fill="rgb(224,169,11)"/><text x="79.1530%" y="127.50"></text></g><g><title>param_env (76,135,652 samples, 1.80%)</title><rect x="79.1748%" y="117" width="1.7982%" height="15" fill="rgb(250,166,2)"/><text x="79.4248%" y="127.50">p..</text></g><g><title>region_scope_tree (11,755,309 samples, 0.28%)</title><rect x="80.9739%" y="117" width="0.2776%" height="15" fill="rgb(242,216,29)"/><text x="81.2239%" y="127.50"></text></g><g><title>check_impl_item_well_formed (389,041,292 samples, 9.19%)</title><rect x="72.0655%" y="133" width="9.1886%" height="15" fill="rgb(230,116,27)"/><text x="72.3155%" y="143.50">check_impl_it..</text></g><g><title>eval_to_const_value_raw (6,868,686 samples, 0.16%)</title><rect x="86.8244%" y="101" width="0.1622%" height="15" fill="rgb(228,99,48)"/><text x="87.0744%" y="111.50"></text></g><g><title>eval_to_const_value_raw (6,836,976 samples, 0.16%)</title><rect x="86.8252%" y="85" width="0.1615%" height="15" fill="rgb(253,11,6)"/><text x="87.0752%" y="95.50"></text></g><g><title>eval_to_allocation_raw (6,775,075 samples, 0.16%)</title><rect x="86.8266%" y="69" width="0.1600%" height="15" fill="rgb(247,143,39)"/><text x="87.0766%" y="79.50"></text></g><g><title>evaluate_obligation (27,741,072 samples, 0.66%)</title><rect x="86.3579%" y="117" width="0.6552%" height="15" fill="rgb(236,97,10)"/><text x="86.6079%" y="127.50"></text></g><g><title>implied_outlives_bounds (5,153,826 samples, 0.12%)</title><rect x="87.0377%" y="117" width="0.1217%" height="15" fill="rgb(233,208,19)"/><text x="87.2877%" y="127.50"></text></g><g><title>param_env (34,639,363 samples, 0.82%)</title><rect x="87.1654%" y="117" width="0.8181%" height="15" fill="rgb(216,164,2)"/><text x="87.4154%" y="127.50"></text></g><g><title>check_item_well_formed (290,221,679 samples, 6.85%)</title><rect x="81.2541%" y="133" width="6.8546%" height="15" fill="rgb(220,129,5)"/><text x="81.5041%" y="143.50">check_ite..</text></g><g><title>analysis (3,755,902,660 samples, 88.71%)</title><rect x="0.0368%" y="181" width="88.7089%" height="15" fill="rgb(242,17,10)"/><text x="0.2868%" y="191.50">analysis</text></g><g><title>type_check_crate (2,372,384,429 samples, 56.03%)</title><rect x="32.7135%" y="165" width="56.0322%" height="15" fill="rgb(242,107,0)"/><text x="32.9635%" y="175.50">type_check_crate</text></g><g><title>wf_checking (715,687,914 samples, 16.90%)</title><rect x="71.8422%" y="149" width="16.9035%" height="15" fill="rgb(251,28,31)"/><text x="72.0922%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (26,967,858 samples, 0.64%)</title><rect x="88.1087%" y="133" width="0.6369%" height="15" fill="rgb(233,223,10)"/><text x="88.3587%" y="143.50"></text></g><g><title>AST_validation (5,816,095 samples, 0.14%)</title><rect x="88.7627%" y="165" width="0.1374%" height="15" fill="rgb(215,21,27)"/><text x="89.0127%" y="175.50"></text></g><g><title>complete_gated_feature_checking (4,448,010 samples, 0.11%)</title><rect x="88.9000%" y="165" width="0.1051%" height="15" fill="rgb(232,23,21)"/><text x="89.1500%" y="175.50"></text></g><g><title>macro_expand_crate (209,643,461 samples, 4.95%)</title><rect x="89.0071%" y="165" width="4.9515%" height="15" fill="rgb(244,5,23)"/><text x="89.2571%" y="175.50">macro_..</text></g><g><title>expand_crate (209,624,771 samples, 4.95%)</title><rect x="89.0075%" y="149" width="4.9510%" height="15" fill="rgb(226,81,46)"/><text x="89.2575%" y="159.50">expand..</text></g><g><title>late_resolve_crate (43,398,756 samples, 1.03%)</title><rect x="94.0343%" y="149" width="1.0250%" height="15" fill="rgb(247,70,30)"/><text x="94.2843%" y="159.50"></text></g><g><title>configure_and_expand (274,349,016 samples, 6.48%)</title><rect x="88.7569%" y="181" width="6.4797%" height="15" fill="rgb(212,68,19)"/><text x="89.0069%" y="191.50">configur..</text></g><g><title>resolve_crate (53,874,764 samples, 1.27%)</title><rect x="93.9641%" y="165" width="1.2724%" height="15" fill="rgb(240,187,13)"/><text x="94.2141%" y="175.50"></text></g><g><title>drop_ast (11,587,750 samples, 0.27%)</title><rect x="95.2366%" y="181" width="0.2737%" height="15" fill="rgb(223,113,26)"/><text x="95.4866%" y="191.50"></text></g><g><title>early_lint_checks (11,471,548 samples, 0.27%)</title><rect x="95.5108%" y="181" width="0.2709%" height="15" fill="rgb(206,192,2)"/><text x="95.7608%" y="191.50"></text></g><g><title>free_global_ctxt (22,988,068 samples, 0.54%)</title><rect x="95.7818%" y="181" width="0.5429%" height="15" fill="rgb(241,108,4)"/><text x="96.0318%" y="191.50"></text></g><g><title>generate_crate_metadata (39,921,667 samples, 0.94%)</title><rect x="96.3247%" y="181" width="0.9429%" height="15" fill="rgb(247,173,49)"/><text x="96.5747%" y="191.50"></text></g><g><title>hir_lowering (100,785,840 samples, 2.38%)</title><rect x="97.2676%" y="181" width="2.3804%" height="15" fill="rgb(224,114,35)"/><text x="97.5176%" y="191.50">hi..</text></g><g><title>self_profile_alloc_query_strings (7,743,297 samples, 0.18%)</title><rect x="99.7585%" y="181" width="0.1829%" height="15" fill="rgb(245,159,27)"/><text x="100.0085%" y="191.50"></text></g><g><title>all (4,233,965,719 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (4,233,965,719 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>