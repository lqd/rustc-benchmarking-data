<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (676,937 samples, 0.21%)</title><rect x="12.9346%" y="117" width="0.2071%" height="15" fill="rgb(227,0,7)"/><text x="13.1846%" y="127.50"></text></g><g><title>item_attrs (629,326 samples, 0.19%)</title><rect x="13.6099%" y="85" width="0.1925%" height="15" fill="rgb(217,0,24)"/><text x="13.8599%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (603,355 samples, 0.18%)</title><rect x="13.6178%" y="69" width="0.1846%" height="15" fill="rgb(221,193,54)"/><text x="13.8678%" y="79.50"></text></g><g><title>codegen_fn_attrs (881,331 samples, 0.27%)</title><rect x="13.5481%" y="101" width="0.2696%" height="15" fill="rgb(248,212,6)"/><text x="13.7981%" y="111.50"></text></g><g><title>adt_drop_tys (485,406 samples, 0.15%)</title><rect x="16.3947%" y="69" width="0.1485%" height="15" fill="rgb(208,68,35)"/><text x="16.6447%" y="79.50"></text></g><g><title>is_copy_raw (2,425,753 samples, 0.74%)</title><rect x="16.5432%" y="69" width="0.7421%" height="15" fill="rgb(232,128,0)"/><text x="16.7932%" y="79.50"></text></g><g><title>evaluate_obligation (2,032,309 samples, 0.62%)</title><rect x="16.6636%" y="53" width="0.6217%" height="15" fill="rgb(207,160,47)"/><text x="16.9136%" y="63.50"></text></g><g><title>needs_drop_raw (3,280,154 samples, 1.00%)</title><rect x="16.2831%" y="85" width="1.0034%" height="15" fill="rgb(228,23,34)"/><text x="16.5331%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,002,840 samples, 0.31%)</title><rect x="17.4537%" y="69" width="0.3068%" height="15" fill="rgb(218,30,26)"/><text x="17.7037%" y="79.50"></text></g><g><title>impl_parent (709,780 samples, 0.22%)</title><rect x="18.2994%" y="53" width="0.2171%" height="15" fill="rgb(220,122,19)"/><text x="18.5494%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (411,287 samples, 0.13%)</title><rect x="18.3907%" y="37" width="0.1258%" height="15" fill="rgb(250,228,42)"/><text x="18.6407%" y="47.50"></text></g><g><title>specialization_graph_of (2,921,821 samples, 0.89%)</title><rect x="17.8349%" y="69" width="0.8938%" height="15" fill="rgb(240,193,28)"/><text x="18.0849%" y="79.50"></text></g><g><title>impl_trait_ref (693,566 samples, 0.21%)</title><rect x="18.5165%" y="53" width="0.2122%" height="15" fill="rgb(216,20,37)"/><text x="18.7665%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (571,745 samples, 0.17%)</title><rect x="18.5538%" y="37" width="0.1749%" height="15" fill="rgb(206,188,39)"/><text x="18.8038%" y="47.50"></text></g><g><title>resolve_instance (4,866,293 samples, 1.49%)</title><rect x="17.2866%" y="85" width="1.4887%" height="15" fill="rgb(217,207,13)"/><text x="17.5366%" y="95.50"></text></g><g><title>thir_body (3,227,928 samples, 0.99%)</title><rect x="18.7896%" y="85" width="0.9875%" height="15" fill="rgb(231,73,38)"/><text x="19.0396%" y="95.50"></text></g><g><title>mir_const (24,520,829 samples, 7.50%)</title><rect x="12.2857%" y="133" width="7.5012%" height="15" fill="rgb(225,20,46)"/><text x="12.5357%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (21,722,666 samples, 6.65%)</title><rect x="13.1416%" y="117" width="6.6452%" height="15" fill="rgb(210,31,41)"/><text x="13.3916%" y="127.50">unsafety_..</text></g><g><title>mir_built (19,512,799 samples, 5.97%)</title><rect x="13.8177%" y="101" width="5.9692%" height="15" fill="rgb(221,200,47)"/><text x="14.0677%" y="111.50">mir_built</text></g><g><title>mir_const (349,184 samples, 0.11%)</title><rect x="19.9383%" y="117" width="0.1068%" height="15" fill="rgb(226,26,5)"/><text x="20.1883%" y="127.50"></text></g><g><title>mir_promoted (27,582,142 samples, 8.44%)</title><rect x="11.6207%" y="149" width="8.4377%" height="15" fill="rgb(249,33,26)"/><text x="11.8707%" y="159.50">mir_promoted</text></g><g><title>mir_const_qualif (887,671 samples, 0.27%)</title><rect x="19.7868%" y="133" width="0.2715%" height="15" fill="rgb(235,183,28)"/><text x="20.0368%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (747,987 samples, 0.23%)</title><rect x="20.0600%" y="149" width="0.2288%" height="15" fill="rgb(221,5,38)"/><text x="20.3100%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,201,453 samples, 0.98%)</title><rect x="20.2888%" y="149" width="0.9794%" height="15" fill="rgb(247,18,42)"/><text x="20.5388%" y="159.50"></text></g><g><title>normalize_projection_ty (2,059,726 samples, 0.63%)</title><rect x="20.6381%" y="133" width="0.6301%" height="15" fill="rgb(241,131,45)"/><text x="20.8881%" y="143.50"></text></g><g><title>type_op_normalize_predicate (684,355 samples, 0.21%)</title><rect x="21.2682%" y="149" width="0.2094%" height="15" fill="rgb(249,31,29)"/><text x="21.5182%" y="159.50"></text></g><g><title>normalize_projection_ty (466,873 samples, 0.14%)</title><rect x="21.3347%" y="133" width="0.1428%" height="15" fill="rgb(225,111,53)"/><text x="21.5847%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,645,257 samples, 2.03%)</title><rect x="21.4803%" y="149" width="2.0329%" height="15" fill="rgb(238,160,17)"/><text x="21.7303%" y="159.50">t..</text></g><g><title>evaluate_obligation (458,644 samples, 0.14%)</title><rect x="23.3728%" y="133" width="0.1403%" height="15" fill="rgb(214,148,48)"/><text x="23.6228%" y="143.50"></text></g><g><title>MIR_borrow_checking (75,491,944 samples, 23.09%)</title><rect x="0.4227%" y="181" width="23.0938%" height="15" fill="rgb(232,36,49)"/><text x="0.6727%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (75,239,263 samples, 23.02%)</title><rect x="0.5000%" y="165" width="23.0165%" height="15" fill="rgb(209,103,24)"/><text x="0.7500%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (328,924 samples, 0.10%)</title><rect x="23.5165%" y="181" width="0.1006%" height="15" fill="rgb(229,88,8)"/><text x="23.7665%" y="191.50"></text></g><g><title>hir_module_items (382,142 samples, 0.12%)</title><rect x="23.6171%" y="181" width="0.1169%" height="15" fill="rgb(213,181,19)"/><text x="23.8671%" y="191.50"></text></g><g><title>codegen_fn_attrs (483,166 samples, 0.15%)</title><rect x="23.9049%" y="149" width="0.1478%" height="15" fill="rgb(254,191,54)"/><text x="24.1549%" y="159.50"></text></g><g><title>check_mod_attrs (1,002,629 samples, 0.31%)</title><rect x="23.7460%" y="165" width="0.3067%" height="15" fill="rgb(241,83,37)"/><text x="23.9960%" y="175.50"></text></g><g><title>lint_levels (380,544 samples, 0.12%)</title><rect x="24.2821%" y="149" width="0.1164%" height="15" fill="rgb(233,36,39)"/><text x="24.5321%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,096,203 samples, 0.34%)</title><rect x="24.1817%" y="165" width="0.3353%" height="15" fill="rgb(226,3,54)"/><text x="24.4317%" y="175.50"></text></g><g><title>misc_checking_1 (2,666,650 samples, 0.82%)</title><rect x="23.7342%" y="181" width="0.8158%" height="15" fill="rgb(245,192,40)"/><text x="23.9842%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,311,555 samples, 0.40%)</title><rect x="24.5505%" y="165" width="0.4012%" height="15" fill="rgb(238,167,29)"/><text x="24.8005%" y="175.50"></text></g><g><title>check_mod_liveness (1,066,474 samples, 0.33%)</title><rect x="24.6255%" y="149" width="0.3262%" height="15" fill="rgb(232,182,51)"/><text x="24.8755%" y="159.50"></text></g><g><title>misc_checking_2 (2,856,942 samples, 0.87%)</title><rect x="24.5499%" y="181" width="0.8740%" height="15" fill="rgb(231,60,39)"/><text x="24.7999%" y="191.50"></text></g><g><title>match_checking (1,543,507 samples, 0.47%)</title><rect x="24.9517%" y="165" width="0.4722%" height="15" fill="rgb(208,69,12)"/><text x="25.2017%" y="175.50"></text></g><g><title>check_match (1,480,156 samples, 0.45%)</title><rect x="24.9711%" y="149" width="0.4528%" height="15" fill="rgb(235,93,37)"/><text x="25.2211%" y="159.50"></text></g><g><title>check_private_in_public (473,475 samples, 0.14%)</title><rect x="25.4271%" y="165" width="0.1448%" height="15" fill="rgb(213,116,39)"/><text x="25.6771%" y="175.50"></text></g><g><title>death_checking (1,024,421 samples, 0.31%)</title><rect x="25.5720%" y="165" width="0.3134%" height="15" fill="rgb(222,207,29)"/><text x="25.8220%" y="175.50"></text></g><g><title>eval_to_allocation_raw (405,705 samples, 0.12%)</title><rect x="26.3626%" y="133" width="0.1241%" height="15" fill="rgb(206,96,30)"/><text x="26.6126%" y="143.50"></text></g><g><title>eval_to_allocation_raw (403,005 samples, 0.12%)</title><rect x="26.3634%" y="117" width="0.1233%" height="15" fill="rgb(218,138,4)"/><text x="26.6134%" y="127.50"></text></g><g><title>param_env (1,083,412 samples, 0.33%)</title><rect x="26.5763%" y="133" width="0.3314%" height="15" fill="rgb(250,191,14)"/><text x="26.8263%" y="143.50"></text></g><g><title>predicates_of (557,977 samples, 0.17%)</title><rect x="26.7370%" y="117" width="0.1707%" height="15" fill="rgb(239,60,40)"/><text x="26.9870%" y="127.50"></text></g><g><title>predicates_defined_on (431,876 samples, 0.13%)</title><rect x="26.7756%" y="101" width="0.1321%" height="15" fill="rgb(206,27,48)"/><text x="27.0256%" y="111.50"></text></g><g><title>crate_lints (4,934,715 samples, 1.51%)</title><rect x="25.8862%" y="149" width="1.5096%" height="15" fill="rgb(225,35,8)"/><text x="26.1362%" y="159.50"></text></g><g><title>type_of (1,525,261 samples, 0.47%)</title><rect x="26.9292%" y="133" width="0.4666%" height="15" fill="rgb(250,213,24)"/><text x="27.1792%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,036,765 samples, 0.32%)</title><rect x="27.0786%" y="117" width="0.3172%" height="15" fill="rgb(247,123,22)"/><text x="27.3286%" y="127.50"></text></g><g><title>lint_checking (6,452,731 samples, 1.97%)</title><rect x="25.8854%" y="165" width="1.9740%" height="15" fill="rgb(231,138,38)"/><text x="26.1354%" y="175.50">l..</text></g><g><title>module_lints (1,515,406 samples, 0.46%)</title><rect x="27.3957%" y="149" width="0.4636%" height="15" fill="rgb(231,145,46)"/><text x="27.6457%" y="159.50"></text></g><g><title>lint_mod (1,501,796 samples, 0.46%)</title><rect x="27.3999%" y="133" width="0.4594%" height="15" fill="rgb(251,118,11)"/><text x="27.6499%" y="143.50"></text></g><g><title>privacy_access_levels (534,206 samples, 0.16%)</title><rect x="27.8593%" y="165" width="0.1634%" height="15" fill="rgb(217,147,25)"/><text x="28.1093%" y="175.50"></text></g><g><title>privacy_checking_modules (2,370,847 samples, 0.73%)</title><rect x="28.0227%" y="165" width="0.7253%" height="15" fill="rgb(247,81,37)"/><text x="28.2727%" y="175.50"></text></g><g><title>check_mod_privacy (2,361,727 samples, 0.72%)</title><rect x="28.0255%" y="149" width="0.7225%" height="15" fill="rgb(209,12,38)"/><text x="28.2755%" y="159.50"></text></g><g><title>misc_checking_3 (10,887,541 samples, 3.33%)</title><rect x="25.4239%" y="181" width="3.3306%" height="15" fill="rgb(227,1,9)"/><text x="25.6739%" y="191.50">mis..</text></g><g><title>adt_destructor (359,354 samples, 0.11%)</title><rect x="28.8289%" y="133" width="0.1099%" height="15" fill="rgb(248,47,43)"/><text x="29.0789%" y="143.50"></text></g><g><title>coherent_trait (357,234 samples, 0.11%)</title><rect x="28.8295%" y="117" width="0.1093%" height="15" fill="rgb(221,10,30)"/><text x="29.0795%" y="127.50"></text></g><g><title>specialization_graph_of (355,564 samples, 0.11%)</title><rect x="28.8301%" y="101" width="0.1088%" height="15" fill="rgb(210,229,1)"/><text x="29.0801%" y="111.50"></text></g><g><title>adt_sized_constraint (355,384 samples, 0.11%)</title><rect x="30.5414%" y="117" width="0.1087%" height="15" fill="rgb(222,148,37)"/><text x="30.7914%" y="127.50"></text></g><g><title>adt_sized_constraint (349,664 samples, 0.11%)</title><rect x="30.5431%" y="101" width="0.1070%" height="15" fill="rgb(234,67,33)"/><text x="30.7931%" y="111.50"></text></g><g><title>impl_parent (3,282,949 samples, 1.00%)</title><rect x="30.6510%" y="117" width="1.0043%" height="15" fill="rgb(247,98,35)"/><text x="30.9010%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,775,366 samples, 0.54%)</title><rect x="31.1122%" y="101" width="0.5431%" height="15" fill="rgb(247,138,52)"/><text x="31.3622%" y="111.50"></text></g><g><title>impl_trait_ref (7,386,230 samples, 2.26%)</title><rect x="31.6553%" y="117" width="2.2595%" height="15" fill="rgb(213,79,30)"/><text x="31.9053%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,659,304 samples, 1.73%)</title><rect x="32.1836%" y="101" width="1.7312%" height="15" fill="rgb(246,177,23)"/><text x="32.4336%" y="111.50"></text></g><g><title>trait_impls_of (1,387,486 samples, 0.42%)</title><rect x="33.9297%" y="117" width="0.4244%" height="15" fill="rgb(230,62,27)"/><text x="34.1797%" y="127.50"></text></g><g><title>implementations_of_trait (499,405 samples, 0.15%)</title><rect x="34.2014%" y="101" width="0.1528%" height="15" fill="rgb(216,154,8)"/><text x="34.4514%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (328,093 samples, 0.10%)</title><rect x="34.2538%" y="85" width="0.1004%" height="15" fill="rgb(244,35,45)"/><text x="34.5038%" y="95.50"></text></g><g><title>coherent_trait (18,101,282 samples, 5.54%)</title><rect x="28.8174%" y="149" width="5.5374%" height="15" fill="rgb(251,115,12)"/><text x="29.0674%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (17,679,257 samples, 5.41%)</title><rect x="28.9465%" y="133" width="5.4083%" height="15" fill="rgb(240,54,50)"/><text x="29.1965%" y="143.50">special..</text></g><g><title>coherence_checking (18,276,864 samples, 5.59%)</title><rect x="28.8092%" y="165" width="5.5911%" height="15" fill="rgb(233,84,52)"/><text x="29.0592%" y="175.50">coheren..</text></g><g><title>associated_item (957,031 samples, 0.29%)</title><rect x="59.1867%" y="101" width="0.2928%" height="15" fill="rgb(207,117,47)"/><text x="59.4367%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (755,169 samples, 0.23%)</title><rect x="59.2484%" y="85" width="0.2310%" height="15" fill="rgb(249,43,39)"/><text x="59.4984%" y="95.50"></text></g><g><title>associated_items (1,437,015 samples, 0.44%)</title><rect x="59.0628%" y="117" width="0.4396%" height="15" fill="rgb(209,38,44)"/><text x="59.3128%" y="127.50"></text></g><g><title>adt_dtorck_constraint (431,657 samples, 0.13%)</title><rect x="59.8028%" y="101" width="0.1320%" height="15" fill="rgb(236,212,23)"/><text x="60.0528%" y="111.50"></text></g><g><title>dropck_outlives (1,210,351 samples, 0.37%)</title><rect x="59.5699%" y="117" width="0.3703%" height="15" fill="rgb(242,79,21)"/><text x="59.8199%" y="127.50"></text></g><g><title>mir_for_ctfe (862,663 samples, 0.26%)</title><rect x="60.1925%" y="69" width="0.2639%" height="15" fill="rgb(211,96,35)"/><text x="60.4425%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (854,343 samples, 0.26%)</title><rect x="60.1950%" y="53" width="0.2614%" height="15" fill="rgb(253,215,40)"/><text x="60.4450%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,710,807 samples, 0.52%)</title><rect x="59.9424%" y="117" width="0.5234%" height="15" fill="rgb(211,81,21)"/><text x="60.1924%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,675,257 samples, 0.51%)</title><rect x="59.9533%" y="101" width="0.5125%" height="15" fill="rgb(208,190,38)"/><text x="60.2033%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,629,687 samples, 0.50%)</title><rect x="59.9672%" y="85" width="0.4985%" height="15" fill="rgb(235,213,38)"/><text x="60.2172%" y="95.50"></text></g><g><title>generics_of (2,014,377 samples, 0.62%)</title><rect x="65.1032%" y="101" width="0.6162%" height="15" fill="rgb(237,122,38)"/><text x="65.3532%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,487,788 samples, 0.46%)</title><rect x="65.2643%" y="85" width="0.4551%" height="15" fill="rgb(244,218,35)"/><text x="65.5143%" y="95.50"></text></g><g><title>impl_trait_ref (2,874,549 samples, 0.88%)</title><rect x="65.8569%" y="101" width="0.8794%" height="15" fill="rgb(240,68,47)"/><text x="66.1069%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,335,563 samples, 0.71%)</title><rect x="66.0218%" y="85" width="0.7145%" height="15" fill="rgb(210,16,53)"/><text x="66.2718%" y="95.50"></text></g><g><title>opt_def_kind (522,382 samples, 0.16%)</title><rect x="66.9310%" y="85" width="0.1598%" height="15" fill="rgb(235,124,12)"/><text x="67.1810%" y="95.50"></text></g><g><title>explicit_predicates_of (374,115 samples, 0.11%)</title><rect x="67.2485%" y="69" width="0.1144%" height="15" fill="rgb(224,169,11)"/><text x="67.4985%" y="79.50"></text></g><g><title>predicates_of (2,179,855 samples, 0.67%)</title><rect x="66.7676%" y="101" width="0.6668%" height="15" fill="rgb(250,166,2)"/><text x="67.0176%" y="111.50"></text></g><g><title>predicates_defined_on (1,123,439 samples, 0.34%)</title><rect x="67.0908%" y="85" width="0.3437%" height="15" fill="rgb(242,216,29)"/><text x="67.3408%" y="95.50"></text></g><g><title>specializes (4,486,569 samples, 1.37%)</title><rect x="67.4345%" y="101" width="1.3725%" height="15" fill="rgb(230,116,27)"/><text x="67.6845%" y="111.50"></text></g><g><title>param_env (2,629,632 samples, 0.80%)</title><rect x="68.0025%" y="85" width="0.8044%" height="15" fill="rgb(228,99,48)"/><text x="68.2525%" y="95.50"></text></g><g><title>def_span (1,105,593 samples, 0.34%)</title><rect x="68.4687%" y="69" width="0.3382%" height="15" fill="rgb(253,11,6)"/><text x="68.7187%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (967,381 samples, 0.30%)</title><rect x="68.5110%" y="53" width="0.2959%" height="15" fill="rgb(247,143,39)"/><text x="68.7610%" y="63.50"></text></g><g><title>trait_impls_of (2,412,210 samples, 0.74%)</title><rect x="68.8187%" y="101" width="0.7379%" height="15" fill="rgb(236,97,10)"/><text x="69.0687%" y="111.50"></text></g><g><title>implementations_of_trait (960,402 samples, 0.29%)</title><rect x="69.2629%" y="85" width="0.2938%" height="15" fill="rgb(233,208,19)"/><text x="69.5129%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (490,246 samples, 0.15%)</title><rect x="69.4067%" y="69" width="0.1500%" height="15" fill="rgb(216,164,2)"/><text x="69.6567%" y="79.50"></text></g><g><title>evaluate_obligation (29,770,871 samples, 9.11%)</title><rect x="60.4657%" y="117" width="9.1072%" height="15" fill="rgb(220,129,5)"/><text x="60.7157%" y="127.50">evaluate_obli..</text></g><g><title>generics_of (2,514,867 samples, 0.77%)</title><rect x="69.6930%" y="117" width="0.7693%" height="15" fill="rgb(242,17,10)"/><text x="69.9430%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,777,140 samples, 0.54%)</title><rect x="69.9187%" y="101" width="0.5436%" height="15" fill="rgb(242,107,0)"/><text x="70.1687%" y="111.50"></text></g><g><title>impl_item_implementor_ids (359,862 samples, 0.11%)</title><rect x="70.4623%" y="117" width="0.1101%" height="15" fill="rgb(251,28,31)"/><text x="70.7123%" y="127.50"></text></g><g><title>evaluate_obligation (810,779 samples, 0.25%)</title><rect x="71.0705%" y="101" width="0.2480%" height="15" fill="rgb(233,223,10)"/><text x="71.3205%" y="111.50"></text></g><g><title>method_autoderef_steps (1,695,665 samples, 0.52%)</title><rect x="70.8072%" y="117" width="0.5187%" height="15" fill="rgb(215,21,27)"/><text x="71.0572%" y="127.50"></text></g><g><title>explicit_predicates_of (393,388 samples, 0.12%)</title><rect x="71.6241%" y="85" width="0.1203%" height="15" fill="rgb(232,23,21)"/><text x="71.8741%" y="95.50"></text></g><g><title>predicates_of (1,230,121 samples, 0.38%)</title><rect x="71.4097%" y="117" width="0.3763%" height="15" fill="rgb(244,5,23)"/><text x="71.6597%" y="127.50"></text></g><g><title>predicates_defined_on (830,104 samples, 0.25%)</title><rect x="71.5321%" y="101" width="0.2539%" height="15" fill="rgb(226,81,46)"/><text x="71.7821%" y="111.50"></text></g><g><title>specializes (565,106 samples, 0.17%)</title><rect x="71.8156%" y="117" width="0.1729%" height="15" fill="rgb(247,70,30)"/><text x="72.0656%" y="127.50"></text></g><g><title>generics_of (553,996 samples, 0.17%)</title><rect x="75.7614%" y="85" width="0.1695%" height="15" fill="rgb(212,68,19)"/><text x="76.0114%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (375,634 samples, 0.11%)</title><rect x="75.8160%" y="69" width="0.1149%" height="15" fill="rgb(240,187,13)"/><text x="76.0660%" y="79.50"></text></g><g><title>impl_trait_ref (1,006,941 samples, 0.31%)</title><rect x="75.9705%" y="85" width="0.3080%" height="15" fill="rgb(223,113,26)"/><text x="76.2205%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (625,366 samples, 0.19%)</title><rect x="76.0873%" y="69" width="0.1913%" height="15" fill="rgb(206,192,2)"/><text x="76.3373%" y="79.50"></text></g><g><title>predicates_of (709,655 samples, 0.22%)</title><rect x="76.2886%" y="85" width="0.2171%" height="15" fill="rgb(241,108,4)"/><text x="76.5386%" y="95.50"></text></g><g><title>predicates_defined_on (395,194 samples, 0.12%)</title><rect x="76.3848%" y="69" width="0.1209%" height="15" fill="rgb(247,173,49)"/><text x="76.6348%" y="79.50"></text></g><g><title>specializes (2,134,582 samples, 0.65%)</title><rect x="76.5057%" y="85" width="0.6530%" height="15" fill="rgb(224,114,35)"/><text x="76.7557%" y="95.50"></text></g><g><title>param_env (1,177,342 samples, 0.36%)</title><rect x="76.7985%" y="69" width="0.3602%" height="15" fill="rgb(245,159,27)"/><text x="77.0485%" y="79.50"></text></g><g><title>def_span (522,065 samples, 0.16%)</title><rect x="76.9990%" y="53" width="0.1597%" height="15" fill="rgb(245,172,44)"/><text x="77.2490%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (456,165 samples, 0.14%)</title><rect x="77.0191%" y="37" width="0.1395%" height="15" fill="rgb(236,23,11)"/><text x="77.2691%" y="47.50"></text></g><g><title>evaluate_obligation (8,076,043 samples, 2.47%)</title><rect x="74.7191%" y="101" width="2.4705%" height="15" fill="rgb(205,117,38)"/><text x="74.9691%" y="111.50">ev..</text></g><g><title>typeck (17,303,903 samples, 5.29%)</title><rect x="72.1053%" y="117" width="5.2934%" height="15" fill="rgb(237,72,25)"/><text x="72.3553%" y="127.50">typeck</text></g><g><title>item_bodies_checking (140,626,761 samples, 43.02%)</title><rect x="34.4148%" y="165" width="43.0192%" height="15" fill="rgb(244,70,9)"/><text x="34.6648%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (140,623,151 samples, 43.02%)</title><rect x="34.4159%" y="149" width="43.0181%" height="15" fill="rgb(217,125,39)"/><text x="34.6659%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (140,451,668 samples, 42.97%)</title><rect x="34.4684%" y="133" width="42.9656%" height="15" fill="rgb(235,36,10)"/><text x="34.7184%" y="143.50">typeck</text></g><g><title>typeck (1,087,133 samples, 0.33%)</title><rect x="77.9635%" y="133" width="0.3326%" height="15" fill="rgb(251,123,47)"/><text x="78.2135%" y="143.50"></text></g><g><title>item_types_checking (2,819,491 samples, 0.86%)</title><rect x="77.4340%" y="165" width="0.8625%" height="15" fill="rgb(221,13,13)"/><text x="77.6840%" y="175.50"></text></g><g><title>check_mod_item_types (2,808,141 samples, 0.86%)</title><rect x="77.4375%" y="149" width="0.8590%" height="15" fill="rgb(238,131,9)"/><text x="77.6875%" y="159.50"></text></g><g><title>fn_sig (780,710 samples, 0.24%)</title><rect x="78.4660%" y="133" width="0.2388%" height="15" fill="rgb(211,50,8)"/><text x="78.7160%" y="143.50"></text></g><g><title>named_region_map (734,885 samples, 0.22%)</title><rect x="78.7991%" y="117" width="0.2248%" height="15" fill="rgb(245,182,24)"/><text x="79.0491%" y="127.50"></text></g><g><title>resolve_lifetimes (682,485 samples, 0.21%)</title><rect x="78.8152%" y="101" width="0.2088%" height="15" fill="rgb(242,14,37)"/><text x="79.0652%" y="111.50"></text></g><g><title>generics_of (1,065,128 samples, 0.33%)</title><rect x="78.7048%" y="133" width="0.3258%" height="15" fill="rgb(246,228,12)"/><text x="78.9548%" y="143.50"></text></g><g><title>predicates_of (838,382 samples, 0.26%)</title><rect x="79.0550%" y="133" width="0.2565%" height="15" fill="rgb(213,55,15)"/><text x="79.3050%" y="143.50"></text></g><g><title>predicates_defined_on (745,039 samples, 0.23%)</title><rect x="79.0836%" y="117" width="0.2279%" height="15" fill="rgb(209,9,3)"/><text x="79.3336%" y="127.50"></text></g><g><title>type_collecting (3,455,458 samples, 1.06%)</title><rect x="78.2999%" y="165" width="1.0571%" height="15" fill="rgb(230,59,30)"/><text x="78.5499%" y="175.50"></text></g><g><title>collect_mod_item_types (3,430,848 samples, 1.05%)</title><rect x="78.3075%" y="149" width="1.0495%" height="15" fill="rgb(209,121,21)"/><text x="78.5575%" y="159.50"></text></g><g><title>evaluate_obligation (471,815 samples, 0.14%)</title><rect x="80.2178%" y="133" width="0.1443%" height="15" fill="rgb(220,109,13)"/><text x="80.4678%" y="143.50"></text></g><g><title>param_env (346,381 samples, 0.11%)</title><rect x="80.4411%" y="133" width="0.1060%" height="15" fill="rgb(232,18,1)"/><text x="80.6911%" y="143.50"></text></g><g><title>region_scope_tree (582,174 samples, 0.18%)</title><rect x="80.5592%" y="133" width="0.1781%" height="15" fill="rgb(215,41,42)"/><text x="80.8092%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,196,019 samples, 1.28%)</title><rect x="79.4877%" y="149" width="1.2836%" height="15" fill="rgb(224,123,36)"/><text x="79.7377%" y="159.50"></text></g><g><title>evaluate_obligation (1,808,997 samples, 0.55%)</title><rect x="81.6540%" y="133" width="0.5534%" height="15" fill="rgb(240,125,3)"/><text x="81.9040%" y="143.50"></text></g><g><title>implied_outlives_bounds (364,338 samples, 0.11%)</title><rect x="82.2156%" y="133" width="0.1115%" height="15" fill="rgb(205,98,50)"/><text x="82.4656%" y="143.50"></text></g><g><title>object_safety_violations (635,327 samples, 0.19%)</title><rect x="82.3273%" y="133" width="0.1944%" height="15" fill="rgb(205,185,37)"/><text x="82.5773%" y="143.50"></text></g><g><title>param_env (516,866 samples, 0.16%)</title><rect x="82.5216%" y="133" width="0.1581%" height="15" fill="rgb(238,207,15)"/><text x="82.7716%" y="143.50"></text></g><g><title>region_scope_tree (550,862 samples, 0.17%)</title><rect x="82.7222%" y="133" width="0.1685%" height="15" fill="rgb(213,199,42)"/><text x="82.9722%" y="143.50"></text></g><g><title>check_item_well_formed (7,092,859 samples, 2.17%)</title><rect x="80.7713%" y="149" width="2.1698%" height="15" fill="rgb(235,201,11)"/><text x="81.0213%" y="159.50">c..</text></g><g><title>analysis (270,990,287 samples, 82.90%)</title><rect x="0.2299%" y="197" width="82.8988%" height="15" fill="rgb(207,46,11)"/><text x="0.4799%" y="207.50">analysis</text></g><g><title>type_check_crate (177,745,135 samples, 54.37%)</title><rect x="28.7545%" y="181" width="54.3741%" height="15" fill="rgb(241,35,35)"/><text x="29.0045%" y="191.50">type_check_crate</text></g><g><title>wf_checking (12,319,618 samples, 3.77%)</title><rect x="79.3599%" y="165" width="3.7687%" height="15" fill="rgb(243,32,47)"/><text x="79.6099%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (613,055 samples, 0.19%)</title><rect x="82.9411%" y="149" width="0.1875%" height="15" fill="rgb(247,202,23)"/><text x="83.1911%" y="159.50"></text></g><g><title>codegen_crate (562,756 samples, 0.17%)</title><rect x="83.1305%" y="197" width="0.1722%" height="15" fill="rgb(219,102,11)"/><text x="83.3805%" y="207.50"></text></g><g><title>metadata_register_crate (5,397,549 samples, 1.65%)</title><rect x="90.6218%" y="149" width="1.6512%" height="15" fill="rgb(243,110,44)"/><text x="90.8718%" y="159.50"></text></g><g><title>metadata_register_crate (4,393,607 samples, 1.34%)</title><rect x="90.9289%" y="133" width="1.3441%" height="15" fill="rgb(222,74,54)"/><text x="91.1789%" y="143.50"></text></g><g><title>metadata_register_crate (3,527,358 samples, 1.08%)</title><rect x="91.1939%" y="117" width="1.0791%" height="15" fill="rgb(216,99,12)"/><text x="91.4439%" y="127.50"></text></g><g><title>macro_expand_crate (29,262,677 samples, 8.95%)</title><rect x="83.4812%" y="181" width="8.9518%" height="15" fill="rgb(226,22,26)"/><text x="83.7312%" y="191.50">macro_expand_..</text></g><g><title>expand_crate (29,252,207 samples, 8.95%)</title><rect x="83.4844%" y="165" width="8.9486%" height="15" fill="rgb(217,163,10)"/><text x="83.7344%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (522,826 samples, 0.16%)</title><rect x="92.2730%" y="149" width="0.1599%" height="15" fill="rgb(213,25,53)"/><text x="92.5230%" y="159.50"></text></g><g><title>finalize_imports (614,007 samples, 0.19%)</title><rect x="92.4467%" y="165" width="0.1878%" height="15" fill="rgb(252,105,26)"/><text x="92.6967%" y="175.50"></text></g><g><title>late_resolve_crate (4,146,477 samples, 1.27%)</title><rect x="92.6933%" y="165" width="1.2685%" height="15" fill="rgb(220,39,43)"/><text x="92.9433%" y="175.50"></text></g><g><title>configure_and_expand (35,105,592 samples, 10.74%)</title><rect x="83.3027%" y="197" width="10.7392%" height="15" fill="rgb(229,68,48)"/><text x="83.5527%" y="207.50">configure_and_ex..</text></g><g><title>resolve_crate (5,220,898 samples, 1.60%)</title><rect x="92.4447%" y="181" width="1.5971%" height="15" fill="rgb(252,8,32)"/><text x="92.6947%" y="191.50"></text></g><g><title>drop_ast (439,095 samples, 0.13%)</title><rect x="94.0419%" y="197" width="0.1343%" height="15" fill="rgb(223,20,43)"/><text x="94.2919%" y="207.50"></text></g><g><title>early_lint_checks (827,169 samples, 0.25%)</title><rect x="94.1846%" y="197" width="0.2530%" height="15" fill="rgb(229,81,49)"/><text x="94.4346%" y="207.50"></text></g><g><title>free_global_ctxt (6,094,909 samples, 1.86%)</title><rect x="94.4376%" y="197" width="1.8645%" height="15" fill="rgb(236,28,36)"/><text x="94.6876%" y="207.50">f..</text></g><g><title>generate_crate_metadata (2,348,376 samples, 0.72%)</title><rect x="96.3021%" y="197" width="0.7184%" height="15" fill="rgb(249,185,26)"/><text x="96.5521%" y="207.50"></text></g><g><title>hir_lowering (6,408,842 samples, 1.96%)</title><rect x="97.0205%" y="197" width="1.9605%" height="15" fill="rgb(249,174,33)"/><text x="97.2705%" y="207.50">h..</text></g><g><title>parse_crate (367,445 samples, 0.11%)</title><rect x="99.0024%" y="197" width="0.1124%" height="15" fill="rgb(233,201,37)"/><text x="99.2524%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,152,274 samples, 0.66%)</title><rect x="99.1772%" y="197" width="0.6584%" height="15" fill="rgb(221,78,26)"/><text x="99.4272%" y="207.50"></text></g><g><title>all (326,892,963 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (326,892,963 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (423,535 samples, 0.13%)</title><rect x="99.8704%" y="197" width="0.1296%" height="15" fill="rgb(229,67,23)"/><text x="100.1204%" y="207.50"></text></g></svg></svg>