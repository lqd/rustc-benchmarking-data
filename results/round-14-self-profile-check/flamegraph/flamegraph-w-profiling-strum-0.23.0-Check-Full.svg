<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>thir_body (81,201 samples, 0.13%)</title><rect x="4.2714%" y="69" width="0.1305%" height="15" fill="rgb(227,0,7)"/><text x="4.5214%" y="79.50"></text></g><g><title>mir_const (610,416 samples, 0.98%)</title><rect x="3.4250%" y="117" width="0.9810%" height="15" fill="rgb(217,0,24)"/><text x="3.6750%" y="127.50"></text></g><g><title>unsafety_check_result (475,075 samples, 0.76%)</title><rect x="3.6425%" y="101" width="0.7635%" height="15" fill="rgb(221,193,54)"/><text x="3.8925%" y="111.50"></text></g><g><title>mir_built (393,954 samples, 0.63%)</title><rect x="3.7729%" y="85" width="0.6331%" height="15" fill="rgb(248,212,6)"/><text x="4.0229%" y="95.50"></text></g><g><title>mir_promoted (755,607 samples, 1.21%)</title><rect x="3.2066%" y="133" width="1.2144%" height="15" fill="rgb(208,68,35)"/><text x="3.4566%" y="143.50"></text></g><g><title>type_op_prove_predicate (115,530 samples, 0.19%)</title><rect x="4.4966%" y="133" width="0.1857%" height="15" fill="rgb(232,128,0)"/><text x="4.7466%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,019,283 samples, 3.25%)</title><rect x="1.4403%" y="165" width="3.2453%" height="15" fill="rgb(207,160,47)"/><text x="1.6903%" y="175.50">MIR..</text></g><g><title>mir_borrowck (2,003,551 samples, 3.22%)</title><rect x="1.4655%" y="149" width="3.2200%" height="15" fill="rgb(228,23,34)"/><text x="1.7155%" y="159.50">mir..</text></g><g><title>hir_module_items (131,362 samples, 0.21%)</title><rect x="4.6924%" y="165" width="0.2111%" height="15" fill="rgb(218,30,26)"/><text x="4.9424%" y="175.50"></text></g><g><title>get_lang_items (90,781 samples, 0.15%)</title><rect x="5.2911%" y="117" width="0.1459%" height="15" fill="rgb(220,122,19)"/><text x="5.5411%" y="127.50"></text></g><g><title>associated_item (67,393 samples, 0.11%)</title><rect x="5.4916%" y="101" width="0.1083%" height="15" fill="rgb(250,228,42)"/><text x="5.7416%" y="111.50"></text></g><g><title>item_attrs (79,360 samples, 0.13%)</title><rect x="5.6370%" y="85" width="0.1275%" height="15" fill="rgb(240,193,28)"/><text x="5.8870%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (67,580 samples, 0.11%)</title><rect x="5.6559%" y="69" width="0.1086%" height="15" fill="rgb(216,20,37)"/><text x="5.9059%" y="79.50"></text></g><g><title>codegen_fn_attrs (153,602 samples, 0.25%)</title><rect x="5.5999%" y="101" width="0.2469%" height="15" fill="rgb(206,188,39)"/><text x="5.8499%" y="111.50"></text></g><g><title>should_inherit_track_caller (261,035 samples, 0.42%)</title><rect x="5.4370%" y="117" width="0.4195%" height="15" fill="rgb(217,207,13)"/><text x="5.6870%" y="127.50"></text></g><g><title>codegen_fn_attrs (457,786 samples, 0.74%)</title><rect x="5.1748%" y="133" width="0.7357%" height="15" fill="rgb(231,73,38)"/><text x="5.4248%" y="143.50"></text></g><g><title>check_mod_attrs (596,297 samples, 0.96%)</title><rect x="4.9532%" y="149" width="0.9583%" height="15" fill="rgb(225,20,46)"/><text x="5.2032%" y="159.50"></text></g><g><title>lookup_deprecation_entry (115,131 samples, 0.19%)</title><rect x="6.2310%" y="133" width="0.1850%" height="15" fill="rgb(210,31,41)"/><text x="6.4810%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (307,273 samples, 0.49%)</title><rect x="6.0710%" y="149" width="0.4938%" height="15" fill="rgb(221,200,47)"/><text x="6.3210%" y="159.50"></text></g><g><title>misc_checking_1 (1,080,872 samples, 1.74%)</title><rect x="4.9041%" y="165" width="1.7371%" height="15" fill="rgb(226,26,5)"/><text x="5.1541%" y="175.50"></text></g><g><title>misc_checking_2 (173,971 samples, 0.28%)</title><rect x="6.6412%" y="165" width="0.2796%" height="15" fill="rgb(249,33,26)"/><text x="6.8912%" y="175.50"></text></g><g><title>match_checking (112,371 samples, 0.18%)</title><rect x="6.7402%" y="149" width="0.1806%" height="15" fill="rgb(235,183,28)"/><text x="6.9902%" y="159.50"></text></g><g><title>check_match (106,731 samples, 0.17%)</title><rect x="6.7493%" y="133" width="0.1715%" height="15" fill="rgb(221,5,38)"/><text x="6.9993%" y="143.50"></text></g><g><title>death_checking (237,402 samples, 0.38%)</title><rect x="7.0082%" y="149" width="0.3815%" height="15" fill="rgb(247,18,42)"/><text x="7.2582%" y="159.50"></text></g><g><title>item_attrs (156,252 samples, 0.25%)</title><rect x="7.1386%" y="133" width="0.2511%" height="15" fill="rgb(241,131,45)"/><text x="7.3886%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (154,612 samples, 0.25%)</title><rect x="7.1413%" y="117" width="0.2485%" height="15" fill="rgb(249,31,29)"/><text x="7.3913%" y="127.50"></text></g><g><title>crate_lints (1,515,167 samples, 2.44%)</title><rect x="7.3918%" y="133" width="2.4351%" height="15" fill="rgb(225,111,53)"/><text x="7.6418%" y="143.50">cr..</text></g><g><title>type_of (1,005,793 samples, 1.62%)</title><rect x="8.2105%" y="117" width="1.6165%" height="15" fill="rgb(238,160,17)"/><text x="8.4605%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (773,668 samples, 1.24%)</title><rect x="8.5835%" y="101" width="1.2434%" height="15" fill="rgb(214,148,48)"/><text x="8.8335%" y="111.50"></text></g><g><title>lint_checking (1,574,568 samples, 2.53%)</title><rect x="7.3897%" y="149" width="2.5306%" height="15" fill="rgb(232,36,49)"/><text x="7.6397%" y="159.50">li..</text></g><g><title>privacy_access_levels (71,731 samples, 0.12%)</title><rect x="9.9203%" y="149" width="0.1153%" height="15" fill="rgb(209,103,24)"/><text x="10.1703%" y="159.50"></text></g><g><title>privacy_checking_modules (126,411 samples, 0.20%)</title><rect x="10.0356%" y="149" width="0.2032%" height="15" fill="rgb(229,88,8)"/><text x="10.2856%" y="159.50"></text></g><g><title>check_mod_privacy (124,631 samples, 0.20%)</title><rect x="10.0384%" y="133" width="0.2003%" height="15" fill="rgb(213,181,19)"/><text x="10.2884%" y="143.50"></text></g><g><title>misc_checking_3 (2,073,963 samples, 3.33%)</title><rect x="6.9208%" y="165" width="3.3332%" height="15" fill="rgb(254,191,54)"/><text x="7.1708%" y="175.50">mis..</text></g><g><title>impl_parent (94,871 samples, 0.15%)</title><rect x="11.4127%" y="69" width="0.1525%" height="15" fill="rgb(241,83,37)"/><text x="11.6627%" y="79.50"></text></g><g><title>impl_trait_ref (285,882 samples, 0.46%)</title><rect x="11.5651%" y="69" width="0.4595%" height="15" fill="rgb(233,36,39)"/><text x="11.8151%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (245,391 samples, 0.39%)</title><rect x="11.6302%" y="53" width="0.3944%" height="15" fill="rgb(226,3,54)"/><text x="11.8802%" y="63.50"></text></g><g><title>adt_destructor (1,044,082 samples, 1.68%)</title><rect x="10.4380%" y="117" width="1.6780%" height="15" fill="rgb(245,192,40)"/><text x="10.6880%" y="127.50"></text></g><g><title>coherent_trait (1,039,532 samples, 1.67%)</title><rect x="10.4453%" y="101" width="1.6707%" height="15" fill="rgb(238,167,29)"/><text x="10.6953%" y="111.50"></text></g><g><title>specialization_graph_of (1,036,481 samples, 1.67%)</title><rect x="10.4502%" y="85" width="1.6658%" height="15" fill="rgb(232,182,51)"/><text x="10.7002%" y="95.50"></text></g><g><title>param_env (130,552 samples, 0.21%)</title><rect x="12.1159%" y="117" width="0.2098%" height="15" fill="rgb(231,60,39)"/><text x="12.3659%" y="127.50"></text></g><g><title>impl_parent (4,346,595 samples, 6.99%)</title><rect x="26.1225%" y="101" width="6.9856%" height="15" fill="rgb(208,69,12)"/><text x="26.3725%" y="111.50">impl_pare..</text></g><g><title>metadata_decode_entry_impl_parent (2,241,295 samples, 3.60%)</title><rect x="29.5060%" y="85" width="3.6021%" height="15" fill="rgb(235,93,37)"/><text x="29.7560%" y="95.50">meta..</text></g><g><title>impl_trait_ref (10,304,090 samples, 16.56%)</title><rect x="33.1081%" y="101" width="16.5602%" height="15" fill="rgb(213,116,39)"/><text x="33.3581%" y="111.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (8,139,618 samples, 13.08%)</title><rect x="36.5867%" y="85" width="13.0816%" height="15" fill="rgb(222,207,29)"/><text x="36.8367%" y="95.50">metadata_decode_entr..</text></g><g><title>coherent_trait (26,303,203 samples, 42.27%)</title><rect x="10.3450%" y="133" width="42.2731%" height="15" fill="rgb(206,96,30)"/><text x="10.5950%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (25,070,709 samples, 40.29%)</title><rect x="12.3258%" y="117" width="40.2923%" height="15" fill="rgb(218,138,4)"/><text x="12.5758%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,832,661 samples, 2.95%)</title><rect x="49.6727%" y="101" width="2.9454%" height="15" fill="rgb(250,191,14)"/><text x="49.9227%" y="111.50">tr..</text></g><g><title>implementations_of_trait (467,068 samples, 0.75%)</title><rect x="51.8674%" y="85" width="0.7506%" height="15" fill="rgb(239,60,40)"/><text x="52.1174%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (383,834 samples, 0.62%)</title><rect x="52.0012%" y="69" width="0.6169%" height="15" fill="rgb(206,27,48)"/><text x="52.2512%" y="79.50"></text></g><g><title>coherence_checking (26,387,344 samples, 42.41%)</title><rect x="10.2977%" y="149" width="42.4083%" height="15" fill="rgb(225,35,8)"/><text x="10.5477%" y="159.50">coherence_checking</text></g><g><title>dropck_outlives (75,960 samples, 0.12%)</title><rect x="54.7754%" y="101" width="0.1221%" height="15" fill="rgb(250,213,24)"/><text x="55.0254%" y="111.50"></text></g><g><title>item_bodies_checking (1,619,678 samples, 2.60%)</title><rect x="52.7498%" y="149" width="2.6031%" height="15" fill="rgb(247,123,22)"/><text x="52.9998%" y="159.50">it..</text></g><g><title>typeck_item_bodies (1,617,808 samples, 2.60%)</title><rect x="52.7528%" y="133" width="2.6001%" height="15" fill="rgb(231,138,38)"/><text x="53.0028%" y="143.50">ty..</text></g><g><title>typeck (1,606,538 samples, 2.58%)</title><rect x="52.7709%" y="117" width="2.5819%" height="15" fill="rgb(231,145,46)"/><text x="53.0209%" y="127.50">ty..</text></g><g><title>item_types_checking (312,063 samples, 0.50%)</title><rect x="55.3528%" y="149" width="0.5015%" height="15" fill="rgb(251,118,11)"/><text x="55.6028%" y="159.50"></text></g><g><title>check_mod_item_types (309,173 samples, 0.50%)</title><rect x="55.3575%" y="133" width="0.4969%" height="15" fill="rgb(217,147,25)"/><text x="55.6075%" y="143.50"></text></g><g><title>type_of (65,980 samples, 0.11%)</title><rect x="56.5404%" y="101" width="0.1060%" height="15" fill="rgb(247,81,37)"/><text x="56.7904%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (62,430 samples, 0.10%)</title><rect x="56.5461%" y="85" width="0.1003%" height="15" fill="rgb(209,12,38)"/><text x="56.7961%" y="95.50"></text></g><g><title>fn_sig (269,463 samples, 0.43%)</title><rect x="56.2246%" y="117" width="0.4331%" height="15" fill="rgb(227,1,9)"/><text x="56.4746%" y="127.50"></text></g><g><title>named_region_map (316,373 samples, 0.51%)</title><rect x="56.8110%" y="101" width="0.5085%" height="15" fill="rgb(248,47,43)"/><text x="57.0610%" y="111.50"></text></g><g><title>resolve_lifetimes (293,843 samples, 0.47%)</title><rect x="56.8472%" y="85" width="0.4722%" height="15" fill="rgb(221,10,30)"/><text x="57.0972%" y="95.50"></text></g><g><title>lint_levels (79,581 samples, 0.13%)</title><rect x="57.1916%" y="69" width="0.1279%" height="15" fill="rgb(210,229,1)"/><text x="57.4416%" y="79.50"></text></g><g><title>generics_of (430,325 samples, 0.69%)</title><rect x="56.6577%" y="117" width="0.6916%" height="15" fill="rgb(222,148,37)"/><text x="56.9077%" y="127.50"></text></g><g><title>impl_trait_ref (99,741 samples, 0.16%)</title><rect x="57.3493%" y="117" width="0.1603%" height="15" fill="rgb(234,67,33)"/><text x="57.5993%" y="127.50"></text></g><g><title>associated_item (86,201 samples, 0.14%)</title><rect x="57.8594%" y="37" width="0.1385%" height="15" fill="rgb(247,98,35)"/><text x="58.1094%" y="47.50"></text></g><g><title>associated_items (137,182 samples, 0.22%)</title><rect x="57.7826%" y="53" width="0.2205%" height="15" fill="rgb(247,138,52)"/><text x="58.0326%" y="63.50"></text></g><g><title>late_bound_vars_map (185,902 samples, 0.30%)</title><rect x="57.7113%" y="85" width="0.2988%" height="15" fill="rgb(213,79,30)"/><text x="57.9613%" y="95.50"></text></g><g><title>resolve_lifetimes (179,782 samples, 0.29%)</title><rect x="57.7212%" y="69" width="0.2889%" height="15" fill="rgb(246,177,23)"/><text x="57.9712%" y="79.50"></text></g><g><title>explicit_item_bounds (238,612 samples, 0.38%)</title><rect x="57.6393%" y="101" width="0.3835%" height="15" fill="rgb(230,62,27)"/><text x="57.8893%" y="111.50"></text></g><g><title>item_bounds (320,873 samples, 0.52%)</title><rect x="57.5096%" y="117" width="0.5157%" height="15" fill="rgb(216,154,8)"/><text x="57.7596%" y="127.50"></text></g><g><title>explicit_predicates_of (118,841 samples, 0.19%)</title><rect x="58.2194%" y="85" width="0.1910%" height="15" fill="rgb(244,35,45)"/><text x="58.4694%" y="95.50"></text></g><g><title>predicates_of (278,903 samples, 0.45%)</title><rect x="58.0253%" y="117" width="0.4482%" height="15" fill="rgb(251,115,12)"/><text x="58.2753%" y="127.50"></text></g><g><title>predicates_defined_on (216,692 samples, 0.35%)</title><rect x="58.1252%" y="101" width="0.3483%" height="15" fill="rgb(240,54,50)"/><text x="58.3752%" y="111.50"></text></g><g><title>super_predicates_of (123,191 samples, 0.20%)</title><rect x="58.4735%" y="117" width="0.1980%" height="15" fill="rgb(233,84,52)"/><text x="58.7235%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (106,661 samples, 0.17%)</title><rect x="58.5001%" y="101" width="0.1714%" height="15" fill="rgb(207,117,47)"/><text x="58.7501%" y="111.50"></text></g><g><title>type_collecting (1,875,381 samples, 3.01%)</title><rect x="55.8553%" y="149" width="3.0140%" height="15" fill="rgb(249,43,39)"/><text x="56.1053%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (1,863,441 samples, 2.99%)</title><rect x="55.8745%" y="133" width="2.9948%" height="15" fill="rgb(209,38,44)"/><text x="56.1245%" y="143.50">col..</text></g><g><title>type_of (116,842 samples, 0.19%)</title><rect x="58.6815%" y="117" width="0.1878%" height="15" fill="rgb(236,212,23)"/><text x="58.9315%" y="127.50"></text></g><g><title>evaluate_obligation (144,192 samples, 0.23%)</title><rect x="59.3917%" y="117" width="0.2317%" height="15" fill="rgb(242,79,21)"/><text x="59.6417%" y="127.50"></text></g><g><title>check_impl_item_well_formed (578,017 samples, 0.93%)</title><rect x="58.9536%" y="133" width="0.9290%" height="15" fill="rgb(211,96,35)"/><text x="59.2036%" y="143.50"></text></g><g><title>evaluate_obligation (150,302 samples, 0.24%)</title><rect x="60.4847%" y="117" width="0.2416%" height="15" fill="rgb(253,215,40)"/><text x="60.7347%" y="127.50"></text></g><g><title>param_env (78,053 samples, 0.13%)</title><rect x="60.7733%" y="117" width="0.1254%" height="15" fill="rgb(211,81,21)"/><text x="61.0233%" y="127.50"></text></g><g><title>predicates_of (73,710 samples, 0.12%)</title><rect x="60.8987%" y="117" width="0.1185%" height="15" fill="rgb(208,190,38)"/><text x="61.1487%" y="127.50"></text></g><g><title>check_item_well_formed (758,328 samples, 1.22%)</title><rect x="59.8826%" y="133" width="1.2187%" height="15" fill="rgb(235,213,38)"/><text x="60.1326%" y="143.50"></text></g><g><title>evaluate_obligation (70,711 samples, 0.11%)</title><rect x="61.6901%" y="117" width="0.1136%" height="15" fill="rgb(237,122,38)"/><text x="61.9401%" y="127.50"></text></g><g><title>analysis (37,929,382 samples, 60.96%)</title><rect x="1.1558%" y="181" width="60.9581%" height="15" fill="rgb(244,218,35)"/><text x="1.4058%" y="191.50">analysis</text></g><g><title>type_check_crate (32,268,300 samples, 51.86%)</title><rect x="10.2540%" y="165" width="51.8599%" height="15" fill="rgb(240,68,47)"/><text x="10.5040%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,018,033 samples, 3.24%)</title><rect x="58.8706%" y="149" width="3.2433%" height="15" fill="rgb(210,16,53)"/><text x="59.1206%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (630,038 samples, 1.01%)</title><rect x="61.1013%" y="133" width="1.0126%" height="15" fill="rgb(235,124,12)"/><text x="61.3513%" y="143.50"></text></g><g><title>trait_impls_of (62,820 samples, 0.10%)</title><rect x="62.0129%" y="117" width="0.1010%" height="15" fill="rgb(224,169,11)"/><text x="62.2629%" y="127.50"></text></g><g><title>codegen_crate (353,044 samples, 0.57%)</title><rect x="62.1303%" y="181" width="0.5674%" height="15" fill="rgb(250,166,2)"/><text x="62.3803%" y="191.50"></text></g><g><title>AST_validation (88,441 samples, 0.14%)</title><rect x="63.0240%" y="165" width="0.1421%" height="15" fill="rgb(242,216,29)"/><text x="63.2740%" y="175.50"></text></g><g><title>crate_injection (72,801 samples, 0.12%)</title><rect x="63.2373%" y="165" width="0.1170%" height="15" fill="rgb(230,116,27)"/><text x="63.4873%" y="175.50"></text></g><g><title>metadata_load_macro (413,876 samples, 0.67%)</title><rect x="81.2382%" y="133" width="0.6652%" height="15" fill="rgb(228,99,48)"/><text x="81.4882%" y="143.50"></text></g><g><title>metadata_register_crate (2,565,849 samples, 4.12%)</title><rect x="81.9034%" y="133" width="4.1237%" height="15" fill="rgb(253,11,6)"/><text x="82.1534%" y="143.50">meta..</text></g><g><title>metadata_register_crate (952,500 samples, 1.53%)</title><rect x="84.4962%" y="117" width="1.5308%" height="15" fill="rgb(247,143,39)"/><text x="84.7462%" y="127.50"></text></g><g><title>metadata_register_crate (74,570 samples, 0.12%)</title><rect x="85.9072%" y="101" width="0.1198%" height="15" fill="rgb(236,97,10)"/><text x="86.1572%" y="111.50"></text></g><g><title>macro_expand_crate (14,117,597 samples, 22.69%)</title><rect x="63.3543%" y="165" width="22.6890%" height="15" fill="rgb(233,208,19)"/><text x="63.6043%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (14,102,587 samples, 22.66%)</title><rect x="63.3784%" y="149" width="22.6649%" height="15" fill="rgb(216,164,2)"/><text x="63.6284%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (77,101 samples, 0.12%)</title><rect x="86.0645%" y="165" width="0.1239%" height="15" fill="rgb(220,129,5)"/><text x="86.3145%" y="175.50"></text></g><g><title>finalize_macro_resolutions (342,294 samples, 0.55%)</title><rect x="86.2292%" y="149" width="0.5501%" height="15" fill="rgb(242,17,10)"/><text x="86.4792%" y="159.50"></text></g><g><title>late_resolve_crate (1,083,932 samples, 1.74%)</title><rect x="86.7793%" y="149" width="1.7420%" height="15" fill="rgb(242,107,0)"/><text x="87.0293%" y="159.50"></text></g><g><title>configure_and_expand (16,129,590 samples, 25.92%)</title><rect x="62.6977%" y="181" width="25.9226%" height="15" fill="rgb(251,28,31)"/><text x="62.9477%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,513,177 samples, 2.43%)</title><rect x="86.1884%" y="165" width="2.4319%" height="15" fill="rgb(233,223,10)"/><text x="86.4384%" y="175.50">re..</text></g><g><title>drop_ast (77,951 samples, 0.13%)</title><rect x="88.6203%" y="181" width="0.1253%" height="15" fill="rgb(215,21,27)"/><text x="88.8703%" y="191.50"></text></g><g><title>early_lint_checks (232,212 samples, 0.37%)</title><rect x="88.7674%" y="181" width="0.3732%" height="15" fill="rgb(232,23,21)"/><text x="89.0174%" y="191.50"></text></g><g><title>free_global_ctxt (2,620,699 samples, 4.21%)</title><rect x="89.1406%" y="181" width="4.2118%" height="15" fill="rgb(244,5,23)"/><text x="89.3906%" y="191.50">free_..</text></g><g><title>crate_hash (68,191 samples, 0.11%)</title><rect x="93.9346%" y="165" width="0.1096%" height="15" fill="rgb(226,81,46)"/><text x="94.1846%" y="175.50"></text></g><g><title>generate_crate_metadata (506,715 samples, 0.81%)</title><rect x="93.3524%" y="181" width="0.8144%" height="15" fill="rgb(247,70,30)"/><text x="93.6024%" y="191.50"></text></g><g><title>hir_lowering (1,171,033 samples, 1.88%)</title><rect x="94.1668%" y="181" width="1.8820%" height="15" fill="rgb(212,68,19)"/><text x="94.4168%" y="191.50">h..</text></g><g><title>parse_crate (1,115,653 samples, 1.79%)</title><rect x="96.1134%" y="181" width="1.7930%" height="15" fill="rgb(240,187,13)"/><text x="96.3634%" y="191.50">p..</text></g><g><title>prepare_outputs (313,533 samples, 0.50%)</title><rect x="97.9186%" y="181" width="0.5039%" height="15" fill="rgb(223,113,26)"/><text x="98.1686%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (516,086 samples, 0.83%)</title><rect x="98.4225%" y="181" width="0.8294%" height="15" fill="rgb(206,192,2)"/><text x="98.6725%" y="191.50"></text></g><g><title>setup_global_ctxt (141,881 samples, 0.23%)</title><rect x="99.2686%" y="181" width="0.2280%" height="15" fill="rgb(241,108,4)"/><text x="99.5186%" y="191.50"></text></g><g><title>all (62,222,104 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (62,222,104 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (313,194 samples, 0.50%)</title><rect x="99.4967%" y="181" width="0.5033%" height="15" fill="rgb(245,159,27)"/><text x="99.7467%" y="191.50"></text></g></svg></svg>