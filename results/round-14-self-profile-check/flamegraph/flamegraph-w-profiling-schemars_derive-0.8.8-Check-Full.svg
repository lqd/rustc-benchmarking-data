<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (820,448 samples, 0.12%)</title><rect x="14.0530%" y="165" width="0.1185%" height="15" fill="rgb(227,0,7)"/><text x="14.3030%" y="175.50"></text></g><g><title>param_env (1,146,373 samples, 0.17%)</title><rect x="15.3229%" y="133" width="0.1656%" height="15" fill="rgb(217,0,24)"/><text x="15.5729%" y="143.50"></text></g><g><title>item_attrs (920,285 samples, 0.13%)</title><rect x="15.8905%" y="101" width="0.1329%" height="15" fill="rgb(221,193,54)"/><text x="16.1405%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (879,185 samples, 0.13%)</title><rect x="15.8964%" y="85" width="0.1270%" height="15" fill="rgb(248,212,6)"/><text x="16.1464%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,314,231 samples, 0.19%)</title><rect x="15.8442%" y="117" width="0.1898%" height="15" fill="rgb(208,68,35)"/><text x="16.0942%" y="127.50"></text></g><g><title>adt_drop_tys (1,396,576 samples, 0.20%)</title><rect x="19.1075%" y="85" width="0.2017%" height="15" fill="rgb(232,128,0)"/><text x="19.3575%" y="95.50"></text></g><g><title>is_copy_raw (2,749,637 samples, 0.40%)</title><rect x="19.3092%" y="85" width="0.3971%" height="15" fill="rgb(207,160,47)"/><text x="19.5592%" y="95.50"></text></g><g><title>evaluate_obligation (2,169,179 samples, 0.31%)</title><rect x="19.3930%" y="69" width="0.3133%" height="15" fill="rgb(228,23,34)"/><text x="19.6430%" y="79.50"></text></g><g><title>needs_drop_raw (5,235,275 samples, 0.76%)</title><rect x="19.0163%" y="101" width="0.7561%" height="15" fill="rgb(218,30,26)"/><text x="19.2663%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,684,273 samples, 0.68%)</title><rect x="19.9009%" y="85" width="0.6765%" height="15" fill="rgb(220,122,19)"/><text x="20.1509%" y="95.50"></text></g><g><title>evaluate_obligation (903,159 samples, 0.13%)</title><rect x="20.4470%" y="69" width="0.1304%" height="15" fill="rgb(250,228,42)"/><text x="20.6970%" y="79.50"></text></g><g><title>specialization_graph_of (1,443,357 samples, 0.21%)</title><rect x="20.6053%" y="85" width="0.2085%" height="15" fill="rgb(240,193,28)"/><text x="20.8553%" y="95.50"></text></g><g><title>resolve_instance (7,502,263 samples, 1.08%)</title><rect x="19.7724%" y="101" width="1.0835%" height="15" fill="rgb(216,20,37)"/><text x="20.0224%" y="111.50"></text></g><g><title>thir_body (8,064,069 samples, 1.16%)</title><rect x="20.8757%" y="101" width="1.1647%" height="15" fill="rgb(206,188,39)"/><text x="21.1257%" y="111.50"></text></g><g><title>mir_const (50,352,007 samples, 7.27%)</title><rect x="14.7830%" y="149" width="7.2722%" height="15" fill="rgb(217,207,13)"/><text x="15.0330%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (45,467,834 samples, 6.57%)</title><rect x="15.4884%" y="133" width="6.5667%" height="15" fill="rgb(231,73,38)"/><text x="15.7384%" y="143.50">unsafety_..</text></g><g><title>mir_built (41,686,476 samples, 6.02%)</title><rect x="16.0345%" y="117" width="6.0206%" height="15" fill="rgb(225,20,46)"/><text x="16.2845%" y="127.50">mir_built</text></g><g><title>mir_promoted (55,058,399 samples, 7.95%)</title><rect x="14.1938%" y="165" width="7.9519%" height="15" fill="rgb(210,31,41)"/><text x="14.4438%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,502,250 samples, 0.22%)</title><rect x="22.1469%" y="165" width="0.2170%" height="15" fill="rgb(221,200,47)"/><text x="22.3969%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (3,469,577 samples, 0.50%)</title><rect x="22.3638%" y="165" width="0.5011%" height="15" fill="rgb(226,26,5)"/><text x="22.6138%" y="175.50"></text></g><g><title>normalize_projection_ty (2,467,535 samples, 0.36%)</title><rect x="22.5085%" y="149" width="0.3564%" height="15" fill="rgb(249,33,26)"/><text x="22.7585%" y="159.50"></text></g><g><title>type_op_normalize_predicate (3,753,590 samples, 0.54%)</title><rect x="22.8649%" y="165" width="0.5421%" height="15" fill="rgb(235,183,28)"/><text x="23.1149%" y="175.50"></text></g><g><title>normalize_projection_ty (2,048,368 samples, 0.30%)</title><rect x="23.1112%" y="149" width="0.2958%" height="15" fill="rgb(221,5,38)"/><text x="23.3612%" y="159.50"></text></g><g><title>type_op_prove_predicate (15,145,711 samples, 2.19%)</title><rect x="23.4212%" y="165" width="2.1874%" height="15" fill="rgb(247,18,42)"/><text x="23.6712%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (174,470,987 samples, 25.20%)</title><rect x="0.4134%" y="197" width="25.1982%" height="15" fill="rgb(241,131,45)"/><text x="0.6634%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (174,112,943 samples, 25.15%)</title><rect x="0.4651%" y="181" width="25.1465%" height="15" fill="rgb(249,31,29)"/><text x="0.7151%" y="191.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,457,256 samples, 0.21%)</title><rect x="25.7390%" y="181" width="0.2105%" height="15" fill="rgb(225,111,53)"/><text x="25.9890%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (876,260 samples, 0.13%)</title><rect x="26.0432%" y="181" width="0.1266%" height="15" fill="rgb(238,160,17)"/><text x="26.2932%" y="191.50"></text></g><g><title>misc_checking_1 (3,106,005 samples, 0.45%)</title><rect x="25.7335%" y="197" width="0.4486%" height="15" fill="rgb(214,148,48)"/><text x="25.9835%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (3,145,964 samples, 0.45%)</title><rect x="26.1824%" y="181" width="0.4544%" height="15" fill="rgb(232,36,49)"/><text x="26.4324%" y="191.50"></text></g><g><title>check_mod_liveness (2,619,688 samples, 0.38%)</title><rect x="26.2585%" y="165" width="0.3784%" height="15" fill="rgb(209,103,24)"/><text x="26.5085%" y="175.50"></text></g><g><title>misc_checking_2 (6,086,527 samples, 0.88%)</title><rect x="26.1821%" y="197" width="0.8791%" height="15" fill="rgb(229,88,8)"/><text x="26.4321%" y="207.50"></text></g><g><title>match_checking (2,938,153 samples, 0.42%)</title><rect x="26.6368%" y="181" width="0.4243%" height="15" fill="rgb(213,181,19)"/><text x="26.8868%" y="191.50"></text></g><g><title>check_match (2,857,533 samples, 0.41%)</title><rect x="26.6484%" y="165" width="0.4127%" height="15" fill="rgb(254,191,54)"/><text x="26.8984%" y="175.50"></text></g><g><title>death_checking (1,163,723 samples, 0.17%)</title><rect x="27.1418%" y="181" width="0.1681%" height="15" fill="rgb(241,83,37)"/><text x="27.3918%" y="191.50"></text></g><g><title>eval_to_allocation_raw (868,130 samples, 0.13%)</title><rect x="27.5897%" y="149" width="0.1254%" height="15" fill="rgb(233,36,39)"/><text x="27.8397%" y="159.50"></text></g><g><title>eval_to_allocation_raw (865,350 samples, 0.12%)</title><rect x="27.5901%" y="133" width="0.1250%" height="15" fill="rgb(226,3,54)"/><text x="27.8401%" y="143.50"></text></g><g><title>crate_lints (3,573,700 samples, 0.52%)</title><rect x="27.3103%" y="165" width="0.5161%" height="15" fill="rgb(245,192,40)"/><text x="27.5603%" y="175.50"></text></g><g><title>layout_of (985,873 samples, 0.14%)</title><rect x="28.3954%" y="37" width="0.1424%" height="15" fill="rgb(238,167,29)"/><text x="28.6454%" y="47.50"></text></g><g><title>layout_of (1,332,416 samples, 0.19%)</title><rect x="28.3636%" y="53" width="0.1924%" height="15" fill="rgb(232,182,51)"/><text x="28.6136%" y="63.50"></text></g><g><title>layout_of (1,695,929 samples, 0.24%)</title><rect x="28.3380%" y="69" width="0.2449%" height="15" fill="rgb(231,60,39)"/><text x="28.5880%" y="79.50"></text></g><g><title>layout_of (1,847,209 samples, 0.27%)</title><rect x="28.3202%" y="85" width="0.2668%" height="15" fill="rgb(208,69,12)"/><text x="28.5702%" y="95.50"></text></g><g><title>layout_of (2,021,123 samples, 0.29%)</title><rect x="28.3051%" y="133" width="0.2919%" height="15" fill="rgb(235,93,37)"/><text x="28.5551%" y="143.50"></text></g><g><title>layout_of (2,005,383 samples, 0.29%)</title><rect x="28.3074%" y="117" width="0.2896%" height="15" fill="rgb(213,116,39)"/><text x="28.5574%" y="127.50"></text></g><g><title>layout_of (1,975,442 samples, 0.29%)</title><rect x="28.3117%" y="101" width="0.2853%" height="15" fill="rgb(222,207,29)"/><text x="28.5617%" y="111.50"></text></g><g><title>lint_checking (8,912,849 samples, 1.29%)</title><rect x="27.3099%" y="181" width="1.2872%" height="15" fill="rgb(206,96,30)"/><text x="27.5599%" y="191.50"></text></g><g><title>module_lints (5,336,589 samples, 0.77%)</title><rect x="27.8264%" y="165" width="0.7707%" height="15" fill="rgb(218,138,4)"/><text x="28.0764%" y="175.50"></text></g><g><title>lint_mod (5,324,889 samples, 0.77%)</title><rect x="27.8281%" y="149" width="0.7691%" height="15" fill="rgb(250,191,14)"/><text x="28.0781%" y="159.50"></text></g><g><title>privacy_checking_modules (4,780,763 samples, 0.69%)</title><rect x="28.6636%" y="181" width="0.6905%" height="15" fill="rgb(239,60,40)"/><text x="28.9136%" y="191.50"></text></g><g><title>check_mod_privacy (4,773,203 samples, 0.69%)</title><rect x="28.6647%" y="165" width="0.6894%" height="15" fill="rgb(206,27,48)"/><text x="28.9147%" y="175.50"></text></g><g><title>misc_checking_3 (15,900,637 samples, 2.30%)</title><rect x="27.0612%" y="197" width="2.2965%" height="15" fill="rgb(225,35,8)"/><text x="27.3112%" y="207.50">m..</text></g><g><title>impl_parent (2,817,183 samples, 0.41%)</title><rect x="29.9988%" y="133" width="0.4069%" height="15" fill="rgb(250,213,24)"/><text x="30.2488%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,518,570 samples, 0.22%)</title><rect x="30.1864%" y="117" width="0.2193%" height="15" fill="rgb(247,123,22)"/><text x="30.4364%" y="127.50"></text></g><g><title>impl_trait_ref (5,748,304 samples, 0.83%)</title><rect x="30.4057%" y="133" width="0.8302%" height="15" fill="rgb(231,138,38)"/><text x="30.6557%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,516,820 samples, 0.65%)</title><rect x="30.5836%" y="117" width="0.6523%" height="15" fill="rgb(231,145,46)"/><text x="30.8336%" y="127.50"></text></g><g><title>coherent_trait (13,602,872 samples, 1.96%)</title><rect x="29.3837%" y="165" width="1.9646%" height="15" fill="rgb(251,118,11)"/><text x="29.6337%" y="175.50">c..</text></g><g><title>specialization_graph_of (13,141,477 samples, 1.90%)</title><rect x="29.4504%" y="149" width="1.8980%" height="15" fill="rgb(217,147,25)"/><text x="29.7004%" y="159.50">s..</text></g><g><title>trait_impls_of (775,989 samples, 0.11%)</title><rect x="31.2363%" y="133" width="0.1121%" height="15" fill="rgb(247,81,37)"/><text x="31.4863%" y="143.50"></text></g><g><title>coherence_checking (13,682,972 samples, 1.98%)</title><rect x="29.3812%" y="181" width="1.9762%" height="15" fill="rgb(209,12,38)"/><text x="29.6312%" y="191.50">c..</text></g><g><title>adt_dtorck_constraint (704,608 samples, 0.10%)</title><rect x="39.0514%" y="37" width="0.1018%" height="15" fill="rgb(227,1,9)"/><text x="39.3014%" y="47.50"></text></g><g><title>adt_dtorck_constraint (936,910 samples, 0.14%)</title><rect x="39.0226%" y="53" width="0.1353%" height="15" fill="rgb(248,47,43)"/><text x="39.2726%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,219,233 samples, 0.18%)</title><rect x="38.9866%" y="69" width="0.1761%" height="15" fill="rgb(221,10,30)"/><text x="39.2366%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,634,137 samples, 0.24%)</title><rect x="38.9374%" y="85" width="0.2360%" height="15" fill="rgb(210,229,1)"/><text x="39.1874%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,112,723 samples, 0.31%)</title><rect x="38.8788%" y="101" width="0.3051%" height="15" fill="rgb(222,148,37)"/><text x="39.1288%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,904,712 samples, 0.42%)</title><rect x="38.7797%" y="117" width="0.4195%" height="15" fill="rgb(234,67,33)"/><text x="39.0297%" y="127.50"></text></g><g><title>dropck_outlives (5,255,680 samples, 0.76%)</title><rect x="38.4473%" y="133" width="0.7591%" height="15" fill="rgb(247,98,35)"/><text x="38.6973%" y="143.50"></text></g><g><title>evaluate_obligation (2,213,109 samples, 0.32%)</title><rect x="39.2064%" y="133" width="0.3196%" height="15" fill="rgb(247,138,52)"/><text x="39.4564%" y="143.50"></text></g><g><title>dropck_outlives (4,472,377 samples, 0.65%)</title><rect x="56.2484%" y="117" width="0.6459%" height="15" fill="rgb(213,79,30)"/><text x="56.4984%" y="127.50"></text></g><g><title>trait_impls_of (736,529 samples, 0.11%)</title><rect x="58.0979%" y="101" width="0.1064%" height="15" fill="rgb(246,177,23)"/><text x="58.3479%" y="111.50"></text></g><g><title>evaluate_obligation (9,073,210 samples, 1.31%)</title><rect x="56.8943%" y="117" width="1.3104%" height="15" fill="rgb(230,62,27)"/><text x="57.1443%" y="127.50"></text></g><g><title>is_copy_raw (954,701 samples, 0.14%)</title><rect x="58.3946%" y="117" width="0.1379%" height="15" fill="rgb(216,154,8)"/><text x="58.6446%" y="127.50"></text></g><g><title>method_autoderef_steps (2,367,282 samples, 0.34%)</title><rect x="58.5677%" y="117" width="0.3419%" height="15" fill="rgb(244,35,45)"/><text x="58.8177%" y="127.50"></text></g><g><title>evaluate_obligation (1,144,530 samples, 0.17%)</title><rect x="58.7443%" y="101" width="0.1653%" height="15" fill="rgb(251,115,12)"/><text x="58.9943%" y="111.50"></text></g><g><title>predicates_of (960,931 samples, 0.14%)</title><rect x="58.9183%" y="117" width="0.1388%" height="15" fill="rgb(240,54,50)"/><text x="59.1683%" y="127.50"></text></g><g><title>typeck (133,216,624 samples, 19.24%)</title><rect x="39.9179%" y="133" width="19.2400%" height="15" fill="rgb(233,84,52)"/><text x="40.1679%" y="143.50">typeck</text></g><g><title>item_bodies_checking (192,542,009 samples, 27.81%)</title><rect x="31.3614%" y="181" width="27.8081%" height="15" fill="rgb(207,117,47)"/><text x="31.6114%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (192,538,329 samples, 27.81%)</title><rect x="31.3620%" y="165" width="27.8076%" height="15" fill="rgb(249,43,39)"/><text x="31.6120%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (192,378,218 samples, 27.78%)</title><rect x="31.3851%" y="149" width="27.7845%" height="15" fill="rgb(209,38,44)"/><text x="31.6351%" y="159.50">typeck</text></g><g><title>specialization_graph_of (843,289 samples, 0.12%)</title><rect x="59.7305%" y="37" width="0.1218%" height="15" fill="rgb(236,212,23)"/><text x="59.9805%" y="47.50"></text></g><g><title>resolve_instance (903,180 samples, 0.13%)</title><rect x="59.7225%" y="53" width="0.1304%" height="15" fill="rgb(242,79,21)"/><text x="59.9725%" y="63.50"></text></g><g><title>mir_const (3,523,349 samples, 0.51%)</title><rect x="59.6409%" y="101" width="0.5089%" height="15" fill="rgb(211,96,35)"/><text x="59.8909%" y="111.50"></text></g><g><title>unsafety_check_result (3,406,178 samples, 0.49%)</title><rect x="59.6578%" y="85" width="0.4919%" height="15" fill="rgb(253,215,40)"/><text x="59.9078%" y="95.50"></text></g><g><title>mir_built (3,331,387 samples, 0.48%)</title><rect x="59.6686%" y="69" width="0.4811%" height="15" fill="rgb(211,81,21)"/><text x="59.9186%" y="79.50"></text></g><g><title>typeck (2,013,022 samples, 0.29%)</title><rect x="59.8590%" y="53" width="0.2907%" height="15" fill="rgb(208,190,38)"/><text x="60.1090%" y="63.50"></text></g><g><title>mir_promoted (3,590,690 samples, 0.52%)</title><rect x="59.6319%" y="117" width="0.5186%" height="15" fill="rgb(235,213,38)"/><text x="59.8819%" y="127.50"></text></g><g><title>type_of (4,687,980 samples, 0.68%)</title><rect x="59.4986%" y="149" width="0.6771%" height="15" fill="rgb(237,122,38)"/><text x="59.7486%" y="159.50"></text></g><g><title>mir_borrowck (4,361,078 samples, 0.63%)</title><rect x="59.5458%" y="133" width="0.6299%" height="15" fill="rgb(244,218,35)"/><text x="59.7958%" y="143.50"></text></g><g><title>item_types_checking (7,792,987 samples, 1.13%)</title><rect x="59.1695%" y="181" width="1.1255%" height="15" fill="rgb(240,68,47)"/><text x="59.4195%" y="191.50"></text></g><g><title>check_mod_item_types (7,782,197 samples, 1.12%)</title><rect x="59.1711%" y="165" width="1.1240%" height="15" fill="rgb(210,16,53)"/><text x="59.4211%" y="175.50"></text></g><g><title>typeck (826,639 samples, 0.12%)</title><rect x="60.1757%" y="149" width="0.1194%" height="15" fill="rgb(235,124,12)"/><text x="60.4257%" y="159.50"></text></g><g><title>fn_sig (734,418 samples, 0.11%)</title><rect x="60.3796%" y="149" width="0.1061%" height="15" fill="rgb(224,169,11)"/><text x="60.6296%" y="159.50"></text></g><g><title>lint_levels (740,448 samples, 0.11%)</title><rect x="60.5790%" y="101" width="0.1069%" height="15" fill="rgb(250,166,2)"/><text x="60.8290%" y="111.50"></text></g><g><title>is_late_bound_map (1,178,073 samples, 0.17%)</title><rect x="60.5159%" y="133" width="0.1701%" height="15" fill="rgb(242,216,29)"/><text x="60.7659%" y="143.50"></text></g><g><title>resolve_lifetimes (1,160,123 samples, 0.17%)</title><rect x="60.5185%" y="117" width="0.1676%" height="15" fill="rgb(230,116,27)"/><text x="60.7685%" y="127.50"></text></g><g><title>generics_of (1,979,614 samples, 0.29%)</title><rect x="60.4856%" y="149" width="0.2859%" height="15" fill="rgb(228,99,48)"/><text x="60.7356%" y="159.50"></text></g><g><title>predicates_of (751,137 samples, 0.11%)</title><rect x="60.7871%" y="149" width="0.1085%" height="15" fill="rgb(253,11,6)"/><text x="61.0371%" y="159.50"></text></g><g><title>type_collecting (4,346,409 samples, 0.63%)</title><rect x="60.2962%" y="181" width="0.6277%" height="15" fill="rgb(247,143,39)"/><text x="60.5462%" y="191.50"></text></g><g><title>collect_mod_item_types (4,331,389 samples, 0.63%)</title><rect x="60.2984%" y="165" width="0.6256%" height="15" fill="rgb(236,97,10)"/><text x="60.5484%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,070,604 samples, 0.30%)</title><rect x="60.9836%" y="165" width="0.2990%" height="15" fill="rgb(233,208,19)"/><text x="61.2336%" y="175.50"></text></g><g><title>adt_sized_constraint (864,740 samples, 0.12%)</title><rect x="61.6503%" y="117" width="0.1249%" height="15" fill="rgb(216,164,2)"/><text x="61.9003%" y="127.50"></text></g><g><title>adt_sized_constraint (1,200,913 samples, 0.17%)</title><rect x="61.6071%" y="133" width="0.1734%" height="15" fill="rgb(220,129,5)"/><text x="61.8571%" y="143.50"></text></g><g><title>evaluate_obligation (1,511,787 samples, 0.22%)</title><rect x="61.5706%" y="149" width="0.2183%" height="15" fill="rgb(242,17,10)"/><text x="61.8206%" y="159.50"></text></g><g><title>region_scope_tree (1,553,230 samples, 0.22%)</title><rect x="61.8979%" y="149" width="0.2243%" height="15" fill="rgb(242,107,0)"/><text x="62.1479%" y="159.50"></text></g><g><title>check_item_well_formed (6,008,265 samples, 0.87%)</title><rect x="61.2827%" y="165" width="0.8678%" height="15" fill="rgb(251,28,31)"/><text x="61.5327%" y="175.50"></text></g><g><title>analysis (429,447,392 samples, 62.02%)</title><rect x="0.2032%" y="213" width="62.0235%" height="15" fill="rgb(233,223,10)"/><text x="0.4532%" y="223.50">analysis</text></g><g><title>type_check_crate (227,583,340 samples, 32.87%)</title><rect x="29.3576%" y="197" width="32.8690%" height="15" fill="rgb(215,21,27)"/><text x="29.6076%" y="207.50">type_check_crate</text></g><g><title>wf_checking (9,006,371 samples, 1.30%)</title><rect x="60.9259%" y="181" width="1.3008%" height="15" fill="rgb(232,23,21)"/><text x="61.1759%" y="191.50"></text></g><g><title>metadata_load_macro (758,907 samples, 0.11%)</title><rect x="93.2861%" y="165" width="0.1096%" height="15" fill="rgb(244,5,23)"/><text x="93.5361%" y="175.50"></text></g><g><title>metadata_register_crate (2,780,373 samples, 0.40%)</title><rect x="93.3957%" y="165" width="0.4016%" height="15" fill="rgb(226,81,46)"/><text x="93.6457%" y="175.50"></text></g><g><title>metadata_register_crate (1,002,831 samples, 0.14%)</title><rect x="93.6524%" y="149" width="0.1448%" height="15" fill="rgb(247,70,30)"/><text x="93.9024%" y="159.50"></text></g><g><title>macro_expand_crate (217,826,992 samples, 31.46%)</title><rect x="62.4886%" y="197" width="31.4599%" height="15" fill="rgb(212,68,19)"/><text x="62.7386%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (217,800,541 samples, 31.46%)</title><rect x="62.4925%" y="181" width="31.4561%" height="15" fill="rgb(240,187,13)"/><text x="62.7425%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,047,790 samples, 0.15%)</title><rect x="93.7972%" y="165" width="0.1513%" height="15" fill="rgb(223,113,26)"/><text x="94.0472%" y="175.50"></text></g><g><title>maybe_create_a_macro_crate (748,218 samples, 0.11%)</title><rect x="93.9488%" y="197" width="0.1081%" height="15" fill="rgb(206,192,2)"/><text x="94.1988%" y="207.50"></text></g><g><title>finalize_macro_resolutions (3,265,787 samples, 0.47%)</title><rect x="94.1087%" y="181" width="0.4717%" height="15" fill="rgb(241,108,4)"/><text x="94.3587%" y="191.50"></text></g><g><title>late_resolve_crate (8,183,001 samples, 1.18%)</title><rect x="94.5804%" y="181" width="1.1818%" height="15" fill="rgb(247,173,49)"/><text x="94.8304%" y="191.50"></text></g><g><title>configure_and_expand (232,370,423 samples, 33.56%)</title><rect x="62.3172%" y="213" width="33.5604%" height="15" fill="rgb(224,114,35)"/><text x="62.5672%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (12,431,188 samples, 1.80%)</title><rect x="94.0822%" y="197" width="1.7954%" height="15" fill="rgb(245,159,27)"/><text x="94.3322%" y="207.50">r..</text></g><g><title>drop_ast (928,980 samples, 0.13%)</title><rect x="95.8776%" y="213" width="0.1342%" height="15" fill="rgb(245,172,44)"/><text x="96.1276%" y="223.50"></text></g><g><title>early_lint_checks (2,841,822 samples, 0.41%)</title><rect x="96.0147%" y="213" width="0.4104%" height="15" fill="rgb(236,23,11)"/><text x="96.2647%" y="223.50"></text></g><g><title>free_global_ctxt (6,554,834 samples, 0.95%)</title><rect x="96.4252%" y="213" width="0.9467%" height="15" fill="rgb(205,117,38)"/><text x="96.6752%" y="223.50"></text></g><g><title>hir_lowering (14,284,109 samples, 2.06%)</title><rect x="97.4013%" y="213" width="2.0630%" height="15" fill="rgb(237,72,25)"/><text x="97.6513%" y="223.50">h..</text></g><g><title>parse_crate (1,719,769 samples, 0.25%)</title><rect x="99.4748%" y="213" width="0.2484%" height="15" fill="rgb(244,70,9)"/><text x="99.7248%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,249,744 samples, 0.18%)</title><rect x="99.7566%" y="213" width="0.1805%" height="15" fill="rgb(217,125,39)"/><text x="100.0066%" y="223.50"></text></g><g><title>all (692,395,047 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (692,395,047 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>