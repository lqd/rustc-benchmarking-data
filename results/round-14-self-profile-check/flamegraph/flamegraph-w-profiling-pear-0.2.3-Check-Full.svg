<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (1,409,238 samples, 0.13%)</title><rect x="9.3538%" y="133" width="0.1278%" height="15" fill="rgb(227,0,7)"/><text x="9.6038%" y="143.50"></text></g><g><title>is_copy_raw (4,047,125 samples, 0.37%)</title><rect x="12.8345%" y="53" width="0.3669%" height="15" fill="rgb(217,0,24)"/><text x="13.0845%" y="63.50"></text></g><g><title>evaluate_obligation (3,282,437 samples, 0.30%)</title><rect x="12.9038%" y="37" width="0.2976%" height="15" fill="rgb(221,193,54)"/><text x="13.1538%" y="47.50"></text></g><g><title>needs_drop_raw (5,772,750 samples, 0.52%)</title><rect x="12.6802%" y="69" width="0.5234%" height="15" fill="rgb(248,212,6)"/><text x="12.9302%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (4,594,413 samples, 0.42%)</title><rect x="13.3366%" y="53" width="0.4166%" height="15" fill="rgb(208,68,35)"/><text x="13.5866%" y="63.50"></text></g><g><title>specialization_graph_of (1,471,956 samples, 0.13%)</title><rect x="13.7836%" y="53" width="0.1335%" height="15" fill="rgb(232,128,0)"/><text x="14.0336%" y="63.50"></text></g><g><title>resolve_instance (8,094,897 samples, 0.73%)</title><rect x="13.2036%" y="69" width="0.7339%" height="15" fill="rgb(207,160,47)"/><text x="13.4536%" y="79.50"></text></g><g><title>thir_body (7,273,164 samples, 0.66%)</title><rect x="13.9657%" y="69" width="0.6594%" height="15" fill="rgb(228,23,34)"/><text x="14.2157%" y="79.50"></text></g><g><title>mir_const (51,316,754 samples, 4.65%)</title><rect x="10.0494%" y="117" width="4.6526%" height="15" fill="rgb(218,30,26)"/><text x="10.2994%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (45,449,871 samples, 4.12%)</title><rect x="10.5813%" y="101" width="4.1207%" height="15" fill="rgb(220,122,19)"/><text x="10.8313%" y="111.50">unsa..</text></g><g><title>mir_built (41,362,297 samples, 3.75%)</title><rect x="10.9519%" y="85" width="3.7501%" height="15" fill="rgb(250,228,42)"/><text x="11.2019%" y="95.50">mir_..</text></g><g><title>mir_promoted (59,216,907 samples, 5.37%)</title><rect x="9.5574%" y="133" width="5.3689%" height="15" fill="rgb(240,193,28)"/><text x="9.8074%" y="143.50">mir_pro..</text></g><g><title>mir_const_qualif (2,473,780 samples, 0.22%)</title><rect x="14.7020%" y="117" width="0.2243%" height="15" fill="rgb(216,20,37)"/><text x="14.9520%" y="127.50"></text></g><g><title>mir_const (1,639,189 samples, 0.15%)</title><rect x="14.7777%" y="101" width="0.1486%" height="15" fill="rgb(206,188,39)"/><text x="15.0277%" y="111.50"></text></g><g><title>unsafety_check_result (1,129,093 samples, 0.10%)</title><rect x="14.8239%" y="85" width="0.1024%" height="15" fill="rgb(217,207,13)"/><text x="15.0739%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (2,161,880 samples, 0.20%)</title><rect x="14.9280%" y="133" width="0.1960%" height="15" fill="rgb(231,73,38)"/><text x="15.1780%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (8,092,685 samples, 0.73%)</title><rect x="15.1241%" y="133" width="0.7337%" height="15" fill="rgb(225,20,46)"/><text x="15.3741%" y="143.50"></text></g><g><title>normalize_projection_ty (4,759,259 samples, 0.43%)</title><rect x="15.4263%" y="117" width="0.4315%" height="15" fill="rgb(210,31,41)"/><text x="15.6763%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,983,301 samples, 0.27%)</title><rect x="15.8578%" y="133" width="0.2705%" height="15" fill="rgb(221,200,47)"/><text x="16.1078%" y="143.50"></text></g><g><title>type_op_normalize_ty (3,122,530 samples, 0.28%)</title><rect x="16.1283%" y="133" width="0.2831%" height="15" fill="rgb(226,26,5)"/><text x="16.3783%" y="143.50"></text></g><g><title>type_op_prove_predicate (24,399,281 samples, 2.21%)</title><rect x="16.4114%" y="133" width="2.2122%" height="15" fill="rgb(249,33,26)"/><text x="16.6614%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (203,009,834 samples, 18.41%)</title><rect x="0.2198%" y="165" width="18.4058%" height="15" fill="rgb(235,183,28)"/><text x="0.4698%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (201,936,978 samples, 18.31%)</title><rect x="0.3171%" y="149" width="18.3085%" height="15" fill="rgb(221,5,38)"/><text x="0.5671%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,740,109 samples, 0.16%)</title><rect x="18.6256%" y="165" width="0.1578%" height="15" fill="rgb(247,18,42)"/><text x="18.8756%" y="175.50"></text></g><g><title>check_mod_attrs (2,120,324 samples, 0.19%)</title><rect x="18.8793%" y="149" width="0.1922%" height="15" fill="rgb(241,131,45)"/><text x="19.1293%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,481,026 samples, 0.13%)</title><rect x="19.1585%" y="149" width="0.1343%" height="15" fill="rgb(249,31,29)"/><text x="19.4085%" y="159.50"></text></g><g><title>misc_checking_1 (4,794,474 samples, 0.43%)</title><rect x="18.8744%" y="165" width="0.4347%" height="15" fill="rgb(225,111,53)"/><text x="19.1244%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,510,170 samples, 0.32%)</title><rect x="19.3093%" y="149" width="0.3182%" height="15" fill="rgb(238,160,17)"/><text x="19.5593%" y="159.50"></text></g><g><title>check_mod_liveness (3,018,802 samples, 0.27%)</title><rect x="19.3539%" y="133" width="0.2737%" height="15" fill="rgb(214,148,48)"/><text x="19.6039%" y="143.50"></text></g><g><title>param_env (1,414,395 samples, 0.13%)</title><rect x="19.9476%" y="117" width="0.1282%" height="15" fill="rgb(232,36,49)"/><text x="20.1976%" y="127.50"></text></g><g><title>misc_checking_2 (8,553,826 samples, 0.78%)</title><rect x="19.3091%" y="165" width="0.7755%" height="15" fill="rgb(209,103,24)"/><text x="19.5591%" y="175.50"></text></g><g><title>match_checking (5,041,356 samples, 0.46%)</title><rect x="19.6276%" y="149" width="0.4571%" height="15" fill="rgb(229,88,8)"/><text x="19.8776%" y="159.50"></text></g><g><title>check_match (4,752,895 samples, 0.43%)</title><rect x="19.6537%" y="133" width="0.4309%" height="15" fill="rgb(213,181,19)"/><text x="19.9037%" y="143.50"></text></g><g><title>death_checking (2,151,634 samples, 0.20%)</title><rect x="20.1802%" y="149" width="0.1951%" height="15" fill="rgb(254,191,54)"/><text x="20.4302%" y="159.50"></text></g><g><title>crate_lints (5,193,238 samples, 0.47%)</title><rect x="20.3755%" y="133" width="0.4708%" height="15" fill="rgb(241,83,37)"/><text x="20.6255%" y="143.50"></text></g><g><title>type_of (1,247,700 samples, 0.11%)</title><rect x="20.7332%" y="117" width="0.1131%" height="15" fill="rgb(233,36,39)"/><text x="20.9832%" y="127.50"></text></g><g><title>lint_checking (8,298,073 samples, 0.75%)</title><rect x="20.3752%" y="149" width="0.7523%" height="15" fill="rgb(226,3,54)"/><text x="20.6252%" y="159.50"></text></g><g><title>module_lints (3,102,035 samples, 0.28%)</title><rect x="20.8463%" y="133" width="0.2812%" height="15" fill="rgb(245,192,40)"/><text x="21.0963%" y="143.50"></text></g><g><title>lint_mod (3,081,895 samples, 0.28%)</title><rect x="20.8482%" y="117" width="0.2794%" height="15" fill="rgb(238,167,29)"/><text x="21.0982%" y="127.50"></text></g><g><title>privacy_access_levels (2,553,639 samples, 0.23%)</title><rect x="21.1276%" y="149" width="0.2315%" height="15" fill="rgb(232,182,51)"/><text x="21.3776%" y="159.50"></text></g><g><title>privacy_checking_modules (7,249,261 samples, 0.66%)</title><rect x="21.3591%" y="149" width="0.6573%" height="15" fill="rgb(231,60,39)"/><text x="21.6091%" y="159.50"></text></g><g><title>check_mod_privacy (7,233,011 samples, 0.66%)</title><rect x="21.3606%" y="133" width="0.6558%" height="15" fill="rgb(208,69,12)"/><text x="21.6106%" y="143.50"></text></g><g><title>misc_checking_3 (21,340,879 samples, 1.93%)</title><rect x="20.0846%" y="165" width="1.9349%" height="15" fill="rgb(235,93,37)"/><text x="20.3346%" y="175.50">m..</text></g><g><title>impl_parent (3,180,718 samples, 0.29%)</title><rect x="23.2625%" y="101" width="0.2884%" height="15" fill="rgb(213,116,39)"/><text x="23.5125%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,628,356 samples, 0.15%)</title><rect x="23.4033%" y="85" width="0.1476%" height="15" fill="rgb(222,207,29)"/><text x="23.6533%" y="95.50"></text></g><g><title>impl_trait_ref (5,670,331 samples, 0.51%)</title><rect x="23.5511%" y="101" width="0.5141%" height="15" fill="rgb(206,96,30)"/><text x="23.8011%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,535,021 samples, 0.41%)</title><rect x="23.6541%" y="85" width="0.4112%" height="15" fill="rgb(218,138,4)"/><text x="23.9041%" y="95.50"></text></g><g><title>coherent_trait (22,981,488 samples, 2.08%)</title><rect x="22.0797%" y="133" width="2.0836%" height="15" fill="rgb(250,191,14)"/><text x="22.3297%" y="143.50">c..</text></g><g><title>specialization_graph_of (22,307,411 samples, 2.02%)</title><rect x="22.1408%" y="117" width="2.0225%" height="15" fill="rgb(239,60,40)"/><text x="22.3908%" y="127.50">s..</text></g><g><title>coherence_checking (23,231,340 samples, 2.11%)</title><rect x="22.0767%" y="149" width="2.1063%" height="15" fill="rgb(206,27,48)"/><text x="22.3267%" y="159.50">c..</text></g><g><title>associated_items (1,387,095 samples, 0.13%)</title><rect x="31.0279%" y="101" width="0.1258%" height="15" fill="rgb(225,35,8)"/><text x="31.2779%" y="111.50"></text></g><g><title>dropck_outlives (1,310,463 samples, 0.12%)</title><rect x="31.1661%" y="101" width="0.1188%" height="15" fill="rgb(250,213,24)"/><text x="31.4161%" y="111.50"></text></g><g><title>evaluate_obligation (7,783,270 samples, 0.71%)</title><rect x="31.2849%" y="101" width="0.7057%" height="15" fill="rgb(247,123,22)"/><text x="31.5349%" y="111.50"></text></g><g><title>method_autoderef_steps (1,256,533 samples, 0.11%)</title><rect x="32.1081%" y="101" width="0.1139%" height="15" fill="rgb(231,138,38)"/><text x="32.3581%" y="111.50"></text></g><g><title>dropck_outlives (1,518,029 samples, 0.14%)</title><rect x="42.4264%" y="85" width="0.1376%" height="15" fill="rgb(231,145,46)"/><text x="42.6764%" y="95.50"></text></g><g><title>evaluate_obligation (9,640,069 samples, 0.87%)</title><rect x="42.5645%" y="85" width="0.8740%" height="15" fill="rgb(251,118,11)"/><text x="42.8145%" y="95.50"></text></g><g><title>is_copy_raw (3,153,223 samples, 0.29%)</title><rect x="43.5682%" y="85" width="0.2859%" height="15" fill="rgb(217,147,25)"/><text x="43.8182%" y="95.50"></text></g><g><title>evaluate_obligation (2,429,881 samples, 0.22%)</title><rect x="43.6338%" y="69" width="0.2203%" height="15" fill="rgb(247,81,37)"/><text x="43.8838%" y="79.50"></text></g><g><title>method_autoderef_steps (1,889,427 samples, 0.17%)</title><rect x="43.8643%" y="85" width="0.1713%" height="15" fill="rgb(209,12,38)"/><text x="44.1143%" y="95.50"></text></g><g><title>typeck (128,680,661 samples, 11.67%)</title><rect x="32.4344%" y="101" width="11.6668%" height="15" fill="rgb(227,1,9)"/><text x="32.6844%" y="111.50">typeck</text></g><g><title>item_bodies_checking (219,694,799 samples, 19.92%)</title><rect x="24.1981%" y="149" width="19.9185%" height="15" fill="rgb(248,47,43)"/><text x="24.4481%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (219,690,679 samples, 19.92%)</title><rect x="24.1985%" y="133" width="19.9182%" height="15" fill="rgb(221,10,30)"/><text x="24.4485%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (219,094,253 samples, 19.86%)</title><rect x="24.2525%" y="117" width="19.8641%" height="15" fill="rgb(210,229,1)"/><text x="24.5025%" y="127.50">typeck</text></g><g><title>item_types_checking (8,598,467 samples, 0.78%)</title><rect x="44.1166%" y="149" width="0.7796%" height="15" fill="rgb(222,148,37)"/><text x="44.3666%" y="159.50"></text></g><g><title>check_mod_item_types (8,583,047 samples, 0.78%)</title><rect x="44.1180%" y="133" width="0.7782%" height="15" fill="rgb(234,67,33)"/><text x="44.3680%" y="143.50"></text></g><g><title>fn_sig (1,546,169 samples, 0.14%)</title><rect x="45.0470%" y="117" width="0.1402%" height="15" fill="rgb(247,98,35)"/><text x="45.2970%" y="127.50"></text></g><g><title>generics_of (2,808,239 samples, 0.25%)</title><rect x="45.1872%" y="117" width="0.2546%" height="15" fill="rgb(247,138,52)"/><text x="45.4372%" y="127.50"></text></g><g><title>late_bound_vars_map (1,425,995 samples, 0.13%)</title><rect x="45.6900%" y="69" width="0.1293%" height="15" fill="rgb(213,79,30)"/><text x="45.9400%" y="79.50"></text></g><g><title>resolve_lifetimes (1,352,023 samples, 0.12%)</title><rect x="45.6968%" y="53" width="0.1226%" height="15" fill="rgb(246,177,23)"/><text x="45.9468%" y="63.50"></text></g><g><title>explicit_predicates_of (3,226,079 samples, 0.29%)</title><rect x="45.5458%" y="85" width="0.2925%" height="15" fill="rgb(230,62,27)"/><text x="45.7958%" y="95.50"></text></g><g><title>predicates_of (4,472,603 samples, 0.41%)</title><rect x="45.4830%" y="117" width="0.4055%" height="15" fill="rgb(216,154,8)"/><text x="45.7330%" y="127.50"></text></g><g><title>predicates_defined_on (4,212,202 samples, 0.38%)</title><rect x="45.5066%" y="101" width="0.3819%" height="15" fill="rgb(244,35,45)"/><text x="45.7566%" y="111.50"></text></g><g><title>type_collecting (11,873,293 samples, 1.08%)</title><rect x="44.8968%" y="149" width="1.0765%" height="15" fill="rgb(251,115,12)"/><text x="45.1468%" y="159.50"></text></g><g><title>collect_mod_item_types (11,840,173 samples, 1.07%)</title><rect x="44.8998%" y="133" width="1.0735%" height="15" fill="rgb(240,54,50)"/><text x="45.1498%" y="143.50"></text></g><g><title>evaluate_obligation (3,113,978 samples, 0.28%)</title><rect x="47.2452%" y="117" width="0.2823%" height="15" fill="rgb(233,84,52)"/><text x="47.4952%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,609,201 samples, 0.15%)</title><rect x="47.5307%" y="117" width="0.1459%" height="15" fill="rgb(207,117,47)"/><text x="47.7807%" y="127.50"></text></g><g><title>param_env (2,278,250 samples, 0.21%)</title><rect x="47.6780%" y="117" width="0.2066%" height="15" fill="rgb(249,43,39)"/><text x="47.9280%" y="127.50"></text></g><g><title>region_scope_tree (1,388,302 samples, 0.13%)</title><rect x="47.8890%" y="117" width="0.1259%" height="15" fill="rgb(209,38,44)"/><text x="48.1390%" y="127.50"></text></g><g><title>check_impl_item_well_formed (21,218,681 samples, 1.92%)</title><rect x="46.0961%" y="133" width="1.9238%" height="15" fill="rgb(236,212,23)"/><text x="46.3461%" y="143.50">c..</text></g><g><title>implied_outlives_bounds (1,424,621 samples, 0.13%)</title><rect x="49.7432%" y="117" width="0.1292%" height="15" fill="rgb(242,79,21)"/><text x="49.9932%" y="127.50"></text></g><g><title>param_env (2,159,820 samples, 0.20%)</title><rect x="49.8916%" y="117" width="0.1958%" height="15" fill="rgb(211,96,35)"/><text x="50.1416%" y="127.50"></text></g><g><title>check_item_well_formed (24,451,151 samples, 2.22%)</title><rect x="48.0199%" y="133" width="2.2169%" height="15" fill="rgb(253,215,40)"/><text x="48.2699%" y="143.50">c..</text></g><g><title>analysis (555,222,467 samples, 50.34%)</title><rect x="0.0956%" y="181" width="50.3390%" height="15" fill="rgb(211,81,21)"/><text x="0.3456%" y="191.50">analysis</text></g><g><title>type_check_crate (313,408,889 samples, 28.42%)</title><rect x="22.0195%" y="165" width="28.4151%" height="15" fill="rgb(208,190,38)"/><text x="22.2695%" y="175.50">type_check_crate</text></g><g><title>wf_checking (49,159,400 samples, 4.46%)</title><rect x="45.9776%" y="149" width="4.4570%" height="15" fill="rgb(235,213,38)"/><text x="46.2276%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (2,181,945 samples, 0.20%)</title><rect x="50.2368%" y="133" width="0.1978%" height="15" fill="rgb(237,122,38)"/><text x="50.4868%" y="143.50"></text></g><g><title>metadata_register_crate (6,275,320 samples, 0.57%)</title><rect x="95.1381%" y="133" width="0.5689%" height="15" fill="rgb(244,218,35)"/><text x="95.3881%" y="143.50"></text></g><g><title>macro_expand_crate (498,551,883 samples, 45.20%)</title><rect x="50.6198%" y="165" width="45.2010%" height="15" fill="rgb(240,68,47)"/><text x="50.8698%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (498,537,473 samples, 45.20%)</title><rect x="50.6211%" y="149" width="45.1997%" height="15" fill="rgb(210,16,53)"/><text x="50.8711%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,254,406 samples, 0.11%)</title><rect x="95.7070%" y="133" width="0.1137%" height="15" fill="rgb(235,124,12)"/><text x="95.9570%" y="143.50"></text></g><g><title>late_resolve_crate (7,903,729 samples, 0.72%)</title><rect x="95.8823%" y="149" width="0.7166%" height="15" fill="rgb(224,169,11)"/><text x="96.1323%" y="159.50"></text></g><g><title>configure_and_expand (509,267,363 samples, 46.17%)</title><rect x="50.4899%" y="181" width="46.1725%" height="15" fill="rgb(250,166,2)"/><text x="50.7399%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (9,176,303 samples, 0.83%)</title><rect x="95.8304%" y="165" width="0.8320%" height="15" fill="rgb(242,216,29)"/><text x="96.0804%" y="175.50"></text></g><g><title>drop_ast (1,355,575 samples, 0.12%)</title><rect x="96.6624%" y="181" width="0.1229%" height="15" fill="rgb(230,116,27)"/><text x="96.9124%" y="191.50"></text></g><g><title>early_lint_checks (2,023,963 samples, 0.18%)</title><rect x="96.7877%" y="181" width="0.1835%" height="15" fill="rgb(228,99,48)"/><text x="97.0377%" y="191.50"></text></g><g><title>free_global_ctxt (7,435,543 samples, 0.67%)</title><rect x="96.9712%" y="181" width="0.6741%" height="15" fill="rgb(253,11,6)"/><text x="97.2212%" y="191.50"></text></g><g><title>generate_crate_metadata (6,170,049 samples, 0.56%)</title><rect x="97.6453%" y="181" width="0.5594%" height="15" fill="rgb(247,143,39)"/><text x="97.8953%" y="191.50"></text></g><g><title>hir_lowering (16,578,996 samples, 1.50%)</title><rect x="98.2047%" y="181" width="1.5031%" height="15" fill="rgb(236,97,10)"/><text x="98.4547%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,019,222 samples, 0.18%)</title><rect x="99.7579%" y="181" width="0.1831%" height="15" fill="rgb(233,208,19)"/><text x="100.0079%" y="191.50"></text></g><g><title>all (1,102,966,532 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,102,966,532 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>