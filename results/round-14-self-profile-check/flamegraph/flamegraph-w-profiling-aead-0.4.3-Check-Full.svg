<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (62,270 samples, 0.14%)</title><rect x="10.5632%" y="165" width="0.1384%" height="15" fill="rgb(227,0,7)"/><text x="10.8132%" y="175.50"></text></g><g><title>codegen_fn_attrs (73,301 samples, 0.16%)</title><rect x="11.0593%" y="149" width="0.1629%" height="15" fill="rgb(217,0,24)"/><text x="11.3093%" y="159.50"></text></g><g><title>is_copy_raw (47,090 samples, 0.10%)</title><rect x="12.9508%" y="133" width="0.1046%" height="15" fill="rgb(221,193,54)"/><text x="13.2008%" y="143.50"></text></g><g><title>is_copy_raw (54,640 samples, 0.12%)</title><rect x="13.1563%" y="101" width="0.1214%" height="15" fill="rgb(248,212,6)"/><text x="13.4063%" y="111.50"></text></g><g><title>evaluate_obligation (45,440 samples, 0.10%)</title><rect x="13.1768%" y="85" width="0.1010%" height="15" fill="rgb(208,68,35)"/><text x="13.4268%" y="95.50"></text></g><g><title>adt_drop_tys (96,191 samples, 0.21%)</title><rect x="13.1301%" y="117" width="0.2137%" height="15" fill="rgb(232,128,0)"/><text x="13.3801%" y="127.50"></text></g><g><title>explicit_predicates_of (78,222 samples, 0.17%)</title><rect x="14.0816%" y="53" width="0.1738%" height="15" fill="rgb(207,160,47)"/><text x="14.3316%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (76,432 samples, 0.17%)</title><rect x="14.0856%" y="37" width="0.1698%" height="15" fill="rgb(228,23,34)"/><text x="14.3356%" y="47.50"></text></g><g><title>is_copy_raw (413,264 samples, 0.92%)</title><rect x="13.3439%" y="117" width="0.9183%" height="15" fill="rgb(218,30,26)"/><text x="13.5939%" y="127.50"></text></g><g><title>evaluate_obligation (381,344 samples, 0.85%)</title><rect x="13.4148%" y="101" width="0.8474%" height="15" fill="rgb(220,122,19)"/><text x="13.6648%" y="111.50"></text></g><g><title>predicates_of (97,942 samples, 0.22%)</title><rect x="14.0446%" y="85" width="0.2176%" height="15" fill="rgb(250,228,42)"/><text x="14.2946%" y="95.50"></text></g><g><title>predicates_defined_on (86,992 samples, 0.19%)</title><rect x="14.0689%" y="69" width="0.1933%" height="15" fill="rgb(240,193,28)"/><text x="14.3189%" y="79.50"></text></g><g><title>needs_drop_raw (546,165 samples, 1.21%)</title><rect x="13.0554%" y="133" width="1.2136%" height="15" fill="rgb(216,20,37)"/><text x="13.3054%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (133,301 samples, 0.30%)</title><rect x="14.4176%" y="117" width="0.2962%" height="15" fill="rgb(206,188,39)"/><text x="14.6676%" y="127.50"></text></g><g><title>resolve_instance (284,353 samples, 0.63%)</title><rect x="14.2690%" y="133" width="0.6319%" height="15" fill="rgb(217,207,13)"/><text x="14.5190%" y="143.50"></text></g><g><title>thir_body (243,402 samples, 0.54%)</title><rect x="14.9186%" y="133" width="0.5409%" height="15" fill="rgb(231,73,38)"/><text x="15.1686%" y="143.50"></text></g><g><title>mir_const (2,538,277 samples, 5.64%)</title><rect x="9.8864%" y="181" width="5.6403%" height="15" fill="rgb(225,20,46)"/><text x="10.1364%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (2,171,463 samples, 4.83%)</title><rect x="10.7015%" y="165" width="4.8252%" height="15" fill="rgb(210,31,41)"/><text x="10.9515%" y="175.50">unsafe..</text></g><g><title>mir_built (1,937,162 samples, 4.30%)</title><rect x="11.2222%" y="149" width="4.3046%" height="15" fill="rgb(221,200,47)"/><text x="11.4722%" y="159.50">mir_b..</text></g><g><title>mir_promoted (2,797,983 samples, 6.22%)</title><rect x="9.3442%" y="197" width="6.2174%" height="15" fill="rgb(226,26,5)"/><text x="9.5942%" y="207.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (205,413 samples, 0.46%)</title><rect x="15.5616%" y="197" width="0.4564%" height="15" fill="rgb(249,33,26)"/><text x="15.8116%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (177,673 samples, 0.39%)</title><rect x="16.0181%" y="197" width="0.3948%" height="15" fill="rgb(235,183,28)"/><text x="16.2681%" y="207.50"></text></g><g><title>normalize_projection_ty (75,390 samples, 0.17%)</title><rect x="16.2454%" y="181" width="0.1675%" height="15" fill="rgb(221,5,38)"/><text x="16.4954%" y="191.50"></text></g><g><title>type_op_normalize_predicate (109,601 samples, 0.24%)</title><rect x="16.4129%" y="197" width="0.2435%" height="15" fill="rgb(247,18,42)"/><text x="16.6629%" y="207.50"></text></g><g><title>normalize_projection_ty (79,681 samples, 0.18%)</title><rect x="16.4794%" y="181" width="0.1771%" height="15" fill="rgb(241,131,45)"/><text x="16.7294%" y="191.50"></text></g><g><title>type_op_normalize_ty (115,580 samples, 0.26%)</title><rect x="16.6564%" y="197" width="0.2568%" height="15" fill="rgb(249,31,29)"/><text x="16.9064%" y="207.50"></text></g><g><title>type_op_prove_predicate (783,013 samples, 1.74%)</title><rect x="16.9133%" y="197" width="1.7399%" height="15" fill="rgb(225,111,53)"/><text x="17.1633%" y="207.50"></text></g><g><title>MIR_borrow_checking (7,759,416 samples, 17.24%)</title><rect x="1.4141%" y="229" width="17.2422%" height="15" fill="rgb(238,160,17)"/><text x="1.6641%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,726,925 samples, 17.17%)</title><rect x="1.4863%" y="213" width="17.1700%" height="15" fill="rgb(214,148,48)"/><text x="1.7363%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (101,571 samples, 0.23%)</title><rect x="18.6739%" y="229" width="0.2257%" height="15" fill="rgb(232,36,49)"/><text x="18.9239%" y="239.50"></text></g><g><title>get_lang_items (55,360 samples, 0.12%)</title><rect x="19.3067%" y="181" width="0.1230%" height="15" fill="rgb(209,103,24)"/><text x="19.5567%" y="191.50"></text></g><g><title>codegen_fn_attrs (74,171 samples, 0.16%)</title><rect x="19.5947%" y="165" width="0.1648%" height="15" fill="rgb(229,88,8)"/><text x="19.8447%" y="175.50"></text></g><g><title>should_inherit_track_caller (151,711 samples, 0.34%)</title><rect x="19.4297%" y="181" width="0.3371%" height="15" fill="rgb(213,181,19)"/><text x="19.6797%" y="191.50"></text></g><g><title>codegen_fn_attrs (275,382 samples, 0.61%)</title><rect x="19.1980%" y="197" width="0.6119%" height="15" fill="rgb(254,191,54)"/><text x="19.4480%" y="207.50"></text></g><g><title>check_mod_attrs (392,795 samples, 0.87%)</title><rect x="18.9377%" y="213" width="0.8728%" height="15" fill="rgb(241,83,37)"/><text x="19.1877%" y="223.50"></text></g><g><title>check_mod_const_bodies (45,450 samples, 0.10%)</title><rect x="19.8106%" y="213" width="0.1010%" height="15" fill="rgb(233,36,39)"/><text x="20.0606%" y="223.50"></text></g><g><title>lookup_deprecation_entry (62,071 samples, 0.14%)</title><rect x="20.1557%" y="197" width="0.1379%" height="15" fill="rgb(226,3,54)"/><text x="20.4057%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (188,642 samples, 0.42%)</title><rect x="19.9781%" y="213" width="0.4192%" height="15" fill="rgb(245,192,40)"/><text x="20.2281%" y="223.50"></text></g><g><title>misc_checking_1 (701,217 samples, 1.56%)</title><rect x="18.9006%" y="229" width="1.5582%" height="15" fill="rgb(238,167,29)"/><text x="19.1506%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (156,461 samples, 0.35%)</title><rect x="20.4621%" y="213" width="0.3477%" height="15" fill="rgb(232,182,51)"/><text x="20.7121%" y="223.50"></text></g><g><title>check_mod_liveness (123,591 samples, 0.27%)</title><rect x="20.5352%" y="197" width="0.2746%" height="15" fill="rgb(231,60,39)"/><text x="20.7852%" y="207.50"></text></g><g><title>misc_checking_2 (360,924 samples, 0.80%)</title><rect x="20.4588%" y="229" width="0.8020%" height="15" fill="rgb(208,69,12)"/><text x="20.7088%" y="239.50"></text></g><g><title>match_checking (202,973 samples, 0.45%)</title><rect x="20.8098%" y="213" width="0.4510%" height="15" fill="rgb(235,93,37)"/><text x="21.0598%" y="223.50"></text></g><g><title>check_match (192,973 samples, 0.43%)</title><rect x="20.8320%" y="197" width="0.4288%" height="15" fill="rgb(213,116,39)"/><text x="21.0820%" y="207.50"></text></g><g><title>check_private_in_public (90,081 samples, 0.20%)</title><rect x="21.2829%" y="213" width="0.2002%" height="15" fill="rgb(222,207,29)"/><text x="21.5329%" y="223.50"></text></g><g><title>death_checking (339,554 samples, 0.75%)</title><rect x="21.4831%" y="213" width="0.7545%" height="15" fill="rgb(206,96,30)"/><text x="21.7331%" y="223.50"></text></g><g><title>item_attrs (199,082 samples, 0.44%)</title><rect x="21.7952%" y="197" width="0.4424%" height="15" fill="rgb(218,138,4)"/><text x="22.0452%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (197,292 samples, 0.44%)</title><rect x="21.7992%" y="181" width="0.4384%" height="15" fill="rgb(250,191,14)"/><text x="22.0492%" y="191.50"></text></g><g><title>param_env (81,310 samples, 0.18%)</title><rect x="22.8468%" y="181" width="0.1807%" height="15" fill="rgb(239,60,40)"/><text x="23.0968%" y="191.50"></text></g><g><title>crate_lints (686,638 samples, 1.53%)</title><rect x="22.2404%" y="197" width="1.5258%" height="15" fill="rgb(206,27,48)"/><text x="22.4904%" y="207.50"></text></g><g><title>type_of (330,205 samples, 0.73%)</title><rect x="23.0325%" y="181" width="0.7337%" height="15" fill="rgb(225,35,8)"/><text x="23.2825%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (250,344 samples, 0.56%)</title><rect x="23.2099%" y="165" width="0.5563%" height="15" fill="rgb(250,213,24)"/><text x="23.4599%" y="175.50"></text></g><g><title>lint_checking (804,809 samples, 1.79%)</title><rect x="22.2376%" y="213" width="1.7884%" height="15" fill="rgb(247,123,22)"/><text x="22.4876%" y="223.50">l..</text></g><g><title>module_lints (116,901 samples, 0.26%)</title><rect x="23.7662%" y="197" width="0.2598%" height="15" fill="rgb(231,138,38)"/><text x="24.0162%" y="207.50"></text></g><g><title>lint_mod (115,101 samples, 0.26%)</title><rect x="23.7702%" y="181" width="0.2558%" height="15" fill="rgb(231,145,46)"/><text x="24.0202%" y="191.50"></text></g><g><title>privacy_access_levels (117,321 samples, 0.26%)</title><rect x="24.0260%" y="213" width="0.2607%" height="15" fill="rgb(251,118,11)"/><text x="24.2760%" y="223.50"></text></g><g><title>privacy_checking_modules (365,334 samples, 0.81%)</title><rect x="24.2867%" y="213" width="0.8118%" height="15" fill="rgb(217,147,25)"/><text x="24.5367%" y="223.50"></text></g><g><title>check_mod_privacy (363,654 samples, 0.81%)</title><rect x="24.2904%" y="197" width="0.8081%" height="15" fill="rgb(247,81,37)"/><text x="24.5404%" y="207.50"></text></g><g><title>misc_checking_3 (1,743,429 samples, 3.87%)</title><rect x="21.2608%" y="229" width="3.8741%" height="15" fill="rgb(209,12,38)"/><text x="21.5108%" y="239.50">misc..</text></g><g><title>adt_destructor (47,481 samples, 0.11%)</title><rect x="25.3014%" y="181" width="0.1055%" height="15" fill="rgb(227,1,9)"/><text x="25.5514%" y="191.50"></text></g><g><title>param_env (66,951 samples, 0.15%)</title><rect x="25.4069%" y="181" width="0.1488%" height="15" fill="rgb(248,47,43)"/><text x="25.6569%" y="191.50"></text></g><g><title>impl_parent (987,437 samples, 2.19%)</title><rect x="29.1147%" y="165" width="2.1942%" height="15" fill="rgb(221,10,30)"/><text x="29.3647%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (558,373 samples, 1.24%)</title><rect x="30.0681%" y="149" width="1.2408%" height="15" fill="rgb(210,229,1)"/><text x="30.3181%" y="159.50"></text></g><g><title>impl_trait_ref (1,748,976 samples, 3.89%)</title><rect x="31.3089%" y="165" width="3.8864%" height="15" fill="rgb(222,148,37)"/><text x="31.5589%" y="175.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,320,061 samples, 2.93%)</title><rect x="32.2620%" y="149" width="2.9333%" height="15" fill="rgb(234,67,33)"/><text x="32.5120%" y="159.50">me..</text></g><g><title>coherent_trait (4,836,233 samples, 10.75%)</title><rect x="25.2305%" y="197" width="10.7466%" height="15" fill="rgb(247,98,35)"/><text x="25.4805%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (4,689,911 samples, 10.42%)</title><rect x="25.5557%" y="181" width="10.4215%" height="15" fill="rgb(247,138,52)"/><text x="25.8057%" y="191.50">specialization_..</text></g><g><title>trait_impls_of (349,573 samples, 0.78%)</title><rect x="35.2003%" y="165" width="0.7768%" height="15" fill="rgb(213,79,30)"/><text x="35.4503%" y="175.50"></text></g><g><title>implementations_of_trait (89,100 samples, 0.20%)</title><rect x="35.7791%" y="149" width="0.1980%" height="15" fill="rgb(246,177,23)"/><text x="36.0291%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (75,710 samples, 0.17%)</title><rect x="35.8089%" y="133" width="0.1682%" height="15" fill="rgb(230,62,27)"/><text x="36.0589%" y="143.50"></text></g><g><title>coherence_checking (4,880,154 samples, 10.84%)</title><rect x="25.1943%" y="213" width="10.8442%" height="15" fill="rgb(216,154,8)"/><text x="25.4443%" y="223.50">coherence_checki..</text></g><g><title>associated_item (144,401 samples, 0.32%)</title><rect x="50.8197%" y="149" width="0.3209%" height="15" fill="rgb(244,35,45)"/><text x="51.0697%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (113,590 samples, 0.25%)</title><rect x="50.8882%" y="133" width="0.2524%" height="15" fill="rgb(251,115,12)"/><text x="51.1382%" y="143.50"></text></g><g><title>associated_items (212,552 samples, 0.47%)</title><rect x="50.6856%" y="165" width="0.4723%" height="15" fill="rgb(240,54,50)"/><text x="50.9356%" y="175.50"></text></g><g><title>adt_dtorck_constraint (70,551 samples, 0.16%)</title><rect x="51.4658%" y="149" width="0.1568%" height="15" fill="rgb(233,84,52)"/><text x="51.7158%" y="159.50"></text></g><g><title>dropck_outlives (222,173 samples, 0.49%)</title><rect x="51.2119%" y="165" width="0.4937%" height="15" fill="rgb(207,117,47)"/><text x="51.4619%" y="175.50"></text></g><g><title>adt_def (48,190 samples, 0.11%)</title><rect x="52.6847%" y="133" width="0.1071%" height="15" fill="rgb(249,43,39)"/><text x="52.9347%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (47,180 samples, 0.10%)</title><rect x="52.6869%" y="117" width="0.1048%" height="15" fill="rgb(209,38,44)"/><text x="52.9369%" y="127.50"></text></g><g><title>adt_sized_constraint (56,230 samples, 0.12%)</title><rect x="52.6699%" y="149" width="0.1249%" height="15" fill="rgb(236,212,23)"/><text x="52.9199%" y="159.50"></text></g><g><title>specializes (96,041 samples, 0.21%)</title><rect x="52.9833%" y="149" width="0.2134%" height="15" fill="rgb(242,79,21)"/><text x="53.2333%" y="159.50"></text></g><g><title>param_env (87,051 samples, 0.19%)</title><rect x="53.0032%" y="133" width="0.1934%" height="15" fill="rgb(211,96,35)"/><text x="53.2532%" y="143.50"></text></g><g><title>def_span (78,041 samples, 0.17%)</title><rect x="53.0233%" y="117" width="0.1734%" height="15" fill="rgb(253,215,40)"/><text x="53.2733%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (77,381 samples, 0.17%)</title><rect x="53.0247%" y="101" width="0.1719%" height="15" fill="rgb(211,81,21)"/><text x="53.2747%" y="111.50"></text></g><g><title>trait_impls_of (100,762 samples, 0.22%)</title><rect x="53.2074%" y="149" width="0.2239%" height="15" fill="rgb(208,190,38)"/><text x="53.4574%" y="159.50"></text></g><g><title>evaluate_obligation (774,888 samples, 1.72%)</title><rect x="51.7114%" y="165" width="1.7219%" height="15" fill="rgb(235,213,38)"/><text x="51.9614%" y="175.50"></text></g><g><title>fn_sig (48,241 samples, 0.11%)</title><rect x="53.4572%" y="165" width="0.1072%" height="15" fill="rgb(237,122,38)"/><text x="53.7072%" y="175.50"></text></g><g><title>item_attrs (45,060 samples, 0.10%)</title><rect x="53.7171%" y="165" width="0.1001%" height="15" fill="rgb(244,218,35)"/><text x="53.9671%" y="175.50"></text></g><g><title>evaluate_obligation (127,520 samples, 0.28%)</title><rect x="54.1303%" y="149" width="0.2834%" height="15" fill="rgb(240,68,47)"/><text x="54.3803%" y="159.50"></text></g><g><title>method_autoderef_steps (253,871 samples, 0.56%)</title><rect x="53.8735%" y="165" width="0.5641%" height="15" fill="rgb(210,16,53)"/><text x="54.1235%" y="175.50"></text></g><g><title>predicates_of (122,732 samples, 0.27%)</title><rect x="54.5238%" y="165" width="0.2727%" height="15" fill="rgb(235,124,12)"/><text x="54.7738%" y="175.50"></text></g><g><title>predicates_defined_on (80,721 samples, 0.18%)</title><rect x="54.6171%" y="149" width="0.1794%" height="15" fill="rgb(224,169,11)"/><text x="54.8671%" y="159.50"></text></g><g><title>item_bodies_checking (8,527,205 samples, 18.95%)</title><rect x="36.0643%" y="213" width="18.9483%" height="15" fill="rgb(250,166,2)"/><text x="36.3143%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (8,524,905 samples, 18.94%)</title><rect x="36.0694%" y="197" width="18.9432%" height="15" fill="rgb(242,216,29)"/><text x="36.3194%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (8,499,605 samples, 18.89%)</title><rect x="36.1256%" y="181" width="18.8870%" height="15" fill="rgb(230,116,27)"/><text x="36.3756%" y="191.50">typeck</text></g><g><title>item_types_checking (435,235 samples, 0.97%)</title><rect x="55.0126%" y="213" width="0.9671%" height="15" fill="rgb(228,99,48)"/><text x="55.2626%" y="223.50"></text></g><g><title>check_mod_item_types (433,085 samples, 0.96%)</title><rect x="55.0174%" y="197" width="0.9624%" height="15" fill="rgb(253,11,6)"/><text x="55.2674%" y="207.50"></text></g><g><title>fn_sig (238,142 samples, 0.53%)</title><rect x="56.2803%" y="181" width="0.5292%" height="15" fill="rgb(247,143,39)"/><text x="56.5303%" y="191.50"></text></g><g><title>named_region_map (209,973 samples, 0.47%)</title><rect x="56.9413%" y="165" width="0.4666%" height="15" fill="rgb(236,97,10)"/><text x="57.1913%" y="175.50"></text></g><g><title>resolve_lifetimes (196,242 samples, 0.44%)</title><rect x="56.9718%" y="149" width="0.4361%" height="15" fill="rgb(233,208,19)"/><text x="57.2218%" y="159.50"></text></g><g><title>lint_levels (77,611 samples, 0.17%)</title><rect x="57.2354%" y="133" width="0.1725%" height="15" fill="rgb(216,164,2)"/><text x="57.4854%" y="143.50"></text></g><g><title>generics_of (288,664 samples, 0.64%)</title><rect x="56.8095%" y="181" width="0.6414%" height="15" fill="rgb(220,129,5)"/><text x="57.0595%" y="191.50"></text></g><g><title>explicit_item_bounds (49,890 samples, 0.11%)</title><rect x="57.7546%" y="165" width="0.1109%" height="15" fill="rgb(242,17,10)"/><text x="58.0046%" y="175.50"></text></g><g><title>item_bounds (152,291 samples, 0.34%)</title><rect x="57.5507%" y="181" width="0.3384%" height="15" fill="rgb(242,107,0)"/><text x="57.8007%" y="191.50"></text></g><g><title>explicit_predicates_of (138,601 samples, 0.31%)</title><rect x="58.0310%" y="149" width="0.3080%" height="15" fill="rgb(251,28,31)"/><text x="58.2810%" y="159.50"></text></g><g><title>predicates_of (230,652 samples, 0.51%)</title><rect x="57.8891%" y="181" width="0.5125%" height="15" fill="rgb(233,223,10)"/><text x="58.1391%" y="191.50"></text></g><g><title>predicates_defined_on (207,242 samples, 0.46%)</title><rect x="57.9411%" y="165" width="0.4605%" height="15" fill="rgb(215,21,27)"/><text x="58.1911%" y="175.50"></text></g><g><title>super_predicates_of (76,281 samples, 0.17%)</title><rect x="58.4016%" y="181" width="0.1695%" height="15" fill="rgb(232,23,21)"/><text x="58.6516%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (65,571 samples, 0.15%)</title><rect x="58.4254%" y="165" width="0.1457%" height="15" fill="rgb(244,5,23)"/><text x="58.6754%" y="175.50"></text></g><g><title>type_collecting (1,292,805 samples, 2.87%)</title><rect x="55.9833%" y="213" width="2.8727%" height="15" fill="rgb(226,81,46)"/><text x="56.2333%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (1,285,395 samples, 2.86%)</title><rect x="55.9997%" y="197" width="2.8563%" height="15" fill="rgb(247,70,30)"/><text x="56.2497%" y="207.50">co..</text></g><g><title>type_of (127,132 samples, 0.28%)</title><rect x="58.5735%" y="181" width="0.2825%" height="15" fill="rgb(212,68,19)"/><text x="58.8235%" y="191.50"></text></g><g><title>evaluate_obligation (203,523 samples, 0.45%)</title><rect x="61.0602%" y="181" width="0.4522%" height="15" fill="rgb(240,187,13)"/><text x="61.3102%" y="191.50"></text></g><g><title>implied_outlives_bounds (140,001 samples, 0.31%)</title><rect x="61.5125%" y="181" width="0.3111%" height="15" fill="rgb(223,113,26)"/><text x="61.7625%" y="191.50"></text></g><g><title>param_env (67,220 samples, 0.15%)</title><rect x="61.8236%" y="181" width="0.1494%" height="15" fill="rgb(206,192,2)"/><text x="62.0736%" y="191.50"></text></g><g><title>region_scope_tree (51,931 samples, 0.12%)</title><rect x="62.0519%" y="181" width="0.1154%" height="15" fill="rgb(241,108,4)"/><text x="62.3019%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,410,334 samples, 3.13%)</title><rect x="59.0466%" y="197" width="3.1339%" height="15" fill="rgb(247,173,49)"/><text x="59.2966%" y="207.50">che..</text></g><g><title>evaluate_obligation (155,462 samples, 0.35%)</title><rect x="63.1278%" y="181" width="0.3455%" height="15" fill="rgb(224,114,35)"/><text x="63.3778%" y="191.50"></text></g><g><title>param_env (89,170 samples, 0.20%)</title><rect x="63.5615%" y="181" width="0.1981%" height="15" fill="rgb(245,159,27)"/><text x="63.8115%" y="191.50"></text></g><g><title>predicates_of (63,672 samples, 0.14%)</title><rect x="63.7596%" y="181" width="0.1415%" height="15" fill="rgb(245,172,44)"/><text x="64.0096%" y="191.50"></text></g><g><title>predicates_defined_on (46,430 samples, 0.10%)</title><rect x="63.7979%" y="165" width="0.1032%" height="15" fill="rgb(236,23,11)"/><text x="64.0479%" y="175.50"></text></g><g><title>check_item_well_formed (842,991 samples, 1.87%)</title><rect x="62.1805%" y="197" width="1.8732%" height="15" fill="rgb(205,117,38)"/><text x="62.4305%" y="207.50">c..</text></g><g><title>evaluate_obligation (137,992 samples, 0.31%)</title><rect x="66.5659%" y="181" width="0.3066%" height="15" fill="rgb(237,72,25)"/><text x="66.8159%" y="191.50"></text></g><g><title>implied_outlives_bounds (183,351 samples, 0.41%)</title><rect x="66.8725%" y="181" width="0.4074%" height="15" fill="rgb(244,70,9)"/><text x="67.1225%" y="191.50"></text></g><g><title>evaluate_obligation (123,011 samples, 0.27%)</title><rect x="67.5768%" y="165" width="0.2733%" height="15" fill="rgb(217,125,39)"/><text x="67.8268%" y="175.50"></text></g><g><title>layout_of (72,790 samples, 0.16%)</title><rect x="67.8801%" y="165" width="0.1617%" height="15" fill="rgb(235,36,10)"/><text x="68.1301%" y="175.50"></text></g><g><title>object_safety_violations (392,674 samples, 0.87%)</title><rect x="67.2912%" y="181" width="0.8726%" height="15" fill="rgb(251,123,47)"/><text x="67.5412%" y="191.50"></text></g><g><title>param_env (91,262 samples, 0.20%)</title><rect x="68.1687%" y="181" width="0.2028%" height="15" fill="rgb(221,13,13)"/><text x="68.4187%" y="191.50"></text></g><g><title>region_scope_tree (67,390 samples, 0.15%)</title><rect x="68.4288%" y="181" width="0.1497%" height="15" fill="rgb(238,131,9)"/><text x="68.6788%" y="191.50"></text></g><g><title>analysis (30,432,176 samples, 67.62%)</title><rect x="1.0776%" y="245" width="67.6234%" height="15" fill="rgb(211,50,8)"/><text x="1.3276%" y="255.50">analysis</text></g><g><title>type_check_crate (19,605,827 samples, 43.57%)</title><rect x="25.1349%" y="229" width="43.5662%" height="15" fill="rgb(245,182,24)"/><text x="25.3849%" y="239.50">type_check_crate</text></g><g><title>wf_checking (4,428,978 samples, 9.84%)</title><rect x="58.8594%" y="213" width="9.8416%" height="15" fill="rgb(242,14,37)"/><text x="59.1094%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,091,432 samples, 4.65%)</title><rect x="64.0537%" y="197" width="4.6474%" height="15" fill="rgb(246,228,12)"/><text x="64.3037%" y="207.50">check..</text></g><g><title>trait_impls_of (55,130 samples, 0.12%)</title><rect x="68.5786%" y="181" width="0.1225%" height="15" fill="rgb(213,55,15)"/><text x="68.8286%" y="191.50"></text></g><g><title>codegen_crate (272,743 samples, 0.61%)</title><rect x="68.7156%" y="245" width="0.6061%" height="15" fill="rgb(209,9,3)"/><text x="68.9656%" y="255.50"></text></g><g><title>AST_validation (70,990 samples, 0.16%)</title><rect x="69.6264%" y="229" width="0.1577%" height="15" fill="rgb(230,59,30)"/><text x="69.8764%" y="239.50"></text></g><g><title>crate_injection (51,990 samples, 0.12%)</title><rect x="69.8577%" y="229" width="0.1155%" height="15" fill="rgb(209,121,21)"/><text x="70.1077%" y="239.50"></text></g><g><title>metadata_load_macro (59,391 samples, 0.13%)</title><rect x="83.3191%" y="197" width="0.1320%" height="15" fill="rgb(220,109,13)"/><text x="83.5691%" y="207.50"></text></g><g><title>macro_expand_crate (6,221,549 samples, 13.82%)</title><rect x="69.9733%" y="229" width="13.8249%" height="15" fill="rgb(232,18,1)"/><text x="70.2233%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (6,205,579 samples, 13.79%)</title><rect x="70.0088%" y="213" width="13.7894%" height="15" fill="rgb(215,41,42)"/><text x="70.2588%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (156,193 samples, 0.35%)</title><rect x="83.4511%" y="197" width="0.3471%" height="15" fill="rgb(224,123,36)"/><text x="83.7011%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (145,392 samples, 0.32%)</title><rect x="83.8056%" y="229" width="0.3231%" height="15" fill="rgb(240,125,3)"/><text x="84.0556%" y="239.50"></text></g><g><title>finalize_macro_resolutions (123,531 samples, 0.27%)</title><rect x="84.1925%" y="213" width="0.2745%" height="15" fill="rgb(205,98,50)"/><text x="84.4425%" y="223.50"></text></g><g><title>late_resolve_crate (653,267 samples, 1.45%)</title><rect x="84.4670%" y="213" width="1.4516%" height="15" fill="rgb(205,185,37)"/><text x="84.7170%" y="223.50"></text></g><g><title>configure_and_expand (7,521,452 samples, 16.71%)</title><rect x="69.3216%" y="245" width="16.7134%" height="15" fill="rgb(238,207,15)"/><text x="69.5716%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (857,910 samples, 1.91%)</title><rect x="84.1287%" y="229" width="1.9064%" height="15" fill="rgb(213,199,42)"/><text x="84.3787%" y="239.50">r..</text></g><g><title>drop_ast (78,401 samples, 0.17%)</title><rect x="86.0351%" y="245" width="0.1742%" height="15" fill="rgb(235,201,11)"/><text x="86.2851%" y="255.50"></text></g><g><title>early_lint_checks (166,432 samples, 0.37%)</title><rect x="86.2419%" y="245" width="0.3698%" height="15" fill="rgb(207,46,11)"/><text x="86.4919%" y="255.50"></text></g><g><title>free_global_ctxt (1,485,677 samples, 3.30%)</title><rect x="86.6117%" y="245" width="3.3013%" height="15" fill="rgb(241,35,35)"/><text x="86.8617%" y="255.50">fre..</text></g><g><title>crate_hash (61,141 samples, 0.14%)</title><rect x="90.8206%" y="229" width="0.1359%" height="15" fill="rgb(243,32,47)"/><text x="91.0706%" y="239.50"></text></g><g><title>generate_crate_metadata (537,806 samples, 1.20%)</title><rect x="89.9130%" y="245" width="1.1951%" height="15" fill="rgb(247,202,23)"/><text x="90.1630%" y="255.50"></text></g><g><title>hir_lowering (1,178,993 samples, 2.62%)</title><rect x="91.1081%" y="245" width="2.6198%" height="15" fill="rgb(219,102,11)"/><text x="91.3581%" y="255.50">hi..</text></g><g><title>parse_crate (1,762,669 samples, 3.92%)</title><rect x="93.8233%" y="245" width="3.9168%" height="15" fill="rgb(243,110,44)"/><text x="94.0733%" y="255.50">pars..</text></g><g><title>prepare_outputs (158,962 samples, 0.35%)</title><rect x="97.7530%" y="245" width="0.3532%" height="15" fill="rgb(222,74,54)"/><text x="98.0030%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (472,245 samples, 1.05%)</title><rect x="98.1063%" y="245" width="1.0494%" height="15" fill="rgb(216,99,12)"/><text x="98.3563%" y="255.50"></text></g><g><title>setup_global_ctxt (80,941 samples, 0.18%)</title><rect x="99.1807%" y="245" width="0.1799%" height="15" fill="rgb(226,22,26)"/><text x="99.4307%" y="255.50"></text></g><g><title>all (45,002,407 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (45,002,407 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (287,763 samples, 0.64%)</title><rect x="99.3606%" y="245" width="0.6394%" height="15" fill="rgb(252,105,26)"/><text x="99.6106%" y="255.50"></text></g></svg></svg>