<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_late_bound_map (464,983 samples, 0.10%)</title><rect x="9.6537%" y="197" width="0.1026%" height="15" fill="rgb(227,0,7)"/><text x="9.9037%" y="207.50"></text></g><g><title>mir_promoted (1,891,283 samples, 0.42%)</title><rect x="10.4329%" y="181" width="0.4173%" height="15" fill="rgb(217,0,24)"/><text x="10.6829%" y="191.50"></text></g><g><title>mir_const_qualif_const_arg (1,588,828 samples, 0.35%)</title><rect x="10.4997%" y="165" width="0.3505%" height="15" fill="rgb(221,193,54)"/><text x="10.7497%" y="175.50"></text></g><g><title>mir_const (1,334,417 samples, 0.29%)</title><rect x="10.5558%" y="149" width="0.2944%" height="15" fill="rgb(248,212,6)"/><text x="10.8058%" y="159.50"></text></g><g><title>unsafety_check_result_for_const_arg (894,623 samples, 0.20%)</title><rect x="10.6528%" y="133" width="0.1974%" height="15" fill="rgb(208,68,35)"/><text x="10.9028%" y="143.50"></text></g><g><title>mir_built (771,301 samples, 0.17%)</title><rect x="10.6801%" y="117" width="0.1702%" height="15" fill="rgb(232,128,0)"/><text x="10.9301%" y="127.50"></text></g><g><title>mir_borrowck_const_arg (4,760,219 samples, 1.05%)</title><rect x="9.8030%" y="197" width="1.0503%" height="15" fill="rgb(207,160,47)"/><text x="10.0530%" y="207.50"></text></g><g><title>is_copy_raw (650,991 samples, 0.14%)</title><rect x="15.3526%" y="133" width="0.1436%" height="15" fill="rgb(228,23,34)"/><text x="15.6026%" y="143.50"></text></g><g><title>evaluate_obligation (504,559 samples, 0.11%)</title><rect x="15.3849%" y="117" width="0.1113%" height="15" fill="rgb(218,30,26)"/><text x="15.6349%" y="127.50"></text></g><g><title>needs_drop_raw (3,457,425 samples, 0.76%)</title><rect x="15.4962%" y="133" width="0.7628%" height="15" fill="rgb(220,122,19)"/><text x="15.7462%" y="143.50"></text></g><g><title>is_copy_raw (2,878,778 samples, 0.64%)</title><rect x="15.6239%" y="117" width="0.6351%" height="15" fill="rgb(250,228,42)"/><text x="15.8739%" y="127.50"></text></g><g><title>evaluate_obligation (2,464,211 samples, 0.54%)</title><rect x="15.7153%" y="101" width="0.5437%" height="15" fill="rgb(240,193,28)"/><text x="15.9653%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (925,318 samples, 0.20%)</title><rect x="16.4365%" y="117" width="0.2042%" height="15" fill="rgb(216,20,37)"/><text x="16.6865%" y="127.50"></text></g><g><title>resolve_instance (2,142,883 samples, 0.47%)</title><rect x="16.2596%" y="133" width="0.4728%" height="15" fill="rgb(206,188,39)"/><text x="16.5096%" y="143.50"></text></g><g><title>thir_body (5,000,264 samples, 1.10%)</title><rect x="16.7588%" y="133" width="1.1032%" height="15" fill="rgb(217,207,13)"/><text x="17.0088%" y="143.50"></text></g><g><title>mir_const (28,340,950 samples, 6.25%)</title><rect x="11.6326%" y="181" width="6.2529%" height="15" fill="rgb(231,73,38)"/><text x="11.8826%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (24,784,869 samples, 5.47%)</title><rect x="12.4172%" y="165" width="5.4683%" height="15" fill="rgb(225,20,46)"/><text x="12.6672%" y="175.50">unsafet..</text></g><g><title>mir_built (22,456,463 samples, 4.95%)</title><rect x="12.9309%" y="149" width="4.9546%" height="15" fill="rgb(210,31,41)"/><text x="13.1809%" y="159.50">mir_bu..</text></g><g><title>mir_promoted (34,419,533 samples, 7.59%)</title><rect x="10.8532%" y="197" width="7.5940%" height="15" fill="rgb(221,200,47)"/><text x="11.1032%" y="207.50">mir_promot..</text></g><g><title>mir_const_qualif (2,546,142 samples, 0.56%)</title><rect x="17.8855%" y="181" width="0.5618%" height="15" fill="rgb(226,26,5)"/><text x="18.1355%" y="191.50"></text></g><g><title>mir_const (1,920,555 samples, 0.42%)</title><rect x="18.0235%" y="165" width="0.4237%" height="15" fill="rgb(249,33,26)"/><text x="18.2735%" y="175.50"></text></g><g><title>unsafety_check_result (1,341,256 samples, 0.30%)</title><rect x="18.1514%" y="149" width="0.2959%" height="15" fill="rgb(235,183,28)"/><text x="18.4014%" y="159.50"></text></g><g><title>mir_built (1,150,894 samples, 0.25%)</title><rect x="18.1934%" y="133" width="0.2539%" height="15" fill="rgb(221,5,38)"/><text x="18.4434%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (2,579,214 samples, 0.57%)</title><rect x="18.4517%" y="197" width="0.5691%" height="15" fill="rgb(247,18,42)"/><text x="18.7017%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (539,256 samples, 0.12%)</title><rect x="19.0207%" y="197" width="0.1190%" height="15" fill="rgb(241,131,45)"/><text x="19.2707%" y="207.50"></text></g><g><title>type_op_normalize_ty (928,195 samples, 0.20%)</title><rect x="19.1449%" y="197" width="0.2048%" height="15" fill="rgb(249,31,29)"/><text x="19.3949%" y="207.50"></text></g><g><title>normalize_projection_ty (699,424 samples, 0.15%)</title><rect x="19.1954%" y="181" width="0.1543%" height="15" fill="rgb(225,111,53)"/><text x="19.4454%" y="191.50"></text></g><g><title>type_op_prove_predicate (4,155,439 samples, 0.92%)</title><rect x="19.3497%" y="197" width="0.9168%" height="15" fill="rgb(238,160,17)"/><text x="19.5997%" y="207.50"></text></g><g><title>evaluate_obligation (501,354 samples, 0.11%)</title><rect x="20.1559%" y="181" width="0.1106%" height="15" fill="rgb(214,148,48)"/><text x="20.4059%" y="191.50"></text></g><g><title>MIR_borrow_checking (89,287,058 samples, 19.70%)</title><rect x="0.5678%" y="229" width="19.6995%" height="15" fill="rgb(232,36,49)"/><text x="0.8178%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (88,324,941 samples, 19.49%)</title><rect x="0.7800%" y="213" width="19.4873%" height="15" fill="rgb(209,103,24)"/><text x="1.0300%" y="223.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (737,670 samples, 0.16%)</title><rect x="20.6538%" y="197" width="0.1628%" height="15" fill="rgb(229,88,8)"/><text x="20.9038%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,880,664 samples, 0.41%)</title><rect x="20.4040%" y="213" width="0.4149%" height="15" fill="rgb(213,181,19)"/><text x="20.6540%" y="223.50"></text></g><g><title>MIR_effect_checking (2,542,199 samples, 0.56%)</title><rect x="20.2673%" y="229" width="0.5609%" height="15" fill="rgb(254,191,54)"/><text x="20.5173%" y="239.50"></text></g><g><title>hir_module_items (1,024,633 samples, 0.23%)</title><rect x="20.8282%" y="229" width="0.2261%" height="15" fill="rgb(241,83,37)"/><text x="21.0782%" y="239.50"></text></g><g><title>codegen_fn_attrs (1,184,942 samples, 0.26%)</title><rect x="21.2667%" y="197" width="0.2614%" height="15" fill="rgb(233,36,39)"/><text x="21.5167%" y="207.50"></text></g><g><title>should_inherit_track_caller (870,368 samples, 0.19%)</title><rect x="21.3362%" y="181" width="0.1920%" height="15" fill="rgb(226,3,54)"/><text x="21.5862%" y="191.50"></text></g><g><title>check_mod_attrs (2,119,744 samples, 0.47%)</title><rect x="21.0605%" y="213" width="0.4677%" height="15" fill="rgb(245,192,40)"/><text x="21.3105%" y="223.50"></text></g><g><title>check_mod_const_bodies (585,766 samples, 0.13%)</title><rect x="21.5282%" y="213" width="0.1292%" height="15" fill="rgb(238,167,29)"/><text x="21.7782%" y="223.50"></text></g><g><title>is_copy_raw (640,717 samples, 0.14%)</title><rect x="21.8970%" y="197" width="0.1414%" height="15" fill="rgb(232,182,51)"/><text x="22.1470%" y="207.50"></text></g><g><title>evaluate_obligation (589,897 samples, 0.13%)</title><rect x="21.9082%" y="181" width="0.1301%" height="15" fill="rgb(231,60,39)"/><text x="22.1582%" y="191.50"></text></g><g><title>lookup_deprecation_entry (633,406 samples, 0.14%)</title><rect x="22.0384%" y="197" width="0.1397%" height="15" fill="rgb(208,69,12)"/><text x="22.2884%" y="207.50"></text></g><g><title>stability_index (535,586 samples, 0.12%)</title><rect x="22.0600%" y="181" width="0.1182%" height="15" fill="rgb(235,93,37)"/><text x="22.3100%" y="191.50"></text></g><g><title>param_env (493,146 samples, 0.11%)</title><rect x="22.2082%" y="197" width="0.1088%" height="15" fill="rgb(213,116,39)"/><text x="22.4582%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (2,724,021 samples, 0.60%)</title><rect x="21.7367%" y="213" width="0.6010%" height="15" fill="rgb(222,207,29)"/><text x="21.9867%" y="223.50"></text></g><g><title>misc_checking_1 (5,997,157 samples, 1.32%)</title><rect x="21.0544%" y="229" width="1.3232%" height="15" fill="rgb(206,96,30)"/><text x="21.3044%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,912,281 samples, 0.42%)</title><rect x="22.3779%" y="213" width="0.4219%" height="15" fill="rgb(218,138,4)"/><text x="22.6279%" y="223.50"></text></g><g><title>check_mod_liveness (1,462,507 samples, 0.32%)</title><rect x="22.4771%" y="197" width="0.3227%" height="15" fill="rgb(250,191,14)"/><text x="22.7271%" y="207.50"></text></g><g><title>misc_checking_2 (3,535,479 samples, 0.78%)</title><rect x="22.3775%" y="229" width="0.7800%" height="15" fill="rgb(239,60,40)"/><text x="22.6275%" y="239.50"></text></g><g><title>match_checking (1,621,498 samples, 0.36%)</title><rect x="22.7998%" y="213" width="0.3578%" height="15" fill="rgb(206,27,48)"/><text x="23.0498%" y="223.50"></text></g><g><title>check_match (1,382,646 samples, 0.31%)</title><rect x="22.8525%" y="197" width="0.3051%" height="15" fill="rgb(225,35,8)"/><text x="23.1025%" y="207.50"></text></g><g><title>check_private_in_public (1,064,222 samples, 0.23%)</title><rect x="23.1602%" y="213" width="0.2348%" height="15" fill="rgb(250,213,24)"/><text x="23.4102%" y="223.50"></text></g><g><title>death_checking (1,765,899 samples, 0.39%)</title><rect x="23.3950%" y="213" width="0.3896%" height="15" fill="rgb(247,123,22)"/><text x="23.6450%" y="223.50"></text></g><g><title>param_env (705,496 samples, 0.16%)</title><rect x="24.1643%" y="181" width="0.1557%" height="15" fill="rgb(231,138,38)"/><text x="24.4143%" y="191.50"></text></g><g><title>crate_lints (3,037,234 samples, 0.67%)</title><rect x="23.7852%" y="197" width="0.6701%" height="15" fill="rgb(231,145,46)"/><text x="24.0352%" y="207.50"></text></g><g><title>type_of (609,488 samples, 0.13%)</title><rect x="24.3208%" y="181" width="0.1345%" height="15" fill="rgb(251,118,11)"/><text x="24.5708%" y="191.50"></text></g><g><title>lint_checking (4,687,672 samples, 1.03%)</title><rect x="23.7847%" y="213" width="1.0342%" height="15" fill="rgb(217,147,25)"/><text x="24.0347%" y="223.50"></text></g><g><title>module_lints (1,648,118 samples, 0.36%)</title><rect x="24.4553%" y="197" width="0.3636%" height="15" fill="rgb(247,81,37)"/><text x="24.7053%" y="207.50"></text></g><g><title>lint_mod (1,639,878 samples, 0.36%)</title><rect x="24.4571%" y="181" width="0.3618%" height="15" fill="rgb(209,12,38)"/><text x="24.7071%" y="191.50"></text></g><g><title>privacy_access_levels (2,398,517 samples, 0.53%)</title><rect x="24.8189%" y="213" width="0.5292%" height="15" fill="rgb(227,1,9)"/><text x="25.0689%" y="223.50"></text></g><g><title>privacy_checking_modules (3,935,604 samples, 0.87%)</title><rect x="25.3481%" y="213" width="0.8683%" height="15" fill="rgb(248,47,43)"/><text x="25.5981%" y="223.50"></text></g><g><title>check_mod_privacy (3,930,124 samples, 0.87%)</title><rect x="25.3493%" y="197" width="0.8671%" height="15" fill="rgb(221,10,30)"/><text x="25.5993%" y="207.50"></text></g><g><title>misc_checking_3 (13,906,725 samples, 3.07%)</title><rect x="23.1576%" y="229" width="3.0683%" height="15" fill="rgb(210,229,1)"/><text x="23.4076%" y="239.50">mis..</text></g><g><title>impl_parent (1,514,745 samples, 0.33%)</title><rect x="26.9455%" y="165" width="0.3342%" height="15" fill="rgb(222,148,37)"/><text x="27.1955%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (717,214 samples, 0.16%)</title><rect x="27.1215%" y="149" width="0.1582%" height="15" fill="rgb(234,67,33)"/><text x="27.3715%" y="159.50"></text></g><g><title>impl_trait_ref (2,512,623 samples, 0.55%)</title><rect x="27.2797%" y="165" width="0.5544%" height="15" fill="rgb(247,98,35)"/><text x="27.5297%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,940,410 samples, 0.43%)</title><rect x="27.4059%" y="149" width="0.4281%" height="15" fill="rgb(247,138,52)"/><text x="27.6559%" y="159.50"></text></g><g><title>coherent_trait (7,219,881 samples, 1.59%)</title><rect x="26.3333%" y="197" width="1.5929%" height="15" fill="rgb(213,79,30)"/><text x="26.5833%" y="207.50"></text></g><g><title>specialization_graph_of (6,775,165 samples, 1.49%)</title><rect x="26.4315%" y="181" width="1.4948%" height="15" fill="rgb(246,177,23)"/><text x="26.6815%" y="191.50"></text></g><g><title>coherence_checking (7,476,574 samples, 1.65%)</title><rect x="26.3267%" y="213" width="1.6496%" height="15" fill="rgb(230,62,27)"/><text x="26.5767%" y="223.50"></text></g><g><title>dropck_outlives (792,579 samples, 0.17%)</title><rect x="47.4464%" y="165" width="0.1749%" height="15" fill="rgb(216,154,8)"/><text x="47.6964%" y="175.50"></text></g><g><title>mir_for_ctfe (756,318 samples, 0.17%)</title><rect x="47.7987%" y="117" width="0.1669%" height="15" fill="rgb(244,35,45)"/><text x="48.0487%" y="127.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (747,608 samples, 0.16%)</title><rect x="47.8007%" y="101" width="0.1649%" height="15" fill="rgb(251,115,12)"/><text x="48.0507%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,588,549 samples, 0.35%)</title><rect x="47.6213%" y="165" width="0.3505%" height="15" fill="rgb(240,54,50)"/><text x="47.8713%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,543,289 samples, 0.34%)</title><rect x="47.6313%" y="149" width="0.3405%" height="15" fill="rgb(233,84,52)"/><text x="47.8813%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,507,839 samples, 0.33%)</title><rect x="47.6391%" y="133" width="0.3327%" height="15" fill="rgb(207,117,47)"/><text x="47.8891%" y="143.50"></text></g><g><title>evaluate_obligation (8,778,131 samples, 1.94%)</title><rect x="47.9718%" y="165" width="1.9367%" height="15" fill="rgb(249,43,39)"/><text x="48.2218%" y="175.50">e..</text></g><g><title>method_autoderef_steps (541,086 samples, 0.12%)</title><rect x="50.0988%" y="165" width="0.1194%" height="15" fill="rgb(209,38,44)"/><text x="50.3488%" y="175.50"></text></g><g><title>eval_to_allocation_raw (525,547 samples, 0.12%)</title><rect x="55.0369%" y="117" width="0.1160%" height="15" fill="rgb(236,212,23)"/><text x="55.2869%" y="127.50"></text></g><g><title>is_mir_available (538,075 samples, 0.12%)</title><rect x="55.4483%" y="85" width="0.1187%" height="15" fill="rgb(242,79,21)"/><text x="55.6983%" y="95.50"></text></g><g><title>mir_keys (507,735 samples, 0.11%)</title><rect x="55.4550%" y="69" width="0.1120%" height="15" fill="rgb(211,96,35)"/><text x="55.7050%" y="79.50"></text></g><g><title>mir_const_qualif_const_arg (2,235,852 samples, 0.49%)</title><rect x="55.5698%" y="85" width="0.4933%" height="15" fill="rgb(253,215,40)"/><text x="55.8198%" y="95.50"></text></g><g><title>mir_const (1,917,686 samples, 0.42%)</title><rect x="55.6400%" y="69" width="0.4231%" height="15" fill="rgb(211,81,21)"/><text x="55.8900%" y="79.50"></text></g><g><title>unsafety_check_result_for_const_arg (1,316,984 samples, 0.29%)</title><rect x="55.7725%" y="53" width="0.2906%" height="15" fill="rgb(208,190,38)"/><text x="56.0225%" y="63.50"></text></g><g><title>mir_built (1,142,022 samples, 0.25%)</title><rect x="55.8111%" y="37" width="0.2520%" height="15" fill="rgb(235,213,38)"/><text x="56.0611%" y="47.50"></text></g><g><title>mir_borrowck_const_arg (4,383,204 samples, 0.97%)</title><rect x="56.5934%" y="53" width="0.9671%" height="15" fill="rgb(237,122,38)"/><text x="56.8434%" y="63.50"></text></g><g><title>mir_for_ctfe_of_const_arg (6,811,886 samples, 1.50%)</title><rect x="56.0631%" y="85" width="1.5029%" height="15" fill="rgb(244,218,35)"/><text x="56.3131%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,198,529 samples, 1.37%)</title><rect x="56.1984%" y="69" width="1.3676%" height="15" fill="rgb(240,68,47)"/><text x="56.4484%" y="79.50"></text></g><g><title>evaluate_obligation (1,226,723 samples, 0.27%)</title><rect x="58.3088%" y="69" width="0.2707%" height="15" fill="rgb(210,16,53)"/><text x="58.5588%" y="79.50"></text></g><g><title>param_env (722,794 samples, 0.16%)</title><rect x="58.5805%" y="69" width="0.1595%" height="15" fill="rgb(235,124,12)"/><text x="58.8305%" y="79.50"></text></g><g><title>eval_to_const_value_raw (17,181,836 samples, 3.79%)</title><rect x="55.0023%" y="133" width="3.7909%" height="15" fill="rgb(224,169,11)"/><text x="55.2523%" y="143.50">eval..</text></g><g><title>eval_to_const_value_raw (16,499,477 samples, 3.64%)</title><rect x="55.1529%" y="117" width="3.6403%" height="15" fill="rgb(250,166,2)"/><text x="55.4029%" y="127.50">eval..</text></g><g><title>eval_to_allocation_raw (16,360,516 samples, 3.61%)</title><rect x="55.1835%" y="101" width="3.6096%" height="15" fill="rgb(242,216,29)"/><text x="55.4335%" y="111.50">eval..</text></g><g><title>typeck_const_arg (5,544,611 samples, 1.22%)</title><rect x="57.5699%" y="85" width="1.2233%" height="15" fill="rgb(230,116,27)"/><text x="57.8199%" y="95.50"></text></g><g><title>evaluate_obligation (1,482,636 samples, 0.33%)</title><rect x="58.7932%" y="133" width="0.3271%" height="15" fill="rgb(228,99,48)"/><text x="59.0432%" y="143.50"></text></g><g><title>opt_const_param_of (41,395,679 samples, 9.13%)</title><rect x="50.2190%" y="165" width="9.1332%" height="15" fill="rgb(253,11,6)"/><text x="50.4690%" y="175.50">opt_const_par..</text></g><g><title>typeck (41,072,866 samples, 9.06%)</title><rect x="50.2902%" y="149" width="9.0620%" height="15" fill="rgb(247,143,39)"/><text x="50.5402%" y="159.50">typeck</text></g><g><title>param_env (983,500 samples, 0.22%)</title><rect x="59.3605%" y="165" width="0.2170%" height="15" fill="rgb(236,97,10)"/><text x="59.6105%" y="175.50"></text></g><g><title>predicates_of (490,205 samples, 0.11%)</title><rect x="59.4694%" y="149" width="0.1082%" height="15" fill="rgb(233,208,19)"/><text x="59.7194%" y="159.50"></text></g><g><title>param_env (723,457 samples, 0.16%)</title><rect x="60.0429%" y="149" width="0.1596%" height="15" fill="rgb(216,164,2)"/><text x="60.2929%" y="159.50"></text></g><g><title>typeck_const_arg (2,184,195 samples, 0.48%)</title><rect x="59.7568%" y="165" width="0.4819%" height="15" fill="rgb(220,129,5)"/><text x="60.0068%" y="175.50"></text></g><g><title>item_bodies_checking (146,125,755 samples, 32.24%)</title><rect x="28.0278%" y="213" width="32.2400%" height="15" fill="rgb(242,17,10)"/><text x="28.2778%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (146,121,745 samples, 32.24%)</title><rect x="28.0286%" y="197" width="32.2391%" height="15" fill="rgb(242,107,0)"/><text x="28.2786%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (145,497,100 samples, 32.10%)</title><rect x="28.1665%" y="181" width="32.1013%" height="15" fill="rgb(251,28,31)"/><text x="28.4165%" y="191.50">typeck</text></g><g><title>item_types_checking (18,418,017 samples, 4.06%)</title><rect x="60.2677%" y="213" width="4.0636%" height="15" fill="rgb(233,223,10)"/><text x="60.5177%" y="223.50">item..</text></g><g><title>check_mod_item_types (18,409,947 samples, 4.06%)</title><rect x="60.2695%" y="197" width="4.0618%" height="15" fill="rgb(215,21,27)"/><text x="60.5195%" y="207.50">chec..</text></g><g><title>late_bound_vars_map (597,228 samples, 0.13%)</title><rect x="64.7764%" y="165" width="0.1318%" height="15" fill="rgb(232,23,21)"/><text x="65.0264%" y="175.50"></text></g><g><title>resolve_lifetimes (467,637 samples, 0.10%)</title><rect x="64.8050%" y="149" width="0.1032%" height="15" fill="rgb(244,5,23)"/><text x="65.0550%" y="159.50"></text></g><g><title>fn_sig (1,289,133 samples, 0.28%)</title><rect x="64.6359%" y="181" width="0.2844%" height="15" fill="rgb(226,81,46)"/><text x="64.8859%" y="191.50"></text></g><g><title>generics_of (962,229 samples, 0.21%)</title><rect x="64.9203%" y="181" width="0.2123%" height="15" fill="rgb(247,70,30)"/><text x="65.1703%" y="191.50"></text></g><g><title>lint_levels (663,807 samples, 0.15%)</title><rect x="66.0017%" y="101" width="0.1465%" height="15" fill="rgb(212,68,19)"/><text x="66.2517%" y="111.50"></text></g><g><title>late_bound_vars_map (1,972,901 samples, 0.44%)</title><rect x="65.7138%" y="133" width="0.4353%" height="15" fill="rgb(240,187,13)"/><text x="65.9638%" y="143.50"></text></g><g><title>resolve_lifetimes (1,889,460 samples, 0.42%)</title><rect x="65.7322%" y="117" width="0.4169%" height="15" fill="rgb(223,113,26)"/><text x="65.9822%" y="127.50"></text></g><g><title>explicit_predicates_of (3,435,844 samples, 0.76%)</title><rect x="65.4187%" y="149" width="0.7581%" height="15" fill="rgb(206,192,2)"/><text x="65.6687%" y="159.50"></text></g><g><title>predicates_of (4,308,908 samples, 0.95%)</title><rect x="65.2467%" y="181" width="0.9507%" height="15" fill="rgb(241,108,4)"/><text x="65.4967%" y="191.50"></text></g><g><title>predicates_defined_on (4,008,068 samples, 0.88%)</title><rect x="65.3130%" y="165" width="0.8843%" height="15" fill="rgb(247,173,49)"/><text x="65.5630%" y="175.50"></text></g><g><title>type_collecting (9,517,117 samples, 2.10%)</title><rect x="64.3326%" y="213" width="2.0998%" height="15" fill="rgb(224,114,35)"/><text x="64.5826%" y="223.50">t..</text></g><g><title>collect_mod_item_types (9,509,837 samples, 2.10%)</title><rect x="64.3342%" y="197" width="2.0982%" height="15" fill="rgb(245,159,27)"/><text x="64.5842%" y="207.50">c..</text></g><g><title>type_of (740,209 samples, 0.16%)</title><rect x="66.2690%" y="181" width="0.1633%" height="15" fill="rgb(245,172,44)"/><text x="66.5190%" y="191.50"></text></g><g><title>evaluate_obligation (827,214 samples, 0.18%)</title><rect x="68.9038%" y="181" width="0.1825%" height="15" fill="rgb(236,23,11)"/><text x="69.1538%" y="191.50"></text></g><g><title>implied_outlives_bounds (515,137 samples, 0.11%)</title><rect x="69.0863%" y="181" width="0.1137%" height="15" fill="rgb(205,117,38)"/><text x="69.3363%" y="191.50"></text></g><g><title>param_env (2,397,476 samples, 0.53%)</title><rect x="69.2076%" y="181" width="0.5290%" height="15" fill="rgb(237,72,25)"/><text x="69.4576%" y="191.50"></text></g><g><title>check_impl_item_well_formed (15,147,732 samples, 3.34%)</title><rect x="66.7578%" y="197" width="3.3421%" height="15" fill="rgb(244,70,9)"/><text x="67.0078%" y="207.50">che..</text></g><g><title>region_scope_tree (1,593,754 samples, 0.35%)</title><rect x="69.7483%" y="181" width="0.3516%" height="15" fill="rgb(217,125,39)"/><text x="69.9983%" y="191.50"></text></g><g><title>evaluate_obligation (1,128,879 samples, 0.25%)</title><rect x="76.3939%" y="181" width="0.2491%" height="15" fill="rgb(235,36,10)"/><text x="76.6439%" y="191.50"></text></g><g><title>implied_outlives_bounds (766,687 samples, 0.17%)</title><rect x="76.6833%" y="181" width="0.1692%" height="15" fill="rgb(251,123,47)"/><text x="76.9333%" y="191.50"></text></g><g><title>param_env (3,861,518 samples, 0.85%)</title><rect x="76.8524%" y="181" width="0.8520%" height="15" fill="rgb(221,13,13)"/><text x="77.1024%" y="191.50"></text></g><g><title>check_item_well_formed (35,175,077 samples, 7.76%)</title><rect x="70.0999%" y="197" width="7.7607%" height="15" fill="rgb(238,131,9)"/><text x="70.3499%" y="207.50">check_item_..</text></g><g><title>analysis (353,638,827 samples, 78.02%)</title><rect x="0.3137%" y="245" width="78.0239%" height="15" fill="rgb(211,50,8)"/><text x="0.5637%" y="255.50">analysis</text></g><g><title>type_check_crate (236,193,744 samples, 52.11%)</title><rect x="26.2258%" y="229" width="52.1118%" height="15" fill="rgb(245,182,24)"/><text x="26.4758%" y="239.50">type_check_crate</text></g><g><title>wf_checking (53,900,263 samples, 11.89%)</title><rect x="66.4455%" y="213" width="11.8921%" height="15" fill="rgb(242,14,37)"/><text x="66.6955%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,161,923 samples, 0.48%)</title><rect x="77.8606%" y="197" width="0.4770%" height="15" fill="rgb(246,228,12)"/><text x="78.1106%" y="207.50"></text></g><g><title>AST_validation (997,391 samples, 0.22%)</title><rect x="78.4535%" y="229" width="0.2201%" height="15" fill="rgb(213,55,15)"/><text x="78.7035%" y="239.50"></text></g><g><title>metadata_load_macro (567,415 samples, 0.13%)</title><rect x="89.3710%" y="197" width="0.1252%" height="15" fill="rgb(209,9,3)"/><text x="89.6210%" y="207.50"></text></g><g><title>macro_expand_crate (49,796,127 samples, 10.99%)</title><rect x="78.7473%" y="229" width="10.9866%" height="15" fill="rgb(230,59,30)"/><text x="78.9973%" y="239.50">macro_expand_cra..</text></g><g><title>expand_crate (49,783,257 samples, 10.98%)</title><rect x="78.7501%" y="213" width="10.9838%" height="15" fill="rgb(209,121,21)"/><text x="79.0001%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (978,191 samples, 0.22%)</title><rect x="89.5181%" y="197" width="0.2158%" height="15" fill="rgb(220,109,13)"/><text x="89.7681%" y="207.50"></text></g><g><title>late_resolve_crate (7,749,787 samples, 1.71%)</title><rect x="89.9347%" y="213" width="1.7098%" height="15" fill="rgb(232,18,1)"/><text x="90.1847%" y="223.50"></text></g><g><title>configure_and_expand (60,564,908 samples, 13.36%)</title><rect x="78.4110%" y="245" width="13.3625%" height="15" fill="rgb(215,41,42)"/><text x="78.6610%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (9,191,663 samples, 2.03%)</title><rect x="89.7456%" y="229" width="2.0280%" height="15" fill="rgb(224,123,36)"/><text x="89.9956%" y="239.50">r..</text></g><g><title>drop_ast (1,091,262 samples, 0.24%)</title><rect x="91.7735%" y="245" width="0.2408%" height="15" fill="rgb(240,125,3)"/><text x="92.0235%" y="255.50"></text></g><g><title>early_lint_checks (1,808,801 samples, 0.40%)</title><rect x="92.0178%" y="245" width="0.3991%" height="15" fill="rgb(205,98,50)"/><text x="92.2678%" y="255.50"></text></g><g><title>free_global_ctxt (4,506,431 samples, 0.99%)</title><rect x="92.4169%" y="245" width="0.9943%" height="15" fill="rgb(205,185,37)"/><text x="92.6669%" y="255.50"></text></g><g><title>mir_for_ctfe (656,508 samples, 0.14%)</title><rect x="95.2713%" y="229" width="0.1448%" height="15" fill="rgb(238,207,15)"/><text x="95.5213%" y="239.50"></text></g><g><title>generate_crate_metadata (9,510,976 samples, 2.10%)</title><rect x="93.4112%" y="245" width="2.0984%" height="15" fill="rgb(213,199,42)"/><text x="93.6612%" y="255.50">g..</text></g><g><title>hir_lowering (16,921,799 samples, 3.73%)</title><rect x="95.5096%" y="245" width="3.7335%" height="15" fill="rgb(235,201,11)"/><text x="95.7596%" y="255.50">hir_..</text></g><g><title>self_profile_alloc_query_strings (1,688,789 samples, 0.37%)</title><rect x="99.4009%" y="245" width="0.3726%" height="15" fill="rgb(207,46,11)"/><text x="99.6509%" y="255.50"></text></g><g><title>all (453,244,342 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (453,244,342 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (898,120 samples, 0.20%)</title><rect x="99.8018%" y="245" width="0.1982%" height="15" fill="rgb(247,202,23)"/><text x="100.0518%" y="255.50"></text></g></svg></svg>