<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (4,482,017 samples, 0.44%)</title><rect x="11.8828%" y="133" width="0.4400%" height="15" fill="rgb(227,0,7)"/><text x="12.1328%" y="143.50"></text></g><g><title>param_env (1,263,637 samples, 0.12%)</title><rect x="13.7969%" y="101" width="0.1241%" height="15" fill="rgb(217,0,24)"/><text x="14.0469%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,460,575 samples, 0.14%)</title><rect x="14.3095%" y="85" width="0.1434%" height="15" fill="rgb(221,193,54)"/><text x="14.5595%" y="95.50"></text></g><g><title>is_copy_raw (10,900,923 samples, 1.07%)</title><rect x="17.1345%" y="53" width="1.0703%" height="15" fill="rgb(248,212,6)"/><text x="17.3845%" y="63.50"></text></g><g><title>evaluate_obligation (8,370,241 samples, 0.82%)</title><rect x="17.3830%" y="37" width="0.8218%" height="15" fill="rgb(208,68,35)"/><text x="17.6330%" y="47.50"></text></g><g><title>needs_drop_raw (13,460,968 samples, 1.32%)</title><rect x="16.8880%" y="69" width="1.3216%" height="15" fill="rgb(232,128,0)"/><text x="17.1380%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (4,545,020 samples, 0.45%)</title><rect x="18.4531%" y="53" width="0.4462%" height="15" fill="rgb(207,160,47)"/><text x="18.7031%" y="63.50"></text></g><g><title>specialization_graph_of (1,851,672 samples, 0.18%)</title><rect x="18.9450%" y="53" width="0.1818%" height="15" fill="rgb(228,23,34)"/><text x="19.1950%" y="63.50"></text></g><g><title>resolve_instance (9,838,957 samples, 0.97%)</title><rect x="18.2124%" y="69" width="0.9660%" height="15" fill="rgb(218,30,26)"/><text x="18.4624%" y="79.50"></text></g><g><title>thir_body (8,038,015 samples, 0.79%)</title><rect x="19.2027%" y="69" width="0.7892%" height="15" fill="rgb(220,122,19)"/><text x="19.4527%" y="79.50"></text></g><g><title>mir_const (70,580,613 samples, 6.93%)</title><rect x="13.1401%" y="117" width="6.9296%" height="15" fill="rgb(250,228,42)"/><text x="13.3901%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (62,626,856 samples, 6.15%)</title><rect x="13.9210%" y="101" width="6.1487%" height="15" fill="rgb(240,193,28)"/><text x="14.1710%" y="111.50">unsafety..</text></g><g><title>mir_built (57,208,908 samples, 5.62%)</title><rect x="14.4529%" y="85" width="5.6168%" height="15" fill="rgb(216,20,37)"/><text x="14.7029%" y="95.50">mir_bui..</text></g><g><title>mir_const (2,250,102 samples, 0.22%)</title><rect x="20.2295%" y="101" width="0.2209%" height="15" fill="rgb(206,188,39)"/><text x="20.4795%" y="111.50"></text></g><g><title>unsafety_check_result (1,718,118 samples, 0.17%)</title><rect x="20.2817%" y="85" width="0.1687%" height="15" fill="rgb(217,207,13)"/><text x="20.5317%" y="95.50"></text></g><g><title>mir_built (1,505,106 samples, 0.15%)</title><rect x="20.3026%" y="69" width="0.1478%" height="15" fill="rgb(231,73,38)"/><text x="20.5526%" y="79.50"></text></g><g><title>mir_const_qualif (4,023,109 samples, 0.39%)</title><rect x="20.0697%" y="117" width="0.3950%" height="15" fill="rgb(225,20,46)"/><text x="20.3197%" y="127.50"></text></g><g><title>mir_promoted (81,336,881 samples, 7.99%)</title><rect x="12.4791%" y="133" width="7.9856%" height="15" fill="rgb(210,31,41)"/><text x="12.7291%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (7,491,633 samples, 0.74%)</title><rect x="20.4653%" y="133" width="0.7355%" height="15" fill="rgb(221,200,47)"/><text x="20.7153%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,824,222 samples, 0.57%)</title><rect x="21.2008%" y="133" width="0.5718%" height="15" fill="rgb(226,26,5)"/><text x="21.4508%" y="143.50"></text></g><g><title>normalize_projection_ty (2,856,571 samples, 0.28%)</title><rect x="21.4922%" y="117" width="0.2805%" height="15" fill="rgb(249,33,26)"/><text x="21.7422%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,973,268 samples, 0.19%)</title><rect x="21.7726%" y="133" width="0.1937%" height="15" fill="rgb(235,183,28)"/><text x="22.0226%" y="143.50"></text></g><g><title>type_op_normalize_ty (3,397,554 samples, 0.33%)</title><rect x="21.9663%" y="133" width="0.3336%" height="15" fill="rgb(221,5,38)"/><text x="22.2163%" y="143.50"></text></g><g><title>normalize_projection_ty (1,586,676 samples, 0.16%)</title><rect x="22.1441%" y="117" width="0.1558%" height="15" fill="rgb(247,18,42)"/><text x="22.3941%" y="127.50"></text></g><g><title>type_op_prove_predicate (32,384,639 samples, 3.18%)</title><rect x="22.2999%" y="133" width="3.1795%" height="15" fill="rgb(241,131,45)"/><text x="22.5499%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (254,504,146 samples, 24.99%)</title><rect x="0.4953%" y="165" width="24.9872%" height="15" fill="rgb(249,31,29)"/><text x="0.7453%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (253,203,244 samples, 24.86%)</title><rect x="0.6230%" y="149" width="24.8594%" height="15" fill="rgb(225,111,53)"/><text x="0.8730%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,937,012 samples, 0.19%)</title><rect x="25.4825%" y="165" width="0.1902%" height="15" fill="rgb(238,160,17)"/><text x="25.7325%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,210,031 samples, 0.12%)</title><rect x="25.5538%" y="149" width="0.1188%" height="15" fill="rgb(214,148,48)"/><text x="25.8038%" y="159.50"></text></g><g><title>hir_module_items (2,069,153 samples, 0.20%)</title><rect x="25.6726%" y="165" width="0.2031%" height="15" fill="rgb(232,36,49)"/><text x="25.9226%" y="175.50"></text></g><g><title>codegen_fn_attrs (2,316,880 samples, 0.23%)</title><rect x="26.0865%" y="133" width="0.2275%" height="15" fill="rgb(209,103,24)"/><text x="26.3365%" y="143.50"></text></g><g><title>check_mod_attrs (4,357,949 samples, 0.43%)</title><rect x="25.8861%" y="149" width="0.4279%" height="15" fill="rgb(229,88,8)"/><text x="26.1361%" y="159.50"></text></g><g><title>check_mod_const_bodies (1,077,466 samples, 0.11%)</title><rect x="26.3139%" y="149" width="0.1058%" height="15" fill="rgb(213,181,19)"/><text x="26.5639%" y="159.50"></text></g><g><title>lint_levels (2,498,158 samples, 0.25%)</title><rect x="26.6492%" y="133" width="0.2453%" height="15" fill="rgb(254,191,54)"/><text x="26.8992%" y="143.50"></text></g><g><title>lookup_deprecation_entry (1,313,265 samples, 0.13%)</title><rect x="26.8945%" y="133" width="0.1289%" height="15" fill="rgb(241,83,37)"/><text x="27.1445%" y="143.50"></text></g><g><title>stability_index (1,100,072 samples, 0.11%)</title><rect x="26.9154%" y="117" width="0.1080%" height="15" fill="rgb(233,36,39)"/><text x="27.1654%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (5,462,915 samples, 0.54%)</title><rect x="26.5100%" y="149" width="0.5363%" height="15" fill="rgb(226,3,54)"/><text x="26.7600%" y="159.50"></text></g><g><title>misc_checking_1 (12,404,487 samples, 1.22%)</title><rect x="25.8758%" y="165" width="1.2179%" height="15" fill="rgb(245,192,40)"/><text x="26.1258%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (5,342,689 samples, 0.52%)</title><rect x="27.0940%" y="149" width="0.5245%" height="15" fill="rgb(238,167,29)"/><text x="27.3440%" y="159.50"></text></g><g><title>check_mod_liveness (4,529,881 samples, 0.44%)</title><rect x="27.1738%" y="133" width="0.4447%" height="15" fill="rgb(232,182,51)"/><text x="27.4238%" y="143.50"></text></g><g><title>type_uninhabited_from (1,543,315 samples, 0.15%)</title><rect x="27.4670%" y="117" width="0.1515%" height="15" fill="rgb(231,60,39)"/><text x="27.7170%" y="127.50"></text></g><g><title>type_uninhabited_from (1,098,789 samples, 0.11%)</title><rect x="27.5106%" y="101" width="0.1079%" height="15" fill="rgb(208,69,12)"/><text x="27.7606%" y="111.50"></text></g><g><title>misc_checking_2 (9,939,820 samples, 0.98%)</title><rect x="27.0937%" y="165" width="0.9759%" height="15" fill="rgb(235,93,37)"/><text x="27.3437%" y="175.50"></text></g><g><title>match_checking (4,594,451 samples, 0.45%)</title><rect x="27.6185%" y="149" width="0.4511%" height="15" fill="rgb(213,116,39)"/><text x="27.8685%" y="159.50"></text></g><g><title>check_match (4,234,758 samples, 0.42%)</title><rect x="27.6538%" y="133" width="0.4158%" height="15" fill="rgb(222,207,29)"/><text x="27.9038%" y="143.50"></text></g><g><title>check_private_in_public (2,580,628 samples, 0.25%)</title><rect x="28.0713%" y="149" width="0.2534%" height="15" fill="rgb(206,96,30)"/><text x="28.3213%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,119,062 samples, 0.11%)</title><rect x="28.6876%" y="133" width="0.1099%" height="15" fill="rgb(218,138,4)"/><text x="28.9376%" y="143.50"></text></g><g><title>death_checking (5,216,939 samples, 0.51%)</title><rect x="28.3246%" y="149" width="0.5122%" height="15" fill="rgb(250,191,14)"/><text x="28.5746%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,486,495 samples, 0.15%)</title><rect x="29.3999%" y="117" width="0.1459%" height="15" fill="rgb(239,60,40)"/><text x="29.6499%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,461,475 samples, 0.14%)</title><rect x="29.4023%" y="101" width="0.1435%" height="15" fill="rgb(206,27,48)"/><text x="29.6523%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,419,385 samples, 0.14%)</title><rect x="29.4064%" y="85" width="0.1394%" height="15" fill="rgb(225,35,8)"/><text x="29.6564%" y="95.50"></text></g><g><title>explicit_predicates_of (1,120,803 samples, 0.11%)</title><rect x="29.8192%" y="69" width="0.1100%" height="15" fill="rgb(250,213,24)"/><text x="30.0692%" y="79.50"></text></g><g><title>param_env (3,985,226 samples, 0.39%)</title><rect x="29.5458%" y="117" width="0.3913%" height="15" fill="rgb(247,123,22)"/><text x="29.7958%" y="127.50"></text></g><g><title>predicates_of (1,947,369 samples, 0.19%)</title><rect x="29.7459%" y="101" width="0.1912%" height="15" fill="rgb(231,138,38)"/><text x="29.9959%" y="111.50"></text></g><g><title>predicates_defined_on (1,635,766 samples, 0.16%)</title><rect x="29.7765%" y="85" width="0.1606%" height="15" fill="rgb(231,145,46)"/><text x="30.0265%" y="95.50"></text></g><g><title>crate_lints (13,017,324 samples, 1.28%)</title><rect x="28.8372%" y="133" width="1.2780%" height="15" fill="rgb(251,118,11)"/><text x="29.0872%" y="143.50"></text></g><g><title>type_of (1,633,889 samples, 0.16%)</title><rect x="29.9548%" y="117" width="0.1604%" height="15" fill="rgb(217,147,25)"/><text x="30.2048%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,285,494 samples, 0.13%)</title><rect x="29.9890%" y="101" width="0.1262%" height="15" fill="rgb(247,81,37)"/><text x="30.2390%" y="111.50"></text></g><g><title>lint_checking (17,826,707 samples, 1.75%)</title><rect x="28.8368%" y="149" width="1.7502%" height="15" fill="rgb(209,12,38)"/><text x="29.0868%" y="159.50"></text></g><g><title>module_lints (4,805,823 samples, 0.47%)</title><rect x="30.1152%" y="133" width="0.4718%" height="15" fill="rgb(227,1,9)"/><text x="30.3652%" y="143.50"></text></g><g><title>lint_mod (4,769,953 samples, 0.47%)</title><rect x="30.1187%" y="117" width="0.4683%" height="15" fill="rgb(248,47,43)"/><text x="30.3687%" y="127.50"></text></g><g><title>privacy_access_levels (3,991,244 samples, 0.39%)</title><rect x="30.5870%" y="149" width="0.3919%" height="15" fill="rgb(221,10,30)"/><text x="30.8370%" y="159.50"></text></g><g><title>privacy_checking_modules (11,532,508 samples, 1.13%)</title><rect x="30.9789%" y="149" width="1.1323%" height="15" fill="rgb(210,229,1)"/><text x="31.2289%" y="159.50"></text></g><g><title>check_mod_privacy (11,493,807 samples, 1.13%)</title><rect x="30.9827%" y="133" width="1.1285%" height="15" fill="rgb(222,148,37)"/><text x="31.2327%" y="143.50"></text></g><g><title>misc_checking_3 (41,289,237 samples, 4.05%)</title><rect x="28.0696%" y="165" width="4.0538%" height="15" fill="rgb(234,67,33)"/><text x="28.3196%" y="175.50">misc..</text></g><g><title>impl_parent (5,014,892 samples, 0.49%)</title><rect x="33.2172%" y="101" width="0.4924%" height="15" fill="rgb(247,98,35)"/><text x="33.4672%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,770,564 samples, 0.27%)</title><rect x="33.4376%" y="85" width="0.2720%" height="15" fill="rgb(247,138,52)"/><text x="33.6876%" y="95.50"></text></g><g><title>impl_trait_ref (10,141,333 samples, 1.00%)</title><rect x="33.7096%" y="101" width="0.9957%" height="15" fill="rgb(213,79,30)"/><text x="33.9596%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,828,400 samples, 0.77%)</title><rect x="33.9367%" y="85" width="0.7686%" height="15" fill="rgb(246,177,23)"/><text x="34.1867%" y="95.50"></text></g><g><title>trait_impls_of (2,495,983 samples, 0.25%)</title><rect x="34.7120%" y="101" width="0.2451%" height="15" fill="rgb(230,62,27)"/><text x="34.9620%" y="111.50"></text></g><g><title>coherent_trait (28,085,258 samples, 2.76%)</title><rect x="32.1997%" y="133" width="2.7574%" height="15" fill="rgb(216,154,8)"/><text x="32.4497%" y="143.50">co..</text></g><g><title>specialization_graph_of (27,190,259 samples, 2.67%)</title><rect x="32.2876%" y="117" width="2.6695%" height="15" fill="rgb(244,35,45)"/><text x="32.5376%" y="127.50">sp..</text></g><g><title>coherence_checking (29,018,522 samples, 2.85%)</title><rect x="32.1932%" y="149" width="2.8490%" height="15" fill="rgb(251,115,12)"/><text x="32.4432%" y="159.50">co..</text></g><g><title>associated_items (1,785,737 samples, 0.18%)</title><rect x="54.2872%" y="101" width="0.1753%" height="15" fill="rgb(240,54,50)"/><text x="54.5372%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,962,262 samples, 0.19%)</title><rect x="54.9278%" y="85" width="0.1927%" height="15" fill="rgb(233,84,52)"/><text x="55.1778%" y="95.50"></text></g><g><title>dropck_outlives (7,760,060 samples, 0.76%)</title><rect x="54.5000%" y="101" width="0.7619%" height="15" fill="rgb(207,117,47)"/><text x="54.7500%" y="111.50"></text></g><g><title>normalize_projection_ty (1,439,939 samples, 0.14%)</title><rect x="55.1205%" y="85" width="0.1414%" height="15" fill="rgb(249,43,39)"/><text x="55.3705%" y="95.50"></text></g><g><title>evaluate_obligation (17,096,085 samples, 1.68%)</title><rect x="55.2622%" y="101" width="1.6785%" height="15" fill="rgb(209,38,44)"/><text x="55.5122%" y="111.50"></text></g><g><title>generics_of (1,037,482 samples, 0.10%)</title><rect x="57.0483%" y="101" width="0.1019%" height="15" fill="rgb(236,212,23)"/><text x="57.2983%" y="111.50"></text></g><g><title>evaluate_obligation (5,799,578 samples, 0.57%)</title><rect x="58.0282%" y="85" width="0.5694%" height="15" fill="rgb(242,79,21)"/><text x="58.2782%" y="95.50"></text></g><g><title>method_autoderef_steps (13,209,361 samples, 1.30%)</title><rect x="57.3056%" y="101" width="1.2969%" height="15" fill="rgb(211,96,35)"/><text x="57.5556%" y="111.50"></text></g><g><title>predicates_of (1,214,594 samples, 0.12%)</title><rect x="58.6508%" y="101" width="0.1192%" height="15" fill="rgb(253,215,40)"/><text x="58.9008%" y="111.50"></text></g><g><title>dropck_outlives (1,658,397 samples, 0.16%)</title><rect x="61.2349%" y="85" width="0.1628%" height="15" fill="rgb(211,81,21)"/><text x="61.4849%" y="95.50"></text></g><g><title>evaluate_obligation (2,666,418 samples, 0.26%)</title><rect x="61.3979%" y="85" width="0.2618%" height="15" fill="rgb(208,190,38)"/><text x="61.6479%" y="95.50"></text></g><g><title>method_autoderef_steps (2,011,522 samples, 0.20%)</title><rect x="61.7980%" y="85" width="0.1975%" height="15" fill="rgb(235,213,38)"/><text x="62.0480%" y="95.50"></text></g><g><title>typeck (32,879,615 samples, 3.23%)</title><rect x="58.8145%" y="101" width="3.2281%" height="15" fill="rgb(237,122,38)"/><text x="59.0645%" y="111.50">typ..</text></g><g><title>item_bodies_checking (274,867,891 samples, 26.99%)</title><rect x="35.0843%" y="149" width="26.9865%" height="15" fill="rgb(244,218,35)"/><text x="35.3343%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (274,864,311 samples, 26.99%)</title><rect x="35.0847%" y="133" width="26.9861%" height="15" fill="rgb(240,68,47)"/><text x="35.3347%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (273,968,412 samples, 26.90%)</title><rect x="35.1726%" y="117" width="26.8982%" height="15" fill="rgb(210,16,53)"/><text x="35.4226%" y="127.50">typeck</text></g><g><title>evaluate_obligation (2,040,561 samples, 0.20%)</title><rect x="63.6802%" y="101" width="0.2003%" height="15" fill="rgb(235,124,12)"/><text x="63.9302%" y="111.50"></text></g><g><title>item_types_checking (18,808,129 samples, 1.85%)</title><rect x="62.0708%" y="149" width="1.8466%" height="15" fill="rgb(224,169,11)"/><text x="62.3208%" y="159.50">i..</text></g><g><title>check_mod_item_types (18,763,479 samples, 1.84%)</title><rect x="62.0752%" y="133" width="1.8422%" height="15" fill="rgb(250,166,2)"/><text x="62.3252%" y="143.50">c..</text></g><g><title>typeck (5,409,105 samples, 0.53%)</title><rect x="63.3863%" y="117" width="0.5311%" height="15" fill="rgb(242,216,29)"/><text x="63.6363%" y="127.50"></text></g><g><title>fn_sig (3,181,115 samples, 0.31%)</title><rect x="64.2168%" y="117" width="0.3123%" height="15" fill="rgb(230,116,27)"/><text x="64.4668%" y="127.50"></text></g><g><title>named_region_map (1,242,354 samples, 0.12%)</title><rect x="64.7107%" y="101" width="0.1220%" height="15" fill="rgb(228,99,48)"/><text x="64.9607%" y="111.50"></text></g><g><title>generics_of (3,229,117 samples, 0.32%)</title><rect x="64.5291%" y="117" width="0.3170%" height="15" fill="rgb(253,11,6)"/><text x="64.7791%" y="127.50"></text></g><g><title>late_bound_vars_map (2,837,104 samples, 0.28%)</title><rect x="65.4169%" y="69" width="0.2785%" height="15" fill="rgb(247,143,39)"/><text x="65.6669%" y="79.50"></text></g><g><title>resolve_lifetimes (2,657,371 samples, 0.26%)</title><rect x="65.4346%" y="53" width="0.2609%" height="15" fill="rgb(236,97,10)"/><text x="65.6846%" y="63.50"></text></g><g><title>explicit_predicates_of (7,547,345 samples, 0.74%)</title><rect x="65.0555%" y="85" width="0.7410%" height="15" fill="rgb(233,208,19)"/><text x="65.3055%" y="95.50"></text></g><g><title>predicates_of (13,631,895 samples, 1.34%)</title><rect x="64.8933%" y="117" width="1.3384%" height="15" fill="rgb(216,164,2)"/><text x="65.1433%" y="127.50"></text></g><g><title>predicates_defined_on (13,001,992 samples, 1.28%)</title><rect x="64.9552%" y="101" width="1.2765%" height="15" fill="rgb(220,129,5)"/><text x="65.2052%" y="111.50"></text></g><g><title>inferred_outlives_of (4,432,947 samples, 0.44%)</title><rect x="65.7965%" y="85" width="0.4352%" height="15" fill="rgb(242,17,10)"/><text x="66.0465%" y="95.50"></text></g><g><title>inferred_outlives_crate (4,177,257 samples, 0.41%)</title><rect x="65.8216%" y="69" width="0.4101%" height="15" fill="rgb(242,107,0)"/><text x="66.0716%" y="79.50"></text></g><g><title>type_of (2,437,809 samples, 0.24%)</title><rect x="65.9924%" y="53" width="0.2393%" height="15" fill="rgb(251,28,31)"/><text x="66.2424%" y="63.50"></text></g><g><title>type_collecting (25,050,938 samples, 2.46%)</title><rect x="63.9207%" y="149" width="2.4595%" height="15" fill="rgb(233,223,10)"/><text x="64.1707%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (25,000,607 samples, 2.45%)</title><rect x="63.9257%" y="133" width="2.4546%" height="15" fill="rgb(215,21,27)"/><text x="64.1757%" y="143.50">co..</text></g><g><title>type_of (1,261,393 samples, 0.12%)</title><rect x="66.2564%" y="117" width="0.1238%" height="15" fill="rgb(232,23,21)"/><text x="66.5064%" y="127.50"></text></g><g><title>evaluate_obligation (6,040,974 samples, 0.59%)</title><rect x="69.3460%" y="117" width="0.5931%" height="15" fill="rgb(244,5,23)"/><text x="69.5960%" y="127.50"></text></g><g><title>implied_outlives_bounds (4,250,038 samples, 0.42%)</title><rect x="69.9746%" y="117" width="0.4173%" height="15" fill="rgb(226,81,46)"/><text x="70.2246%" y="127.50"></text></g><g><title>param_env (4,508,771 samples, 0.44%)</title><rect x="70.3928%" y="117" width="0.4427%" height="15" fill="rgb(247,70,30)"/><text x="70.6428%" y="127.50"></text></g><g><title>region_scope_tree (2,949,117 samples, 0.29%)</title><rect x="70.8554%" y="117" width="0.2895%" height="15" fill="rgb(212,68,19)"/><text x="71.1054%" y="127.50"></text></g><g><title>check_impl_item_well_formed (46,108,313 samples, 4.53%)</title><rect x="66.6359%" y="133" width="4.5269%" height="15" fill="rgb(240,187,13)"/><text x="66.8859%" y="143.50">check..</text></g><g><title>evaluate_obligation (2,737,317 samples, 0.27%)</title><rect x="73.9660%" y="117" width="0.2687%" height="15" fill="rgb(223,113,26)"/><text x="74.2160%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,596,135 samples, 0.16%)</title><rect x="74.2572%" y="117" width="0.1567%" height="15" fill="rgb(206,192,2)"/><text x="74.5072%" y="127.50"></text></g><g><title>param_env (5,166,790 samples, 0.51%)</title><rect x="74.5084%" y="117" width="0.5073%" height="15" fill="rgb(241,108,4)"/><text x="74.7584%" y="127.50"></text></g><g><title>check_item_well_formed (41,221,174 samples, 4.05%)</title><rect x="71.1628%" y="133" width="4.0471%" height="15" fill="rgb(247,173,49)"/><text x="71.4128%" y="143.50">chec..</text></g><g><title>param_env (1,140,253 samples, 0.11%)</title><rect x="75.9478%" y="117" width="0.1119%" height="15" fill="rgb(224,114,35)"/><text x="76.1978%" y="127.50"></text></g><g><title>analysis (772,157,435 samples, 75.81%)</title><rect x="0.2783%" y="181" width="75.8103%" height="15" fill="rgb(245,159,27)"/><text x="0.5283%" y="191.50">analysis</text></g><g><title>type_check_crate (447,802,506 samples, 43.97%)</title><rect x="32.1234%" y="165" width="43.9652%" height="15" fill="rgb(245,172,44)"/><text x="32.3734%" y="175.50">type_check_crate</text></g><g><title>wf_checking (98,827,533 samples, 9.70%)</title><rect x="66.3857%" y="149" width="9.7029%" height="15" fill="rgb(236,23,11)"/><text x="66.6357%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (8,949,751 samples, 0.88%)</title><rect x="75.2098%" y="133" width="0.8787%" height="15" fill="rgb(205,117,38)"/><text x="75.4598%" y="143.50"></text></g><g><title>AST_validation (2,193,064 samples, 0.22%)</title><rect x="76.1522%" y="165" width="0.2153%" height="15" fill="rgb(237,72,25)"/><text x="76.4022%" y="175.50"></text></g><g><title>metadata_load_macro (1,302,544 samples, 0.13%)</title><rect x="89.5998%" y="133" width="0.1279%" height="15" fill="rgb(244,70,9)"/><text x="89.8498%" y="143.50"></text></g><g><title>metadata_register_crate (5,602,252 samples, 0.55%)</title><rect x="89.7277%" y="133" width="0.5500%" height="15" fill="rgb(217,125,39)"/><text x="89.9777%" y="143.50"></text></g><g><title>metadata_register_crate (1,099,685 samples, 0.11%)</title><rect x="90.1698%" y="117" width="0.1080%" height="15" fill="rgb(235,36,10)"/><text x="90.4198%" y="127.50"></text></g><g><title>macro_expand_crate (142,019,362 samples, 13.94%)</title><rect x="76.4504%" y="165" width="13.9434%" height="15" fill="rgb(251,123,47)"/><text x="76.7004%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (142,006,292 samples, 13.94%)</title><rect x="76.4517%" y="149" width="13.9421%" height="15" fill="rgb(221,13,13)"/><text x="76.7017%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,182,685 samples, 0.12%)</title><rect x="90.2777%" y="133" width="0.1161%" height="15" fill="rgb(238,131,9)"/><text x="90.5277%" y="143.50"></text></g><g><title>finalize_macro_resolutions (1,088,132 samples, 0.11%)</title><rect x="90.4928%" y="149" width="0.1068%" height="15" fill="rgb(211,50,8)"/><text x="90.7428%" y="159.50"></text></g><g><title>late_resolve_crate (13,938,365 samples, 1.37%)</title><rect x="90.5996%" y="149" width="1.3685%" height="15" fill="rgb(245,182,24)"/><text x="90.8496%" y="159.50"></text></g><g><title>resolve_check_unused (1,130,312 samples, 0.11%)</title><rect x="91.9931%" y="149" width="0.1110%" height="15" fill="rgb(242,14,37)"/><text x="92.2431%" y="159.50"></text></g><g><title>configure_and_expand (163,311,448 samples, 16.03%)</title><rect x="76.1389%" y="181" width="16.0339%" height="15" fill="rgb(246,228,12)"/><text x="76.3889%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (18,020,150 samples, 1.77%)</title><rect x="90.4035%" y="165" width="1.7692%" height="15" fill="rgb(213,55,15)"/><text x="90.6535%" y="175.50"></text></g><g><title>drop_ast (2,992,243 samples, 0.29%)</title><rect x="92.1728%" y="181" width="0.2938%" height="15" fill="rgb(209,9,3)"/><text x="92.4228%" y="191.50"></text></g><g><title>early_lint_checks (5,872,245 samples, 0.58%)</title><rect x="92.4701%" y="181" width="0.5765%" height="15" fill="rgb(230,59,30)"/><text x="92.7201%" y="191.50"></text></g><g><title>free_global_ctxt (13,940,005 samples, 1.37%)</title><rect x="93.0467%" y="181" width="1.3686%" height="15" fill="rgb(209,121,21)"/><text x="93.2967%" y="191.50"></text></g><g><title>optimized_mir (1,374,985 samples, 0.13%)</title><rect x="96.0963%" y="165" width="0.1350%" height="15" fill="rgb(220,109,13)"/><text x="96.3463%" y="175.50"></text></g><g><title>generate_crate_metadata (18,771,988 samples, 1.84%)</title><rect x="94.4153%" y="181" width="1.8430%" height="15" fill="rgb(232,18,1)"/><text x="94.6653%" y="191.50">g..</text></g><g><title>hir_lowering (32,459,539 samples, 3.19%)</title><rect x="96.2583%" y="181" width="3.1869%" height="15" fill="rgb(215,41,42)"/><text x="96.5083%" y="191.50">hir..</text></g><g><title>self_profile_alloc_query_strings (3,288,247 samples, 0.32%)</title><rect x="99.5414%" y="181" width="0.3228%" height="15" fill="rgb(224,123,36)"/><text x="99.7914%" y="191.50"></text></g><g><title>all (1,018,539,422 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,018,539,422 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,181,633 samples, 0.12%)</title><rect x="99.8840%" y="181" width="0.1160%" height="15" fill="rgb(205,185,37)"/><text x="100.1340%" y="191.50"></text></g></svg></svg>