<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (106,802 samples, 0.11%)</title><rect x="7.6110%" y="149" width="0.1071%" height="15" fill="rgb(227,0,7)"/><text x="7.8610%" y="159.50"></text></g><g><title>param_env (268,592 samples, 0.27%)</title><rect x="8.8030%" y="117" width="0.2694%" height="15" fill="rgb(217,0,24)"/><text x="9.0530%" y="127.50"></text></g><g><title>item_attrs (202,272 samples, 0.20%)</title><rect x="9.4392%" y="85" width="0.2028%" height="15" fill="rgb(221,193,54)"/><text x="9.6892%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (194,382 samples, 0.19%)</title><rect x="9.4471%" y="69" width="0.1949%" height="15" fill="rgb(248,212,6)"/><text x="9.6971%" y="79.50"></text></g><g><title>codegen_fn_attrs (297,132 samples, 0.30%)</title><rect x="9.3597%" y="101" width="0.2980%" height="15" fill="rgb(208,68,35)"/><text x="9.6097%" y="111.50"></text></g><g><title>adt_drop_tys (268,843 samples, 0.27%)</title><rect x="11.3608%" y="69" width="0.2696%" height="15" fill="rgb(232,128,0)"/><text x="11.6108%" y="79.50"></text></g><g><title>needs_drop_raw (1,041,032 samples, 1.04%)</title><rect x="11.2520%" y="85" width="1.0440%" height="15" fill="rgb(207,160,47)"/><text x="11.5020%" y="95.50"></text></g><g><title>is_copy_raw (663,697 samples, 0.67%)</title><rect x="11.6304%" y="69" width="0.6656%" height="15" fill="rgb(228,23,34)"/><text x="11.8804%" y="79.50"></text></g><g><title>evaluate_obligation (522,797 samples, 0.52%)</title><rect x="11.7717%" y="53" width="0.5243%" height="15" fill="rgb(218,30,26)"/><text x="12.0217%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (188,404 samples, 0.19%)</title><rect x="12.4578%" y="69" width="0.1889%" height="15" fill="rgb(220,122,19)"/><text x="12.7078%" y="79.50"></text></g><g><title>impl_parent (792,549 samples, 0.79%)</title><rect x="13.9577%" y="53" width="0.7948%" height="15" fill="rgb(250,228,42)"/><text x="14.2077%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (496,436 samples, 0.50%)</title><rect x="14.2547%" y="37" width="0.4978%" height="15" fill="rgb(240,193,28)"/><text x="14.5047%" y="47.50"></text></g><g><title>specialization_graph_of (3,971,875 samples, 3.98%)</title><rect x="12.7071%" y="69" width="3.9831%" height="15" fill="rgb(216,20,37)"/><text x="12.9571%" y="79.50">spec..</text></g><g><title>impl_trait_ref (1,932,289 samples, 1.94%)</title><rect x="14.7525%" y="53" width="1.9378%" height="15" fill="rgb(206,188,39)"/><text x="15.0025%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,630,968 samples, 1.64%)</title><rect x="15.0547%" y="37" width="1.6356%" height="15" fill="rgb(217,207,13)"/><text x="15.3047%" y="47.50"></text></g><g><title>resolve_instance (4,437,153 samples, 4.45%)</title><rect x="12.2960%" y="85" width="4.4497%" height="15" fill="rgb(231,73,38)"/><text x="12.5460%" y="95.50">resol..</text></g><g><title>thir_body (573,907 samples, 0.58%)</title><rect x="16.7667%" y="85" width="0.5755%" height="15" fill="rgb(225,20,46)"/><text x="17.0167%" y="95.50"></text></g><g><title>mir_const (9,030,852 samples, 9.06%)</title><rect x="8.2968%" y="133" width="9.0564%" height="15" fill="rgb(210,31,41)"/><text x="8.5468%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,257,555 samples, 8.28%)</title><rect x="9.0723%" y="117" width="8.2809%" height="15" fill="rgb(221,200,47)"/><text x="9.3223%" y="127.50">unsafety_che..</text></g><g><title>mir_built (7,673,871 samples, 7.70%)</title><rect x="9.6577%" y="101" width="7.6956%" height="15" fill="rgb(226,26,5)"/><text x="9.9077%" y="111.50">mir_built</text></g><g><title>mir_promoted (9,555,370 samples, 9.58%)</title><rect x="7.7927%" y="149" width="9.5824%" height="15" fill="rgb(249,33,26)"/><text x="8.0427%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (363,512 samples, 0.36%)</title><rect x="17.3751%" y="149" width="0.3645%" height="15" fill="rgb(235,183,28)"/><text x="17.6251%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (407,246 samples, 0.41%)</title><rect x="17.7396%" y="149" width="0.4084%" height="15" fill="rgb(221,5,38)"/><text x="17.9896%" y="159.50"></text></g><g><title>normalize_projection_ty (257,063 samples, 0.26%)</title><rect x="17.8903%" y="133" width="0.2578%" height="15" fill="rgb(247,18,42)"/><text x="18.1403%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,515,890 samples, 1.52%)</title><rect x="18.1480%" y="149" width="1.5202%" height="15" fill="rgb(241,131,45)"/><text x="18.3980%" y="159.50"></text></g><g><title>MIR_borrow_checking (18,645,199 samples, 18.70%)</title><rect x="0.9753%" y="181" width="18.6979%" height="15" fill="rgb(249,31,29)"/><text x="1.2253%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,592,629 samples, 18.65%)</title><rect x="1.0280%" y="165" width="18.6452%" height="15" fill="rgb(225,111,53)"/><text x="1.2780%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (204,712 samples, 0.21%)</title><rect x="19.6895%" y="181" width="0.2053%" height="15" fill="rgb(238,160,17)"/><text x="19.9395%" y="191.50"></text></g><g><title>get_lang_items (117,171 samples, 0.12%)</title><rect x="20.3806%" y="101" width="0.1175%" height="15" fill="rgb(214,148,48)"/><text x="20.6306%" y="111.50"></text></g><g><title>codegen_fn_attrs (281,922 samples, 0.28%)</title><rect x="20.3439%" y="117" width="0.2827%" height="15" fill="rgb(232,36,49)"/><text x="20.5939%" y="127.50"></text></g><g><title>codegen_fn_attrs (471,945 samples, 0.47%)</title><rect x="20.1607%" y="149" width="0.4733%" height="15" fill="rgb(209,103,24)"/><text x="20.4107%" y="159.50"></text></g><g><title>should_inherit_track_caller (411,135 samples, 0.41%)</title><rect x="20.2217%" y="133" width="0.4123%" height="15" fill="rgb(229,88,8)"/><text x="20.4717%" y="143.50"></text></g><g><title>check_mod_attrs (699,677 samples, 0.70%)</title><rect x="19.9328%" y="165" width="0.7017%" height="15" fill="rgb(213,181,19)"/><text x="20.1828%" y="175.50"></text></g><g><title>check_mod_const_bodies (119,971 samples, 0.12%)</title><rect x="20.6344%" y="165" width="0.1203%" height="15" fill="rgb(254,191,54)"/><text x="20.8844%" y="175.50"></text></g><g><title>lookup_deprecation_entry (178,062 samples, 0.18%)</title><rect x="21.0469%" y="149" width="0.1786%" height="15" fill="rgb(241,83,37)"/><text x="21.2969%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (505,346 samples, 0.51%)</title><rect x="20.8388%" y="165" width="0.5068%" height="15" fill="rgb(233,36,39)"/><text x="21.0888%" y="175.50"></text></g><g><title>misc_checking_1 (1,503,727 samples, 1.51%)</title><rect x="19.8954%" y="181" width="1.5080%" height="15" fill="rgb(226,3,54)"/><text x="20.1454%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (542,476 samples, 0.54%)</title><rect x="21.4048%" y="165" width="0.5440%" height="15" fill="rgb(245,192,40)"/><text x="21.6548%" y="175.50"></text></g><g><title>check_mod_liveness (491,376 samples, 0.49%)</title><rect x="21.4560%" y="149" width="0.4928%" height="15" fill="rgb(238,167,29)"/><text x="21.7060%" y="159.50"></text></g><g><title>type_uninhabited_from (309,144 samples, 0.31%)</title><rect x="21.6388%" y="133" width="0.3100%" height="15" fill="rgb(232,182,51)"/><text x="21.8888%" y="143.50"></text></g><g><title>type_uninhabited_from (280,844 samples, 0.28%)</title><rect x="21.6672%" y="117" width="0.2816%" height="15" fill="rgb(231,60,39)"/><text x="21.9172%" y="127.50"></text></g><g><title>misc_checking_2 (844,680 samples, 0.85%)</title><rect x="21.4034%" y="181" width="0.8471%" height="15" fill="rgb(208,69,12)"/><text x="21.6534%" y="191.50"></text></g><g><title>match_checking (300,844 samples, 0.30%)</title><rect x="21.9488%" y="165" width="0.3017%" height="15" fill="rgb(235,93,37)"/><text x="22.1988%" y="175.50"></text></g><g><title>check_match (285,604 samples, 0.29%)</title><rect x="21.9641%" y="149" width="0.2864%" height="15" fill="rgb(213,116,39)"/><text x="22.2141%" y="159.50"></text></g><g><title>check_private_in_public (123,852 samples, 0.12%)</title><rect x="22.2609%" y="165" width="0.1242%" height="15" fill="rgb(222,207,29)"/><text x="22.5109%" y="175.50"></text></g><g><title>death_checking (232,632 samples, 0.23%)</title><rect x="22.3851%" y="165" width="0.2333%" height="15" fill="rgb(206,96,30)"/><text x="22.6351%" y="175.50"></text></g><g><title>param_env (156,293 samples, 0.16%)</title><rect x="23.4074%" y="133" width="0.1567%" height="15" fill="rgb(218,138,4)"/><text x="23.6574%" y="143.50"></text></g><g><title>crate_lints (2,046,833 samples, 2.05%)</title><rect x="22.6200%" y="149" width="2.0526%" height="15" fill="rgb(250,191,14)"/><text x="22.8700%" y="159.50">c..</text></g><g><title>type_of (1,055,773 samples, 1.06%)</title><rect x="23.6139%" y="133" width="1.0588%" height="15" fill="rgb(239,60,40)"/><text x="23.8639%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (815,441 samples, 0.82%)</title><rect x="23.8549%" y="117" width="0.8177%" height="15" fill="rgb(206,27,48)"/><text x="24.1049%" y="127.50"></text></g><g><title>lint_checking (2,358,086 samples, 2.36%)</title><rect x="22.6183%" y="165" width="2.3648%" height="15" fill="rgb(225,35,8)"/><text x="22.8683%" y="175.50">li..</text></g><g><title>module_lints (309,593 samples, 0.31%)</title><rect x="24.6726%" y="149" width="0.3105%" height="15" fill="rgb(250,213,24)"/><text x="24.9226%" y="159.50"></text></g><g><title>lint_mod (306,243 samples, 0.31%)</title><rect x="24.6760%" y="133" width="0.3071%" height="15" fill="rgb(247,123,22)"/><text x="24.9260%" y="143.50"></text></g><g><title>privacy_access_levels (125,131 samples, 0.13%)</title><rect x="24.9831%" y="165" width="0.1255%" height="15" fill="rgb(231,138,38)"/><text x="25.2331%" y="175.50"></text></g><g><title>privacy_checking_modules (554,756 samples, 0.56%)</title><rect x="25.1086%" y="165" width="0.5563%" height="15" fill="rgb(231,145,46)"/><text x="25.3586%" y="175.50"></text></g><g><title>check_mod_privacy (551,796 samples, 0.55%)</title><rect x="25.1116%" y="149" width="0.5534%" height="15" fill="rgb(251,118,11)"/><text x="25.3616%" y="159.50"></text></g><g><title>misc_checking_3 (3,414,967 samples, 3.42%)</title><rect x="22.2505%" y="181" width="3.4246%" height="15" fill="rgb(217,147,25)"/><text x="22.5005%" y="191.50">mis..</text></g><g><title>impl_parent (2,773,651 samples, 2.78%)</title><rect x="30.3828%" y="117" width="2.7815%" height="15" fill="rgb(247,81,37)"/><text x="30.6328%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,477,777 samples, 1.48%)</title><rect x="31.6823%" y="101" width="1.4820%" height="15" fill="rgb(209,12,38)"/><text x="31.9323%" y="111.50"></text></g><g><title>impl_trait_ref (7,913,230 samples, 7.94%)</title><rect x="33.1643%" y="117" width="7.9356%" height="15" fill="rgb(227,1,9)"/><text x="33.4143%" y="127.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,256,343 samples, 6.27%)</title><rect x="34.8258%" y="101" width="6.2740%" height="15" fill="rgb(248,47,43)"/><text x="35.0758%" y="111.50">metadata..</text></g><g><title>coherent_trait (16,420,464 samples, 16.47%)</title><rect x="25.7437%" y="149" width="16.4669%" height="15" fill="rgb(221,10,30)"/><text x="25.9937%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (16,396,163 samples, 16.44%)</title><rect x="25.7680%" y="133" width="16.4425%" height="15" fill="rgb(210,229,1)"/><text x="26.0180%" y="143.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,104,231 samples, 1.11%)</title><rect x="41.1032%" y="117" width="1.1074%" height="15" fill="rgb(222,148,37)"/><text x="41.3532%" y="127.50"></text></g><g><title>implementations_of_trait (320,291 samples, 0.32%)</title><rect x="41.8894%" y="101" width="0.3212%" height="15" fill="rgb(234,67,33)"/><text x="42.1394%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (240,701 samples, 0.24%)</title><rect x="41.9692%" y="85" width="0.2414%" height="15" fill="rgb(247,98,35)"/><text x="42.2192%" y="95.50"></text></g><g><title>coherence_checking (16,507,324 samples, 16.55%)</title><rect x="25.7202%" y="165" width="16.5540%" height="15" fill="rgb(247,138,52)"/><text x="25.9702%" y="175.50">coherence_checking</text></g><g><title>associated_item (289,520 samples, 0.29%)</title><rect x="50.5155%" y="101" width="0.2903%" height="15" fill="rgb(213,79,30)"/><text x="50.7655%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (230,550 samples, 0.23%)</title><rect x="50.5747%" y="85" width="0.2312%" height="15" fill="rgb(246,177,23)"/><text x="50.8247%" y="95.50"></text></g><g><title>associated_items (426,633 samples, 0.43%)</title><rect x="50.4033%" y="117" width="0.4278%" height="15" fill="rgb(230,62,27)"/><text x="50.6533%" y="127.50"></text></g><g><title>adt_dtorck_constraint (142,152 samples, 0.14%)</title><rect x="51.1706%" y="85" width="0.1426%" height="15" fill="rgb(216,154,8)"/><text x="51.4206%" y="95.50"></text></g><g><title>adt_dtorck_constraint (256,523 samples, 0.26%)</title><rect x="51.0762%" y="101" width="0.2572%" height="15" fill="rgb(244,35,45)"/><text x="51.3262%" y="111.50"></text></g><g><title>dropck_outlives (490,203 samples, 0.49%)</title><rect x="50.8706%" y="117" width="0.4916%" height="15" fill="rgb(251,115,12)"/><text x="51.1206%" y="127.50"></text></g><g><title>evaluate_obligation (1,026,236 samples, 1.03%)</title><rect x="51.3638%" y="117" width="1.0291%" height="15" fill="rgb(240,54,50)"/><text x="51.6138%" y="127.50"></text></g><g><title>trait_impls_of (189,722 samples, 0.19%)</title><rect x="52.2026%" y="101" width="0.1903%" height="15" fill="rgb(233,84,52)"/><text x="52.4526%" y="111.50"></text></g><g><title>evaluate_obligation (201,041 samples, 0.20%)</title><rect x="52.8921%" y="101" width="0.2016%" height="15" fill="rgb(207,117,47)"/><text x="53.1421%" y="111.50"></text></g><g><title>method_autoderef_steps (387,754 samples, 0.39%)</title><rect x="52.7149%" y="117" width="0.3889%" height="15" fill="rgb(249,43,39)"/><text x="52.9649%" y="127.50"></text></g><g><title>predicates_of (179,583 samples, 0.18%)</title><rect x="53.1888%" y="117" width="0.1801%" height="15" fill="rgb(209,38,44)"/><text x="53.4388%" y="127.50"></text></g><g><title>predicates_defined_on (118,471 samples, 0.12%)</title><rect x="53.2501%" y="101" width="0.1188%" height="15" fill="rgb(236,212,23)"/><text x="53.5001%" y="111.50"></text></g><g><title>associated_item (277,984 samples, 0.28%)</title><rect x="56.3446%" y="85" width="0.2788%" height="15" fill="rgb(242,79,21)"/><text x="56.5946%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (228,012 samples, 0.23%)</title><rect x="56.3947%" y="69" width="0.2287%" height="15" fill="rgb(211,96,35)"/><text x="56.6447%" y="79.50"></text></g><g><title>associated_items (380,004 samples, 0.38%)</title><rect x="56.2623%" y="101" width="0.3811%" height="15" fill="rgb(253,215,40)"/><text x="56.5123%" y="111.50"></text></g><g><title>adt_dtorck_constraint (105,271 samples, 0.11%)</title><rect x="56.9266%" y="53" width="0.1056%" height="15" fill="rgb(211,81,21)"/><text x="57.1766%" y="63.50"></text></g><g><title>adt_dtorck_constraint (151,881 samples, 0.15%)</title><rect x="56.8886%" y="69" width="0.1523%" height="15" fill="rgb(208,190,38)"/><text x="57.1386%" y="79.50"></text></g><g><title>dropck_outlives (411,164 samples, 0.41%)</title><rect x="56.6649%" y="101" width="0.4123%" height="15" fill="rgb(235,213,38)"/><text x="56.9149%" y="111.50"></text></g><g><title>adt_dtorck_constraint (287,322 samples, 0.29%)</title><rect x="56.7891%" y="85" width="0.2881%" height="15" fill="rgb(237,122,38)"/><text x="57.0391%" y="95.50"></text></g><g><title>predicates_of (125,352 samples, 0.13%)</title><rect x="57.9071%" y="85" width="0.1257%" height="15" fill="rgb(244,218,35)"/><text x="58.1571%" y="95.50"></text></g><g><title>evaluate_obligation (1,378,240 samples, 1.38%)</title><rect x="57.0772%" y="101" width="1.3821%" height="15" fill="rgb(240,68,47)"/><text x="57.3272%" y="111.50"></text></g><g><title>trait_impls_of (420,754 samples, 0.42%)</title><rect x="58.0374%" y="85" width="0.4219%" height="15" fill="rgb(210,16,53)"/><text x="58.2874%" y="95.50"></text></g><g><title>implementations_of_trait (145,662 samples, 0.15%)</title><rect x="58.3133%" y="69" width="0.1461%" height="15" fill="rgb(235,124,12)"/><text x="58.5633%" y="79.50"></text></g><g><title>is_copy_raw (242,522 samples, 0.24%)</title><rect x="58.6814%" y="101" width="0.2432%" height="15" fill="rgb(224,169,11)"/><text x="58.9314%" y="111.50"></text></g><g><title>evaluate_obligation (225,332 samples, 0.23%)</title><rect x="58.6987%" y="85" width="0.2260%" height="15" fill="rgb(250,166,2)"/><text x="58.9487%" y="95.50"></text></g><g><title>trait_impls_of (177,412 samples, 0.18%)</title><rect x="58.7467%" y="69" width="0.1779%" height="15" fill="rgb(242,216,29)"/><text x="58.9967%" y="79.50"></text></g><g><title>method_autoderef_steps (105,902 samples, 0.11%)</title><rect x="59.0437%" y="101" width="0.1062%" height="15" fill="rgb(230,116,27)"/><text x="59.2937%" y="111.50"></text></g><g><title>object_safety_violations (121,091 samples, 0.12%)</title><rect x="59.1499%" y="101" width="0.1214%" height="15" fill="rgb(228,99,48)"/><text x="59.3999%" y="111.50"></text></g><g><title>predicates_of (173,910 samples, 0.17%)</title><rect x="59.2833%" y="101" width="0.1744%" height="15" fill="rgb(253,11,6)"/><text x="59.5333%" y="111.50"></text></g><g><title>predicates_defined_on (124,400 samples, 0.12%)</title><rect x="59.3329%" y="85" width="0.1248%" height="15" fill="rgb(247,143,39)"/><text x="59.5829%" y="95.50"></text></g><g><title>typeck (6,123,769 samples, 6.14%)</title><rect x="53.4144%" y="117" width="6.1411%" height="15" fill="rgb(236,97,10)"/><text x="53.6644%" y="127.50">typeck</text></g><g><title>item_bodies_checking (17,244,112 samples, 17.29%)</title><rect x="42.3150%" y="165" width="17.2929%" height="15" fill="rgb(233,208,19)"/><text x="42.5650%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,241,162 samples, 17.29%)</title><rect x="42.3180%" y="149" width="17.2899%" height="15" fill="rgb(216,164,2)"/><text x="42.5680%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (17,207,412 samples, 17.26%)</title><rect x="42.3518%" y="133" width="17.2561%" height="15" fill="rgb(220,129,5)"/><text x="42.6018%" y="143.50">typeck</text></g><g><title>item_types_checking (373,265 samples, 0.37%)</title><rect x="59.6079%" y="165" width="0.3743%" height="15" fill="rgb(242,17,10)"/><text x="59.8579%" y="175.50"></text></g><g><title>check_mod_item_types (369,715 samples, 0.37%)</title><rect x="59.6114%" y="149" width="0.3708%" height="15" fill="rgb(242,107,0)"/><text x="59.8614%" y="159.50"></text></g><g><title>late_bound_vars_map (174,931 samples, 0.18%)</title><rect x="60.4515%" y="117" width="0.1754%" height="15" fill="rgb(251,28,31)"/><text x="60.7015%" y="127.50"></text></g><g><title>resolve_lifetimes (161,691 samples, 0.16%)</title><rect x="60.4648%" y="101" width="0.1621%" height="15" fill="rgb(233,223,10)"/><text x="60.7148%" y="111.50"></text></g><g><title>fn_sig (357,494 samples, 0.36%)</title><rect x="60.2968%" y="133" width="0.3585%" height="15" fill="rgb(215,21,27)"/><text x="60.5468%" y="143.50"></text></g><g><title>named_region_map (251,674 samples, 0.25%)</title><rect x="60.8512%" y="117" width="0.2524%" height="15" fill="rgb(232,23,21)"/><text x="61.1012%" y="127.50"></text></g><g><title>resolve_lifetimes (235,053 samples, 0.24%)</title><rect x="60.8678%" y="101" width="0.2357%" height="15" fill="rgb(244,5,23)"/><text x="61.1178%" y="111.50"></text></g><g><title>lint_levels (127,881 samples, 0.13%)</title><rect x="60.9753%" y="85" width="0.1282%" height="15" fill="rgb(226,81,46)"/><text x="61.2253%" y="95.50"></text></g><g><title>generics_of (462,346 samples, 0.46%)</title><rect x="60.6554%" y="133" width="0.4637%" height="15" fill="rgb(247,70,30)"/><text x="60.9054%" y="143.50"></text></g><g><title>explicit_predicates_of (298,665 samples, 0.30%)</title><rect x="61.3204%" y="101" width="0.2995%" height="15" fill="rgb(212,68,19)"/><text x="61.5704%" y="111.50"></text></g><g><title>predicates_of (138,312 samples, 0.14%)</title><rect x="61.8431%" y="69" width="0.1387%" height="15" fill="rgb(240,187,13)"/><text x="62.0931%" y="79.50"></text></g><g><title>predicates_defined_on (104,592 samples, 0.10%)</title><rect x="61.8770%" y="53" width="0.1049%" height="15" fill="rgb(223,113,26)"/><text x="62.1270%" y="63.50"></text></g><g><title>type_of (130,091 samples, 0.13%)</title><rect x="62.6272%" y="53" width="0.1305%" height="15" fill="rgb(206,192,2)"/><text x="62.8772%" y="63.50"></text></g><g><title>metadata_decode_entry_type_of (109,911 samples, 0.11%)</title><rect x="62.6475%" y="37" width="0.1102%" height="15" fill="rgb(241,108,4)"/><text x="62.8975%" y="47.50"></text></g><g><title>predicates_of (1,589,189 samples, 1.59%)</title><rect x="61.1649%" y="133" width="1.5937%" height="15" fill="rgb(247,173,49)"/><text x="61.4149%" y="143.50"></text></g><g><title>predicates_defined_on (1,529,798 samples, 1.53%)</title><rect x="61.2245%" y="117" width="1.5341%" height="15" fill="rgb(224,114,35)"/><text x="61.4745%" y="127.50"></text></g><g><title>inferred_outlives_of (1,135,493 samples, 1.14%)</title><rect x="61.6199%" y="101" width="1.1387%" height="15" fill="rgb(245,159,27)"/><text x="61.8699%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,106,992 samples, 1.11%)</title><rect x="61.6485%" y="85" width="1.1101%" height="15" fill="rgb(245,172,44)"/><text x="61.8985%" y="95.50"></text></g><g><title>type_of (774,577 samples, 0.78%)</title><rect x="61.9818%" y="69" width="0.7768%" height="15" fill="rgb(236,23,11)"/><text x="62.2318%" y="79.50"></text></g><g><title>type_collecting (2,891,082 samples, 2.90%)</title><rect x="59.9847%" y="165" width="2.8993%" height="15" fill="rgb(205,117,38)"/><text x="60.2347%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (2,877,682 samples, 2.89%)</title><rect x="59.9982%" y="149" width="2.8858%" height="15" fill="rgb(237,72,25)"/><text x="60.2482%" y="159.50">co..</text></g><g><title>type_of (125,010 samples, 0.13%)</title><rect x="62.7586%" y="133" width="0.1254%" height="15" fill="rgb(244,70,9)"/><text x="63.0086%" y="143.50"></text></g><g><title>evaluate_obligation (351,723 samples, 0.35%)</title><rect x="64.0263%" y="133" width="0.3527%" height="15" fill="rgb(217,125,39)"/><text x="64.2763%" y="143.50"></text></g><g><title>implied_outlives_bounds (165,521 samples, 0.17%)</title><rect x="64.3790%" y="133" width="0.1660%" height="15" fill="rgb(235,36,10)"/><text x="64.6290%" y="143.50"></text></g><g><title>param_env (162,221 samples, 0.16%)</title><rect x="64.5450%" y="133" width="0.1627%" height="15" fill="rgb(251,123,47)"/><text x="64.7950%" y="143.50"></text></g><g><title>region_scope_tree (180,572 samples, 0.18%)</title><rect x="64.7471%" y="133" width="0.1811%" height="15" fill="rgb(221,13,13)"/><text x="64.9971%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,091,224 samples, 2.10%)</title><rect x="63.0018%" y="149" width="2.0971%" height="15" fill="rgb(238,131,9)"/><text x="63.2518%" y="159.50">c..</text></g><g><title>trait_impls_of (170,283 samples, 0.17%)</title><rect x="64.9282%" y="133" width="0.1708%" height="15" fill="rgb(211,50,8)"/><text x="65.1782%" y="143.50"></text></g><g><title>adt_def (134,291 samples, 0.13%)</title><rect x="66.1572%" y="101" width="0.1347%" height="15" fill="rgb(245,182,24)"/><text x="66.4072%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (131,231 samples, 0.13%)</title><rect x="66.1602%" y="85" width="0.1316%" height="15" fill="rgb(242,14,37)"/><text x="66.4102%" y="95.50"></text></g><g><title>item_attrs (100,231 samples, 0.10%)</title><rect x="66.1913%" y="69" width="0.1005%" height="15" fill="rgb(246,228,12)"/><text x="66.4413%" y="79.50"></text></g><g><title>adt_def (143,602 samples, 0.14%)</title><rect x="66.2998%" y="85" width="0.1440%" height="15" fill="rgb(213,55,15)"/><text x="66.5498%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (141,852 samples, 0.14%)</title><rect x="66.3015%" y="69" width="0.1423%" height="15" fill="rgb(209,9,3)"/><text x="66.5515%" y="79.50"></text></g><g><title>item_attrs (119,922 samples, 0.12%)</title><rect x="66.3235%" y="53" width="0.1203%" height="15" fill="rgb(230,59,30)"/><text x="66.5735%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,612 samples, 0.12%)</title><rect x="66.3248%" y="37" width="0.1189%" height="15" fill="rgb(209,121,21)"/><text x="66.5748%" y="47.50"></text></g><g><title>adt_sized_constraint (206,153 samples, 0.21%)</title><rect x="66.2918%" y="101" width="0.2067%" height="15" fill="rgb(220,109,13)"/><text x="66.5418%" y="111.50"></text></g><g><title>adt_sized_constraint (406,744 samples, 0.41%)</title><rect x="66.1407%" y="117" width="0.4079%" height="15" fill="rgb(232,18,1)"/><text x="66.3907%" y="127.50"></text></g><g><title>evaluate_obligation (647,637 samples, 0.65%)</title><rect x="65.9417%" y="133" width="0.6495%" height="15" fill="rgb(215,41,42)"/><text x="66.1917%" y="143.50"></text></g><g><title>evaluate_obligation (138,711 samples, 0.14%)</title><rect x="66.7931%" y="117" width="0.1391%" height="15" fill="rgb(224,123,36)"/><text x="67.0431%" y="127.50"></text></g><g><title>layout_of (141,282 samples, 0.14%)</title><rect x="67.1046%" y="85" width="0.1417%" height="15" fill="rgb(240,125,3)"/><text x="67.3546%" y="95.50"></text></g><g><title>layout_of (235,703 samples, 0.24%)</title><rect x="67.0327%" y="101" width="0.2364%" height="15" fill="rgb(205,98,50)"/><text x="67.2827%" y="111.50"></text></g><g><title>layout_of (375,405 samples, 0.38%)</title><rect x="66.9531%" y="117" width="0.3765%" height="15" fill="rgb(205,185,37)"/><text x="67.2031%" y="127.50"></text></g><g><title>object_safety_violations (668,997 samples, 0.67%)</title><rect x="66.6965%" y="133" width="0.6709%" height="15" fill="rgb(238,207,15)"/><text x="66.9465%" y="143.50"></text></g><g><title>param_env (229,893 samples, 0.23%)</title><rect x="67.3674%" y="133" width="0.2305%" height="15" fill="rgb(213,199,42)"/><text x="67.6174%" y="143.50"></text></g><g><title>check_item_well_formed (2,620,959 samples, 2.63%)</title><rect x="65.0990%" y="149" width="2.6284%" height="15" fill="rgb(235,201,11)"/><text x="65.3490%" y="159.50">ch..</text></g><g><title>analysis (67,029,097 samples, 67.22%)</title><rect x="0.6525%" y="197" width="67.2187%" height="15" fill="rgb(207,46,11)"/><text x="0.9025%" y="207.50">analysis</text></g><g><title>type_check_crate (42,077,079 samples, 42.20%)</title><rect x="25.6751%" y="181" width="42.1961%" height="15" fill="rgb(241,35,35)"/><text x="25.9251%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,970,175 samples, 4.98%)</title><rect x="62.8870%" y="165" width="4.9842%" height="15" fill="rgb(243,32,47)"/><text x="63.1370%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (143,471 samples, 0.14%)</title><rect x="67.7273%" y="149" width="0.1439%" height="15" fill="rgb(247,202,23)"/><text x="67.9773%" y="159.50"></text></g><g><title>codegen_crate (413,374 samples, 0.41%)</title><rect x="67.8807%" y="197" width="0.4145%" height="15" fill="rgb(219,102,11)"/><text x="68.1307%" y="207.50"></text></g><g><title>AST_validation (126,211 samples, 0.13%)</title><rect x="68.4798%" y="181" width="0.1266%" height="15" fill="rgb(243,110,44)"/><text x="68.7298%" y="191.50"></text></g><g><title>metadata_load_macro (182,503 samples, 0.18%)</title><rect x="80.5347%" y="149" width="0.1830%" height="15" fill="rgb(222,74,54)"/><text x="80.7847%" y="159.50"></text></g><g><title>metadata_register_crate (2,818,860 samples, 2.83%)</title><rect x="80.7177%" y="149" width="2.8268%" height="15" fill="rgb(216,99,12)"/><text x="80.9677%" y="159.50">me..</text></g><g><title>metadata_register_crate (1,163,182 samples, 1.17%)</title><rect x="82.3780%" y="133" width="1.1665%" height="15" fill="rgb(226,22,26)"/><text x="82.6280%" y="143.50"></text></g><g><title>metadata_register_crate (118,003 samples, 0.12%)</title><rect x="83.4262%" y="117" width="0.1183%" height="15" fill="rgb(217,163,10)"/><text x="83.6762%" y="127.50"></text></g><g><title>macro_expand_crate (14,795,485 samples, 14.84%)</title><rect x="68.7392%" y="181" width="14.8373%" height="15" fill="rgb(213,25,53)"/><text x="68.9892%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (14,773,125 samples, 14.81%)</title><rect x="68.7616%" y="165" width="14.8149%" height="15" fill="rgb(252,105,26)"/><text x="69.0116%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (295,293 samples, 0.30%)</title><rect x="83.5808%" y="181" width="0.2961%" height="15" fill="rgb(220,39,43)"/><text x="83.8308%" y="191.50"></text></g><g><title>late_resolve_crate (2,119,664 samples, 2.13%)</title><rect x="84.0186%" y="165" width="2.1257%" height="15" fill="rgb(229,68,48)"/><text x="84.2686%" y="175.50">l..</text></g><g><title>configure_and_expand (17,916,180 samples, 17.97%)</title><rect x="68.2953%" y="197" width="17.9669%" height="15" fill="rgb(252,8,32)"/><text x="68.5453%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,378,507 samples, 2.39%)</title><rect x="83.8769%" y="181" width="2.3852%" height="15" fill="rgb(223,20,43)"/><text x="84.1269%" y="191.50">re..</text></g><g><title>drop_ast (217,463 samples, 0.22%)</title><rect x="86.2621%" y="197" width="0.2181%" height="15" fill="rgb(229,81,49)"/><text x="86.5121%" y="207.50"></text></g><g><title>early_lint_checks (401,254 samples, 0.40%)</title><rect x="86.4970%" y="197" width="0.4024%" height="15" fill="rgb(236,28,36)"/><text x="86.7470%" y="207.50"></text></g><g><title>free_global_ctxt (3,291,707 samples, 3.30%)</title><rect x="86.8994%" y="197" width="3.3010%" height="15" fill="rgb(249,185,26)"/><text x="87.1494%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (829,280 samples, 0.83%)</title><rect x="90.2004%" y="197" width="0.8316%" height="15" fill="rgb(249,174,33)"/><text x="90.4504%" y="207.50"></text></g><g><title>hir_lowering (2,743,371 samples, 2.75%)</title><rect x="91.0320%" y="197" width="2.7511%" height="15" fill="rgb(233,201,37)"/><text x="91.2820%" y="207.50">hi..</text></g><g><title>parse_crate (4,712,783 samples, 4.73%)</title><rect x="93.8347%" y="197" width="4.7261%" height="15" fill="rgb(221,78,26)"/><text x="94.0847%" y="207.50">parse_..</text></g><g><title>prepare_outputs (268,903 samples, 0.27%)</title><rect x="98.5680%" y="197" width="0.2697%" height="15" fill="rgb(250,127,30)"/><text x="98.8180%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (760,869 samples, 0.76%)</title><rect x="98.8377%" y="197" width="0.7630%" height="15" fill="rgb(230,49,44)"/><text x="99.0877%" y="207.50"></text></g><g><title>setup_global_ctxt (112,831 samples, 0.11%)</title><rect x="99.6114%" y="197" width="0.1132%" height="15" fill="rgb(229,67,23)"/><text x="99.8614%" y="207.50"></text></g><g><title>all (99,717,953 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (99,717,953 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (274,703 samples, 0.28%)</title><rect x="99.7245%" y="197" width="0.2755%" height="15" fill="rgb(238,154,13)"/><text x="99.9745%" y="207.50"></text></g></svg></svg>