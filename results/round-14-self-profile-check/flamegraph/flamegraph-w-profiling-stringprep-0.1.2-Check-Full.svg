<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (202,531 samples, 0.14%)</title><rect x="10.9233%" y="165" width="0.1421%" height="15" fill="rgb(227,0,7)"/><text x="11.1733%" y="175.50"></text></g><g><title>param_env (211,822 samples, 0.15%)</title><rect x="12.5955%" y="133" width="0.1487%" height="15" fill="rgb(217,0,24)"/><text x="12.8455%" y="143.50"></text></g><g><title>item_attrs (234,843 samples, 0.16%)</title><rect x="12.9662%" y="101" width="0.1648%" height="15" fill="rgb(221,193,54)"/><text x="13.2162%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (228,713 samples, 0.16%)</title><rect x="12.9705%" y="85" width="0.1605%" height="15" fill="rgb(248,212,6)"/><text x="13.2205%" y="95.50"></text></g><g><title>codegen_fn_attrs (294,483 samples, 0.21%)</title><rect x="12.9303%" y="117" width="0.2067%" height="15" fill="rgb(208,68,35)"/><text x="13.1803%" y="127.50"></text></g><g><title>adt_drop_tys (156,742 samples, 0.11%)</title><rect x="14.5880%" y="69" width="0.1100%" height="15" fill="rgb(232,128,0)"/><text x="14.8380%" y="79.50"></text></g><g><title>adt_drop_tys (397,805 samples, 0.28%)</title><rect x="14.5643%" y="85" width="0.2792%" height="15" fill="rgb(207,160,47)"/><text x="14.8143%" y="95.50"></text></g><g><title>is_copy_raw (431,605 samples, 0.30%)</title><rect x="14.8438%" y="85" width="0.3029%" height="15" fill="rgb(228,23,34)"/><text x="15.0938%" y="95.50"></text></g><g><title>evaluate_obligation (349,205 samples, 0.25%)</title><rect x="14.9016%" y="69" width="0.2451%" height="15" fill="rgb(218,30,26)"/><text x="15.1516%" y="79.50"></text></g><g><title>needs_drop_raw (919,440 samples, 0.65%)</title><rect x="14.5063%" y="101" width="0.6453%" height="15" fill="rgb(220,122,19)"/><text x="14.7563%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,135,082 samples, 0.80%)</title><rect x="15.2403%" y="85" width="0.7967%" height="15" fill="rgb(250,228,42)"/><text x="15.4903%" y="95.50"></text></g><g><title>evaluate_obligation (446,885 samples, 0.31%)</title><rect x="15.7233%" y="69" width="0.3136%" height="15" fill="rgb(240,193,28)"/><text x="15.9733%" y="79.50"></text></g><g><title>resolve_instance (1,463,016 samples, 1.03%)</title><rect x="15.1516%" y="101" width="1.0268%" height="15" fill="rgb(216,20,37)"/><text x="15.4016%" y="111.50"></text></g><g><title>thir_body (678,860 samples, 0.48%)</title><rect x="16.1946%" y="101" width="0.4765%" height="15" fill="rgb(206,188,39)"/><text x="16.4446%" y="111.50"></text></g><g><title>mir_const (6,446,041 samples, 4.52%)</title><rect x="12.1613%" y="149" width="4.5242%" height="15" fill="rgb(217,207,13)"/><text x="12.4113%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (5,615,565 samples, 3.94%)</title><rect x="12.7441%" y="133" width="3.9413%" height="15" fill="rgb(231,73,38)"/><text x="12.9941%" y="143.50">unsa..</text></g><g><title>mir_built (5,055,887 samples, 3.55%)</title><rect x="13.1370%" y="117" width="3.5485%" height="15" fill="rgb(225,20,46)"/><text x="13.3870%" y="127.50">mir_..</text></g><g><title>thir_body (3,473,068 samples, 2.44%)</title><rect x="18.4519%" y="85" width="2.4376%" height="15" fill="rgb(210,31,41)"/><text x="18.7019%" y="95.50">th..</text></g><g><title>lit_to_const (689,215 samples, 0.48%)</title><rect x="20.4058%" y="69" width="0.4837%" height="15" fill="rgb(221,200,47)"/><text x="20.6558%" y="79.50"></text></g><g><title>mir_const_qualif (5,990,885 samples, 4.20%)</title><rect x="16.6855%" y="149" width="4.2048%" height="15" fill="rgb(226,26,5)"/><text x="16.9355%" y="159.50">mir_c..</text></g><g><title>mir_const (5,852,815 samples, 4.11%)</title><rect x="16.7824%" y="133" width="4.1078%" height="15" fill="rgb(249,33,26)"/><text x="17.0324%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (5,674,143 samples, 3.98%)</title><rect x="16.9078%" y="117" width="3.9824%" height="15" fill="rgb(235,183,28)"/><text x="17.1578%" y="127.50">unsa..</text></g><g><title>mir_built (5,557,631 samples, 3.90%)</title><rect x="16.9896%" y="101" width="3.9007%" height="15" fill="rgb(221,5,38)"/><text x="17.2396%" y="111.50">mir_..</text></g><g><title>mir_promoted (13,959,662 samples, 9.80%)</title><rect x="11.0929%" y="165" width="9.7977%" height="15" fill="rgb(247,18,42)"/><text x="11.3429%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (911,660 samples, 0.64%)</title><rect x="20.8906%" y="165" width="0.6399%" height="15" fill="rgb(241,131,45)"/><text x="21.1406%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (145,310 samples, 0.10%)</title><rect x="21.5305%" y="165" width="0.1020%" height="15" fill="rgb(249,31,29)"/><text x="21.7805%" y="175.50"></text></g><g><title>type_op_normalize_predicate (478,823 samples, 0.34%)</title><rect x="21.6325%" y="165" width="0.3361%" height="15" fill="rgb(225,111,53)"/><text x="21.8825%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,422,574 samples, 1.70%)</title><rect x="21.9714%" y="165" width="1.7003%" height="15" fill="rgb(238,160,17)"/><text x="22.2214%" y="175.50"></text></g><g><title>evaluate_obligation (284,464 samples, 0.20%)</title><rect x="23.4721%" y="149" width="0.1997%" height="15" fill="rgb(214,148,48)"/><text x="23.7221%" y="159.50"></text></g><g><title>MIR_borrow_checking (32,561,022 samples, 22.85%)</title><rect x="0.8233%" y="197" width="22.8532%" height="15" fill="rgb(232,36,49)"/><text x="1.0733%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (32,471,691 samples, 22.79%)</title><rect x="0.8860%" y="181" width="22.7905%" height="15" fill="rgb(209,103,24)"/><text x="1.1360%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (216,972 samples, 0.15%)</title><rect x="23.6765%" y="197" width="0.1523%" height="15" fill="rgb(229,88,8)"/><text x="23.9265%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (176,942 samples, 0.12%)</title><rect x="23.7046%" y="181" width="0.1242%" height="15" fill="rgb(213,181,19)"/><text x="23.9546%" y="191.50"></text></g><g><title>should_inherit_track_caller (150,333 samples, 0.11%)</title><rect x="24.2806%" y="149" width="0.1055%" height="15" fill="rgb(254,191,54)"/><text x="24.5306%" y="159.50"></text></g><g><title>codegen_fn_attrs (272,294 samples, 0.19%)</title><rect x="24.2090%" y="165" width="0.1911%" height="15" fill="rgb(241,83,37)"/><text x="24.4590%" y="175.50"></text></g><g><title>check_mod_attrs (665,048 samples, 0.47%)</title><rect x="23.9334%" y="181" width="0.4668%" height="15" fill="rgb(233,36,39)"/><text x="24.1834%" y="191.50"></text></g><g><title>lint_levels (209,353 samples, 0.15%)</title><rect x="24.5976%" y="165" width="0.1469%" height="15" fill="rgb(226,3,54)"/><text x="24.8476%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (511,976 samples, 0.36%)</title><rect x="24.5115%" y="181" width="0.3593%" height="15" fill="rgb(245,192,40)"/><text x="24.7615%" y="191.50"></text></g><g><title>misc_checking_1 (1,396,016 samples, 0.98%)</title><rect x="23.9183%" y="197" width="0.9798%" height="15" fill="rgb(238,167,29)"/><text x="24.1683%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (445,825 samples, 0.31%)</title><rect x="24.8995%" y="181" width="0.3129%" height="15" fill="rgb(232,182,51)"/><text x="25.1495%" y="191.50"></text></g><g><title>check_mod_liveness (339,893 samples, 0.24%)</title><rect x="24.9738%" y="165" width="0.2386%" height="15" fill="rgb(231,60,39)"/><text x="25.2238%" y="175.50"></text></g><g><title>misc_checking_2 (1,246,154 samples, 0.87%)</title><rect x="24.8981%" y="197" width="0.8746%" height="15" fill="rgb(208,69,12)"/><text x="25.1481%" y="207.50"></text></g><g><title>match_checking (798,369 samples, 0.56%)</title><rect x="25.2124%" y="181" width="0.5603%" height="15" fill="rgb(235,93,37)"/><text x="25.4624%" y="191.50"></text></g><g><title>check_match (773,639 samples, 0.54%)</title><rect x="25.2297%" y="165" width="0.5430%" height="15" fill="rgb(213,116,39)"/><text x="25.4797%" y="175.50"></text></g><g><title>death_checking (238,053 samples, 0.17%)</title><rect x="25.8473%" y="181" width="0.1671%" height="15" fill="rgb(222,207,29)"/><text x="26.0973%" y="191.50"></text></g><g><title>eval_to_const_value_raw (8,422,055 samples, 5.91%)</title><rect x="28.7969%" y="85" width="5.9111%" height="15" fill="rgb(206,96,30)"/><text x="29.0469%" y="95.50">eval_to_..</text></g><g><title>eval_to_const_value_raw (8,419,665 samples, 5.91%)</title><rect x="28.7986%" y="69" width="5.9094%" height="15" fill="rgb(218,138,4)"/><text x="29.0486%" y="79.50">eval_to_..</text></g><g><title>eval_to_allocation_raw (8,413,535 samples, 5.91%)</title><rect x="28.8029%" y="53" width="5.9051%" height="15" fill="rgb(250,191,14)"/><text x="29.0529%" y="63.50">eval_to_..</text></g><g><title>promoted_mir (1,234,114 samples, 0.87%)</title><rect x="33.8418%" y="37" width="0.8662%" height="15" fill="rgb(239,60,40)"/><text x="34.0918%" y="47.50"></text></g><g><title>eval_to_const_value_raw (11,200,075 samples, 7.86%)</title><rect x="26.8519%" y="149" width="7.8609%" height="15" fill="rgb(206,27,48)"/><text x="27.1019%" y="159.50">eval_to_con..</text></g><g><title>eval_to_const_value_raw (11,190,805 samples, 7.85%)</title><rect x="26.8584%" y="133" width="7.8544%" height="15" fill="rgb(225,35,8)"/><text x="27.1084%" y="143.50">eval_to_con..</text></g><g><title>eval_to_allocation_raw (11,186,545 samples, 7.85%)</title><rect x="26.8614%" y="117" width="7.8514%" height="15" fill="rgb(250,213,24)"/><text x="27.1114%" y="127.50">eval_to_all..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,440,495 samples, 5.92%)</title><rect x="28.7887%" y="101" width="5.9240%" height="15" fill="rgb(247,123,22)"/><text x="29.0387%" y="111.50">try_norm..</text></g><g><title>crate_lints (13,697,923 samples, 9.61%)</title><rect x="26.0163%" y="165" width="9.6140%" height="15" fill="rgb(231,138,38)"/><text x="26.2663%" y="175.50">crate_lints</text></g><g><title>type_of (1,181,664 samples, 0.83%)</title><rect x="34.8010%" y="149" width="0.8294%" height="15" fill="rgb(231,145,46)"/><text x="35.0510%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (949,462 samples, 0.67%)</title><rect x="34.9639%" y="133" width="0.6664%" height="15" fill="rgb(251,118,11)"/><text x="35.2139%" y="143.50"></text></g><g><title>lint_checking (14,951,996 samples, 10.49%)</title><rect x="26.0144%" y="181" width="10.4942%" height="15" fill="rgb(217,147,25)"/><text x="26.2644%" y="191.50">lint_checking</text></g><g><title>module_lints (1,251,303 samples, 0.88%)</title><rect x="35.6303%" y="165" width="0.8782%" height="15" fill="rgb(247,81,37)"/><text x="35.8803%" y="175.50"></text></g><g><title>lint_mod (1,245,593 samples, 0.87%)</title><rect x="35.6343%" y="149" width="0.8742%" height="15" fill="rgb(209,12,38)"/><text x="35.8843%" y="159.50"></text></g><g><title>privacy_access_levels (151,032 samples, 0.11%)</title><rect x="36.5086%" y="181" width="0.1060%" height="15" fill="rgb(227,1,9)"/><text x="36.7586%" y="191.50"></text></g><g><title>privacy_checking_modules (769,839 samples, 0.54%)</title><rect x="36.6146%" y="181" width="0.5403%" height="15" fill="rgb(248,47,43)"/><text x="36.8646%" y="191.50"></text></g><g><title>check_mod_privacy (766,819 samples, 0.54%)</title><rect x="36.6167%" y="165" width="0.5382%" height="15" fill="rgb(221,10,30)"/><text x="36.8667%" y="175.50"></text></g><g><title>misc_checking_3 (16,226,691 samples, 11.39%)</title><rect x="25.7727%" y="197" width="11.3888%" height="15" fill="rgb(210,229,1)"/><text x="26.0227%" y="207.50">misc_checking_3</text></g><g><title>impl_parent (1,037,646 samples, 0.73%)</title><rect x="38.2562%" y="133" width="0.7283%" height="15" fill="rgb(222,148,37)"/><text x="38.5062%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (694,038 samples, 0.49%)</title><rect x="38.4974%" y="117" width="0.4871%" height="15" fill="rgb(234,67,33)"/><text x="38.7474%" y="127.50"></text></g><g><title>impl_trait_ref (3,660,629 samples, 2.57%)</title><rect x="38.9845%" y="133" width="2.5692%" height="15" fill="rgb(247,98,35)"/><text x="39.2345%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,301,167 samples, 2.32%)</title><rect x="39.2368%" y="117" width="2.3170%" height="15" fill="rgb(247,138,52)"/><text x="39.4868%" y="127.50">m..</text></g><g><title>coherent_trait (6,372,561 samples, 4.47%)</title><rect x="37.2922%" y="165" width="4.4726%" height="15" fill="rgb(213,79,30)"/><text x="37.5422%" y="175.50">coher..</text></g><g><title>specialization_graph_of (6,362,821 samples, 4.47%)</title><rect x="37.2991%" y="149" width="4.4658%" height="15" fill="rgb(246,177,23)"/><text x="37.5491%" y="159.50">speci..</text></g><g><title>trait_impls_of (299,374 samples, 0.21%)</title><rect x="41.5547%" y="133" width="0.2101%" height="15" fill="rgb(230,62,27)"/><text x="41.8047%" y="143.50"></text></g><g><title>coherence_checking (6,434,002 samples, 4.52%)</title><rect x="37.2756%" y="181" width="4.5158%" height="15" fill="rgb(216,154,8)"/><text x="37.5256%" y="191.50">coher..</text></g><g><title>evaluate_obligation (279,993 samples, 0.20%)</title><rect x="44.2504%" y="133" width="0.1965%" height="15" fill="rgb(244,35,45)"/><text x="44.5004%" y="143.50"></text></g><g><title>associated_item (313,155 samples, 0.22%)</title><rect x="51.4703%" y="101" width="0.2198%" height="15" fill="rgb(251,115,12)"/><text x="51.7203%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (247,595 samples, 0.17%)</title><rect x="51.5163%" y="85" width="0.1738%" height="15" fill="rgb(240,54,50)"/><text x="51.7663%" y="95.50"></text></g><g><title>associated_items (436,096 samples, 0.31%)</title><rect x="51.3964%" y="117" width="0.3061%" height="15" fill="rgb(233,84,52)"/><text x="51.6464%" y="127.50"></text></g><g><title>adt_dtorck_constraint (177,042 samples, 0.12%)</title><rect x="51.8798%" y="69" width="0.1243%" height="15" fill="rgb(207,117,47)"/><text x="52.1298%" y="79.50"></text></g><g><title>adt_dtorck_constraint (229,132 samples, 0.16%)</title><rect x="51.8588%" y="85" width="0.1608%" height="15" fill="rgb(249,43,39)"/><text x="52.1088%" y="95.50"></text></g><g><title>adt_dtorck_constraint (310,203 samples, 0.22%)</title><rect x="51.8173%" y="101" width="0.2177%" height="15" fill="rgb(209,38,44)"/><text x="52.0673%" y="111.50"></text></g><g><title>dropck_outlives (879,520 samples, 0.62%)</title><rect x="51.7184%" y="117" width="0.6173%" height="15" fill="rgb(236,212,23)"/><text x="51.9684%" y="127.50"></text></g><g><title>normalize_projection_ty (428,436 samples, 0.30%)</title><rect x="52.0350%" y="101" width="0.3007%" height="15" fill="rgb(242,79,21)"/><text x="52.2850%" y="111.50"></text></g><g><title>trait_impls_of (439,773 samples, 0.31%)</title><rect x="53.5497%" y="101" width="0.3087%" height="15" fill="rgb(211,96,35)"/><text x="53.7997%" y="111.50"></text></g><g><title>evaluate_obligation (2,172,444 samples, 1.52%)</title><rect x="52.3357%" y="117" width="1.5247%" height="15" fill="rgb(253,215,40)"/><text x="52.5857%" y="127.50"></text></g><g><title>is_copy_raw (450,135 samples, 0.32%)</title><rect x="54.0132%" y="117" width="0.3159%" height="15" fill="rgb(211,81,21)"/><text x="54.2632%" y="127.50"></text></g><g><title>evaluate_obligation (392,575 samples, 0.28%)</title><rect x="54.0536%" y="101" width="0.2755%" height="15" fill="rgb(208,190,38)"/><text x="54.3036%" y="111.50"></text></g><g><title>trait_impls_of (325,614 samples, 0.23%)</title><rect x="54.1006%" y="85" width="0.2285%" height="15" fill="rgb(235,213,38)"/><text x="54.3506%" y="95.50"></text></g><g><title>implementations_of_trait (253,243 samples, 0.18%)</title><rect x="54.1514%" y="69" width="0.1777%" height="15" fill="rgb(237,122,38)"/><text x="54.4014%" y="79.50"></text></g><g><title>evaluate_obligation (170,452 samples, 0.12%)</title><rect x="54.4765%" y="101" width="0.1196%" height="15" fill="rgb(244,218,35)"/><text x="54.7265%" y="111.50"></text></g><g><title>method_autoderef_steps (343,322 samples, 0.24%)</title><rect x="54.3623%" y="117" width="0.2410%" height="15" fill="rgb(240,68,47)"/><text x="54.6123%" y="127.50"></text></g><g><title>predicates_of (171,881 samples, 0.12%)</title><rect x="54.6127%" y="117" width="0.1206%" height="15" fill="rgb(210,16,53)"/><text x="54.8627%" y="127.50"></text></g><g><title>typeck (14,312,749 samples, 10.05%)</title><rect x="44.8306%" y="133" width="10.0455%" height="15" fill="rgb(235,124,12)"/><text x="45.0806%" y="143.50">typeck</text></g><g><title>item_bodies_checking (18,650,598 samples, 13.09%)</title><rect x="41.8013%" y="181" width="13.0901%" height="15" fill="rgb(224,169,11)"/><text x="42.0513%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,647,918 samples, 13.09%)</title><rect x="41.8032%" y="165" width="13.0882%" height="15" fill="rgb(250,166,2)"/><text x="42.0532%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (18,612,718 samples, 13.06%)</title><rect x="41.8279%" y="149" width="13.0635%" height="15" fill="rgb(242,216,29)"/><text x="42.0779%" y="159.50">typeck</text></g><g><title>impl_trait_ref (199,613 samples, 0.14%)</title><rect x="55.1953%" y="101" width="0.1401%" height="15" fill="rgb(230,116,27)"/><text x="55.4453%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (178,503 samples, 0.13%)</title><rect x="55.2102%" y="85" width="0.1253%" height="15" fill="rgb(228,99,48)"/><text x="55.4602%" y="95.50"></text></g><g><title>adt_destructor (408,085 samples, 0.29%)</title><rect x="55.0713%" y="149" width="0.2864%" height="15" fill="rgb(253,11,6)"/><text x="55.3213%" y="159.50"></text></g><g><title>coherent_trait (403,234 samples, 0.28%)</title><rect x="55.0748%" y="133" width="0.2830%" height="15" fill="rgb(247,143,39)"/><text x="55.3248%" y="143.50"></text></g><g><title>specialization_graph_of (401,384 samples, 0.28%)</title><rect x="55.0761%" y="117" width="0.2817%" height="15" fill="rgb(236,97,10)"/><text x="55.3261%" y="127.50"></text></g><g><title>item_types_checking (14,927,507 samples, 10.48%)</title><rect x="54.8914%" y="181" width="10.4770%" height="15" fill="rgb(233,208,19)"/><text x="55.1414%" y="191.50">item_types_chec..</text></g><g><title>check_mod_item_types (14,923,267 samples, 10.47%)</title><rect x="54.8944%" y="165" width="10.4740%" height="15" fill="rgb(216,164,2)"/><text x="55.1444%" y="175.50">check_mod_item_..</text></g><g><title>typeck (14,138,638 samples, 9.92%)</title><rect x="55.4451%" y="149" width="9.9233%" height="15" fill="rgb(220,129,5)"/><text x="55.6951%" y="159.50">typeck</text></g><g><title>fn_sig (153,122 samples, 0.11%)</title><rect x="65.4941%" y="149" width="0.1075%" height="15" fill="rgb(242,17,10)"/><text x="65.7441%" y="159.50"></text></g><g><title>generics_of (224,003 samples, 0.16%)</title><rect x="65.6016%" y="149" width="0.1572%" height="15" fill="rgb(242,107,0)"/><text x="65.8516%" y="159.50"></text></g><g><title>predicates_of (260,803 samples, 0.18%)</title><rect x="65.7771%" y="149" width="0.1830%" height="15" fill="rgb(251,28,31)"/><text x="66.0271%" y="159.50"></text></g><g><title>predicates_defined_on (242,493 samples, 0.17%)</title><rect x="65.7899%" y="133" width="0.1702%" height="15" fill="rgb(233,223,10)"/><text x="66.0399%" y="143.50"></text></g><g><title>inferred_outlives_of (164,522 samples, 0.12%)</title><rect x="65.8446%" y="117" width="0.1155%" height="15" fill="rgb(215,21,27)"/><text x="66.0946%" y="127.50"></text></g><g><title>inferred_outlives_crate (155,892 samples, 0.11%)</title><rect x="65.8507%" y="101" width="0.1094%" height="15" fill="rgb(232,23,21)"/><text x="66.1007%" y="111.50"></text></g><g><title>type_collecting (964,081 samples, 0.68%)</title><rect x="65.3694%" y="181" width="0.6766%" height="15" fill="rgb(244,5,23)"/><text x="65.6194%" y="191.50"></text></g><g><title>collect_mod_item_types (956,451 samples, 0.67%)</title><rect x="65.3748%" y="165" width="0.6713%" height="15" fill="rgb(226,81,46)"/><text x="65.6248%" y="175.50"></text></g><g><title>check_impl_item_well_formed (512,975 samples, 0.36%)</title><rect x="66.1079%" y="165" width="0.3600%" height="15" fill="rgb(247,70,30)"/><text x="66.3579%" y="175.50"></text></g><g><title>adt_sized_constraint (205,872 samples, 0.14%)</title><rect x="67.0902%" y="133" width="0.1445%" height="15" fill="rgb(212,68,19)"/><text x="67.3402%" y="143.50"></text></g><g><title>evaluate_obligation (365,515 samples, 0.26%)</title><rect x="66.9794%" y="149" width="0.2565%" height="15" fill="rgb(240,187,13)"/><text x="67.2294%" y="159.50"></text></g><g><title>param_env (195,781 samples, 0.14%)</title><rect x="67.2828%" y="149" width="0.1374%" height="15" fill="rgb(223,113,26)"/><text x="67.5328%" y="159.50"></text></g><g><title>region_scope_tree (544,527 samples, 0.38%)</title><rect x="67.4666%" y="149" width="0.3822%" height="15" fill="rgb(206,192,2)"/><text x="67.7166%" y="159.50"></text></g><g><title>analysis (95,984,079 samples, 67.37%)</title><rect x="0.5163%" y="213" width="67.3672%" height="15" fill="rgb(241,108,4)"/><text x="0.7663%" y="223.50">analysis</text></g><g><title>type_check_crate (43,772,368 samples, 30.72%)</title><rect x="37.1616%" y="197" width="30.7220%" height="15" fill="rgb(247,173,49)"/><text x="37.4116%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,614,818 samples, 1.84%)</title><rect x="66.0483%" y="181" width="1.8352%" height="15" fill="rgb(224,114,35)"/><text x="66.2983%" y="191.50">w..</text></g><g><title>check_item_well_formed (2,016,941 samples, 1.42%)</title><rect x="66.4680%" y="165" width="1.4156%" height="15" fill="rgb(245,159,27)"/><text x="66.7180%" y="175.50"></text></g><g><title>codegen_crate (388,455 samples, 0.27%)</title><rect x="67.8917%" y="213" width="0.2726%" height="15" fill="rgb(245,172,44)"/><text x="68.1417%" y="223.50"></text></g><g><title>metadata_register_crate (2,133,773 samples, 1.50%)</title><rect x="84.8184%" y="165" width="1.4976%" height="15" fill="rgb(236,23,11)"/><text x="85.0684%" y="175.50"></text></g><g><title>metadata_register_crate (796,237 samples, 0.56%)</title><rect x="85.7572%" y="149" width="0.5588%" height="15" fill="rgb(205,117,38)"/><text x="86.0072%" y="159.50"></text></g><g><title>macro_expand_crate (26,156,851 samples, 18.36%)</title><rect x="68.4991%" y="197" width="18.3584%" height="15" fill="rgb(237,72,25)"/><text x="68.7491%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (26,138,431 samples, 18.35%)</title><rect x="68.5120%" y="181" width="18.3455%" height="15" fill="rgb(244,70,9)"/><text x="68.7620%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (771,469 samples, 0.54%)</title><rect x="86.3160%" y="165" width="0.5415%" height="15" fill="rgb(217,125,39)"/><text x="86.5660%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (221,753 samples, 0.16%)</title><rect x="86.8629%" y="197" width="0.1556%" height="15" fill="rgb(235,36,10)"/><text x="87.1129%" y="207.50"></text></g><g><title>late_resolve_crate (964,091 samples, 0.68%)</title><rect x="87.0519%" y="181" width="0.6767%" height="15" fill="rgb(251,123,47)"/><text x="87.3019%" y="191.50"></text></g><g><title>configure_and_expand (27,986,872 samples, 19.64%)</title><rect x="68.1643%" y="213" width="19.6428%" height="15" fill="rgb(221,13,13)"/><text x="68.4143%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,123,512 samples, 0.79%)</title><rect x="87.0186%" y="197" width="0.7885%" height="15" fill="rgb(238,131,9)"/><text x="87.2686%" y="207.50"></text></g><g><title>drop_ast (237,812 samples, 0.17%)</title><rect x="87.8071%" y="213" width="0.1669%" height="15" fill="rgb(211,50,8)"/><text x="88.0571%" y="223.50"></text></g><g><title>early_lint_checks (2,208,025 samples, 1.55%)</title><rect x="87.9858%" y="213" width="1.5497%" height="15" fill="rgb(245,182,24)"/><text x="88.2358%" y="223.50"></text></g><g><title>free_global_ctxt (3,315,117 samples, 2.33%)</title><rect x="89.5355%" y="213" width="2.3267%" height="15" fill="rgb(242,14,37)"/><text x="89.7855%" y="223.50">f..</text></g><g><title>generate_crate_metadata (4,508,351 samples, 3.16%)</title><rect x="91.8623%" y="213" width="3.1642%" height="15" fill="rgb(246,228,12)"/><text x="92.1123%" y="223.50">gen..</text></g><g><title>hir_lowering (2,621,209 samples, 1.84%)</title><rect x="95.0265%" y="213" width="1.8397%" height="15" fill="rgb(213,55,15)"/><text x="95.2765%" y="223.50">h..</text></g><g><title>parse_crate (3,049,224 samples, 2.14%)</title><rect x="96.9009%" y="213" width="2.1401%" height="15" fill="rgb(209,9,3)"/><text x="97.1509%" y="223.50">p..</text></g><g><title>prepare_outputs (186,442 samples, 0.13%)</title><rect x="99.0477%" y="213" width="0.1309%" height="15" fill="rgb(230,59,30)"/><text x="99.2977%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (660,807 samples, 0.46%)</title><rect x="99.1786%" y="213" width="0.4638%" height="15" fill="rgb(209,121,21)"/><text x="99.4286%" y="223.50"></text></g><g><title>all (142,478,886 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (142,478,886 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (415,524 samples, 0.29%)</title><rect x="99.7084%" y="213" width="0.2916%" height="15" fill="rgb(215,41,42)"/><text x="99.9584%" y="223.50"></text></g></svg></svg>