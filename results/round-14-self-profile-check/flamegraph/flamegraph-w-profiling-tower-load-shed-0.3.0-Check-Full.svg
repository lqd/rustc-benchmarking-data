<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>adt_drop_tys (118,031 samples, 0.12%)</title><rect x="6.1934%" y="69" width="0.1232%" height="15" fill="rgb(227,0,7)"/><text x="6.4434%" y="79.50"></text></g><g><title>needs_drop_raw (845,120 samples, 0.88%)</title><rect x="6.1380%" y="85" width="0.8820%" height="15" fill="rgb(217,0,24)"/><text x="6.3880%" y="95.50"></text></g><g><title>is_copy_raw (673,978 samples, 0.70%)</title><rect x="6.3166%" y="69" width="0.7034%" height="15" fill="rgb(221,193,54)"/><text x="6.5666%" y="79.50"></text></g><g><title>evaluate_obligation (584,525 samples, 0.61%)</title><rect x="6.4100%" y="53" width="0.6100%" height="15" fill="rgb(248,212,6)"/><text x="6.6600%" y="63.50"></text></g><g><title>trait_impls_of (139,902 samples, 0.15%)</title><rect x="6.8740%" y="37" width="0.1460%" height="15" fill="rgb(208,68,35)"/><text x="7.1240%" y="47.50"></text></g><g><title>resolve_instance (112,042 samples, 0.12%)</title><rect x="7.0200%" y="85" width="0.1169%" height="15" fill="rgb(232,128,0)"/><text x="7.2700%" y="95.50"></text></g><g><title>thir_body (242,605 samples, 0.25%)</title><rect x="7.1463%" y="85" width="0.2532%" height="15" fill="rgb(207,160,47)"/><text x="7.3963%" y="95.50"></text></g><g><title>mir_const (2,593,149 samples, 2.71%)</title><rect x="4.7153%" y="133" width="2.7062%" height="15" fill="rgb(228,23,34)"/><text x="4.9653%" y="143.50">mi..</text></g><g><title>unsafety_check_result (2,228,554 samples, 2.33%)</title><rect x="5.0958%" y="117" width="2.3257%" height="15" fill="rgb(218,30,26)"/><text x="5.3458%" y="127.50">u..</text></g><g><title>mir_built (1,991,733 samples, 2.08%)</title><rect x="5.3430%" y="101" width="2.0786%" height="15" fill="rgb(220,122,19)"/><text x="5.5930%" y="111.50">m..</text></g><g><title>mir_promoted (2,933,652 samples, 3.06%)</title><rect x="4.4205%" y="149" width="3.0615%" height="15" fill="rgb(250,228,42)"/><text x="4.6705%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (267,593 samples, 0.28%)</title><rect x="7.4821%" y="149" width="0.2793%" height="15" fill="rgb(240,193,28)"/><text x="7.7321%" y="159.50"></text></g><g><title>type_op_normalize_ty (160,881 samples, 0.17%)</title><rect x="7.8231%" y="149" width="0.1679%" height="15" fill="rgb(216,20,37)"/><text x="8.0731%" y="159.50"></text></g><g><title>normalize_projection_ty (115,901 samples, 0.12%)</title><rect x="7.8701%" y="133" width="0.1210%" height="15" fill="rgb(206,188,39)"/><text x="8.1201%" y="143.50"></text></g><g><title>type_op_prove_predicate (738,718 samples, 0.77%)</title><rect x="7.9910%" y="149" width="0.7709%" height="15" fill="rgb(217,207,13)"/><text x="8.2410%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,768,116 samples, 8.11%)</title><rect x="0.6584%" y="181" width="8.1068%" height="15" fill="rgb(231,73,38)"/><text x="0.9084%" y="191.50">MIR_borrow_..</text></g><g><title>mir_borrowck (7,725,936 samples, 8.06%)</title><rect x="0.7025%" y="165" width="8.0628%" height="15" fill="rgb(225,20,46)"/><text x="0.9525%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (114,131 samples, 0.12%)</title><rect x="8.8631%" y="181" width="0.1191%" height="15" fill="rgb(210,31,41)"/><text x="9.1131%" y="191.50"></text></g><g><title>codegen_fn_attrs (175,162 samples, 0.18%)</title><rect x="9.2250%" y="117" width="0.1828%" height="15" fill="rgb(221,200,47)"/><text x="9.4750%" y="127.50"></text></g><g><title>codegen_fn_attrs (272,253 samples, 0.28%)</title><rect x="9.1270%" y="149" width="0.2841%" height="15" fill="rgb(226,26,5)"/><text x="9.3770%" y="159.50"></text></g><g><title>should_inherit_track_caller (243,812 samples, 0.25%)</title><rect x="9.1567%" y="133" width="0.2544%" height="15" fill="rgb(249,33,26)"/><text x="9.4067%" y="143.50"></text></g><g><title>check_mod_attrs (388,164 samples, 0.41%)</title><rect x="9.0062%" y="165" width="0.4051%" height="15" fill="rgb(235,183,28)"/><text x="9.2562%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (247,183 samples, 0.26%)</title><rect x="9.5073%" y="165" width="0.2580%" height="15" fill="rgb(221,5,38)"/><text x="9.7573%" y="175.50"></text></g><g><title>misc_checking_1 (785,309 samples, 0.82%)</title><rect x="8.9827%" y="181" width="0.8195%" height="15" fill="rgb(247,18,42)"/><text x="9.2327%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (152,292 samples, 0.16%)</title><rect x="9.8035%" y="165" width="0.1589%" height="15" fill="rgb(241,131,45)"/><text x="10.0535%" y="175.50"></text></g><g><title>check_mod_liveness (115,852 samples, 0.12%)</title><rect x="9.8415%" y="149" width="0.1209%" height="15" fill="rgb(249,31,29)"/><text x="10.0915%" y="159.50"></text></g><g><title>misc_checking_2 (344,874 samples, 0.36%)</title><rect x="9.8022%" y="181" width="0.3599%" height="15" fill="rgb(225,111,53)"/><text x="10.0522%" y="191.50"></text></g><g><title>match_checking (191,362 samples, 0.20%)</title><rect x="9.9624%" y="165" width="0.1997%" height="15" fill="rgb(238,160,17)"/><text x="10.2124%" y="175.50"></text></g><g><title>check_match (178,432 samples, 0.19%)</title><rect x="9.9759%" y="149" width="0.1862%" height="15" fill="rgb(214,148,48)"/><text x="10.2259%" y="159.50"></text></g><g><title>check_private_in_public (131,642 samples, 0.14%)</title><rect x="10.1699%" y="165" width="0.1374%" height="15" fill="rgb(232,36,49)"/><text x="10.4199%" y="175.50"></text></g><g><title>death_checking (254,403 samples, 0.27%)</title><rect x="10.3073%" y="165" width="0.2655%" height="15" fill="rgb(209,103,24)"/><text x="10.5573%" y="175.50"></text></g><g><title>eval_to_const_value_raw (129,772 samples, 0.14%)</title><rect x="11.1600%" y="133" width="0.1354%" height="15" fill="rgb(229,88,8)"/><text x="11.4100%" y="143.50"></text></g><g><title>eval_to_const_value_raw (122,332 samples, 0.13%)</title><rect x="11.1678%" y="117" width="0.1277%" height="15" fill="rgb(213,181,19)"/><text x="11.4178%" y="127.50"></text></g><g><title>eval_to_allocation_raw (117,302 samples, 0.12%)</title><rect x="11.1730%" y="101" width="0.1224%" height="15" fill="rgb(254,191,54)"/><text x="11.4230%" y="111.50"></text></g><g><title>param_env (151,153 samples, 0.16%)</title><rect x="11.2954%" y="133" width="0.1577%" height="15" fill="rgb(241,83,37)"/><text x="11.5454%" y="143.50"></text></g><g><title>crate_lints (1,871,420 samples, 1.95%)</title><rect x="10.5742%" y="149" width="1.9530%" height="15" fill="rgb(233,36,39)"/><text x="10.8242%" y="159.50">c..</text></g><g><title>type_of (1,026,262 samples, 1.07%)</title><rect x="11.4562%" y="133" width="1.0710%" height="15" fill="rgb(226,3,54)"/><text x="11.7062%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (790,601 samples, 0.83%)</title><rect x="11.7022%" y="117" width="0.8251%" height="15" fill="rgb(245,192,40)"/><text x="11.9522%" y="127.50"></text></g><g><title>lint_checking (2,097,123 samples, 2.19%)</title><rect x="10.5728%" y="165" width="2.1885%" height="15" fill="rgb(238,167,29)"/><text x="10.8228%" y="175.50">l..</text></g><g><title>module_lints (224,323 samples, 0.23%)</title><rect x="12.5272%" y="149" width="0.2341%" height="15" fill="rgb(232,182,51)"/><text x="12.7772%" y="159.50"></text></g><g><title>lint_mod (219,743 samples, 0.23%)</title><rect x="12.5320%" y="133" width="0.2293%" height="15" fill="rgb(231,60,39)"/><text x="12.7820%" y="143.50"></text></g><g><title>privacy_access_levels (125,771 samples, 0.13%)</title><rect x="12.7613%" y="165" width="0.1313%" height="15" fill="rgb(208,69,12)"/><text x="13.0113%" y="175.50"></text></g><g><title>privacy_checking_modules (378,854 samples, 0.40%)</title><rect x="12.8926%" y="165" width="0.3954%" height="15" fill="rgb(235,93,37)"/><text x="13.1426%" y="175.50"></text></g><g><title>check_mod_privacy (375,344 samples, 0.39%)</title><rect x="12.8962%" y="149" width="0.3917%" height="15" fill="rgb(213,116,39)"/><text x="13.1462%" y="159.50"></text></g><g><title>misc_checking_3 (3,003,313 samples, 3.13%)</title><rect x="10.1621%" y="181" width="3.1342%" height="15" fill="rgb(222,207,29)"/><text x="10.4121%" y="191.50">mis..</text></g><g><title>impl_parent (1,655,093 samples, 1.73%)</title><rect x="15.7055%" y="117" width="1.7272%" height="15" fill="rgb(206,96,30)"/><text x="15.9555%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (906,073 samples, 0.95%)</title><rect x="16.4872%" y="101" width="0.9456%" height="15" fill="rgb(218,138,4)"/><text x="16.7372%" y="111.50"></text></g><g><title>impl_trait_ref (3,918,529 samples, 4.09%)</title><rect x="17.4327%" y="117" width="4.0894%" height="15" fill="rgb(250,191,14)"/><text x="17.6827%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,392,206 samples, 3.54%)</title><rect x="17.9820%" y="101" width="3.5401%" height="15" fill="rgb(239,60,40)"/><text x="18.2320%" y="111.50">meta..</text></g><g><title>coherent_trait (8,421,994 samples, 8.79%)</title><rect x="13.3485%" y="149" width="8.7892%" height="15" fill="rgb(206,27,48)"/><text x="13.5985%" y="159.50">coherent_tra..</text></g><g><title>specialization_graph_of (8,406,084 samples, 8.77%)</title><rect x="13.3652%" y="133" width="8.7726%" height="15" fill="rgb(225,35,8)"/><text x="13.6152%" y="143.50">specializati..</text></g><g><title>trait_impls_of (552,745 samples, 0.58%)</title><rect x="21.5609%" y="117" width="0.5768%" height="15" fill="rgb(250,213,24)"/><text x="21.8109%" y="127.50"></text></g><g><title>implementations_of_trait (164,301 samples, 0.17%)</title><rect x="21.9662%" y="101" width="0.1715%" height="15" fill="rgb(247,123,22)"/><text x="22.2162%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (111,170 samples, 0.12%)</title><rect x="22.0217%" y="85" width="0.1160%" height="15" fill="rgb(231,138,38)"/><text x="22.2717%" y="95.50"></text></g><g><title>coherence_checking (8,480,584 samples, 8.85%)</title><rect x="13.3329%" y="165" width="8.8503%" height="15" fill="rgb(231,145,46)"/><text x="13.5829%" y="175.50">coherence_che..</text></g><g><title>associated_items (147,482 samples, 0.15%)</title><rect x="28.5004%" y="117" width="0.1539%" height="15" fill="rgb(251,118,11)"/><text x="28.7504%" y="127.50"></text></g><g><title>adt_dtorck_constraint (116,421 samples, 0.12%)</title><rect x="28.9060%" y="101" width="0.1215%" height="15" fill="rgb(217,147,25)"/><text x="29.1560%" y="111.50"></text></g><g><title>dropck_outlives (353,904 samples, 0.37%)</title><rect x="28.6909%" y="117" width="0.3693%" height="15" fill="rgb(247,81,37)"/><text x="28.9409%" y="127.50"></text></g><g><title>evaluate_obligation (361,117 samples, 0.38%)</title><rect x="29.0602%" y="117" width="0.3769%" height="15" fill="rgb(209,12,38)"/><text x="29.3102%" y="127.50"></text></g><g><title>trait_impls_of (125,522 samples, 0.13%)</title><rect x="29.3061%" y="101" width="0.1310%" height="15" fill="rgb(227,1,9)"/><text x="29.5561%" y="111.50"></text></g><g><title>method_autoderef_steps (510,875 samples, 0.53%)</title><rect x="29.6891%" y="117" width="0.5331%" height="15" fill="rgb(248,47,43)"/><text x="29.9391%" y="127.50"></text></g><g><title>evaluate_obligation (171,913 samples, 0.18%)</title><rect x="30.0429%" y="101" width="0.1794%" height="15" fill="rgb(221,10,30)"/><text x="30.2929%" y="111.50"></text></g><g><title>predicates_of (162,851 samples, 0.17%)</title><rect x="30.2568%" y="117" width="0.1700%" height="15" fill="rgb(210,229,1)"/><text x="30.5068%" y="127.50"></text></g><g><title>predicates_defined_on (132,090 samples, 0.14%)</title><rect x="30.2889%" y="101" width="0.1378%" height="15" fill="rgb(222,148,37)"/><text x="30.5389%" y="111.50"></text></g><g><title>item_bodies_checking (7,932,099 samples, 8.28%)</title><rect x="22.2148%" y="165" width="8.2779%" height="15" fill="rgb(234,67,33)"/><text x="22.4648%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (7,930,199 samples, 8.28%)</title><rect x="22.2167%" y="149" width="8.2759%" height="15" fill="rgb(247,98,35)"/><text x="22.4667%" y="159.50">typeck_item_..</text></g><g><title>typeck (7,899,139 samples, 8.24%)</title><rect x="22.2492%" y="133" width="8.2435%" height="15" fill="rgb(247,138,52)"/><text x="22.4992%" y="143.50">typeck</text></g><g><title>adt_destructor (306,143 samples, 0.32%)</title><rect x="31.4206%" y="133" width="0.3195%" height="15" fill="rgb(213,79,30)"/><text x="31.6706%" y="143.50"></text></g><g><title>coherent_trait (300,303 samples, 0.31%)</title><rect x="31.4267%" y="117" width="0.3134%" height="15" fill="rgb(246,177,23)"/><text x="31.6767%" y="127.50"></text></g><g><title>specialization_graph_of (298,593 samples, 0.31%)</title><rect x="31.4284%" y="101" width="0.3116%" height="15" fill="rgb(230,62,27)"/><text x="31.6784%" y="111.50"></text></g><g><title>impl_trait_ref (153,831 samples, 0.16%)</title><rect x="31.5795%" y="85" width="0.1605%" height="15" fill="rgb(216,154,8)"/><text x="31.8295%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (133,921 samples, 0.14%)</title><rect x="31.6003%" y="69" width="0.1398%" height="15" fill="rgb(244,35,45)"/><text x="31.8503%" y="79.50"></text></g><g><title>item_types_checking (1,380,485 samples, 1.44%)</title><rect x="30.4927%" y="165" width="1.4407%" height="15" fill="rgb(251,115,12)"/><text x="30.7427%" y="175.50"></text></g><g><title>check_mod_item_types (1,375,185 samples, 1.44%)</title><rect x="30.4982%" y="149" width="1.4351%" height="15" fill="rgb(240,54,50)"/><text x="30.7482%" y="159.50"></text></g><g><title>typeck (97,761 samples, 0.10%)</title><rect x="31.8313%" y="133" width="0.1020%" height="15" fill="rgb(233,84,52)"/><text x="32.0813%" y="143.50"></text></g><g><title>fn_sig (189,852 samples, 0.20%)</title><rect x="32.1291%" y="133" width="0.1981%" height="15" fill="rgb(207,117,47)"/><text x="32.3791%" y="143.50"></text></g><g><title>generics_of (225,662 samples, 0.24%)</title><rect x="32.3272%" y="133" width="0.2355%" height="15" fill="rgb(249,43,39)"/><text x="32.5772%" y="143.50"></text></g><g><title>late_bound_vars_map (212,665 samples, 0.22%)</title><rect x="32.9251%" y="85" width="0.2219%" height="15" fill="rgb(209,38,44)"/><text x="33.1751%" y="95.50"></text></g><g><title>resolve_lifetimes (206,445 samples, 0.22%)</title><rect x="32.9316%" y="69" width="0.2154%" height="15" fill="rgb(236,212,23)"/><text x="33.1816%" y="79.50"></text></g><g><title>lint_levels (107,111 samples, 0.11%)</title><rect x="33.0353%" y="53" width="0.1118%" height="15" fill="rgb(242,79,21)"/><text x="33.2853%" y="63.50"></text></g><g><title>type_of (163,362 samples, 0.17%)</title><rect x="33.1606%" y="85" width="0.1705%" height="15" fill="rgb(211,96,35)"/><text x="33.4106%" y="95.50"></text></g><g><title>explicit_predicates_of (625,198 samples, 0.65%)</title><rect x="32.7183%" y="101" width="0.6525%" height="15" fill="rgb(253,215,40)"/><text x="32.9683%" y="111.50"></text></g><g><title>predicates_of (1,020,332 samples, 1.06%)</title><rect x="32.6104%" y="133" width="1.0648%" height="15" fill="rgb(211,81,21)"/><text x="32.8604%" y="143.50"></text></g><g><title>predicates_defined_on (981,431 samples, 1.02%)</title><rect x="32.6510%" y="117" width="1.0242%" height="15" fill="rgb(208,190,38)"/><text x="32.9010%" y="127.50"></text></g><g><title>inferred_outlives_of (291,693 samples, 0.30%)</title><rect x="33.3708%" y="101" width="0.3044%" height="15" fill="rgb(235,213,38)"/><text x="33.6208%" y="111.50"></text></g><g><title>inferred_outlives_crate (273,453 samples, 0.29%)</title><rect x="33.3898%" y="85" width="0.2854%" height="15" fill="rgb(237,122,38)"/><text x="33.6398%" y="95.50"></text></g><g><title>type_of (154,422 samples, 0.16%)</title><rect x="33.5141%" y="69" width="0.1612%" height="15" fill="rgb(244,218,35)"/><text x="33.7641%" y="79.50"></text></g><g><title>type_collecting (1,782,470 samples, 1.86%)</title><rect x="31.9353%" y="165" width="1.8602%" height="15" fill="rgb(240,68,47)"/><text x="32.1853%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,773,050 samples, 1.85%)</title><rect x="31.9451%" y="149" width="1.8503%" height="15" fill="rgb(210,16,53)"/><text x="32.1951%" y="159.50">c..</text></g><g><title>type_of (108,232 samples, 0.11%)</title><rect x="33.6825%" y="133" width="0.1130%" height="15" fill="rgb(235,124,12)"/><text x="33.9325%" y="143.50"></text></g><g><title>evaluate_obligation (594,308 samples, 0.62%)</title><rect x="35.3135%" y="133" width="0.6202%" height="15" fill="rgb(224,169,11)"/><text x="35.5635%" y="143.50"></text></g><g><title>implied_outlives_bounds (195,754 samples, 0.20%)</title><rect x="35.9610%" y="133" width="0.2043%" height="15" fill="rgb(250,166,2)"/><text x="36.2110%" y="143.50"></text></g><g><title>param_env (170,061 samples, 0.18%)</title><rect x="36.1733%" y="133" width="0.1775%" height="15" fill="rgb(242,216,29)"/><text x="36.4233%" y="143.50"></text></g><g><title>region_scope_tree (105,470 samples, 0.11%)</title><rect x="36.3812%" y="133" width="0.1101%" height="15" fill="rgb(230,116,27)"/><text x="36.6312%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,469,096 samples, 2.58%)</title><rect x="33.9182%" y="149" width="2.5767%" height="15" fill="rgb(228,99,48)"/><text x="34.1682%" y="159.50">ch..</text></g><g><title>evaluate_obligation (144,502 samples, 0.15%)</title><rect x="38.1012%" y="133" width="0.1508%" height="15" fill="rgb(253,11,6)"/><text x="38.3512%" y="143.50"></text></g><g><title>implied_outlives_bounds (111,281 samples, 0.12%)</title><rect x="38.3187%" y="133" width="0.1161%" height="15" fill="rgb(247,143,39)"/><text x="38.5687%" y="143.50"></text></g><g><title>evaluate_obligation (120,942 samples, 0.13%)</title><rect x="38.5656%" y="117" width="0.1262%" height="15" fill="rgb(236,97,10)"/><text x="38.8156%" y="127.50"></text></g><g><title>object_safety_violations (431,665 samples, 0.45%)</title><rect x="38.4416%" y="133" width="0.4505%" height="15" fill="rgb(233,208,19)"/><text x="38.6916%" y="143.50"></text></g><g><title>param_env (273,754 samples, 0.29%)</title><rect x="38.8926%" y="133" width="0.2857%" height="15" fill="rgb(216,164,2)"/><text x="39.1426%" y="143.50"></text></g><g><title>predicates_of (113,471 samples, 0.12%)</title><rect x="39.1783%" y="133" width="0.1184%" height="15" fill="rgb(220,129,5)"/><text x="39.4283%" y="143.50"></text></g><g><title>analysis (37,358,635 samples, 38.99%)</title><rect x="0.5070%" y="197" width="38.9873%" height="15" fill="rgb(242,17,10)"/><text x="0.7570%" y="207.50">analysis</text></g><g><title>type_check_crate (25,103,579 samples, 26.20%)</title><rect x="13.2964%" y="181" width="26.1980%" height="15" fill="rgb(242,107,0)"/><text x="13.5464%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,458,981 samples, 5.70%)</title><rect x="33.7974%" y="165" width="5.6970%" height="15" fill="rgb(251,28,31)"/><text x="34.0474%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (2,874,073 samples, 3.00%)</title><rect x="36.4950%" y="149" width="2.9994%" height="15" fill="rgb(233,223,10)"/><text x="36.7450%" y="159.50">che..</text></g><g><title>is_profiler_runtime (211,032 samples, 0.22%)</title><rect x="39.8159%" y="181" width="0.2202%" height="15" fill="rgb(215,21,27)"/><text x="40.0659%" y="191.50"></text></g><g><title>codegen_crate (560,727 samples, 0.59%)</title><rect x="39.5047%" y="197" width="0.5852%" height="15" fill="rgb(232,23,21)"/><text x="39.7547%" y="207.50"></text></g><g><title>AST_validation (116,781 samples, 0.12%)</title><rect x="40.3119%" y="181" width="0.1219%" height="15" fill="rgb(244,5,23)"/><text x="40.5619%" y="191.50"></text></g><g><title>metadata_load_macro (535,176 samples, 0.56%)</title><rect x="77.8337%" y="149" width="0.5585%" height="15" fill="rgb(226,81,46)"/><text x="78.0837%" y="159.50"></text></g><g><title>metadata_register_crate (11,563,207 samples, 12.07%)</title><rect x="78.3922%" y="149" width="12.0673%" height="15" fill="rgb(247,70,30)"/><text x="78.6422%" y="159.50">metadata_register_..</text></g><g><title>metadata_register_crate (8,734,816 samples, 9.12%)</title><rect x="81.3439%" y="133" width="9.1156%" height="15" fill="rgb(212,68,19)"/><text x="81.5939%" y="143.50">metadata_regi..</text></g><g><title>macro_expand_crate (47,909,082 samples, 50.00%)</title><rect x="40.5473%" y="181" width="49.9977%" height="15" fill="rgb(240,187,13)"/><text x="40.7973%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (47,890,771 samples, 49.98%)</title><rect x="40.5665%" y="165" width="49.9786%" height="15" fill="rgb(223,113,26)"/><text x="40.8165%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (130,621 samples, 0.14%)</title><rect x="90.5478%" y="181" width="0.1363%" height="15" fill="rgb(206,192,2)"/><text x="90.7978%" y="191.50"></text></g><g><title>late_resolve_crate (943,310 samples, 0.98%)</title><rect x="90.7896%" y="165" width="0.9844%" height="15" fill="rgb(241,108,4)"/><text x="91.0396%" y="175.50"></text></g><g><title>configure_and_expand (49,585,340 samples, 51.75%)</title><rect x="40.0898%" y="197" width="51.7471%" height="15" fill="rgb(247,173,49)"/><text x="40.3398%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,104,663 samples, 1.15%)</title><rect x="90.6841%" y="181" width="1.1528%" height="15" fill="rgb(224,114,35)"/><text x="90.9341%" y="191.50"></text></g><g><title>early_lint_checks (241,552 samples, 0.25%)</title><rect x="91.9369%" y="197" width="0.2521%" height="15" fill="rgb(245,159,27)"/><text x="92.1869%" y="207.50"></text></g><g><title>free_global_ctxt (2,899,243 samples, 3.03%)</title><rect x="92.1890%" y="197" width="3.0256%" height="15" fill="rgb(245,172,44)"/><text x="92.4390%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (1,029,121 samples, 1.07%)</title><rect x="95.2147%" y="197" width="1.0740%" height="15" fill="rgb(236,23,11)"/><text x="95.4647%" y="207.50"></text></g><g><title>hir_lowering (1,285,625 samples, 1.34%)</title><rect x="96.2886%" y="197" width="1.3417%" height="15" fill="rgb(205,117,38)"/><text x="96.5386%" y="207.50"></text></g><g><title>parse_crate (1,016,081 samples, 1.06%)</title><rect x="97.6755%" y="197" width="1.0604%" height="15" fill="rgb(237,72,25)"/><text x="97.9255%" y="207.50"></text></g><g><title>prepare_outputs (218,872 samples, 0.23%)</title><rect x="98.7460%" y="197" width="0.2284%" height="15" fill="rgb(244,70,9)"/><text x="98.9960%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (551,736 samples, 0.58%)</title><rect x="98.9744%" y="197" width="0.5758%" height="15" fill="rgb(217,125,39)"/><text x="99.2244%" y="207.50"></text></g><g><title>all (95,822,494 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (95,822,494 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (365,244 samples, 0.38%)</title><rect x="99.6188%" y="197" width="0.3812%" height="15" fill="rgb(221,13,13)"/><text x="99.8688%" y="207.50"></text></g></svg></svg>