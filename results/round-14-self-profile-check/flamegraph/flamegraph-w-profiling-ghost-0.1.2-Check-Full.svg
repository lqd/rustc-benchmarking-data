<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (219,734 samples, 0.10%)</title><rect x="11.1067%" y="165" width="0.1020%" height="15" fill="rgb(227,0,7)"/><text x="11.3567%" y="175.50"></text></g><g><title>item_attrs (219,572 samples, 0.10%)</title><rect x="11.4982%" y="133" width="0.1019%" height="15" fill="rgb(217,0,24)"/><text x="11.7482%" y="143.50"></text></g><g><title>codegen_fn_attrs (317,842 samples, 0.15%)</title><rect x="11.4633%" y="149" width="0.1475%" height="15" fill="rgb(221,193,54)"/><text x="11.7133%" y="159.50"></text></g><g><title>adt_drop_tys (240,531 samples, 0.11%)</title><rect x="14.0717%" y="101" width="0.1116%" height="15" fill="rgb(248,212,6)"/><text x="14.3217%" y="111.50"></text></g><g><title>adt_drop_tys (548,224 samples, 0.25%)</title><rect x="14.0481%" y="117" width="0.2544%" height="15" fill="rgb(208,68,35)"/><text x="14.2981%" y="127.50"></text></g><g><title>needs_drop_raw (1,674,257 samples, 0.78%)</title><rect x="13.9858%" y="133" width="0.7770%" height="15" fill="rgb(232,128,0)"/><text x="14.2358%" y="143.50"></text></g><g><title>is_copy_raw (991,703 samples, 0.46%)</title><rect x="14.3025%" y="117" width="0.4603%" height="15" fill="rgb(207,160,47)"/><text x="14.5525%" y="127.50"></text></g><g><title>evaluate_obligation (860,921 samples, 0.40%)</title><rect x="14.3632%" y="101" width="0.3996%" height="15" fill="rgb(228,23,34)"/><text x="14.6132%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (289,764 samples, 0.13%)</title><rect x="14.8206%" y="117" width="0.1345%" height="15" fill="rgb(218,30,26)"/><text x="15.0706%" y="127.50"></text></g><g><title>impl_parent (340,370 samples, 0.16%)</title><rect x="15.2102%" y="101" width="0.1580%" height="15" fill="rgb(220,122,19)"/><text x="15.4602%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (220,780 samples, 0.10%)</title><rect x="15.2657%" y="85" width="0.1025%" height="15" fill="rgb(250,228,42)"/><text x="15.5157%" y="95.50"></text></g><g><title>specialization_graph_of (1,506,166 samples, 0.70%)</title><rect x="14.9861%" y="117" width="0.6990%" height="15" fill="rgb(240,193,28)"/><text x="15.2361%" y="127.50"></text></g><g><title>impl_trait_ref (683,030 samples, 0.32%)</title><rect x="15.3681%" y="101" width="0.3170%" height="15" fill="rgb(216,20,37)"/><text x="15.6181%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (578,559 samples, 0.27%)</title><rect x="15.4166%" y="85" width="0.2685%" height="15" fill="rgb(206,188,39)"/><text x="15.6666%" y="95.50"></text></g><g><title>resolve_instance (2,039,361 samples, 0.95%)</title><rect x="14.7628%" y="133" width="0.9465%" height="15" fill="rgb(217,207,13)"/><text x="15.0128%" y="143.50"></text></g><g><title>thir_body (1,983,543 samples, 0.92%)</title><rect x="15.7158%" y="133" width="0.9206%" height="15" fill="rgb(231,73,38)"/><text x="15.9658%" y="143.50"></text></g><g><title>mir_const (12,835,464 samples, 5.96%)</title><rect x="10.6824%" y="181" width="5.9571%" height="15" fill="rgb(225,20,46)"/><text x="10.9324%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (11,701,611 samples, 5.43%)</title><rect x="11.2087%" y="165" width="5.4308%" height="15" fill="rgb(210,31,41)"/><text x="11.4587%" y="175.50">unsafet..</text></g><g><title>mir_built (10,835,061 samples, 5.03%)</title><rect x="11.6108%" y="149" width="5.0287%" height="15" fill="rgb(221,200,47)"/><text x="11.8608%" y="159.50">mir_bu..</text></g><g><title>mir_promoted (14,306,778 samples, 6.64%)</title><rect x="10.2370%" y="197" width="6.6399%" height="15" fill="rgb(226,26,5)"/><text x="10.4870%" y="207.50">mir_promo..</text></g><g><title>mir_const_qualif (511,555 samples, 0.24%)</title><rect x="16.6395%" y="181" width="0.2374%" height="15" fill="rgb(249,33,26)"/><text x="16.8895%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (260,395 samples, 0.12%)</title><rect x="16.8800%" y="197" width="0.1209%" height="15" fill="rgb(235,183,28)"/><text x="17.1300%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (671,045 samples, 0.31%)</title><rect x="17.0009%" y="197" width="0.3114%" height="15" fill="rgb(221,5,38)"/><text x="17.2509%" y="207.50"></text></g><g><title>normalize_projection_ty (458,314 samples, 0.21%)</title><rect x="17.0996%" y="181" width="0.2127%" height="15" fill="rgb(247,18,42)"/><text x="17.3496%" y="191.50"></text></g><g><title>type_op_normalize_predicate (335,752 samples, 0.16%)</title><rect x="17.3123%" y="197" width="0.1558%" height="15" fill="rgb(241,131,45)"/><text x="17.5623%" y="207.50"></text></g><g><title>normalize_projection_ty (236,191 samples, 0.11%)</title><rect x="17.3585%" y="181" width="0.1096%" height="15" fill="rgb(249,31,29)"/><text x="17.6085%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,862,427 samples, 0.86%)</title><rect x="17.4681%" y="197" width="0.8644%" height="15" fill="rgb(225,111,53)"/><text x="17.7181%" y="207.50"></text></g><g><title>MIR_borrow_checking (38,264,126 samples, 17.76%)</title><rect x="0.5777%" y="229" width="17.7587%" height="15" fill="rgb(238,160,17)"/><text x="0.8277%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (38,215,596 samples, 17.74%)</title><rect x="0.6003%" y="213" width="17.7362%" height="15" fill="rgb(214,148,48)"/><text x="0.8503%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (216,971 samples, 0.10%)</title><rect x="18.6281%" y="197" width="0.1007%" height="15" fill="rgb(232,36,49)"/><text x="18.8781%" y="207.50"></text></g><g><title>check_mod_attrs (513,935 samples, 0.24%)</title><rect x="18.4904%" y="213" width="0.2385%" height="15" fill="rgb(209,103,24)"/><text x="18.7404%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (321,373 samples, 0.15%)</title><rect x="18.8119%" y="213" width="0.1492%" height="15" fill="rgb(229,88,8)"/><text x="19.0619%" y="223.50"></text></g><g><title>misc_checking_1 (1,088,032 samples, 0.50%)</title><rect x="18.4793%" y="229" width="0.5050%" height="15" fill="rgb(213,181,19)"/><text x="18.7293%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,055,641 samples, 0.49%)</title><rect x="18.9850%" y="213" width="0.4899%" height="15" fill="rgb(254,191,54)"/><text x="19.2350%" y="223.50"></text></g><g><title>check_mod_liveness (911,280 samples, 0.42%)</title><rect x="19.0520%" y="197" width="0.4229%" height="15" fill="rgb(241,83,37)"/><text x="19.3020%" y="207.50"></text></g><g><title>type_uninhabited_from (395,863 samples, 0.18%)</title><rect x="19.2912%" y="181" width="0.1837%" height="15" fill="rgb(233,36,39)"/><text x="19.5412%" y="191.50"></text></g><g><title>type_uninhabited_from (362,013 samples, 0.17%)</title><rect x="19.3069%" y="165" width="0.1680%" height="15" fill="rgb(226,3,54)"/><text x="19.5569%" y="175.50"></text></g><g><title>type_uninhabited_from (333,073 samples, 0.15%)</title><rect x="19.3203%" y="149" width="0.1546%" height="15" fill="rgb(245,192,40)"/><text x="19.5703%" y="159.50"></text></g><g><title>misc_checking_2 (1,688,068 samples, 0.78%)</title><rect x="18.9843%" y="229" width="0.7834%" height="15" fill="rgb(238,167,29)"/><text x="19.2343%" y="239.50"></text></g><g><title>match_checking (630,957 samples, 0.29%)</title><rect x="19.4749%" y="213" width="0.2928%" height="15" fill="rgb(232,182,51)"/><text x="19.7249%" y="223.50"></text></g><g><title>check_match (615,467 samples, 0.29%)</title><rect x="19.4821%" y="197" width="0.2856%" height="15" fill="rgb(231,60,39)"/><text x="19.7321%" y="207.50"></text></g><g><title>death_checking (342,934 samples, 0.16%)</title><rect x="19.8508%" y="213" width="0.1592%" height="15" fill="rgb(208,69,12)"/><text x="20.1008%" y="223.50"></text></g><g><title>eval_to_const_value_raw (394,514 samples, 0.18%)</title><rect x="20.3239%" y="133" width="0.1831%" height="15" fill="rgb(235,93,37)"/><text x="20.5739%" y="143.50"></text></g><g><title>eval_to_const_value_raw (393,804 samples, 0.18%)</title><rect x="20.3243%" y="117" width="0.1828%" height="15" fill="rgb(213,116,39)"/><text x="20.5743%" y="127.50"></text></g><g><title>eval_to_allocation_raw (392,074 samples, 0.18%)</title><rect x="20.3251%" y="101" width="0.1820%" height="15" fill="rgb(222,207,29)"/><text x="20.5751%" y="111.50"></text></g><g><title>eval_to_allocation_raw (441,415 samples, 0.20%)</title><rect x="20.3032%" y="181" width="0.2049%" height="15" fill="rgb(206,96,30)"/><text x="20.5532%" y="191.50"></text></g><g><title>eval_to_allocation_raw (440,795 samples, 0.20%)</title><rect x="20.3035%" y="165" width="0.2046%" height="15" fill="rgb(218,138,4)"/><text x="20.5535%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (405,114 samples, 0.19%)</title><rect x="20.3200%" y="149" width="0.1880%" height="15" fill="rgb(250,191,14)"/><text x="20.5700%" y="159.50"></text></g><g><title>param_env (375,184 samples, 0.17%)</title><rect x="20.5696%" y="181" width="0.1741%" height="15" fill="rgb(239,60,40)"/><text x="20.8196%" y="191.50"></text></g><g><title>impl_parent (778,576 samples, 0.36%)</title><rect x="21.3371%" y="149" width="0.3613%" height="15" fill="rgb(206,27,48)"/><text x="21.5871%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (515,185 samples, 0.24%)</title><rect x="21.4594%" y="133" width="0.2391%" height="15" fill="rgb(225,35,8)"/><text x="21.7094%" y="143.50"></text></g><g><title>specialization_graph_of (4,542,811 samples, 2.11%)</title><rect x="20.7745%" y="165" width="2.1084%" height="15" fill="rgb(250,213,24)"/><text x="21.0245%" y="175.50">s..</text></g><g><title>impl_trait_ref (2,551,949 samples, 1.18%)</title><rect x="21.6985%" y="149" width="1.1844%" height="15" fill="rgb(247,123,22)"/><text x="21.9485%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,276,058 samples, 1.06%)</title><rect x="21.8265%" y="133" width="1.0563%" height="15" fill="rgb(231,138,38)"/><text x="22.0765%" y="143.50"></text></g><g><title>resolve_instance (4,611,702 samples, 2.14%)</title><rect x="20.7437%" y="181" width="2.1403%" height="15" fill="rgb(231,145,46)"/><text x="20.9937%" y="191.50">r..</text></g><g><title>crate_lints (6,204,299 samples, 2.88%)</title><rect x="20.0113%" y="197" width="2.8795%" height="15" fill="rgb(251,118,11)"/><text x="20.2613%" y="207.50">cr..</text></g><g><title>lint_checking (7,066,079 samples, 3.28%)</title><rect x="20.0100%" y="213" width="3.2794%" height="15" fill="rgb(217,147,25)"/><text x="20.2600%" y="223.50">lin..</text></g><g><title>module_lints (858,930 samples, 0.40%)</title><rect x="22.8908%" y="197" width="0.3986%" height="15" fill="rgb(247,81,37)"/><text x="23.1408%" y="207.50"></text></g><g><title>lint_mod (851,020 samples, 0.39%)</title><rect x="22.8945%" y="181" width="0.3950%" height="15" fill="rgb(209,12,38)"/><text x="23.1445%" y="191.50"></text></g><g><title>privacy_checking_modules (1,230,084 samples, 0.57%)</title><rect x="23.3548%" y="213" width="0.5709%" height="15" fill="rgb(227,1,9)"/><text x="23.6048%" y="223.50"></text></g><g><title>check_mod_privacy (1,225,744 samples, 0.57%)</title><rect x="23.3568%" y="197" width="0.5689%" height="15" fill="rgb(248,47,43)"/><text x="23.6068%" y="207.50"></text></g><g><title>misc_checking_3 (8,978,511 samples, 4.17%)</title><rect x="19.7677%" y="229" width="4.1670%" height="15" fill="rgb(221,10,30)"/><text x="20.0177%" y="239.50">misc_..</text></g><g><title>coherent_trait (493,896 samples, 0.23%)</title><rect x="23.9719%" y="197" width="0.2292%" height="15" fill="rgb(210,229,1)"/><text x="24.2219%" y="207.50"></text></g><g><title>specialization_graph_of (488,036 samples, 0.23%)</title><rect x="23.9746%" y="181" width="0.2265%" height="15" fill="rgb(222,148,37)"/><text x="24.2246%" y="191.50"></text></g><g><title>coherence_checking (529,106 samples, 0.25%)</title><rect x="23.9670%" y="213" width="0.2456%" height="15" fill="rgb(234,67,33)"/><text x="24.2170%" y="223.50"></text></g><g><title>associated_item (321,743 samples, 0.15%)</title><rect x="41.1150%" y="149" width="0.1493%" height="15" fill="rgb(247,98,35)"/><text x="41.3650%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (249,053 samples, 0.12%)</title><rect x="41.1487%" y="133" width="0.1156%" height="15" fill="rgb(247,138,52)"/><text x="41.3987%" y="143.50"></text></g><g><title>associated_items (473,868 samples, 0.22%)</title><rect x="41.0592%" y="165" width="0.2199%" height="15" fill="rgb(213,79,30)"/><text x="41.3092%" y="175.50"></text></g><g><title>adt_def (228,111 samples, 0.11%)</title><rect x="41.9347%" y="117" width="0.1059%" height="15" fill="rgb(246,177,23)"/><text x="42.1847%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (220,081 samples, 0.10%)</title><rect x="41.9385%" y="101" width="0.1021%" height="15" fill="rgb(230,62,27)"/><text x="42.1885%" y="111.50"></text></g><g><title>adt_def (256,902 samples, 0.12%)</title><rect x="42.2434%" y="85" width="0.1192%" height="15" fill="rgb(216,154,8)"/><text x="42.4934%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (245,960 samples, 0.11%)</title><rect x="42.2484%" y="69" width="0.1142%" height="15" fill="rgb(244,35,45)"/><text x="42.4984%" y="79.50"></text></g><g><title>adt_dtorck_constraint (351,372 samples, 0.16%)</title><rect x="42.4411%" y="69" width="0.1631%" height="15" fill="rgb(251,115,12)"/><text x="42.6911%" y="79.50"></text></g><g><title>adt_dtorck_constraint (502,085 samples, 0.23%)</title><rect x="42.3829%" y="85" width="0.2330%" height="15" fill="rgb(240,54,50)"/><text x="42.6329%" y="95.50"></text></g><g><title>adt_dtorck_constraint (963,161 samples, 0.45%)</title><rect x="42.1936%" y="101" width="0.4470%" height="15" fill="rgb(233,84,52)"/><text x="42.4436%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,327,715 samples, 0.62%)</title><rect x="42.0580%" y="117" width="0.6162%" height="15" fill="rgb(207,117,47)"/><text x="42.3080%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,800,289 samples, 0.84%)</title><rect x="41.8760%" y="133" width="0.8355%" height="15" fill="rgb(249,43,39)"/><text x="42.1260%" y="143.50"></text></g><g><title>dropck_outlives (3,098,227 samples, 1.44%)</title><rect x="41.3261%" y="165" width="1.4379%" height="15" fill="rgb(209,38,44)"/><text x="41.5761%" y="175.50"></text></g><g><title>adt_dtorck_constraint (2,366,386 samples, 1.10%)</title><rect x="41.6658%" y="149" width="1.0983%" height="15" fill="rgb(236,212,23)"/><text x="41.9158%" y="159.50"></text></g><g><title>predicates_of (232,841 samples, 0.11%)</title><rect x="43.5996%" y="149" width="0.1081%" height="15" fill="rgb(242,79,21)"/><text x="43.8496%" y="159.50"></text></g><g><title>evaluate_obligation (3,190,385 samples, 1.48%)</title><rect x="42.7640%" y="165" width="1.4807%" height="15" fill="rgb(211,96,35)"/><text x="43.0140%" y="175.50"></text></g><g><title>trait_impls_of (1,032,861 samples, 0.48%)</title><rect x="43.7653%" y="149" width="0.4794%" height="15" fill="rgb(253,215,40)"/><text x="44.0153%" y="159.50"></text></g><g><title>implementations_of_trait (292,792 samples, 0.14%)</title><rect x="44.1088%" y="133" width="0.1359%" height="15" fill="rgb(211,81,21)"/><text x="44.3588%" y="143.50"></text></g><g><title>generics_of (243,530 samples, 0.11%)</title><rect x="44.3550%" y="165" width="0.1130%" height="15" fill="rgb(208,190,38)"/><text x="44.6050%" y="175.50"></text></g><g><title>method_autoderef_steps (406,524 samples, 0.19%)</title><rect x="44.7254%" y="165" width="0.1887%" height="15" fill="rgb(235,213,38)"/><text x="44.9754%" y="175.50"></text></g><g><title>predicates_of (629,840 samples, 0.29%)</title><rect x="44.9271%" y="165" width="0.2923%" height="15" fill="rgb(237,122,38)"/><text x="45.1771%" y="175.50"></text></g><g><title>predicates_defined_on (393,166 samples, 0.18%)</title><rect x="45.0369%" y="149" width="0.1825%" height="15" fill="rgb(244,218,35)"/><text x="45.2869%" y="159.50"></text></g><g><title>evaluate_obligation (348,113 samples, 0.16%)</title><rect x="46.2729%" y="149" width="0.1616%" height="15" fill="rgb(240,68,47)"/><text x="46.5229%" y="159.50"></text></g><g><title>typeck (2,809,681 samples, 1.30%)</title><rect x="45.3519%" y="165" width="1.3040%" height="15" fill="rgb(210,16,53)"/><text x="45.6019%" y="175.50"></text></g><g><title>item_bodies_checking (48,410,120 samples, 22.47%)</title><rect x="24.2226%" y="213" width="22.4676%" height="15" fill="rgb(235,124,12)"/><text x="24.4726%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (48,406,010 samples, 22.47%)</title><rect x="24.2245%" y="197" width="22.4657%" height="15" fill="rgb(224,169,11)"/><text x="24.4745%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (48,372,340 samples, 22.45%)</title><rect x="24.2401%" y="181" width="22.4501%" height="15" fill="rgb(250,166,2)"/><text x="24.4901%" y="191.50">typeck</text></g><g><title>impl_trait_ref (485,675 samples, 0.23%)</title><rect x="47.0813%" y="53" width="0.2254%" height="15" fill="rgb(242,216,29)"/><text x="47.3313%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (462,905 samples, 0.21%)</title><rect x="47.0919%" y="37" width="0.2148%" height="15" fill="rgb(230,116,27)"/><text x="47.3419%" y="47.50"></text></g><g><title>coherent_trait (714,118 samples, 0.33%)</title><rect x="46.9910%" y="85" width="0.3314%" height="15" fill="rgb(228,99,48)"/><text x="47.2410%" y="95.50"></text></g><g><title>specialization_graph_of (712,148 samples, 0.33%)</title><rect x="46.9920%" y="69" width="0.3305%" height="15" fill="rgb(253,11,6)"/><text x="47.2420%" y="79.50"></text></g><g><title>adt_destructor (719,838 samples, 0.33%)</title><rect x="46.9891%" y="117" width="0.3341%" height="15" fill="rgb(247,143,39)"/><text x="47.2391%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (719,358 samples, 0.33%)</title><rect x="46.9893%" y="101" width="0.3339%" height="15" fill="rgb(236,97,10)"/><text x="47.2393%" y="111.50"></text></g><g><title>adt_dtorck_constraint (725,908 samples, 0.34%)</title><rect x="46.9865%" y="133" width="0.3369%" height="15" fill="rgb(233,208,19)"/><text x="47.2365%" y="143.50"></text></g><g><title>dropck_outlives (750,748 samples, 0.35%)</title><rect x="46.9755%" y="165" width="0.3484%" height="15" fill="rgb(216,164,2)"/><text x="47.2255%" y="175.50"></text></g><g><title>adt_dtorck_constraint (733,978 samples, 0.34%)</title><rect x="46.9833%" y="149" width="0.3406%" height="15" fill="rgb(220,129,5)"/><text x="47.2333%" y="159.50"></text></g><g><title>typeck (1,190,813 samples, 0.55%)</title><rect x="46.8410%" y="181" width="0.5527%" height="15" fill="rgb(242,17,10)"/><text x="47.0910%" y="191.50"></text></g><g><title>item_types_checking (1,516,526 samples, 0.70%)</title><rect x="46.6902%" y="213" width="0.7038%" height="15" fill="rgb(242,107,0)"/><text x="46.9402%" y="223.50"></text></g><g><title>check_mod_item_types (1,510,746 samples, 0.70%)</title><rect x="46.6929%" y="197" width="0.7012%" height="15" fill="rgb(251,28,31)"/><text x="46.9429%" y="207.50"></text></g><g><title>fn_sig (338,595 samples, 0.16%)</title><rect x="47.4798%" y="181" width="0.1571%" height="15" fill="rgb(233,223,10)"/><text x="47.7298%" y="191.50"></text></g><g><title>named_region_map (399,135 samples, 0.19%)</title><rect x="47.6738%" y="165" width="0.1852%" height="15" fill="rgb(215,21,27)"/><text x="47.9238%" y="175.50"></text></g><g><title>resolve_lifetimes (388,155 samples, 0.18%)</title><rect x="47.6789%" y="149" width="0.1801%" height="15" fill="rgb(232,23,21)"/><text x="47.9289%" y="159.50"></text></g><g><title>lint_levels (222,302 samples, 0.10%)</title><rect x="47.7559%" y="133" width="0.1032%" height="15" fill="rgb(244,5,23)"/><text x="48.0059%" y="143.50"></text></g><g><title>generics_of (490,466 samples, 0.23%)</title><rect x="47.6369%" y="181" width="0.2276%" height="15" fill="rgb(226,81,46)"/><text x="47.8869%" y="191.50"></text></g><g><title>predicates_of (253,882 samples, 0.12%)</title><rect x="47.8698%" y="181" width="0.1178%" height="15" fill="rgb(247,70,30)"/><text x="48.1198%" y="191.50"></text></g><g><title>predicates_defined_on (233,432 samples, 0.11%)</title><rect x="47.8793%" y="165" width="0.1083%" height="15" fill="rgb(212,68,19)"/><text x="48.1293%" y="175.50"></text></g><g><title>type_collecting (1,358,046 samples, 0.63%)</title><rect x="47.3963%" y="213" width="0.6303%" height="15" fill="rgb(240,187,13)"/><text x="47.6463%" y="223.50"></text></g><g><title>collect_mod_item_types (1,346,875 samples, 0.63%)</title><rect x="47.4015%" y="197" width="0.6251%" height="15" fill="rgb(223,113,26)"/><text x="47.6515%" y="207.50"></text></g><g><title>check_impl_item_well_formed (489,266 samples, 0.23%)</title><rect x="48.0851%" y="197" width="0.2271%" height="15" fill="rgb(206,192,2)"/><text x="48.3351%" y="207.50"></text></g><g><title>adt_sized_constraint (280,943 samples, 0.13%)</title><rect x="48.6700%" y="165" width="0.1304%" height="15" fill="rgb(241,108,4)"/><text x="48.9200%" y="175.50"></text></g><g><title>evaluate_obligation (581,226 samples, 0.27%)</title><rect x="48.5752%" y="181" width="0.2698%" height="15" fill="rgb(247,173,49)"/><text x="48.8252%" y="191.50"></text></g><g><title>region_scope_tree (475,858 samples, 0.22%)</title><rect x="49.0443%" y="181" width="0.2209%" height="15" fill="rgb(224,114,35)"/><text x="49.2943%" y="191.50"></text></g><g><title>check_item_well_formed (2,091,415 samples, 0.97%)</title><rect x="48.3122%" y="197" width="0.9706%" height="15" fill="rgb(245,159,27)"/><text x="48.5622%" y="207.50"></text></g><g><title>analysis (105,549,577 samples, 48.99%)</title><rect x="0.3731%" y="245" width="48.9865%" height="15" fill="rgb(245,172,44)"/><text x="0.6231%" y="255.50">analysis</text></g><g><title>type_check_crate (54,782,041 samples, 25.42%)</title><rect x="23.9348%" y="229" width="25.4249%" height="15" fill="rgb(236,23,11)"/><text x="24.1848%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,869,052 samples, 1.33%)</title><rect x="48.0281%" y="213" width="1.3316%" height="15" fill="rgb(205,117,38)"/><text x="48.2781%" y="223.50"></text></g><g><title>codegen_crate (600,807 samples, 0.28%)</title><rect x="49.3643%" y="245" width="0.2788%" height="15" fill="rgb(237,72,25)"/><text x="49.6143%" y="255.50"></text></g><g><title>metadata_load_macro (999,820 samples, 0.46%)</title><rect x="90.8110%" y="197" width="0.4640%" height="15" fill="rgb(244,70,9)"/><text x="91.0610%" y="207.50"></text></g><g><title>metadata_register_crate (2,593,720 samples, 1.20%)</title><rect x="91.2750%" y="197" width="1.2038%" height="15" fill="rgb(217,125,39)"/><text x="91.5250%" y="207.50"></text></g><g><title>metadata_register_crate (938,331 samples, 0.44%)</title><rect x="92.0433%" y="181" width="0.4355%" height="15" fill="rgb(235,36,10)"/><text x="92.2933%" y="191.50"></text></g><g><title>macro_expand_crate (91,989,285 samples, 42.69%)</title><rect x="49.8768%" y="229" width="42.6931%" height="15" fill="rgb(251,123,47)"/><text x="50.1268%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (91,969,505 samples, 42.68%)</title><rect x="49.8859%" y="213" width="42.6839%" height="15" fill="rgb(221,13,13)"/><text x="50.1359%" y="223.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (423,595 samples, 0.20%)</title><rect x="92.5705%" y="229" width="0.1966%" height="15" fill="rgb(238,131,9)"/><text x="92.8205%" y="239.50"></text></g><g><title>finalize_imports (228,942 samples, 0.11%)</title><rect x="92.8213%" y="213" width="0.1063%" height="15" fill="rgb(211,50,8)"/><text x="93.0713%" y="223.50"></text></g><g><title>finalize_macro_resolutions (852,580 samples, 0.40%)</title><rect x="92.9276%" y="213" width="0.3957%" height="15" fill="rgb(245,182,24)"/><text x="93.1776%" y="223.50"></text></g><g><title>late_resolve_crate (2,872,722 samples, 1.33%)</title><rect x="93.3233%" y="213" width="1.3333%" height="15" fill="rgb(242,14,37)"/><text x="93.5733%" y="223.50"></text></g><g><title>configure_and_expand (97,150,532 samples, 45.09%)</title><rect x="49.6431%" y="245" width="45.0885%" height="15" fill="rgb(246,228,12)"/><text x="49.8931%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (4,121,645 samples, 1.91%)</title><rect x="92.8187%" y="229" width="1.9129%" height="15" fill="rgb(213,55,15)"/><text x="93.0687%" y="239.50">r..</text></g><g><title>early_lint_checks (706,058 samples, 0.33%)</title><rect x="94.8364%" y="245" width="0.3277%" height="15" fill="rgb(209,9,3)"/><text x="95.0864%" y="255.50"></text></g><g><title>free_global_ctxt (3,637,190 samples, 1.69%)</title><rect x="95.1641%" y="245" width="1.6881%" height="15" fill="rgb(230,59,30)"/><text x="95.4141%" y="255.50"></text></g><g><title>hir_lowering (3,813,962 samples, 1.77%)</title><rect x="96.9357%" y="245" width="1.7701%" height="15" fill="rgb(209,121,21)"/><text x="97.1857%" y="255.50">h..</text></g><g><title>parse_crate (1,410,566 samples, 0.65%)</title><rect x="98.7332%" y="245" width="0.6547%" height="15" fill="rgb(220,109,13)"/><text x="98.9832%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (745,688 samples, 0.35%)</title><rect x="99.4764%" y="245" width="0.3461%" height="15" fill="rgb(232,18,1)"/><text x="99.7264%" y="255.50"></text></g><g><title>all (215,466,480 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (215,466,480 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (285,983 samples, 0.13%)</title><rect x="99.8673%" y="245" width="0.1327%" height="15" fill="rgb(240,125,3)"/><text x="100.1173%" y="255.50"></text></g></svg></svg>