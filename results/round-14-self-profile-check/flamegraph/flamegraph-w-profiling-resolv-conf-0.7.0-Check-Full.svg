<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (279,093 samples, 0.12%)</title><rect x="13.3633%" y="133" width="0.1193%" height="15" fill="rgb(227,0,7)"/><text x="13.6133%" y="143.50"></text></g><g><title>param_env (343,014 samples, 0.15%)</title><rect x="14.8463%" y="101" width="0.1466%" height="15" fill="rgb(217,0,24)"/><text x="15.0963%" y="111.50"></text></g><g><title>item_attrs (399,266 samples, 0.17%)</title><rect x="15.4491%" y="69" width="0.1706%" height="15" fill="rgb(221,193,54)"/><text x="15.6991%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (386,925 samples, 0.17%)</title><rect x="15.4544%" y="53" width="0.1653%" height="15" fill="rgb(248,212,6)"/><text x="15.7044%" y="63.50"></text></g><g><title>codegen_fn_attrs (536,547 samples, 0.23%)</title><rect x="15.4023%" y="85" width="0.2293%" height="15" fill="rgb(208,68,35)"/><text x="15.6523%" y="95.50"></text></g><g><title>is_copy_raw (241,442 samples, 0.10%)</title><rect x="18.6259%" y="37" width="0.1032%" height="15" fill="rgb(232,128,0)"/><text x="18.8759%" y="47.50"></text></g><g><title>adt_drop_tys (639,875 samples, 0.27%)</title><rect x="18.5186%" y="53" width="0.2734%" height="15" fill="rgb(207,160,47)"/><text x="18.7686%" y="63.50"></text></g><g><title>is_copy_raw (1,017,145 samples, 0.43%)</title><rect x="18.7920%" y="53" width="0.4346%" height="15" fill="rgb(228,23,34)"/><text x="19.0420%" y="63.50"></text></g><g><title>evaluate_obligation (821,028 samples, 0.35%)</title><rect x="18.8758%" y="37" width="0.3508%" height="15" fill="rgb(218,30,26)"/><text x="19.1258%" y="47.50"></text></g><g><title>needs_drop_raw (1,977,255 samples, 0.84%)</title><rect x="18.4342%" y="69" width="0.8449%" height="15" fill="rgb(220,122,19)"/><text x="18.6842%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (573,075 samples, 0.24%)</title><rect x="19.3984%" y="53" width="0.2449%" height="15" fill="rgb(250,228,42)"/><text x="19.6484%" y="63.50"></text></g><g><title>resolve_instance (1,246,314 samples, 0.53%)</title><rect x="19.2790%" y="69" width="0.5325%" height="15" fill="rgb(240,193,28)"/><text x="19.5290%" y="79.50"></text></g><g><title>thir_body (2,410,237 samples, 1.03%)</title><rect x="19.8396%" y="69" width="1.0299%" height="15" fill="rgb(216,20,37)"/><text x="20.0896%" y="79.50"></text></g><g><title>mir_const (15,675,534 samples, 6.70%)</title><rect x="14.1899%" y="117" width="6.6981%" height="15" fill="rgb(206,188,39)"/><text x="14.4399%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (13,796,452 samples, 5.90%)</title><rect x="14.9928%" y="101" width="5.8952%" height="15" fill="rgb(217,207,13)"/><text x="15.2428%" y="111.50">unsafet..</text></g><g><title>mir_built (12,301,729 samples, 5.26%)</title><rect x="15.6315%" y="85" width="5.2565%" height="15" fill="rgb(231,73,38)"/><text x="15.8815%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (17,344,197 samples, 7.41%)</title><rect x="13.5203%" y="133" width="7.4111%" height="15" fill="rgb(225,20,46)"/><text x="13.7703%" y="143.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (548,994 samples, 0.23%)</title><rect x="20.9343%" y="133" width="0.2346%" height="15" fill="rgb(210,31,41)"/><text x="21.1843%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,451,975 samples, 0.62%)</title><rect x="21.1689%" y="133" width="0.6204%" height="15" fill="rgb(221,200,47)"/><text x="21.4189%" y="143.50"></text></g><g><title>normalize_projection_ty (910,589 samples, 0.39%)</title><rect x="21.4002%" y="117" width="0.3891%" height="15" fill="rgb(226,26,5)"/><text x="21.6502%" y="127.50"></text></g><g><title>type_op_normalize_predicate (357,665 samples, 0.15%)</title><rect x="21.7893%" y="133" width="0.1528%" height="15" fill="rgb(249,33,26)"/><text x="22.0393%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,217,157 samples, 1.80%)</title><rect x="21.9620%" y="133" width="1.8020%" height="15" fill="rgb(235,183,28)"/><text x="22.2120%" y="143.50">t..</text></g><g><title>evaluate_obligation (246,364 samples, 0.11%)</title><rect x="23.6587%" y="117" width="0.1053%" height="15" fill="rgb(221,5,38)"/><text x="23.9087%" y="127.50"></text></g><g><title>MIR_borrow_checking (54,240,395 samples, 23.18%)</title><rect x="0.5913%" y="165" width="23.1767%" height="15" fill="rgb(247,18,42)"/><text x="0.8413%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (54,063,844 samples, 23.10%)</title><rect x="0.6668%" y="149" width="23.1012%" height="15" fill="rgb(241,131,45)"/><text x="0.9168%" y="159.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (237,471 samples, 0.10%)</title><rect x="24.1971%" y="117" width="0.1015%" height="15" fill="rgb(249,31,29)"/><text x="24.4471%" y="127.50"></text></g><g><title>codegen_fn_attrs (394,654 samples, 0.17%)</title><rect x="24.1383%" y="133" width="0.1686%" height="15" fill="rgb(225,111,53)"/><text x="24.3883%" y="143.50"></text></g><g><title>check_mod_attrs (844,169 samples, 0.36%)</title><rect x="23.9463%" y="149" width="0.3607%" height="15" fill="rgb(238,160,17)"/><text x="24.1963%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (549,247 samples, 0.23%)</title><rect x="24.4276%" y="149" width="0.2347%" height="15" fill="rgb(214,148,48)"/><text x="24.6776%" y="159.50"></text></g><g><title>misc_checking_1 (1,767,640 samples, 0.76%)</title><rect x="23.9351%" y="165" width="0.7553%" height="15" fill="rgb(232,36,49)"/><text x="24.1851%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (774,899 samples, 0.33%)</title><rect x="24.6912%" y="149" width="0.3311%" height="15" fill="rgb(209,103,24)"/><text x="24.9412%" y="159.50"></text></g><g><title>check_mod_liveness (601,946 samples, 0.26%)</title><rect x="24.7651%" y="133" width="0.2572%" height="15" fill="rgb(229,88,8)"/><text x="25.0151%" y="143.50"></text></g><g><title>misc_checking_2 (2,392,537 samples, 1.02%)</title><rect x="24.6904%" y="165" width="1.0223%" height="15" fill="rgb(213,181,19)"/><text x="24.9404%" y="175.50"></text></g><g><title>match_checking (1,615,948 samples, 0.69%)</title><rect x="25.0223%" y="149" width="0.6905%" height="15" fill="rgb(254,191,54)"/><text x="25.2723%" y="159.50"></text></g><g><title>check_match (1,568,198 samples, 0.67%)</title><rect x="25.0427%" y="133" width="0.6701%" height="15" fill="rgb(241,83,37)"/><text x="25.2927%" y="143.50"></text></g><g><title>check_private_in_public (288,063 samples, 0.12%)</title><rect x="25.7174%" y="149" width="0.1231%" height="15" fill="rgb(233,36,39)"/><text x="25.9674%" y="159.50"></text></g><g><title>death_checking (642,407 samples, 0.27%)</title><rect x="25.8405%" y="149" width="0.2745%" height="15" fill="rgb(226,3,54)"/><text x="26.0905%" y="159.50"></text></g><g><title>param_env (268,334 samples, 0.11%)</title><rect x="26.6406%" y="117" width="0.1147%" height="15" fill="rgb(245,192,40)"/><text x="26.8906%" y="127.50"></text></g><g><title>crate_lints (2,900,252 samples, 1.24%)</title><rect x="26.1158%" y="133" width="1.2393%" height="15" fill="rgb(238,167,29)"/><text x="26.3658%" y="143.50"></text></g><g><title>type_of (1,387,308 samples, 0.59%)</title><rect x="26.7622%" y="117" width="0.5928%" height="15" fill="rgb(232,182,51)"/><text x="27.0122%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (922,984 samples, 0.39%)</title><rect x="26.9606%" y="101" width="0.3944%" height="15" fill="rgb(231,60,39)"/><text x="27.2106%" y="111.50"></text></g><g><title>lint_checking (4,128,236 samples, 1.76%)</title><rect x="26.1150%" y="149" width="1.7640%" height="15" fill="rgb(208,69,12)"/><text x="26.3650%" y="159.50"></text></g><g><title>module_lints (1,226,214 samples, 0.52%)</title><rect x="27.3550%" y="133" width="0.5240%" height="15" fill="rgb(235,93,37)"/><text x="27.6050%" y="143.50"></text></g><g><title>lint_mod (1,220,464 samples, 0.52%)</title><rect x="27.3575%" y="117" width="0.5215%" height="15" fill="rgb(213,116,39)"/><text x="27.6075%" y="127.50"></text></g><g><title>privacy_access_levels (418,025 samples, 0.18%)</title><rect x="27.8790%" y="149" width="0.1786%" height="15" fill="rgb(222,207,29)"/><text x="28.1290%" y="159.50"></text></g><g><title>privacy_checking_modules (1,674,279 samples, 0.72%)</title><rect x="28.0576%" y="149" width="0.7154%" height="15" fill="rgb(206,96,30)"/><text x="28.3076%" y="159.50"></text></g><g><title>check_mod_privacy (1,670,608 samples, 0.71%)</title><rect x="28.0592%" y="133" width="0.7138%" height="15" fill="rgb(218,138,4)"/><text x="28.3092%" y="143.50"></text></g><g><title>misc_checking_3 (7,187,641 samples, 3.07%)</title><rect x="25.7128%" y="165" width="3.0712%" height="15" fill="rgb(250,191,14)"/><text x="25.9628%" y="175.50">mis..</text></g><g><title>adt_destructor (320,083 samples, 0.14%)</title><rect x="28.8495%" y="117" width="0.1368%" height="15" fill="rgb(239,60,40)"/><text x="29.0995%" y="127.50"></text></g><g><title>coherent_trait (312,133 samples, 0.13%)</title><rect x="28.8529%" y="101" width="0.1334%" height="15" fill="rgb(206,27,48)"/><text x="29.1029%" y="111.50"></text></g><g><title>specialization_graph_of (311,083 samples, 0.13%)</title><rect x="28.8534%" y="85" width="0.1329%" height="15" fill="rgb(225,35,8)"/><text x="29.1034%" y="95.50"></text></g><g><title>impl_parent (2,588,475 samples, 1.11%)</title><rect x="30.8486%" y="101" width="1.1060%" height="15" fill="rgb(250,213,24)"/><text x="31.0986%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,510,629 samples, 0.65%)</title><rect x="31.3092%" y="85" width="0.6455%" height="15" fill="rgb(247,123,22)"/><text x="31.5592%" y="95.50"></text></g><g><title>impl_trait_ref (6,022,735 samples, 2.57%)</title><rect x="31.9546%" y="101" width="2.5735%" height="15" fill="rgb(231,138,38)"/><text x="32.2046%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,556,782 samples, 1.95%)</title><rect x="32.5810%" y="85" width="1.9471%" height="15" fill="rgb(231,145,46)"/><text x="32.8310%" y="95.50">m..</text></g><g><title>trait_impls_of (871,719 samples, 0.37%)</title><rect x="34.5544%" y="101" width="0.3725%" height="15" fill="rgb(251,118,11)"/><text x="34.8044%" y="111.50"></text></g><g><title>implementations_of_trait (246,934 samples, 0.11%)</title><rect x="34.8214%" y="85" width="0.1055%" height="15" fill="rgb(217,147,25)"/><text x="35.0714%" y="95.50"></text></g><g><title>coherent_trait (14,258,639 samples, 6.09%)</title><rect x="28.8349%" y="133" width="6.0926%" height="15" fill="rgb(247,81,37)"/><text x="29.0849%" y="143.50">coherent..</text></g><g><title>specialization_graph_of (13,876,365 samples, 5.93%)</title><rect x="28.9983%" y="117" width="5.9293%" height="15" fill="rgb(209,12,38)"/><text x="29.2483%" y="127.50">speciali..</text></g><g><title>coherence_checking (14,495,391 samples, 6.19%)</title><rect x="28.8229%" y="149" width="6.1938%" height="15" fill="rgb(227,1,9)"/><text x="29.0729%" y="159.50">coherenc..</text></g><g><title>predicates_of (243,943 samples, 0.10%)</title><rect x="51.2768%" y="85" width="0.1042%" height="15" fill="rgb(248,47,43)"/><text x="51.5268%" y="95.50"></text></g><g><title>evaluate_obligation (1,780,955 samples, 0.76%)</title><rect x="50.6677%" y="101" width="0.7610%" height="15" fill="rgb(221,10,30)"/><text x="50.9177%" y="111.50"></text></g><g><title>associated_item (827,601 samples, 0.35%)</title><rect x="59.6720%" y="69" width="0.3536%" height="15" fill="rgb(210,229,1)"/><text x="59.9220%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (736,611 samples, 0.31%)</title><rect x="59.7109%" y="53" width="0.3148%" height="15" fill="rgb(222,148,37)"/><text x="59.9609%" y="63.50"></text></g><g><title>associated_items (1,013,361 samples, 0.43%)</title><rect x="59.6079%" y="85" width="0.4330%" height="15" fill="rgb(234,67,33)"/><text x="59.8579%" y="95.50"></text></g><g><title>adt_dtorck_constraint (309,254 samples, 0.13%)</title><rect x="60.2584%" y="37" width="0.1321%" height="15" fill="rgb(247,98,35)"/><text x="60.5084%" y="47.50"></text></g><g><title>adt_dtorck_constraint (393,255 samples, 0.17%)</title><rect x="60.2303%" y="53" width="0.1680%" height="15" fill="rgb(247,138,52)"/><text x="60.4803%" y="63.50"></text></g><g><title>adt_dtorck_constraint (570,876 samples, 0.24%)</title><rect x="60.1711%" y="69" width="0.2439%" height="15" fill="rgb(213,79,30)"/><text x="60.4211%" y="79.50"></text></g><g><title>dropck_outlives (1,187,035 samples, 0.51%)</title><rect x="60.0692%" y="85" width="0.5072%" height="15" fill="rgb(246,177,23)"/><text x="60.3192%" y="95.50"></text></g><g><title>normalize_projection_ty (377,775 samples, 0.16%)</title><rect x="60.4150%" y="69" width="0.1614%" height="15" fill="rgb(230,62,27)"/><text x="60.6650%" y="79.50"></text></g><g><title>trait_impls_of (271,604 samples, 0.12%)</title><rect x="61.4673%" y="69" width="0.1161%" height="15" fill="rgb(216,154,8)"/><text x="61.7173%" y="79.50"></text></g><g><title>evaluate_obligation (2,359,388 samples, 1.01%)</title><rect x="60.5764%" y="85" width="1.0082%" height="15" fill="rgb(244,35,45)"/><text x="60.8264%" y="95.50"></text></g><g><title>is_copy_raw (293,113 samples, 0.13%)</title><rect x="61.8118%" y="85" width="0.1252%" height="15" fill="rgb(251,115,12)"/><text x="62.0618%" y="95.50"></text></g><g><title>evaluate_obligation (257,784 samples, 0.11%)</title><rect x="62.0964%" y="69" width="0.1101%" height="15" fill="rgb(240,54,50)"/><text x="62.3464%" y="79.50"></text></g><g><title>method_autoderef_steps (530,059 samples, 0.23%)</title><rect x="61.9895%" y="85" width="0.2265%" height="15" fill="rgb(233,84,52)"/><text x="62.2395%" y="95.50"></text></g><g><title>predicates_of (329,945 samples, 0.14%)</title><rect x="62.2271%" y="85" width="0.1410%" height="15" fill="rgb(207,117,47)"/><text x="62.4771%" y="95.50"></text></g><g><title>predicates_defined_on (236,394 samples, 0.10%)</title><rect x="62.2671%" y="69" width="0.1010%" height="15" fill="rgb(249,43,39)"/><text x="62.5171%" y="79.50"></text></g><g><title>typeck (24,823,529 samples, 10.61%)</title><rect x="51.8379%" y="101" width="10.6070%" height="15" fill="rgb(209,38,44)"/><text x="52.0879%" y="111.50">typeck</text></g><g><title>item_bodies_checking (64,190,048 samples, 27.43%)</title><rect x="35.0338%" y="149" width="27.4281%" height="15" fill="rgb(236,212,23)"/><text x="35.2838%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (64,187,288 samples, 27.43%)</title><rect x="35.0350%" y="133" width="27.4269%" height="15" fill="rgb(242,79,21)"/><text x="35.2850%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (64,086,318 samples, 27.38%)</title><rect x="35.0781%" y="117" width="27.3838%" height="15" fill="rgb(211,96,35)"/><text x="35.3281%" y="127.50">typeck</text></g><g><title>item_types_checking (1,402,225 samples, 0.60%)</title><rect x="62.4619%" y="149" width="0.5992%" height="15" fill="rgb(253,215,40)"/><text x="62.7119%" y="159.50"></text></g><g><title>check_mod_item_types (1,397,665 samples, 0.60%)</title><rect x="62.4638%" y="133" width="0.5972%" height="15" fill="rgb(211,81,21)"/><text x="62.7138%" y="143.50"></text></g><g><title>fn_sig (520,595 samples, 0.22%)</title><rect x="63.2309%" y="117" width="0.2224%" height="15" fill="rgb(208,190,38)"/><text x="63.4809%" y="127.50"></text></g><g><title>named_region_map (819,979 samples, 0.35%)</title><rect x="63.5453%" y="101" width="0.3504%" height="15" fill="rgb(235,213,38)"/><text x="63.7953%" y="111.50"></text></g><g><title>resolve_lifetimes (792,119 samples, 0.34%)</title><rect x="63.5572%" y="85" width="0.3385%" height="15" fill="rgb(237,122,38)"/><text x="63.8072%" y="95.50"></text></g><g><title>lint_levels (393,625 samples, 0.17%)</title><rect x="63.7274%" y="69" width="0.1682%" height="15" fill="rgb(244,218,35)"/><text x="63.9774%" y="79.50"></text></g><g><title>generics_of (1,051,372 samples, 0.45%)</title><rect x="63.4533%" y="117" width="0.4492%" height="15" fill="rgb(240,68,47)"/><text x="63.7033%" y="127.50"></text></g><g><title>predicates_of (708,168 samples, 0.30%)</title><rect x="63.9384%" y="117" width="0.3026%" height="15" fill="rgb(210,16,53)"/><text x="64.1884%" y="127.50"></text></g><g><title>predicates_defined_on (635,568 samples, 0.27%)</title><rect x="63.9694%" y="101" width="0.2716%" height="15" fill="rgb(235,124,12)"/><text x="64.2194%" y="111.50"></text></g><g><title>inferred_outlives_of (391,204 samples, 0.17%)</title><rect x="64.0738%" y="85" width="0.1672%" height="15" fill="rgb(224,169,11)"/><text x="64.3238%" y="95.50"></text></g><g><title>inferred_outlives_crate (362,264 samples, 0.15%)</title><rect x="64.0862%" y="69" width="0.1548%" height="15" fill="rgb(250,166,2)"/><text x="64.3362%" y="79.50"></text></g><g><title>type_collecting (2,880,562 samples, 1.23%)</title><rect x="63.0624%" y="149" width="1.2309%" height="15" fill="rgb(242,216,29)"/><text x="63.3124%" y="159.50"></text></g><g><title>collect_mod_item_types (2,866,982 samples, 1.23%)</title><rect x="63.0682%" y="133" width="1.2250%" height="15" fill="rgb(230,116,27)"/><text x="63.3182%" y="143.50"></text></g><g><title>evaluate_obligation (432,668 samples, 0.18%)</title><rect x="65.1598%" y="117" width="0.1849%" height="15" fill="rgb(228,99,48)"/><text x="65.4098%" y="127.50"></text></g><g><title>object_safety_violations (444,825 samples, 0.19%)</title><rect x="65.4100%" y="117" width="0.1901%" height="15" fill="rgb(253,11,6)"/><text x="65.6600%" y="127.50"></text></g><g><title>param_env (239,464 samples, 0.10%)</title><rect x="65.6000%" y="117" width="0.1023%" height="15" fill="rgb(247,143,39)"/><text x="65.8500%" y="127.50"></text></g><g><title>region_scope_tree (715,550 samples, 0.31%)</title><rect x="65.7094%" y="117" width="0.3058%" height="15" fill="rgb(236,97,10)"/><text x="65.9594%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,780,259 samples, 1.62%)</title><rect x="64.4074%" y="133" width="1.6153%" height="15" fill="rgb(233,208,19)"/><text x="64.6574%" y="143.50"></text></g><g><title>evaluate_obligation (694,325 samples, 0.30%)</title><rect x="66.6933%" y="117" width="0.2967%" height="15" fill="rgb(216,164,2)"/><text x="66.9433%" y="127.50"></text></g><g><title>param_env (278,144 samples, 0.12%)</title><rect x="67.0483%" y="117" width="0.1188%" height="15" fill="rgb(220,129,5)"/><text x="67.2983%" y="127.50"></text></g><g><title>analysis (156,681,001 samples, 66.95%)</title><rect x="0.3712%" y="181" width="66.9490%" height="15" fill="rgb(242,17,10)"/><text x="0.6212%" y="191.50">analysis</text></g><g><title>type_check_crate (90,186,458 samples, 38.54%)</title><rect x="28.7840%" y="165" width="38.5362%" height="15" fill="rgb(242,107,0)"/><text x="29.0340%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,077,420 samples, 3.02%)</title><rect x="64.2961%" y="149" width="3.0241%" height="15" fill="rgb(251,28,31)"/><text x="64.5461%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (3,036,560 samples, 1.30%)</title><rect x="66.0227%" y="133" width="1.2975%" height="15" fill="rgb(233,223,10)"/><text x="66.2727%" y="143.50"></text></g><g><title>codegen_crate (370,184 samples, 0.16%)</title><rect x="67.3244%" y="181" width="0.1582%" height="15" fill="rgb(215,21,27)"/><text x="67.5744%" y="191.50"></text></g><g><title>metadata_load_macro (1,638,850 samples, 0.70%)</title><rect x="90.7042%" y="133" width="0.7003%" height="15" fill="rgb(232,23,21)"/><text x="90.9542%" y="143.50"></text></g><g><title>metadata_register_crate (2,617,689 samples, 1.12%)</title><rect x="91.4044%" y="133" width="1.1185%" height="15" fill="rgb(244,5,23)"/><text x="91.6544%" y="143.50"></text></g><g><title>metadata_register_crate (949,092 samples, 0.41%)</title><rect x="92.1174%" y="117" width="0.4055%" height="15" fill="rgb(226,81,46)"/><text x="92.3674%" y="127.50"></text></g><g><title>macro_expand_crate (58,327,572 samples, 24.92%)</title><rect x="67.7495%" y="165" width="24.9231%" height="15" fill="rgb(247,70,30)"/><text x="67.9995%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (58,307,892 samples, 24.91%)</title><rect x="67.7579%" y="149" width="24.9147%" height="15" fill="rgb(212,68,19)"/><text x="68.0079%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (350,114 samples, 0.15%)</title><rect x="92.5230%" y="133" width="0.1496%" height="15" fill="rgb(240,187,13)"/><text x="92.7730%" y="143.50"></text></g><g><title>finalize_macro_resolutions (263,353 samples, 0.11%)</title><rect x="92.7420%" y="149" width="0.1125%" height="15" fill="rgb(223,113,26)"/><text x="92.9920%" y="159.50"></text></g><g><title>late_resolve_crate (2,420,997 samples, 1.03%)</title><rect x="92.8545%" y="149" width="1.0345%" height="15" fill="rgb(206,192,2)"/><text x="93.1045%" y="159.50"></text></g><g><title>configure_and_expand (61,969,952 samples, 26.48%)</title><rect x="67.4826%" y="181" width="26.4795%" height="15" fill="rgb(241,108,4)"/><text x="67.7326%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,914,813 samples, 1.25%)</title><rect x="92.7165%" y="165" width="1.2455%" height="15" fill="rgb(247,173,49)"/><text x="92.9665%" y="175.50"></text></g><g><title>drop_ast (328,423 samples, 0.14%)</title><rect x="93.9620%" y="181" width="0.1403%" height="15" fill="rgb(224,114,35)"/><text x="94.2120%" y="191.50"></text></g><g><title>early_lint_checks (681,438 samples, 0.29%)</title><rect x="94.1092%" y="181" width="0.2912%" height="15" fill="rgb(245,159,27)"/><text x="94.3592%" y="191.50"></text></g><g><title>free_global_ctxt (4,500,760 samples, 1.92%)</title><rect x="94.4003%" y="181" width="1.9232%" height="15" fill="rgb(245,172,44)"/><text x="94.6503%" y="191.50">f..</text></g><g><title>generate_crate_metadata (1,590,898 samples, 0.68%)</title><rect x="96.3235%" y="181" width="0.6798%" height="15" fill="rgb(236,23,11)"/><text x="96.5735%" y="191.50"></text></g><g><title>hir_lowering (4,968,756 samples, 2.12%)</title><rect x="97.0033%" y="181" width="2.1231%" height="15" fill="rgb(205,117,38)"/><text x="97.2533%" y="191.50">h..</text></g><g><title>parse_crate (471,986 samples, 0.20%)</title><rect x="99.1541%" y="181" width="0.2017%" height="15" fill="rgb(237,72,25)"/><text x="99.4041%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (863,740 samples, 0.37%)</title><rect x="99.4388%" y="181" width="0.3691%" height="15" fill="rgb(244,70,9)"/><text x="99.6888%" y="191.50"></text></g><g><title>all (234,030,286 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (234,030,286 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (351,144 samples, 0.15%)</title><rect x="99.8500%" y="181" width="0.1500%" height="15" fill="rgb(251,123,47)"/><text x="100.1000%" y="191.50"></text></g></svg></svg>