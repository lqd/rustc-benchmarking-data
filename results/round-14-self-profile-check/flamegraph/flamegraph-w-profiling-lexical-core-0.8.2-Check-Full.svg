<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>thir_body (145,510 samples, 0.11%)</title><rect x="12.7837%" y="85" width="0.1071%" height="15" fill="rgb(227,0,7)"/><text x="13.0337%" y="95.50"></text></g><g><title>mir_promoted (1,629,853 samples, 1.20%)</title><rect x="11.6991%" y="165" width="1.1998%" height="15" fill="rgb(217,0,24)"/><text x="11.9491%" y="175.50"></text></g><g><title>mir_const_qualif_const_arg (1,391,591 samples, 1.02%)</title><rect x="11.8745%" y="149" width="1.0244%" height="15" fill="rgb(221,193,54)"/><text x="12.1245%" y="159.50"></text></g><g><title>mir_const (1,172,469 samples, 0.86%)</title><rect x="12.0358%" y="133" width="0.8631%" height="15" fill="rgb(248,212,6)"/><text x="12.2858%" y="143.50"></text></g><g><title>unsafety_check_result_for_const_arg (800,495 samples, 0.59%)</title><rect x="12.3096%" y="117" width="0.5893%" height="15" fill="rgb(208,68,35)"/><text x="12.5596%" y="127.50"></text></g><g><title>mir_built (685,954 samples, 0.50%)</title><rect x="12.3939%" y="101" width="0.5050%" height="15" fill="rgb(232,128,0)"/><text x="12.6439%" y="111.50"></text></g><g><title>mir_borrowck_const_arg (3,903,429 samples, 2.87%)</title><rect x="10.0348%" y="181" width="2.8736%" height="15" fill="rgb(207,160,47)"/><text x="10.2848%" y="191.50">mi..</text></g><g><title>codegen_fulfill_obligation (414,175 samples, 0.30%)</title><rect x="17.1938%" y="101" width="0.3049%" height="15" fill="rgb(228,23,34)"/><text x="17.4438%" y="111.50"></text></g><g><title>impl_item_implementor_ids (208,892 samples, 0.15%)</title><rect x="17.5283%" y="101" width="0.1538%" height="15" fill="rgb(218,30,26)"/><text x="17.7783%" y="111.50"></text></g><g><title>associated_items (175,191 samples, 0.13%)</title><rect x="17.5531%" y="85" width="0.1290%" height="15" fill="rgb(220,122,19)"/><text x="17.8031%" y="95.50"></text></g><g><title>resolve_instance (1,444,675 samples, 1.06%)</title><rect x="16.7555%" y="117" width="1.0635%" height="15" fill="rgb(250,228,42)"/><text x="17.0055%" y="127.50"></text></g><g><title>thir_body (755,159 samples, 0.56%)</title><rect x="17.8488%" y="117" width="0.5559%" height="15" fill="rgb(240,193,28)"/><text x="18.0988%" y="127.50"></text></g><g><title>mir_const (6,649,802 samples, 4.90%)</title><rect x="13.5328%" y="165" width="4.8953%" height="15" fill="rgb(216,20,37)"/><text x="13.7828%" y="175.50">mir_co..</text></g><g><title>unsafety_check_result (5,689,800 samples, 4.19%)</title><rect x="14.2395%" y="149" width="4.1886%" height="15" fill="rgb(206,188,39)"/><text x="14.4895%" y="159.50">unsaf..</text></g><g><title>mir_built (5,076,292 samples, 3.74%)</title><rect x="14.6911%" y="133" width="3.7370%" height="15" fill="rgb(217,207,13)"/><text x="14.9411%" y="143.50">mir_..</text></g><g><title>mir_promoted (7,568,337 samples, 5.57%)</title><rect x="12.9083%" y="181" width="5.5715%" height="15" fill="rgb(231,73,38)"/><text x="13.1583%" y="191.50">mir_pro..</text></g><g><title>type_op_normalize_fn_sig (615,948 samples, 0.45%)</title><rect x="18.5189%" y="181" width="0.4534%" height="15" fill="rgb(225,20,46)"/><text x="18.7689%" y="191.50"></text></g><g><title>normalize_projection_ty (160,801 samples, 0.12%)</title><rect x="18.8540%" y="165" width="0.1184%" height="15" fill="rgb(210,31,41)"/><text x="19.1040%" y="175.50"></text></g><g><title>type_op_normalize_ty (526,307 samples, 0.39%)</title><rect x="18.9723%" y="181" width="0.3874%" height="15" fill="rgb(221,200,47)"/><text x="19.2223%" y="191.50"></text></g><g><title>normalize_projection_ty (301,666 samples, 0.22%)</title><rect x="19.1377%" y="165" width="0.2221%" height="15" fill="rgb(226,26,5)"/><text x="19.3877%" y="175.50"></text></g><g><title>MIR_borrow_checking (25,522,464 samples, 18.79%)</title><rect x="1.1778%" y="213" width="18.7887%" height="15" fill="rgb(249,33,26)"/><text x="1.4278%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,233,851 samples, 18.58%)</title><rect x="1.3903%" y="197" width="18.5762%" height="15" fill="rgb(235,183,28)"/><text x="1.6403%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (824,125 samples, 0.61%)</title><rect x="19.3598%" y="181" width="0.6067%" height="15" fill="rgb(221,5,38)"/><text x="19.6098%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (675,105 samples, 0.50%)</title><rect x="20.2828%" y="197" width="0.4970%" height="15" fill="rgb(247,18,42)"/><text x="20.5328%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (640,974 samples, 0.47%)</title><rect x="20.3079%" y="181" width="0.4719%" height="15" fill="rgb(241,131,45)"/><text x="20.5579%" y="191.50"></text></g><g><title>MIR_effect_checking (1,121,072 samples, 0.83%)</title><rect x="19.9665%" y="213" width="0.8253%" height="15" fill="rgb(249,31,29)"/><text x="20.2165%" y="223.50"></text></g><g><title>hir_module_items (223,123 samples, 0.16%)</title><rect x="20.7918%" y="213" width="0.1643%" height="15" fill="rgb(225,111,53)"/><text x="21.0418%" y="223.50"></text></g><g><title>should_inherit_track_caller (161,773 samples, 0.12%)</title><rect x="21.3242%" y="165" width="0.1191%" height="15" fill="rgb(238,160,17)"/><text x="21.5742%" y="175.50"></text></g><g><title>codegen_fn_attrs (408,526 samples, 0.30%)</title><rect x="21.1570%" y="181" width="0.3007%" height="15" fill="rgb(214,148,48)"/><text x="21.4070%" y="191.50"></text></g><g><title>check_mod_attrs (663,698 samples, 0.49%)</title><rect x="20.9692%" y="197" width="0.4886%" height="15" fill="rgb(232,36,49)"/><text x="21.2192%" y="207.50"></text></g><g><title>check_mod_const_bodies (159,002 samples, 0.12%)</title><rect x="21.4578%" y="197" width="0.1171%" height="15" fill="rgb(209,103,24)"/><text x="21.7078%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (257,103 samples, 0.19%)</title><rect x="21.6245%" y="197" width="0.1893%" height="15" fill="rgb(229,88,8)"/><text x="21.8745%" y="207.50"></text></g><g><title>misc_checking_1 (1,218,034 samples, 0.90%)</title><rect x="20.9566%" y="213" width="0.8967%" height="15" fill="rgb(213,181,19)"/><text x="21.2066%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (374,654 samples, 0.28%)</title><rect x="21.8544%" y="197" width="0.2758%" height="15" fill="rgb(254,191,54)"/><text x="22.1044%" y="207.50"></text></g><g><title>check_mod_liveness (299,603 samples, 0.22%)</title><rect x="21.9096%" y="181" width="0.2206%" height="15" fill="rgb(241,83,37)"/><text x="22.1596%" y="191.50"></text></g><g><title>misc_checking_2 (843,709 samples, 0.62%)</title><rect x="21.8533%" y="213" width="0.6211%" height="15" fill="rgb(233,36,39)"/><text x="22.1033%" y="223.50"></text></g><g><title>match_checking (467,635 samples, 0.34%)</title><rect x="22.1302%" y="197" width="0.3443%" height="15" fill="rgb(226,3,54)"/><text x="22.3802%" y="207.50"></text></g><g><title>check_match (406,504 samples, 0.30%)</title><rect x="22.1752%" y="181" width="0.2993%" height="15" fill="rgb(245,192,40)"/><text x="22.4252%" y="191.50"></text></g><g><title>check_private_in_public (243,693 samples, 0.18%)</title><rect x="22.4814%" y="197" width="0.1794%" height="15" fill="rgb(238,167,29)"/><text x="22.7314%" y="207.50"></text></g><g><title>death_checking (375,954 samples, 0.28%)</title><rect x="22.6608%" y="197" width="0.2768%" height="15" fill="rgb(232,182,51)"/><text x="22.9108%" y="207.50"></text></g><g><title>crate_lints (971,551 samples, 0.72%)</title><rect x="22.9389%" y="181" width="0.7152%" height="15" fill="rgb(231,60,39)"/><text x="23.1889%" y="191.50"></text></g><g><title>param_env (279,714 samples, 0.21%)</title><rect x="23.4482%" y="165" width="0.2059%" height="15" fill="rgb(208,69,12)"/><text x="23.6982%" y="175.50"></text></g><g><title>predicates_of (141,040 samples, 0.10%)</title><rect x="23.5503%" y="149" width="0.1038%" height="15" fill="rgb(235,93,37)"/><text x="23.8003%" y="159.50"></text></g><g><title>lint_checking (1,261,574 samples, 0.93%)</title><rect x="22.9376%" y="197" width="0.9287%" height="15" fill="rgb(213,116,39)"/><text x="23.1876%" y="207.50"></text></g><g><title>module_lints (288,233 samples, 0.21%)</title><rect x="23.6541%" y="181" width="0.2122%" height="15" fill="rgb(222,207,29)"/><text x="23.9041%" y="191.50"></text></g><g><title>lint_mod (286,403 samples, 0.21%)</title><rect x="23.6555%" y="165" width="0.2108%" height="15" fill="rgb(206,96,30)"/><text x="23.9055%" y="175.50"></text></g><g><title>privacy_access_levels (357,414 samples, 0.26%)</title><rect x="23.8663%" y="197" width="0.2631%" height="15" fill="rgb(218,138,4)"/><text x="24.1163%" y="207.50"></text></g><g><title>privacy_checking_modules (2,087,503 samples, 1.54%)</title><rect x="24.1294%" y="197" width="1.5367%" height="15" fill="rgb(250,191,14)"/><text x="24.3794%" y="207.50"></text></g><g><title>check_mod_privacy (2,086,013 samples, 1.54%)</title><rect x="24.1305%" y="181" width="1.5356%" height="15" fill="rgb(239,60,40)"/><text x="24.3805%" y="191.50"></text></g><g><title>misc_checking_3 (4,355,148 samples, 3.21%)</title><rect x="22.4744%" y="213" width="3.2061%" height="15" fill="rgb(206,27,48)"/><text x="22.7244%" y="223.50">mis..</text></g><g><title>coherence_checking (158,092 samples, 0.12%)</title><rect x="25.7486%" y="197" width="0.1164%" height="15" fill="rgb(225,35,8)"/><text x="25.9986%" y="207.50"></text></g><g><title>impl_trait_ref (336,693 samples, 0.25%)</title><rect x="31.4363%" y="53" width="0.2479%" height="15" fill="rgb(250,213,24)"/><text x="31.6863%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (317,233 samples, 0.23%)</title><rect x="31.4506%" y="37" width="0.2335%" height="15" fill="rgb(247,123,22)"/><text x="31.7006%" y="47.50"></text></g><g><title>coherent_trait (536,976 samples, 0.40%)</title><rect x="31.3119%" y="85" width="0.3953%" height="15" fill="rgb(231,138,38)"/><text x="31.5619%" y="95.50"></text></g><g><title>specialization_graph_of (534,136 samples, 0.39%)</title><rect x="31.3140%" y="69" width="0.3932%" height="15" fill="rgb(231,145,46)"/><text x="31.5640%" y="79.50"></text></g><g><title>adt_destructor (545,756 samples, 0.40%)</title><rect x="31.3075%" y="117" width="0.4018%" height="15" fill="rgb(251,118,11)"/><text x="31.5575%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (544,916 samples, 0.40%)</title><rect x="31.3082%" y="101" width="0.4011%" height="15" fill="rgb(217,147,25)"/><text x="31.5582%" y="111.50"></text></g><g><title>dropck_outlives (709,577 samples, 0.52%)</title><rect x="31.1885%" y="149" width="0.5224%" height="15" fill="rgb(247,81,37)"/><text x="31.4385%" y="159.50"></text></g><g><title>adt_dtorck_constraint (556,406 samples, 0.41%)</title><rect x="31.3012%" y="133" width="0.4096%" height="15" fill="rgb(209,12,38)"/><text x="31.5512%" y="143.50"></text></g><g><title>evaluate_obligation (679,945 samples, 0.50%)</title><rect x="31.7108%" y="149" width="0.5005%" height="15" fill="rgb(227,1,9)"/><text x="31.9608%" y="159.50"></text></g><g><title>impl_item_implementor_ids (221,152 samples, 0.16%)</title><rect x="39.3825%" y="117" width="0.1628%" height="15" fill="rgb(248,47,43)"/><text x="39.6325%" y="127.50"></text></g><g><title>associated_items (189,382 samples, 0.14%)</title><rect x="39.4059%" y="101" width="0.1394%" height="15" fill="rgb(221,10,30)"/><text x="39.6559%" y="111.50"></text></g><g><title>predicates_of (152,250 samples, 0.11%)</title><rect x="39.6767%" y="117" width="0.1121%" height="15" fill="rgb(210,229,1)"/><text x="39.9267%" y="127.50"></text></g><g><title>opt_const_param_of (10,260,857 samples, 7.55%)</title><rect x="32.3357%" y="149" width="7.5537%" height="15" fill="rgb(222,148,37)"/><text x="32.5857%" y="159.50">opt_const_..</text></g><g><title>typeck (10,115,446 samples, 7.45%)</title><rect x="32.4427%" y="133" width="7.4466%" height="15" fill="rgb(234,67,33)"/><text x="32.6927%" y="143.50">typeck</text></g><g><title>explicit_predicates_of (178,572 samples, 0.13%)</title><rect x="41.3315%" y="85" width="0.1315%" height="15" fill="rgb(247,98,35)"/><text x="41.5815%" y="95.50"></text></g><g><title>param_env (641,885 samples, 0.47%)</title><rect x="41.0008%" y="133" width="0.4725%" height="15" fill="rgb(247,138,52)"/><text x="41.2508%" y="143.50"></text></g><g><title>predicates_of (294,922 samples, 0.22%)</title><rect x="41.2562%" y="117" width="0.2171%" height="15" fill="rgb(213,79,30)"/><text x="41.5062%" y="127.50"></text></g><g><title>predicates_defined_on (257,042 samples, 0.19%)</title><rect x="41.2841%" y="101" width="0.1892%" height="15" fill="rgb(246,177,23)"/><text x="41.5341%" y="111.50"></text></g><g><title>region_scope_tree (141,742 samples, 0.10%)</title><rect x="41.5456%" y="133" width="0.1043%" height="15" fill="rgb(230,62,27)"/><text x="41.7956%" y="143.50"></text></g><g><title>typeck_const_arg (2,311,415 samples, 1.70%)</title><rect x="39.9549%" y="149" width="1.7016%" height="15" fill="rgb(216,154,8)"/><text x="40.2049%" y="159.50"></text></g><g><title>item_bodies_checking (21,431,718 samples, 15.78%)</title><rect x="25.8989%" y="197" width="15.7772%" height="15" fill="rgb(244,35,45)"/><text x="26.1489%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,428,128 samples, 15.77%)</title><rect x="25.9016%" y="181" width="15.7746%" height="15" fill="rgb(251,115,12)"/><text x="26.1516%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (21,272,607 samples, 15.66%)</title><rect x="26.0161%" y="165" width="15.6601%" height="15" fill="rgb(240,54,50)"/><text x="26.2661%" y="175.50">typeck</text></g><g><title>evaluate_obligation (215,603 samples, 0.16%)</title><rect x="43.6748%" y="165" width="0.1587%" height="15" fill="rgb(233,84,52)"/><text x="43.9248%" y="175.50"></text></g><g><title>item_types_checking (2,997,964 samples, 2.21%)</title><rect x="41.6762%" y="197" width="2.2070%" height="15" fill="rgb(207,117,47)"/><text x="41.9262%" y="207.50">i..</text></g><g><title>check_mod_item_types (2,995,474 samples, 2.21%)</title><rect x="41.6780%" y="181" width="2.2052%" height="15" fill="rgb(249,43,39)"/><text x="41.9280%" y="191.50">c..</text></g><g><title>super_predicates_that_define_assoc_type (153,423 samples, 0.11%)</title><rect x="45.2543%" y="149" width="0.1129%" height="15" fill="rgb(209,38,44)"/><text x="45.5043%" y="159.50"></text></g><g><title>fn_sig (1,662,236 samples, 1.22%)</title><rect x="44.1995%" y="165" width="1.2237%" height="15" fill="rgb(236,212,23)"/><text x="44.4495%" y="175.50"></text></g><g><title>is_late_bound_map (412,315 samples, 0.30%)</title><rect x="45.5802%" y="149" width="0.3035%" height="15" fill="rgb(242,79,21)"/><text x="45.8302%" y="159.50"></text></g><g><title>resolve_lifetimes (377,554 samples, 0.28%)</title><rect x="45.6058%" y="133" width="0.2779%" height="15" fill="rgb(211,96,35)"/><text x="45.8558%" y="143.50"></text></g><g><title>named_region_map (367,169 samples, 0.27%)</title><rect x="45.8838%" y="149" width="0.2703%" height="15" fill="rgb(253,215,40)"/><text x="46.1338%" y="159.50"></text></g><g><title>resolve_lifetimes (335,439 samples, 0.25%)</title><rect x="45.9071%" y="133" width="0.2469%" height="15" fill="rgb(211,81,21)"/><text x="46.1571%" y="143.50"></text></g><g><title>generics_of (1,017,814 samples, 0.75%)</title><rect x="45.4232%" y="165" width="0.7493%" height="15" fill="rgb(208,190,38)"/><text x="45.6732%" y="175.50"></text></g><g><title>explicit_predicates_of (165,781 samples, 0.12%)</title><rect x="46.4216%" y="133" width="0.1220%" height="15" fill="rgb(235,213,38)"/><text x="46.6716%" y="143.50"></text></g><g><title>predicates_of (396,876 samples, 0.29%)</title><rect x="46.2660%" y="165" width="0.2922%" height="15" fill="rgb(237,122,38)"/><text x="46.5160%" y="175.50"></text></g><g><title>predicates_defined_on (318,155 samples, 0.23%)</title><rect x="46.3239%" y="149" width="0.2342%" height="15" fill="rgb(244,218,35)"/><text x="46.5739%" y="159.50"></text></g><g><title>type_collecting (3,927,244 samples, 2.89%)</title><rect x="43.8846%" y="197" width="2.8911%" height="15" fill="rgb(240,68,47)"/><text x="44.1346%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (3,919,954 samples, 2.89%)</title><rect x="43.8900%" y="181" width="2.8857%" height="15" fill="rgb(210,16,53)"/><text x="44.1400%" y="191.50">co..</text></g><g><title>type_of (162,630 samples, 0.12%)</title><rect x="46.6560%" y="165" width="0.1197%" height="15" fill="rgb(235,124,12)"/><text x="46.9060%" y="175.50"></text></g><g><title>implied_outlives_bounds (137,712 samples, 0.10%)</title><rect x="49.5656%" y="165" width="0.1014%" height="15" fill="rgb(224,169,11)"/><text x="49.8156%" y="175.50"></text></g><g><title>param_env (531,015 samples, 0.39%)</title><rect x="49.6670%" y="165" width="0.3909%" height="15" fill="rgb(250,166,2)"/><text x="49.9170%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,410,641 samples, 3.25%)</title><rect x="47.0844%" y="181" width="3.2469%" height="15" fill="rgb(242,216,29)"/><text x="47.3344%" y="191.50">che..</text></g><g><title>region_scope_tree (353,246 samples, 0.26%)</title><rect x="50.0713%" y="165" width="0.2600%" height="15" fill="rgb(230,116,27)"/><text x="50.3213%" y="175.50"></text></g><g><title>generics_of (226,261 samples, 0.17%)</title><rect x="55.1211%" y="149" width="0.1666%" height="15" fill="rgb(228,99,48)"/><text x="55.3711%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (145,121 samples, 0.11%)</title><rect x="55.1808%" y="133" width="0.1068%" height="15" fill="rgb(253,11,6)"/><text x="55.4308%" y="143.50"></text></g><g><title>associated_item (254,822 samples, 0.19%)</title><rect x="55.3841%" y="117" width="0.1876%" height="15" fill="rgb(247,143,39)"/><text x="55.6341%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (225,642 samples, 0.17%)</title><rect x="55.4056%" y="101" width="0.1661%" height="15" fill="rgb(236,97,10)"/><text x="55.6556%" y="111.50"></text></g><g><title>impl_item_implementor_ids (424,633 samples, 0.31%)</title><rect x="55.2876%" y="149" width="0.3126%" height="15" fill="rgb(233,208,19)"/><text x="55.5376%" y="159.50"></text></g><g><title>associated_items (375,303 samples, 0.28%)</title><rect x="55.3239%" y="133" width="0.2763%" height="15" fill="rgb(216,164,2)"/><text x="55.5739%" y="143.50"></text></g><g><title>impl_polarity (140,210 samples, 0.10%)</title><rect x="55.6002%" y="149" width="0.1032%" height="15" fill="rgb(220,129,5)"/><text x="55.8502%" y="159.50"></text></g><g><title>impl_trait_ref (684,082 samples, 0.50%)</title><rect x="55.7034%" y="149" width="0.5036%" height="15" fill="rgb(242,17,10)"/><text x="55.9534%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (343,798 samples, 0.25%)</title><rect x="55.9539%" y="133" width="0.2531%" height="15" fill="rgb(242,107,0)"/><text x="56.2039%" y="143.50"></text></g><g><title>predicates_of (743,896 samples, 0.55%)</title><rect x="56.2112%" y="149" width="0.5476%" height="15" fill="rgb(251,28,31)"/><text x="56.4612%" y="159.50"></text></g><g><title>predicates_defined_on (403,976 samples, 0.30%)</title><rect x="56.4614%" y="133" width="0.2974%" height="15" fill="rgb(233,223,10)"/><text x="56.7114%" y="143.50"></text></g><g><title>trait_impls_of (680,258 samples, 0.50%)</title><rect x="56.7665%" y="149" width="0.5008%" height="15" fill="rgb(215,21,27)"/><text x="57.0165%" y="159.50"></text></g><g><title>implementations_of_trait (191,212 samples, 0.14%)</title><rect x="57.1265%" y="133" width="0.1408%" height="15" fill="rgb(232,23,21)"/><text x="57.3765%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (141,202 samples, 0.10%)</title><rect x="57.1633%" y="117" width="0.1039%" height="15" fill="rgb(244,5,23)"/><text x="57.4133%" y="127.50"></text></g><g><title>evaluate_obligation (5,698,130 samples, 4.19%)</title><rect x="53.0969%" y="165" width="4.1947%" height="15" fill="rgb(226,81,46)"/><text x="53.3469%" y="175.50">evalu..</text></g><g><title>implied_outlives_bounds (180,520 samples, 0.13%)</title><rect x="57.3103%" y="165" width="0.1329%" height="15" fill="rgb(247,70,30)"/><text x="57.5603%" y="175.50"></text></g><g><title>param_env (517,239 samples, 0.38%)</title><rect x="57.4480%" y="165" width="0.3808%" height="15" fill="rgb(212,68,19)"/><text x="57.6980%" y="175.50"></text></g><g><title>check_item_well_formed (10,679,178 samples, 7.86%)</title><rect x="50.3313%" y="181" width="7.8616%" height="15" fill="rgb(240,187,13)"/><text x="50.5813%" y="191.50">check_item_..</text></g><g><title>trait_impls_of (352,595 samples, 0.26%)</title><rect x="57.9334%" y="165" width="0.2596%" height="15" fill="rgb(223,113,26)"/><text x="58.1834%" y="175.50"></text></g><g><title>implementations_of_trait (165,863 samples, 0.12%)</title><rect x="58.0708%" y="149" width="0.1221%" height="15" fill="rgb(206,192,2)"/><text x="58.3208%" y="159.50"></text></g><g><title>param_env (188,683 samples, 0.14%)</title><rect x="58.8203%" y="165" width="0.1389%" height="15" fill="rgb(241,108,4)"/><text x="59.0703%" y="175.50"></text></g><g><title>analysis (78,847,756 samples, 58.04%)</title><rect x="0.9473%" y="229" width="58.0448%" height="15" fill="rgb(247,173,49)"/><text x="1.1973%" y="239.50">analysis</text></g><g><title>type_check_crate (45,250,303 samples, 33.31%)</title><rect x="25.6805%" y="213" width="33.3116%" height="15" fill="rgb(224,114,35)"/><text x="25.9305%" y="223.50">type_check_crate</text></g><g><title>wf_checking (16,581,524 samples, 12.21%)</title><rect x="46.7854%" y="197" width="12.2067%" height="15" fill="rgb(245,159,27)"/><text x="47.0354%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,085,562 samples, 0.80%)</title><rect x="58.1929%" y="181" width="0.7991%" height="15" fill="rgb(245,172,44)"/><text x="58.4429%" y="191.50"></text></g><g><title>codegen_crate (570,366 samples, 0.42%)</title><rect x="59.0004%" y="229" width="0.4199%" height="15" fill="rgb(236,23,11)"/><text x="59.2504%" y="239.50"></text></g><g><title>AST_validation (545,776 samples, 0.40%)</title><rect x="59.5899%" y="213" width="0.4018%" height="15" fill="rgb(205,117,38)"/><text x="59.8399%" y="223.50"></text></g><g><title>complete_gated_feature_checking (153,152 samples, 0.11%)</title><rect x="59.9917%" y="213" width="0.1127%" height="15" fill="rgb(237,72,25)"/><text x="60.2417%" y="223.50"></text></g><g><title>metadata_load_macro (244,382 samples, 0.18%)</title><rect x="80.8029%" y="181" width="0.1799%" height="15" fill="rgb(244,70,9)"/><text x="81.0529%" y="191.50"></text></g><g><title>macro_expand_crate (31,450,810 samples, 23.15%)</title><rect x="60.1573%" y="213" width="23.1529%" height="15" fill="rgb(217,125,39)"/><text x="60.4073%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (31,432,040 samples, 23.14%)</title><rect x="60.1711%" y="197" width="23.1391%" height="15" fill="rgb(235,36,10)"/><text x="60.4211%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (3,161,495 samples, 2.33%)</title><rect x="80.9829%" y="181" width="2.3274%" height="15" fill="rgb(251,123,47)"/><text x="81.2329%" y="191.50">m..</text></g><g><title>metadata_register_crate (1,124,311 samples, 0.83%)</title><rect x="82.4825%" y="165" width="0.8277%" height="15" fill="rgb(221,13,13)"/><text x="82.7325%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (158,962 samples, 0.12%)</title><rect x="83.3161%" y="213" width="0.1170%" height="15" fill="rgb(238,131,9)"/><text x="83.5661%" y="223.50"></text></g><g><title>finalize_imports (521,206 samples, 0.38%)</title><rect x="83.4405%" y="197" width="0.3837%" height="15" fill="rgb(211,50,8)"/><text x="83.6905%" y="207.50"></text></g><g><title>finalize_macro_resolutions (200,012 samples, 0.15%)</title><rect x="83.8242%" y="197" width="0.1472%" height="15" fill="rgb(245,182,24)"/><text x="84.0742%" y="207.50"></text></g><g><title>late_resolve_crate (3,376,007 samples, 2.49%)</title><rect x="83.9715%" y="197" width="2.4853%" height="15" fill="rgb(242,14,37)"/><text x="84.2215%" y="207.50">la..</text></g><g><title>configure_and_expand (36,978,971 samples, 27.22%)</title><rect x="59.4203%" y="229" width="27.2225%" height="15" fill="rgb(246,228,12)"/><text x="59.6703%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (4,360,018 samples, 3.21%)</title><rect x="83.4331%" y="213" width="3.2097%" height="15" fill="rgb(213,55,15)"/><text x="83.6831%" y="223.50">res..</text></g><g><title>drop_ast (376,314 samples, 0.28%)</title><rect x="86.6428%" y="229" width="0.2770%" height="15" fill="rgb(209,9,3)"/><text x="86.8928%" y="239.50"></text></g><g><title>early_lint_checks (326,154 samples, 0.24%)</title><rect x="86.9340%" y="229" width="0.2401%" height="15" fill="rgb(230,59,30)"/><text x="87.1840%" y="239.50"></text></g><g><title>free_global_ctxt (2,938,112 samples, 2.16%)</title><rect x="87.1741%" y="229" width="2.1629%" height="15" fill="rgb(209,121,21)"/><text x="87.4241%" y="239.50">f..</text></g><g><title>mir_for_ctfe (215,313 samples, 0.16%)</title><rect x="90.5975%" y="213" width="0.1585%" height="15" fill="rgb(220,109,13)"/><text x="90.8475%" y="223.50"></text></g><g><title>mir_for_ctfe_of_const_arg (191,792 samples, 0.14%)</title><rect x="90.6148%" y="197" width="0.1412%" height="15" fill="rgb(232,18,1)"/><text x="90.8648%" y="207.50"></text></g><g><title>generate_crate_metadata (2,144,714 samples, 1.58%)</title><rect x="89.3371%" y="229" width="1.5789%" height="15" fill="rgb(215,41,42)"/><text x="89.5871%" y="239.50"></text></g><g><title>hir_lowering (7,508,763 samples, 5.53%)</title><rect x="90.9159%" y="229" width="5.5277%" height="15" fill="rgb(224,123,36)"/><text x="91.1659%" y="239.50">hir_low..</text></g><g><title>parse_crate (3,141,025 samples, 2.31%)</title><rect x="96.4856%" y="229" width="2.3123%" height="15" fill="rgb(240,125,3)"/><text x="96.7356%" y="239.50">p..</text></g><g><title>prepare_outputs (338,634 samples, 0.25%)</title><rect x="98.8070%" y="229" width="0.2493%" height="15" fill="rgb(205,98,50)"/><text x="99.0570%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (784,149 samples, 0.58%)</title><rect x="99.0563%" y="229" width="0.5773%" height="15" fill="rgb(205,185,37)"/><text x="99.3063%" y="239.50"></text></g><g><title>all (135,839,589 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (135,839,589 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (399,735 samples, 0.29%)</title><rect x="99.7057%" y="229" width="0.2943%" height="15" fill="rgb(235,201,11)"/><text x="99.9557%" y="239.50"></text></g></svg></svg>