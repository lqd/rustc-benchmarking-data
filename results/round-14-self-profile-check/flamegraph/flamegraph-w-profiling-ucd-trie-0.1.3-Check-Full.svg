<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (164,863 samples, 0.16%)</title><rect x="7.9724%" y="117" width="0.1632%" height="15" fill="rgb(227,0,7)"/><text x="8.2224%" y="127.50"></text></g><g><title>item_attrs (163,291 samples, 0.16%)</title><rect x="8.4139%" y="85" width="0.1617%" height="15" fill="rgb(217,0,24)"/><text x="8.6639%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (158,031 samples, 0.16%)</title><rect x="8.4191%" y="69" width="0.1565%" height="15" fill="rgb(221,193,54)"/><text x="8.6691%" y="79.50"></text></g><g><title>codegen_fn_attrs (233,882 samples, 0.23%)</title><rect x="8.3584%" y="101" width="0.2315%" height="15" fill="rgb(248,212,6)"/><text x="8.6084%" y="111.50"></text></g><g><title>adt_drop_tys (193,752 samples, 0.19%)</title><rect x="10.2205%" y="69" width="0.1918%" height="15" fill="rgb(208,68,35)"/><text x="10.4705%" y="79.50"></text></g><g><title>needs_drop_raw (810,569 samples, 0.80%)</title><rect x="10.1533%" y="85" width="0.8025%" height="15" fill="rgb(232,128,0)"/><text x="10.4033%" y="95.50"></text></g><g><title>is_copy_raw (548,936 samples, 0.54%)</title><rect x="10.4123%" y="69" width="0.5435%" height="15" fill="rgb(207,160,47)"/><text x="10.6623%" y="79.50"></text></g><g><title>evaluate_obligation (467,415 samples, 0.46%)</title><rect x="10.4930%" y="53" width="0.4628%" height="15" fill="rgb(228,23,34)"/><text x="10.7430%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (133,822 samples, 0.13%)</title><rect x="11.0543%" y="69" width="0.1325%" height="15" fill="rgb(218,30,26)"/><text x="11.3043%" y="79.50"></text></g><g><title>impl_parent (204,522 samples, 0.20%)</title><rect x="11.4900%" y="53" width="0.2025%" height="15" fill="rgb(220,122,19)"/><text x="11.7400%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (140,601 samples, 0.14%)</title><rect x="11.5533%" y="37" width="0.1392%" height="15" fill="rgb(250,228,42)"/><text x="11.8033%" y="47.50"></text></g><g><title>specialization_graph_of (929,780 samples, 0.92%)</title><rect x="11.2053%" y="69" width="0.9205%" height="15" fill="rgb(240,193,28)"/><text x="11.4553%" y="79.50"></text></g><g><title>impl_trait_ref (437,736 samples, 0.43%)</title><rect x="11.6925%" y="53" width="0.4334%" height="15" fill="rgb(216,20,37)"/><text x="11.9425%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (376,045 samples, 0.37%)</title><rect x="11.7535%" y="37" width="0.3723%" height="15" fill="rgb(206,188,39)"/><text x="12.0035%" y="47.50"></text></g><g><title>resolve_instance (1,216,944 samples, 1.20%)</title><rect x="10.9558%" y="85" width="1.2048%" height="15" fill="rgb(217,207,13)"/><text x="11.2058%" y="95.50"></text></g><g><title>thir_body (528,187 samples, 0.52%)</title><rect x="12.1702%" y="85" width="0.5229%" height="15" fill="rgb(231,73,38)"/><text x="12.4202%" y="95.50"></text></g><g><title>mir_const (5,214,867 samples, 5.16%)</title><rect x="7.5411%" y="133" width="5.1629%" height="15" fill="rgb(225,20,46)"/><text x="7.7911%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (4,614,391 samples, 4.57%)</title><rect x="8.1356%" y="117" width="4.5684%" height="15" fill="rgb(210,31,41)"/><text x="8.3856%" y="127.50">unsaf..</text></g><g><title>mir_built (4,155,487 samples, 4.11%)</title><rect x="8.5899%" y="101" width="4.1141%" height="15" fill="rgb(221,200,47)"/><text x="8.8399%" y="111.50">mir_..</text></g><g><title>mir_promoted (5,890,303 samples, 5.83%)</title><rect x="7.1162%" y="149" width="5.8316%" height="15" fill="rgb(226,26,5)"/><text x="7.3662%" y="159.50">mir_pro..</text></g><g><title>mir_const_qualif (246,262 samples, 0.24%)</title><rect x="12.7040%" y="133" width="0.2438%" height="15" fill="rgb(249,33,26)"/><text x="12.9540%" y="143.50"></text></g><g><title>mir_const (176,562 samples, 0.17%)</title><rect x="12.7730%" y="117" width="0.1748%" height="15" fill="rgb(235,183,28)"/><text x="13.0230%" y="127.50"></text></g><g><title>unsafety_check_result (116,701 samples, 0.12%)</title><rect x="12.8322%" y="101" width="0.1155%" height="15" fill="rgb(221,5,38)"/><text x="13.0822%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (305,643 samples, 0.30%)</title><rect x="12.9478%" y="149" width="0.3026%" height="15" fill="rgb(247,18,42)"/><text x="13.1978%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (570,649 samples, 0.56%)</title><rect x="13.2504%" y="149" width="0.5650%" height="15" fill="rgb(241,131,45)"/><text x="13.5004%" y="159.50"></text></g><g><title>normalize_projection_ty (406,178 samples, 0.40%)</title><rect x="13.4132%" y="133" width="0.4021%" height="15" fill="rgb(249,31,29)"/><text x="13.6632%" y="143.50"></text></g><g><title>type_op_normalize_predicate (128,322 samples, 0.13%)</title><rect x="13.8153%" y="149" width="0.1270%" height="15" fill="rgb(225,111,53)"/><text x="14.0653%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,186,339 samples, 1.17%)</title><rect x="13.9569%" y="149" width="1.1745%" height="15" fill="rgb(238,160,17)"/><text x="14.2069%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,644,982 samples, 14.50%)</title><rect x="0.6483%" y="181" width="14.4989%" height="15" fill="rgb(214,148,48)"/><text x="0.8983%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,602,150 samples, 14.46%)</title><rect x="0.6907%" y="165" width="14.4565%" height="15" fill="rgb(232,36,49)"/><text x="0.9407%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (123,751 samples, 0.12%)</title><rect x="15.1472%" y="181" width="0.1225%" height="15" fill="rgb(209,103,24)"/><text x="15.3972%" y="191.50"></text></g><g><title>hir_module_items (112,632 samples, 0.11%)</title><rect x="15.2697%" y="181" width="0.1115%" height="15" fill="rgb(229,88,8)"/><text x="15.5197%" y="191.50"></text></g><g><title>codegen_fn_attrs (136,442 samples, 0.14%)</title><rect x="15.6344%" y="117" width="0.1351%" height="15" fill="rgb(213,181,19)"/><text x="15.8844%" y="127.50"></text></g><g><title>codegen_fn_attrs (248,962 samples, 0.25%)</title><rect x="15.5259%" y="149" width="0.2465%" height="15" fill="rgb(254,191,54)"/><text x="15.7759%" y="159.50"></text></g><g><title>should_inherit_track_caller (197,052 samples, 0.20%)</title><rect x="15.5773%" y="133" width="0.1951%" height="15" fill="rgb(241,83,37)"/><text x="15.8273%" y="143.50"></text></g><g><title>check_mod_attrs (374,474 samples, 0.37%)</title><rect x="15.4018%" y="165" width="0.3707%" height="15" fill="rgb(233,36,39)"/><text x="15.6518%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (369,604 samples, 0.37%)</title><rect x="15.8765%" y="165" width="0.3659%" height="15" fill="rgb(226,3,54)"/><text x="16.1265%" y="175.50"></text></g><g><title>misc_checking_1 (909,311 samples, 0.90%)</title><rect x="15.3818%" y="181" width="0.9002%" height="15" fill="rgb(245,192,40)"/><text x="15.6318%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (285,294 samples, 0.28%)</title><rect x="16.2833%" y="165" width="0.2824%" height="15" fill="rgb(238,167,29)"/><text x="16.5333%" y="175.50"></text></g><g><title>check_mod_liveness (232,653 samples, 0.23%)</title><rect x="16.3354%" y="149" width="0.2303%" height="15" fill="rgb(232,182,51)"/><text x="16.5854%" y="159.50"></text></g><g><title>misc_checking_2 (560,687 samples, 0.56%)</title><rect x="16.2820%" y="181" width="0.5551%" height="15" fill="rgb(231,60,39)"/><text x="16.5320%" y="191.50"></text></g><g><title>match_checking (274,073 samples, 0.27%)</title><rect x="16.5658%" y="165" width="0.2713%" height="15" fill="rgb(208,69,12)"/><text x="16.8158%" y="175.50"></text></g><g><title>check_match (262,802 samples, 0.26%)</title><rect x="16.5769%" y="149" width="0.2602%" height="15" fill="rgb(235,93,37)"/><text x="16.8269%" y="159.50"></text></g><g><title>death_checking (225,742 samples, 0.22%)</title><rect x="16.9424%" y="165" width="0.2235%" height="15" fill="rgb(213,116,39)"/><text x="17.1924%" y="175.50"></text></g><g><title>eval_to_const_value_raw (150,661 samples, 0.15%)</title><rect x="17.6973%" y="133" width="0.1492%" height="15" fill="rgb(222,207,29)"/><text x="17.9473%" y="143.50"></text></g><g><title>eval_to_const_value_raw (142,831 samples, 0.14%)</title><rect x="17.7050%" y="117" width="0.1414%" height="15" fill="rgb(206,96,30)"/><text x="17.9550%" y="127.50"></text></g><g><title>eval_to_allocation_raw (141,011 samples, 0.14%)</title><rect x="17.7068%" y="101" width="0.1396%" height="15" fill="rgb(218,138,4)"/><text x="17.9568%" y="111.50"></text></g><g><title>param_env (105,183 samples, 0.10%)</title><rect x="17.8464%" y="133" width="0.1041%" height="15" fill="rgb(250,191,14)"/><text x="18.0964%" y="143.50"></text></g><g><title>crate_lints (1,869,591 samples, 1.85%)</title><rect x="17.1672%" y="149" width="1.8509%" height="15" fill="rgb(239,60,40)"/><text x="17.4172%" y="159.50">c..</text></g><g><title>type_of (1,069,191 samples, 1.06%)</title><rect x="17.9597%" y="133" width="1.0585%" height="15" fill="rgb(206,27,48)"/><text x="18.2097%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (839,817 samples, 0.83%)</title><rect x="18.1867%" y="117" width="0.8314%" height="15" fill="rgb(225,35,8)"/><text x="18.4367%" y="127.50"></text></g><g><title>lint_checking (2,122,844 samples, 2.10%)</title><rect x="17.1659%" y="165" width="2.1017%" height="15" fill="rgb(250,213,24)"/><text x="17.4159%" y="175.50">l..</text></g><g><title>module_lints (251,873 samples, 0.25%)</title><rect x="19.0182%" y="149" width="0.2494%" height="15" fill="rgb(247,123,22)"/><text x="19.2682%" y="159.50"></text></g><g><title>lint_mod (248,713 samples, 0.25%)</title><rect x="19.0213%" y="133" width="0.2462%" height="15" fill="rgb(231,138,38)"/><text x="19.2713%" y="143.50"></text></g><g><title>privacy_access_levels (117,522 samples, 0.12%)</title><rect x="19.2675%" y="165" width="0.1164%" height="15" fill="rgb(231,145,46)"/><text x="19.5175%" y="175.50"></text></g><g><title>privacy_checking_modules (402,864 samples, 0.40%)</title><rect x="19.3839%" y="165" width="0.3988%" height="15" fill="rgb(251,118,11)"/><text x="19.6339%" y="175.50"></text></g><g><title>check_mod_privacy (400,624 samples, 0.40%)</title><rect x="19.3861%" y="149" width="0.3966%" height="15" fill="rgb(217,147,25)"/><text x="19.6361%" y="159.50"></text></g><g><title>misc_checking_3 (2,985,883 samples, 2.96%)</title><rect x="16.8371%" y="181" width="2.9561%" height="15" fill="rgb(247,81,37)"/><text x="17.0871%" y="191.50">mis..</text></g><g><title>impl_parent (109,790 samples, 0.11%)</title><rect x="20.1403%" y="85" width="0.1087%" height="15" fill="rgb(209,12,38)"/><text x="20.3903%" y="95.50"></text></g><g><title>impl_trait_ref (311,982 samples, 0.31%)</title><rect x="20.2490%" y="85" width="0.3089%" height="15" fill="rgb(227,1,9)"/><text x="20.4990%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (265,042 samples, 0.26%)</title><rect x="20.2955%" y="69" width="0.2624%" height="15" fill="rgb(248,47,43)"/><text x="20.5455%" y="79.50"></text></g><g><title>adt_destructor (683,398 samples, 0.68%)</title><rect x="19.9412%" y="133" width="0.6766%" height="15" fill="rgb(221,10,30)"/><text x="20.1912%" y="143.50"></text></g><g><title>coherent_trait (667,457 samples, 0.66%)</title><rect x="19.9569%" y="117" width="0.6608%" height="15" fill="rgb(210,229,1)"/><text x="20.2069%" y="127.50"></text></g><g><title>specialization_graph_of (664,127 samples, 0.66%)</title><rect x="19.9602%" y="101" width="0.6575%" height="15" fill="rgb(222,148,37)"/><text x="20.2102%" y="111.50"></text></g><g><title>is_copy_raw (754,859 samples, 0.75%)</title><rect x="20.6178%" y="133" width="0.7473%" height="15" fill="rgb(234,67,33)"/><text x="20.8678%" y="143.50"></text></g><g><title>evaluate_obligation (695,518 samples, 0.69%)</title><rect x="20.6765%" y="117" width="0.6886%" height="15" fill="rgb(247,98,35)"/><text x="20.9265%" y="127.50"></text></g><g><title>impl_parent (3,819,906 samples, 3.78%)</title><rect x="28.8364%" y="117" width="3.7818%" height="15" fill="rgb(247,138,52)"/><text x="29.0864%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (2,036,618 samples, 2.02%)</title><rect x="30.6019%" y="101" width="2.0163%" height="15" fill="rgb(213,79,30)"/><text x="30.8519%" y="111.50">m..</text></g><g><title>impl_trait_ref (10,125,621 samples, 10.02%)</title><rect x="32.6182%" y="117" width="10.0247%" height="15" fill="rgb(246,177,23)"/><text x="32.8682%" y="127.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (8,360,244 samples, 8.28%)</title><rect x="34.3660%" y="101" width="8.2769%" height="15" fill="rgb(230,62,27)"/><text x="34.6160%" y="111.50">metadata_dec..</text></g><g><title>trait_impls_of (1,484,105 samples, 1.47%)</title><rect x="42.6927%" y="117" width="1.4693%" height="15" fill="rgb(216,154,8)"/><text x="42.9427%" y="127.50"></text></g><g><title>implementations_of_trait (345,194 samples, 0.34%)</title><rect x="43.8202%" y="101" width="0.3418%" height="15" fill="rgb(244,35,45)"/><text x="44.0702%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (282,174 samples, 0.28%)</title><rect x="43.8826%" y="85" width="0.2794%" height="15" fill="rgb(251,115,12)"/><text x="44.1326%" y="95.50"></text></g><g><title>coherent_trait (24,543,193 samples, 24.30%)</title><rect x="19.8652%" y="149" width="24.2985%" height="15" fill="rgb(240,54,50)"/><text x="20.1152%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (22,960,165 samples, 22.73%)</title><rect x="21.4324%" y="133" width="22.7312%" height="15" fill="rgb(233,84,52)"/><text x="21.6824%" y="143.50">specialization_graph_of</text></g><g><title>coherence_checking (24,684,674 samples, 24.44%)</title><rect x="19.8371%" y="165" width="24.4385%" height="15" fill="rgb(207,117,47)"/><text x="20.0871%" y="175.50">coherence_checking</text></g><g><title>adt_def (149,172 samples, 0.15%)</title><rect x="57.7644%" y="101" width="0.1477%" height="15" fill="rgb(249,43,39)"/><text x="58.0144%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (145,772 samples, 0.14%)</title><rect x="57.7678%" y="85" width="0.1443%" height="15" fill="rgb(209,38,44)"/><text x="58.0178%" y="95.50"></text></g><g><title>item_attrs (111,272 samples, 0.11%)</title><rect x="57.8019%" y="69" width="0.1102%" height="15" fill="rgb(236,212,23)"/><text x="58.0519%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (107,912 samples, 0.11%)</title><rect x="57.8052%" y="53" width="0.1068%" height="15" fill="rgb(242,79,21)"/><text x="58.0552%" y="63.50"></text></g><g><title>adt_def (127,621 samples, 0.13%)</title><rect x="57.9135%" y="85" width="0.1263%" height="15" fill="rgb(211,96,35)"/><text x="58.1635%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (127,341 samples, 0.13%)</title><rect x="57.9138%" y="69" width="0.1261%" height="15" fill="rgb(253,215,40)"/><text x="58.1638%" y="79.50"></text></g><g><title>adt_sized_constraint (146,502 samples, 0.15%)</title><rect x="57.9121%" y="101" width="0.1450%" height="15" fill="rgb(211,81,21)"/><text x="58.1621%" y="111.50"></text></g><g><title>adt_sized_constraint (321,494 samples, 0.32%)</title><rect x="57.7500%" y="117" width="0.3183%" height="15" fill="rgb(208,190,38)"/><text x="58.0000%" y="127.50"></text></g><g><title>associated_item (375,214 samples, 0.37%)</title><rect x="58.2172%" y="101" width="0.3715%" height="15" fill="rgb(235,213,38)"/><text x="58.4672%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (299,873 samples, 0.30%)</title><rect x="58.2918%" y="85" width="0.2969%" height="15" fill="rgb(237,122,38)"/><text x="58.5418%" y="95.50"></text></g><g><title>associated_items (546,286 samples, 0.54%)</title><rect x="58.0766%" y="117" width="0.5408%" height="15" fill="rgb(244,218,35)"/><text x="58.3266%" y="127.50"></text></g><g><title>adt_dtorck_constraint (152,081 samples, 0.15%)</title><rect x="58.9959%" y="69" width="0.1506%" height="15" fill="rgb(240,68,47)"/><text x="59.2459%" y="79.50"></text></g><g><title>adt_dtorck_constraint (212,831 samples, 0.21%)</title><rect x="58.9436%" y="85" width="0.2107%" height="15" fill="rgb(210,16,53)"/><text x="59.1936%" y="95.50"></text></g><g><title>adt_dtorck_constraint (325,782 samples, 0.32%)</title><rect x="58.8518%" y="101" width="0.3225%" height="15" fill="rgb(235,124,12)"/><text x="59.1018%" y="111.50"></text></g><g><title>dropck_outlives (500,864 samples, 0.50%)</title><rect x="58.6898%" y="117" width="0.4959%" height="15" fill="rgb(224,169,11)"/><text x="58.9398%" y="127.50"></text></g><g><title>generics_of (606,133 samples, 0.60%)</title><rect x="63.2663%" y="101" width="0.6001%" height="15" fill="rgb(250,166,2)"/><text x="63.5163%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (443,283 samples, 0.44%)</title><rect x="63.4275%" y="85" width="0.4389%" height="15" fill="rgb(242,216,29)"/><text x="63.6775%" y="95.50"></text></g><g><title>impl_polarity (157,210 samples, 0.16%)</title><rect x="63.9225%" y="101" width="0.1556%" height="15" fill="rgb(230,116,27)"/><text x="64.1725%" y="111.50"></text></g><g><title>impl_trait_ref (868,549 samples, 0.86%)</title><rect x="64.0781%" y="101" width="0.8599%" height="15" fill="rgb(228,99,48)"/><text x="64.3281%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (704,087 samples, 0.70%)</title><rect x="64.2410%" y="85" width="0.6971%" height="15" fill="rgb(253,11,6)"/><text x="64.4910%" y="95.50"></text></g><g><title>opt_def_kind (175,961 samples, 0.17%)</title><rect x="65.2627%" y="85" width="0.1742%" height="15" fill="rgb(247,143,39)"/><text x="65.5127%" y="95.50"></text></g><g><title>explicit_predicates_of (185,232 samples, 0.18%)</title><rect x="65.6758%" y="69" width="0.1834%" height="15" fill="rgb(236,97,10)"/><text x="65.9258%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (101,360 samples, 0.10%)</title><rect x="65.7589%" y="53" width="0.1003%" height="15" fill="rgb(233,208,19)"/><text x="66.0089%" y="63.50"></text></g><g><title>predicates_of (997,481 samples, 0.99%)</title><rect x="65.0080%" y="101" width="0.9875%" height="15" fill="rgb(216,164,2)"/><text x="65.2580%" y="111.50"></text></g><g><title>predicates_defined_on (564,168 samples, 0.56%)</title><rect x="65.4370%" y="85" width="0.5585%" height="15" fill="rgb(220,129,5)"/><text x="65.6870%" y="95.50"></text></g><g><title>inferred_outlives_of (137,653 samples, 0.14%)</title><rect x="65.8592%" y="69" width="0.1363%" height="15" fill="rgb(242,17,10)"/><text x="66.1092%" y="79.50"></text></g><g><title>specializes (2,356,287 samples, 2.33%)</title><rect x="65.9955%" y="101" width="2.3328%" height="15" fill="rgb(242,107,0)"/><text x="66.2455%" y="111.50">s..</text></g><g><title>param_env (1,393,867 samples, 1.38%)</title><rect x="66.9483%" y="85" width="1.3800%" height="15" fill="rgb(251,28,31)"/><text x="67.1983%" y="95.50"></text></g><g><title>def_span (635,257 samples, 0.63%)</title><rect x="67.6994%" y="69" width="0.6289%" height="15" fill="rgb(233,223,10)"/><text x="67.9494%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (563,666 samples, 0.56%)</title><rect x="67.7702%" y="53" width="0.5580%" height="15" fill="rgb(215,21,27)"/><text x="68.0202%" y="63.50"></text></g><g><title>trait_impls_of (830,198 samples, 0.82%)</title><rect x="68.3469%" y="101" width="0.8219%" height="15" fill="rgb(232,23,21)"/><text x="68.5969%" y="111.50"></text></g><g><title>implementations_of_trait (309,541 samples, 0.31%)</title><rect x="68.8624%" y="85" width="0.3065%" height="15" fill="rgb(244,5,23)"/><text x="69.1124%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (215,181 samples, 0.21%)</title><rect x="68.9558%" y="69" width="0.2130%" height="15" fill="rgb(226,81,46)"/><text x="69.2058%" y="79.50"></text></g><g><title>evaluate_obligation (10,096,238 samples, 10.00%)</title><rect x="59.1856%" y="117" width="9.9956%" height="15" fill="rgb(247,70,30)"/><text x="59.4356%" y="127.50">evaluate_oblig..</text></g><g><title>fn_sig (143,431 samples, 0.14%)</title><rect x="69.2091%" y="117" width="0.1420%" height="15" fill="rgb(212,68,19)"/><text x="69.4591%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (123,131 samples, 0.12%)</title><rect x="69.2292%" y="101" width="0.1219%" height="15" fill="rgb(240,187,13)"/><text x="69.4792%" y="111.50"></text></g><g><title>generics_of (180,852 samples, 0.18%)</title><rect x="69.3511%" y="117" width="0.1790%" height="15" fill="rgb(223,113,26)"/><text x="69.6011%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (138,462 samples, 0.14%)</title><rect x="69.3930%" y="101" width="0.1371%" height="15" fill="rgb(206,192,2)"/><text x="69.6430%" y="111.50"></text></g><g><title>impl_item_implementor_ids (128,441 samples, 0.13%)</title><rect x="69.5301%" y="117" width="0.1272%" height="15" fill="rgb(241,108,4)"/><text x="69.7801%" y="127.50"></text></g><g><title>associated_items (110,601 samples, 0.11%)</title><rect x="69.5478%" y="101" width="0.1095%" height="15" fill="rgb(247,173,49)"/><text x="69.7978%" y="111.50"></text></g><g><title>item_attrs (154,142 samples, 0.15%)</title><rect x="69.7935%" y="117" width="0.1526%" height="15" fill="rgb(224,114,35)"/><text x="70.0435%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (147,572 samples, 0.15%)</title><rect x="69.8000%" y="101" width="0.1461%" height="15" fill="rgb(245,159,27)"/><text x="70.0500%" y="111.50"></text></g><g><title>evaluate_obligation (176,434 samples, 0.17%)</title><rect x="70.1861%" y="101" width="0.1747%" height="15" fill="rgb(245,172,44)"/><text x="70.4361%" y="111.50"></text></g><g><title>method_autoderef_steps (331,365 samples, 0.33%)</title><rect x="70.0422%" y="117" width="0.3281%" height="15" fill="rgb(236,23,11)"/><text x="70.2922%" y="127.50"></text></g><g><title>object_safety_violations (138,891 samples, 0.14%)</title><rect x="70.3703%" y="117" width="0.1375%" height="15" fill="rgb(205,117,38)"/><text x="70.6203%" y="127.50"></text></g><g><title>opt_def_kind (234,903 samples, 0.23%)</title><rect x="70.6370%" y="101" width="0.2326%" height="15" fill="rgb(237,72,25)"/><text x="70.8870%" y="111.50"></text></g><g><title>explicit_predicates_of (134,523 samples, 0.13%)</title><rect x="70.9562%" y="85" width="0.1332%" height="15" fill="rgb(244,70,9)"/><text x="71.2062%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (102,943 samples, 0.10%)</title><rect x="70.9874%" y="69" width="0.1019%" height="15" fill="rgb(217,125,39)"/><text x="71.2374%" y="79.50"></text></g><g><title>predicates_of (614,309 samples, 0.61%)</title><rect x="70.5412%" y="117" width="0.6082%" height="15" fill="rgb(235,36,10)"/><text x="70.7912%" y="127.50"></text></g><g><title>predicates_defined_on (282,575 samples, 0.28%)</title><rect x="70.8696%" y="101" width="0.2798%" height="15" fill="rgb(251,123,47)"/><text x="71.1196%" y="111.50"></text></g><g><title>type_of (112,450 samples, 0.11%)</title><rect x="71.2228%" y="117" width="0.1113%" height="15" fill="rgb(221,13,13)"/><text x="71.4728%" y="127.50"></text></g><g><title>item_bodies_checking (27,346,224 samples, 27.07%)</title><rect x="44.3144%" y="165" width="27.0735%" height="15" fill="rgb(238,131,9)"/><text x="44.5644%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (27,343,024 samples, 27.07%)</title><rect x="44.3176%" y="149" width="27.0704%" height="15" fill="rgb(211,50,8)"/><text x="44.5676%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (27,310,274 samples, 27.04%)</title><rect x="44.3500%" y="133" width="27.0380%" height="15" fill="rgb(245,182,24)"/><text x="44.6000%" y="143.50">typeck</text></g><g><title>generics_of (404,662 samples, 0.40%)</title><rect x="73.3182%" y="101" width="0.4006%" height="15" fill="rgb(242,14,37)"/><text x="73.5682%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (311,411 samples, 0.31%)</title><rect x="73.4105%" y="85" width="0.3083%" height="15" fill="rgb(246,228,12)"/><text x="73.6605%" y="95.50"></text></g><g><title>impl_trait_ref (521,247 samples, 0.52%)</title><rect x="73.7604%" y="101" width="0.5160%" height="15" fill="rgb(213,55,15)"/><text x="74.0104%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (425,887 samples, 0.42%)</title><rect x="73.8548%" y="85" width="0.4216%" height="15" fill="rgb(209,9,3)"/><text x="74.1048%" y="95.50"></text></g><g><title>predicates_of (149,851 samples, 0.15%)</title><rect x="74.2871%" y="101" width="0.1484%" height="15" fill="rgb(230,59,30)"/><text x="74.5371%" y="111.50"></text></g><g><title>specializes (532,685 samples, 0.53%)</title><rect x="74.4355%" y="101" width="0.5274%" height="15" fill="rgb(209,121,21)"/><text x="74.6855%" y="111.50"></text></g><g><title>param_env (365,934 samples, 0.36%)</title><rect x="74.6006%" y="85" width="0.3623%" height="15" fill="rgb(220,109,13)"/><text x="74.8506%" y="95.50"></text></g><g><title>def_span (239,293 samples, 0.24%)</title><rect x="74.7259%" y="69" width="0.2369%" height="15" fill="rgb(232,18,1)"/><text x="74.9759%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (226,533 samples, 0.22%)</title><rect x="74.7386%" y="53" width="0.2243%" height="15" fill="rgb(215,41,42)"/><text x="74.9886%" y="63.50"></text></g><g><title>evaluate_obligation (2,718,570 samples, 2.69%)</title><rect x="72.3744%" y="117" width="2.6915%" height="15" fill="rgb(224,123,36)"/><text x="72.6244%" y="127.50">ev..</text></g><g><title>item_types_checking (3,784,622 samples, 3.75%)</title><rect x="71.3880%" y="165" width="3.7469%" height="15" fill="rgb(240,125,3)"/><text x="71.6380%" y="175.50">item..</text></g><g><title>check_mod_item_types (3,778,062 samples, 3.74%)</title><rect x="71.3945%" y="149" width="3.7404%" height="15" fill="rgb(205,98,50)"/><text x="71.6445%" y="159.50">chec..</text></g><g><title>typeck (3,122,945 samples, 3.09%)</title><rect x="72.0430%" y="133" width="3.0918%" height="15" fill="rgb(205,185,37)"/><text x="72.2930%" y="143.50">typ..</text></g><g><title>fn_sig (132,952 samples, 0.13%)</title><rect x="75.3153%" y="133" width="0.1316%" height="15" fill="rgb(238,207,15)"/><text x="75.5653%" y="143.50"></text></g><g><title>named_region_map (168,572 samples, 0.17%)</title><rect x="75.5829%" y="117" width="0.1669%" height="15" fill="rgb(213,199,42)"/><text x="75.8329%" y="127.50"></text></g><g><title>resolve_lifetimes (158,492 samples, 0.16%)</title><rect x="75.5929%" y="101" width="0.1569%" height="15" fill="rgb(235,201,11)"/><text x="75.8429%" y="111.50"></text></g><g><title>generics_of (316,694 samples, 0.31%)</title><rect x="75.4469%" y="133" width="0.3135%" height="15" fill="rgb(207,46,11)"/><text x="75.6969%" y="143.50"></text></g><g><title>explicit_predicates_of (147,652 samples, 0.15%)</title><rect x="75.8531%" y="101" width="0.1462%" height="15" fill="rgb(241,35,35)"/><text x="76.1031%" y="111.50"></text></g><g><title>predicates_of (333,974 samples, 0.33%)</title><rect x="75.7865%" y="133" width="0.3306%" height="15" fill="rgb(243,32,47)"/><text x="76.0365%" y="143.50"></text></g><g><title>predicates_defined_on (309,604 samples, 0.31%)</title><rect x="75.8106%" y="117" width="0.3065%" height="15" fill="rgb(247,202,23)"/><text x="76.0606%" y="127.50"></text></g><g><title>inferred_outlives_of (119,021 samples, 0.12%)</title><rect x="75.9993%" y="101" width="0.1178%" height="15" fill="rgb(219,102,11)"/><text x="76.2493%" y="111.50"></text></g><g><title>inferred_outlives_crate (102,711 samples, 0.10%)</title><rect x="76.0154%" y="85" width="0.1017%" height="15" fill="rgb(243,110,44)"/><text x="76.2654%" y="95.50"></text></g><g><title>type_collecting (1,177,603 samples, 1.17%)</title><rect x="75.1365%" y="165" width="1.1659%" height="15" fill="rgb(222,74,54)"/><text x="75.3865%" y="175.50"></text></g><g><title>collect_mod_item_types (1,164,423 samples, 1.15%)</title><rect x="75.1496%" y="149" width="1.1528%" height="15" fill="rgb(216,99,12)"/><text x="75.3996%" y="159.50"></text></g><g><title>type_of (187,122 samples, 0.19%)</title><rect x="76.1171%" y="133" width="0.1853%" height="15" fill="rgb(226,22,26)"/><text x="76.3671%" y="143.50"></text></g><g><title>adt_def (223,772 samples, 0.22%)</title><rect x="78.2107%" y="85" width="0.2215%" height="15" fill="rgb(217,163,10)"/><text x="78.4607%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (222,462 samples, 0.22%)</title><rect x="78.2120%" y="69" width="0.2202%" height="15" fill="rgb(213,25,53)"/><text x="78.4620%" y="79.50"></text></g><g><title>item_attrs (211,682 samples, 0.21%)</title><rect x="78.2226%" y="53" width="0.2096%" height="15" fill="rgb(252,105,26)"/><text x="78.4726%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (210,492 samples, 0.21%)</title><rect x="78.2238%" y="37" width="0.2084%" height="15" fill="rgb(220,39,43)"/><text x="78.4738%" y="47.50"></text></g><g><title>adt_sized_constraint (278,982 samples, 0.28%)</title><rect x="78.1584%" y="117" width="0.2762%" height="15" fill="rgb(229,68,48)"/><text x="78.4084%" y="127.50"></text></g><g><title>adt_sized_constraint (230,222 samples, 0.23%)</title><rect x="78.2067%" y="101" width="0.2279%" height="15" fill="rgb(252,8,32)"/><text x="78.4567%" y="111.50"></text></g><g><title>evaluate_obligation (548,926 samples, 0.54%)</title><rect x="77.9399%" y="133" width="0.5435%" height="15" fill="rgb(223,20,43)"/><text x="78.1899%" y="143.50"></text></g><g><title>implied_outlives_bounds (177,773 samples, 0.18%)</title><rect x="78.4945%" y="133" width="0.1760%" height="15" fill="rgb(229,81,49)"/><text x="78.7445%" y="143.50"></text></g><g><title>param_env (193,314 samples, 0.19%)</title><rect x="78.6718%" y="133" width="0.1914%" height="15" fill="rgb(236,28,36)"/><text x="78.9218%" y="143.50"></text></g><g><title>region_scope_tree (356,582 samples, 0.35%)</title><rect x="78.9400%" y="133" width="0.3530%" height="15" fill="rgb(249,185,26)"/><text x="79.1900%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,031,855 samples, 3.00%)</title><rect x="76.4843%" y="149" width="3.0016%" height="15" fill="rgb(249,174,33)"/><text x="76.7343%" y="159.50">che..</text></g><g><title>trait_impls_of (192,162 samples, 0.19%)</title><rect x="79.2956%" y="133" width="0.1902%" height="15" fill="rgb(233,201,37)"/><text x="79.5456%" y="143.50"></text></g><g><title>adt_sized_constraint (101,761 samples, 0.10%)</title><rect x="80.8960%" y="101" width="0.1007%" height="15" fill="rgb(221,78,26)"/><text x="81.1460%" y="111.50"></text></g><g><title>adt_sized_constraint (176,961 samples, 0.18%)</title><rect x="80.8233%" y="117" width="0.1752%" height="15" fill="rgb(250,127,30)"/><text x="81.0733%" y="127.50"></text></g><g><title>evaluate_obligation (537,164 samples, 0.53%)</title><rect x="80.5543%" y="133" width="0.5318%" height="15" fill="rgb(230,49,44)"/><text x="80.8043%" y="143.50"></text></g><g><title>implied_outlives_bounds (115,311 samples, 0.11%)</title><rect x="81.0973%" y="133" width="0.1142%" height="15" fill="rgb(229,67,23)"/><text x="81.3473%" y="143.50"></text></g><g><title>param_env (176,792 samples, 0.18%)</title><rect x="81.2115%" y="133" width="0.1750%" height="15" fill="rgb(249,83,47)"/><text x="81.4615%" y="143.50"></text></g><g><title>predicates_of (109,872 samples, 0.11%)</title><rect x="81.3865%" y="133" width="0.1088%" height="15" fill="rgb(215,43,3)"/><text x="81.6365%" y="143.50"></text></g><g><title>region_scope_tree (138,590 samples, 0.14%)</title><rect x="81.4953%" y="133" width="0.1372%" height="15" fill="rgb(238,154,13)"/><text x="81.7453%" y="143.50"></text></g><g><title>analysis (82,108,731 samples, 81.29%)</title><rect x="0.4684%" y="197" width="81.2900%" height="15" fill="rgb(219,56,2)"/><text x="0.7184%" y="207.50">analysis</text></g><g><title>type_check_crate (62,589,274 samples, 61.97%)</title><rect x="19.7932%" y="181" width="61.9652%" height="15" fill="rgb(233,0,4)"/><text x="20.0432%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,508,891 samples, 5.45%)</title><rect x="76.3044%" y="165" width="5.4540%" height="15" fill="rgb(235,30,7)"/><text x="76.5544%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (2,295,386 samples, 2.27%)</title><rect x="79.4859%" y="149" width="2.2725%" height="15" fill="rgb(250,79,13)"/><text x="79.7359%" y="159.50">c..</text></g><g><title>codegen_crate (372,494 samples, 0.37%)</title><rect x="81.7656%" y="197" width="0.3688%" height="15" fill="rgb(211,146,34)"/><text x="82.0156%" y="207.50"></text></g><g><title>metadata_load_macro (198,842 samples, 0.20%)</title><rect x="89.3141%" y="149" width="0.1969%" height="15" fill="rgb(228,22,38)"/><text x="89.5641%" y="159.50"></text></g><g><title>metadata_register_crate (1,299,105 samples, 1.29%)</title><rect x="89.5110%" y="149" width="1.2862%" height="15" fill="rgb(235,168,5)"/><text x="89.7610%" y="159.50"></text></g><g><title>metadata_register_crate (463,083 samples, 0.46%)</title><rect x="90.3387%" y="133" width="0.4585%" height="15" fill="rgb(221,155,16)"/><text x="90.5887%" y="143.50"></text></g><g><title>macro_expand_crate (8,491,334 samples, 8.41%)</title><rect x="82.4574%" y="181" width="8.4067%" height="15" fill="rgb(215,215,53)"/><text x="82.7074%" y="191.50">macro_expand..</text></g><g><title>expand_crate (8,481,944 samples, 8.40%)</title><rect x="82.4667%" y="165" width="8.3974%" height="15" fill="rgb(223,4,10)"/><text x="82.7167%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (1,249,714 samples, 1.24%)</title><rect x="91.0593%" y="165" width="1.2373%" height="15" fill="rgb(234,103,6)"/><text x="91.3093%" y="175.50"></text></g><g><title>configure_and_expand (10,326,914 samples, 10.22%)</title><rect x="82.1344%" y="197" width="10.2239%" height="15" fill="rgb(227,97,0)"/><text x="82.3844%" y="207.50">configure_and_e..</text></g><g><title>resolve_crate (1,443,586 samples, 1.43%)</title><rect x="90.9292%" y="181" width="1.4292%" height="15" fill="rgb(234,150,53)"/><text x="91.1792%" y="191.50"></text></g><g><title>drop_ast (102,811 samples, 0.10%)</title><rect x="92.3583%" y="197" width="0.1018%" height="15" fill="rgb(228,201,54)"/><text x="92.6083%" y="207.50"></text></g><g><title>early_lint_checks (185,272 samples, 0.18%)</title><rect x="92.4739%" y="197" width="0.1834%" height="15" fill="rgb(222,22,37)"/><text x="92.7239%" y="207.50"></text></g><g><title>free_global_ctxt (3,420,738 samples, 3.39%)</title><rect x="92.6573%" y="197" width="3.3866%" height="15" fill="rgb(237,53,32)"/><text x="92.9073%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (626,997 samples, 0.62%)</title><rect x="96.0440%" y="197" width="0.6207%" height="15" fill="rgb(233,25,53)"/><text x="96.2940%" y="207.50"></text></g><g><title>hir_lowering (1,305,385 samples, 1.29%)</title><rect x="96.6647%" y="197" width="1.2924%" height="15" fill="rgb(210,40,34)"/><text x="96.9147%" y="207.50"></text></g><g><title>parse_crate (552,086 samples, 0.55%)</title><rect x="98.0065%" y="197" width="0.5466%" height="15" fill="rgb(241,220,44)"/><text x="98.2565%" y="207.50"></text></g><g><title>prepare_outputs (207,803 samples, 0.21%)</title><rect x="98.5589%" y="197" width="0.2057%" height="15" fill="rgb(235,28,35)"/><text x="98.8089%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (826,779 samples, 0.82%)</title><rect x="98.7646%" y="197" width="0.8185%" height="15" fill="rgb(210,56,17)"/><text x="99.0146%" y="207.50"></text></g><g><title>all (101,007,191 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (101,007,191 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,212,8)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (312,574 samples, 0.31%)</title><rect x="99.6905%" y="197" width="0.3095%" height="15" fill="rgb(223,33,50)"/><text x="99.9405%" y="207.50"></text></g></svg></svg>