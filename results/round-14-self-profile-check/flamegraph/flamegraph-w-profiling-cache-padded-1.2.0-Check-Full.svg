<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>explicit_predicates_of (59,060 samples, 0.14%)</title><rect x="6.7519%" y="53" width="0.1352%" height="15" fill="rgb(227,0,7)"/><text x="7.0019%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (58,670 samples, 0.13%)</title><rect x="6.7528%" y="37" width="0.1343%" height="15" fill="rgb(217,0,24)"/><text x="7.0028%" y="47.50"></text></g><g><title>is_copy_raw (98,202 samples, 0.22%)</title><rect x="6.6638%" y="117" width="0.2247%" height="15" fill="rgb(221,193,54)"/><text x="6.9138%" y="127.50"></text></g><g><title>evaluate_obligation (94,031 samples, 0.22%)</title><rect x="6.6734%" y="101" width="0.2152%" height="15" fill="rgb(248,212,6)"/><text x="6.9234%" y="111.50"></text></g><g><title>predicates_of (63,030 samples, 0.14%)</title><rect x="6.7443%" y="85" width="0.1442%" height="15" fill="rgb(208,68,35)"/><text x="6.9943%" y="95.50"></text></g><g><title>predicates_defined_on (61,030 samples, 0.14%)</title><rect x="6.7489%" y="69" width="0.1397%" height="15" fill="rgb(232,128,0)"/><text x="6.9989%" y="79.50"></text></g><g><title>adt_drop_tys (117,542 samples, 0.27%)</title><rect x="6.6430%" y="133" width="0.2690%" height="15" fill="rgb(207,160,47)"/><text x="6.8930%" y="143.50"></text></g><g><title>needs_drop_raw (167,062 samples, 0.38%)</title><rect x="6.6190%" y="149" width="0.3823%" height="15" fill="rgb(228,23,34)"/><text x="6.8690%" y="159.50"></text></g><g><title>resolve_instance (58,000 samples, 0.13%)</title><rect x="7.0013%" y="149" width="0.1327%" height="15" fill="rgb(218,30,26)"/><text x="7.2513%" y="159.50"></text></g><g><title>thir_body (103,092 samples, 0.24%)</title><rect x="7.1427%" y="149" width="0.2359%" height="15" fill="rgb(220,122,19)"/><text x="7.3927%" y="159.50"></text></g><g><title>mir_const (853,401 samples, 1.95%)</title><rect x="5.4309%" y="197" width="1.9530%" height="15" fill="rgb(250,228,42)"/><text x="5.6809%" y="207.50">m..</text></g><g><title>unsafety_check_result (708,601 samples, 1.62%)</title><rect x="5.7623%" y="181" width="1.6216%" height="15" fill="rgb(240,193,28)"/><text x="6.0123%" y="191.50"></text></g><g><title>mir_built (624,549 samples, 1.43%)</title><rect x="5.9546%" y="165" width="1.4293%" height="15" fill="rgb(216,20,37)"/><text x="6.2046%" y="175.50"></text></g><g><title>is_freeze_raw (47,530 samples, 0.11%)</title><rect x="7.7150%" y="181" width="0.1088%" height="15" fill="rgb(206,188,39)"/><text x="7.9650%" y="191.50"></text></g><g><title>mir_const (160,092 samples, 0.37%)</title><rect x="7.8237%" y="181" width="0.3664%" height="15" fill="rgb(217,207,13)"/><text x="8.0737%" y="191.50"></text></g><g><title>unsafety_check_result (118,462 samples, 0.27%)</title><rect x="7.9190%" y="165" width="0.2711%" height="15" fill="rgb(231,73,38)"/><text x="8.1690%" y="175.50"></text></g><g><title>mir_built (83,981 samples, 0.19%)</title><rect x="7.9979%" y="149" width="0.1922%" height="15" fill="rgb(225,20,46)"/><text x="8.2479%" y="159.50"></text></g><g><title>mir_promoted (1,350,687 samples, 3.09%)</title><rect x="5.1505%" y="213" width="3.0910%" height="15" fill="rgb(210,31,41)"/><text x="5.4005%" y="223.50">mir..</text></g><g><title>mir_const_qualif (374,764 samples, 0.86%)</title><rect x="7.3839%" y="197" width="0.8576%" height="15" fill="rgb(221,200,47)"/><text x="7.6339%" y="207.50"></text></g><g><title>type_op_prove_predicate (186,452 samples, 0.43%)</title><rect x="8.2955%" y="213" width="0.4267%" height="15" fill="rgb(226,26,5)"/><text x="8.5455%" y="223.50"></text></g><g><title>MIR_borrow_checking (2,957,062 samples, 6.77%)</title><rect x="1.9580%" y="245" width="6.7671%" height="15" fill="rgb(249,33,26)"/><text x="2.2080%" y="255.50">MIR_borro..</text></g><g><title>mir_borrowck (2,938,412 samples, 6.72%)</title><rect x="2.0006%" y="229" width="6.7244%" height="15" fill="rgb(235,183,28)"/><text x="2.2506%" y="239.50">mir_borro..</text></g><g><title>MIR_effect_checking (142,792 samples, 0.33%)</title><rect x="8.7251%" y="245" width="0.3268%" height="15" fill="rgb(221,5,38)"/><text x="8.9751%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (119,521 samples, 0.27%)</title><rect x="8.7783%" y="229" width="0.2735%" height="15" fill="rgb(247,18,42)"/><text x="9.0283%" y="239.50"></text></g><g><title>hir_module_items (157,492 samples, 0.36%)</title><rect x="9.0518%" y="245" width="0.3604%" height="15" fill="rgb(241,131,45)"/><text x="9.3018%" y="255.50"></text></g><g><title>associated_item (79,231 samples, 0.18%)</title><rect x="10.0328%" y="181" width="0.1813%" height="15" fill="rgb(249,31,29)"/><text x="10.2828%" y="191.50"></text></g><g><title>visibility (45,950 samples, 0.11%)</title><rect x="10.1090%" y="165" width="0.1052%" height="15" fill="rgb(225,111,53)"/><text x="10.3590%" y="175.50"></text></g><g><title>get_lang_items (76,961 samples, 0.18%)</title><rect x="10.3460%" y="165" width="0.1761%" height="15" fill="rgb(238,160,17)"/><text x="10.5960%" y="175.50"></text></g><g><title>item_attrs (92,551 samples, 0.21%)</title><rect x="10.5221%" y="165" width="0.2118%" height="15" fill="rgb(214,148,48)"/><text x="10.7721%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (86,391 samples, 0.20%)</title><rect x="10.5362%" y="149" width="0.1977%" height="15" fill="rgb(232,36,49)"/><text x="10.7862%" y="159.50"></text></g><g><title>should_inherit_track_caller (48,140 samples, 0.11%)</title><rect x="10.7339%" y="165" width="0.1102%" height="15" fill="rgb(209,103,24)"/><text x="10.9839%" y="175.50"></text></g><g><title>codegen_fn_attrs (310,972 samples, 0.71%)</title><rect x="10.2142%" y="181" width="0.7116%" height="15" fill="rgb(229,88,8)"/><text x="10.4642%" y="191.50"></text></g><g><title>codegen_fn_attrs (490,325 samples, 1.12%)</title><rect x="9.8151%" y="213" width="1.1221%" height="15" fill="rgb(213,181,19)"/><text x="10.0651%" y="223.50"></text></g><g><title>should_inherit_track_caller (443,313 samples, 1.01%)</title><rect x="9.9227%" y="197" width="1.0145%" height="15" fill="rgb(254,191,54)"/><text x="10.1727%" y="207.50"></text></g><g><title>check_mod_attrs (646,337 samples, 1.48%)</title><rect x="9.4756%" y="229" width="1.4791%" height="15" fill="rgb(241,83,37)"/><text x="9.7256%" y="239.50"></text></g><g><title>check_mod_const_bodies (65,091 samples, 0.15%)</title><rect x="10.9547%" y="229" width="0.1490%" height="15" fill="rgb(233,36,39)"/><text x="11.2047%" y="239.50"></text></g><g><title>lookup_deprecation_entry (92,271 samples, 0.21%)</title><rect x="11.4764%" y="213" width="0.2112%" height="15" fill="rgb(226,3,54)"/><text x="11.7264%" y="223.50"></text></g><g><title>stability_index (50,541 samples, 0.12%)</title><rect x="11.5719%" y="197" width="0.1157%" height="15" fill="rgb(245,192,40)"/><text x="11.8219%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (294,173 samples, 0.67%)</title><rect x="11.1805%" y="229" width="0.6732%" height="15" fill="rgb(238,167,29)"/><text x="11.4305%" y="239.50"></text></g><g><title>misc_checking_1 (1,116,763 samples, 2.56%)</title><rect x="9.4132%" y="245" width="2.5557%" height="15" fill="rgb(232,182,51)"/><text x="9.6632%" y="255.50">mi..</text></g><g><title>liveness_and_intrinsic_checking (57,041 samples, 0.13%)</title><rect x="11.9717%" y="229" width="0.1305%" height="15" fill="rgb(231,60,39)"/><text x="12.2217%" y="239.50"></text></g><g><title>misc_checking_2 (173,852 samples, 0.40%)</title><rect x="11.9689%" y="245" width="0.3979%" height="15" fill="rgb(208,69,12)"/><text x="12.2189%" y="255.50"></text></g><g><title>match_checking (115,591 samples, 0.26%)</title><rect x="12.1022%" y="229" width="0.2645%" height="15" fill="rgb(235,93,37)"/><text x="12.3522%" y="239.50"></text></g><g><title>check_match (109,441 samples, 0.25%)</title><rect x="12.1163%" y="213" width="0.2505%" height="15" fill="rgb(213,116,39)"/><text x="12.3663%" y="223.50"></text></g><g><title>check_private_in_public (52,070 samples, 0.12%)</title><rect x="12.3843%" y="229" width="0.1192%" height="15" fill="rgb(222,207,29)"/><text x="12.6343%" y="239.50"></text></g><g><title>item_attrs (106,092 samples, 0.24%)</title><rect x="12.7022%" y="213" width="0.2428%" height="15" fill="rgb(206,96,30)"/><text x="12.9522%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (104,602 samples, 0.24%)</title><rect x="12.7056%" y="197" width="0.2394%" height="15" fill="rgb(218,138,4)"/><text x="12.9556%" y="207.50"></text></g><g><title>death_checking (250,233 samples, 0.57%)</title><rect x="12.5034%" y="229" width="0.5726%" height="15" fill="rgb(250,191,14)"/><text x="12.7534%" y="239.50"></text></g><g><title>lint_levels (57,261 samples, 0.13%)</title><rect x="12.9450%" y="213" width="0.1310%" height="15" fill="rgb(239,60,40)"/><text x="13.1950%" y="223.50"></text></g><g><title>crate_lints (802,879 samples, 1.84%)</title><rect x="13.0799%" y="213" width="1.8374%" height="15" fill="rgb(206,27,48)"/><text x="13.3299%" y="223.50">c..</text></g><g><title>type_of (324,303 samples, 0.74%)</title><rect x="14.1751%" y="197" width="0.7422%" height="15" fill="rgb(225,35,8)"/><text x="14.4251%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (243,552 samples, 0.56%)</title><rect x="14.3599%" y="181" width="0.5574%" height="15" fill="rgb(250,213,24)"/><text x="14.6099%" y="191.50"></text></g><g><title>lint_checking (852,499 samples, 1.95%)</title><rect x="13.0761%" y="229" width="1.9509%" height="15" fill="rgb(247,123,22)"/><text x="13.3261%" y="239.50">l..</text></g><g><title>module_lints (47,940 samples, 0.11%)</title><rect x="14.9173%" y="213" width="0.1097%" height="15" fill="rgb(231,138,38)"/><text x="15.1673%" y="223.50"></text></g><g><title>lint_mod (46,080 samples, 0.11%)</title><rect x="14.9215%" y="197" width="0.1055%" height="15" fill="rgb(231,145,46)"/><text x="15.1715%" y="207.50"></text></g><g><title>privacy_access_levels (63,171 samples, 0.14%)</title><rect x="15.0270%" y="229" width="0.1446%" height="15" fill="rgb(251,118,11)"/><text x="15.2770%" y="239.50"></text></g><g><title>privacy_checking_modules (135,602 samples, 0.31%)</title><rect x="15.1715%" y="229" width="0.3103%" height="15" fill="rgb(217,147,25)"/><text x="15.4215%" y="239.50"></text></g><g><title>check_mod_privacy (134,252 samples, 0.31%)</title><rect x="15.1746%" y="213" width="0.3072%" height="15" fill="rgb(247,81,37)"/><text x="15.4246%" y="223.50"></text></g><g><title>misc_checking_3 (1,368,735 samples, 3.13%)</title><rect x="12.3667%" y="245" width="3.1323%" height="15" fill="rgb(209,12,38)"/><text x="12.6167%" y="255.50">mis..</text></g><g><title>adt_destructor (89,861 samples, 0.21%)</title><rect x="15.7825%" y="197" width="0.2056%" height="15" fill="rgb(227,1,9)"/><text x="16.0325%" y="207.50"></text></g><g><title>coherent_trait (77,151 samples, 0.18%)</title><rect x="15.8116%" y="181" width="0.1766%" height="15" fill="rgb(248,47,43)"/><text x="16.0616%" y="191.50"></text></g><g><title>specialization_graph_of (74,621 samples, 0.17%)</title><rect x="15.8174%" y="165" width="0.1708%" height="15" fill="rgb(221,10,30)"/><text x="16.0674%" y="175.50"></text></g><g><title>is_copy_raw (93,381 samples, 0.21%)</title><rect x="15.9882%" y="197" width="0.2137%" height="15" fill="rgb(210,229,1)"/><text x="16.2382%" y="207.50"></text></g><g><title>evaluate_obligation (64,821 samples, 0.15%)</title><rect x="16.0535%" y="181" width="0.1483%" height="15" fill="rgb(222,148,37)"/><text x="16.3035%" y="191.50"></text></g><g><title>param_env (102,651 samples, 0.23%)</title><rect x="16.2019%" y="197" width="0.2349%" height="15" fill="rgb(234,67,33)"/><text x="16.4519%" y="207.50"></text></g><g><title>impl_parent (1,964,315 samples, 4.50%)</title><rect x="26.1877%" y="181" width="4.4953%" height="15" fill="rgb(247,98,35)"/><text x="26.4377%" y="191.50">impl_..</text></g><g><title>metadata_decode_entry_impl_parent (996,723 samples, 2.28%)</title><rect x="28.4020%" y="165" width="2.2810%" height="15" fill="rgb(247,138,52)"/><text x="28.6520%" y="175.50">m..</text></g><g><title>impl_trait_ref (3,871,857 samples, 8.86%)</title><rect x="30.6908%" y="181" width="8.8606%" height="15" fill="rgb(213,79,30)"/><text x="30.9408%" y="191.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,881,450 samples, 6.59%)</title><rect x="32.9573%" y="165" width="6.5941%" height="15" fill="rgb(246,177,23)"/><text x="33.2073%" y="175.50">metadata_..</text></g><g><title>item_attrs (61,980 samples, 0.14%)</title><rect x="39.5514%" y="181" width="0.1418%" height="15" fill="rgb(230,62,27)"/><text x="39.8014%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (59,630 samples, 0.14%)</title><rect x="39.5568%" y="165" width="0.1365%" height="15" fill="rgb(216,154,8)"/><text x="39.8068%" y="175.50"></text></g><g><title>trait_impls_of (839,417 samples, 1.92%)</title><rect x="39.7827%" y="181" width="1.9210%" height="15" fill="rgb(244,35,45)"/><text x="40.0327%" y="191.50">t..</text></g><g><title>implementations_of_trait (193,661 samples, 0.44%)</title><rect x="41.2605%" y="165" width="0.4432%" height="15" fill="rgb(251,115,12)"/><text x="41.5105%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (172,071 samples, 0.39%)</title><rect x="41.3099%" y="149" width="0.3938%" height="15" fill="rgb(240,54,50)"/><text x="41.5599%" y="159.50"></text></g><g><title>coherent_trait (11,394,656 samples, 26.08%)</title><rect x="15.6336%" y="213" width="26.0762%" height="15" fill="rgb(233,84,52)"/><text x="15.8836%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (11,043,672 samples, 25.27%)</title><rect x="16.4368%" y="197" width="25.2730%" height="15" fill="rgb(207,117,47)"/><text x="16.6868%" y="207.50">specialization_graph_of</text></g><g><title>coherence_checking (11,491,577 samples, 26.30%)</title><rect x="15.5538%" y="229" width="26.2980%" height="15" fill="rgb(249,43,39)"/><text x="15.8038%" y="239.50">coherence_checking</text></g><g><title>dropck_outlives (90,502 samples, 0.21%)</title><rect x="45.9604%" y="181" width="0.2071%" height="15" fill="rgb(209,38,44)"/><text x="46.2104%" y="191.50"></text></g><g><title>adt_dtorck_constraint (47,241 samples, 0.11%)</title><rect x="46.0594%" y="165" width="0.1081%" height="15" fill="rgb(236,212,23)"/><text x="46.3094%" y="175.50"></text></g><g><title>evaluate_obligation (117,132 samples, 0.27%)</title><rect x="46.1676%" y="181" width="0.2681%" height="15" fill="rgb(242,79,21)"/><text x="46.4176%" y="191.50"></text></g><g><title>method_autoderef_steps (44,470 samples, 0.10%)</title><rect x="46.5541%" y="181" width="0.1018%" height="15" fill="rgb(211,96,35)"/><text x="46.8041%" y="191.50"></text></g><g><title>evaluate_obligation (56,690 samples, 0.13%)</title><rect x="46.7330%" y="165" width="0.1297%" height="15" fill="rgb(253,215,40)"/><text x="46.9830%" y="175.50"></text></g><g><title>layout_of (45,581 samples, 0.10%)</title><rect x="46.8627%" y="165" width="0.1043%" height="15" fill="rgb(211,81,21)"/><text x="47.1127%" y="175.50"></text></g><g><title>object_safety_violations (146,152 samples, 0.33%)</title><rect x="46.6558%" y="181" width="0.3345%" height="15" fill="rgb(208,190,38)"/><text x="46.9058%" y="191.50"></text></g><g><title>item_bodies_checking (2,286,135 samples, 5.23%)</title><rect x="41.9368%" y="229" width="5.2317%" height="15" fill="rgb(235,213,38)"/><text x="42.1868%" y="239.50">item_b..</text></g><g><title>typeck_item_bodies (2,284,555 samples, 5.23%)</title><rect x="41.9404%" y="213" width="5.2281%" height="15" fill="rgb(237,122,38)"/><text x="42.1904%" y="223.50">typeck..</text></g><g><title>typeck (2,269,185 samples, 5.19%)</title><rect x="41.9756%" y="197" width="5.1929%" height="15" fill="rgb(244,218,35)"/><text x="42.2256%" y="207.50">typeck</text></g><g><title>fn_sig (84,592 samples, 0.19%)</title><rect x="48.3824%" y="197" width="0.1936%" height="15" fill="rgb(240,68,47)"/><text x="48.6324%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (78,822 samples, 0.18%)</title><rect x="48.3956%" y="181" width="0.1804%" height="15" fill="rgb(210,16,53)"/><text x="48.6456%" y="191.50"></text></g><g><title>item_types_checking (715,938 samples, 1.64%)</title><rect x="47.1685%" y="229" width="1.6384%" height="15" fill="rgb(235,124,12)"/><text x="47.4185%" y="239.50"></text></g><g><title>check_mod_item_types (713,388 samples, 1.63%)</title><rect x="47.1744%" y="213" width="1.6326%" height="15" fill="rgb(224,169,11)"/><text x="47.4244%" y="223.50"></text></g><g><title>predicates_of (56,261 samples, 0.13%)</title><rect x="48.6782%" y="197" width="0.1288%" height="15" fill="rgb(250,166,2)"/><text x="48.9282%" y="207.50"></text></g><g><title>predicates_defined_on (43,801 samples, 0.10%)</title><rect x="48.7067%" y="181" width="0.1002%" height="15" fill="rgb(242,216,29)"/><text x="48.9567%" y="191.50"></text></g><g><title>fn_sig (159,282 samples, 0.36%)</title><rect x="49.2485%" y="197" width="0.3645%" height="15" fill="rgb(230,116,27)"/><text x="49.4985%" y="207.50"></text></g><g><title>generics_of (149,212 samples, 0.34%)</title><rect x="49.6130%" y="197" width="0.3415%" height="15" fill="rgb(228,99,48)"/><text x="49.8630%" y="207.50"></text></g><g><title>impl_trait_ref (111,620 samples, 0.26%)</title><rect x="49.9545%" y="197" width="0.2554%" height="15" fill="rgb(253,11,6)"/><text x="50.2045%" y="207.50"></text></g><g><title>late_bound_vars_map (180,723 samples, 0.41%)</title><rect x="50.9147%" y="149" width="0.4136%" height="15" fill="rgb(247,143,39)"/><text x="51.1647%" y="159.50"></text></g><g><title>resolve_lifetimes (164,193 samples, 0.38%)</title><rect x="50.9526%" y="133" width="0.3757%" height="15" fill="rgb(236,97,10)"/><text x="51.2026%" y="143.50"></text></g><g><title>explicit_predicates_of (402,816 samples, 0.92%)</title><rect x="50.4237%" y="165" width="0.9218%" height="15" fill="rgb(233,208,19)"/><text x="50.6737%" y="175.50"></text></g><g><title>predicates_of (562,259 samples, 1.29%)</title><rect x="50.2099%" y="197" width="1.2867%" height="15" fill="rgb(216,164,2)"/><text x="50.4599%" y="207.50"></text></g><g><title>predicates_defined_on (530,498 samples, 1.21%)</title><rect x="50.2826%" y="181" width="1.2140%" height="15" fill="rgb(220,129,5)"/><text x="50.5326%" y="191.50"></text></g><g><title>inferred_outlives_of (66,031 samples, 0.15%)</title><rect x="51.3455%" y="165" width="0.1511%" height="15" fill="rgb(242,17,10)"/><text x="51.5955%" y="175.50"></text></g><g><title>inferred_outlives_crate (44,921 samples, 0.10%)</title><rect x="51.3938%" y="149" width="0.1028%" height="15" fill="rgb(242,107,0)"/><text x="51.6438%" y="159.50"></text></g><g><title>type_collecting (1,305,814 samples, 2.99%)</title><rect x="48.8092%" y="229" width="2.9883%" height="15" fill="rgb(251,28,31)"/><text x="49.0592%" y="239.50">typ..</text></g><g><title>collect_mod_item_types (1,293,674 samples, 2.96%)</title><rect x="48.8370%" y="213" width="2.9605%" height="15" fill="rgb(233,223,10)"/><text x="49.0870%" y="223.50">col..</text></g><g><title>type_of (131,481 samples, 0.30%)</title><rect x="51.4966%" y="197" width="0.3009%" height="15" fill="rgb(215,21,27)"/><text x="51.7466%" y="207.50"></text></g><g><title>evaluate_obligation (353,302 samples, 0.81%)</title><rect x="53.9612%" y="197" width="0.8085%" height="15" fill="rgb(232,23,21)"/><text x="54.2112%" y="207.50"></text></g><g><title>implied_outlives_bounds (152,492 samples, 0.35%)</title><rect x="54.7697%" y="197" width="0.3490%" height="15" fill="rgb(244,5,23)"/><text x="55.0197%" y="207.50"></text></g><g><title>param_env (142,061 samples, 0.33%)</title><rect x="55.1187%" y="197" width="0.3251%" height="15" fill="rgb(226,81,46)"/><text x="55.3687%" y="207.50"></text></g><g><title>region_scope_tree (89,361 samples, 0.20%)</title><rect x="55.5382%" y="197" width="0.2045%" height="15" fill="rgb(247,70,30)"/><text x="55.7882%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,655,341 samples, 3.79%)</title><rect x="51.9962%" y="213" width="3.7882%" height="15" fill="rgb(212,68,19)"/><text x="52.2462%" y="223.50">chec..</text></g><g><title>implied_outlives_bounds (99,641 samples, 0.23%)</title><rect x="58.1212%" y="197" width="0.2280%" height="15" fill="rgb(240,187,13)"/><text x="58.3712%" y="207.50"></text></g><g><title>param_env (183,760 samples, 0.42%)</title><rect x="58.3492%" y="197" width="0.4205%" height="15" fill="rgb(223,113,26)"/><text x="58.5992%" y="207.50"></text></g><g><title>predicates_of (109,834 samples, 0.25%)</title><rect x="58.7698%" y="197" width="0.2514%" height="15" fill="rgb(206,192,2)"/><text x="59.0198%" y="207.50"></text></g><g><title>predicates_defined_on (73,503 samples, 0.17%)</title><rect x="58.8529%" y="181" width="0.1682%" height="15" fill="rgb(241,108,4)"/><text x="59.1029%" y="191.50"></text></g><g><title>analysis (25,210,688 samples, 57.69%)</title><rect x="1.5172%" y="261" width="57.6936%" height="15" fill="rgb(247,173,49)"/><text x="1.7672%" y="271.50">analysis</text></g><g><title>type_check_crate (19,100,981 samples, 43.71%)</title><rect x="15.4990%" y="245" width="43.7118%" height="15" fill="rgb(224,114,35)"/><text x="15.7490%" y="255.50">type_check_crate</text></g><g><title>wf_checking (3,238,126 samples, 7.41%)</title><rect x="51.8005%" y="229" width="7.4103%" height="15" fill="rgb(245,159,27)"/><text x="52.0505%" y="239.50">wf_checking</text></g><g><title>check_item_well_formed (1,497,285 samples, 3.43%)</title><rect x="55.7844%" y="213" width="3.4265%" height="15" fill="rgb(245,172,44)"/><text x="56.0344%" y="223.50">che..</text></g><g><title>variances_of (61,901 samples, 0.14%)</title><rect x="59.0692%" y="197" width="0.1417%" height="15" fill="rgb(236,23,11)"/><text x="59.3192%" y="207.50"></text></g><g><title>crate_variances (57,481 samples, 0.13%)</title><rect x="59.0793%" y="181" width="0.1315%" height="15" fill="rgb(205,117,38)"/><text x="59.3293%" y="191.50"></text></g><g><title>codegen_crate (495,816 samples, 1.13%)</title><rect x="59.2357%" y="261" width="1.1347%" height="15" fill="rgb(237,72,25)"/><text x="59.4857%" y="271.50"></text></g><g><title>AST_validation (122,271 samples, 0.28%)</title><rect x="60.8496%" y="245" width="0.2798%" height="15" fill="rgb(244,70,9)"/><text x="61.0996%" y="255.50"></text></g><g><title>crate_injection (113,721 samples, 0.26%)</title><rect x="61.2140%" y="245" width="0.2602%" height="15" fill="rgb(217,125,39)"/><text x="61.4640%" y="255.50"></text></g><g><title>metadata_load_macro (127,522 samples, 0.29%)</title><rect x="82.2010%" y="213" width="0.2918%" height="15" fill="rgb(235,36,10)"/><text x="82.4510%" y="223.50"></text></g><g><title>macro_expand_crate (9,394,114 samples, 21.50%)</title><rect x="61.4743%" y="245" width="21.4981%" height="15" fill="rgb(251,123,47)"/><text x="61.7243%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (9,369,313 samples, 21.44%)</title><rect x="61.5310%" y="229" width="21.4413%" height="15" fill="rgb(221,13,13)"/><text x="61.7810%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (209,522 samples, 0.48%)</title><rect x="82.4928%" y="213" width="0.4795%" height="15" fill="rgb(238,131,9)"/><text x="82.7428%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (122,552 samples, 0.28%)</title><rect x="82.9836%" y="245" width="0.2805%" height="15" fill="rgb(211,50,8)"/><text x="83.2336%" y="255.50"></text></g><g><title>finalize_macro_resolutions (315,394 samples, 0.72%)</title><rect x="83.3642%" y="229" width="0.7218%" height="15" fill="rgb(245,182,24)"/><text x="83.6142%" y="239.50"></text></g><g><title>late_resolve_crate (1,228,853 samples, 2.81%)</title><rect x="84.0859%" y="229" width="2.8122%" height="15" fill="rgb(242,14,37)"/><text x="84.3359%" y="239.50">la..</text></g><g><title>configure_and_expand (11,653,099 samples, 26.67%)</title><rect x="60.3704%" y="261" width="26.6676%" height="15" fill="rgb(246,228,12)"/><text x="60.6204%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,649,118 samples, 3.77%)</title><rect x="83.2641%" y="245" width="3.7739%" height="15" fill="rgb(213,55,15)"/><text x="83.5141%" y="255.50">reso..</text></g><g><title>drop_ast (78,001 samples, 0.18%)</title><rect x="87.0380%" y="261" width="0.1785%" height="15" fill="rgb(209,9,3)"/><text x="87.2880%" y="271.50"></text></g><g><title>early_lint_checks (191,592 samples, 0.44%)</title><rect x="87.2476%" y="261" width="0.4385%" height="15" fill="rgb(230,59,30)"/><text x="87.4976%" y="271.50"></text></g><g><title>free_global_ctxt (1,512,856 samples, 3.46%)</title><rect x="87.6860%" y="261" width="3.4621%" height="15" fill="rgb(209,121,21)"/><text x="87.9360%" y="271.50">fre..</text></g><g><title>crate_hash (60,200 samples, 0.14%)</title><rect x="91.9070%" y="245" width="0.1378%" height="15" fill="rgb(220,109,13)"/><text x="92.1570%" y="255.50"></text></g><g><title>generate_crate_metadata (475,715 samples, 1.09%)</title><rect x="91.1481%" y="261" width="1.0887%" height="15" fill="rgb(232,18,1)"/><text x="91.3981%" y="271.50"></text></g><g><title>hir_lowering (1,132,733 samples, 2.59%)</title><rect x="92.2368%" y="261" width="2.5922%" height="15" fill="rgb(215,41,42)"/><text x="92.4868%" y="271.50">hi..</text></g><g><title>link (44,460 samples, 0.10%)</title><rect x="94.8290%" y="261" width="0.1017%" height="15" fill="rgb(224,123,36)"/><text x="95.0790%" y="271.50"></text></g><g><title>parse_crate (1,079,632 samples, 2.47%)</title><rect x="94.9307%" y="261" width="2.4707%" height="15" fill="rgb(240,125,3)"/><text x="95.1807%" y="271.50">pa..</text></g><g><title>prepare_outputs (308,713 samples, 0.71%)</title><rect x="97.4237%" y="261" width="0.7065%" height="15" fill="rgb(205,98,50)"/><text x="97.6737%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (400,834 samples, 0.92%)</title><rect x="98.1302%" y="261" width="0.9173%" height="15" fill="rgb(205,185,37)"/><text x="98.3802%" y="271.50"></text></g><g><title>setup_global_ctxt (146,802 samples, 0.34%)</title><rect x="99.0722%" y="261" width="0.3360%" height="15" fill="rgb(238,207,15)"/><text x="99.3222%" y="271.50"></text></g><g><title>all (43,697,513 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (43,697,513 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (258,613 samples, 0.59%)</title><rect x="99.4082%" y="261" width="0.5918%" height="15" fill="rgb(207,46,11)"/><text x="99.6582%" y="271.50"></text></g></svg></svg>