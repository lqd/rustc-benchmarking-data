<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (152,562 samples, 0.11%)</title><rect x="11.1672%" y="149" width="0.1141%" height="15" fill="rgb(227,0,7)"/><text x="11.4172%" y="159.50"></text></g><g><title>param_env (349,057 samples, 0.26%)</title><rect x="12.9956%" y="117" width="0.2610%" height="15" fill="rgb(217,0,24)"/><text x="13.2456%" y="127.50"></text></g><g><title>item_attrs (330,891 samples, 0.25%)</title><rect x="13.7564%" y="85" width="0.2474%" height="15" fill="rgb(221,193,54)"/><text x="14.0064%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (319,841 samples, 0.24%)</title><rect x="13.7647%" y="69" width="0.2392%" height="15" fill="rgb(248,212,6)"/><text x="14.0147%" y="79.50"></text></g><g><title>codegen_fn_attrs (458,911 samples, 0.34%)</title><rect x="13.6746%" y="101" width="0.3432%" height="15" fill="rgb(208,68,35)"/><text x="13.9246%" y="111.50"></text></g><g><title>needs_drop_raw (1,493,842 samples, 1.12%)</title><rect x="16.7215%" y="85" width="1.1170%" height="15" fill="rgb(232,128,0)"/><text x="16.9715%" y="95.50"></text></g><g><title>is_copy_raw (1,208,458 samples, 0.90%)</title><rect x="16.9349%" y="69" width="0.9036%" height="15" fill="rgb(207,160,47)"/><text x="17.1849%" y="79.50"></text></g><g><title>evaluate_obligation (1,014,497 samples, 0.76%)</title><rect x="17.0799%" y="53" width="0.7586%" height="15" fill="rgb(228,23,34)"/><text x="17.3299%" y="63.50"></text></g><g><title>resolve_instance (502,047 samples, 0.38%)</title><rect x="17.8385%" y="85" width="0.3754%" height="15" fill="rgb(218,30,26)"/><text x="18.0885%" y="95.50"></text></g><g><title>thir_body (1,281,371 samples, 0.96%)</title><rect x="18.2570%" y="85" width="0.9582%" height="15" fill="rgb(220,122,19)"/><text x="18.5070%" y="95.50"></text></g><g><title>mir_const (9,428,461 samples, 7.05%)</title><rect x="12.1869%" y="133" width="7.0502%" height="15" fill="rgb(250,228,42)"/><text x="12.4369%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,997,817 samples, 5.98%)</title><rect x="13.2567%" y="117" width="5.9804%" height="15" fill="rgb(240,193,28)"/><text x="13.5067%" y="127.50">unsafety..</text></g><g><title>mir_built (6,979,930 samples, 5.22%)</title><rect x="14.0178%" y="101" width="5.2193%" height="15" fill="rgb(216,20,37)"/><text x="14.2678%" y="111.50">mir_bu..</text></g><g><title>is_freeze_raw (212,794 samples, 0.16%)</title><rect x="19.6453%" y="117" width="0.1591%" height="15" fill="rgb(206,188,39)"/><text x="19.8953%" y="127.50"></text></g><g><title>evaluate_obligation (176,644 samples, 0.13%)</title><rect x="19.6723%" y="101" width="0.1321%" height="15" fill="rgb(217,207,13)"/><text x="19.9223%" y="111.50"></text></g><g><title>needs_drop_raw (163,793 samples, 0.12%)</title><rect x="20.0986%" y="69" width="0.1225%" height="15" fill="rgb(231,73,38)"/><text x="20.3486%" y="79.50"></text></g><g><title>mir_const (639,536 samples, 0.48%)</title><rect x="19.8129%" y="117" width="0.4782%" height="15" fill="rgb(225,20,46)"/><text x="20.0629%" y="127.50"></text></g><g><title>unsafety_check_result (511,425 samples, 0.38%)</title><rect x="19.9087%" y="101" width="0.3824%" height="15" fill="rgb(210,31,41)"/><text x="20.1587%" y="111.50"></text></g><g><title>mir_built (452,555 samples, 0.34%)</title><rect x="19.9527%" y="85" width="0.3384%" height="15" fill="rgb(221,200,47)"/><text x="20.2027%" y="95.50"></text></g><g><title>mir_const_qualif (1,506,007 samples, 1.13%)</title><rect x="19.2371%" y="133" width="1.1261%" height="15" fill="rgb(226,26,5)"/><text x="19.4871%" y="143.50"></text></g><g><title>mir_promoted (11,992,411 samples, 8.97%)</title><rect x="11.3959%" y="149" width="8.9674%" height="15" fill="rgb(249,33,26)"/><text x="11.6459%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (643,248 samples, 0.48%)</title><rect x="20.3634%" y="149" width="0.4810%" height="15" fill="rgb(235,183,28)"/><text x="20.6134%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (227,542 samples, 0.17%)</title><rect x="20.8444%" y="149" width="0.1701%" height="15" fill="rgb(221,5,38)"/><text x="21.0944%" y="159.50"></text></g><g><title>normalize_projection_ty (145,492 samples, 0.11%)</title><rect x="20.9057%" y="133" width="0.1088%" height="15" fill="rgb(247,18,42)"/><text x="21.1557%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,038,292 samples, 2.27%)</title><rect x="21.0854%" y="149" width="2.2719%" height="15" fill="rgb(241,131,45)"/><text x="21.3354%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (30,121,387 samples, 22.52%)</title><rect x="0.8384%" y="181" width="22.5235%" height="15" fill="rgb(249,31,29)"/><text x="1.0884%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (29,945,496 samples, 22.39%)</title><rect x="0.9700%" y="165" width="22.3920%" height="15" fill="rgb(225,111,53)"/><text x="1.2200%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (533,286 samples, 0.40%)</title><rect x="23.3619%" y="181" width="0.3988%" height="15" fill="rgb(238,160,17)"/><text x="23.6119%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (440,784 samples, 0.33%)</title><rect x="23.4311%" y="165" width="0.3296%" height="15" fill="rgb(214,148,48)"/><text x="23.6811%" y="175.50"></text></g><g><title>hir_module_items (219,572 samples, 0.16%)</title><rect x="23.7607%" y="181" width="0.1642%" height="15" fill="rgb(232,36,49)"/><text x="24.0107%" y="191.50"></text></g><g><title>should_inherit_track_caller (207,513 samples, 0.16%)</title><rect x="24.2895%" y="133" width="0.1552%" height="15" fill="rgb(209,103,24)"/><text x="24.5395%" y="143.50"></text></g><g><title>codegen_fn_attrs (424,965 samples, 0.32%)</title><rect x="24.1436%" y="149" width="0.3178%" height="15" fill="rgb(229,88,8)"/><text x="24.3936%" y="159.50"></text></g><g><title>check_mod_attrs (689,908 samples, 0.52%)</title><rect x="23.9456%" y="165" width="0.5159%" height="15" fill="rgb(213,181,19)"/><text x="24.1956%" y="175.50"></text></g><g><title>check_mod_const_bodies (153,651 samples, 0.11%)</title><rect x="24.4615%" y="165" width="0.1149%" height="15" fill="rgb(254,191,54)"/><text x="24.7115%" y="175.50"></text></g><g><title>lookup_deprecation_entry (180,831 samples, 0.14%)</title><rect x="24.8170%" y="149" width="0.1352%" height="15" fill="rgb(241,83,37)"/><text x="25.0670%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (517,377 samples, 0.39%)</title><rect x="24.6525%" y="165" width="0.3869%" height="15" fill="rgb(233,36,39)"/><text x="24.9025%" y="175.50"></text></g><g><title>misc_checking_1 (1,558,888 samples, 1.17%)</title><rect x="23.9252%" y="181" width="1.1657%" height="15" fill="rgb(226,3,54)"/><text x="24.1752%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (592,057 samples, 0.44%)</title><rect x="25.0924%" y="165" width="0.4427%" height="15" fill="rgb(245,192,40)"/><text x="25.3424%" y="175.50"></text></g><g><title>check_mod_liveness (474,257 samples, 0.35%)</title><rect x="25.1805%" y="149" width="0.3546%" height="15" fill="rgb(238,167,29)"/><text x="25.4305%" y="159.50"></text></g><g><title>mir_borrowck (408,654 samples, 0.31%)</title><rect x="26.2487%" y="53" width="0.3056%" height="15" fill="rgb(232,182,51)"/><text x="26.4987%" y="63.50"></text></g><g><title>eval_to_const_value_raw (742,199 samples, 0.55%)</title><rect x="25.9998%" y="133" width="0.5550%" height="15" fill="rgb(231,60,39)"/><text x="26.2498%" y="143.50"></text></g><g><title>eval_to_const_value_raw (734,269 samples, 0.55%)</title><rect x="26.0057%" y="117" width="0.5491%" height="15" fill="rgb(208,69,12)"/><text x="26.2557%" y="127.50"></text></g><g><title>eval_to_allocation_raw (726,778 samples, 0.54%)</title><rect x="26.0113%" y="101" width="0.5435%" height="15" fill="rgb(235,93,37)"/><text x="26.2613%" y="111.50"></text></g><g><title>mir_for_ctfe (574,057 samples, 0.43%)</title><rect x="26.1255%" y="85" width="0.4293%" height="15" fill="rgb(213,116,39)"/><text x="26.3755%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (528,266 samples, 0.40%)</title><rect x="26.1598%" y="69" width="0.3950%" height="15" fill="rgb(222,207,29)"/><text x="26.4098%" y="79.50"></text></g><g><title>mir_const_qualif (215,752 samples, 0.16%)</title><rect x="26.5633%" y="133" width="0.1613%" height="15" fill="rgb(206,96,30)"/><text x="26.8133%" y="143.50"></text></g><g><title>mir_const (160,552 samples, 0.12%)</title><rect x="26.6045%" y="117" width="0.1201%" height="15" fill="rgb(218,138,4)"/><text x="26.8545%" y="127.50"></text></g><g><title>misc_checking_2 (2,325,946 samples, 1.74%)</title><rect x="25.0908%" y="181" width="1.7392%" height="15" fill="rgb(250,191,14)"/><text x="25.3408%" y="191.50"></text></g><g><title>match_checking (1,731,779 samples, 1.29%)</title><rect x="25.5351%" y="165" width="1.2950%" height="15" fill="rgb(239,60,40)"/><text x="25.7851%" y="175.50"></text></g><g><title>check_match (1,684,458 samples, 1.26%)</title><rect x="25.5705%" y="149" width="1.2596%" height="15" fill="rgb(206,27,48)"/><text x="25.8205%" y="159.50"></text></g><g><title>check_private_in_public (284,223 samples, 0.21%)</title><rect x="26.8374%" y="165" width="0.2125%" height="15" fill="rgb(225,35,8)"/><text x="27.0874%" y="175.50"></text></g><g><title>death_checking (540,246 samples, 0.40%)</title><rect x="27.0499%" y="165" width="0.4040%" height="15" fill="rgb(250,213,24)"/><text x="27.2999%" y="175.50"></text></g><g><title>param_env (374,483 samples, 0.28%)</title><rect x="28.1541%" y="133" width="0.2800%" height="15" fill="rgb(247,123,22)"/><text x="28.4041%" y="143.50"></text></g><g><title>predicates_of (196,343 samples, 0.15%)</title><rect x="28.2873%" y="117" width="0.1468%" height="15" fill="rgb(231,138,38)"/><text x="28.5373%" y="127.50"></text></g><g><title>predicates_defined_on (156,202 samples, 0.12%)</title><rect x="28.3173%" y="101" width="0.1168%" height="15" fill="rgb(231,145,46)"/><text x="28.5673%" y="111.50"></text></g><g><title>crate_lints (2,414,237 samples, 1.81%)</title><rect x="27.4550%" y="149" width="1.8053%" height="15" fill="rgb(251,118,11)"/><text x="27.7050%" y="159.50">c..</text></g><g><title>type_of (1,093,861 samples, 0.82%)</title><rect x="28.4424%" y="133" width="0.8179%" height="15" fill="rgb(217,147,25)"/><text x="28.6924%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (862,528 samples, 0.64%)</title><rect x="28.6153%" y="117" width="0.6450%" height="15" fill="rgb(247,81,37)"/><text x="28.8653%" y="127.50"></text></g><g><title>lint_checking (2,883,112 samples, 2.16%)</title><rect x="27.4539%" y="165" width="2.1559%" height="15" fill="rgb(209,12,38)"/><text x="27.7039%" y="175.50">l..</text></g><g><title>module_lints (467,385 samples, 0.35%)</title><rect x="29.2603%" y="149" width="0.3495%" height="15" fill="rgb(227,1,9)"/><text x="29.5103%" y="159.50"></text></g><g><title>lint_mod (460,715 samples, 0.34%)</title><rect x="29.2653%" y="133" width="0.3445%" height="15" fill="rgb(248,47,43)"/><text x="29.5153%" y="143.50"></text></g><g><title>privacy_access_levels (329,704 samples, 0.25%)</title><rect x="29.6098%" y="165" width="0.2465%" height="15" fill="rgb(221,10,30)"/><text x="29.8598%" y="175.50"></text></g><g><title>privacy_checking_modules (964,431 samples, 0.72%)</title><rect x="29.8563%" y="165" width="0.7212%" height="15" fill="rgb(210,229,1)"/><text x="30.1063%" y="175.50"></text></g><g><title>check_mod_privacy (959,451 samples, 0.72%)</title><rect x="29.8600%" y="149" width="0.7174%" height="15" fill="rgb(222,148,37)"/><text x="30.1100%" y="159.50"></text></g><g><title>misc_checking_3 (5,030,687 samples, 3.76%)</title><rect x="26.8301%" y="181" width="3.7617%" height="15" fill="rgb(234,67,33)"/><text x="27.0801%" y="191.50">misc..</text></g><g><title>impl_parent (2,146,611 samples, 1.61%)</title><rect x="33.3975%" y="117" width="1.6051%" height="15" fill="rgb(247,98,35)"/><text x="33.6475%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,329,831 samples, 0.99%)</title><rect x="34.0083%" y="101" width="0.9944%" height="15" fill="rgb(247,138,52)"/><text x="34.2583%" y="111.50"></text></g><g><title>impl_trait_ref (5,288,184 samples, 3.95%)</title><rect x="35.0040%" y="117" width="3.9543%" height="15" fill="rgb(213,79,30)"/><text x="35.2540%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,234,244 samples, 3.17%)</title><rect x="35.7921%" y="101" width="3.1662%" height="15" fill="rgb(246,177,23)"/><text x="36.0421%" y="111.50">met..</text></g><g><title>trait_impls_of (708,397 samples, 0.53%)</title><rect x="38.9873%" y="117" width="0.5297%" height="15" fill="rgb(230,62,27)"/><text x="39.2373%" y="127.50"></text></g><g><title>implementations_of_trait (199,401 samples, 0.15%)</title><rect x="39.3679%" y="101" width="0.1491%" height="15" fill="rgb(216,154,8)"/><text x="39.6179%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (151,530 samples, 0.11%)</title><rect x="39.4037%" y="85" width="0.1133%" height="15" fill="rgb(244,35,45)"/><text x="39.6537%" y="95.50"></text></g><g><title>coherent_trait (11,819,072 samples, 8.84%)</title><rect x="30.6802%" y="149" width="8.8378%" height="15" fill="rgb(251,115,12)"/><text x="30.9302%" y="159.50">coherent_tra..</text></g><g><title>specialization_graph_of (11,796,732 samples, 8.82%)</title><rect x="30.6969%" y="133" width="8.8211%" height="15" fill="rgb(240,54,50)"/><text x="30.9469%" y="143.50">specializati..</text></g><g><title>coherence_checking (11,915,723 samples, 8.91%)</title><rect x="30.6604%" y="165" width="8.9101%" height="15" fill="rgb(233,84,52)"/><text x="30.9104%" y="175.50">coherence_che..</text></g><g><title>associated_item (393,815 samples, 0.29%)</title><rect x="53.6857%" y="101" width="0.2945%" height="15" fill="rgb(207,117,47)"/><text x="53.9357%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (330,565 samples, 0.25%)</title><rect x="53.7330%" y="85" width="0.2472%" height="15" fill="rgb(249,43,39)"/><text x="53.9830%" y="95.50"></text></g><g><title>associated_items (588,875 samples, 0.44%)</title><rect x="53.5657%" y="117" width="0.4403%" height="15" fill="rgb(209,38,44)"/><text x="53.8157%" y="127.50"></text></g><g><title>adt_def (478,964 samples, 0.36%)</title><rect x="54.3501%" y="85" width="0.3581%" height="15" fill="rgb(236,212,23)"/><text x="54.6001%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (476,404 samples, 0.36%)</title><rect x="54.3520%" y="69" width="0.3562%" height="15" fill="rgb(242,79,21)"/><text x="54.6020%" y="79.50"></text></g><g><title>item_attrs (446,294 samples, 0.33%)</title><rect x="54.3745%" y="53" width="0.3337%" height="15" fill="rgb(211,96,35)"/><text x="54.6245%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (443,784 samples, 0.33%)</title><rect x="54.3764%" y="37" width="0.3318%" height="15" fill="rgb(253,215,40)"/><text x="54.6264%" y="47.50"></text></g><g><title>adt_dtorck_constraint (159,381 samples, 0.12%)</title><rect x="54.7276%" y="85" width="0.1192%" height="15" fill="rgb(211,81,21)"/><text x="54.9776%" y="95.50"></text></g><g><title>dropck_outlives (1,098,253 samples, 0.82%)</title><rect x="54.0600%" y="117" width="0.8212%" height="15" fill="rgb(208,190,38)"/><text x="54.3100%" y="127.50"></text></g><g><title>adt_dtorck_constraint (772,438 samples, 0.58%)</title><rect x="54.3036%" y="101" width="0.5776%" height="15" fill="rgb(235,213,38)"/><text x="54.5536%" y="111.50"></text></g><g><title>trait_impls_of (136,780 samples, 0.10%)</title><rect x="55.6859%" y="101" width="0.1023%" height="15" fill="rgb(237,122,38)"/><text x="55.9359%" y="111.50"></text></g><g><title>evaluate_obligation (1,213,822 samples, 0.91%)</title><rect x="54.8817%" y="117" width="0.9076%" height="15" fill="rgb(244,218,35)"/><text x="55.1317%" y="127.50"></text></g><g><title>fn_sig (166,106 samples, 0.12%)</title><rect x="55.8113%" y="117" width="0.1242%" height="15" fill="rgb(240,68,47)"/><text x="56.0613%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (147,206 samples, 0.11%)</title><rect x="55.8255%" y="101" width="0.1101%" height="15" fill="rgb(210,16,53)"/><text x="56.0755%" y="111.50"></text></g><g><title>item_attrs (275,902 samples, 0.21%)</title><rect x="56.1071%" y="117" width="0.2063%" height="15" fill="rgb(235,124,12)"/><text x="56.3571%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (267,152 samples, 0.20%)</title><rect x="56.1136%" y="101" width="0.1998%" height="15" fill="rgb(224,169,11)"/><text x="56.3636%" y="111.50"></text></g><g><title>method_autoderef_steps (502,402 samples, 0.38%)</title><rect x="56.3819%" y="117" width="0.3757%" height="15" fill="rgb(250,166,2)"/><text x="56.6319%" y="127.50"></text></g><g><title>evaluate_obligation (258,501 samples, 0.19%)</title><rect x="56.5643%" y="101" width="0.1933%" height="15" fill="rgb(242,216,29)"/><text x="56.8143%" y="111.50"></text></g><g><title>predicates_of (368,713 samples, 0.28%)</title><rect x="56.8764%" y="117" width="0.2757%" height="15" fill="rgb(230,116,27)"/><text x="57.1264%" y="127.50"></text></g><g><title>predicates_defined_on (255,972 samples, 0.19%)</title><rect x="56.9607%" y="101" width="0.1914%" height="15" fill="rgb(228,99,48)"/><text x="57.2107%" y="111.50"></text></g><g><title>evaluate_obligation (435,173 samples, 0.33%)</title><rect x="62.1062%" y="101" width="0.3254%" height="15" fill="rgb(253,11,6)"/><text x="62.3562%" y="111.50"></text></g><g><title>is_copy_raw (577,913 samples, 0.43%)</title><rect x="62.5086%" y="101" width="0.4321%" height="15" fill="rgb(247,143,39)"/><text x="62.7586%" y="111.50"></text></g><g><title>evaluate_obligation (484,373 samples, 0.36%)</title><rect x="62.5785%" y="85" width="0.3622%" height="15" fill="rgb(236,97,10)"/><text x="62.8285%" y="95.50"></text></g><g><title>method_autoderef_steps (173,844 samples, 0.13%)</title><rect x="62.9611%" y="101" width="0.1300%" height="15" fill="rgb(233,208,19)"/><text x="63.2111%" y="111.50"></text></g><g><title>typeck (7,967,779 samples, 5.96%)</title><rect x="57.2209%" y="117" width="5.9580%" height="15" fill="rgb(216,164,2)"/><text x="57.4709%" y="127.50">typeck</text></g><g><title>item_bodies_checking (31,601,654 samples, 23.63%)</title><rect x="39.6060%" y="165" width="23.6304%" height="15" fill="rgb(220,129,5)"/><text x="39.8560%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (31,598,634 samples, 23.63%)</title><rect x="39.6082%" y="149" width="23.6281%" height="15" fill="rgb(242,17,10)"/><text x="39.8582%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (31,488,341 samples, 23.55%)</title><rect x="39.6907%" y="133" width="23.5457%" height="15" fill="rgb(242,107,0)"/><text x="39.9407%" y="143.50">typeck</text></g><g><title>item_types_checking (1,029,902 samples, 0.77%)</title><rect x="63.2364%" y="165" width="0.7701%" height="15" fill="rgb(251,28,31)"/><text x="63.4864%" y="175.50"></text></g><g><title>check_mod_item_types (1,023,582 samples, 0.77%)</title><rect x="63.2411%" y="149" width="0.7654%" height="15" fill="rgb(233,223,10)"/><text x="63.4911%" y="159.50"></text></g><g><title>late_bound_vars_map (239,335 samples, 0.18%)</title><rect x="64.5977%" y="117" width="0.1790%" height="15" fill="rgb(215,21,27)"/><text x="64.8477%" y="127.50"></text></g><g><title>resolve_lifetimes (214,974 samples, 0.16%)</title><rect x="64.6159%" y="101" width="0.1607%" height="15" fill="rgb(232,23,21)"/><text x="64.8659%" y="111.50"></text></g><g><title>fn_sig (739,710 samples, 0.55%)</title><rect x="64.2736%" y="133" width="0.5531%" height="15" fill="rgb(244,5,23)"/><text x="64.5236%" y="143.50"></text></g><g><title>generics_of (335,384 samples, 0.25%)</title><rect x="64.8267%" y="133" width="0.2508%" height="15" fill="rgb(226,81,46)"/><text x="65.0767%" y="143.50"></text></g><g><title>late_bound_vars_map (343,664 samples, 0.26%)</title><rect x="65.5084%" y="85" width="0.2570%" height="15" fill="rgb(247,70,30)"/><text x="65.7584%" y="95.50"></text></g><g><title>resolve_lifetimes (325,424 samples, 0.24%)</title><rect x="65.5221%" y="69" width="0.2433%" height="15" fill="rgb(212,68,19)"/><text x="65.7721%" y="79.50"></text></g><g><title>lint_levels (142,921 samples, 0.11%)</title><rect x="65.6586%" y="53" width="0.1069%" height="15" fill="rgb(240,187,13)"/><text x="65.9086%" y="63.50"></text></g><g><title>explicit_predicates_of (705,166 samples, 0.53%)</title><rect x="65.2551%" y="101" width="0.5273%" height="15" fill="rgb(223,113,26)"/><text x="65.5051%" y="111.50"></text></g><g><title>predicates_of (1,154,022 samples, 0.86%)</title><rect x="65.1257%" y="133" width="0.8629%" height="15" fill="rgb(206,192,2)"/><text x="65.3757%" y="143.50"></text></g><g><title>predicates_defined_on (1,087,961 samples, 0.81%)</title><rect x="65.1751%" y="117" width="0.8135%" height="15" fill="rgb(241,108,4)"/><text x="65.4251%" y="127.50"></text></g><g><title>inferred_outlives_of (275,814 samples, 0.21%)</title><rect x="65.7824%" y="101" width="0.2062%" height="15" fill="rgb(247,173,49)"/><text x="66.0324%" y="111.50"></text></g><g><title>inferred_outlives_crate (252,303 samples, 0.19%)</title><rect x="65.8000%" y="85" width="0.1887%" height="15" fill="rgb(224,114,35)"/><text x="66.0500%" y="95.50"></text></g><g><title>type_collecting (2,784,191 samples, 2.08%)</title><rect x="64.0095%" y="165" width="2.0819%" height="15" fill="rgb(245,159,27)"/><text x="64.2595%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,764,851 samples, 2.07%)</title><rect x="64.0239%" y="149" width="2.0674%" height="15" fill="rgb(245,172,44)"/><text x="64.2739%" y="159.50">c..</text></g><g><title>type_of (137,332 samples, 0.10%)</title><rect x="65.9887%" y="133" width="0.1027%" height="15" fill="rgb(236,23,11)"/><text x="66.2387%" y="143.50"></text></g><g><title>evaluate_obligation (810,470 samples, 0.61%)</title><rect x="68.2601%" y="133" width="0.6060%" height="15" fill="rgb(205,117,38)"/><text x="68.5101%" y="143.50"></text></g><g><title>implied_outlives_bounds (425,923 samples, 0.32%)</title><rect x="68.8661%" y="133" width="0.3185%" height="15" fill="rgb(237,72,25)"/><text x="69.1161%" y="143.50"></text></g><g><title>param_env (440,204 samples, 0.33%)</title><rect x="69.1846%" y="133" width="0.3292%" height="15" fill="rgb(244,70,9)"/><text x="69.4346%" y="143.50"></text></g><g><title>region_scope_tree (453,019 samples, 0.34%)</title><rect x="69.5384%" y="133" width="0.3387%" height="15" fill="rgb(217,125,39)"/><text x="69.7884%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,793,905 samples, 3.58%)</title><rect x="66.3021%" y="149" width="3.5847%" height="15" fill="rgb(235,36,10)"/><text x="66.5521%" y="159.50">chec..</text></g><g><title>adt_sized_constraint (153,272 samples, 0.11%)</title><rect x="71.5959%" y="117" width="0.1146%" height="15" fill="rgb(251,123,47)"/><text x="71.8459%" y="127.50"></text></g><g><title>evaluate_obligation (264,343 samples, 0.20%)</title><rect x="71.5273%" y="133" width="0.1977%" height="15" fill="rgb(221,13,13)"/><text x="71.7773%" y="143.50"></text></g><g><title>implied_outlives_bounds (202,581 samples, 0.15%)</title><rect x="71.7401%" y="133" width="0.1515%" height="15" fill="rgb(238,131,9)"/><text x="71.9901%" y="143.50"></text></g><g><title>object_safety_violations (260,132 samples, 0.19%)</title><rect x="71.8916%" y="133" width="0.1945%" height="15" fill="rgb(211,50,8)"/><text x="72.1416%" y="143.50"></text></g><g><title>param_env (434,062 samples, 0.32%)</title><rect x="72.0861%" y="133" width="0.3246%" height="15" fill="rgb(245,182,24)"/><text x="72.3361%" y="143.50"></text></g><g><title>analysis (96,339,590 samples, 72.04%)</title><rect x="0.5873%" y="197" width="72.0387%" height="15" fill="rgb(242,14,37)"/><text x="0.8373%" y="207.50">analysis</text></g><g><title>type_check_crate (56,213,670 samples, 42.03%)</title><rect x="30.5918%" y="181" width="42.0342%" height="15" fill="rgb(246,228,12)"/><text x="30.8418%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,731,798 samples, 6.53%)</title><rect x="66.0968%" y="165" width="6.5293%" height="15" fill="rgb(213,55,15)"/><text x="66.3468%" y="175.50">wf_checki..</text></g><g><title>check_item_well_formed (3,663,291 samples, 2.74%)</title><rect x="69.8868%" y="149" width="2.7393%" height="15" fill="rgb(209,9,3)"/><text x="70.1368%" y="159.50">ch..</text></g><g><title>codegen_crate (427,015 samples, 0.32%)</title><rect x="72.6343%" y="197" width="0.3193%" height="15" fill="rgb(230,59,30)"/><text x="72.8843%" y="207.50"></text></g><g><title>AST_validation (158,541 samples, 0.12%)</title><rect x="73.1035%" y="181" width="0.1186%" height="15" fill="rgb(209,121,21)"/><text x="73.3535%" y="191.50"></text></g><g><title>metadata_load_macro (208,122 samples, 0.16%)</title><rect x="84.3303%" y="149" width="0.1556%" height="15" fill="rgb(220,109,13)"/><text x="84.5803%" y="159.50"></text></g><g><title>metadata_register_crate (2,243,586 samples, 1.68%)</title><rect x="84.4859%" y="149" width="1.6777%" height="15" fill="rgb(232,18,1)"/><text x="84.7359%" y="159.50"></text></g><g><title>metadata_register_crate (811,298 samples, 0.61%)</title><rect x="85.5570%" y="133" width="0.6067%" height="15" fill="rgb(215,41,42)"/><text x="85.8070%" y="143.50"></text></g><g><title>macro_expand_crate (17,377,754 samples, 12.99%)</title><rect x="73.3565%" y="181" width="12.9944%" height="15" fill="rgb(224,123,36)"/><text x="73.6065%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (17,363,994 samples, 12.98%)</title><rect x="73.3668%" y="165" width="12.9841%" height="15" fill="rgb(240,125,3)"/><text x="73.6168%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (250,443 samples, 0.19%)</title><rect x="86.1636%" y="149" width="0.1873%" height="15" fill="rgb(205,98,50)"/><text x="86.4136%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (228,262 samples, 0.17%)</title><rect x="86.3579%" y="181" width="0.1707%" height="15" fill="rgb(205,185,37)"/><text x="86.6079%" y="191.50"></text></g><g><title>late_resolve_crate (1,893,131 samples, 1.42%)</title><rect x="86.6210%" y="165" width="1.4156%" height="15" fill="rgb(238,207,15)"/><text x="86.8710%" y="175.50"></text></g><g><title>configure_and_expand (20,300,207 samples, 15.18%)</title><rect x="72.9536%" y="197" width="15.1796%" height="15" fill="rgb(213,199,42)"/><text x="73.2036%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,145,964 samples, 1.60%)</title><rect x="86.5286%" y="181" width="1.6047%" height="15" fill="rgb(235,201,11)"/><text x="86.7786%" y="191.50"></text></g><g><title>drop_ast (227,733 samples, 0.17%)</title><rect x="88.1332%" y="197" width="0.1703%" height="15" fill="rgb(207,46,11)"/><text x="88.3832%" y="207.50"></text></g><g><title>early_lint_checks (417,905 samples, 0.31%)</title><rect x="88.3139%" y="197" width="0.3125%" height="15" fill="rgb(241,35,35)"/><text x="88.5639%" y="207.50"></text></g><g><title>free_global_ctxt (3,669,981 samples, 2.74%)</title><rect x="88.6264%" y="197" width="2.7443%" height="15" fill="rgb(243,32,47)"/><text x="88.8764%" y="207.50">fr..</text></g><g><title>generate_crate_metadata (1,405,576 samples, 1.05%)</title><rect x="91.3706%" y="197" width="1.0510%" height="15" fill="rgb(247,202,23)"/><text x="91.6206%" y="207.50"></text></g><g><title>hir_lowering (3,343,727 samples, 2.50%)</title><rect x="92.4217%" y="197" width="2.5003%" height="15" fill="rgb(219,102,11)"/><text x="92.6717%" y="207.50">hi..</text></g><g><title>parse_crate (5,238,439 samples, 3.92%)</title><rect x="94.9618%" y="197" width="3.9171%" height="15" fill="rgb(243,110,44)"/><text x="95.2118%" y="207.50">pars..</text></g><g><title>prepare_outputs (195,193 samples, 0.15%)</title><rect x="98.8861%" y="197" width="0.1460%" height="15" fill="rgb(222,74,54)"/><text x="99.1361%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (803,279 samples, 0.60%)</title><rect x="99.0321%" y="197" width="0.6007%" height="15" fill="rgb(216,99,12)"/><text x="99.2821%" y="207.50"></text></g><g><title>all (133,733,119 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (133,733,119 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (380,964 samples, 0.28%)</title><rect x="99.7151%" y="197" width="0.2849%" height="15" fill="rgb(213,25,53)"/><text x="99.9651%" y="207.50"></text></g></svg></svg>