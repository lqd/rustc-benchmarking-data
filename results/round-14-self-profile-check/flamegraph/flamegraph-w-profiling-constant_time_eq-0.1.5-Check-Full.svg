<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (69,971 samples, 0.15%)</title><rect x="13.9213%" y="133" width="0.1540%" height="15" fill="rgb(227,0,7)"/><text x="14.1713%" y="143.50"></text></g><g><title>is_copy_raw (195,772 samples, 0.43%)</title><rect x="16.3039%" y="117" width="0.4308%" height="15" fill="rgb(217,0,24)"/><text x="16.5539%" y="127.50"></text></g><g><title>evaluate_obligation (178,822 samples, 0.39%)</title><rect x="16.3412%" y="101" width="0.3935%" height="15" fill="rgb(221,193,54)"/><text x="16.5912%" y="111.50"></text></g><g><title>trait_impls_of (77,361 samples, 0.17%)</title><rect x="16.5645%" y="85" width="0.1702%" height="15" fill="rgb(248,212,6)"/><text x="16.8145%" y="95.50"></text></g><g><title>predicates_of (63,570 samples, 0.14%)</title><rect x="17.0167%" y="69" width="0.1399%" height="15" fill="rgb(208,68,35)"/><text x="17.2667%" y="79.50"></text></g><g><title>needs_drop_raw (184,262 samples, 0.41%)</title><rect x="16.7585%" y="117" width="0.4055%" height="15" fill="rgb(232,128,0)"/><text x="17.0085%" y="127.50"></text></g><g><title>is_copy_raw (171,781 samples, 0.38%)</title><rect x="16.7860%" y="101" width="0.3780%" height="15" fill="rgb(207,160,47)"/><text x="17.0360%" y="111.50"></text></g><g><title>evaluate_obligation (156,931 samples, 0.35%)</title><rect x="16.8187%" y="85" width="0.3453%" height="15" fill="rgb(228,23,34)"/><text x="17.0687%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (61,561 samples, 0.14%)</title><rect x="17.3107%" y="101" width="0.1355%" height="15" fill="rgb(218,30,26)"/><text x="17.5607%" y="111.50"></text></g><g><title>impl_parent (146,772 samples, 0.32%)</title><rect x="18.0356%" y="85" width="0.3230%" height="15" fill="rgb(220,122,19)"/><text x="18.2856%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (89,511 samples, 0.20%)</title><rect x="18.1616%" y="69" width="0.1970%" height="15" fill="rgb(250,228,42)"/><text x="18.4116%" y="79.50"></text></g><g><title>specialization_graph_of (901,900 samples, 1.98%)</title><rect x="17.4539%" y="101" width="1.9846%" height="15" fill="rgb(240,193,28)"/><text x="17.7039%" y="111.50">s..</text></g><g><title>impl_trait_ref (490,765 samples, 1.08%)</title><rect x="18.3586%" y="85" width="1.0799%" height="15" fill="rgb(216,20,37)"/><text x="18.6086%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (433,065 samples, 0.95%)</title><rect x="18.4855%" y="69" width="0.9529%" height="15" fill="rgb(206,188,39)"/><text x="18.7355%" y="79.50"></text></g><g><title>resolve_instance (1,060,221 samples, 2.33%)</title><rect x="17.1640%" y="117" width="2.3329%" height="15" fill="rgb(217,207,13)"/><text x="17.4140%" y="127.50">r..</text></g><g><title>thir_body (347,732 samples, 0.77%)</title><rect x="19.5127%" y="117" width="0.7652%" height="15" fill="rgb(231,73,38)"/><text x="19.7627%" y="127.50"></text></g><g><title>mir_const (3,464,677 samples, 7.62%)</title><rect x="12.6648%" y="165" width="7.6237%" height="15" fill="rgb(225,20,46)"/><text x="12.9148%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (3,079,095 samples, 6.78%)</title><rect x="13.5132%" y="149" width="6.7753%" height="15" fill="rgb(210,31,41)"/><text x="13.7632%" y="159.50">unsafety_..</text></g><g><title>mir_built (2,823,661 samples, 6.21%)</title><rect x="14.0753%" y="133" width="6.2132%" height="15" fill="rgb(221,200,47)"/><text x="14.3253%" y="143.50">mir_built</text></g><g><title>mir_promoted (4,434,617 samples, 9.76%)</title><rect x="11.7006%" y="181" width="9.7580%" height="15" fill="rgb(226,26,5)"/><text x="11.9506%" y="191.50">mir_promoted</text></g><g><title>mir_const_qualif (531,775 samples, 1.17%)</title><rect x="20.2885%" y="165" width="1.1701%" height="15" fill="rgb(249,33,26)"/><text x="20.5385%" y="175.50"></text></g><g><title>mir_const (411,015 samples, 0.90%)</title><rect x="20.5542%" y="149" width="0.9044%" height="15" fill="rgb(235,183,28)"/><text x="20.8042%" y="159.50"></text></g><g><title>unsafety_check_result (272,964 samples, 0.60%)</title><rect x="20.8580%" y="133" width="0.6006%" height="15" fill="rgb(221,5,38)"/><text x="21.1080%" y="143.50"></text></g><g><title>mir_built (234,644 samples, 0.52%)</title><rect x="20.9423%" y="117" width="0.5163%" height="15" fill="rgb(247,18,42)"/><text x="21.1923%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (201,223 samples, 0.44%)</title><rect x="21.4686%" y="181" width="0.4428%" height="15" fill="rgb(241,131,45)"/><text x="21.7186%" y="191.50"></text></g><g><title>normalize_projection_ty (145,753 samples, 0.32%)</title><rect x="21.5907%" y="165" width="0.3207%" height="15" fill="rgb(249,31,29)"/><text x="21.8407%" y="175.50"></text></g><g><title>MIR_borrow_checking (9,415,764 samples, 20.72%)</title><rect x="1.9080%" y="213" width="20.7186%" height="15" fill="rgb(225,111,53)"/><text x="2.1580%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,351,774 samples, 20.58%)</title><rect x="2.0488%" y="197" width="20.5778%" height="15" fill="rgb(238,160,17)"/><text x="2.2988%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (325,044 samples, 0.72%)</title><rect x="21.9114%" y="181" width="0.7152%" height="15" fill="rgb(214,148,48)"/><text x="22.1614%" y="191.50"></text></g><g><title>evaluate_obligation (99,181 samples, 0.22%)</title><rect x="22.4084%" y="165" width="0.2182%" height="15" fill="rgb(232,36,49)"/><text x="22.6584%" y="175.50"></text></g><g><title>MIR_effect_checking (317,683 samples, 0.70%)</title><rect x="22.6266%" y="213" width="0.6990%" height="15" fill="rgb(209,103,24)"/><text x="22.8766%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (277,203 samples, 0.61%)</title><rect x="22.7157%" y="197" width="0.6100%" height="15" fill="rgb(229,88,8)"/><text x="22.9657%" y="207.50"></text></g><g><title>hir_module_items (131,391 samples, 0.29%)</title><rect x="23.3257%" y="213" width="0.2891%" height="15" fill="rgb(213,181,19)"/><text x="23.5757%" y="223.50"></text></g><g><title>get_lang_items (54,540 samples, 0.12%)</title><rect x="24.1159%" y="165" width="0.1200%" height="15" fill="rgb(254,191,54)"/><text x="24.3659%" y="175.50"></text></g><g><title>codegen_fn_attrs (230,112 samples, 0.51%)</title><rect x="23.8976%" y="181" width="0.5063%" height="15" fill="rgb(241,83,37)"/><text x="24.1476%" y="191.50"></text></g><g><title>check_mod_attrs (330,693 samples, 0.73%)</title><rect x="23.6768%" y="197" width="0.7277%" height="15" fill="rgb(233,36,39)"/><text x="23.9268%" y="207.50"></text></g><g><title>check_mod_const_bodies (54,720 samples, 0.12%)</title><rect x="24.4044%" y="197" width="0.1204%" height="15" fill="rgb(226,3,54)"/><text x="24.6544%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (109,492 samples, 0.24%)</title><rect x="24.5831%" y="197" width="0.2409%" height="15" fill="rgb(245,192,40)"/><text x="24.8331%" y="207.50"></text></g><g><title>misc_checking_1 (586,936 samples, 1.29%)</title><rect x="23.6159%" y="213" width="1.2915%" height="15" fill="rgb(238,167,29)"/><text x="23.8659%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (204,032 samples, 0.45%)</title><rect x="24.9128%" y="197" width="0.4490%" height="15" fill="rgb(232,182,51)"/><text x="25.1628%" y="207.50"></text></g><g><title>check_mod_liveness (164,052 samples, 0.36%)</title><rect x="25.0008%" y="181" width="0.3610%" height="15" fill="rgb(231,60,39)"/><text x="25.2508%" y="191.50"></text></g><g><title>misc_checking_2 (462,775 samples, 1.02%)</title><rect x="24.9074%" y="213" width="1.0183%" height="15" fill="rgb(208,69,12)"/><text x="25.1574%" y="223.50"></text></g><g><title>match_checking (256,273 samples, 0.56%)</title><rect x="25.3618%" y="197" width="0.5639%" height="15" fill="rgb(235,93,37)"/><text x="25.6118%" y="207.50"></text></g><g><title>check_match (236,143 samples, 0.52%)</title><rect x="25.4061%" y="181" width="0.5196%" height="15" fill="rgb(213,116,39)"/><text x="25.6561%" y="191.50"></text></g><g><title>death_checking (128,581 samples, 0.28%)</title><rect x="26.0239%" y="197" width="0.2829%" height="15" fill="rgb(222,207,29)"/><text x="26.2739%" y="207.50"></text></g><g><title>crate_lints (155,062 samples, 0.34%)</title><rect x="26.3124%" y="181" width="0.3412%" height="15" fill="rgb(206,96,30)"/><text x="26.5624%" y="191.50"></text></g><g><title>param_env (52,491 samples, 0.12%)</title><rect x="26.5381%" y="165" width="0.1155%" height="15" fill="rgb(218,138,4)"/><text x="26.7881%" y="175.50"></text></g><g><title>lint_checking (258,803 samples, 0.57%)</title><rect x="26.3069%" y="197" width="0.5695%" height="15" fill="rgb(250,191,14)"/><text x="26.5569%" y="207.50"></text></g><g><title>module_lints (101,221 samples, 0.22%)</title><rect x="26.6536%" y="181" width="0.2227%" height="15" fill="rgb(239,60,40)"/><text x="26.9036%" y="191.50"></text></g><g><title>lint_mod (98,561 samples, 0.22%)</title><rect x="26.6595%" y="165" width="0.2169%" height="15" fill="rgb(206,27,48)"/><text x="26.9095%" y="175.50"></text></g><g><title>privacy_access_levels (60,280 samples, 0.13%)</title><rect x="26.8763%" y="197" width="0.1326%" height="15" fill="rgb(225,35,8)"/><text x="27.1263%" y="207.50"></text></g><g><title>privacy_checking_modules (130,112 samples, 0.29%)</title><rect x="27.0090%" y="197" width="0.2863%" height="15" fill="rgb(250,213,24)"/><text x="27.2590%" y="207.50"></text></g><g><title>check_mod_privacy (128,092 samples, 0.28%)</title><rect x="27.0134%" y="181" width="0.2819%" height="15" fill="rgb(247,123,22)"/><text x="27.2634%" y="191.50"></text></g><g><title>misc_checking_3 (642,577 samples, 1.41%)</title><rect x="25.9257%" y="213" width="1.4139%" height="15" fill="rgb(231,138,38)"/><text x="26.1757%" y="223.50"></text></g><g><title>associated_item (444,745 samples, 0.98%)</title><rect x="47.6073%" y="133" width="0.9786%" height="15" fill="rgb(231,145,46)"/><text x="47.8573%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (380,044 samples, 0.84%)</title><rect x="47.7497%" y="117" width="0.8363%" height="15" fill="rgb(251,118,11)"/><text x="47.9997%" y="127.50"></text></g><g><title>associated_items (555,335 samples, 1.22%)</title><rect x="47.3892%" y="149" width="1.2220%" height="15" fill="rgb(217,147,25)"/><text x="47.6392%" y="159.50"></text></g><g><title>impl_trait_ref (93,970 samples, 0.21%)</title><rect x="49.0206%" y="53" width="0.2068%" height="15" fill="rgb(247,81,37)"/><text x="49.2706%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (89,730 samples, 0.20%)</title><rect x="49.0300%" y="37" width="0.1974%" height="15" fill="rgb(209,12,38)"/><text x="49.2800%" y="47.50"></text></g><g><title>adt_destructor (175,912 samples, 0.39%)</title><rect x="48.8677%" y="117" width="0.3871%" height="15" fill="rgb(227,1,9)"/><text x="49.1177%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (172,892 samples, 0.38%)</title><rect x="48.8743%" y="101" width="0.3804%" height="15" fill="rgb(248,47,43)"/><text x="49.1243%" y="111.50"></text></g><g><title>coherent_trait (164,172 samples, 0.36%)</title><rect x="48.8935%" y="85" width="0.3612%" height="15" fill="rgb(221,10,30)"/><text x="49.1435%" y="95.50"></text></g><g><title>specialization_graph_of (156,442 samples, 0.34%)</title><rect x="48.9105%" y="69" width="0.3442%" height="15" fill="rgb(210,229,1)"/><text x="49.1605%" y="79.50"></text></g><g><title>dropck_outlives (266,802 samples, 0.59%)</title><rect x="48.6798%" y="149" width="0.5871%" height="15" fill="rgb(222,148,37)"/><text x="48.9298%" y="159.50"></text></g><g><title>adt_dtorck_constraint (219,562 samples, 0.48%)</title><rect x="48.7838%" y="133" width="0.4831%" height="15" fill="rgb(234,67,33)"/><text x="49.0338%" y="143.50"></text></g><g><title>adt_sized_constraint (96,982 samples, 0.21%)</title><rect x="52.6311%" y="133" width="0.2134%" height="15" fill="rgb(247,98,35)"/><text x="52.8811%" y="143.50"></text></g><g><title>adt_def (84,762 samples, 0.19%)</title><rect x="52.6580%" y="117" width="0.1865%" height="15" fill="rgb(247,138,52)"/><text x="52.9080%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (81,982 samples, 0.18%)</title><rect x="52.6641%" y="101" width="0.1804%" height="15" fill="rgb(213,79,30)"/><text x="52.9141%" y="111.50"></text></g><g><title>item_attrs (63,111 samples, 0.14%)</title><rect x="52.7056%" y="85" width="0.1389%" height="15" fill="rgb(246,177,23)"/><text x="52.9556%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (60,781 samples, 0.13%)</title><rect x="52.7107%" y="69" width="0.1337%" height="15" fill="rgb(230,62,27)"/><text x="52.9607%" y="79.50"></text></g><g><title>generics_of (364,553 samples, 0.80%)</title><rect x="52.8445%" y="133" width="0.8022%" height="15" fill="rgb(216,154,8)"/><text x="53.0945%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (289,522 samples, 0.64%)</title><rect x="53.0096%" y="117" width="0.6371%" height="15" fill="rgb(244,35,45)"/><text x="53.2596%" y="127.50"></text></g><g><title>impl_polarity (56,170 samples, 0.12%)</title><rect x="53.6867%" y="133" width="0.1236%" height="15" fill="rgb(251,115,12)"/><text x="53.9367%" y="143.50"></text></g><g><title>impl_trait_ref (527,298 samples, 1.16%)</title><rect x="53.8103%" y="133" width="1.1603%" height="15" fill="rgb(240,54,50)"/><text x="54.0603%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (450,756 samples, 0.99%)</title><rect x="53.9788%" y="117" width="0.9919%" height="15" fill="rgb(233,84,52)"/><text x="54.2288%" y="127.50"></text></g><g><title>opt_def_kind (46,650 samples, 0.10%)</title><rect x="55.1861%" y="117" width="0.1026%" height="15" fill="rgb(207,117,47)"/><text x="55.4361%" y="127.50"></text></g><g><title>explicit_predicates_of (70,731 samples, 0.16%)</title><rect x="55.4767%" y="101" width="0.1556%" height="15" fill="rgb(249,43,39)"/><text x="55.7267%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (49,060 samples, 0.11%)</title><rect x="55.5244%" y="85" width="0.1080%" height="15" fill="rgb(209,38,44)"/><text x="55.7744%" y="95.50"></text></g><g><title>predicates_of (310,883 samples, 0.68%)</title><rect x="55.0313%" y="133" width="0.6841%" height="15" fill="rgb(236,212,23)"/><text x="55.2813%" y="143.50"></text></g><g><title>predicates_defined_on (193,853 samples, 0.43%)</title><rect x="55.2888%" y="117" width="0.4266%" height="15" fill="rgb(242,79,21)"/><text x="55.5388%" y="127.50"></text></g><g><title>specializes (612,054 samples, 1.35%)</title><rect x="55.7153%" y="133" width="1.3468%" height="15" fill="rgb(211,96,35)"/><text x="55.9653%" y="143.50"></text></g><g><title>param_env (429,623 samples, 0.95%)</title><rect x="56.1168%" y="117" width="0.9453%" height="15" fill="rgb(253,215,40)"/><text x="56.3668%" y="127.50"></text></g><g><title>def_span (272,113 samples, 0.60%)</title><rect x="56.4633%" y="101" width="0.5988%" height="15" fill="rgb(211,81,21)"/><text x="56.7133%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (258,033 samples, 0.57%)</title><rect x="56.4943%" y="85" width="0.5678%" height="15" fill="rgb(208,190,38)"/><text x="56.7443%" y="95.50"></text></g><g><title>trait_impls_of (333,934 samples, 0.73%)</title><rect x="57.0989%" y="133" width="0.7348%" height="15" fill="rgb(235,213,38)"/><text x="57.3489%" y="143.50"></text></g><g><title>implementations_of_trait (95,353 samples, 0.21%)</title><rect x="57.6239%" y="117" width="0.2098%" height="15" fill="rgb(237,122,38)"/><text x="57.8739%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (71,823 samples, 0.16%)</title><rect x="57.6757%" y="101" width="0.1580%" height="15" fill="rgb(244,218,35)"/><text x="57.9257%" y="111.50"></text></g><g><title>evaluate_obligation (3,900,764 samples, 8.58%)</title><rect x="49.2669%" y="149" width="8.5833%" height="15" fill="rgb(240,68,47)"/><text x="49.5169%" y="159.50">evaluate_obl..</text></g><g><title>fn_sig (94,451 samples, 0.21%)</title><rect x="57.9457%" y="149" width="0.2078%" height="15" fill="rgb(210,16,53)"/><text x="58.1957%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (85,901 samples, 0.19%)</title><rect x="57.9645%" y="133" width="0.1890%" height="15" fill="rgb(235,124,12)"/><text x="58.2145%" y="143.50"></text></g><g><title>generics_of (155,432 samples, 0.34%)</title><rect x="58.1535%" y="149" width="0.3420%" height="15" fill="rgb(224,169,11)"/><text x="58.4035%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (115,211 samples, 0.25%)</title><rect x="58.2421%" y="133" width="0.2535%" height="15" fill="rgb(250,166,2)"/><text x="58.4921%" y="143.50"></text></g><g><title>associated_item (204,502 samples, 0.45%)</title><rect x="58.6258%" y="117" width="0.4500%" height="15" fill="rgb(242,216,29)"/><text x="58.8758%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (186,602 samples, 0.41%)</title><rect x="58.6651%" y="101" width="0.4106%" height="15" fill="rgb(230,116,27)"/><text x="58.9151%" y="111.50"></text></g><g><title>impl_item_implementor_ids (275,873 samples, 0.61%)</title><rect x="58.4956%" y="149" width="0.6070%" height="15" fill="rgb(228,99,48)"/><text x="58.7456%" y="159.50"></text></g><g><title>associated_items (252,653 samples, 0.56%)</title><rect x="58.5467%" y="133" width="0.5559%" height="15" fill="rgb(253,11,6)"/><text x="58.7967%" y="143.50"></text></g><g><title>impl_trait_ref (195,484 samples, 0.43%)</title><rect x="59.1350%" y="149" width="0.4301%" height="15" fill="rgb(247,143,39)"/><text x="59.3850%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (170,714 samples, 0.38%)</title><rect x="59.1895%" y="133" width="0.3756%" height="15" fill="rgb(236,97,10)"/><text x="59.4395%" y="143.50"></text></g><g><title>item_attrs (53,740 samples, 0.12%)</title><rect x="59.5972%" y="149" width="0.1183%" height="15" fill="rgb(233,208,19)"/><text x="59.8472%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (50,190 samples, 0.11%)</title><rect x="59.6050%" y="133" width="0.1104%" height="15" fill="rgb(216,164,2)"/><text x="59.8550%" y="143.50"></text></g><g><title>method_autoderef_steps (93,431 samples, 0.21%)</title><rect x="59.8011%" y="149" width="0.2056%" height="15" fill="rgb(220,129,5)"/><text x="60.0511%" y="159.50"></text></g><g><title>evaluate_obligation (73,711 samples, 0.16%)</title><rect x="59.8445%" y="133" width="0.1622%" height="15" fill="rgb(242,17,10)"/><text x="60.0945%" y="143.50"></text></g><g><title>explicit_predicates_of (78,481 samples, 0.17%)</title><rect x="60.5444%" y="101" width="0.1727%" height="15" fill="rgb(242,107,0)"/><text x="60.7944%" y="111.50"></text></g><g><title>param_env (281,145 samples, 0.62%)</title><rect x="60.1135%" y="149" width="0.6186%" height="15" fill="rgb(251,28,31)"/><text x="60.3635%" y="159.50"></text></g><g><title>predicates_of (137,082 samples, 0.30%)</title><rect x="60.4305%" y="133" width="0.3016%" height="15" fill="rgb(233,223,10)"/><text x="60.6805%" y="143.50"></text></g><g><title>predicates_defined_on (119,562 samples, 0.26%)</title><rect x="60.4690%" y="117" width="0.2631%" height="15" fill="rgb(215,21,27)"/><text x="60.7190%" y="127.50"></text></g><g><title>explicit_predicates_of (94,990 samples, 0.21%)</title><rect x="61.1296%" y="117" width="0.2090%" height="15" fill="rgb(232,23,21)"/><text x="61.3796%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (60,320 samples, 0.13%)</title><rect x="61.2059%" y="101" width="0.1327%" height="15" fill="rgb(244,5,23)"/><text x="61.4559%" y="111.50"></text></g><g><title>predicates_of (327,543 samples, 0.72%)</title><rect x="60.7384%" y="149" width="0.7207%" height="15" fill="rgb(226,81,46)"/><text x="60.9884%" y="159.50"></text></g><g><title>predicates_defined_on (211,962 samples, 0.47%)</title><rect x="60.9927%" y="133" width="0.4664%" height="15" fill="rgb(247,70,30)"/><text x="61.2427%" y="143.50"></text></g><g><title>inferred_outlives_of (54,751 samples, 0.12%)</title><rect x="61.3386%" y="117" width="0.1205%" height="15" fill="rgb(212,68,19)"/><text x="61.5886%" y="127.50"></text></g><g><title>region_scope_tree (52,970 samples, 0.12%)</title><rect x="61.4591%" y="149" width="0.1166%" height="15" fill="rgb(240,187,13)"/><text x="61.7091%" y="159.50"></text></g><g><title>specializes (165,152 samples, 0.36%)</title><rect x="61.5757%" y="149" width="0.3634%" height="15" fill="rgb(223,113,26)"/><text x="61.8257%" y="159.50"></text></g><g><title>param_env (100,290 samples, 0.22%)</title><rect x="61.7184%" y="133" width="0.2207%" height="15" fill="rgb(206,192,2)"/><text x="61.9684%" y="143.50"></text></g><g><title>type_of (100,421 samples, 0.22%)</title><rect x="62.0442%" y="149" width="0.2210%" height="15" fill="rgb(241,108,4)"/><text x="62.2942%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (85,841 samples, 0.19%)</title><rect x="62.0763%" y="133" width="0.1889%" height="15" fill="rgb(247,173,49)"/><text x="62.3263%" y="143.50"></text></g><g><title>item_bodies_checking (15,839,654 samples, 34.85%)</title><rect x="27.4842%" y="197" width="34.8538%" height="15" fill="rgb(224,114,35)"/><text x="27.7342%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,836,474 samples, 34.85%)</title><rect x="27.4912%" y="181" width="34.8468%" height="15" fill="rgb(245,159,27)"/><text x="27.7412%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (15,787,424 samples, 34.74%)</title><rect x="27.5992%" y="165" width="34.7389%" height="15" fill="rgb(245,172,44)"/><text x="27.8492%" y="175.50">typeck</text></g><g><title>lit_to_const (60,271 samples, 0.13%)</title><rect x="62.9280%" y="149" width="0.1326%" height="15" fill="rgb(236,23,11)"/><text x="63.1780%" y="159.50"></text></g><g><title>fn_sig (246,183 samples, 0.54%)</title><rect x="62.5597%" y="165" width="0.5417%" height="15" fill="rgb(205,117,38)"/><text x="62.8097%" y="175.50"></text></g><g><title>named_region_map (153,403 samples, 0.34%)</title><rect x="63.1848%" y="149" width="0.3376%" height="15" fill="rgb(237,72,25)"/><text x="63.4348%" y="159.50"></text></g><g><title>resolve_lifetimes (133,342 samples, 0.29%)</title><rect x="63.2290%" y="133" width="0.2934%" height="15" fill="rgb(244,70,9)"/><text x="63.4790%" y="143.50"></text></g><g><title>generics_of (207,553 samples, 0.46%)</title><rect x="63.1014%" y="165" width="0.4567%" height="15" fill="rgb(217,125,39)"/><text x="63.3514%" y="175.50"></text></g><g><title>predicates_of (70,390 samples, 0.15%)</title><rect x="63.5581%" y="165" width="0.1549%" height="15" fill="rgb(235,36,10)"/><text x="63.8081%" y="175.50"></text></g><g><title>predicates_defined_on (59,160 samples, 0.13%)</title><rect x="63.5828%" y="149" width="0.1302%" height="15" fill="rgb(251,123,47)"/><text x="63.8328%" y="159.50"></text></g><g><title>type_collecting (640,057 samples, 1.41%)</title><rect x="62.3536%" y="197" width="1.4084%" height="15" fill="rgb(221,13,13)"/><text x="62.6036%" y="207.50"></text></g><g><title>collect_mod_item_types (628,697 samples, 1.38%)</title><rect x="62.3786%" y="181" width="1.3834%" height="15" fill="rgb(238,131,9)"/><text x="62.6286%" y="191.50"></text></g><g><title>evaluate_obligation (66,711 samples, 0.15%)</title><rect x="65.4575%" y="165" width="0.1468%" height="15" fill="rgb(211,50,8)"/><text x="65.7075%" y="175.50"></text></g><g><title>implied_outlives_bounds (155,281 samples, 0.34%)</title><rect x="65.6043%" y="165" width="0.3417%" height="15" fill="rgb(245,182,24)"/><text x="65.8543%" y="175.50"></text></g><g><title>param_env (237,483 samples, 0.52%)</title><rect x="65.9459%" y="165" width="0.5226%" height="15" fill="rgb(242,14,37)"/><text x="66.1959%" y="175.50"></text></g><g><title>analysis (29,647,467 samples, 65.24%)</title><rect x="1.4987%" y="229" width="65.2367%" height="15" fill="rgb(246,228,12)"/><text x="1.7487%" y="239.50">analysis</text></g><g><title>type_check_crate (17,903,808 samples, 39.40%)</title><rect x="27.3396%" y="213" width="39.3958%" height="15" fill="rgb(213,55,15)"/><text x="27.5896%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,347,394 samples, 2.96%)</title><rect x="63.7706%" y="197" width="2.9648%" height="15" fill="rgb(209,9,3)"/><text x="64.0206%" y="207.50">wf_..</text></g><g><title>check_item_well_formed (1,291,434 samples, 2.84%)</title><rect x="63.8937%" y="181" width="2.8417%" height="15" fill="rgb(230,59,30)"/><text x="64.1437%" y="191.50">ch..</text></g><g><title>region_scope_tree (121,302 samples, 0.27%)</title><rect x="66.4685%" y="165" width="0.2669%" height="15" fill="rgb(209,121,21)"/><text x="66.7185%" y="175.50"></text></g><g><title>codegen_crate (367,835 samples, 0.81%)</title><rect x="66.7598%" y="229" width="0.8094%" height="15" fill="rgb(220,109,13)"/><text x="67.0098%" y="239.50"></text></g><g><title>AST_validation (96,211 samples, 0.21%)</title><rect x="68.1012%" y="213" width="0.2117%" height="15" fill="rgb(232,18,1)"/><text x="68.3512%" y="223.50"></text></g><g><title>crate_injection (83,701 samples, 0.18%)</title><rect x="68.3788%" y="213" width="0.1842%" height="15" fill="rgb(215,41,42)"/><text x="68.6288%" y="223.50"></text></g><g><title>metadata_load_macro (82,630 samples, 0.18%)</title><rect x="84.9983%" y="181" width="0.1818%" height="15" fill="rgb(224,123,36)"/><text x="85.2483%" y="191.50"></text></g><g><title>macro_expand_crate (7,761,656 samples, 17.08%)</title><rect x="68.5629%" y="213" width="17.0789%" height="15" fill="rgb(240,125,3)"/><text x="68.8129%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (7,736,266 samples, 17.02%)</title><rect x="68.6188%" y="197" width="17.0230%" height="15" fill="rgb(205,98,50)"/><text x="68.8688%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (209,812 samples, 0.46%)</title><rect x="85.1801%" y="181" width="0.4617%" height="15" fill="rgb(205,185,37)"/><text x="85.4301%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (96,981 samples, 0.21%)</title><rect x="85.6520%" y="213" width="0.2134%" height="15" fill="rgb(238,207,15)"/><text x="85.9020%" y="223.50"></text></g><g><title>finalize_macro_resolutions (293,743 samples, 0.65%)</title><rect x="85.9179%" y="197" width="0.6464%" height="15" fill="rgb(213,199,42)"/><text x="86.1679%" y="207.50"></text></g><g><title>late_resolve_crate (591,427 samples, 1.30%)</title><rect x="86.5642%" y="197" width="1.3014%" height="15" fill="rgb(235,201,11)"/><text x="86.8142%" y="207.50"></text></g><g><title>configure_and_expand (9,274,402 samples, 20.41%)</title><rect x="67.5692%" y="229" width="20.4075%" height="15" fill="rgb(207,46,11)"/><text x="67.8192%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (959,521 samples, 2.11%)</title><rect x="85.8654%" y="213" width="2.1113%" height="15" fill="rgb(241,35,35)"/><text x="86.1154%" y="223.50">r..</text></g><g><title>drop_ast (62,481 samples, 0.14%)</title><rect x="87.9768%" y="229" width="0.1375%" height="15" fill="rgb(243,32,47)"/><text x="88.2268%" y="239.50"></text></g><g><title>early_lint_checks (130,562 samples, 0.29%)</title><rect x="88.1466%" y="229" width="0.2873%" height="15" fill="rgb(247,202,23)"/><text x="88.3966%" y="239.50"></text></g><g><title>free_global_ctxt (1,364,975 samples, 3.00%)</title><rect x="88.4339%" y="229" width="3.0035%" height="15" fill="rgb(219,102,11)"/><text x="88.6839%" y="239.50">fre..</text></g><g><title>crate_hash (100,631 samples, 0.22%)</title><rect x="92.2819%" y="213" width="0.2214%" height="15" fill="rgb(243,110,44)"/><text x="92.5319%" y="223.50"></text></g><g><title>mir_for_ctfe (129,972 samples, 0.29%)</title><rect x="92.5532%" y="213" width="0.2860%" height="15" fill="rgb(222,74,54)"/><text x="92.8032%" y="223.50"></text></g><g><title>generate_crate_metadata (696,077 samples, 1.53%)</title><rect x="91.4374%" y="229" width="1.5317%" height="15" fill="rgb(216,99,12)"/><text x="91.6874%" y="239.50"></text></g><g><title>hir_lowering (864,709 samples, 1.90%)</title><rect x="92.9691%" y="229" width="1.9027%" height="15" fill="rgb(226,22,26)"/><text x="93.2191%" y="239.50">h..</text></g><g><title>parse_crate (1,055,841 samples, 2.32%)</title><rect x="94.9552%" y="229" width="2.3233%" height="15" fill="rgb(217,163,10)"/><text x="95.2052%" y="239.50">p..</text></g><g><title>prepare_outputs (299,314 samples, 0.66%)</title><rect x="97.2990%" y="229" width="0.6586%" height="15" fill="rgb(213,25,53)"/><text x="97.5490%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (356,924 samples, 0.79%)</title><rect x="97.9576%" y="229" width="0.7854%" height="15" fill="rgb(252,105,26)"/><text x="98.2076%" y="239.50"></text></g><g><title>setup_global_ctxt (125,832 samples, 0.28%)</title><rect x="98.7666%" y="229" width="0.2769%" height="15" fill="rgb(220,39,43)"/><text x="99.0166%" y="239.50"></text></g><g><title>all (45,445,962 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (45,445,962 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (434,705 samples, 0.96%)</title><rect x="99.0435%" y="229" width="0.9565%" height="15" fill="rgb(223,20,43)"/><text x="99.2935%" y="239.50"></text></g></svg></svg>