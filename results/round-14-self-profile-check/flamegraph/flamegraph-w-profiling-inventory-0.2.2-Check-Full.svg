<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (81,381 samples, 0.22%)</title><rect x="5.9631%" y="165" width="0.2236%" height="15" fill="rgb(227,0,7)"/><text x="6.2131%" y="175.50"></text></g><g><title>item_attrs (39,131 samples, 0.11%)</title><rect x="7.5392%" y="101" width="0.1075%" height="15" fill="rgb(217,0,24)"/><text x="7.7892%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (38,111 samples, 0.10%)</title><rect x="7.5420%" y="85" width="0.1047%" height="15" fill="rgb(221,193,54)"/><text x="7.7920%" y="95.50"></text></g><g><title>codegen_fn_attrs (57,111 samples, 0.16%)</title><rect x="7.5056%" y="117" width="0.1569%" height="15" fill="rgb(248,212,6)"/><text x="7.7556%" y="127.50"></text></g><g><title>is_copy_raw (111,670 samples, 0.31%)</title><rect x="8.7265%" y="101" width="0.3068%" height="15" fill="rgb(208,68,35)"/><text x="8.9765%" y="111.50"></text></g><g><title>evaluate_obligation (96,990 samples, 0.27%)</title><rect x="8.7669%" y="85" width="0.2665%" height="15" fill="rgb(232,128,0)"/><text x="9.0169%" y="95.50"></text></g><g><title>needs_drop_raw (263,223 samples, 0.72%)</title><rect x="9.0334%" y="101" width="0.7233%" height="15" fill="rgb(207,160,47)"/><text x="9.2834%" y="111.50"></text></g><g><title>is_copy_raw (237,803 samples, 0.65%)</title><rect x="9.1032%" y="85" width="0.6534%" height="15" fill="rgb(228,23,34)"/><text x="9.3532%" y="95.50"></text></g><g><title>evaluate_obligation (207,302 samples, 0.57%)</title><rect x="9.1870%" y="69" width="0.5696%" height="15" fill="rgb(218,30,26)"/><text x="9.4370%" y="79.50"></text></g><g><title>predicates_of (52,431 samples, 0.14%)</title><rect x="9.6126%" y="53" width="0.1441%" height="15" fill="rgb(220,122,19)"/><text x="9.8626%" y="63.50"></text></g><g><title>predicates_defined_on (38,811 samples, 0.11%)</title><rect x="9.6500%" y="37" width="0.1066%" height="15" fill="rgb(250,228,42)"/><text x="9.9000%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (71,553 samples, 0.20%)</title><rect x="9.8971%" y="85" width="0.1966%" height="15" fill="rgb(240,193,28)"/><text x="10.1471%" y="95.50"></text></g><g><title>resolve_instance (193,183 samples, 0.53%)</title><rect x="9.7566%" y="101" width="0.5308%" height="15" fill="rgb(216,20,37)"/><text x="10.0066%" y="111.50"></text></g><g><title>thir_body (107,872 samples, 0.30%)</title><rect x="10.3000%" y="101" width="0.2964%" height="15" fill="rgb(206,188,39)"/><text x="10.5500%" y="111.50"></text></g><g><title>mir_const (1,408,176 samples, 3.87%)</title><rect x="6.7346%" y="149" width="3.8693%" height="15" fill="rgb(217,207,13)"/><text x="6.9846%" y="159.50">mir_..</text></g><g><title>unsafety_check_result (1,215,104 samples, 3.34%)</title><rect x="7.2651%" y="133" width="3.3388%" height="15" fill="rgb(231,73,38)"/><text x="7.5151%" y="143.50">uns..</text></g><g><title>mir_built (1,070,482 samples, 2.94%)</title><rect x="7.6625%" y="117" width="2.9414%" height="15" fill="rgb(225,20,46)"/><text x="7.9125%" y="127.50">mi..</text></g><g><title>is_freeze_raw (54,240 samples, 0.15%)</title><rect x="10.8540%" y="133" width="0.1490%" height="15" fill="rgb(210,31,41)"/><text x="11.1040%" y="143.50"></text></g><g><title>evaluate_obligation (51,010 samples, 0.14%)</title><rect x="10.8629%" y="117" width="0.1402%" height="15" fill="rgb(221,200,47)"/><text x="11.1129%" y="127.50"></text></g><g><title>mir_const (134,021 samples, 0.37%)</title><rect x="11.0270%" y="133" width="0.3683%" height="15" fill="rgb(226,26,5)"/><text x="11.2770%" y="143.50"></text></g><g><title>unsafety_check_result (104,391 samples, 0.29%)</title><rect x="11.1084%" y="117" width="0.2868%" height="15" fill="rgb(249,33,26)"/><text x="11.3584%" y="127.50"></text></g><g><title>mir_built (87,260 samples, 0.24%)</title><rect x="11.1555%" y="101" width="0.2398%" height="15" fill="rgb(235,183,28)"/><text x="11.4055%" y="111.50"></text></g><g><title>mir_promoted (1,899,791 samples, 5.22%)</title><rect x="6.2466%" y="165" width="5.2201%" height="15" fill="rgb(221,5,38)"/><text x="6.4966%" y="175.50">mir_pr..</text></g><g><title>mir_const_qualif (314,023 samples, 0.86%)</title><rect x="10.6039%" y="149" width="0.8629%" height="15" fill="rgb(247,18,42)"/><text x="10.8539%" y="159.50"></text></g><g><title>type_op_normalize_predicate (37,910 samples, 0.10%)</title><rect x="11.6391%" y="165" width="0.1042%" height="15" fill="rgb(241,131,45)"/><text x="11.8891%" y="175.50"></text></g><g><title>type_op_normalize_ty (92,120 samples, 0.25%)</title><rect x="11.7433%" y="165" width="0.2531%" height="15" fill="rgb(249,31,29)"/><text x="11.9933%" y="175.50"></text></g><g><title>normalize_projection_ty (66,950 samples, 0.18%)</title><rect x="11.8124%" y="149" width="0.1840%" height="15" fill="rgb(225,111,53)"/><text x="12.0624%" y="159.50"></text></g><g><title>MIR_borrow_checking (4,242,907 samples, 11.66%)</title><rect x="1.3415%" y="197" width="11.6584%" height="15" fill="rgb(238,160,17)"/><text x="1.5915%" y="207.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (4,222,037 samples, 11.60%)</title><rect x="1.3989%" y="181" width="11.6011%" height="15" fill="rgb(214,148,48)"/><text x="1.6489%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (365,235 samples, 1.00%)</title><rect x="11.9964%" y="165" width="1.0036%" height="15" fill="rgb(232,36,49)"/><text x="12.2464%" y="175.50"></text></g><g><title>MIR_effect_checking (143,352 samples, 0.39%)</title><rect x="13.0000%" y="197" width="0.3939%" height="15" fill="rgb(209,103,24)"/><text x="13.2500%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (116,772 samples, 0.32%)</title><rect x="13.0730%" y="181" width="0.3209%" height="15" fill="rgb(229,88,8)"/><text x="13.3230%" y="191.50"></text></g><g><title>hir_module_items (93,081 samples, 0.26%)</title><rect x="13.3939%" y="197" width="0.2558%" height="15" fill="rgb(213,181,19)"/><text x="13.6439%" y="207.50"></text></g><g><title>get_lang_items (45,000 samples, 0.12%)</title><rect x="14.1181%" y="149" width="0.1236%" height="15" fill="rgb(254,191,54)"/><text x="14.3681%" y="159.50"></text></g><g><title>codegen_fn_attrs (50,101 samples, 0.14%)</title><rect x="14.3766%" y="133" width="0.1377%" height="15" fill="rgb(241,83,37)"/><text x="14.6266%" y="143.50"></text></g><g><title>should_inherit_track_caller (101,802 samples, 0.28%)</title><rect x="14.2418%" y="149" width="0.2797%" height="15" fill="rgb(233,36,39)"/><text x="14.4918%" y="159.50"></text></g><g><title>codegen_fn_attrs (216,723 samples, 0.60%)</title><rect x="13.9779%" y="165" width="0.5955%" height="15" fill="rgb(226,3,54)"/><text x="14.2279%" y="175.50"></text></g><g><title>check_mod_attrs (314,934 samples, 0.87%)</title><rect x="13.7084%" y="181" width="0.8654%" height="15" fill="rgb(245,192,40)"/><text x="13.9584%" y="191.50"></text></g><g><title>lookup_deprecation_entry (64,430 samples, 0.18%)</title><rect x="14.9307%" y="165" width="0.1770%" height="15" fill="rgb(238,167,29)"/><text x="15.1807%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (181,942 samples, 0.50%)</title><rect x="14.7407%" y="181" width="0.4999%" height="15" fill="rgb(232,182,51)"/><text x="14.9907%" y="191.50"></text></g><g><title>misc_checking_1 (609,637 samples, 1.68%)</title><rect x="13.6519%" y="197" width="1.6751%" height="15" fill="rgb(231,60,39)"/><text x="13.9019%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (100,891 samples, 0.28%)</title><rect x="15.3305%" y="181" width="0.2772%" height="15" fill="rgb(208,69,12)"/><text x="15.5805%" y="191.50"></text></g><g><title>check_mod_liveness (76,650 samples, 0.21%)</title><rect x="15.3971%" y="165" width="0.2106%" height="15" fill="rgb(235,93,37)"/><text x="15.6471%" y="175.50"></text></g><g><title>misc_checking_2 (221,603 samples, 0.61%)</title><rect x="15.3270%" y="197" width="0.6089%" height="15" fill="rgb(213,116,39)"/><text x="15.5770%" y="207.50"></text></g><g><title>match_checking (119,432 samples, 0.33%)</title><rect x="15.6077%" y="181" width="0.3282%" height="15" fill="rgb(222,207,29)"/><text x="15.8577%" y="191.50"></text></g><g><title>check_match (112,282 samples, 0.31%)</title><rect x="15.6274%" y="165" width="0.3085%" height="15" fill="rgb(206,96,30)"/><text x="15.8774%" y="175.50"></text></g><g><title>check_private_in_public (65,961 samples, 0.18%)</title><rect x="15.9570%" y="181" width="0.1812%" height="15" fill="rgb(218,138,4)"/><text x="16.2070%" y="191.50"></text></g><g><title>death_checking (175,462 samples, 0.48%)</title><rect x="16.1382%" y="181" width="0.4821%" height="15" fill="rgb(250,191,14)"/><text x="16.3882%" y="191.50"></text></g><g><title>eval_to_const_value_raw (101,691 samples, 0.28%)</title><rect x="17.5074%" y="149" width="0.2794%" height="15" fill="rgb(239,60,40)"/><text x="17.7574%" y="159.50"></text></g><g><title>eval_to_const_value_raw (95,131 samples, 0.26%)</title><rect x="17.5254%" y="133" width="0.2614%" height="15" fill="rgb(206,27,48)"/><text x="17.7754%" y="143.50"></text></g><g><title>eval_to_allocation_raw (90,001 samples, 0.25%)</title><rect x="17.5395%" y="117" width="0.2473%" height="15" fill="rgb(225,35,8)"/><text x="17.7895%" y="127.50"></text></g><g><title>param_env (135,453 samples, 0.37%)</title><rect x="17.7868%" y="149" width="0.3722%" height="15" fill="rgb(250,213,24)"/><text x="18.0368%" y="159.50"></text></g><g><title>predicates_of (59,001 samples, 0.16%)</title><rect x="17.9969%" y="133" width="0.1621%" height="15" fill="rgb(247,123,22)"/><text x="18.2469%" y="143.50"></text></g><g><title>predicates_defined_on (49,181 samples, 0.14%)</title><rect x="18.0239%" y="117" width="0.1351%" height="15" fill="rgb(231,138,38)"/><text x="18.2739%" y="127.50"></text></g><g><title>trait_impls_of (73,330 samples, 0.20%)</title><rect x="18.1590%" y="149" width="0.2015%" height="15" fill="rgb(231,145,46)"/><text x="18.4090%" y="159.50"></text></g><g><title>crate_lints (1,084,422 samples, 2.98%)</title><rect x="16.6242%" y="165" width="2.9797%" height="15" fill="rgb(251,118,11)"/><text x="16.8742%" y="175.50">cra..</text></g><g><title>type_of (452,506 samples, 1.24%)</title><rect x="18.3605%" y="149" width="1.2434%" height="15" fill="rgb(217,147,25)"/><text x="18.6105%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (369,764 samples, 1.02%)</title><rect x="18.5879%" y="133" width="1.0160%" height="15" fill="rgb(247,81,37)"/><text x="18.8379%" y="143.50"></text></g><g><title>is_copy_raw (38,260 samples, 0.11%)</title><rect x="19.8511%" y="133" width="0.1051%" height="15" fill="rgb(209,12,38)"/><text x="20.1011%" y="143.50"></text></g><g><title>lint_checking (1,233,754 samples, 3.39%)</title><rect x="16.6203%" y="181" width="3.3900%" height="15" fill="rgb(227,1,9)"/><text x="16.8703%" y="191.50">lin..</text></g><g><title>module_lints (147,942 samples, 0.41%)</title><rect x="19.6039%" y="165" width="0.4065%" height="15" fill="rgb(248,47,43)"/><text x="19.8539%" y="175.50"></text></g><g><title>lint_mod (144,102 samples, 0.40%)</title><rect x="19.6144%" y="149" width="0.3960%" height="15" fill="rgb(221,10,30)"/><text x="19.8644%" y="159.50"></text></g><g><title>privacy_access_levels (120,051 samples, 0.33%)</title><rect x="20.0104%" y="181" width="0.3299%" height="15" fill="rgb(210,229,1)"/><text x="20.2604%" y="191.50"></text></g><g><title>privacy_checking_modules (222,792 samples, 0.61%)</title><rect x="20.3403%" y="181" width="0.6122%" height="15" fill="rgb(222,148,37)"/><text x="20.5903%" y="191.50"></text></g><g><title>check_mod_privacy (220,022 samples, 0.60%)</title><rect x="20.3479%" y="165" width="0.6046%" height="15" fill="rgb(234,67,33)"/><text x="20.5979%" y="175.50"></text></g><g><title>misc_checking_3 (1,836,220 samples, 5.05%)</title><rect x="15.9359%" y="197" width="5.0455%" height="15" fill="rgb(247,98,35)"/><text x="16.1859%" y="207.50">misc_c..</text></g><g><title>adt_destructor (41,800 samples, 0.11%)</title><rect x="21.1886%" y="149" width="0.1149%" height="15" fill="rgb(247,138,52)"/><text x="21.4386%" y="159.50"></text></g><g><title>is_copy_raw (140,272 samples, 0.39%)</title><rect x="21.3034%" y="149" width="0.3854%" height="15" fill="rgb(213,79,30)"/><text x="21.5534%" y="159.50"></text></g><g><title>evaluate_obligation (112,982 samples, 0.31%)</title><rect x="21.3784%" y="133" width="0.3104%" height="15" fill="rgb(246,177,23)"/><text x="21.6284%" y="143.50"></text></g><g><title>param_env (72,331 samples, 0.20%)</title><rect x="21.6888%" y="149" width="0.1987%" height="15" fill="rgb(230,62,27)"/><text x="21.9388%" y="159.50"></text></g><g><title>impl_parent (338,436 samples, 0.93%)</title><rect x="23.4273%" y="133" width="0.9299%" height="15" fill="rgb(216,154,8)"/><text x="23.6773%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (214,393 samples, 0.59%)</title><rect x="23.7682%" y="117" width="0.5891%" height="15" fill="rgb(244,35,45)"/><text x="24.0182%" y="127.50"></text></g><g><title>impl_trait_ref (896,776 samples, 2.46%)</title><rect x="24.3573%" y="133" width="2.4641%" height="15" fill="rgb(251,115,12)"/><text x="24.6073%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (771,726 samples, 2.12%)</title><rect x="24.7009%" y="117" width="2.1205%" height="15" fill="rgb(240,54,50)"/><text x="24.9509%" y="127.50">m..</text></g><g><title>item_attrs (37,320 samples, 0.10%)</title><rect x="26.8214%" y="133" width="0.1025%" height="15" fill="rgb(233,84,52)"/><text x="27.0714%" y="143.50"></text></g><g><title>trait_impls_of (124,212 samples, 0.34%)</title><rect x="26.9373%" y="133" width="0.3413%" height="15" fill="rgb(207,117,47)"/><text x="27.1873%" y="143.50"></text></g><g><title>coherent_trait (2,247,985 samples, 6.18%)</title><rect x="21.1035%" y="165" width="6.1769%" height="15" fill="rgb(249,43,39)"/><text x="21.3535%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (1,962,612 samples, 5.39%)</title><rect x="21.8876%" y="149" width="5.3928%" height="15" fill="rgb(209,38,44)"/><text x="22.1376%" y="159.50">special..</text></g><g><title>coherence_checking (2,297,946 samples, 6.31%)</title><rect x="21.0578%" y="181" width="6.3142%" height="15" fill="rgb(236,212,23)"/><text x="21.3078%" y="191.50">coherenc..</text></g><g><title>associated_item (57,320 samples, 0.16%)</title><rect x="34.9588%" y="117" width="0.1575%" height="15" fill="rgb(242,79,21)"/><text x="35.2088%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (42,230 samples, 0.12%)</title><rect x="35.0002%" y="101" width="0.1160%" height="15" fill="rgb(211,96,35)"/><text x="35.2502%" y="111.50"></text></g><g><title>associated_items (90,791 samples, 0.25%)</title><rect x="34.8827%" y="133" width="0.2495%" height="15" fill="rgb(253,215,40)"/><text x="35.1327%" y="143.50"></text></g><g><title>adt_def (46,032 samples, 0.13%)</title><rect x="35.4435%" y="101" width="0.1265%" height="15" fill="rgb(211,81,21)"/><text x="35.6935%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (44,912 samples, 0.12%)</title><rect x="35.4466%" y="85" width="0.1234%" height="15" fill="rgb(208,190,38)"/><text x="35.6966%" y="95.50"></text></g><g><title>dropck_outlives (176,884 samples, 0.49%)</title><rect x="35.1707%" y="133" width="0.4860%" height="15" fill="rgb(235,213,38)"/><text x="35.4207%" y="143.50"></text></g><g><title>adt_dtorck_constraint (94,603 samples, 0.26%)</title><rect x="35.3968%" y="117" width="0.2599%" height="15" fill="rgb(237,122,38)"/><text x="35.6468%" y="127.50"></text></g><g><title>adt_sized_constraint (45,182 samples, 0.12%)</title><rect x="36.0012%" y="117" width="0.1241%" height="15" fill="rgb(244,218,35)"/><text x="36.2512%" y="127.50"></text></g><g><title>evaluate_obligation (190,573 samples, 0.52%)</title><rect x="35.6568%" y="133" width="0.5236%" height="15" fill="rgb(240,68,47)"/><text x="35.9068%" y="143.50"></text></g><g><title>generics_of (40,200 samples, 0.11%)</title><rect x="36.2636%" y="133" width="0.1105%" height="15" fill="rgb(210,16,53)"/><text x="36.5136%" y="143.50"></text></g><g><title>item_attrs (38,760 samples, 0.11%)</title><rect x="36.4780%" y="133" width="0.1065%" height="15" fill="rgb(235,124,12)"/><text x="36.7280%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (36,920 samples, 0.10%)</title><rect x="36.4831%" y="117" width="0.1014%" height="15" fill="rgb(224,169,11)"/><text x="36.7331%" y="127.50"></text></g><g><title>lint_levels (84,961 samples, 0.23%)</title><rect x="36.5845%" y="133" width="0.2335%" height="15" fill="rgb(250,166,2)"/><text x="36.8345%" y="143.50"></text></g><g><title>method_autoderef_steps (87,930 samples, 0.24%)</title><rect x="36.8815%" y="133" width="0.2416%" height="15" fill="rgb(242,216,29)"/><text x="37.1315%" y="143.50"></text></g><g><title>evaluate_obligation (44,740 samples, 0.12%)</title><rect x="37.0001%" y="117" width="0.1229%" height="15" fill="rgb(230,116,27)"/><text x="37.2501%" y="127.50"></text></g><g><title>predicates_of (127,661 samples, 0.35%)</title><rect x="37.1568%" y="133" width="0.3508%" height="15" fill="rgb(228,99,48)"/><text x="37.4068%" y="143.50"></text></g><g><title>predicates_defined_on (83,180 samples, 0.23%)</title><rect x="37.2790%" y="117" width="0.2286%" height="15" fill="rgb(253,11,6)"/><text x="37.5290%" y="127.50"></text></g><g><title>type_of (38,811 samples, 0.11%)</title><rect x="37.5141%" y="133" width="0.1066%" height="15" fill="rgb(247,143,39)"/><text x="37.7641%" y="143.50"></text></g><g><title>item_bodies_checking (3,733,231 samples, 10.26%)</title><rect x="27.4250%" y="181" width="10.2580%" height="15" fill="rgb(236,97,10)"/><text x="27.6750%" y="191.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (3,730,881 samples, 10.25%)</title><rect x="27.4314%" y="165" width="10.2515%" height="15" fill="rgb(233,208,19)"/><text x="27.6814%" y="175.50">typeck_item_bod..</text></g><g><title>typeck (3,716,151 samples, 10.21%)</title><rect x="27.4719%" y="149" width="10.2110%" height="15" fill="rgb(216,164,2)"/><text x="27.7219%" y="159.50">typeck</text></g><g><title>item_types_checking (602,157 samples, 1.65%)</title><rect x="37.6830%" y="181" width="1.6546%" height="15" fill="rgb(220,129,5)"/><text x="37.9330%" y="191.50"></text></g><g><title>check_mod_item_types (598,427 samples, 1.64%)</title><rect x="37.6932%" y="165" width="1.6443%" height="15" fill="rgb(242,17,10)"/><text x="37.9432%" y="175.50"></text></g><g><title>typeck (68,751 samples, 0.19%)</title><rect x="39.1486%" y="149" width="0.1889%" height="15" fill="rgb(242,107,0)"/><text x="39.3986%" y="159.50"></text></g><g><title>associated_item (43,551 samples, 0.12%)</title><rect x="39.9243%" y="117" width="0.1197%" height="15" fill="rgb(251,28,31)"/><text x="40.1743%" y="127.50"></text></g><g><title>associated_items (79,431 samples, 0.22%)</title><rect x="39.8313%" y="133" width="0.2183%" height="15" fill="rgb(233,223,10)"/><text x="40.0813%" y="143.50"></text></g><g><title>fn_sig (175,332 samples, 0.48%)</title><rect x="39.6508%" y="149" width="0.4818%" height="15" fill="rgb(215,21,27)"/><text x="39.9008%" y="159.50"></text></g><g><title>generics_of (76,052 samples, 0.21%)</title><rect x="40.1326%" y="149" width="0.2090%" height="15" fill="rgb(232,23,21)"/><text x="40.3826%" y="159.50"></text></g><g><title>late_bound_vars_map (55,260 samples, 0.15%)</title><rect x="40.7410%" y="101" width="0.1518%" height="15" fill="rgb(244,5,23)"/><text x="40.9910%" y="111.50"></text></g><g><title>resolve_lifetimes (51,960 samples, 0.14%)</title><rect x="40.7501%" y="85" width="0.1428%" height="15" fill="rgb(226,81,46)"/><text x="41.0001%" y="95.50"></text></g><g><title>explicit_predicates_of (142,240 samples, 0.39%)</title><rect x="40.5463%" y="117" width="0.3908%" height="15" fill="rgb(247,70,30)"/><text x="40.7963%" y="127.50"></text></g><g><title>predicates_of (36,430 samples, 0.10%)</title><rect x="41.1339%" y="85" width="0.1001%" height="15" fill="rgb(212,68,19)"/><text x="41.3839%" y="95.50"></text></g><g><title>named_region_map (40,100 samples, 0.11%)</title><rect x="41.8377%" y="69" width="0.1102%" height="15" fill="rgb(240,187,13)"/><text x="42.0877%" y="79.50"></text></g><g><title>predicates_of (643,185 samples, 1.77%)</title><rect x="40.3975%" y="149" width="1.7673%" height="15" fill="rgb(223,113,26)"/><text x="40.6475%" y="159.50"></text></g><g><title>predicates_defined_on (623,105 samples, 1.71%)</title><rect x="40.4527%" y="133" width="1.7121%" height="15" fill="rgb(206,192,2)"/><text x="40.7027%" y="143.50"></text></g><g><title>inferred_outlives_of (446,785 samples, 1.23%)</title><rect x="40.9372%" y="117" width="1.2277%" height="15" fill="rgb(241,108,4)"/><text x="41.1872%" y="127.50"></text></g><g><title>inferred_outlives_crate (437,155 samples, 1.20%)</title><rect x="40.9636%" y="101" width="1.2012%" height="15" fill="rgb(247,173,49)"/><text x="41.2136%" y="111.50"></text></g><g><title>type_of (338,753 samples, 0.93%)</title><rect x="41.2340%" y="85" width="0.9308%" height="15" fill="rgb(224,114,35)"/><text x="41.4840%" y="95.50"></text></g><g><title>type_of (42,130 samples, 0.12%)</title><rect x="42.0491%" y="69" width="0.1158%" height="15" fill="rgb(245,159,27)"/><text x="42.2991%" y="79.50"></text></g><g><title>metadata_decode_entry_type_of (37,270 samples, 0.10%)</title><rect x="42.0624%" y="53" width="0.1024%" height="15" fill="rgb(245,172,44)"/><text x="42.3124%" y="63.50"></text></g><g><title>type_collecting (1,124,332 samples, 3.09%)</title><rect x="39.3411%" y="181" width="3.0894%" height="15" fill="rgb(236,23,11)"/><text x="39.5911%" y="191.50">typ..</text></g><g><title>collect_mod_item_types (1,115,912 samples, 3.07%)</title><rect x="39.3642%" y="165" width="3.0662%" height="15" fill="rgb(205,117,38)"/><text x="39.6142%" y="175.50">col..</text></g><g><title>type_of (83,570 samples, 0.23%)</title><rect x="42.2008%" y="149" width="0.2296%" height="15" fill="rgb(237,72,25)"/><text x="42.4508%" y="159.50"></text></g><g><title>evaluate_obligation (140,660 samples, 0.39%)</title><rect x="43.7813%" y="149" width="0.3865%" height="15" fill="rgb(244,70,9)"/><text x="44.0313%" y="159.50"></text></g><g><title>implied_outlives_bounds (63,530 samples, 0.17%)</title><rect x="44.1962%" y="149" width="0.1746%" height="15" fill="rgb(217,125,39)"/><text x="44.4462%" y="159.50"></text></g><g><title>param_env (78,570 samples, 0.22%)</title><rect x="44.3708%" y="149" width="0.2159%" height="15" fill="rgb(235,36,10)"/><text x="44.6208%" y="159.50"></text></g><g><title>check_impl_item_well_formed (789,340 samples, 2.17%)</title><rect x="42.6053%" y="165" width="2.1689%" height="15" fill="rgb(251,123,47)"/><text x="42.8553%" y="175.50">c..</text></g><g><title>region_scope_tree (57,433 samples, 0.16%)</title><rect x="44.6164%" y="149" width="0.1578%" height="15" fill="rgb(221,13,13)"/><text x="44.8664%" y="159.50"></text></g><g><title>adt_sized_constraint (38,180 samples, 0.10%)</title><rect x="46.6794%" y="149" width="0.1049%" height="15" fill="rgb(238,131,9)"/><text x="46.9294%" y="159.50"></text></g><g><title>adt_def (50,181 samples, 0.14%)</title><rect x="46.9486%" y="101" width="0.1379%" height="15" fill="rgb(211,50,8)"/><text x="47.1986%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (49,011 samples, 0.13%)</title><rect x="46.9518%" y="85" width="0.1347%" height="15" fill="rgb(245,182,24)"/><text x="47.2018%" y="95.50"></text></g><g><title>item_attrs (39,390 samples, 0.11%)</title><rect x="46.9782%" y="69" width="0.1082%" height="15" fill="rgb(242,14,37)"/><text x="47.2282%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (38,590 samples, 0.11%)</title><rect x="46.9804%" y="53" width="0.1060%" height="15" fill="rgb(246,228,12)"/><text x="47.2304%" y="63.50"></text></g><g><title>adt_sized_constraint (57,361 samples, 0.16%)</title><rect x="46.9319%" y="133" width="0.1576%" height="15" fill="rgb(213,55,15)"/><text x="47.1819%" y="143.50"></text></g><g><title>adt_sized_constraint (55,581 samples, 0.15%)</title><rect x="46.9367%" y="117" width="0.1527%" height="15" fill="rgb(209,9,3)"/><text x="47.1867%" y="127.50"></text></g><g><title>evaluate_obligation (111,513 samples, 0.31%)</title><rect x="46.7843%" y="149" width="0.3064%" height="15" fill="rgb(230,59,30)"/><text x="47.0343%" y="159.50"></text></g><g><title>implied_outlives_bounds (64,640 samples, 0.18%)</title><rect x="47.1036%" y="149" width="0.1776%" height="15" fill="rgb(209,121,21)"/><text x="47.3536%" y="159.50"></text></g><g><title>evaluate_obligation (82,431 samples, 0.23%)</title><rect x="47.3831%" y="133" width="0.2265%" height="15" fill="rgb(220,109,13)"/><text x="47.6331%" y="143.50"></text></g><g><title>layout_of (42,581 samples, 0.12%)</title><rect x="47.6096%" y="133" width="0.1170%" height="15" fill="rgb(232,18,1)"/><text x="47.8596%" y="143.50"></text></g><g><title>object_safety_violations (181,682 samples, 0.50%)</title><rect x="47.2813%" y="149" width="0.4992%" height="15" fill="rgb(215,41,42)"/><text x="47.5313%" y="159.50"></text></g><g><title>param_env (127,180 samples, 0.35%)</title><rect x="47.7805%" y="149" width="0.3495%" height="15" fill="rgb(224,123,36)"/><text x="48.0305%" y="159.50"></text></g><g><title>check_item_well_formed (1,318,353 samples, 3.62%)</title><rect x="44.7742%" y="165" width="3.6225%" height="15" fill="rgb(240,125,3)"/><text x="45.0242%" y="175.50">chec..</text></g><g><title>variances_of (47,620 samples, 0.13%)</title><rect x="48.2659%" y="149" width="0.1308%" height="15" fill="rgb(205,98,50)"/><text x="48.5159%" y="159.50"></text></g><g><title>crate_variances (43,570 samples, 0.12%)</title><rect x="48.2770%" y="133" width="0.1197%" height="15" fill="rgb(205,185,37)"/><text x="48.5270%" y="143.50"></text></g><g><title>analysis (17,399,454 samples, 47.81%)</title><rect x="1.0197%" y="213" width="47.8093%" height="15" fill="rgb(238,207,15)"/><text x="1.2697%" y="223.50">analysis</text></g><g><title>type_check_crate (10,134,712 samples, 27.85%)</title><rect x="20.9814%" y="197" width="27.8476%" height="15" fill="rgb(213,199,42)"/><text x="21.2314%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,327,566 samples, 6.40%)</title><rect x="42.4334%" y="181" width="6.3956%" height="15" fill="rgb(235,201,11)"/><text x="42.6834%" y="191.50">wf_check..</text></g><g><title>check_trait_item_well_formed (157,312 samples, 0.43%)</title><rect x="48.3967%" y="165" width="0.4323%" height="15" fill="rgb(207,46,11)"/><text x="48.6467%" y="175.50"></text></g><g><title>codegen_crate (461,776 samples, 1.27%)</title><rect x="48.8462%" y="213" width="1.2688%" height="15" fill="rgb(241,35,35)"/><text x="49.0962%" y="223.50"></text></g><g><title>AST_validation (77,451 samples, 0.21%)</title><rect x="50.4633%" y="197" width="0.2128%" height="15" fill="rgb(243,32,47)"/><text x="50.7133%" y="207.50"></text></g><g><title>crate_injection (45,771 samples, 0.13%)</title><rect x="50.7579%" y="197" width="0.1258%" height="15" fill="rgb(247,202,23)"/><text x="51.0079%" y="207.50"></text></g><g><title>metadata_load_macro (39,700 samples, 0.11%)</title><rect x="65.7868%" y="165" width="0.1091%" height="15" fill="rgb(219,102,11)"/><text x="66.0368%" y="175.50"></text></g><g><title>macro_expand_crate (11,966,843 samples, 32.88%)</title><rect x="50.8836%" y="197" width="32.8819%" height="15" fill="rgb(243,110,44)"/><text x="51.1336%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (11,950,703 samples, 32.84%)</title><rect x="50.9280%" y="181" width="32.8375%" height="15" fill="rgb(222,74,54)"/><text x="51.1780%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (6,503,373 samples, 17.87%)</title><rect x="65.8959%" y="165" width="17.8696%" height="15" fill="rgb(216,99,12)"/><text x="66.1459%" y="175.50">metadata_register_crate</text></g><g><title>pre_AST_expansion_lint_checks (119,401 samples, 0.33%)</title><rect x="83.7771%" y="197" width="0.3281%" height="15" fill="rgb(226,22,26)"/><text x="84.0271%" y="207.50"></text></g><g><title>finalize_imports (37,790 samples, 0.10%)</title><rect x="84.1159%" y="181" width="0.1038%" height="15" fill="rgb(217,163,10)"/><text x="84.3659%" y="191.50"></text></g><g><title>late_resolve_crate (501,755 samples, 1.38%)</title><rect x="84.2878%" y="181" width="1.3787%" height="15" fill="rgb(213,25,53)"/><text x="84.5378%" y="191.50"></text></g><g><title>configure_and_expand (12,988,054 samples, 35.69%)</title><rect x="50.1151%" y="213" width="35.6879%" height="15" fill="rgb(252,105,26)"/><text x="50.3651%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (617,887 samples, 1.70%)</title><rect x="84.1052%" y="197" width="1.6978%" height="15" fill="rgb(220,39,43)"/><text x="84.3552%" y="207.50"></text></g><g><title>drop_ast (54,831 samples, 0.15%)</title><rect x="85.8030%" y="213" width="0.1507%" height="15" fill="rgb(229,68,48)"/><text x="86.0530%" y="223.50"></text></g><g><title>early_lint_checks (153,262 samples, 0.42%)</title><rect x="86.0003%" y="213" width="0.4211%" height="15" fill="rgb(252,8,32)"/><text x="86.2503%" y="223.50"></text></g><g><title>free_global_ctxt (1,527,347 samples, 4.20%)</title><rect x="86.4214%" y="213" width="4.1968%" height="15" fill="rgb(223,20,43)"/><text x="86.6714%" y="223.50">free_..</text></g><g><title>crate_hash (60,950 samples, 0.17%)</title><rect x="92.1273%" y="197" width="0.1675%" height="15" fill="rgb(229,81,49)"/><text x="92.3773%" y="207.50"></text></g><g><title>generate_crate_metadata (713,727 samples, 1.96%)</title><rect x="90.6182%" y="213" width="1.9611%" height="15" fill="rgb(236,28,36)"/><text x="90.8682%" y="223.50">g..</text></g><g><title>hir_lowering (797,759 samples, 2.19%)</title><rect x="92.5793%" y="213" width="2.1920%" height="15" fill="rgb(249,185,26)"/><text x="92.8293%" y="223.50">h..</text></g><g><title>link (45,450 samples, 0.12%)</title><rect x="94.7713%" y="213" width="0.1249%" height="15" fill="rgb(249,174,33)"/><text x="95.0213%" y="223.50"></text></g><g><title>parse_crate (913,050 samples, 2.51%)</title><rect x="94.8962%" y="213" width="2.5088%" height="15" fill="rgb(233,201,37)"/><text x="95.1462%" y="223.50">pa..</text></g><g><title>prepare_outputs (181,072 samples, 0.50%)</title><rect x="97.4194%" y="213" width="0.4975%" height="15" fill="rgb(221,78,26)"/><text x="97.6694%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (395,804 samples, 1.09%)</title><rect x="97.9170%" y="213" width="1.0876%" height="15" fill="rgb(250,127,30)"/><text x="98.1670%" y="223.50"></text></g><g><title>setup_global_ctxt (78,221 samples, 0.21%)</title><rect x="99.0353%" y="213" width="0.2149%" height="15" fill="rgb(230,49,44)"/><text x="99.2853%" y="223.50"></text></g><g><title>all (36,393,455 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (36,393,455 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (272,873 samples, 0.75%)</title><rect x="99.2502%" y="213" width="0.7498%" height="15" fill="rgb(215,43,3)"/><text x="99.5002%" y="223.50"></text></g></svg></svg>