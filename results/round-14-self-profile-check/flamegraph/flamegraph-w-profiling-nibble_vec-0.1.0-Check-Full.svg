<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (177,002 samples, 0.19%)</title><rect x="7.7262%" y="149" width="0.1913%" height="15" fill="rgb(227,0,7)"/><text x="7.9762%" y="159.50"></text></g><g><title>codegen_fn_attrs (148,754 samples, 0.16%)</title><rect x="8.1354%" y="133" width="0.1607%" height="15" fill="rgb(217,0,24)"/><text x="8.3854%" y="143.50"></text></g><g><title>adt_drop_tys (104,081 samples, 0.11%)</title><rect x="9.7817%" y="101" width="0.1125%" height="15" fill="rgb(221,193,54)"/><text x="10.0317%" y="111.50"></text></g><g><title>needs_drop_raw (501,087 samples, 0.54%)</title><rect x="9.7410%" y="117" width="0.5415%" height="15" fill="rgb(248,212,6)"/><text x="9.9910%" y="127.50"></text></g><g><title>is_copy_raw (359,296 samples, 0.39%)</title><rect x="9.8942%" y="101" width="0.3883%" height="15" fill="rgb(208,68,35)"/><text x="10.1442%" y="111.50"></text></g><g><title>evaluate_obligation (311,545 samples, 0.34%)</title><rect x="9.9458%" y="85" width="0.3367%" height="15" fill="rgb(232,128,0)"/><text x="10.1958%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (262,084 samples, 0.28%)</title><rect x="10.4391%" y="101" width="0.2832%" height="15" fill="rgb(207,160,47)"/><text x="10.6891%" y="111.50"></text></g><g><title>impl_parent (241,924 samples, 0.26%)</title><rect x="11.1892%" y="85" width="0.2614%" height="15" fill="rgb(228,23,34)"/><text x="11.4392%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (164,761 samples, 0.18%)</title><rect x="11.2726%" y="69" width="0.1780%" height="15" fill="rgb(218,30,26)"/><text x="11.5226%" y="79.50"></text></g><g><title>specialization_graph_of (1,164,943 samples, 1.26%)</title><rect x="10.7994%" y="101" width="1.2588%" height="15" fill="rgb(220,122,19)"/><text x="11.0494%" y="111.50"></text></g><g><title>impl_trait_ref (562,334 samples, 0.61%)</title><rect x="11.4506%" y="85" width="0.6077%" height="15" fill="rgb(250,228,42)"/><text x="11.7006%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (482,903 samples, 0.52%)</title><rect x="11.5364%" y="69" width="0.5218%" height="15" fill="rgb(240,193,28)"/><text x="11.7864%" y="79.50"></text></g><g><title>resolve_instance (1,711,498 samples, 1.85%)</title><rect x="10.2825%" y="117" width="1.8494%" height="15" fill="rgb(216,20,37)"/><text x="10.5325%" y="127.50">r..</text></g><g><title>thir_body (527,436 samples, 0.57%)</title><rect x="12.1413%" y="117" width="0.5699%" height="15" fill="rgb(206,188,39)"/><text x="12.3913%" y="127.50"></text></g><g><title>mir_const (5,025,337 samples, 5.43%)</title><rect x="7.2876%" y="165" width="5.4303%" height="15" fill="rgb(217,207,13)"/><text x="7.5376%" y="175.50">mir_con..</text></g><g><title>unsafety_check_result (4,442,399 samples, 4.80%)</title><rect x="7.9175%" y="149" width="4.8004%" height="15" fill="rgb(231,73,38)"/><text x="8.1675%" y="159.50">unsafe..</text></g><g><title>mir_built (4,091,974 samples, 4.42%)</title><rect x="8.2962%" y="133" width="4.4218%" height="15" fill="rgb(225,20,46)"/><text x="8.5462%" y="143.50">mir_b..</text></g><g><title>mir_promoted (5,588,612 samples, 6.04%)</title><rect x="6.8599%" y="181" width="6.0390%" height="15" fill="rgb(210,31,41)"/><text x="7.1099%" y="191.50">mir_prom..</text></g><g><title>mir_const_qualif (167,432 samples, 0.18%)</title><rect x="12.7179%" y="165" width="0.1809%" height="15" fill="rgb(221,200,47)"/><text x="12.9679%" y="175.50"></text></g><g><title>mir_const (116,032 samples, 0.13%)</title><rect x="12.7735%" y="149" width="0.1254%" height="15" fill="rgb(226,26,5)"/><text x="13.0235%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (257,323 samples, 0.28%)</title><rect x="12.8993%" y="181" width="0.2781%" height="15" fill="rgb(249,33,26)"/><text x="13.1493%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (322,845 samples, 0.35%)</title><rect x="13.1773%" y="181" width="0.3489%" height="15" fill="rgb(235,183,28)"/><text x="13.4273%" y="191.50"></text></g><g><title>normalize_projection_ty (207,074 samples, 0.22%)</title><rect x="13.3024%" y="165" width="0.2238%" height="15" fill="rgb(221,5,38)"/><text x="13.5524%" y="175.50"></text></g><g><title>type_op_prove_predicate (803,201 samples, 0.87%)</title><rect x="13.5607%" y="181" width="0.8679%" height="15" fill="rgb(247,18,42)"/><text x="13.8107%" y="191.50"></text></g><g><title>MIR_borrow_checking (12,440,340 samples, 13.44%)</title><rect x="0.9880%" y="213" width="13.4429%" height="15" fill="rgb(241,131,45)"/><text x="1.2380%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,398,340 samples, 13.40%)</title><rect x="1.0334%" y="197" width="13.3976%" height="15" fill="rgb(249,31,29)"/><text x="1.2834%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (98,601 samples, 0.11%)</title><rect x="14.4309%" y="213" width="0.1065%" height="15" fill="rgb(225,111,53)"/><text x="14.6809%" y="223.50"></text></g><g><title>hir_module_items (167,812 samples, 0.18%)</title><rect x="14.5375%" y="213" width="0.1813%" height="15" fill="rgb(238,160,17)"/><text x="14.7875%" y="223.50"></text></g><g><title>get_lang_items (93,191 samples, 0.10%)</title><rect x="15.2379%" y="133" width="0.1007%" height="15" fill="rgb(214,148,48)"/><text x="15.4879%" y="143.50"></text></g><g><title>codegen_fn_attrs (264,093 samples, 0.29%)</title><rect x="15.1903%" y="149" width="0.2854%" height="15" fill="rgb(232,36,49)"/><text x="15.4403%" y="159.50"></text></g><g><title>codegen_fn_attrs (453,307 samples, 0.49%)</title><rect x="14.9919%" y="181" width="0.4898%" height="15" fill="rgb(209,103,24)"/><text x="15.2419%" y="191.50"></text></g><g><title>should_inherit_track_caller (390,597 samples, 0.42%)</title><rect x="15.0597%" y="165" width="0.4221%" height="15" fill="rgb(229,88,8)"/><text x="15.3097%" y="175.50"></text></g><g><title>check_mod_attrs (681,238 samples, 0.74%)</title><rect x="14.7461%" y="197" width="0.7361%" height="15" fill="rgb(213,181,19)"/><text x="14.9961%" y="207.50"></text></g><g><title>check_mod_const_bodies (104,861 samples, 0.11%)</title><rect x="15.4822%" y="197" width="0.1133%" height="15" fill="rgb(254,191,54)"/><text x="15.7322%" y="207.50"></text></g><g><title>lookup_deprecation_entry (142,372 samples, 0.15%)</title><rect x="15.8314%" y="181" width="0.1538%" height="15" fill="rgb(241,83,37)"/><text x="16.0814%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (350,364 samples, 0.38%)</title><rect x="15.6835%" y="197" width="0.3786%" height="15" fill="rgb(233,36,39)"/><text x="15.9335%" y="207.50"></text></g><g><title>misc_checking_1 (1,294,394 samples, 1.40%)</title><rect x="14.7193%" y="213" width="1.3987%" height="15" fill="rgb(226,3,54)"/><text x="14.9693%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (227,562 samples, 0.25%)</title><rect x="16.1194%" y="197" width="0.2459%" height="15" fill="rgb(245,192,40)"/><text x="16.3694%" y="207.50"></text></g><g><title>check_mod_liveness (182,062 samples, 0.20%)</title><rect x="16.1686%" y="181" width="0.1967%" height="15" fill="rgb(238,167,29)"/><text x="16.4186%" y="191.50"></text></g><g><title>misc_checking_2 (449,465 samples, 0.49%)</title><rect x="16.1180%" y="213" width="0.4857%" height="15" fill="rgb(232,182,51)"/><text x="16.3680%" y="223.50"></text></g><g><title>match_checking (220,583 samples, 0.24%)</title><rect x="16.3653%" y="197" width="0.2384%" height="15" fill="rgb(231,60,39)"/><text x="16.6153%" y="207.50"></text></g><g><title>check_match (209,573 samples, 0.23%)</title><rect x="16.3772%" y="181" width="0.2265%" height="15" fill="rgb(208,69,12)"/><text x="16.6272%" y="191.50"></text></g><g><title>death_checking (179,222 samples, 0.19%)</title><rect x="16.7127%" y="197" width="0.1937%" height="15" fill="rgb(235,93,37)"/><text x="16.9627%" y="207.50"></text></g><g><title>crate_lints (1,645,609 samples, 1.78%)</title><rect x="16.9079%" y="181" width="1.7782%" height="15" fill="rgb(213,116,39)"/><text x="17.1579%" y="191.50">c..</text></g><g><title>type_of (1,037,003 samples, 1.12%)</title><rect x="17.5656%" y="165" width="1.1206%" height="15" fill="rgb(222,207,29)"/><text x="17.8156%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (803,141 samples, 0.87%)</title><rect x="17.8183%" y="149" width="0.8679%" height="15" fill="rgb(206,96,30)"/><text x="18.0683%" y="159.50"></text></g><g><title>lint_checking (1,816,720 samples, 1.96%)</title><rect x="16.9064%" y="197" width="1.9631%" height="15" fill="rgb(218,138,4)"/><text x="17.1564%" y="207.50">l..</text></g><g><title>module_lints (169,701 samples, 0.18%)</title><rect x="18.6861%" y="181" width="0.1834%" height="15" fill="rgb(250,191,14)"/><text x="18.9361%" y="191.50"></text></g><g><title>lint_mod (167,251 samples, 0.18%)</title><rect x="18.6888%" y="165" width="0.1807%" height="15" fill="rgb(239,60,40)"/><text x="18.9388%" y="175.50"></text></g><g><title>privacy_access_levels (108,261 samples, 0.12%)</title><rect x="18.8695%" y="197" width="0.1170%" height="15" fill="rgb(206,27,48)"/><text x="19.1195%" y="207.50"></text></g><g><title>privacy_checking_modules (329,873 samples, 0.36%)</title><rect x="18.9865%" y="197" width="0.3565%" height="15" fill="rgb(225,35,8)"/><text x="19.2365%" y="207.50"></text></g><g><title>check_mod_privacy (328,293 samples, 0.35%)</title><rect x="18.9882%" y="181" width="0.3548%" height="15" fill="rgb(250,213,24)"/><text x="19.2382%" y="191.50"></text></g><g><title>misc_checking_3 (2,545,458 samples, 2.75%)</title><rect x="16.6037%" y="213" width="2.7506%" height="15" fill="rgb(247,123,22)"/><text x="16.8537%" y="223.50">mi..</text></g><g><title>adt_def (104,381 samples, 0.11%)</title><rect x="27.2882%" y="133" width="0.1128%" height="15" fill="rgb(231,138,38)"/><text x="27.5382%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (103,841 samples, 0.11%)</title><rect x="27.2887%" y="117" width="0.1122%" height="15" fill="rgb(231,145,46)"/><text x="27.5387%" y="127.50"></text></g><g><title>item_attrs (97,771 samples, 0.11%)</title><rect x="27.2953%" y="101" width="0.1057%" height="15" fill="rgb(251,118,11)"/><text x="27.5453%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (97,131 samples, 0.10%)</title><rect x="27.2960%" y="85" width="0.1050%" height="15" fill="rgb(217,147,25)"/><text x="27.5460%" y="95.50"></text></g><g><title>adt_def (127,222 samples, 0.14%)</title><rect x="27.4526%" y="85" width="0.1375%" height="15" fill="rgb(247,81,37)"/><text x="27.7026%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (126,612 samples, 0.14%)</title><rect x="27.4533%" y="69" width="0.1368%" height="15" fill="rgb(209,12,38)"/><text x="27.7033%" y="79.50"></text></g><g><title>item_attrs (118,942 samples, 0.13%)</title><rect x="27.4615%" y="53" width="0.1285%" height="15" fill="rgb(227,1,9)"/><text x="27.7115%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,312 samples, 0.13%)</title><rect x="27.4622%" y="37" width="0.1278%" height="15" fill="rgb(248,47,43)"/><text x="27.7122%" y="47.50"></text></g><g><title>adt_sized_constraint (203,053 samples, 0.22%)</title><rect x="27.4455%" y="101" width="0.2194%" height="15" fill="rgb(221,10,30)"/><text x="27.6955%" y="111.50"></text></g><g><title>adt_sized_constraint (223,233 samples, 0.24%)</title><rect x="27.4306%" y="117" width="0.2412%" height="15" fill="rgb(210,229,1)"/><text x="27.6806%" y="127.50"></text></g><g><title>adt_sized_constraint (254,883 samples, 0.28%)</title><rect x="27.4010%" y="133" width="0.2754%" height="15" fill="rgb(222,148,37)"/><text x="27.6510%" y="143.50"></text></g><g><title>adt_sized_constraint (366,904 samples, 0.40%)</title><rect x="27.2813%" y="149" width="0.3965%" height="15" fill="rgb(234,67,33)"/><text x="27.5313%" y="159.50"></text></g><g><title>impl_parent (3,526,083 samples, 3.81%)</title><rect x="27.6970%" y="149" width="3.8103%" height="15" fill="rgb(247,98,35)"/><text x="27.9470%" y="159.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (1,882,261 samples, 2.03%)</title><rect x="29.4733%" y="133" width="2.0340%" height="15" fill="rgb(247,138,52)"/><text x="29.7233%" y="143.50">m..</text></g><g><title>impl_trait_ref (9,365,957 samples, 10.12%)</title><rect x="31.5073%" y="149" width="10.1208%" height="15" fill="rgb(213,79,30)"/><text x="31.7573%" y="159.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,726,628 samples, 8.35%)</title><rect x="33.2787%" y="133" width="8.3493%" height="15" fill="rgb(246,177,23)"/><text x="33.5287%" y="143.50">metadata_dec..</text></g><g><title>trait_impls_of (1,395,325 samples, 1.51%)</title><rect x="41.7676%" y="149" width="1.5078%" height="15" fill="rgb(230,62,27)"/><text x="42.0176%" y="159.50"></text></g><g><title>implementations_of_trait (340,575 samples, 0.37%)</title><rect x="42.9074%" y="133" width="0.3680%" height="15" fill="rgb(216,154,8)"/><text x="43.1574%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (278,164 samples, 0.30%)</title><rect x="42.9748%" y="117" width="0.3006%" height="15" fill="rgb(244,35,45)"/><text x="43.2248%" y="127.50"></text></g><g><title>coherent_trait (22,073,917 samples, 23.85%)</title><rect x="19.4254%" y="181" width="23.8529%" height="15" fill="rgb(251,115,12)"/><text x="19.6754%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (22,045,555 samples, 23.82%)</title><rect x="19.4561%" y="165" width="23.8223%" height="15" fill="rgb(240,54,50)"/><text x="19.7061%" y="175.50">specialization_graph_of</text></g><g><title>coherence_checking (22,172,558 samples, 23.96%)</title><rect x="19.3987%" y="197" width="23.9595%" height="15" fill="rgb(233,84,52)"/><text x="19.6487%" y="207.50">coherence_checking</text></g><g><title>associated_item (360,516 samples, 0.39%)</title><rect x="56.3676%" y="133" width="0.3896%" height="15" fill="rgb(207,117,47)"/><text x="56.6176%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (289,616 samples, 0.31%)</title><rect x="56.4442%" y="117" width="0.3130%" height="15" fill="rgb(249,43,39)"/><text x="56.6942%" y="127.50"></text></g><g><title>associated_items (508,336 samples, 0.55%)</title><rect x="56.2364%" y="149" width="0.5493%" height="15" fill="rgb(209,38,44)"/><text x="56.4864%" y="159.50"></text></g><g><title>adt_dtorck_constraint (166,411 samples, 0.18%)</title><rect x="57.0633%" y="117" width="0.1798%" height="15" fill="rgb(236,212,23)"/><text x="57.3133%" y="127.50"></text></g><g><title>dropck_outlives (377,983 samples, 0.41%)</title><rect x="56.8592%" y="149" width="0.4084%" height="15" fill="rgb(242,79,21)"/><text x="57.1092%" y="159.50"></text></g><g><title>adt_dtorck_constraint (273,951 samples, 0.30%)</title><rect x="56.9716%" y="133" width="0.2960%" height="15" fill="rgb(211,96,35)"/><text x="57.2216%" y="143.50"></text></g><g><title>generics_of (350,194 samples, 0.38%)</title><rect x="59.2233%" y="133" width="0.3784%" height="15" fill="rgb(253,215,40)"/><text x="59.4733%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (284,643 samples, 0.31%)</title><rect x="59.2942%" y="117" width="0.3076%" height="15" fill="rgb(211,81,21)"/><text x="59.5442%" y="127.50"></text></g><g><title>impl_trait_ref (376,615 samples, 0.41%)</title><rect x="59.7069%" y="133" width="0.4070%" height="15" fill="rgb(208,190,38)"/><text x="59.9569%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (314,175 samples, 0.34%)</title><rect x="59.7744%" y="117" width="0.3395%" height="15" fill="rgb(235,213,38)"/><text x="60.0244%" y="127.50"></text></g><g><title>predicates_of (357,393 samples, 0.39%)</title><rect x="60.1589%" y="133" width="0.3862%" height="15" fill="rgb(237,122,38)"/><text x="60.4089%" y="143.50"></text></g><g><title>predicates_defined_on (211,432 samples, 0.23%)</title><rect x="60.3166%" y="117" width="0.2285%" height="15" fill="rgb(244,218,35)"/><text x="60.5666%" y="127.50"></text></g><g><title>specializes (888,039 samples, 0.96%)</title><rect x="60.5451%" y="133" width="0.9596%" height="15" fill="rgb(240,68,47)"/><text x="60.7951%" y="143.50"></text></g><g><title>param_env (592,765 samples, 0.64%)</title><rect x="60.8641%" y="117" width="0.6405%" height="15" fill="rgb(210,16,53)"/><text x="61.1141%" y="127.50"></text></g><g><title>def_span (343,414 samples, 0.37%)</title><rect x="61.1336%" y="101" width="0.3711%" height="15" fill="rgb(235,124,12)"/><text x="61.3836%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (321,703 samples, 0.35%)</title><rect x="61.1570%" y="85" width="0.3476%" height="15" fill="rgb(224,169,11)"/><text x="61.4070%" y="95.50"></text></g><g><title>trait_impls_of (862,656 samples, 0.93%)</title><rect x="61.5276%" y="133" width="0.9322%" height="15" fill="rgb(250,166,2)"/><text x="61.7776%" y="143.50"></text></g><g><title>implementations_of_trait (339,742 samples, 0.37%)</title><rect x="62.0926%" y="117" width="0.3671%" height="15" fill="rgb(242,216,29)"/><text x="62.3426%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (244,140 samples, 0.26%)</title><rect x="62.1959%" y="101" width="0.2638%" height="15" fill="rgb(230,116,27)"/><text x="62.4459%" y="111.50"></text></g><g><title>evaluate_obligation (4,819,205 samples, 5.21%)</title><rect x="57.2676%" y="149" width="5.2076%" height="15" fill="rgb(228,99,48)"/><text x="57.5176%" y="159.50">evalua..</text></g><g><title>fn_sig (117,290 samples, 0.13%)</title><rect x="62.5055%" y="149" width="0.1267%" height="15" fill="rgb(253,11,6)"/><text x="62.7555%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (103,820 samples, 0.11%)</title><rect x="62.5201%" y="133" width="0.1122%" height="15" fill="rgb(247,143,39)"/><text x="62.7701%" y="143.50"></text></g><g><title>generics_of (106,360 samples, 0.11%)</title><rect x="62.6323%" y="149" width="0.1149%" height="15" fill="rgb(236,97,10)"/><text x="62.8823%" y="159.50"></text></g><g><title>impl_item_implementor_ids (154,090 samples, 0.17%)</title><rect x="62.7472%" y="149" width="0.1665%" height="15" fill="rgb(233,208,19)"/><text x="62.9972%" y="159.50"></text></g><g><title>associated_items (131,960 samples, 0.14%)</title><rect x="62.7711%" y="133" width="0.1426%" height="15" fill="rgb(216,164,2)"/><text x="63.0211%" y="143.50"></text></g><g><title>evaluate_obligation (142,861 samples, 0.15%)</title><rect x="63.3143%" y="133" width="0.1544%" height="15" fill="rgb(220,129,5)"/><text x="63.5643%" y="143.50"></text></g><g><title>method_autoderef_steps (368,054 samples, 0.40%)</title><rect x="63.0983%" y="149" width="0.3977%" height="15" fill="rgb(242,17,10)"/><text x="63.3483%" y="159.50"></text></g><g><title>explicit_predicates_of (101,620 samples, 0.11%)</title><rect x="63.9976%" y="117" width="0.1098%" height="15" fill="rgb(242,107,0)"/><text x="64.2476%" y="127.50"></text></g><g><title>predicates_of (564,486 samples, 0.61%)</title><rect x="63.5418%" y="149" width="0.6100%" height="15" fill="rgb(251,28,31)"/><text x="63.7918%" y="159.50"></text></g><g><title>predicates_defined_on (438,373 samples, 0.47%)</title><rect x="63.6781%" y="133" width="0.4737%" height="15" fill="rgb(233,223,10)"/><text x="63.9281%" y="143.50"></text></g><g><title>item_bodies_checking (19,360,857 samples, 20.92%)</title><rect x="43.4001%" y="197" width="20.9212%" height="15" fill="rgb(215,21,27)"/><text x="43.6501%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,357,707 samples, 20.92%)</title><rect x="43.4035%" y="181" width="20.9178%" height="15" fill="rgb(232,23,21)"/><text x="43.6535%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (19,322,837 samples, 20.88%)</title><rect x="43.4412%" y="165" width="20.8801%" height="15" fill="rgb(244,5,23)"/><text x="43.6912%" y="175.50">typeck</text></g><g><title>impl_trait_ref (142,011 samples, 0.15%)</title><rect x="64.7325%" y="117" width="0.1535%" height="15" fill="rgb(226,81,46)"/><text x="64.9825%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (121,831 samples, 0.13%)</title><rect x="64.7543%" y="101" width="0.1316%" height="15" fill="rgb(247,70,30)"/><text x="65.0043%" y="111.50"></text></g><g><title>adt_destructor (316,453 samples, 0.34%)</title><rect x="64.5724%" y="165" width="0.3420%" height="15" fill="rgb(212,68,19)"/><text x="64.8224%" y="175.50"></text></g><g><title>coherent_trait (307,903 samples, 0.33%)</title><rect x="64.5816%" y="149" width="0.3327%" height="15" fill="rgb(240,187,13)"/><text x="64.8316%" y="159.50"></text></g><g><title>specialization_graph_of (306,033 samples, 0.33%)</title><rect x="64.5836%" y="133" width="0.3307%" height="15" fill="rgb(223,113,26)"/><text x="64.8336%" y="143.50"></text></g><g><title>item_types_checking (616,177 samples, 0.67%)</title><rect x="64.3213%" y="197" width="0.6658%" height="15" fill="rgb(206,192,2)"/><text x="64.5713%" y="207.50"></text></g><g><title>check_mod_item_types (614,087 samples, 0.66%)</title><rect x="64.3236%" y="181" width="0.6636%" height="15" fill="rgb(241,108,4)"/><text x="64.5736%" y="191.50"></text></g><g><title>fn_sig (161,092 samples, 0.17%)</title><rect x="65.2451%" y="165" width="0.1741%" height="15" fill="rgb(247,173,49)"/><text x="65.4951%" y="175.50"></text></g><g><title>generics_of (162,121 samples, 0.18%)</title><rect x="65.4192%" y="165" width="0.1752%" height="15" fill="rgb(224,114,35)"/><text x="65.6692%" y="175.50"></text></g><g><title>impl_trait_ref (115,381 samples, 0.12%)</title><rect x="65.5944%" y="165" width="0.1247%" height="15" fill="rgb(245,159,27)"/><text x="65.8444%" y="175.50"></text></g><g><title>lint_levels (139,701 samples, 0.15%)</title><rect x="66.5295%" y="85" width="0.1510%" height="15" fill="rgb(245,172,44)"/><text x="66.7795%" y="95.50"></text></g><g><title>late_bound_vars_map (545,808 samples, 0.59%)</title><rect x="66.0921%" y="117" width="0.5898%" height="15" fill="rgb(236,23,11)"/><text x="66.3421%" y="127.50"></text></g><g><title>resolve_lifetimes (518,347 samples, 0.56%)</title><rect x="66.1218%" y="101" width="0.5601%" height="15" fill="rgb(205,117,38)"/><text x="66.3718%" y="111.50"></text></g><g><title>explicit_predicates_of (806,880 samples, 0.87%)</title><rect x="65.8268%" y="133" width="0.8719%" height="15" fill="rgb(237,72,25)"/><text x="66.0768%" y="143.50"></text></g><g><title>predicates_of (983,491 samples, 1.06%)</title><rect x="65.7191%" y="165" width="1.0628%" height="15" fill="rgb(244,70,9)"/><text x="65.9691%" y="175.50"></text></g><g><title>predicates_defined_on (948,781 samples, 1.03%)</title><rect x="65.7566%" y="149" width="1.0252%" height="15" fill="rgb(217,125,39)"/><text x="66.0066%" y="159.50"></text></g><g><title>type_collecting (1,890,382 samples, 2.04%)</title><rect x="64.9887%" y="197" width="2.0427%" height="15" fill="rgb(235,36,10)"/><text x="65.2387%" y="207.50">t..</text></g><g><title>collect_mod_item_types (1,875,202 samples, 2.03%)</title><rect x="65.0051%" y="181" width="2.0263%" height="15" fill="rgb(251,123,47)"/><text x="65.2551%" y="191.50">c..</text></g><g><title>type_of (230,993 samples, 0.25%)</title><rect x="66.7818%" y="165" width="0.2496%" height="15" fill="rgb(221,13,13)"/><text x="67.0318%" y="175.50"></text></g><g><title>evaluate_obligation (200,661 samples, 0.22%)</title><rect x="68.1267%" y="165" width="0.2168%" height="15" fill="rgb(238,131,9)"/><text x="68.3767%" y="175.50"></text></g><g><title>param_env (151,202 samples, 0.16%)</title><rect x="68.4302%" y="165" width="0.1634%" height="15" fill="rgb(211,50,8)"/><text x="68.6802%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,580,830 samples, 1.71%)</title><rect x="67.1188%" y="181" width="1.7082%" height="15" fill="rgb(245,182,24)"/><text x="67.3688%" y="191.50"></text></g><g><title>region_scope_tree (179,312 samples, 0.19%)</title><rect x="68.6333%" y="165" width="0.1938%" height="15" fill="rgb(242,14,37)"/><text x="68.8833%" y="175.50"></text></g><g><title>param_env (120,280 samples, 0.13%)</title><rect x="69.7843%" y="165" width="0.1300%" height="15" fill="rgb(246,228,12)"/><text x="70.0343%" y="175.50"></text></g><g><title>analysis (64,216,869 samples, 69.39%)</title><rect x="0.6648%" y="229" width="69.3923%" height="15" fill="rgb(213,55,15)"/><text x="0.9148%" y="239.50">analysis</text></g><g><title>type_check_crate (46,921,316 samples, 50.70%)</title><rect x="19.3543%" y="213" width="50.7029%" height="15" fill="rgb(209,9,3)"/><text x="19.6043%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,798,352 samples, 3.02%)</title><rect x="67.0333%" y="197" width="3.0239%" height="15" fill="rgb(230,59,30)"/><text x="67.2833%" y="207.50">wf_..</text></g><g><title>check_item_well_formed (1,138,361 samples, 1.23%)</title><rect x="68.8270%" y="181" width="1.2301%" height="15" fill="rgb(209,121,21)"/><text x="69.0770%" y="191.50"></text></g><g><title>missing_lang_items (207,142 samples, 0.22%)</title><rect x="70.4345%" y="213" width="0.2238%" height="15" fill="rgb(220,109,13)"/><text x="70.6845%" y="223.50"></text></g><g><title>codegen_crate (584,337 samples, 0.63%)</title><rect x="70.0679%" y="229" width="0.6314%" height="15" fill="rgb(232,18,1)"/><text x="70.3179%" y="239.50"></text></g><g><title>AST_validation (104,891 samples, 0.11%)</title><rect x="70.8907%" y="213" width="0.1133%" height="15" fill="rgb(215,41,42)"/><text x="71.1407%" y="223.50"></text></g><g><title>metadata_load_macro (263,394 samples, 0.28%)</title><rect x="83.5133%" y="181" width="0.2846%" height="15" fill="rgb(224,123,36)"/><text x="83.7633%" y="191.50"></text></g><g><title>macro_expand_crate (14,048,557 samples, 15.18%)</title><rect x="71.1581%" y="213" width="15.1808%" height="15" fill="rgb(240,125,3)"/><text x="71.4081%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (14,034,737 samples, 15.17%)</title><rect x="71.1730%" y="197" width="15.1658%" height="15" fill="rgb(205,98,50)"/><text x="71.4230%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,351,456 samples, 2.54%)</title><rect x="83.7979%" y="181" width="2.5410%" height="15" fill="rgb(205,185,37)"/><text x="84.0479%" y="191.50">me..</text></g><g><title>metadata_register_crate (833,110 samples, 0.90%)</title><rect x="85.4386%" y="165" width="0.9003%" height="15" fill="rgb(238,207,15)"/><text x="85.6886%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (165,031 samples, 0.18%)</title><rect x="86.3437%" y="213" width="0.1783%" height="15" fill="rgb(213,199,42)"/><text x="86.5937%" y="223.50"></text></g><g><title>late_resolve_crate (1,331,745 samples, 1.44%)</title><rect x="86.6796%" y="197" width="1.4391%" height="15" fill="rgb(235,201,11)"/><text x="86.9296%" y="207.50"></text></g><g><title>configure_and_expand (16,208,012 samples, 17.51%)</title><rect x="70.6993%" y="229" width="17.5143%" height="15" fill="rgb(207,46,11)"/><text x="70.9493%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,565,418 samples, 1.69%)</title><rect x="86.5220%" y="213" width="1.6916%" height="15" fill="rgb(241,35,35)"/><text x="86.7720%" y="223.50"></text></g><g><title>drop_ast (148,562 samples, 0.16%)</title><rect x="88.2136%" y="229" width="0.1605%" height="15" fill="rgb(243,32,47)"/><text x="88.4636%" y="239.50"></text></g><g><title>early_lint_checks (303,553 samples, 0.33%)</title><rect x="88.3953%" y="229" width="0.3280%" height="15" fill="rgb(247,202,23)"/><text x="88.6453%" y="239.50"></text></g><g><title>free_global_ctxt (3,214,076 samples, 3.47%)</title><rect x="88.7233%" y="229" width="3.4731%" height="15" fill="rgb(219,102,11)"/><text x="88.9733%" y="239.50">fre..</text></g><g><title>generate_crate_metadata (596,917 samples, 0.65%)</title><rect x="92.1964%" y="229" width="0.6450%" height="15" fill="rgb(243,110,44)"/><text x="92.4464%" y="239.50"></text></g><g><title>hir_lowering (2,476,068 samples, 2.68%)</title><rect x="92.8414%" y="229" width="2.6756%" height="15" fill="rgb(222,74,54)"/><text x="93.0914%" y="239.50">hi..</text></g><g><title>parse_crate (2,664,480 samples, 2.88%)</title><rect x="95.5689%" y="229" width="2.8792%" height="15" fill="rgb(216,99,12)"/><text x="95.8189%" y="239.50">pa..</text></g><g><title>prepare_outputs (272,243 samples, 0.29%)</title><rect x="98.4566%" y="229" width="0.2942%" height="15" fill="rgb(226,22,26)"/><text x="98.7066%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (706,078 samples, 0.76%)</title><rect x="98.7508%" y="229" width="0.7630%" height="15" fill="rgb(217,163,10)"/><text x="99.0008%" y="239.50"></text></g><g><title>setup_global_ctxt (133,871 samples, 0.14%)</title><rect x="99.5255%" y="229" width="0.1447%" height="15" fill="rgb(213,25,53)"/><text x="99.7755%" y="239.50"></text></g><g><title>all (92,541,757 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (92,541,757 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (305,203 samples, 0.33%)</title><rect x="99.6702%" y="229" width="0.3298%" height="15" fill="rgb(229,68,48)"/><text x="99.9202%" y="239.50"></text></g></svg></svg>