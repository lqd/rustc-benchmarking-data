<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (3,681,030 samples, 0.18%)</title><rect x="16.3728%" y="101" width="0.1845%" height="15" fill="rgb(227,0,7)"/><text x="16.6228%" y="111.50"></text></g><g><title>adt_drop_tys (4,522,380 samples, 0.23%)</title><rect x="16.3525%" y="117" width="0.2267%" height="15" fill="rgb(217,0,24)"/><text x="16.6025%" y="127.50"></text></g><g><title>is_copy_raw (3,623,228 samples, 0.18%)</title><rect x="16.5794%" y="117" width="0.1816%" height="15" fill="rgb(221,193,54)"/><text x="16.8294%" y="127.50"></text></g><g><title>evaluate_obligation (2,866,702 samples, 0.14%)</title><rect x="16.6173%" y="101" width="0.1437%" height="15" fill="rgb(248,212,6)"/><text x="16.8673%" y="111.50"></text></g><g><title>needs_drop_raw (8,943,223 samples, 0.45%)</title><rect x="16.3127%" y="133" width="0.4483%" height="15" fill="rgb(208,68,35)"/><text x="16.5627%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (5,442,239 samples, 0.27%)</title><rect x="16.8252%" y="117" width="0.2728%" height="15" fill="rgb(232,128,0)"/><text x="17.0752%" y="127.50"></text></g><g><title>specialization_graph_of (2,428,406 samples, 0.12%)</title><rect x="17.1160%" y="117" width="0.1217%" height="15" fill="rgb(207,160,47)"/><text x="17.3660%" y="127.50"></text></g><g><title>resolve_instance (9,764,820 samples, 0.49%)</title><rect x="16.7610%" y="133" width="0.4895%" height="15" fill="rgb(228,23,34)"/><text x="17.0110%" y="143.50"></text></g><g><title>thir_body (22,829,003 samples, 1.14%)</title><rect x="17.2584%" y="133" width="1.1444%" height="15" fill="rgb(218,30,26)"/><text x="17.5084%" y="143.50"></text></g><g><title>mir_const (114,625,442 samples, 5.75%)</title><rect x="12.6635%" y="181" width="5.7460%" height="15" fill="rgb(220,122,19)"/><text x="12.9135%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (105,207,036 samples, 5.27%)</title><rect x="13.1357%" y="165" width="5.2739%" height="15" fill="rgb(250,228,42)"/><text x="13.3857%" y="175.50">unsafe..</text></g><g><title>mir_built (98,210,020 samples, 4.92%)</title><rect x="13.4864%" y="149" width="4.9231%" height="15" fill="rgb(240,193,28)"/><text x="13.7364%" y="159.50">mir_bu..</text></g><g><title>mir_promoted (124,223,990 samples, 6.23%)</title><rect x="12.2108%" y="197" width="6.2271%" height="15" fill="rgb(216,20,37)"/><text x="12.4608%" y="207.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (6,449,257 samples, 0.32%)</title><rect x="18.4382%" y="197" width="0.3233%" height="15" fill="rgb(206,188,39)"/><text x="18.6882%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (2,981,129 samples, 0.15%)</title><rect x="18.7615%" y="197" width="0.1494%" height="15" fill="rgb(217,207,13)"/><text x="19.0115%" y="207.50"></text></g><g><title>type_op_normalize_predicate (3,598,212 samples, 0.18%)</title><rect x="18.9109%" y="197" width="0.1804%" height="15" fill="rgb(231,73,38)"/><text x="19.1609%" y="207.50"></text></g><g><title>type_op_prove_predicate (13,156,423 samples, 0.66%)</title><rect x="19.1024%" y="197" width="0.6595%" height="15" fill="rgb(225,20,46)"/><text x="19.3524%" y="207.50"></text></g><g><title>MIR_borrow_checking (388,091,094 samples, 19.45%)</title><rect x="0.3085%" y="229" width="19.4544%" height="15" fill="rgb(210,31,41)"/><text x="0.5585%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (387,555,044 samples, 19.43%)</title><rect x="0.3354%" y="213" width="19.4275%" height="15" fill="rgb(221,200,47)"/><text x="0.5854%" y="223.50">mir_borrowck</text></g><g><title>check_mod_attrs (3,884,325 samples, 0.19%)</title><rect x="19.8530%" y="213" width="0.1947%" height="15" fill="rgb(226,26,5)"/><text x="20.1030%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (2,284,925 samples, 0.11%)</title><rect x="20.1461%" y="213" width="0.1145%" height="15" fill="rgb(249,33,26)"/><text x="20.3961%" y="223.50"></text></g><g><title>misc_checking_1 (8,318,994 samples, 0.42%)</title><rect x="19.8509%" y="229" width="0.4170%" height="15" fill="rgb(235,183,28)"/><text x="20.1009%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (8,691,937 samples, 0.44%)</title><rect x="20.2681%" y="213" width="0.4357%" height="15" fill="rgb(221,5,38)"/><text x="20.5181%" y="223.50"></text></g><g><title>check_mod_liveness (7,149,180 samples, 0.36%)</title><rect x="20.3455%" y="197" width="0.3584%" height="15" fill="rgb(247,18,42)"/><text x="20.5955%" y="207.50"></text></g><g><title>misc_checking_2 (16,357,793 samples, 0.82%)</title><rect x="20.2680%" y="229" width="0.8200%" height="15" fill="rgb(241,131,45)"/><text x="20.5180%" y="239.50"></text></g><g><title>match_checking (7,662,296 samples, 0.38%)</title><rect x="20.7039%" y="213" width="0.3841%" height="15" fill="rgb(249,31,29)"/><text x="20.9539%" y="223.50"></text></g><g><title>check_match (7,499,133 samples, 0.38%)</title><rect x="20.7120%" y="197" width="0.3759%" height="15" fill="rgb(225,111,53)"/><text x="20.9620%" y="207.50"></text></g><g><title>death_checking (3,123,535 samples, 0.16%)</title><rect x="21.1733%" y="213" width="0.1566%" height="15" fill="rgb(238,160,17)"/><text x="21.4233%" y="223.50"></text></g><g><title>crate_lints (9,408,105 samples, 0.47%)</title><rect x="21.3301%" y="197" width="0.4716%" height="15" fill="rgb(214,148,48)"/><text x="21.5801%" y="207.50"></text></g><g><title>layout_of (2,295,565 samples, 0.12%)</title><rect x="22.3473%" y="117" width="0.1151%" height="15" fill="rgb(232,36,49)"/><text x="22.5973%" y="127.50"></text></g><g><title>lint_checking (22,604,923 samples, 1.13%)</title><rect x="21.3299%" y="213" width="1.1331%" height="15" fill="rgb(209,103,24)"/><text x="21.5799%" y="223.50"></text></g><g><title>module_lints (13,193,078 samples, 0.66%)</title><rect x="21.8017%" y="197" width="0.6613%" height="15" fill="rgb(229,88,8)"/><text x="22.0517%" y="207.50"></text></g><g><title>lint_mod (13,179,168 samples, 0.66%)</title><rect x="21.8024%" y="181" width="0.6607%" height="15" fill="rgb(213,181,19)"/><text x="22.0524%" y="191.50"></text></g><g><title>layout_of (2,444,517 samples, 0.12%)</title><rect x="22.3405%" y="165" width="0.1225%" height="15" fill="rgb(254,191,54)"/><text x="22.5905%" y="175.50"></text></g><g><title>layout_of (2,426,007 samples, 0.12%)</title><rect x="22.3415%" y="149" width="0.1216%" height="15" fill="rgb(241,83,37)"/><text x="22.5915%" y="159.50"></text></g><g><title>layout_of (2,391,946 samples, 0.12%)</title><rect x="22.3432%" y="133" width="0.1199%" height="15" fill="rgb(233,36,39)"/><text x="22.5932%" y="143.50"></text></g><g><title>privacy_access_levels (3,000,033 samples, 0.15%)</title><rect x="22.4631%" y="213" width="0.1504%" height="15" fill="rgb(226,3,54)"/><text x="22.7131%" y="223.50"></text></g><g><title>privacy_checking_modules (15,775,507 samples, 0.79%)</title><rect x="22.6135%" y="213" width="0.7908%" height="15" fill="rgb(245,192,40)"/><text x="22.8635%" y="223.50"></text></g><g><title>check_mod_privacy (15,764,027 samples, 0.79%)</title><rect x="22.6140%" y="197" width="0.7902%" height="15" fill="rgb(238,167,29)"/><text x="22.8640%" y="207.50"></text></g><g><title>misc_checking_3 (46,253,978 samples, 2.32%)</title><rect x="21.0880%" y="229" width="2.3186%" height="15" fill="rgb(232,182,51)"/><text x="21.3380%" y="239.50">m..</text></g><g><title>impl_parent (2,634,166 samples, 0.13%)</title><rect x="23.6624%" y="165" width="0.1320%" height="15" fill="rgb(231,60,39)"/><text x="23.9124%" y="175.50"></text></g><g><title>impl_trait_ref (5,605,271 samples, 0.28%)</title><rect x="23.7945%" y="165" width="0.2810%" height="15" fill="rgb(208,69,12)"/><text x="24.0445%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,567,089 samples, 0.23%)</title><rect x="23.8465%" y="149" width="0.2289%" height="15" fill="rgb(235,93,37)"/><text x="24.0965%" y="159.50"></text></g><g><title>coherent_trait (13,873,496 samples, 0.70%)</title><rect x="23.4226%" y="197" width="0.6955%" height="15" fill="rgb(213,116,39)"/><text x="23.6726%" y="207.50"></text></g><g><title>specialization_graph_of (13,146,508 samples, 0.66%)</title><rect x="23.4590%" y="181" width="0.6590%" height="15" fill="rgb(222,207,29)"/><text x="23.7090%" y="191.50"></text></g><g><title>coherence_checking (14,042,008 samples, 0.70%)</title><rect x="23.4215%" y="213" width="0.7039%" height="15" fill="rgb(206,96,30)"/><text x="23.6715%" y="223.50"></text></g><g><title>dropck_outlives (7,217,437 samples, 0.36%)</title><rect x="36.5998%" y="165" width="0.3618%" height="15" fill="rgb(218,138,4)"/><text x="36.8498%" y="175.50"></text></g><g><title>evaluate_obligation (5,711,529 samples, 0.29%)</title><rect x="36.9616%" y="165" width="0.2863%" height="15" fill="rgb(250,191,14)"/><text x="37.2116%" y="175.50"></text></g><g><title>dropck_outlives (5,481,553 samples, 0.27%)</title><rect x="46.8843%" y="149" width="0.2748%" height="15" fill="rgb(239,60,40)"/><text x="47.1343%" y="159.50"></text></g><g><title>evaluate_obligation (9,638,655 samples, 0.48%)</title><rect x="47.1591%" y="149" width="0.4832%" height="15" fill="rgb(206,27,48)"/><text x="47.4091%" y="159.50"></text></g><g><title>method_autoderef_steps (2,587,534 samples, 0.13%)</title><rect x="47.7126%" y="149" width="0.1297%" height="15" fill="rgb(225,35,8)"/><text x="47.9626%" y="159.50"></text></g><g><title>typeck (207,972,358 samples, 10.43%)</title><rect x="37.4562%" y="165" width="10.4253%" height="15" fill="rgb(250,213,24)"/><text x="37.7062%" y="175.50">typeck</text></g><g><title>item_bodies_checking (473,960,146 samples, 23.76%)</title><rect x="24.1289%" y="213" width="23.7588%" height="15" fill="rgb(247,123,22)"/><text x="24.3789%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (473,956,356 samples, 23.76%)</title><rect x="24.1291%" y="197" width="23.7587%" height="15" fill="rgb(231,138,38)"/><text x="24.3791%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (473,450,720 samples, 23.73%)</title><rect x="24.1544%" y="181" width="23.7333%" height="15" fill="rgb(231,145,46)"/><text x="24.4044%" y="191.50">typeck</text></g><g><title>mir_borrowck (2,546,371 samples, 0.13%)</title><rect x="49.3505%" y="149" width="0.1276%" height="15" fill="rgb(251,118,11)"/><text x="49.6005%" y="159.50"></text></g><g><title>resolve_instance (3,279,516 samples, 0.16%)</title><rect x="49.9998%" y="85" width="0.1644%" height="15" fill="rgb(217,147,25)"/><text x="50.2498%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,159,154 samples, 0.11%)</title><rect x="52.8093%" y="37" width="0.1082%" height="15" fill="rgb(247,81,37)"/><text x="53.0593%" y="47.50"></text></g><g><title>dropck_outlives (4,138,650 samples, 0.21%)</title><rect x="52.7147%" y="69" width="0.2075%" height="15" fill="rgb(209,12,38)"/><text x="52.9647%" y="79.50"></text></g><g><title>adt_dtorck_constraint (2,750,553 samples, 0.14%)</title><rect x="52.7842%" y="53" width="0.1379%" height="15" fill="rgb(227,1,9)"/><text x="53.0342%" y="63.50"></text></g><g><title>evaluate_obligation (4,479,336 samples, 0.22%)</title><rect x="52.9221%" y="69" width="0.2245%" height="15" fill="rgb(248,47,43)"/><text x="53.1721%" y="79.50"></text></g><g><title>mir_built (73,380,955 samples, 3.68%)</title><rect x="49.6413%" y="101" width="3.6785%" height="15" fill="rgb(221,10,30)"/><text x="49.8913%" y="111.50">mir_..</text></g><g><title>typeck (61,007,866 samples, 3.06%)</title><rect x="50.2615%" y="85" width="3.0582%" height="15" fill="rgb(210,229,1)"/><text x="50.5115%" y="95.50">typ..</text></g><g><title>mir_const (76,273,975 samples, 3.82%)</title><rect x="49.5309%" y="133" width="3.8235%" height="15" fill="rgb(222,148,37)"/><text x="49.7809%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (75,023,703 samples, 3.76%)</title><rect x="49.5936%" y="117" width="3.7608%" height="15" fill="rgb(234,67,33)"/><text x="49.8436%" y="127.50">unsa..</text></g><g><title>mir_promoted (77,353,767 samples, 3.88%)</title><rect x="49.4782%" y="149" width="3.8776%" height="15" fill="rgb(247,98,35)"/><text x="49.7282%" y="159.50">mir_..</text></g><g><title>type_op_prove_predicate (3,671,991 samples, 0.18%)</title><rect x="53.5214%" y="149" width="0.1841%" height="15" fill="rgb(247,138,52)"/><text x="53.7714%" y="159.50"></text></g><g><title>type_of (112,546,243 samples, 5.64%)</title><rect x="48.0644%" y="181" width="5.6418%" height="15" fill="rgb(213,79,30)"/><text x="48.3144%" y="191.50">type_of</text></g><g><title>mir_borrowck (112,257,360 samples, 5.63%)</title><rect x="48.0788%" y="165" width="5.6273%" height="15" fill="rgb(246,177,23)"/><text x="48.3288%" y="175.50">mir_bor..</text></g><g><title>item_types_checking (116,436,427 samples, 5.84%)</title><rect x="47.8877%" y="213" width="5.8368%" height="15" fill="rgb(230,62,27)"/><text x="48.1377%" y="223.50">item_ty..</text></g><g><title>check_mod_item_types (116,417,487 samples, 5.84%)</title><rect x="47.8887%" y="197" width="5.8358%" height="15" fill="rgb(216,154,8)"/><text x="48.1387%" y="207.50">check_m..</text></g><g><title>named_region_map (4,139,872 samples, 0.21%)</title><rect x="53.9195%" y="165" width="0.2075%" height="15" fill="rgb(244,35,45)"/><text x="54.1695%" y="175.50"></text></g><g><title>resolve_lifetimes (4,070,519 samples, 0.20%)</title><rect x="53.9230%" y="149" width="0.2040%" height="15" fill="rgb(251,115,12)"/><text x="54.1730%" y="159.50"></text></g><g><title>lint_levels (2,923,132 samples, 0.15%)</title><rect x="53.9805%" y="133" width="0.1465%" height="15" fill="rgb(240,54,50)"/><text x="54.2305%" y="143.50"></text></g><g><title>generics_of (5,951,320 samples, 0.30%)</title><rect x="53.8304%" y="181" width="0.2983%" height="15" fill="rgb(233,84,52)"/><text x="54.0804%" y="191.50"></text></g><g><title>type_collecting (9,716,989 samples, 0.49%)</title><rect x="53.7252%" y="213" width="0.4871%" height="15" fill="rgb(207,117,47)"/><text x="53.9752%" y="223.50"></text></g><g><title>collect_mod_item_types (9,698,758 samples, 0.49%)</title><rect x="53.7261%" y="197" width="0.4862%" height="15" fill="rgb(249,43,39)"/><text x="53.9761%" y="207.50"></text></g><g><title>check_impl_item_well_formed (11,092,095 samples, 0.56%)</title><rect x="54.2591%" y="197" width="0.5560%" height="15" fill="rgb(209,38,44)"/><text x="54.5091%" y="207.50"></text></g><g><title>region_scope_tree (5,776,773 samples, 0.29%)</title><rect x="54.5255%" y="181" width="0.2896%" height="15" fill="rgb(236,212,23)"/><text x="54.7755%" y="191.50"></text></g><g><title>analysis (1,098,653,214 samples, 55.07%)</title><rect x="0.0808%" y="245" width="55.0737%" height="15" fill="rgb(242,79,21)"/><text x="0.3308%" y="255.50">analysis</text></g><g><title>type_check_crate (633,331,235 samples, 31.75%)</title><rect x="23.4066%" y="229" width="31.7479%" height="15" fill="rgb(211,96,35)"/><text x="23.6566%" y="239.50">type_check_crate</text></g><g><title>wf_checking (18,775,110 samples, 0.94%)</title><rect x="54.2133%" y="213" width="0.9412%" height="15" fill="rgb(253,215,40)"/><text x="54.4633%" y="223.50"></text></g><g><title>check_item_well_formed (6,768,814 samples, 0.34%)</title><rect x="54.8151%" y="197" width="0.3393%" height="15" fill="rgb(211,81,21)"/><text x="55.0651%" y="207.50"></text></g><g><title>AST_validation (3,073,384 samples, 0.15%)</title><rect x="55.1877%" y="229" width="0.1541%" height="15" fill="rgb(208,190,38)"/><text x="55.4377%" y="239.50"></text></g><g><title>complete_gated_feature_checking (2,762,671 samples, 0.14%)</title><rect x="55.3418%" y="229" width="0.1385%" height="15" fill="rgb(235,213,38)"/><text x="55.5918%" y="239.50"></text></g><g><title>macro_expand_crate (750,783,963 samples, 37.64%)</title><rect x="55.4829%" y="229" width="37.6356%" height="15" fill="rgb(237,122,38)"/><text x="55.7329%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (750,757,663 samples, 37.63%)</title><rect x="55.4842%" y="213" width="37.6342%" height="15" fill="rgb(244,218,35)"/><text x="55.7342%" y="223.50">expand_crate</text></g><g><title>maybe_create_a_macro_crate (3,059,034 samples, 0.15%)</title><rect x="93.1185%" y="229" width="0.1533%" height="15" fill="rgb(240,68,47)"/><text x="93.3685%" y="239.50"></text></g><g><title>finalize_macro_resolutions (13,748,764 samples, 0.69%)</title><rect x="93.3109%" y="213" width="0.6892%" height="15" fill="rgb(210,16,53)"/><text x="93.5609%" y="223.50"></text></g><g><title>late_resolve_crate (27,010,602 samples, 1.35%)</title><rect x="94.0001%" y="213" width="1.3540%" height="15" fill="rgb(235,124,12)"/><text x="94.2501%" y="223.50"></text></g><g><title>resolve_check_unused (2,539,758 samples, 0.13%)</title><rect x="95.3553%" y="213" width="0.1273%" height="15" fill="rgb(224,169,11)"/><text x="95.6053%" y="223.50"></text></g><g><title>resolve_postprocess (2,415,017 samples, 0.12%)</title><rect x="95.4826%" y="213" width="0.1211%" height="15" fill="rgb(250,166,2)"/><text x="95.7326%" y="223.50"></text></g><g><title>configure_and_expand (806,424,436 samples, 40.42%)</title><rect x="55.1790%" y="245" width="40.4247%" height="15" fill="rgb(242,216,29)"/><text x="55.4290%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (46,138,207 samples, 2.31%)</title><rect x="93.2909%" y="229" width="2.3128%" height="15" fill="rgb(230,116,27)"/><text x="93.5409%" y="239.50">r..</text></g><g><title>drop_ast (9,170,803 samples, 0.46%)</title><rect x="95.6037%" y="245" width="0.4597%" height="15" fill="rgb(228,99,48)"/><text x="95.8537%" y="255.50"></text></g><g><title>early_lint_checks (10,782,411 samples, 0.54%)</title><rect x="96.0645%" y="245" width="0.5405%" height="15" fill="rgb(253,11,6)"/><text x="96.3145%" y="255.50"></text></g><g><title>free_global_ctxt (11,191,516 samples, 0.56%)</title><rect x="96.6050%" y="245" width="0.5610%" height="15" fill="rgb(247,143,39)"/><text x="96.8550%" y="255.50"></text></g><g><title>hir_lowering (47,272,531 samples, 2.37%)</title><rect x="97.1813%" y="245" width="2.3697%" height="15" fill="rgb(236,97,10)"/><text x="97.4313%" y="255.50">hi..</text></g><g><title>parse_crate (6,465,502 samples, 0.32%)</title><rect x="99.5549%" y="245" width="0.3241%" height="15" fill="rgb(233,208,19)"/><text x="99.8049%" y="255.50"></text></g><g><title>all (1,994,878,947 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (1,994,878,947 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>