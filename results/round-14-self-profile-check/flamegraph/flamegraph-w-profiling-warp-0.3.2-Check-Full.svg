<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>is_copy_raw (12,382,663 samples, 0.40%)</title><rect x="8.5356%" y="213" width="0.4032%" height="15" fill="rgb(227,0,7)"/><text x="8.7856%" y="223.50"></text></g><g><title>evaluate_obligation (9,743,938 samples, 0.32%)</title><rect x="8.6215%" y="197" width="0.3172%" height="15" fill="rgb(217,0,24)"/><text x="8.8715%" y="207.50"></text></g><g><title>needs_drop_raw (16,172,127 samples, 0.53%)</title><rect x="8.4187%" y="229" width="0.5265%" height="15" fill="rgb(221,193,54)"/><text x="8.6687%" y="239.50"></text></g><g><title>codegen_fulfill_obligation (5,772,377 samples, 0.19%)</title><rect x="9.0075%" y="213" width="0.1879%" height="15" fill="rgb(248,212,6)"/><text x="9.2575%" y="223.50"></text></g><g><title>resolve_instance (10,707,696 samples, 0.35%)</title><rect x="8.9452%" y="229" width="0.3486%" height="15" fill="rgb(208,68,35)"/><text x="9.1952%" y="239.50"></text></g><g><title>thir_body (14,027,945 samples, 0.46%)</title><rect x="9.3041%" y="229" width="0.4567%" height="15" fill="rgb(232,128,0)"/><text x="9.5541%" y="239.50"></text></g><g><title>mir_const (93,427,877 samples, 3.04%)</title><rect x="6.7384%" y="277" width="3.0418%" height="15" fill="rgb(207,160,47)"/><text x="6.9884%" y="287.50">mir..</text></g><g><title>unsafety_check_result (83,729,601 samples, 2.73%)</title><rect x="7.0541%" y="261" width="2.7261%" height="15" fill="rgb(228,23,34)"/><text x="7.3041%" y="271.50">un..</text></g><g><title>mir_built (76,887,921 samples, 2.50%)</title><rect x="7.2769%" y="245" width="2.5033%" height="15" fill="rgb(218,30,26)"/><text x="7.5269%" y="255.50">mi..</text></g><g><title>mir_const (8,454,596 samples, 0.28%)</title><rect x="9.9549%" y="261" width="0.2753%" height="15" fill="rgb(220,122,19)"/><text x="10.2049%" y="271.50"></text></g><g><title>unsafety_check_result (7,063,037 samples, 0.23%)</title><rect x="10.0002%" y="245" width="0.2300%" height="15" fill="rgb(250,228,42)"/><text x="10.2502%" y="255.50"></text></g><g><title>mir_built (6,159,607 samples, 0.20%)</title><rect x="10.0296%" y="229" width="0.2005%" height="15" fill="rgb(240,193,28)"/><text x="10.2796%" y="239.50"></text></g><g><title>mir_promoted (118,225,393 samples, 3.85%)</title><rect x="6.3882%" y="293" width="3.8492%" height="15" fill="rgb(216,20,37)"/><text x="6.6382%" y="303.50">mir_..</text></g><g><title>mir_const_qualif (14,042,006 samples, 0.46%)</title><rect x="9.7802%" y="277" width="0.4572%" height="15" fill="rgb(206,188,39)"/><text x="10.0302%" y="287.50"></text></g><g><title>type_op_ascribe_user_type (7,365,836 samples, 0.24%)</title><rect x="10.2374%" y="293" width="0.2398%" height="15" fill="rgb(217,207,13)"/><text x="10.4874%" y="303.50"></text></g><g><title>type_op_normalize_fn_sig (4,588,903 samples, 0.15%)</title><rect x="10.4772%" y="293" width="0.1494%" height="15" fill="rgb(231,73,38)"/><text x="10.7272%" y="303.50"></text></g><g><title>type_op_normalize_predicate (6,570,550 samples, 0.21%)</title><rect x="10.6270%" y="293" width="0.2139%" height="15" fill="rgb(225,20,46)"/><text x="10.8770%" y="303.50"></text></g><g><title>normalize_projection_ty (5,281,927 samples, 0.17%)</title><rect x="10.6690%" y="277" width="0.1720%" height="15" fill="rgb(210,31,41)"/><text x="10.9190%" y="287.50"></text></g><g><title>type_op_normalize_ty (8,077,889 samples, 0.26%)</title><rect x="10.8409%" y="293" width="0.2630%" height="15" fill="rgb(221,200,47)"/><text x="11.0909%" y="303.50"></text></g><g><title>normalize_projection_ty (6,220,599 samples, 0.20%)</title><rect x="10.9014%" y="277" width="0.2025%" height="15" fill="rgb(226,26,5)"/><text x="11.1514%" y="287.50"></text></g><g><title>type_op_prove_predicate (45,998,858 samples, 1.50%)</title><rect x="11.1039%" y="293" width="1.4976%" height="15" fill="rgb(249,33,26)"/><text x="11.3539%" y="303.50"></text></g><g><title>MIR_borrow_checking (379,862,334 samples, 12.37%)</title><rect x="0.2346%" y="325" width="12.3675%" height="15" fill="rgb(235,183,28)"/><text x="0.4846%" y="335.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (377,936,668 samples, 12.30%)</title><rect x="0.2973%" y="309" width="12.3048%" height="15" fill="rgb(221,5,38)"/><text x="0.5473%" y="319.50">mir_borrowck</text></g><g><title>MIR_effect_checking (5,249,919 samples, 0.17%)</title><rect x="12.6021%" y="325" width="0.1709%" height="15" fill="rgb(247,18,42)"/><text x="12.8521%" y="335.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,028,306 samples, 0.13%)</title><rect x="12.6418%" y="309" width="0.1312%" height="15" fill="rgb(241,131,45)"/><text x="12.8918%" y="319.50"></text></g><g><title>hir_module_items (4,070,774 samples, 0.13%)</title><rect x="12.7730%" y="325" width="0.1325%" height="15" fill="rgb(249,31,29)"/><text x="13.0230%" y="335.50"></text></g><g><title>codegen_fn_attrs (3,177,742 samples, 0.10%)</title><rect x="13.0548%" y="293" width="0.1035%" height="15" fill="rgb(225,111,53)"/><text x="13.3048%" y="303.50"></text></g><g><title>check_mod_attrs (7,631,153 samples, 0.25%)</title><rect x="12.9098%" y="309" width="0.2485%" height="15" fill="rgb(238,160,17)"/><text x="13.1598%" y="319.50"></text></g><g><title>lookup_deprecation_entry (3,431,058 samples, 0.11%)</title><rect x="13.3910%" y="293" width="0.1117%" height="15" fill="rgb(214,148,48)"/><text x="13.6410%" y="303.50"></text></g><g><title>stability_index (3,104,175 samples, 0.10%)</title><rect x="13.4016%" y="277" width="0.1011%" height="15" fill="rgb(232,36,49)"/><text x="13.6516%" y="287.50"></text></g><g><title>check_mod_unstable_api_usage (6,584,216 samples, 0.21%)</title><rect x="13.2957%" y="309" width="0.2144%" height="15" fill="rgb(209,103,24)"/><text x="13.5457%" y="319.50"></text></g><g><title>misc_checking_1 (19,723,832 samples, 0.64%)</title><rect x="12.9055%" y="325" width="0.6422%" height="15" fill="rgb(229,88,8)"/><text x="13.1555%" y="335.50"></text></g><g><title>liveness_and_intrinsic_checking (12,699,092 samples, 0.41%)</title><rect x="13.5478%" y="309" width="0.4135%" height="15" fill="rgb(213,181,19)"/><text x="13.7978%" y="319.50"></text></g><g><title>check_mod_liveness (10,851,342 samples, 0.35%)</title><rect x="13.6080%" y="293" width="0.3533%" height="15" fill="rgb(254,191,54)"/><text x="13.8580%" y="303.50"></text></g><g><title>type_uninhabited_from (3,477,114 samples, 0.11%)</title><rect x="13.8481%" y="277" width="0.1132%" height="15" fill="rgb(241,83,37)"/><text x="14.0981%" y="287.50"></text></g><g><title>misc_checking_2 (32,301,844 samples, 1.05%)</title><rect x="13.5477%" y="325" width="1.0517%" height="15" fill="rgb(233,36,39)"/><text x="13.7977%" y="335.50"></text></g><g><title>match_checking (19,599,112 samples, 0.64%)</title><rect x="13.9613%" y="309" width="0.6381%" height="15" fill="rgb(226,3,54)"/><text x="14.2113%" y="319.50"></text></g><g><title>check_match (18,753,152 samples, 0.61%)</title><rect x="13.9888%" y="293" width="0.6106%" height="15" fill="rgb(245,192,40)"/><text x="14.2388%" y="303.50"></text></g><g><title>visible_parent_map (5,822,327 samples, 0.19%)</title><rect x="14.4098%" y="277" width="0.1896%" height="15" fill="rgb(238,167,29)"/><text x="14.6598%" y="287.50"></text></g><g><title>module_children (5,231,060 samples, 0.17%)</title><rect x="14.4291%" y="261" width="0.1703%" height="15" fill="rgb(232,182,51)"/><text x="14.6791%" y="271.50"></text></g><g><title>metadata_decode_entry_module_children (5,109,750 samples, 0.17%)</title><rect x="14.4330%" y="245" width="0.1664%" height="15" fill="rgb(231,60,39)"/><text x="14.6830%" y="255.50"></text></g><g><title>check_private_in_public (6,706,056 samples, 0.22%)</title><rect x="14.6002%" y="309" width="0.2183%" height="15" fill="rgb(208,69,12)"/><text x="14.8502%" y="319.50"></text></g><g><title>death_checking (10,587,779 samples, 0.34%)</title><rect x="14.8185%" y="309" width="0.3447%" height="15" fill="rgb(235,93,37)"/><text x="15.0685%" y="319.50"></text></g><g><title>eval_to_const_value_raw (3,193,257 samples, 0.10%)</title><rect x="15.9613%" y="229" width="0.1040%" height="15" fill="rgb(213,116,39)"/><text x="16.2113%" y="239.50"></text></g><g><title>eval_to_const_value_raw (3,110,095 samples, 0.10%)</title><rect x="15.9640%" y="213" width="0.1013%" height="15" fill="rgb(222,207,29)"/><text x="16.2140%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,741,453 samples, 0.12%)</title><rect x="15.9477%" y="245" width="0.1218%" height="15" fill="rgb(206,96,30)"/><text x="16.1977%" y="255.50"></text></g><g><title>eval_to_allocation_raw (15,956,485 samples, 0.52%)</title><rect x="15.5555%" y="277" width="0.5195%" height="15" fill="rgb(218,138,4)"/><text x="15.8055%" y="287.50"></text></g><g><title>eval_to_allocation_raw (15,814,932 samples, 0.51%)</title><rect x="15.5601%" y="261" width="0.5149%" height="15" fill="rgb(250,191,14)"/><text x="15.8101%" y="271.50"></text></g><g><title>param_env (11,393,118 samples, 0.37%)</title><rect x="16.1326%" y="277" width="0.3709%" height="15" fill="rgb(239,60,40)"/><text x="16.3826%" y="287.50"></text></g><g><title>predicates_of (4,366,290 samples, 0.14%)</title><rect x="16.3614%" y="261" width="0.1422%" height="15" fill="rgb(206,27,48)"/><text x="16.6114%" y="271.50"></text></g><g><title>predicates_defined_on (3,591,334 samples, 0.12%)</title><rect x="16.3866%" y="245" width="0.1169%" height="15" fill="rgb(225,35,8)"/><text x="16.6366%" y="255.50"></text></g><g><title>crate_lints (44,010,746 samples, 1.43%)</title><rect x="15.1633%" y="293" width="1.4329%" height="15" fill="rgb(250,213,24)"/><text x="15.4133%" y="303.50"></text></g><g><title>lint_checking (58,340,298 samples, 1.90%)</title><rect x="15.1632%" y="309" width="1.8994%" height="15" fill="rgb(247,123,22)"/><text x="15.4132%" y="319.50">l..</text></g><g><title>module_lints (14,325,752 samples, 0.47%)</title><rect x="16.5962%" y="293" width="0.4664%" height="15" fill="rgb(231,138,38)"/><text x="16.8462%" y="303.50"></text></g><g><title>lint_mod (14,275,150 samples, 0.46%)</title><rect x="16.5979%" y="277" width="0.4648%" height="15" fill="rgb(231,145,46)"/><text x="16.8479%" y="287.50"></text></g><g><title>privacy_access_levels (11,490,099 samples, 0.37%)</title><rect x="17.0626%" y="309" width="0.3741%" height="15" fill="rgb(251,118,11)"/><text x="17.3126%" y="319.50"></text></g><g><title>privacy_checking_modules (28,172,317 samples, 0.92%)</title><rect x="17.4367%" y="309" width="0.9172%" height="15" fill="rgb(217,147,25)"/><text x="17.6867%" y="319.50"></text></g><g><title>check_mod_privacy (28,127,037 samples, 0.92%)</title><rect x="17.4382%" y="293" width="0.9158%" height="15" fill="rgb(247,81,37)"/><text x="17.6882%" y="303.50"></text></g><g><title>misc_checking_3 (115,571,753 samples, 3.76%)</title><rect x="14.5994%" y="325" width="3.7628%" height="15" fill="rgb(209,12,38)"/><text x="14.8494%" y="335.50">misc..</text></g><g><title>impl_parent (5,362,762 samples, 0.17%)</title><rect x="18.9022%" y="261" width="0.1746%" height="15" fill="rgb(227,1,9)"/><text x="19.1522%" y="271.50"></text></g><g><title>impl_trait_ref (11,281,335 samples, 0.37%)</title><rect x="19.0768%" y="261" width="0.3673%" height="15" fill="rgb(248,47,43)"/><text x="19.3268%" y="271.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,976,769 samples, 0.29%)</title><rect x="19.1518%" y="245" width="0.2923%" height="15" fill="rgb(221,10,30)"/><text x="19.4018%" y="255.50"></text></g><g><title>coherent_trait (34,717,102 samples, 1.13%)</title><rect x="18.4159%" y="293" width="1.1303%" height="15" fill="rgb(210,229,1)"/><text x="18.6659%" y="303.50"></text></g><g><title>specialization_graph_of (33,440,589 samples, 1.09%)</title><rect x="18.4575%" y="277" width="1.0888%" height="15" fill="rgb(222,148,37)"/><text x="18.7075%" y="287.50"></text></g><g><title>coherence_checking (35,583,872 samples, 1.16%)</title><rect x="18.4140%" y="309" width="1.1585%" height="15" fill="rgb(234,67,33)"/><text x="18.6640%" y="319.50"></text></g><g><title>dropck_outlives (5,447,436 samples, 0.18%)</title><rect x="27.6938%" y="261" width="0.1774%" height="15" fill="rgb(247,98,35)"/><text x="27.9438%" y="271.50"></text></g><g><title>evaluate_obligation (27,079,067 samples, 0.88%)</title><rect x="27.8713%" y="261" width="0.8816%" height="15" fill="rgb(247,138,52)"/><text x="28.1213%" y="271.50"></text></g><g><title>method_autoderef_steps (6,902,557 samples, 0.22%)</title><rect x="28.8129%" y="261" width="0.2247%" height="15" fill="rgb(213,79,30)"/><text x="29.0629%" y="271.50"></text></g><g><title>dropck_outlives (3,664,928 samples, 0.12%)</title><rect x="31.8708%" y="245" width="0.1193%" height="15" fill="rgb(246,177,23)"/><text x="32.1208%" y="255.50"></text></g><g><title>evaluate_obligation (14,273,541 samples, 0.46%)</title><rect x="31.9901%" y="245" width="0.4647%" height="15" fill="rgb(230,62,27)"/><text x="32.2401%" y="255.50"></text></g><g><title>typeck (108,961,499 samples, 3.55%)</title><rect x="29.0875%" y="261" width="3.5475%" height="15" fill="rgb(216,154,8)"/><text x="29.3375%" y="271.50">type..</text></g><g><title>item_bodies_checking (400,628,757 samples, 13.04%)</title><rect x="19.6007%" y="309" width="13.0436%" height="15" fill="rgb(244,35,45)"/><text x="19.8507%" y="319.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (400,624,017 samples, 13.04%)</title><rect x="19.6009%" y="293" width="13.0434%" height="15" fill="rgb(251,115,12)"/><text x="19.8509%" y="303.50">typeck_item_bodies</text></g><g><title>typeck (398,354,012 samples, 12.97%)</title><rect x="19.6748%" y="277" width="12.9695%" height="15" fill="rgb(240,54,50)"/><text x="19.9248%" y="287.50">typeck</text></g><g><title>evaluate_obligation (3,512,820 samples, 0.11%)</title><rect x="35.0794%" y="277" width="0.1144%" height="15" fill="rgb(233,84,52)"/><text x="35.3294%" y="287.50"></text></g><g><title>evaluate_obligation (8,664,267 samples, 0.28%)</title><rect x="37.4007%" y="245" width="0.2821%" height="15" fill="rgb(207,117,47)"/><text x="37.6507%" y="255.50"></text></g><g><title>mir_borrowck (9,783,250 samples, 0.32%)</title><rect x="41.0752%" y="213" width="0.3185%" height="15" fill="rgb(249,43,39)"/><text x="41.3252%" y="223.50"></text></g><g><title>type_op_ascribe_user_type (4,171,636 samples, 0.14%)</title><rect x="41.4882%" y="213" width="0.1358%" height="15" fill="rgb(209,38,44)"/><text x="41.7382%" y="223.50"></text></g><g><title>type_op_normalize_predicate (3,532,709 samples, 0.12%)</title><rect x="41.6747%" y="213" width="0.1150%" height="15" fill="rgb(236,212,23)"/><text x="41.9247%" y="223.50"></text></g><g><title>type_op_prove_predicate (10,683,930 samples, 0.35%)</title><rect x="41.7989%" y="213" width="0.3478%" height="15" fill="rgb(242,79,21)"/><text x="42.0489%" y="223.50"></text></g><g><title>mir_borrowck (59,271,898 samples, 1.93%)</title><rect x="40.2172%" y="229" width="1.9298%" height="15" fill="rgb(211,96,35)"/><text x="40.4672%" y="239.50">m..</text></g><g><title>mir_const (3,591,907 samples, 0.12%)</title><rect x="42.2756%" y="213" width="0.1169%" height="15" fill="rgb(253,215,40)"/><text x="42.5256%" y="223.50"></text></g><g><title>mir_promoted (7,636,178 samples, 0.25%)</title><rect x="42.1469%" y="229" width="0.2486%" height="15" fill="rgb(211,81,21)"/><text x="42.3969%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (30,235,044 samples, 0.98%)</title><rect x="42.4623%" y="229" width="0.9844%" height="15" fill="rgb(208,190,38)"/><text x="42.7123%" y="239.50"></text></g><g><title>normalize_projection_ty (27,598,446 samples, 0.90%)</title><rect x="42.5482%" y="213" width="0.8985%" height="15" fill="rgb(235,213,38)"/><text x="42.7982%" y="223.50"></text></g><g><title>type_op_normalize_predicate (17,622,023 samples, 0.57%)</title><rect x="43.4467%" y="229" width="0.5737%" height="15" fill="rgb(237,122,38)"/><text x="43.6967%" y="239.50"></text></g><g><title>normalize_projection_ty (14,107,344 samples, 0.46%)</title><rect x="43.5612%" y="213" width="0.4593%" height="15" fill="rgb(244,218,35)"/><text x="43.8112%" y="223.50"></text></g><g><title>type_op_prove_predicate (72,290,010 samples, 2.35%)</title><rect x="44.0376%" y="229" width="2.3536%" height="15" fill="rgb(240,68,47)"/><text x="44.2876%" y="239.50">t..</text></g><g><title>mir_borrowck (266,950,719 samples, 8.69%)</title><rect x="37.7002%" y="245" width="8.6913%" height="15" fill="rgb(210,16,53)"/><text x="37.9502%" y="255.50">mir_borrowck</text></g><g><title>codegen_fulfill_obligation (32,390,515 samples, 1.05%)</title><rect x="46.8429%" y="165" width="1.0546%" height="15" fill="rgb(235,124,12)"/><text x="47.0929%" y="175.50"></text></g><g><title>evaluate_obligation (7,411,342 samples, 0.24%)</title><rect x="47.6561%" y="149" width="0.2413%" height="15" fill="rgb(224,169,11)"/><text x="47.9061%" y="159.50"></text></g><g><title>resolve_instance (36,192,513 samples, 1.18%)</title><rect x="46.8187%" y="181" width="1.1783%" height="15" fill="rgb(250,166,2)"/><text x="47.0687%" y="191.50"></text></g><g><title>dropck_outlives (10,951,772 samples, 0.36%)</title><rect x="61.9668%" y="165" width="0.3566%" height="15" fill="rgb(242,216,29)"/><text x="62.2168%" y="175.50"></text></g><g><title>evaluate_obligation (3,094,595 samples, 0.10%)</title><rect x="64.7204%" y="117" width="0.1008%" height="15" fill="rgb(230,116,27)"/><text x="64.9704%" y="127.50"></text></g><g><title>mir_borrowck (4,300,928 samples, 0.14%)</title><rect x="65.0165%" y="85" width="0.1400%" height="15" fill="rgb(228,99,48)"/><text x="65.2665%" y="95.50"></text></g><g><title>mir_borrowck (4,607,832 samples, 0.15%)</title><rect x="65.0093%" y="101" width="0.1500%" height="15" fill="rgb(253,11,6)"/><text x="65.2593%" y="111.50"></text></g><g><title>mir_borrowck (12,683,442 samples, 0.41%)</title><rect x="64.8220%" y="117" width="0.4129%" height="15" fill="rgb(247,143,39)"/><text x="65.0720%" y="127.50"></text></g><g><title>evaluate_obligation (6,994,169 samples, 0.23%)</title><rect x="66.2018%" y="37" width="0.2277%" height="15" fill="rgb(236,97,10)"/><text x="66.4518%" y="47.50"></text></g><g><title>mir_built (38,062,971 samples, 1.24%)</title><rect x="65.2459%" y="69" width="1.2392%" height="15" fill="rgb(233,208,19)"/><text x="65.4959%" y="79.50"></text></g><g><title>typeck (37,144,810 samples, 1.21%)</title><rect x="65.2758%" y="53" width="1.2094%" height="15" fill="rgb(216,164,2)"/><text x="65.5258%" y="63.50"></text></g><g><title>mir_const (42,045,444 samples, 1.37%)</title><rect x="65.2386%" y="101" width="1.3689%" height="15" fill="rgb(220,129,5)"/><text x="65.4886%" y="111.50"></text></g><g><title>unsafety_check_result (41,888,004 samples, 1.36%)</title><rect x="65.2437%" y="85" width="1.3638%" height="15" fill="rgb(242,17,10)"/><text x="65.4937%" y="95.50"></text></g><g><title>unsafety_check_result (3,759,810 samples, 0.12%)</title><rect x="66.4851%" y="69" width="0.1224%" height="15" fill="rgb(242,107,0)"/><text x="66.7351%" y="79.50"></text></g><g><title>mir_promoted (42,167,615 samples, 1.37%)</title><rect x="65.2350%" y="117" width="1.3729%" height="15" fill="rgb(251,28,31)"/><text x="65.4850%" y="127.50"></text></g><g><title>evaluate_obligation (135,127,394 samples, 4.40%)</title><rect x="62.3295%" y="165" width="4.3995%" height="15" fill="rgb(233,223,10)"/><text x="62.5795%" y="175.50">evalu..</text></g><g><title>type_of (64,841,459 samples, 2.11%)</title><rect x="64.6178%" y="149" width="2.1111%" height="15" fill="rgb(215,21,27)"/><text x="64.8678%" y="159.50">t..</text></g><g><title>mir_borrowck (64,631,368 samples, 2.10%)</title><rect x="64.6247%" y="133" width="2.1043%" height="15" fill="rgb(232,23,21)"/><text x="64.8747%" y="143.50">m..</text></g><g><title>is_copy_raw (7,381,450 samples, 0.24%)</title><rect x="66.8870%" y="165" width="0.2403%" height="15" fill="rgb(244,5,23)"/><text x="67.1370%" y="175.50"></text></g><g><title>evaluate_obligation (5,530,608 samples, 0.18%)</title><rect x="66.9472%" y="149" width="0.1801%" height="15" fill="rgb(226,81,46)"/><text x="67.1972%" y="159.50"></text></g><g><title>method_autoderef_steps (6,319,083 samples, 0.21%)</title><rect x="67.1748%" y="165" width="0.2057%" height="15" fill="rgb(247,70,30)"/><text x="67.4248%" y="175.50"></text></g><g><title>mir_built (647,043,961 samples, 21.07%)</title><rect x="46.5434%" y="197" width="21.0663%" height="15" fill="rgb(212,68,19)"/><text x="46.7934%" y="207.50">mir_built</text></g><g><title>typeck (600,146,951 samples, 19.54%)</title><rect x="48.0702%" y="181" width="19.5395%" height="15" fill="rgb(240,187,13)"/><text x="48.3202%" y="191.50">typeck</text></g><g><title>thir_body (10,101,521 samples, 0.33%)</title><rect x="68.2718%" y="165" width="0.3289%" height="15" fill="rgb(223,113,26)"/><text x="68.5218%" y="175.50"></text></g><g><title>mir_built (27,586,052 samples, 0.90%)</title><rect x="67.7139%" y="181" width="0.8981%" height="15" fill="rgb(206,192,2)"/><text x="67.9639%" y="191.50"></text></g><g><title>thir_body (3,498,692 samples, 0.11%)</title><rect x="68.8390%" y="149" width="0.1139%" height="15" fill="rgb(241,108,4)"/><text x="69.0890%" y="159.50"></text></g><g><title>mir_built (9,373,775 samples, 0.31%)</title><rect x="68.6529%" y="165" width="0.3052%" height="15" fill="rgb(247,173,49)"/><text x="68.9029%" y="175.50"></text></g><g><title>mir_const (695,023,393 samples, 22.63%)</title><rect x="46.4310%" y="229" width="22.6284%" height="15" fill="rgb(224,114,35)"/><text x="46.6810%" y="239.50">mir_const</text></g><g><title>unsafety_check_result (692,537,692 samples, 22.55%)</title><rect x="46.5119%" y="213" width="22.5475%" height="15" fill="rgb(245,159,27)"/><text x="46.7619%" y="223.50">unsafety_check_result</text></g><g><title>unsafety_check_result (44,527,803 samples, 1.45%)</title><rect x="67.6097%" y="197" width="1.4497%" height="15" fill="rgb(245,172,44)"/><text x="67.8597%" y="207.50"></text></g><g><title>unsafety_check_result (13,716,457 samples, 0.45%)</title><rect x="68.6128%" y="181" width="0.4466%" height="15" fill="rgb(236,23,11)"/><text x="68.8628%" y="191.50"></text></g><g><title>unsafety_check_result (3,103,096 samples, 0.10%)</title><rect x="68.9584%" y="165" width="0.1010%" height="15" fill="rgb(205,117,38)"/><text x="69.2084%" y="175.50"></text></g><g><title>mir_promoted (696,392,694 samples, 22.67%)</title><rect x="46.3915%" y="245" width="22.6730%" height="15" fill="rgb(237,72,25)"/><text x="46.6415%" y="255.50">mir_promoted</text></g><g><title>type_op_normalize_predicate (34,922,423 samples, 1.14%)</title><rect x="69.1035%" y="245" width="1.1370%" height="15" fill="rgb(244,70,9)"/><text x="69.3535%" y="255.50"></text></g><g><title>normalize_projection_ty (30,951,267 samples, 1.01%)</title><rect x="69.2328%" y="229" width="1.0077%" height="15" fill="rgb(217,125,39)"/><text x="69.4828%" y="239.50"></text></g><g><title>type_of (1,131,532,441 samples, 36.84%)</title><rect x="35.3248%" y="277" width="36.8402%" height="15" fill="rgb(235,36,10)"/><text x="35.5748%" y="287.50">type_of</text></g><g><title>mir_borrowck (1,131,209,272 samples, 36.83%)</title><rect x="35.3354%" y="261" width="36.8297%" height="15" fill="rgb(251,123,47)"/><text x="35.5854%" y="271.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (58,370,856 samples, 1.90%)</title><rect x="70.2646%" y="245" width="1.9004%" height="15" fill="rgb(221,13,13)"/><text x="70.5146%" y="255.50">t..</text></g><g><title>item_types_checking (1,259,430,320 samples, 41.00%)</title><rect x="32.6443%" y="309" width="41.0043%" height="15" fill="rgb(238,131,9)"/><text x="32.8943%" y="319.50">item_types_checking</text></g><g><title>check_mod_item_types (1,259,330,917 samples, 41.00%)</title><rect x="32.6475%" y="293" width="41.0011%" height="15" fill="rgb(211,50,8)"/><text x="32.8975%" y="303.50">check_mod_item_types</text></g><g><title>typeck (45,566,411 samples, 1.48%)</title><rect x="72.1651%" y="277" width="1.4835%" height="15" fill="rgb(245,182,24)"/><text x="72.4151%" y="287.50"></text></g><g><title>fn_sig (4,587,507 samples, 0.15%)</title><rect x="73.8215%" y="277" width="0.1494%" height="15" fill="rgb(242,14,37)"/><text x="74.0715%" y="287.50"></text></g><g><title>generics_of (4,970,314 samples, 0.16%)</title><rect x="73.9708%" y="277" width="0.1618%" height="15" fill="rgb(246,228,12)"/><text x="74.2208%" y="287.50"></text></g><g><title>lint_levels (5,709,665 samples, 0.19%)</title><rect x="74.5437%" y="197" width="0.1859%" height="15" fill="rgb(213,55,15)"/><text x="74.7937%" y="207.50"></text></g><g><title>late_bound_vars_map (9,504,859 samples, 0.31%)</title><rect x="74.4204%" y="229" width="0.3095%" height="15" fill="rgb(209,9,3)"/><text x="74.6704%" y="239.50"></text></g><g><title>resolve_lifetimes (9,277,509 samples, 0.30%)</title><rect x="74.4278%" y="213" width="0.3021%" height="15" fill="rgb(230,59,30)"/><text x="74.6778%" y="223.50"></text></g><g><title>explicit_predicates_of (16,688,025 samples, 0.54%)</title><rect x="74.2392%" y="245" width="0.5433%" height="15" fill="rgb(209,121,21)"/><text x="74.4892%" y="255.50"></text></g><g><title>predicates_of (24,148,440 samples, 0.79%)</title><rect x="74.1551%" y="277" width="0.7862%" height="15" fill="rgb(220,109,13)"/><text x="74.4051%" y="287.50"></text></g><g><title>predicates_defined_on (23,258,513 samples, 0.76%)</title><rect x="74.1841%" y="261" width="0.7572%" height="15" fill="rgb(232,18,1)"/><text x="74.4341%" y="271.50"></text></g><g><title>inferred_outlives_of (4,877,124 samples, 0.16%)</title><rect x="74.7826%" y="245" width="0.1588%" height="15" fill="rgb(215,41,42)"/><text x="75.0326%" y="255.50"></text></g><g><title>inferred_outlives_crate (4,523,631 samples, 0.15%)</title><rect x="74.7941%" y="229" width="0.1473%" height="15" fill="rgb(224,123,36)"/><text x="75.0441%" y="239.50"></text></g><g><title>type_collecting (42,693,491 samples, 1.39%)</title><rect x="73.6520%" y="309" width="1.3900%" height="15" fill="rgb(240,125,3)"/><text x="73.9020%" y="319.50"></text></g><g><title>collect_mod_item_types (42,624,271 samples, 1.39%)</title><rect x="73.6542%" y="293" width="1.3878%" height="15" fill="rgb(205,98,50)"/><text x="73.9042%" y="303.50"></text></g><g><title>evaluate_obligation (7,430,330 samples, 0.24%)</title><rect x="76.5306%" y="277" width="0.2419%" height="15" fill="rgb(205,185,37)"/><text x="76.7806%" y="287.50"></text></g><g><title>implied_outlives_bounds (3,545,510 samples, 0.12%)</title><rect x="76.7872%" y="277" width="0.1154%" height="15" fill="rgb(238,207,15)"/><text x="77.0372%" y="287.50"></text></g><g><title>param_env (7,612,588 samples, 0.25%)</title><rect x="76.9077%" y="277" width="0.2478%" height="15" fill="rgb(213,199,42)"/><text x="77.1577%" y="287.50"></text></g><g><title>region_scope_tree (4,625,928 samples, 0.15%)</title><rect x="77.1617%" y="277" width="0.1506%" height="15" fill="rgb(235,201,11)"/><text x="77.4117%" y="287.50"></text></g><g><title>check_impl_item_well_formed (65,851,003 samples, 2.14%)</title><rect x="75.1811%" y="293" width="2.1440%" height="15" fill="rgb(207,46,11)"/><text x="75.4311%" y="303.50">c..</text></g><g><title>evaluate_obligation (7,563,246 samples, 0.25%)</title><rect x="79.5628%" y="277" width="0.2462%" height="15" fill="rgb(241,35,35)"/><text x="79.8128%" y="287.50"></text></g><g><title>param_env (9,287,241 samples, 0.30%)</title><rect x="79.9465%" y="277" width="0.3024%" height="15" fill="rgb(243,32,47)"/><text x="80.1965%" y="287.50"></text></g><g><title>check_item_well_formed (94,917,697 samples, 3.09%)</title><rect x="77.3251%" y="293" width="3.0903%" height="15" fill="rgb(247,202,23)"/><text x="77.5751%" y="303.50">che..</text></g><g><title>analysis (2,471,017,861 samples, 80.45%)</title><rect x="0.0772%" y="341" width="80.4509%" height="15" fill="rgb(219,102,11)"/><text x="0.3272%" y="351.50">analysis</text></g><g><title>type_check_crate (1,909,403,848 samples, 62.17%)</title><rect x="18.3621%" y="325" width="62.1660%" height="15" fill="rgb(243,110,44)"/><text x="18.6121%" y="335.50">type_check_crate</text></g><g><title>wf_checking (168,384,498 samples, 5.48%)</title><rect x="75.0459%" y="309" width="5.4822%" height="15" fill="rgb(222,74,54)"/><text x="75.2959%" y="319.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (3,464,069 samples, 0.11%)</title><rect x="80.4154%" y="293" width="0.1128%" height="15" fill="rgb(216,99,12)"/><text x="80.6654%" y="303.50"></text></g><g><title>AST_validation (4,434,990 samples, 0.14%)</title><rect x="80.5648%" y="325" width="0.1444%" height="15" fill="rgb(226,22,26)"/><text x="80.8148%" y="335.50"></text></g><g><title>metadata_register_crate (15,096,240 samples, 0.49%)</title><rect x="91.7658%" y="293" width="0.4915%" height="15" fill="rgb(217,163,10)"/><text x="92.0158%" y="303.50"></text></g><g><title>metadata_register_crate (12,564,596 samples, 0.41%)</title><rect x="91.8483%" y="277" width="0.4091%" height="15" fill="rgb(213,25,53)"/><text x="92.0983%" y="287.50"></text></g><g><title>metadata_register_crate (7,386,124 samples, 0.24%)</title><rect x="92.0169%" y="261" width="0.2405%" height="15" fill="rgb(252,105,26)"/><text x="92.2669%" y="271.50"></text></g><g><title>metadata_register_crate (3,614,661 samples, 0.12%)</title><rect x="92.1396%" y="245" width="0.1177%" height="15" fill="rgb(220,39,43)"/><text x="92.3896%" y="255.50"></text></g><g><title>macro_expand_crate (353,192,991 samples, 11.50%)</title><rect x="80.8077%" y="325" width="11.4992%" height="15" fill="rgb(229,68,48)"/><text x="81.0577%" y="335.50">macro_expand_crate</text></g><g><title>expand_crate (353,178,431 samples, 11.50%)</title><rect x="80.8081%" y="309" width="11.4987%" height="15" fill="rgb(252,8,32)"/><text x="81.0581%" y="319.50">expand_crate</text></g><g><title>finalize_macro_resolutions (3,464,499 samples, 0.11%)</title><rect x="92.3688%" y="309" width="0.1128%" height="15" fill="rgb(223,20,43)"/><text x="92.6188%" y="319.50"></text></g><g><title>late_resolve_crate (32,566,657 samples, 1.06%)</title><rect x="92.4816%" y="309" width="1.0603%" height="15" fill="rgb(229,81,49)"/><text x="92.7316%" y="319.50"></text></g><g><title>resolve_check_unused (3,181,366 samples, 0.10%)</title><rect x="93.5493%" y="309" width="0.1036%" height="15" fill="rgb(236,28,36)"/><text x="93.7993%" y="319.50"></text></g><g><title>configure_and_expand (404,505,620 samples, 13.17%)</title><rect x="80.5597%" y="341" width="13.1698%" height="15" fill="rgb(249,185,26)"/><text x="80.8097%" y="351.50">configure_and_expand</text></g><g><title>resolve_crate (43,631,932 samples, 1.42%)</title><rect x="92.3090%" y="325" width="1.4206%" height="15" fill="rgb(249,174,33)"/><text x="92.5590%" y="335.50"></text></g><g><title>drop_ast (11,604,091 samples, 0.38%)</title><rect x="93.7296%" y="341" width="0.3778%" height="15" fill="rgb(233,201,37)"/><text x="93.9796%" y="351.50"></text></g><g><title>early_lint_checks (10,236,916 samples, 0.33%)</title><rect x="94.1088%" y="341" width="0.3333%" height="15" fill="rgb(221,78,26)"/><text x="94.3588%" y="351.50"></text></g><g><title>free_global_ctxt (23,086,530 samples, 0.75%)</title><rect x="94.4421%" y="341" width="0.7516%" height="15" fill="rgb(250,127,30)"/><text x="94.6921%" y="351.50"></text></g><g><title>needs_drop_raw (3,683,302 samples, 0.12%)</title><rect x="97.2276%" y="293" width="0.1199%" height="15" fill="rgb(230,49,44)"/><text x="97.4776%" y="303.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (16,675,591 samples, 0.54%)</title><rect x="96.8568%" y="309" width="0.5429%" height="15" fill="rgb(229,67,23)"/><text x="97.1068%" y="319.50"></text></g><g><title>optimized_mir (29,709,615 samples, 0.97%)</title><rect x="96.4333%" y="325" width="0.9673%" height="15" fill="rgb(249,83,47)"/><text x="96.6833%" y="335.50"></text></g><g><title>generate_crate_metadata (69,136,290 samples, 2.25%)</title><rect x="95.1937%" y="341" width="2.2509%" height="15" fill="rgb(215,43,3)"/><text x="95.4437%" y="351.50">g..</text></g><g><title>hir_lowering (68,425,821 samples, 2.23%)</title><rect x="97.4446%" y="341" width="2.2278%" height="15" fill="rgb(238,154,13)"/><text x="97.6946%" y="351.50">h..</text></g><g><title>self_profile_alloc_query_strings (6,811,897 samples, 0.22%)</title><rect x="99.6969%" y="341" width="0.2218%" height="15" fill="rgb(219,56,2)"/><text x="99.9469%" y="351.50"></text></g><g><title>all (3,071,459,671 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="383.50"></text></g><g><title>rustc (3,071,459,671 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="367.50">rustc</text></g></svg></svg>