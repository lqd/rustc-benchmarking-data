<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (247,183 samples, 0.18%)</title><rect x="11.1902%" y="197" width="0.1805%" height="15" fill="rgb(227,0,7)"/><text x="11.4402%" y="207.50"></text></g><g><title>param_env (367,024 samples, 0.27%)</title><rect x="12.8387%" y="165" width="0.2680%" height="15" fill="rgb(217,0,24)"/><text x="13.0887%" y="175.50"></text></g><g><title>item_attrs (395,664 samples, 0.29%)</title><rect x="13.5849%" y="133" width="0.2890%" height="15" fill="rgb(221,193,54)"/><text x="13.8349%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (384,034 samples, 0.28%)</title><rect x="13.5933%" y="117" width="0.2805%" height="15" fill="rgb(248,212,6)"/><text x="13.8433%" y="127.50"></text></g><g><title>codegen_fn_attrs (561,556 samples, 0.41%)</title><rect x="13.4860%" y="149" width="0.4101%" height="15" fill="rgb(208,68,35)"/><text x="13.7360%" y="159.50"></text></g><g><title>adt_drop_tys (204,322 samples, 0.15%)</title><rect x="16.3319%" y="101" width="0.1492%" height="15" fill="rgb(232,128,0)"/><text x="16.5819%" y="111.50"></text></g><g><title>is_copy_raw (138,582 samples, 0.10%)</title><rect x="16.4812%" y="101" width="0.1012%" height="15" fill="rgb(207,160,47)"/><text x="16.7312%" y="111.50"></text></g><g><title>adt_drop_tys (599,651 samples, 0.44%)</title><rect x="16.2938%" y="117" width="0.4379%" height="15" fill="rgb(228,23,34)"/><text x="16.5438%" y="127.50"></text></g><g><title>param_env (204,586 samples, 0.15%)</title><rect x="16.5824%" y="101" width="0.1494%" height="15" fill="rgb(218,30,26)"/><text x="16.8324%" y="111.50"></text></g><g><title>is_copy_raw (1,154,840 samples, 0.84%)</title><rect x="16.7345%" y="117" width="0.8434%" height="15" fill="rgb(220,122,19)"/><text x="16.9845%" y="127.50"></text></g><g><title>evaluate_obligation (923,678 samples, 0.67%)</title><rect x="16.9033%" y="101" width="0.6746%" height="15" fill="rgb(250,228,42)"/><text x="17.1533%" y="111.50"></text></g><g><title>needs_drop_raw (1,983,593 samples, 1.45%)</title><rect x="16.1297%" y="133" width="1.4486%" height="15" fill="rgb(240,193,28)"/><text x="16.3797%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (244,774 samples, 0.18%)</title><rect x="17.7600%" y="117" width="0.1788%" height="15" fill="rgb(216,20,37)"/><text x="18.0100%" y="127.50"></text></g><g><title>specialization_graph_of (241,613 samples, 0.18%)</title><rect x="17.9857%" y="117" width="0.1765%" height="15" fill="rgb(206,188,39)"/><text x="18.2357%" y="127.50"></text></g><g><title>resolve_instance (897,421 samples, 0.66%)</title><rect x="17.5784%" y="133" width="0.6554%" height="15" fill="rgb(217,207,13)"/><text x="17.8284%" y="143.50"></text></g><g><title>thir_body (1,032,536 samples, 0.75%)</title><rect x="18.2663%" y="133" width="0.7541%" height="15" fill="rgb(231,73,38)"/><text x="18.5163%" y="143.50"></text></g><g><title>mir_const (9,361,781 samples, 6.84%)</title><rect x="12.2088%" y="181" width="6.8370%" height="15" fill="rgb(225,20,46)"/><text x="12.4588%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (8,132,269 samples, 5.94%)</title><rect x="13.1067%" y="165" width="5.9391%" height="15" fill="rgb(210,31,41)"/><text x="13.3567%" y="175.50">unsafety..</text></g><g><title>mir_built (7,051,390 samples, 5.15%)</title><rect x="13.8961%" y="149" width="5.1497%" height="15" fill="rgb(221,200,47)"/><text x="14.1461%" y="159.50">mir_bu..</text></g><g><title>has_structural_eq_impls (250,822 samples, 0.18%)</title><rect x="19.3834%" y="165" width="0.1832%" height="15" fill="rgb(226,26,5)"/><text x="19.6334%" y="175.50"></text></g><g><title>evaluate_obligation (202,422 samples, 0.15%)</title><rect x="19.4188%" y="149" width="0.1478%" height="15" fill="rgb(249,33,26)"/><text x="19.6688%" y="159.50"></text></g><g><title>trait_impls_of (148,102 samples, 0.11%)</title><rect x="19.4584%" y="133" width="0.1082%" height="15" fill="rgb(235,183,28)"/><text x="19.7084%" y="143.50"></text></g><g><title>mir_const (326,244 samples, 0.24%)</title><rect x="19.6595%" y="165" width="0.2383%" height="15" fill="rgb(221,5,38)"/><text x="19.9095%" y="175.50"></text></g><g><title>unsafety_check_result (199,522 samples, 0.15%)</title><rect x="19.7521%" y="149" width="0.1457%" height="15" fill="rgb(247,18,42)"/><text x="20.0021%" y="159.50"></text></g><g><title>mir_const_qualif (1,258,414 samples, 0.92%)</title><rect x="19.0458%" y="181" width="0.9190%" height="15" fill="rgb(241,131,45)"/><text x="19.2958%" y="191.50"></text></g><g><title>mir_promoted (11,591,590 samples, 8.47%)</title><rect x="11.4997%" y="197" width="8.4655%" height="15" fill="rgb(249,31,29)"/><text x="11.7497%" y="207.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (855,437 samples, 0.62%)</title><rect x="19.9652%" y="197" width="0.6247%" height="15" fill="rgb(225,111,53)"/><text x="20.2152%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (653,146 samples, 0.48%)</title><rect x="20.5899%" y="197" width="0.4770%" height="15" fill="rgb(238,160,17)"/><text x="20.8399%" y="207.50"></text></g><g><title>normalize_projection_ty (354,746 samples, 0.26%)</title><rect x="20.8079%" y="181" width="0.2591%" height="15" fill="rgb(214,148,48)"/><text x="21.0579%" y="191.50"></text></g><g><title>type_op_normalize_predicate (143,740 samples, 0.10%)</title><rect x="21.0669%" y="197" width="0.1050%" height="15" fill="rgb(232,36,49)"/><text x="21.3169%" y="207.50"></text></g><g><title>type_op_prove_predicate (3,647,285 samples, 2.66%)</title><rect x="21.2324%" y="197" width="2.6637%" height="15" fill="rgb(209,103,24)"/><text x="21.4824%" y="207.50">ty..</text></g><g><title>evaluate_obligation (273,812 samples, 0.20%)</title><rect x="23.6961%" y="181" width="0.2000%" height="15" fill="rgb(229,88,8)"/><text x="23.9461%" y="191.50"></text></g><g><title>MIR_borrow_checking (31,898,163 samples, 23.30%)</title><rect x="0.6097%" y="229" width="23.2957%" height="15" fill="rgb(213,181,19)"/><text x="0.8597%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,744,013 samples, 23.18%)</title><rect x="0.7223%" y="213" width="23.1831%" height="15" fill="rgb(254,191,54)"/><text x="0.9723%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (372,304 samples, 0.27%)</title><rect x="23.9054%" y="229" width="0.2719%" height="15" fill="rgb(241,83,37)"/><text x="24.1554%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (168,312 samples, 0.12%)</title><rect x="24.0543%" y="213" width="0.1229%" height="15" fill="rgb(233,36,39)"/><text x="24.3043%" y="223.50"></text></g><g><title>hir_module_items (206,742 samples, 0.15%)</title><rect x="24.1773%" y="229" width="0.1510%" height="15" fill="rgb(226,3,54)"/><text x="24.4273%" y="239.50"></text></g><g><title>should_inherit_track_caller (200,382 samples, 0.15%)</title><rect x="24.6338%" y="181" width="0.1463%" height="15" fill="rgb(245,192,40)"/><text x="24.8838%" y="191.50"></text></g><g><title>codegen_fn_attrs (383,615 samples, 0.28%)</title><rect x="24.5152%" y="197" width="0.2802%" height="15" fill="rgb(238,167,29)"/><text x="24.7652%" y="207.50"></text></g><g><title>check_mod_attrs (611,538 samples, 0.45%)</title><rect x="24.3488%" y="213" width="0.4466%" height="15" fill="rgb(232,182,51)"/><text x="24.5988%" y="223.50"></text></g><g><title>lookup_deprecation_entry (157,761 samples, 0.12%)</title><rect x="25.0905%" y="197" width="0.1152%" height="15" fill="rgb(231,60,39)"/><text x="25.3405%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (453,415 samples, 0.33%)</title><rect x="24.9461%" y="213" width="0.3311%" height="15" fill="rgb(208,69,12)"/><text x="25.1961%" y="223.50"></text></g><g><title>misc_checking_1 (1,372,195 samples, 1.00%)</title><rect x="24.3286%" y="229" width="1.0021%" height="15" fill="rgb(235,93,37)"/><text x="24.5786%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (997,871 samples, 0.73%)</title><rect x="25.3318%" y="213" width="0.7288%" height="15" fill="rgb(213,116,39)"/><text x="25.5818%" y="223.50"></text></g><g><title>check_mod_liveness (893,439 samples, 0.65%)</title><rect x="25.4081%" y="197" width="0.6525%" height="15" fill="rgb(222,207,29)"/><text x="25.6581%" y="207.50"></text></g><g><title>type_uninhabited_from (574,695 samples, 0.42%)</title><rect x="25.6409%" y="181" width="0.4197%" height="15" fill="rgb(206,96,30)"/><text x="25.8909%" y="191.50"></text></g><g><title>type_uninhabited_from (515,155 samples, 0.38%)</title><rect x="25.6844%" y="165" width="0.3762%" height="15" fill="rgb(218,138,4)"/><text x="25.9344%" y="175.50"></text></g><g><title>type_uninhabited_from (238,283 samples, 0.17%)</title><rect x="25.8866%" y="149" width="0.1740%" height="15" fill="rgb(250,191,14)"/><text x="26.1366%" y="159.50"></text></g><g><title>type_uninhabited_from (200,113 samples, 0.15%)</title><rect x="25.9144%" y="133" width="0.1461%" height="15" fill="rgb(239,60,40)"/><text x="26.1644%" y="143.50"></text></g><g><title>type_uninhabited_from (159,393 samples, 0.12%)</title><rect x="25.9442%" y="117" width="0.1164%" height="15" fill="rgb(206,27,48)"/><text x="26.1942%" y="127.50"></text></g><g><title>param_env (174,933 samples, 0.13%)</title><rect x="26.4373%" y="181" width="0.1278%" height="15" fill="rgb(225,35,8)"/><text x="26.6873%" y="191.50"></text></g><g><title>misc_checking_2 (1,691,609 samples, 1.24%)</title><rect x="25.3307%" y="229" width="1.2354%" height="15" fill="rgb(250,213,24)"/><text x="25.5807%" y="239.50"></text></g><g><title>match_checking (692,178 samples, 0.51%)</title><rect x="26.0606%" y="213" width="0.5055%" height="15" fill="rgb(247,123,22)"/><text x="26.3106%" y="223.50"></text></g><g><title>check_match (653,508 samples, 0.48%)</title><rect x="26.0888%" y="197" width="0.4773%" height="15" fill="rgb(231,138,38)"/><text x="26.3388%" y="207.50"></text></g><g><title>check_private_in_public (248,382 samples, 0.18%)</title><rect x="26.5732%" y="213" width="0.1814%" height="15" fill="rgb(231,145,46)"/><text x="26.8232%" y="223.50"></text></g><g><title>death_checking (508,046 samples, 0.37%)</title><rect x="26.7546%" y="213" width="0.3710%" height="15" fill="rgb(251,118,11)"/><text x="27.0046%" y="223.50"></text></g><g><title>fn_abi_of_instance (155,020 samples, 0.11%)</title><rect x="28.0099%" y="149" width="0.1132%" height="15" fill="rgb(217,147,25)"/><text x="28.2599%" y="159.50"></text></g><g><title>eval_to_allocation_raw (589,147 samples, 0.43%)</title><rect x="27.8295%" y="181" width="0.4303%" height="15" fill="rgb(247,81,37)"/><text x="28.0795%" y="191.50"></text></g><g><title>eval_to_allocation_raw (582,337 samples, 0.43%)</title><rect x="27.8345%" y="165" width="0.4253%" height="15" fill="rgb(209,12,38)"/><text x="28.0845%" y="175.50"></text></g><g><title>eval_to_const_value_raw (179,741 samples, 0.13%)</title><rect x="28.2598%" y="181" width="0.1313%" height="15" fill="rgb(227,1,9)"/><text x="28.5098%" y="191.50"></text></g><g><title>eval_to_const_value_raw (176,931 samples, 0.13%)</title><rect x="28.2618%" y="165" width="0.1292%" height="15" fill="rgb(248,47,43)"/><text x="28.5118%" y="175.50"></text></g><g><title>eval_to_allocation_raw (172,331 samples, 0.13%)</title><rect x="28.2652%" y="149" width="0.1259%" height="15" fill="rgb(221,10,30)"/><text x="28.5152%" y="159.50"></text></g><g><title>param_env (493,895 samples, 0.36%)</title><rect x="28.3910%" y="181" width="0.3607%" height="15" fill="rgb(210,229,1)"/><text x="28.6410%" y="191.50"></text></g><g><title>predicates_of (217,172 samples, 0.16%)</title><rect x="28.5931%" y="165" width="0.1586%" height="15" fill="rgb(222,148,37)"/><text x="28.8431%" y="175.50"></text></g><g><title>predicates_defined_on (174,451 samples, 0.13%)</title><rect x="28.6243%" y="149" width="0.1274%" height="15" fill="rgb(234,67,33)"/><text x="28.8743%" y="159.50"></text></g><g><title>resolve_instance (167,791 samples, 0.12%)</title><rect x="28.7517%" y="181" width="0.1225%" height="15" fill="rgb(247,98,35)"/><text x="29.0017%" y="191.50"></text></g><g><title>crate_lints (3,685,881 samples, 2.69%)</title><rect x="27.1274%" y="197" width="2.6918%" height="15" fill="rgb(247,138,52)"/><text x="27.3774%" y="207.50">cr..</text></g><g><title>type_of (1,283,982 samples, 0.94%)</title><rect x="28.8816%" y="181" width="0.9377%" height="15" fill="rgb(213,79,30)"/><text x="29.1316%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,001,650 samples, 0.73%)</title><rect x="29.0877%" y="165" width="0.7315%" height="15" fill="rgb(246,177,23)"/><text x="29.3377%" y="175.50"></text></g><g><title>lint_checking (4,179,806 samples, 3.05%)</title><rect x="27.1256%" y="213" width="3.0526%" height="15" fill="rgb(230,62,27)"/><text x="27.3756%" y="223.50">lin..</text></g><g><title>module_lints (491,495 samples, 0.36%)</title><rect x="29.8193%" y="197" width="0.3589%" height="15" fill="rgb(216,154,8)"/><text x="30.0693%" y="207.50"></text></g><g><title>lint_mod (483,125 samples, 0.35%)</title><rect x="29.8254%" y="181" width="0.3528%" height="15" fill="rgb(244,35,45)"/><text x="30.0754%" y="191.50"></text></g><g><title>privacy_access_levels (252,533 samples, 0.18%)</title><rect x="30.1782%" y="213" width="0.1844%" height="15" fill="rgb(251,115,12)"/><text x="30.4282%" y="223.50"></text></g><g><title>privacy_checking_modules (978,951 samples, 0.71%)</title><rect x="30.3626%" y="213" width="0.7149%" height="15" fill="rgb(240,54,50)"/><text x="30.6126%" y="223.50"></text></g><g><title>check_mod_privacy (972,501 samples, 0.71%)</title><rect x="30.3673%" y="197" width="0.7102%" height="15" fill="rgb(233,84,52)"/><text x="30.6173%" y="207.50"></text></g><g><title>misc_checking_3 (6,192,818 samples, 4.52%)</title><rect x="26.5661%" y="229" width="4.5227%" height="15" fill="rgb(207,117,47)"/><text x="26.8161%" y="239.50">misc_..</text></g><g><title>impl_parent (1,797,986 samples, 1.31%)</title><rect x="33.0649%" y="165" width="1.3131%" height="15" fill="rgb(249,43,39)"/><text x="33.3149%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,141,269 samples, 0.83%)</title><rect x="33.5445%" y="149" width="0.8335%" height="15" fill="rgb(209,38,44)"/><text x="33.7945%" y="159.50"></text></g><g><title>impl_trait_ref (4,917,680 samples, 3.59%)</title><rect x="34.3780%" y="165" width="3.5914%" height="15" fill="rgb(236,212,23)"/><text x="34.6280%" y="175.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,026,371 samples, 2.94%)</title><rect x="35.0289%" y="149" width="2.9405%" height="15" fill="rgb(242,79,21)"/><text x="35.2789%" y="159.50">me..</text></g><g><title>trait_impls_of (526,805 samples, 0.38%)</title><rect x="37.9878%" y="165" width="0.3847%" height="15" fill="rgb(211,96,35)"/><text x="38.2378%" y="175.50"></text></g><g><title>implementations_of_trait (149,730 samples, 0.11%)</title><rect x="38.2632%" y="149" width="0.1093%" height="15" fill="rgb(253,215,40)"/><text x="38.5132%" y="159.50"></text></g><g><title>coherent_trait (9,860,939 samples, 7.20%)</title><rect x="31.1715%" y="197" width="7.2016%" height="15" fill="rgb(211,81,21)"/><text x="31.4215%" y="207.50">coherent_t..</text></g><g><title>specialization_graph_of (9,848,919 samples, 7.19%)</title><rect x="31.1803%" y="181" width="7.1928%" height="15" fill="rgb(208,190,38)"/><text x="31.4303%" y="191.50">specializa..</text></g><g><title>coherence_checking (9,943,140 samples, 7.26%)</title><rect x="31.1563%" y="213" width="7.2616%" height="15" fill="rgb(235,213,38)"/><text x="31.4063%" y="223.50">coherence_..</text></g><g><title>associated_item (337,144 samples, 0.25%)</title><rect x="49.4020%" y="149" width="0.2462%" height="15" fill="rgb(237,122,38)"/><text x="49.6520%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (265,533 samples, 0.19%)</title><rect x="49.4543%" y="133" width="0.1939%" height="15" fill="rgb(244,218,35)"/><text x="49.7043%" y="143.50"></text></g><g><title>associated_items (509,316 samples, 0.37%)</title><rect x="49.3025%" y="165" width="0.3720%" height="15" fill="rgb(240,68,47)"/><text x="49.5525%" y="175.50"></text></g><g><title>adt_dtorck_constraint (245,914 samples, 0.18%)</title><rect x="50.0412%" y="149" width="0.1796%" height="15" fill="rgb(210,16,53)"/><text x="50.2912%" y="159.50"></text></g><g><title>dropck_outlives (740,559 samples, 0.54%)</title><rect x="49.7148%" y="165" width="0.5408%" height="15" fill="rgb(235,124,12)"/><text x="49.9648%" y="175.50"></text></g><g><title>evaluate_obligation (1,652,647 samples, 1.21%)</title><rect x="50.2557%" y="165" width="1.2070%" height="15" fill="rgb(224,169,11)"/><text x="50.5057%" y="175.50"></text></g><g><title>trait_impls_of (388,064 samples, 0.28%)</title><rect x="51.1792%" y="149" width="0.2834%" height="15" fill="rgb(250,166,2)"/><text x="51.4292%" y="159.50"></text></g><g><title>implementations_of_trait (144,002 samples, 0.11%)</title><rect x="51.3575%" y="133" width="0.1052%" height="15" fill="rgb(242,216,29)"/><text x="51.6075%" y="143.50"></text></g><g><title>fn_sig (154,571 samples, 0.11%)</title><rect x="51.4852%" y="165" width="0.1129%" height="15" fill="rgb(230,116,27)"/><text x="51.7352%" y="175.50"></text></g><g><title>item_attrs (223,741 samples, 0.16%)</title><rect x="51.7702%" y="165" width="0.1634%" height="15" fill="rgb(228,99,48)"/><text x="52.0202%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (215,231 samples, 0.16%)</title><rect x="51.7764%" y="149" width="0.1572%" height="15" fill="rgb(253,11,6)"/><text x="52.0264%" y="159.50"></text></g><g><title>method_autoderef_steps (449,593 samples, 0.33%)</title><rect x="52.0081%" y="165" width="0.3283%" height="15" fill="rgb(247,143,39)"/><text x="52.2581%" y="175.50"></text></g><g><title>evaluate_obligation (220,690 samples, 0.16%)</title><rect x="52.1752%" y="149" width="0.1612%" height="15" fill="rgb(236,97,10)"/><text x="52.4252%" y="159.50"></text></g><g><title>predicates_of (383,962 samples, 0.28%)</title><rect x="52.4373%" y="165" width="0.2804%" height="15" fill="rgb(233,208,19)"/><text x="52.6873%" y="175.50"></text></g><g><title>predicates_defined_on (255,282 samples, 0.19%)</title><rect x="52.5313%" y="149" width="0.1864%" height="15" fill="rgb(216,164,2)"/><text x="52.7813%" y="159.50"></text></g><g><title>associated_item (276,193 samples, 0.20%)</title><rect x="59.7356%" y="133" width="0.2017%" height="15" fill="rgb(220,129,5)"/><text x="59.9856%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (219,772 samples, 0.16%)</title><rect x="59.7768%" y="117" width="0.1605%" height="15" fill="rgb(242,17,10)"/><text x="60.0268%" y="127.50"></text></g><g><title>associated_items (391,954 samples, 0.29%)</title><rect x="59.6639%" y="149" width="0.2862%" height="15" fill="rgb(242,107,0)"/><text x="59.9139%" y="159.50"></text></g><g><title>adt_def (312,655 samples, 0.23%)</title><rect x="60.7397%" y="117" width="0.2283%" height="15" fill="rgb(251,28,31)"/><text x="60.9897%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (302,345 samples, 0.22%)</title><rect x="60.7472%" y="101" width="0.2208%" height="15" fill="rgb(233,223,10)"/><text x="60.9972%" y="111.50"></text></g><g><title>item_attrs (160,841 samples, 0.12%)</title><rect x="60.8506%" y="85" width="0.1175%" height="15" fill="rgb(215,21,27)"/><text x="61.1006%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (150,601 samples, 0.11%)</title><rect x="60.8581%" y="69" width="0.1100%" height="15" fill="rgb(232,23,21)"/><text x="61.1081%" y="79.50"></text></g><g><title>adt_def (200,742 samples, 0.15%)</title><rect x="61.1020%" y="101" width="0.1466%" height="15" fill="rgb(244,5,23)"/><text x="61.3520%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (195,062 samples, 0.14%)</title><rect x="61.1061%" y="85" width="0.1425%" height="15" fill="rgb(226,81,46)"/><text x="61.3561%" y="95.50"></text></g><g><title>adt_def (297,644 samples, 0.22%)</title><rect x="61.3198%" y="85" width="0.2174%" height="15" fill="rgb(247,70,30)"/><text x="61.5698%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (294,344 samples, 0.21%)</title><rect x="61.3222%" y="69" width="0.2150%" height="15" fill="rgb(212,68,19)"/><text x="61.5722%" y="79.50"></text></g><g><title>item_attrs (154,933 samples, 0.11%)</title><rect x="61.4240%" y="53" width="0.1131%" height="15" fill="rgb(240,187,13)"/><text x="61.6740%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (151,333 samples, 0.11%)</title><rect x="61.4267%" y="37" width="0.1105%" height="15" fill="rgb(223,113,26)"/><text x="61.6767%" y="47.50"></text></g><g><title>adt_dtorck_constraint (150,313 samples, 0.11%)</title><rect x="61.5532%" y="85" width="0.1098%" height="15" fill="rgb(206,192,2)"/><text x="61.8032%" y="95.50"></text></g><g><title>adt_dtorck_constraint (545,998 samples, 0.40%)</title><rect x="61.2878%" y="101" width="0.3987%" height="15" fill="rgb(241,108,4)"/><text x="61.5378%" y="111.50"></text></g><g><title>adt_dtorck_constraint (987,852 samples, 0.72%)</title><rect x="61.0352%" y="117" width="0.7214%" height="15" fill="rgb(247,173,49)"/><text x="61.2852%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,797,930 samples, 1.31%)</title><rect x="60.5920%" y="133" width="1.3131%" height="15" fill="rgb(224,114,35)"/><text x="60.8420%" y="143.50"></text></g><g><title>type_of (144,481 samples, 0.11%)</title><rect x="61.7995%" y="117" width="0.1055%" height="15" fill="rgb(245,159,27)"/><text x="62.0495%" y="127.50"></text></g><g><title>evaluate_obligation (209,312 samples, 0.15%)</title><rect x="62.2503%" y="117" width="0.1529%" height="15" fill="rgb(245,172,44)"/><text x="62.5003%" y="127.50"></text></g><g><title>dropck_outlives (3,492,719 samples, 2.55%)</title><rect x="59.9876%" y="149" width="2.5508%" height="15" fill="rgb(236,23,11)"/><text x="60.2376%" y="159.50">dr..</text></g><g><title>normalize_projection_ty (867,270 samples, 0.63%)</title><rect x="61.9050%" y="133" width="0.6334%" height="15" fill="rgb(205,117,38)"/><text x="62.1550%" y="143.50"></text></g><g><title>adt_def (207,572 samples, 0.15%)</title><rect x="63.5363%" y="117" width="0.1516%" height="15" fill="rgb(237,72,25)"/><text x="63.7863%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (204,242 samples, 0.15%)</title><rect x="63.5387%" y="101" width="0.1492%" height="15" fill="rgb(244,70,9)"/><text x="63.7887%" y="111.50"></text></g><g><title>item_attrs (171,051 samples, 0.12%)</title><rect x="63.5629%" y="85" width="0.1249%" height="15" fill="rgb(217,125,39)"/><text x="63.8129%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (167,781 samples, 0.12%)</title><rect x="63.5653%" y="69" width="0.1225%" height="15" fill="rgb(235,36,10)"/><text x="63.8153%" y="79.50"></text></g><g><title>adt_sized_constraint (288,272 samples, 0.21%)</title><rect x="63.5210%" y="133" width="0.2105%" height="15" fill="rgb(251,123,47)"/><text x="63.7710%" y="143.50"></text></g><g><title>evaluate_obligation (1,996,022 samples, 1.46%)</title><rect x="62.5384%" y="149" width="1.4577%" height="15" fill="rgb(221,13,13)"/><text x="62.7884%" y="159.50"></text></g><g><title>trait_impls_of (165,792 samples, 0.12%)</title><rect x="63.8750%" y="133" width="0.1211%" height="15" fill="rgb(238,131,9)"/><text x="64.1250%" y="143.50"></text></g><g><title>is_copy_raw (726,217 samples, 0.53%)</title><rect x="64.1897%" y="149" width="0.5304%" height="15" fill="rgb(211,50,8)"/><text x="64.4397%" y="159.50"></text></g><g><title>evaluate_obligation (592,755 samples, 0.43%)</title><rect x="64.2872%" y="133" width="0.4329%" height="15" fill="rgb(245,182,24)"/><text x="64.5372%" y="143.50"></text></g><g><title>trait_impls_of (172,012 samples, 0.13%)</title><rect x="64.5945%" y="117" width="0.1256%" height="15" fill="rgb(242,14,37)"/><text x="64.8445%" y="127.50"></text></g><g><title>evaluate_obligation (189,551 samples, 0.14%)</title><rect x="65.0157%" y="133" width="0.1384%" height="15" fill="rgb(246,228,12)"/><text x="65.2657%" y="143.50"></text></g><g><title>method_autoderef_steps (430,423 samples, 0.31%)</title><rect x="64.8454%" y="149" width="0.3143%" height="15" fill="rgb(213,55,15)"/><text x="65.0954%" y="159.50"></text></g><g><title>predicates_of (257,091 samples, 0.19%)</title><rect x="65.1995%" y="149" width="0.1878%" height="15" fill="rgb(209,9,3)"/><text x="65.4495%" y="159.50"></text></g><g><title>predicates_defined_on (184,440 samples, 0.13%)</title><rect x="65.2526%" y="133" width="0.1347%" height="15" fill="rgb(230,59,30)"/><text x="65.5026%" y="143.50"></text></g><g><title>typeck (17,341,823 samples, 12.66%)</title><rect x="52.8138%" y="165" width="12.6650%" height="15" fill="rgb(209,121,21)"/><text x="53.0638%" y="175.50">typeck</text></g><g><title>item_bodies_checking (37,073,560 samples, 27.08%)</title><rect x="38.4405%" y="213" width="27.0753%" height="15" fill="rgb(220,109,13)"/><text x="38.6905%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (37,069,700 samples, 27.07%)</title><rect x="38.4433%" y="197" width="27.0725%" height="15" fill="rgb(232,18,1)"/><text x="38.6933%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (36,979,309 samples, 27.01%)</title><rect x="38.5093%" y="181" width="27.0065%" height="15" fill="rgb(215,41,42)"/><text x="38.7593%" y="191.50">typeck</text></g><g><title>impl_item_implementor_ids (253,462 samples, 0.19%)</title><rect x="66.1760%" y="181" width="0.1851%" height="15" fill="rgb(224,123,36)"/><text x="66.4260%" y="191.50"></text></g><g><title>layout_of (148,421 samples, 0.11%)</title><rect x="66.4515%" y="85" width="0.1084%" height="15" fill="rgb(240,125,3)"/><text x="66.7015%" y="95.50"></text></g><g><title>layout_of (174,791 samples, 0.13%)</title><rect x="66.4357%" y="101" width="0.1277%" height="15" fill="rgb(205,98,50)"/><text x="66.6857%" y="111.50"></text></g><g><title>layout_of (204,362 samples, 0.15%)</title><rect x="66.4158%" y="149" width="0.1492%" height="15" fill="rgb(205,185,37)"/><text x="66.6658%" y="159.50"></text></g><g><title>layout_of (194,292 samples, 0.14%)</title><rect x="66.4232%" y="133" width="0.1419%" height="15" fill="rgb(238,207,15)"/><text x="66.6732%" y="143.50"></text></g><g><title>layout_of (184,492 samples, 0.13%)</title><rect x="66.4303%" y="117" width="0.1347%" height="15" fill="rgb(213,199,42)"/><text x="66.6803%" y="127.50"></text></g><g><title>layout_of (261,042 samples, 0.19%)</title><rect x="66.3832%" y="165" width="0.1906%" height="15" fill="rgb(235,201,11)"/><text x="66.6332%" y="175.50"></text></g><g><title>layout_of (298,253 samples, 0.22%)</title><rect x="66.3611%" y="181" width="0.2178%" height="15" fill="rgb(207,46,11)"/><text x="66.6111%" y="191.50"></text></g><g><title>adt_def (152,994 samples, 0.11%)</title><rect x="67.3553%" y="133" width="0.1117%" height="15" fill="rgb(241,35,35)"/><text x="67.6053%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (151,004 samples, 0.11%)</title><rect x="67.3567%" y="117" width="0.1103%" height="15" fill="rgb(243,32,47)"/><text x="67.6067%" y="127.50"></text></g><g><title>adt_def (409,395 samples, 0.30%)</title><rect x="67.5054%" y="117" width="0.2990%" height="15" fill="rgb(247,202,23)"/><text x="67.7554%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (407,435 samples, 0.30%)</title><rect x="67.5069%" y="101" width="0.2976%" height="15" fill="rgb(219,102,11)"/><text x="67.7569%" y="111.50"></text></g><g><title>item_attrs (382,654 samples, 0.28%)</title><rect x="67.5250%" y="85" width="0.2795%" height="15" fill="rgb(243,110,44)"/><text x="67.7750%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (380,404 samples, 0.28%)</title><rect x="67.5266%" y="69" width="0.2778%" height="15" fill="rgb(222,74,54)"/><text x="67.7766%" y="79.50"></text></g><g><title>impl_trait_ref (236,014 samples, 0.17%)</title><rect x="68.1068%" y="53" width="0.1724%" height="15" fill="rgb(216,99,12)"/><text x="68.3568%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (200,962 samples, 0.15%)</title><rect x="68.1324%" y="37" width="0.1468%" height="15" fill="rgb(226,22,26)"/><text x="68.3824%" y="47.50"></text></g><g><title>coherent_trait (680,718 samples, 0.50%)</title><rect x="67.8131%" y="85" width="0.4971%" height="15" fill="rgb(217,163,10)"/><text x="68.0631%" y="95.50"></text></g><g><title>specialization_graph_of (678,168 samples, 0.50%)</title><rect x="67.8149%" y="69" width="0.4953%" height="15" fill="rgb(213,25,53)"/><text x="68.0649%" y="79.50"></text></g><g><title>adt_destructor (697,088 samples, 0.51%)</title><rect x="67.8044%" y="117" width="0.5091%" height="15" fill="rgb(252,105,26)"/><text x="68.0544%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (694,158 samples, 0.51%)</title><rect x="67.8066%" y="101" width="0.5070%" height="15" fill="rgb(220,39,43)"/><text x="68.0566%" y="111.50"></text></g><g><title>adt_dtorck_constraint (200,201 samples, 0.15%)</title><rect x="68.3135%" y="117" width="0.1462%" height="15" fill="rgb(229,68,48)"/><text x="68.5635%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,368,285 samples, 1.00%)</title><rect x="67.4826%" y="133" width="0.9993%" height="15" fill="rgb(252,8,32)"/><text x="67.7326%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,655,120 samples, 1.21%)</title><rect x="67.3072%" y="149" width="1.2088%" height="15" fill="rgb(223,20,43)"/><text x="67.5572%" y="159.50"></text></g><g><title>dropck_outlives (1,789,671 samples, 1.31%)</title><rect x="67.2589%" y="165" width="1.3070%" height="15" fill="rgb(229,81,49)"/><text x="67.5089%" y="175.50"></text></g><g><title>typeck (2,770,901 samples, 2.02%)</title><rect x="66.6565%" y="181" width="2.0236%" height="15" fill="rgb(236,28,36)"/><text x="66.9065%" y="191.50">t..</text></g><g><title>item_types_checking (4,334,208 samples, 3.17%)</title><rect x="65.5158%" y="213" width="3.1653%" height="15" fill="rgb(249,185,26)"/><text x="65.7658%" y="223.50">ite..</text></g><g><title>check_mod_item_types (4,325,128 samples, 3.16%)</title><rect x="65.5224%" y="197" width="3.1587%" height="15" fill="rgb(249,174,33)"/><text x="65.7724%" y="207.50">che..</text></g><g><title>late_bound_vars_map (165,971 samples, 0.12%)</title><rect x="69.0402%" y="165" width="0.1212%" height="15" fill="rgb(233,201,37)"/><text x="69.2902%" y="175.50"></text></g><g><title>resolve_lifetimes (150,441 samples, 0.11%)</title><rect x="69.0516%" y="149" width="0.1099%" height="15" fill="rgb(221,78,26)"/><text x="69.3016%" y="159.50"></text></g><g><title>fn_sig (455,864 samples, 0.33%)</title><rect x="68.8824%" y="181" width="0.3329%" height="15" fill="rgb(250,127,30)"/><text x="69.1324%" y="191.50"></text></g><g><title>named_region_map (370,374 samples, 0.27%)</title><rect x="69.3103%" y="165" width="0.2705%" height="15" fill="rgb(230,49,44)"/><text x="69.5603%" y="175.50"></text></g><g><title>resolve_lifetimes (353,464 samples, 0.26%)</title><rect x="69.3227%" y="149" width="0.2581%" height="15" fill="rgb(229,67,23)"/><text x="69.5727%" y="159.50"></text></g><g><title>lint_levels (156,882 samples, 0.11%)</title><rect x="69.4662%" y="133" width="0.1146%" height="15" fill="rgb(249,83,47)"/><text x="69.7162%" y="143.50"></text></g><g><title>generics_of (515,118 samples, 0.38%)</title><rect x="69.2153%" y="181" width="0.3762%" height="15" fill="rgb(215,43,3)"/><text x="69.4653%" y="191.50"></text></g><g><title>explicit_predicates_of (422,354 samples, 0.31%)</title><rect x="69.6974%" y="149" width="0.3085%" height="15" fill="rgb(238,154,13)"/><text x="69.9474%" y="159.50"></text></g><g><title>predicates_of (957,209 samples, 0.70%)</title><rect x="69.6073%" y="181" width="0.6991%" height="15" fill="rgb(219,56,2)"/><text x="69.8573%" y="191.50"></text></g><g><title>predicates_defined_on (908,149 samples, 0.66%)</title><rect x="69.6431%" y="165" width="0.6632%" height="15" fill="rgb(233,0,4)"/><text x="69.8931%" y="175.50"></text></g><g><title>inferred_outlives_of (411,425 samples, 0.30%)</title><rect x="70.0059%" y="149" width="0.3005%" height="15" fill="rgb(235,30,7)"/><text x="70.2559%" y="159.50"></text></g><g><title>inferred_outlives_crate (390,555 samples, 0.29%)</title><rect x="70.0211%" y="133" width="0.2852%" height="15" fill="rgb(250,79,13)"/><text x="70.2711%" y="143.50"></text></g><g><title>type_of (250,903 samples, 0.18%)</title><rect x="70.1231%" y="117" width="0.1832%" height="15" fill="rgb(211,146,34)"/><text x="70.3731%" y="127.50"></text></g><g><title>type_collecting (2,382,247 samples, 1.74%)</title><rect x="68.6846%" y="213" width="1.7398%" height="15" fill="rgb(228,22,38)"/><text x="68.9346%" y="223.50"></text></g><g><title>collect_mod_item_types (2,370,027 samples, 1.73%)</title><rect x="68.6936%" y="197" width="1.7309%" height="15" fill="rgb(235,168,5)"/><text x="68.9436%" y="207.50"></text></g><g><title>type_of (140,663 samples, 0.10%)</title><rect x="70.3217%" y="181" width="0.1027%" height="15" fill="rgb(221,155,16)"/><text x="70.5717%" y="191.50"></text></g><g><title>evaluate_obligation (850,213 samples, 0.62%)</title><rect x="71.8410%" y="181" width="0.6209%" height="15" fill="rgb(215,215,53)"/><text x="72.0910%" y="191.50"></text></g><g><title>implied_outlives_bounds (264,053 samples, 0.19%)</title><rect x="72.4735%" y="181" width="0.1928%" height="15" fill="rgb(223,4,10)"/><text x="72.7235%" y="191.50"></text></g><g><title>param_env (251,196 samples, 0.18%)</title><rect x="72.7496%" y="181" width="0.1835%" height="15" fill="rgb(234,103,6)"/><text x="72.9996%" y="191.50"></text></g><g><title>region_scope_tree (356,344 samples, 0.26%)</title><rect x="72.9663%" y="181" width="0.2602%" height="15" fill="rgb(227,97,0)"/><text x="73.2163%" y="191.50"></text></g><g><title>check_impl_item_well_formed (3,745,512 samples, 2.74%)</title><rect x="70.5767%" y="197" width="2.7354%" height="15" fill="rgb(234,150,53)"/><text x="70.8267%" y="207.50">ch..</text></g><g><title>adt_def (274,205 samples, 0.20%)</title><rect x="74.3162%" y="149" width="0.2003%" height="15" fill="rgb(228,201,54)"/><text x="74.5662%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (269,265 samples, 0.20%)</title><rect x="74.3198%" y="133" width="0.1966%" height="15" fill="rgb(222,22,37)"/><text x="74.5698%" y="143.50"></text></g><g><title>item_attrs (219,335 samples, 0.16%)</title><rect x="74.3562%" y="117" width="0.1602%" height="15" fill="rgb(237,53,32)"/><text x="74.6062%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (214,835 samples, 0.16%)</title><rect x="74.3595%" y="101" width="0.1569%" height="15" fill="rgb(233,25,53)"/><text x="74.6095%" y="111.50"></text></g><g><title>adt_sized_constraint (453,067 samples, 0.33%)</title><rect x="74.2982%" y="165" width="0.3309%" height="15" fill="rgb(210,40,34)"/><text x="74.5482%" y="175.50"></text></g><g><title>evaluate_obligation (1,032,843 samples, 0.75%)</title><rect x="73.9768%" y="181" width="0.7543%" height="15" fill="rgb(241,220,44)"/><text x="74.2268%" y="191.50"></text></g><g><title>layout_of (142,832 samples, 0.10%)</title><rect x="74.9540%" y="165" width="0.1043%" height="15" fill="rgb(235,28,35)"/><text x="75.2040%" y="175.50"></text></g><g><title>object_safety_violations (368,474 samples, 0.27%)</title><rect x="74.8007%" y="181" width="0.2691%" height="15" fill="rgb(210,56,17)"/><text x="75.0507%" y="191.50"></text></g><g><title>param_env (220,715 samples, 0.16%)</title><rect x="75.0698%" y="181" width="0.1612%" height="15" fill="rgb(224,130,29)"/><text x="75.3198%" y="191.50"></text></g><g><title>check_item_well_formed (2,889,573 samples, 2.11%)</title><rect x="73.3120%" y="197" width="2.1103%" height="15" fill="rgb(235,212,8)"/><text x="73.5620%" y="207.50">c..</text></g><g><title>analysis (102,948,429 samples, 75.18%)</title><rect x="0.3928%" y="245" width="75.1847%" height="15" fill="rgb(223,33,50)"/><text x="0.6428%" y="255.50">analysis</text></g><g><title>type_check_crate (60,917,224 samples, 44.49%)</title><rect x="31.0888%" y="229" width="44.4887%" height="15" fill="rgb(219,149,13)"/><text x="31.3388%" y="239.50">type_check_crate</text></g><g><title>wf_checking (7,049,328 samples, 5.15%)</title><rect x="70.4293%" y="213" width="5.1482%" height="15" fill="rgb(250,156,29)"/><text x="70.6793%" y="223.50">wf_che..</text></g><g><title>check_trait_item_well_formed (212,432 samples, 0.16%)</title><rect x="75.4223%" y="197" width="0.1551%" height="15" fill="rgb(216,193,19)"/><text x="75.6723%" y="207.50"></text></g><g><title>codegen_crate (449,355 samples, 0.33%)</title><rect x="75.5822%" y="245" width="0.3282%" height="15" fill="rgb(216,135,14)"/><text x="75.8322%" y="255.50"></text></g><g><title>AST_validation (185,042 samples, 0.14%)</title><rect x="76.0126%" y="229" width="0.1351%" height="15" fill="rgb(241,47,5)"/><text x="76.2626%" y="239.50"></text></g><g><title>metadata_load_macro (276,111 samples, 0.20%)</title><rect x="85.0392%" y="197" width="0.2016%" height="15" fill="rgb(233,42,35)"/><text x="85.2892%" y="207.50"></text></g><g><title>metadata_register_crate (5,760,003 samples, 4.21%)</title><rect x="85.2408%" y="197" width="4.2066%" height="15" fill="rgb(231,13,6)"/><text x="85.4908%" y="207.50">metad..</text></g><g><title>metadata_register_crate (821,169 samples, 0.60%)</title><rect x="88.8477%" y="181" width="0.5997%" height="15" fill="rgb(207,181,40)"/><text x="89.0977%" y="191.50"></text></g><g><title>metadata_register_crate (213,581 samples, 0.16%)</title><rect x="89.2914%" y="165" width="0.1560%" height="15" fill="rgb(254,173,49)"/><text x="89.5414%" y="175.50"></text></g><g><title>macro_expand_crate (18,224,721 samples, 13.31%)</title><rect x="76.2413%" y="229" width="13.3098%" height="15" fill="rgb(221,1,38)"/><text x="76.4913%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (18,214,281 samples, 13.30%)</title><rect x="76.2489%" y="213" width="13.3021%" height="15" fill="rgb(206,124,46)"/><text x="76.4989%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (141,852 samples, 0.10%)</title><rect x="89.4474%" y="197" width="0.1036%" height="15" fill="rgb(249,21,11)"/><text x="89.6974%" y="207.50"></text></g><g><title>late_resolve_crate (1,959,332 samples, 1.43%)</title><rect x="89.7830%" y="213" width="1.4309%" height="15" fill="rgb(222,201,40)"/><text x="90.0330%" y="223.50"></text></g><g><title>configure_and_expand (21,072,133 samples, 15.39%)</title><rect x="75.9104%" y="245" width="15.3893%" height="15" fill="rgb(235,61,29)"/><text x="76.1604%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,285,106 samples, 1.67%)</title><rect x="89.6308%" y="229" width="1.6688%" height="15" fill="rgb(219,207,3)"/><text x="89.8808%" y="239.50"></text></g><g><title>drop_ast (194,792 samples, 0.14%)</title><rect x="91.2996%" y="245" width="0.1423%" height="15" fill="rgb(222,56,46)"/><text x="91.5496%" y="255.50"></text></g><g><title>early_lint_checks (384,625 samples, 0.28%)</title><rect x="91.4561%" y="245" width="0.2809%" height="15" fill="rgb(239,76,54)"/><text x="91.7061%" y="255.50"></text></g><g><title>free_global_ctxt (4,108,025 samples, 3.00%)</title><rect x="91.7370%" y="245" width="3.0001%" height="15" fill="rgb(231,124,27)"/><text x="91.9870%" y="255.50">fre..</text></g><g><title>mir_drops_elaborated_and_const_checked (190,383 samples, 0.14%)</title><rect x="95.9303%" y="213" width="0.1390%" height="15" fill="rgb(249,195,6)"/><text x="96.1803%" y="223.50"></text></g><g><title>optimized_mir (496,615 samples, 0.36%)</title><rect x="95.7069%" y="229" width="0.3627%" height="15" fill="rgb(237,174,47)"/><text x="95.9569%" y="239.50"></text></g><g><title>generate_crate_metadata (1,857,531 samples, 1.36%)</title><rect x="94.7371%" y="245" width="1.3566%" height="15" fill="rgb(206,201,31)"/><text x="94.9871%" y="255.50"></text></g><g><title>hir_lowering (2,834,991 samples, 2.07%)</title><rect x="96.0937%" y="245" width="2.0704%" height="15" fill="rgb(231,57,52)"/><text x="96.3437%" y="255.50">h..</text></g><g><title>link (258,973 samples, 0.19%)</title><rect x="98.1641%" y="245" width="0.1891%" height="15" fill="rgb(248,177,22)"/><text x="98.4141%" y="255.50"></text></g><g><title>parse_crate (691,377 samples, 0.50%)</title><rect x="98.3533%" y="245" width="0.5049%" height="15" fill="rgb(215,211,37)"/><text x="98.6033%" y="255.50"></text></g><g><title>prepare_outputs (205,502 samples, 0.15%)</title><rect x="98.8626%" y="245" width="0.1501%" height="15" fill="rgb(241,128,51)"/><text x="99.1126%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (905,240 samples, 0.66%)</title><rect x="99.0127%" y="245" width="0.6611%" height="15" fill="rgb(227,165,31)"/><text x="99.2627%" y="255.50"></text></g><g><title>all (136,927,434 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(228,167,24)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (136,927,434 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(228,143,12)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (346,734 samples, 0.25%)</title><rect x="99.7468%" y="245" width="0.2532%" height="15" fill="rgb(249,149,8)"/><text x="99.9968%" y="255.50"></text></g></svg></svg>