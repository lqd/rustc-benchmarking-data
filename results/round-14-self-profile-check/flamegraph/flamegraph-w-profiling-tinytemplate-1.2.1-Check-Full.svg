<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (446,057 samples, 0.18%)</title><rect x="16.3510%" y="133" width="0.1826%" height="15" fill="rgb(227,0,7)"/><text x="16.6010%" y="143.50"></text></g><g><title>item_attrs (519,270 samples, 0.21%)</title><rect x="17.0288%" y="101" width="0.2126%" height="15" fill="rgb(217,0,24)"/><text x="17.2788%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (502,770 samples, 0.21%)</title><rect x="17.0356%" y="85" width="0.2059%" height="15" fill="rgb(221,193,54)"/><text x="17.2856%" y="95.50"></text></g><g><title>codegen_fn_attrs (715,911 samples, 0.29%)</title><rect x="16.9630%" y="117" width="0.2931%" height="15" fill="rgb(248,212,6)"/><text x="17.2130%" y="127.50"></text></g><g><title>adt_drop_tys (500,556 samples, 0.20%)</title><rect x="20.5094%" y="69" width="0.2050%" height="15" fill="rgb(208,68,35)"/><text x="20.7594%" y="79.50"></text></g><g><title>param_env (275,262 samples, 0.11%)</title><rect x="20.6016%" y="53" width="0.1127%" height="15" fill="rgb(232,128,0)"/><text x="20.8516%" y="63.50"></text></g><g><title>predicates_of (247,912 samples, 0.10%)</title><rect x="20.6128%" y="37" width="0.1015%" height="15" fill="rgb(207,160,47)"/><text x="20.8628%" y="47.50"></text></g><g><title>adt_drop_tys (1,089,983 samples, 0.45%)</title><rect x="20.4753%" y="85" width="0.4463%" height="15" fill="rgb(228,23,34)"/><text x="20.7253%" y="95.50"></text></g><g><title>is_copy_raw (1,585,084 samples, 0.65%)</title><rect x="20.9216%" y="85" width="0.6490%" height="15" fill="rgb(218,30,26)"/><text x="21.1716%" y="95.50"></text></g><g><title>evaluate_obligation (1,332,282 samples, 0.55%)</title><rect x="21.0251%" y="69" width="0.5455%" height="15" fill="rgb(220,122,19)"/><text x="21.2751%" y="79.50"></text></g><g><title>needs_drop_raw (2,984,140 samples, 1.22%)</title><rect x="20.3774%" y="101" width="1.2219%" height="15" fill="rgb(250,228,42)"/><text x="20.6274%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (669,160 samples, 0.27%)</title><rect x="21.7192%" y="85" width="0.2740%" height="15" fill="rgb(240,193,28)"/><text x="21.9692%" y="95.50"></text></g><g><title>specialization_graph_of (1,091,703 samples, 0.45%)</title><rect x="22.0122%" y="85" width="0.4470%" height="15" fill="rgb(216,20,37)"/><text x="22.2622%" y="95.50"></text></g><g><title>impl_trait_ref (537,235 samples, 0.22%)</title><rect x="22.2392%" y="69" width="0.2200%" height="15" fill="rgb(206,188,39)"/><text x="22.4892%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (461,874 samples, 0.19%)</title><rect x="22.2701%" y="53" width="0.1891%" height="15" fill="rgb(217,207,13)"/><text x="22.5201%" y="63.50"></text></g><g><title>resolve_instance (2,211,067 samples, 0.91%)</title><rect x="21.5992%" y="101" width="0.9053%" height="15" fill="rgb(231,73,38)"/><text x="21.8492%" y="111.50"></text></g><g><title>thir_body (2,698,760 samples, 1.11%)</title><rect x="22.5172%" y="101" width="1.1050%" height="15" fill="rgb(225,20,46)"/><text x="22.7672%" y="111.50"></text></g><g><title>mir_const (19,443,157 samples, 7.96%)</title><rect x="15.6721%" y="149" width="7.9610%" height="15" fill="rgb(210,31,41)"/><text x="15.9221%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (17,338,976 samples, 7.10%)</title><rect x="16.5336%" y="133" width="7.0995%" height="15" fill="rgb(221,200,47)"/><text x="16.7836%" y="143.50">unsafety_c..</text></g><g><title>mir_built (15,570,895 samples, 6.38%)</title><rect x="17.2576%" y="117" width="6.3755%" height="15" fill="rgb(226,26,5)"/><text x="17.5076%" y="127.50">mir_built</text></g><g><title>mir_promoted (21,532,374 samples, 8.82%)</title><rect x="14.9165%" y="165" width="8.8165%" height="15" fill="rgb(249,33,26)"/><text x="15.1665%" y="175.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (953,276 samples, 0.39%)</title><rect x="23.7349%" y="165" width="0.3903%" height="15" fill="rgb(235,183,28)"/><text x="23.9849%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,499,296 samples, 0.61%)</title><rect x="24.1252%" y="165" width="0.6139%" height="15" fill="rgb(221,5,38)"/><text x="24.3752%" y="175.50"></text></g><g><title>normalize_projection_ty (974,332 samples, 0.40%)</title><rect x="24.3402%" y="149" width="0.3989%" height="15" fill="rgb(247,18,42)"/><text x="24.5902%" y="159.50"></text></g><g><title>type_op_normalize_predicate (533,845 samples, 0.22%)</title><rect x="24.7391%" y="165" width="0.2186%" height="15" fill="rgb(241,131,45)"/><text x="24.9891%" y="175.50"></text></g><g><title>normalize_projection_ty (320,630 samples, 0.13%)</title><rect x="24.8264%" y="149" width="0.1313%" height="15" fill="rgb(249,31,29)"/><text x="25.0764%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,685,061 samples, 1.92%)</title><rect x="24.9639%" y="165" width="1.9183%" height="15" fill="rgb(225,111,53)"/><text x="25.2139%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (64,388,986 samples, 26.36%)</title><rect x="0.5309%" y="197" width="26.3642%" height="15" fill="rgb(238,160,17)"/><text x="0.7809%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (64,238,105 samples, 26.30%)</title><rect x="0.5927%" y="181" width="26.3024%" height="15" fill="rgb(214,148,48)"/><text x="0.8427%" y="191.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (384,316 samples, 0.16%)</title><rect x="27.2536%" y="165" width="0.1574%" height="15" fill="rgb(232,36,49)"/><text x="27.5036%" y="175.50"></text></g><g><title>check_mod_attrs (833,249 samples, 0.34%)</title><rect x="27.0698%" y="181" width="0.3412%" height="15" fill="rgb(209,103,24)"/><text x="27.3198%" y="191.50"></text></g><g><title>lint_levels (378,805 samples, 0.16%)</title><rect x="27.6430%" y="165" width="0.1551%" height="15" fill="rgb(229,88,8)"/><text x="27.8930%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (922,640 samples, 0.38%)</title><rect x="27.5396%" y="181" width="0.3778%" height="15" fill="rgb(213,181,19)"/><text x="27.7896%" y="191.50"></text></g><g><title>misc_checking_1 (2,155,204 samples, 0.88%)</title><rect x="27.0607%" y="197" width="0.8825%" height="15" fill="rgb(254,191,54)"/><text x="27.3107%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,080,412 samples, 0.44%)</title><rect x="27.9439%" y="181" width="0.4424%" height="15" fill="rgb(241,83,37)"/><text x="28.1939%" y="191.50"></text></g><g><title>check_mod_liveness (868,730 samples, 0.36%)</title><rect x="28.0306%" y="165" width="0.3557%" height="15" fill="rgb(233,36,39)"/><text x="28.2806%" y="175.50"></text></g><g><title>misc_checking_2 (2,898,062 samples, 1.19%)</title><rect x="27.9432%" y="197" width="1.1866%" height="15" fill="rgb(226,3,54)"/><text x="28.1932%" y="207.50"></text></g><g><title>match_checking (1,815,720 samples, 0.74%)</title><rect x="28.3863%" y="181" width="0.7435%" height="15" fill="rgb(245,192,40)"/><text x="28.6363%" y="191.50"></text></g><g><title>check_match (1,775,160 samples, 0.73%)</title><rect x="28.4029%" y="165" width="0.7268%" height="15" fill="rgb(238,167,29)"/><text x="28.6529%" y="175.50"></text></g><g><title>check_private_in_public (318,064 samples, 0.13%)</title><rect x="29.1341%" y="181" width="0.1302%" height="15" fill="rgb(232,182,51)"/><text x="29.3841%" y="191.50"></text></g><g><title>death_checking (648,467 samples, 0.27%)</title><rect x="29.2643%" y="181" width="0.2655%" height="15" fill="rgb(231,60,39)"/><text x="29.5143%" y="191.50"></text></g><g><title>param_env (259,693 samples, 0.11%)</title><rect x="30.1173%" y="149" width="0.1063%" height="15" fill="rgb(208,69,12)"/><text x="30.3673%" y="159.50"></text></g><g><title>crate_lints (2,883,722 samples, 1.18%)</title><rect x="29.5305%" y="165" width="1.1807%" height="15" fill="rgb(235,93,37)"/><text x="29.7805%" y="175.50"></text></g><g><title>type_of (1,171,930 samples, 0.48%)</title><rect x="30.2314%" y="149" width="0.4798%" height="15" fill="rgb(213,116,39)"/><text x="30.4814%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (933,968 samples, 0.38%)</title><rect x="30.3288%" y="133" width="0.3824%" height="15" fill="rgb(222,207,29)"/><text x="30.5788%" y="143.50"></text></g><g><title>lint_checking (4,243,118 samples, 1.74%)</title><rect x="29.5299%" y="181" width="1.7374%" height="15" fill="rgb(206,96,30)"/><text x="29.7799%" y="191.50"></text></g><g><title>module_lints (1,357,835 samples, 0.56%)</title><rect x="30.7112%" y="165" width="0.5560%" height="15" fill="rgb(218,138,4)"/><text x="30.9612%" y="175.50"></text></g><g><title>lint_mod (1,339,215 samples, 0.55%)</title><rect x="30.7189%" y="149" width="0.5483%" height="15" fill="rgb(250,191,14)"/><text x="30.9689%" y="159.50"></text></g><g><title>privacy_access_levels (362,764 samples, 0.15%)</title><rect x="31.2672%" y="181" width="0.1485%" height="15" fill="rgb(239,60,40)"/><text x="31.5172%" y="191.50"></text></g><g><title>privacy_checking_modules (2,019,322 samples, 0.83%)</title><rect x="31.4157%" y="181" width="0.8268%" height="15" fill="rgb(206,27,48)"/><text x="31.6657%" y="191.50"></text></g><g><title>check_mod_privacy (2,014,192 samples, 0.82%)</title><rect x="31.4178%" y="165" width="0.8247%" height="15" fill="rgb(225,35,8)"/><text x="31.6678%" y="175.50"></text></g><g><title>misc_checking_3 (7,620,885 samples, 3.12%)</title><rect x="29.1298%" y="197" width="3.1204%" height="15" fill="rgb(250,213,24)"/><text x="29.3798%" y="207.50">mis..</text></g><g><title>impl_parent (2,400,377 samples, 0.98%)</title><rect x="33.8929%" y="133" width="0.9828%" height="15" fill="rgb(247,123,22)"/><text x="34.1429%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,432,213 samples, 0.59%)</title><rect x="34.2893%" y="117" width="0.5864%" height="15" fill="rgb(231,138,38)"/><text x="34.5393%" y="127.50"></text></g><g><title>impl_trait_ref (5,512,150 samples, 2.26%)</title><rect x="34.8758%" y="133" width="2.2570%" height="15" fill="rgb(231,145,46)"/><text x="35.1258%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,338,459 samples, 1.78%)</title><rect x="35.3563%" y="117" width="1.7764%" height="15" fill="rgb(251,118,11)"/><text x="35.6063%" y="127.50">m..</text></g><g><title>trait_impls_of (796,636 samples, 0.33%)</title><rect x="37.1407%" y="133" width="0.3262%" height="15" fill="rgb(217,147,25)"/><text x="37.3907%" y="143.50"></text></g><g><title>implementations_of_trait (250,223 samples, 0.10%)</title><rect x="37.3645%" y="117" width="0.1025%" height="15" fill="rgb(247,81,37)"/><text x="37.6145%" y="127.50"></text></g><g><title>coherent_trait (12,631,980 samples, 5.17%)</title><rect x="32.2951%" y="165" width="5.1722%" height="15" fill="rgb(209,12,38)"/><text x="32.5451%" y="175.50">cohere..</text></g><g><title>specialization_graph_of (12,612,340 samples, 5.16%)</title><rect x="32.3031%" y="149" width="5.1641%" height="15" fill="rgb(227,1,9)"/><text x="32.5531%" y="159.50">specia..</text></g><g><title>coherence_checking (12,707,092 samples, 5.20%)</title><rect x="32.2843%" y="181" width="5.2029%" height="15" fill="rgb(248,47,43)"/><text x="32.5343%" y="191.50">cohere..</text></g><g><title>associated_item (568,717 samples, 0.23%)</title><rect x="66.4482%" y="117" width="0.2329%" height="15" fill="rgb(221,10,30)"/><text x="66.6982%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (453,087 samples, 0.19%)</title><rect x="66.4956%" y="101" width="0.1855%" height="15" fill="rgb(210,229,1)"/><text x="66.7456%" y="111.50"></text></g><g><title>associated_items (1,047,372 samples, 0.43%)</title><rect x="66.2707%" y="133" width="0.4288%" height="15" fill="rgb(222,148,37)"/><text x="66.5207%" y="143.50"></text></g><g><title>adt_dtorck_constraint (357,196 samples, 0.15%)</title><rect x="67.0926%" y="101" width="0.1463%" height="15" fill="rgb(234,67,33)"/><text x="67.3426%" y="111.50"></text></g><g><title>adt_dtorck_constraint (679,477 samples, 0.28%)</title><rect x="66.9885%" y="117" width="0.2782%" height="15" fill="rgb(247,98,35)"/><text x="67.2385%" y="127.50"></text></g><g><title>dropck_outlives (1,497,839 samples, 0.61%)</title><rect x="66.7400%" y="133" width="0.6133%" height="15" fill="rgb(247,138,52)"/><text x="66.9900%" y="143.50"></text></g><g><title>generics_of (648,517 samples, 0.27%)</title><rect x="68.5393%" y="117" width="0.2655%" height="15" fill="rgb(213,79,30)"/><text x="68.7893%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (546,466 samples, 0.22%)</title><rect x="68.5811%" y="101" width="0.2238%" height="15" fill="rgb(246,177,23)"/><text x="68.8311%" y="111.50"></text></g><g><title>impl_trait_ref (471,019 samples, 0.19%)</title><rect x="68.8368%" y="117" width="0.1929%" height="15" fill="rgb(230,62,27)"/><text x="69.0868%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (380,817 samples, 0.16%)</title><rect x="68.8737%" y="101" width="0.1559%" height="15" fill="rgb(216,154,8)"/><text x="69.1237%" y="111.50"></text></g><g><title>predicates_of (373,537 samples, 0.15%)</title><rect x="69.0487%" y="117" width="0.1529%" height="15" fill="rgb(244,35,45)"/><text x="69.2987%" y="127.50"></text></g><g><title>specializes (357,842 samples, 0.15%)</title><rect x="69.2016%" y="117" width="0.1465%" height="15" fill="rgb(251,115,12)"/><text x="69.4516%" y="127.50"></text></g><g><title>trait_impls_of (477,273 samples, 0.20%)</title><rect x="69.3547%" y="117" width="0.1954%" height="15" fill="rgb(240,54,50)"/><text x="69.6047%" y="127.50"></text></g><g><title>evaluate_obligation (5,369,949 samples, 2.20%)</title><rect x="67.3533%" y="133" width="2.1987%" height="15" fill="rgb(233,84,52)"/><text x="67.6033%" y="143.50">e..</text></g><g><title>fn_sig (299,724 samples, 0.12%)</title><rect x="69.5691%" y="133" width="0.1227%" height="15" fill="rgb(207,117,47)"/><text x="69.8191%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (269,073 samples, 0.11%)</title><rect x="69.5817%" y="117" width="0.1102%" height="15" fill="rgb(249,43,39)"/><text x="69.8317%" y="127.50"></text></g><g><title>generics_of (806,938 samples, 0.33%)</title><rect x="69.6919%" y="133" width="0.3304%" height="15" fill="rgb(209,38,44)"/><text x="69.9419%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (611,617 samples, 0.25%)</title><rect x="69.7718%" y="117" width="0.2504%" height="15" fill="rgb(236,212,23)"/><text x="70.0218%" y="127.50"></text></g><g><title>evaluate_obligation (324,093 samples, 0.13%)</title><rect x="70.5061%" y="117" width="0.1327%" height="15" fill="rgb(242,79,21)"/><text x="70.7561%" y="127.50"></text></g><g><title>method_autoderef_steps (756,206 samples, 0.31%)</title><rect x="70.3321%" y="133" width="0.3096%" height="15" fill="rgb(211,96,35)"/><text x="70.5821%" y="143.50"></text></g><g><title>predicates_of (646,536 samples, 0.26%)</title><rect x="70.7175%" y="133" width="0.2647%" height="15" fill="rgb(253,215,40)"/><text x="70.9675%" y="143.50"></text></g><g><title>predicates_defined_on (432,284 samples, 0.18%)</title><rect x="70.8052%" y="117" width="0.1770%" height="15" fill="rgb(211,81,21)"/><text x="71.0552%" y="127.50"></text></g><g><title>trait_impls_of (244,812 samples, 0.10%)</title><rect x="72.6721%" y="101" width="0.1002%" height="15" fill="rgb(208,190,38)"/><text x="72.9221%" y="111.50"></text></g><g><title>evaluate_obligation (939,280 samples, 0.38%)</title><rect x="72.3882%" y="117" width="0.3846%" height="15" fill="rgb(235,213,38)"/><text x="72.6382%" y="127.50"></text></g><g><title>typeck (4,491,680 samples, 1.84%)</title><rect x="71.1500%" y="133" width="1.8391%" height="15" fill="rgb(237,122,38)"/><text x="71.4000%" y="143.50">t..</text></g><g><title>item_bodies_checking (86,748,946 samples, 35.52%)</title><rect x="37.4992%" y="181" width="35.5195%" height="15" fill="rgb(244,218,35)"/><text x="37.7492%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (86,745,116 samples, 35.52%)</title><rect x="37.5007%" y="165" width="35.5180%" height="15" fill="rgb(240,68,47)"/><text x="37.7507%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (86,644,663 samples, 35.48%)</title><rect x="37.5419%" y="149" width="35.4768%" height="15" fill="rgb(210,16,53)"/><text x="37.7919%" y="159.50">typeck</text></g><g><title>adt_destructor (323,904 samples, 0.13%)</title><rect x="73.2296%" y="149" width="0.1326%" height="15" fill="rgb(235,124,12)"/><text x="73.4796%" y="159.50"></text></g><g><title>coherent_trait (316,904 samples, 0.13%)</title><rect x="73.2324%" y="133" width="0.1298%" height="15" fill="rgb(224,169,11)"/><text x="73.4824%" y="143.50"></text></g><g><title>specialization_graph_of (314,944 samples, 0.13%)</title><rect x="73.2332%" y="117" width="0.1290%" height="15" fill="rgb(250,166,2)"/><text x="73.4832%" y="127.50"></text></g><g><title>item_types_checking (1,201,913 samples, 0.49%)</title><rect x="73.0187%" y="181" width="0.4921%" height="15" fill="rgb(242,216,29)"/><text x="73.2687%" y="191.50"></text></g><g><title>check_mod_item_types (1,195,963 samples, 0.49%)</title><rect x="73.0211%" y="165" width="0.4897%" height="15" fill="rgb(230,116,27)"/><text x="73.2711%" y="175.50"></text></g><g><title>fn_sig (255,356 samples, 0.10%)</title><rect x="73.6541%" y="149" width="0.1046%" height="15" fill="rgb(228,99,48)"/><text x="73.9041%" y="159.50"></text></g><g><title>is_late_bound_map (406,323 samples, 0.17%)</title><rect x="73.8094%" y="133" width="0.1664%" height="15" fill="rgb(253,11,6)"/><text x="74.0594%" y="143.50"></text></g><g><title>resolve_lifetimes (388,793 samples, 0.16%)</title><rect x="73.8165%" y="117" width="0.1592%" height="15" fill="rgb(247,143,39)"/><text x="74.0665%" y="127.50"></text></g><g><title>generics_of (703,367 samples, 0.29%)</title><rect x="73.7587%" y="149" width="0.2880%" height="15" fill="rgb(236,97,10)"/><text x="74.0087%" y="159.50"></text></g><g><title>predicates_of (664,846 samples, 0.27%)</title><rect x="74.0639%" y="149" width="0.2722%" height="15" fill="rgb(233,208,19)"/><text x="74.3139%" y="159.50"></text></g><g><title>predicates_defined_on (603,975 samples, 0.25%)</title><rect x="74.0888%" y="133" width="0.2473%" height="15" fill="rgb(216,164,2)"/><text x="74.3388%" y="143.50"></text></g><g><title>inferred_outlives_of (368,244 samples, 0.15%)</title><rect x="74.1853%" y="117" width="0.1508%" height="15" fill="rgb(220,129,5)"/><text x="74.4353%" y="127.50"></text></g><g><title>inferred_outlives_crate (342,334 samples, 0.14%)</title><rect x="74.1959%" y="101" width="0.1402%" height="15" fill="rgb(242,17,10)"/><text x="74.4459%" y="111.50"></text></g><g><title>type_collecting (2,578,709 samples, 1.06%)</title><rect x="73.5121%" y="181" width="1.0559%" height="15" fill="rgb(242,107,0)"/><text x="73.7621%" y="191.50"></text></g><g><title>collect_mod_item_types (2,567,909 samples, 1.05%)</title><rect x="73.5165%" y="165" width="1.0514%" height="15" fill="rgb(251,28,31)"/><text x="73.7665%" y="175.50"></text></g><g><title>type_of (566,326 samples, 0.23%)</title><rect x="74.3361%" y="149" width="0.2319%" height="15" fill="rgb(233,223,10)"/><text x="74.5861%" y="159.50"></text></g><g><title>evaluate_obligation (402,036 samples, 0.16%)</title><rect x="75.3876%" y="149" width="0.1646%" height="15" fill="rgb(215,21,27)"/><text x="75.6376%" y="159.50"></text></g><g><title>implied_outlives_bounds (268,035 samples, 0.11%)</title><rect x="75.5550%" y="149" width="0.1097%" height="15" fill="rgb(232,23,21)"/><text x="75.8050%" y="159.50"></text></g><g><title>object_safety_violations (370,364 samples, 0.15%)</title><rect x="75.6647%" y="149" width="0.1516%" height="15" fill="rgb(244,5,23)"/><text x="75.9147%" y="159.50"></text></g><g><title>region_scope_tree (807,940 samples, 0.33%)</title><rect x="75.9173%" y="149" width="0.3308%" height="15" fill="rgb(226,81,46)"/><text x="76.1673%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,897,457 samples, 1.60%)</title><rect x="74.6687%" y="165" width="1.5958%" height="15" fill="rgb(247,70,30)"/><text x="74.9187%" y="175.50"></text></g><g><title>adt_sized_constraint (336,144 samples, 0.14%)</title><rect x="76.7697%" y="149" width="0.1376%" height="15" fill="rgb(212,68,19)"/><text x="77.0197%" y="159.50"></text></g><g><title>adt_def (362,504 samples, 0.15%)</title><rect x="76.9911%" y="85" width="0.1484%" height="15" fill="rgb(240,187,13)"/><text x="77.2411%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (362,084 samples, 0.15%)</title><rect x="76.9913%" y="69" width="0.1483%" height="15" fill="rgb(223,113,26)"/><text x="77.2413%" y="79.50"></text></g><g><title>item_attrs (355,494 samples, 0.15%)</title><rect x="76.9940%" y="53" width="0.1456%" height="15" fill="rgb(206,192,2)"/><text x="77.2440%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (354,994 samples, 0.15%)</title><rect x="76.9942%" y="37" width="0.1454%" height="15" fill="rgb(241,108,4)"/><text x="77.2442%" y="47.50"></text></g><g><title>adt_sized_constraint (366,174 samples, 0.15%)</title><rect x="76.9903%" y="101" width="0.1499%" height="15" fill="rgb(247,173,49)"/><text x="77.2403%" y="111.50"></text></g><g><title>adt_sized_constraint (377,494 samples, 0.15%)</title><rect x="76.9868%" y="117" width="0.1546%" height="15" fill="rgb(224,114,35)"/><text x="77.2368%" y="127.50"></text></g><g><title>adt_sized_constraint (403,714 samples, 0.17%)</title><rect x="76.9781%" y="133" width="0.1653%" height="15" fill="rgb(245,159,27)"/><text x="77.2281%" y="143.50"></text></g><g><title>evaluate_obligation (631,577 samples, 0.26%)</title><rect x="76.9091%" y="149" width="0.2586%" height="15" fill="rgb(245,172,44)"/><text x="77.1591%" y="159.50"></text></g><g><title>analysis (188,434,146 samples, 77.15%)</title><rect x="0.3018%" y="213" width="77.1547%" height="15" fill="rgb(236,23,11)"/><text x="0.5518%" y="223.50">analysis</text></g><g><title>type_check_crate (110,406,919 samples, 45.21%)</title><rect x="32.2502%" y="197" width="45.2063%" height="15" fill="rgb(205,117,38)"/><text x="32.5002%" y="207.50">type_check_crate</text></g><g><title>wf_checking (7,047,918 samples, 2.89%)</title><rect x="74.5707%" y="181" width="2.8858%" height="15" fill="rgb(237,72,25)"/><text x="74.8207%" y="191.50">wf..</text></g><g><title>check_item_well_formed (2,911,189 samples, 1.19%)</title><rect x="76.2645%" y="165" width="1.1920%" height="15" fill="rgb(244,70,9)"/><text x="76.5145%" y="175.50"></text></g><g><title>codegen_crate (581,516 samples, 0.24%)</title><rect x="77.4613%" y="213" width="0.2381%" height="15" fill="rgb(217,125,39)"/><text x="77.7113%" y="223.50"></text></g><g><title>metadata_register_crate (2,763,342 samples, 1.13%)</title><rect x="90.2426%" y="165" width="1.1315%" height="15" fill="rgb(235,36,10)"/><text x="90.4926%" y="175.50"></text></g><g><title>metadata_register_crate (1,010,852 samples, 0.41%)</title><rect x="90.9602%" y="149" width="0.4139%" height="15" fill="rgb(251,123,47)"/><text x="91.2102%" y="159.50"></text></g><g><title>macro_expand_crate (33,663,455 samples, 13.78%)</title><rect x="77.9531%" y="197" width="13.7836%" height="15" fill="rgb(221,13,13)"/><text x="78.2031%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (33,644,304 samples, 13.78%)</title><rect x="77.9610%" y="181" width="13.7757%" height="15" fill="rgb(238,131,9)"/><text x="78.2110%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (885,689 samples, 0.36%)</title><rect x="91.3741%" y="165" width="0.3626%" height="15" fill="rgb(211,50,8)"/><text x="91.6241%" y="175.50"></text></g><g><title>late_resolve_crate (3,183,245 samples, 1.30%)</title><rect x="91.8721%" y="181" width="1.3034%" height="15" fill="rgb(245,182,24)"/><text x="92.1221%" y="191.50"></text></g><g><title>configure_and_expand (38,008,223 samples, 15.56%)</title><rect x="77.6994%" y="213" width="15.5625%" height="15" fill="rgb(242,14,37)"/><text x="77.9494%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (3,581,930 samples, 1.47%)</title><rect x="91.7953%" y="197" width="1.4666%" height="15" fill="rgb(246,228,12)"/><text x="92.0453%" y="207.50"></text></g><g><title>drop_ast (328,084 samples, 0.13%)</title><rect x="93.2620%" y="213" width="0.1343%" height="15" fill="rgb(213,55,15)"/><text x="93.5120%" y="223.50"></text></g><g><title>early_lint_checks (716,368 samples, 0.29%)</title><rect x="93.4031%" y="213" width="0.2933%" height="15" fill="rgb(209,9,3)"/><text x="93.6531%" y="223.50"></text></g><g><title>free_global_ctxt (4,819,574 samples, 1.97%)</title><rect x="93.6964%" y="213" width="1.9734%" height="15" fill="rgb(230,59,30)"/><text x="93.9464%" y="223.50">f..</text></g><g><title>generate_crate_metadata (1,435,286 samples, 0.59%)</title><rect x="95.6698%" y="213" width="0.5877%" height="15" fill="rgb(209,121,21)"/><text x="95.9198%" y="223.50"></text></g><g><title>hir_lowering (5,236,119 samples, 2.14%)</title><rect x="96.2575%" y="213" width="2.1439%" height="15" fill="rgb(220,109,13)"/><text x="96.5075%" y="223.50">h..</text></g><g><title>parse_crate (2,188,314 samples, 0.90%)</title><rect x="98.4284%" y="213" width="0.8960%" height="15" fill="rgb(232,18,1)"/><text x="98.6784%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (977,321 samples, 0.40%)</title><rect x="99.4093%" y="213" width="0.4002%" height="15" fill="rgb(215,41,42)"/><text x="99.6593%" y="223.50"></text></g><g><title>all (244,228,928 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (244,228,928 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (370,714 samples, 0.15%)</title><rect x="99.8482%" y="213" width="0.1518%" height="15" fill="rgb(205,98,50)"/><text x="100.0982%" y="223.50"></text></g></svg></svg>