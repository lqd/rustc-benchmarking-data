<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (158,082 samples, 0.14%)</title><rect x="9.6800%" y="165" width="0.1444%" height="15" fill="rgb(227,0,7)"/><text x="9.9300%" y="175.50"></text></g><g><title>item_attrs (147,232 samples, 0.13%)</title><rect x="10.1261%" y="133" width="0.1345%" height="15" fill="rgb(217,0,24)"/><text x="10.3761%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (142,902 samples, 0.13%)</title><rect x="10.1301%" y="117" width="0.1305%" height="15" fill="rgb(221,193,54)"/><text x="10.3801%" y="127.50"></text></g><g><title>codegen_fn_attrs (208,502 samples, 0.19%)</title><rect x="10.0774%" y="149" width="0.1904%" height="15" fill="rgb(248,212,6)"/><text x="10.3274%" y="159.50"></text></g><g><title>is_copy_raw (173,731 samples, 0.16%)</title><rect x="12.3905%" y="133" width="0.1586%" height="15" fill="rgb(208,68,35)"/><text x="12.6405%" y="143.50"></text></g><g><title>evaluate_obligation (147,881 samples, 0.14%)</title><rect x="12.4141%" y="117" width="0.1350%" height="15" fill="rgb(232,128,0)"/><text x="12.6641%" y="127.50"></text></g><g><title>adt_drop_tys (125,102 samples, 0.11%)</title><rect x="12.5805%" y="117" width="0.1142%" height="15" fill="rgb(207,160,47)"/><text x="12.8305%" y="127.50"></text></g><g><title>is_copy_raw (244,320 samples, 0.22%)</title><rect x="12.6948%" y="117" width="0.2231%" height="15" fill="rgb(228,23,34)"/><text x="12.9448%" y="127.50"></text></g><g><title>evaluate_obligation (212,110 samples, 0.19%)</title><rect x="12.7242%" y="101" width="0.1937%" height="15" fill="rgb(218,30,26)"/><text x="12.9742%" y="111.50"></text></g><g><title>needs_drop_raw (411,262 samples, 0.38%)</title><rect x="12.5492%" y="133" width="0.3756%" height="15" fill="rgb(220,122,19)"/><text x="12.7992%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (233,645 samples, 0.21%)</title><rect x="13.0610%" y="117" width="0.2134%" height="15" fill="rgb(250,228,42)"/><text x="13.3110%" y="127.50"></text></g><g><title>specialization_graph_of (355,874 samples, 0.32%)</title><rect x="13.3341%" y="117" width="0.3250%" height="15" fill="rgb(240,193,28)"/><text x="13.5841%" y="127.50"></text></g><g><title>impl_trait_ref (172,033 samples, 0.16%)</title><rect x="13.5019%" y="101" width="0.1571%" height="15" fill="rgb(216,20,37)"/><text x="13.7519%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (148,292 samples, 0.14%)</title><rect x="13.5236%" y="85" width="0.1354%" height="15" fill="rgb(206,188,39)"/><text x="13.7736%" y="95.50"></text></g><g><title>resolve_instance (878,741 samples, 0.80%)</title><rect x="12.9247%" y="133" width="0.8025%" height="15" fill="rgb(217,207,13)"/><text x="13.1747%" y="143.50"></text></g><g><title>thir_body (1,024,263 samples, 0.94%)</title><rect x="13.7355%" y="133" width="0.9353%" height="15" fill="rgb(231,73,38)"/><text x="13.9855%" y="143.50"></text></g><g><title>mir_const (5,994,857 samples, 5.47%)</title><rect x="9.2007%" y="181" width="5.4744%" height="15" fill="rgb(225,20,46)"/><text x="9.4507%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (5,311,970 samples, 4.85%)</title><rect x="9.8243%" y="165" width="4.8508%" height="15" fill="rgb(210,31,41)"/><text x="10.0743%" y="175.50">unsafe..</text></g><g><title>mir_built (4,826,284 samples, 4.41%)</title><rect x="10.2678%" y="149" width="4.4073%" height="15" fill="rgb(221,200,47)"/><text x="10.5178%" y="159.50">mir_b..</text></g><g><title>mir_promoted (6,550,266 samples, 5.98%)</title><rect x="8.7668%" y="197" width="5.9816%" height="15" fill="rgb(226,26,5)"/><text x="9.0168%" y="207.50">mir_prom..</text></g><g><title>type_op_normalize_fn_sig (253,973 samples, 0.23%)</title><rect x="14.8454%" y="197" width="0.2319%" height="15" fill="rgb(249,33,26)"/><text x="15.0954%" y="207.50"></text></g><g><title>normalize_projection_ty (189,270 samples, 0.17%)</title><rect x="14.9045%" y="181" width="0.1728%" height="15" fill="rgb(235,183,28)"/><text x="15.1545%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,015,142 samples, 0.93%)</title><rect x="15.1323%" y="197" width="0.9270%" height="15" fill="rgb(221,5,38)"/><text x="15.3823%" y="207.50"></text></g><g><title>MIR_borrow_checking (16,299,842 samples, 14.88%)</title><rect x="1.1781%" y="229" width="14.8848%" height="15" fill="rgb(247,18,42)"/><text x="1.4281%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (16,256,922 samples, 14.85%)</title><rect x="1.2173%" y="213" width="14.8456%" height="15" fill="rgb(241,131,45)"/><text x="1.4673%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (226,303 samples, 0.21%)</title><rect x="16.1441%" y="229" width="0.2067%" height="15" fill="rgb(249,31,29)"/><text x="16.3941%" y="239.50"></text></g><g><title>codegen_fn_attrs (173,290 samples, 0.16%)</title><rect x="17.1196%" y="165" width="0.1582%" height="15" fill="rgb(225,111,53)"/><text x="17.3696%" y="175.50"></text></g><g><title>should_inherit_track_caller (280,451 samples, 0.26%)</title><rect x="17.0274%" y="181" width="0.2561%" height="15" fill="rgb(238,160,17)"/><text x="17.2774%" y="191.50"></text></g><g><title>codegen_fn_attrs (465,913 samples, 0.43%)</title><rect x="16.8911%" y="197" width="0.4255%" height="15" fill="rgb(214,148,48)"/><text x="17.1411%" y="207.50"></text></g><g><title>check_mod_attrs (1,025,382 samples, 0.94%)</title><rect x="16.3804%" y="213" width="0.9364%" height="15" fill="rgb(232,36,49)"/><text x="16.6304%" y="223.50"></text></g><g><title>check_mod_const_bodies (140,941 samples, 0.13%)</title><rect x="17.3168%" y="213" width="0.1287%" height="15" fill="rgb(209,103,24)"/><text x="17.5668%" y="223.50"></text></g><g><title>lookup_deprecation_entry (165,512 samples, 0.15%)</title><rect x="17.6970%" y="197" width="0.1511%" height="15" fill="rgb(229,88,8)"/><text x="17.9470%" y="207.50"></text></g><g><title>stability_index (111,921 samples, 0.10%)</title><rect x="17.7459%" y="181" width="0.1022%" height="15" fill="rgb(213,181,19)"/><text x="17.9959%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (389,415 samples, 0.36%)</title><rect x="17.5464%" y="213" width="0.3556%" height="15" fill="rgb(254,191,54)"/><text x="17.7964%" y="223.50"></text></g><g><title>misc_checking_1 (1,771,960 samples, 1.62%)</title><rect x="16.3511%" y="229" width="1.6181%" height="15" fill="rgb(241,83,37)"/><text x="16.6011%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (301,334 samples, 0.28%)</title><rect x="17.9705%" y="213" width="0.2752%" height="15" fill="rgb(233,36,39)"/><text x="18.2205%" y="223.50"></text></g><g><title>check_mod_liveness (236,243 samples, 0.22%)</title><rect x="18.0300%" y="197" width="0.2157%" height="15" fill="rgb(226,3,54)"/><text x="18.2800%" y="207.50"></text></g><g><title>misc_checking_2 (502,806 samples, 0.46%)</title><rect x="17.9692%" y="229" width="0.4592%" height="15" fill="rgb(245,192,40)"/><text x="18.2192%" y="239.50"></text></g><g><title>match_checking (200,062 samples, 0.18%)</title><rect x="18.2457%" y="213" width="0.1827%" height="15" fill="rgb(238,167,29)"/><text x="18.4957%" y="223.50"></text></g><g><title>check_match (187,182 samples, 0.17%)</title><rect x="18.2575%" y="197" width="0.1709%" height="15" fill="rgb(232,182,51)"/><text x="18.5075%" y="207.50"></text></g><g><title>death_checking (229,113 samples, 0.21%)</title><rect x="18.5294%" y="213" width="0.2092%" height="15" fill="rgb(231,60,39)"/><text x="18.7794%" y="223.50"></text></g><g><title>crate_lints (817,659 samples, 0.75%)</title><rect x="18.7398%" y="197" width="0.7467%" height="15" fill="rgb(208,69,12)"/><text x="18.9898%" y="207.50"></text></g><g><title>type_of (331,035 samples, 0.30%)</title><rect x="19.1842%" y="181" width="0.3023%" height="15" fill="rgb(235,93,37)"/><text x="19.4342%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (254,034 samples, 0.23%)</title><rect x="19.2545%" y="165" width="0.2320%" height="15" fill="rgb(213,116,39)"/><text x="19.5045%" y="175.50"></text></g><g><title>lint_checking (1,172,873 samples, 1.07%)</title><rect x="18.7387%" y="213" width="1.0711%" height="15" fill="rgb(222,207,29)"/><text x="18.9887%" y="223.50"></text></g><g><title>module_lints (353,934 samples, 0.32%)</title><rect x="19.4865%" y="197" width="0.3232%" height="15" fill="rgb(206,96,30)"/><text x="19.7365%" y="207.50"></text></g><g><title>lint_mod (351,384 samples, 0.32%)</title><rect x="19.4888%" y="181" width="0.3209%" height="15" fill="rgb(218,138,4)"/><text x="19.7388%" y="191.50"></text></g><g><title>privacy_access_levels (128,782 samples, 0.12%)</title><rect x="19.8097%" y="213" width="0.1176%" height="15" fill="rgb(250,191,14)"/><text x="20.0597%" y="223.50"></text></g><g><title>privacy_checking_modules (434,625 samples, 0.40%)</title><rect x="19.9273%" y="213" width="0.3969%" height="15" fill="rgb(239,60,40)"/><text x="20.1773%" y="223.50"></text></g><g><title>check_mod_privacy (432,475 samples, 0.39%)</title><rect x="19.9293%" y="197" width="0.3949%" height="15" fill="rgb(206,27,48)"/><text x="20.1793%" y="207.50"></text></g><g><title>misc_checking_3 (2,086,644 samples, 1.91%)</title><rect x="18.4284%" y="229" width="1.9055%" height="15" fill="rgb(225,35,8)"/><text x="18.6784%" y="239.50">m..</text></g><g><title>impl_parent (1,272,843 samples, 1.16%)</title><rect x="22.3641%" y="165" width="1.1623%" height="15" fill="rgb(250,213,24)"/><text x="22.6141%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (695,985 samples, 0.64%)</title><rect x="22.8909%" y="149" width="0.6356%" height="15" fill="rgb(247,123,22)"/><text x="23.1409%" y="159.50"></text></g><g><title>impl_trait_ref (2,809,765 samples, 2.57%)</title><rect x="23.5264%" y="165" width="2.5658%" height="15" fill="rgb(231,138,38)"/><text x="23.7764%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,219,419 samples, 2.03%)</title><rect x="24.0655%" y="149" width="2.0267%" height="15" fill="rgb(231,145,46)"/><text x="24.3155%" y="159.50">m..</text></g><g><title>coherent_trait (6,682,665 samples, 6.10%)</title><rect x="20.4080%" y="197" width="6.1025%" height="15" fill="rgb(251,118,11)"/><text x="20.6580%" y="207.50">coherent..</text></g><g><title>specialization_graph_of (6,655,275 samples, 6.08%)</title><rect x="20.4330%" y="181" width="6.0775%" height="15" fill="rgb(217,147,25)"/><text x="20.6830%" y="191.50">speciali..</text></g><g><title>trait_impls_of (454,795 samples, 0.42%)</title><rect x="26.0952%" y="165" width="0.4153%" height="15" fill="rgb(247,81,37)"/><text x="26.3452%" y="175.50"></text></g><g><title>implementations_of_trait (115,202 samples, 0.11%)</title><rect x="26.4053%" y="149" width="0.1052%" height="15" fill="rgb(209,12,38)"/><text x="26.6553%" y="159.50"></text></g><g><title>coherence_checking (6,793,686 samples, 6.20%)</title><rect x="20.3773%" y="213" width="6.2039%" height="15" fill="rgb(227,1,9)"/><text x="20.6273%" y="223.50">coherenc..</text></g><g><title>associated_item (471,775 samples, 0.43%)</title><rect x="54.1300%" y="149" width="0.4308%" height="15" fill="rgb(248,47,43)"/><text x="54.3800%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (374,515 samples, 0.34%)</title><rect x="54.2189%" y="133" width="0.3420%" height="15" fill="rgb(221,10,30)"/><text x="54.4689%" y="143.50"></text></g><g><title>associated_items (646,995 samples, 0.59%)</title><rect x="53.9863%" y="165" width="0.5908%" height="15" fill="rgb(210,229,1)"/><text x="54.2363%" y="175.50"></text></g><g><title>dropck_outlives (188,082 samples, 0.17%)</title><rect x="54.6211%" y="165" width="0.1718%" height="15" fill="rgb(222,148,37)"/><text x="54.8711%" y="175.50"></text></g><g><title>mir_borrowck (146,821 samples, 0.13%)</title><rect x="54.9574%" y="101" width="0.1341%" height="15" fill="rgb(234,67,33)"/><text x="55.2074%" y="111.50"></text></g><g><title>mir_for_ctfe (209,492 samples, 0.19%)</title><rect x="54.9005%" y="133" width="0.1913%" height="15" fill="rgb(247,98,35)"/><text x="55.1505%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (190,172 samples, 0.17%)</title><rect x="54.9181%" y="117" width="0.1737%" height="15" fill="rgb(247,138,52)"/><text x="55.1681%" y="127.50"></text></g><g><title>eval_to_const_value_raw (327,713 samples, 0.30%)</title><rect x="54.7928%" y="165" width="0.2993%" height="15" fill="rgb(213,79,30)"/><text x="55.0428%" y="175.50"></text></g><g><title>eval_to_allocation_raw (321,743 samples, 0.29%)</title><rect x="54.7983%" y="149" width="0.2938%" height="15" fill="rgb(246,177,23)"/><text x="55.0483%" y="159.50"></text></g><g><title>generics_of (541,888 samples, 0.49%)</title><rect x="56.6051%" y="149" width="0.4948%" height="15" fill="rgb(230,62,27)"/><text x="56.8551%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (256,855 samples, 0.23%)</title><rect x="56.8654%" y="133" width="0.2346%" height="15" fill="rgb(216,154,8)"/><text x="57.1154%" y="143.50"></text></g><g><title>impl_trait_ref (367,035 samples, 0.34%)</title><rect x="57.1659%" y="149" width="0.3352%" height="15" fill="rgb(244,35,45)"/><text x="57.4159%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (310,794 samples, 0.28%)</title><rect x="57.2172%" y="133" width="0.2838%" height="15" fill="rgb(251,115,12)"/><text x="57.4672%" y="143.50"></text></g><g><title>predicates_of (271,754 samples, 0.25%)</title><rect x="57.5281%" y="149" width="0.2482%" height="15" fill="rgb(240,54,50)"/><text x="57.7781%" y="159.50"></text></g><g><title>predicates_defined_on (170,012 samples, 0.16%)</title><rect x="57.6210%" y="133" width="0.1553%" height="15" fill="rgb(233,84,52)"/><text x="57.8710%" y="143.50"></text></g><g><title>specializes (480,865 samples, 0.44%)</title><rect x="57.7762%" y="149" width="0.4391%" height="15" fill="rgb(207,117,47)"/><text x="58.0262%" y="159.50"></text></g><g><title>param_env (284,044 samples, 0.26%)</title><rect x="57.9560%" y="133" width="0.2594%" height="15" fill="rgb(249,43,39)"/><text x="58.2060%" y="143.50"></text></g><g><title>def_span (123,221 samples, 0.11%)</title><rect x="58.1028%" y="117" width="0.1125%" height="15" fill="rgb(209,38,44)"/><text x="58.3528%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (110,231 samples, 0.10%)</title><rect x="58.1147%" y="101" width="0.1007%" height="15" fill="rgb(236,212,23)"/><text x="58.3647%" y="111.50"></text></g><g><title>trait_impls_of (299,364 samples, 0.27%)</title><rect x="58.2287%" y="149" width="0.2734%" height="15" fill="rgb(242,79,21)"/><text x="58.4787%" y="159.50"></text></g><g><title>evaluate_obligation (3,748,284 samples, 3.42%)</title><rect x="55.0921%" y="165" width="3.4229%" height="15" fill="rgb(211,96,35)"/><text x="55.3421%" y="175.50">eva..</text></g><g><title>generics_of (112,502 samples, 0.10%)</title><rect x="58.6270%" y="165" width="0.1027%" height="15" fill="rgb(253,215,40)"/><text x="58.8770%" y="175.50"></text></g><g><title>impl_item_implementor_ids (116,760 samples, 0.11%)</title><rect x="58.7297%" y="165" width="0.1066%" height="15" fill="rgb(211,81,21)"/><text x="58.9797%" y="175.50"></text></g><g><title>object_safety_violations (134,802 samples, 0.12%)</title><rect x="59.1119%" y="165" width="0.1231%" height="15" fill="rgb(208,190,38)"/><text x="59.3619%" y="175.50"></text></g><g><title>predicates_of (308,495 samples, 0.28%)</title><rect x="59.3193%" y="165" width="0.2817%" height="15" fill="rgb(235,213,38)"/><text x="59.5693%" y="175.50"></text></g><g><title>predicates_defined_on (206,562 samples, 0.19%)</title><rect x="59.4123%" y="149" width="0.1886%" height="15" fill="rgb(237,122,38)"/><text x="59.6623%" y="159.50"></text></g><g><title>item_bodies_checking (36,349,657 samples, 33.19%)</title><rect x="26.6258%" y="213" width="33.1940%" height="15" fill="rgb(244,218,35)"/><text x="26.8758%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (36,346,627 samples, 33.19%)</title><rect x="26.6286%" y="197" width="33.1912%" height="15" fill="rgb(240,68,47)"/><text x="26.8786%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (36,313,056 samples, 33.16%)</title><rect x="26.6592%" y="181" width="33.1606%" height="15" fill="rgb(210,16,53)"/><text x="26.9092%" y="191.50">typeck</text></g><g><title>adt_destructor (109,692 samples, 0.10%)</title><rect x="60.6231%" y="181" width="0.1002%" height="15" fill="rgb(235,124,12)"/><text x="60.8731%" y="191.50"></text></g><g><title>def_span (218,302 samples, 0.20%)</title><rect x="62.5807%" y="117" width="0.1994%" height="15" fill="rgb(224,169,11)"/><text x="62.8307%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (204,082 samples, 0.19%)</title><rect x="62.5937%" y="101" width="0.1864%" height="15" fill="rgb(250,166,2)"/><text x="62.8437%" y="111.50"></text></g><g><title>mir_for_ctfe (1,667,571 samples, 1.52%)</title><rect x="62.8047%" y="117" width="1.5228%" height="15" fill="rgb(242,216,29)"/><text x="63.0547%" y="127.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (1,651,781 samples, 1.51%)</title><rect x="62.8192%" y="101" width="1.5084%" height="15" fill="rgb(230,116,27)"/><text x="63.0692%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,272,488 samples, 2.99%)</title><rect x="61.3920%" y="165" width="2.9884%" height="15" fill="rgb(228,99,48)"/><text x="61.6420%" y="175.50">eva..</text></g><g><title>eval_to_const_value_raw (3,223,848 samples, 2.94%)</title><rect x="61.4364%" y="149" width="2.9440%" height="15" fill="rgb(253,11,6)"/><text x="61.6864%" y="159.50">ev..</text></g><g><title>eval_to_allocation_raw (3,145,368 samples, 2.87%)</title><rect x="61.5081%" y="133" width="2.8723%" height="15" fill="rgb(247,143,39)"/><text x="61.7581%" y="143.50">ev..</text></g><g><title>resolve_instance (120,840 samples, 0.11%)</title><rect x="64.5941%" y="165" width="0.1103%" height="15" fill="rgb(236,97,10)"/><text x="64.8441%" y="175.50"></text></g><g><title>evaluate_obligation (4,432,850 samples, 4.05%)</title><rect x="60.7389%" y="181" width="4.0480%" height="15" fill="rgb(233,208,19)"/><text x="60.9889%" y="191.50">eval..</text></g><g><title>item_types_checking (5,629,043 samples, 5.14%)</title><rect x="59.8198%" y="213" width="5.1404%" height="15" fill="rgb(216,164,2)"/><text x="60.0698%" y="223.50">item_t..</text></g><g><title>check_mod_item_types (5,624,853 samples, 5.14%)</title><rect x="59.8236%" y="197" width="5.1365%" height="15" fill="rgb(220,129,5)"/><text x="60.0736%" y="207.50">check_..</text></g><g><title>late_bound_vars_map (113,021 samples, 0.10%)</title><rect x="65.5924%" y="165" width="0.1032%" height="15" fill="rgb(242,17,10)"/><text x="65.8424%" y="175.50"></text></g><g><title>fn_sig (584,188 samples, 0.53%)</title><rect x="65.2613%" y="181" width="0.5335%" height="15" fill="rgb(242,107,0)"/><text x="65.5113%" y="191.50"></text></g><g><title>named_region_map (619,706 samples, 0.57%)</title><rect x="65.8829%" y="165" width="0.5659%" height="15" fill="rgb(251,28,31)"/><text x="66.1329%" y="175.50"></text></g><g><title>resolve_lifetimes (602,286 samples, 0.55%)</title><rect x="65.8988%" y="149" width="0.5500%" height="15" fill="rgb(233,223,10)"/><text x="66.1488%" y="159.50"></text></g><g><title>lint_levels (286,484 samples, 0.26%)</title><rect x="66.1872%" y="133" width="0.2616%" height="15" fill="rgb(215,21,27)"/><text x="66.4372%" y="143.50"></text></g><g><title>generics_of (733,497 samples, 0.67%)</title><rect x="65.7947%" y="181" width="0.6698%" height="15" fill="rgb(232,23,21)"/><text x="66.0447%" y="191.50"></text></g><g><title>explicit_predicates_of (118,360 samples, 0.11%)</title><rect x="66.6411%" y="149" width="0.1081%" height="15" fill="rgb(244,5,23)"/><text x="66.8911%" y="159.50"></text></g><g><title>predicates_of (449,325 samples, 0.41%)</title><rect x="66.5333%" y="181" width="0.4103%" height="15" fill="rgb(226,81,46)"/><text x="66.7833%" y="191.50"></text></g><g><title>predicates_defined_on (405,563 samples, 0.37%)</title><rect x="66.5733%" y="165" width="0.3704%" height="15" fill="rgb(247,70,30)"/><text x="66.8233%" y="175.50"></text></g><g><title>inferred_outlives_of (212,912 samples, 0.19%)</title><rect x="66.7492%" y="149" width="0.1944%" height="15" fill="rgb(212,68,19)"/><text x="66.9992%" y="159.50"></text></g><g><title>inferred_outlives_crate (194,962 samples, 0.18%)</title><rect x="66.7656%" y="133" width="0.1780%" height="15" fill="rgb(240,187,13)"/><text x="67.0156%" y="143.50"></text></g><g><title>type_of (141,212 samples, 0.13%)</title><rect x="66.8147%" y="117" width="0.1290%" height="15" fill="rgb(223,113,26)"/><text x="67.0647%" y="127.50"></text></g><g><title>type_collecting (2,314,976 samples, 2.11%)</title><rect x="64.9616%" y="213" width="2.1140%" height="15" fill="rgb(206,192,2)"/><text x="65.2116%" y="223.50">t..</text></g><g><title>collect_mod_item_types (2,288,465 samples, 2.09%)</title><rect x="64.9858%" y="197" width="2.0898%" height="15" fill="rgb(241,108,4)"/><text x="65.2358%" y="207.50">c..</text></g><g><title>type_of (144,481 samples, 0.13%)</title><rect x="66.9437%" y="181" width="0.1319%" height="15" fill="rgb(247,173,49)"/><text x="67.1937%" y="191.50"></text></g><g><title>is_mir_available (110,482 samples, 0.10%)</title><rect x="68.7857%" y="133" width="0.1009%" height="15" fill="rgb(224,114,35)"/><text x="69.0357%" y="143.50"></text></g><g><title>mir_const_qualif (318,773 samples, 0.29%)</title><rect x="68.9048%" y="133" width="0.2911%" height="15" fill="rgb(245,159,27)"/><text x="69.1548%" y="143.50"></text></g><g><title>mir_const (261,842 samples, 0.24%)</title><rect x="68.9568%" y="117" width="0.2391%" height="15" fill="rgb(245,172,44)"/><text x="69.2068%" y="127.50"></text></g><g><title>unsafety_check_result (182,101 samples, 0.17%)</title><rect x="69.0296%" y="101" width="0.1663%" height="15" fill="rgb(236,23,11)"/><text x="69.2796%" y="111.50"></text></g><g><title>mir_built (151,841 samples, 0.14%)</title><rect x="69.0572%" y="85" width="0.1387%" height="15" fill="rgb(205,117,38)"/><text x="69.3072%" y="95.50"></text></g><g><title>mir_borrowck (731,869 samples, 0.67%)</title><rect x="69.4741%" y="101" width="0.6683%" height="15" fill="rgb(237,72,25)"/><text x="69.7241%" y="111.50"></text></g><g><title>mir_for_ctfe (1,038,481 samples, 0.95%)</title><rect x="69.1959%" y="133" width="0.9483%" height="15" fill="rgb(244,70,9)"/><text x="69.4459%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (965,251 samples, 0.88%)</title><rect x="69.2627%" y="117" width="0.8815%" height="15" fill="rgb(217,125,39)"/><text x="69.5127%" y="127.50"></text></g><g><title>mir_borrowck (118,582 samples, 0.11%)</title><rect x="70.3564%" y="37" width="0.1083%" height="15" fill="rgb(235,36,10)"/><text x="70.6064%" y="47.50"></text></g><g><title>mir_for_ctfe (199,022 samples, 0.18%)</title><rect x="70.2838%" y="69" width="0.1817%" height="15" fill="rgb(251,123,47)"/><text x="70.5338%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (183,502 samples, 0.17%)</title><rect x="70.2979%" y="53" width="0.1676%" height="15" fill="rgb(221,13,13)"/><text x="70.5479%" y="63.50"></text></g><g><title>eval_to_const_value_raw (398,104 samples, 0.36%)</title><rect x="70.1580%" y="117" width="0.3635%" height="15" fill="rgb(238,131,9)"/><text x="70.4080%" y="127.50"></text></g><g><title>eval_to_const_value_raw (394,844 samples, 0.36%)</title><rect x="70.1610%" y="101" width="0.3606%" height="15" fill="rgb(211,50,8)"/><text x="70.4110%" y="111.50"></text></g><g><title>eval_to_allocation_raw (387,684 samples, 0.35%)</title><rect x="70.1675%" y="85" width="0.3540%" height="15" fill="rgb(245,182,24)"/><text x="70.4175%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (417,704 samples, 0.38%)</title><rect x="70.1453%" y="133" width="0.3814%" height="15" fill="rgb(242,14,37)"/><text x="70.3953%" y="143.50"></text></g><g><title>specializes (149,432 samples, 0.14%)</title><rect x="71.0299%" y="101" width="0.1365%" height="15" fill="rgb(246,228,12)"/><text x="71.2799%" y="111.50"></text></g><g><title>param_env (129,861 samples, 0.12%)</title><rect x="71.0477%" y="85" width="0.1186%" height="15" fill="rgb(213,55,15)"/><text x="71.2977%" y="95.50"></text></g><g><title>def_span (109,771 samples, 0.10%)</title><rect x="71.0661%" y="69" width="0.1002%" height="15" fill="rgb(209,9,3)"/><text x="71.3161%" y="79.50"></text></g><g><title>evaluate_obligation (369,965 samples, 0.34%)</title><rect x="70.8803%" y="117" width="0.3378%" height="15" fill="rgb(230,59,30)"/><text x="71.1303%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,019,264 samples, 2.76%)</title><rect x="68.6283%" y="181" width="2.7572%" height="15" fill="rgb(209,121,21)"/><text x="68.8783%" y="191.50">ev..</text></g><g><title>eval_to_const_value_raw (2,993,764 samples, 2.73%)</title><rect x="68.6516%" y="165" width="2.7339%" height="15" fill="rgb(220,109,13)"/><text x="68.9016%" y="175.50">ev..</text></g><g><title>eval_to_allocation_raw (2,986,224 samples, 2.73%)</title><rect x="68.6585%" y="149" width="2.7270%" height="15" fill="rgb(232,18,1)"/><text x="68.9085%" y="159.50">ev..</text></g><g><title>typeck (940,390 samples, 0.86%)</title><rect x="70.5267%" y="133" width="0.8588%" height="15" fill="rgb(215,41,42)"/><text x="70.7767%" y="143.50"></text></g><g><title>adt_def (136,661 samples, 0.12%)</title><rect x="71.7241%" y="133" width="0.1248%" height="15" fill="rgb(224,123,36)"/><text x="71.9741%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (136,021 samples, 0.12%)</title><rect x="71.7247%" y="117" width="0.1242%" height="15" fill="rgb(240,125,3)"/><text x="71.9747%" y="127.50"></text></g><g><title>adt_sized_constraint (141,221 samples, 0.13%)</title><rect x="71.7214%" y="149" width="0.1290%" height="15" fill="rgb(205,98,50)"/><text x="71.9714%" y="159.50"></text></g><g><title>adt_sized_constraint (214,962 samples, 0.20%)</title><rect x="71.6583%" y="165" width="0.1963%" height="15" fill="rgb(205,185,37)"/><text x="71.9083%" y="175.50"></text></g><g><title>evaluate_obligation (582,796 samples, 0.53%)</title><rect x="71.3854%" y="181" width="0.5322%" height="15" fill="rgb(238,207,15)"/><text x="71.6354%" y="191.50"></text></g><g><title>implied_outlives_bounds (178,110 samples, 0.16%)</title><rect x="71.9390%" y="181" width="0.1626%" height="15" fill="rgb(213,199,42)"/><text x="72.1890%" y="191.50"></text></g><g><title>param_env (212,722 samples, 0.19%)</title><rect x="72.1028%" y="181" width="0.1943%" height="15" fill="rgb(235,201,11)"/><text x="72.3528%" y="191.50"></text></g><g><title>region_scope_tree (657,078 samples, 0.60%)</title><rect x="72.3857%" y="181" width="0.6000%" height="15" fill="rgb(207,46,11)"/><text x="72.6357%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,297,581 samples, 5.75%)</title><rect x="67.2453%" y="197" width="5.7509%" height="15" fill="rgb(241,35,35)"/><text x="67.4953%" y="207.50">check_i..</text></g><g><title>evaluate_obligation (463,113 samples, 0.42%)</title><rect x="73.8112%" y="181" width="0.4229%" height="15" fill="rgb(243,32,47)"/><text x="74.0612%" y="191.50"></text></g><g><title>param_env (282,943 samples, 0.26%)</title><rect x="74.2905%" y="181" width="0.2584%" height="15" fill="rgb(247,202,23)"/><text x="74.5405%" y="191.50"></text></g><g><title>analysis (81,101,447 samples, 74.06%)</title><rect x="0.6845%" y="245" width="74.0607%" height="15" fill="rgb(219,102,11)"/><text x="0.9345%" y="255.50">analysis</text></g><g><title>type_check_crate (59,584,036 samples, 54.41%)</title><rect x="20.3339%" y="229" width="54.4113%" height="15" fill="rgb(243,110,44)"/><text x="20.5839%" y="239.50">type_check_crate</text></g><g><title>wf_checking (8,396,023 samples, 7.67%)</title><rect x="67.0781%" y="213" width="7.6671%" height="15" fill="rgb(222,74,54)"/><text x="67.3281%" y="223.50">wf_checking</text></g><g><title>check_item_well_formed (1,915,362 samples, 1.75%)</title><rect x="72.9961%" y="197" width="1.7491%" height="15" fill="rgb(216,99,12)"/><text x="73.2461%" y="207.50"></text></g><g><title>codegen_crate (279,563 samples, 0.26%)</title><rect x="74.7526%" y="245" width="0.2553%" height="15" fill="rgb(226,22,26)"/><text x="75.0026%" y="255.50"></text></g><g><title>AST_validation (214,252 samples, 0.20%)</title><rect x="75.1931%" y="229" width="0.1957%" height="15" fill="rgb(217,163,10)"/><text x="75.4431%" y="239.50"></text></g><g><title>metadata_load_macro (178,161 samples, 0.16%)</title><rect x="88.9219%" y="197" width="0.1627%" height="15" fill="rgb(213,25,53)"/><text x="89.1719%" y="207.50"></text></g><g><title>metadata_register_crate (183,042 samples, 0.17%)</title><rect x="89.0846%" y="197" width="0.1672%" height="15" fill="rgb(252,105,26)"/><text x="89.3346%" y="207.50"></text></g><g><title>macro_expand_crate (15,550,254 samples, 14.20%)</title><rect x="75.5664%" y="229" width="14.2003%" height="15" fill="rgb(220,39,43)"/><text x="75.8164%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (15,528,443 samples, 14.18%)</title><rect x="75.5863%" y="213" width="14.1804%" height="15" fill="rgb(229,68,48)"/><text x="75.8363%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (563,897 samples, 0.51%)</title><rect x="89.2517%" y="197" width="0.5149%" height="15" fill="rgb(252,8,32)"/><text x="89.5017%" y="207.50"></text></g><g><title>late_resolve_crate (1,953,362 samples, 1.78%)</title><rect x="89.9979%" y="213" width="1.7838%" height="15" fill="rgb(223,20,43)"/><text x="90.2479%" y="223.50">l..</text></g><g><title>configure_and_expand (18,525,297 samples, 16.92%)</title><rect x="75.0079%" y="245" width="16.9170%" height="15" fill="rgb(229,81,49)"/><text x="75.2579%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,267,226 samples, 2.07%)</title><rect x="89.8545%" y="229" width="2.0704%" height="15" fill="rgb(236,28,36)"/><text x="90.1045%" y="239.50">r..</text></g><g><title>drop_ast (311,843 samples, 0.28%)</title><rect x="91.9249%" y="245" width="0.2848%" height="15" fill="rgb(249,185,26)"/><text x="92.1749%" y="255.50"></text></g><g><title>early_lint_checks (761,619 samples, 0.70%)</title><rect x="92.2238%" y="245" width="0.6955%" height="15" fill="rgb(249,174,33)"/><text x="92.4738%" y="255.50"></text></g><g><title>free_global_ctxt (2,086,683 samples, 1.91%)</title><rect x="92.9193%" y="245" width="1.9055%" height="15" fill="rgb(233,201,37)"/><text x="93.1693%" y="255.50">f..</text></g><g><title>generate_crate_metadata (560,186 samples, 0.51%)</title><rect x="94.8249%" y="245" width="0.5116%" height="15" fill="rgb(221,78,26)"/><text x="95.0749%" y="255.50"></text></g><g><title>hir_lowering (3,494,959 samples, 3.19%)</title><rect x="95.3364%" y="245" width="3.1915%" height="15" fill="rgb(250,127,30)"/><text x="95.5864%" y="255.50">hir..</text></g><g><title>parse_crate (305,553 samples, 0.28%)</title><rect x="98.5636%" y="245" width="0.2790%" height="15" fill="rgb(230,49,44)"/><text x="98.8136%" y="255.50"></text></g><g><title>prepare_outputs (265,613 samples, 0.24%)</title><rect x="98.8506%" y="245" width="0.2426%" height="15" fill="rgb(229,67,23)"/><text x="99.1006%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (525,536 samples, 0.48%)</title><rect x="99.0931%" y="245" width="0.4799%" height="15" fill="rgb(249,83,47)"/><text x="99.3431%" y="255.50"></text></g><g><title>setup_global_ctxt (154,242 samples, 0.14%)</title><rect x="99.5823%" y="245" width="0.1409%" height="15" fill="rgb(215,43,3)"/><text x="99.8323%" y="255.50"></text></g><g><title>all (109,506,694 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (109,506,694 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (303,174 samples, 0.28%)</title><rect x="99.7231%" y="245" width="0.2769%" height="15" fill="rgb(233,0,4)"/><text x="99.9731%" y="255.50"></text></g></svg></svg>