<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (280,883 samples, 0.28%)</title><rect x="11.0408%" y="165" width="0.2821%" height="15" fill="rgb(227,0,7)"/><text x="11.2908%" y="175.50"></text></g><g><title>item_attrs (269,071 samples, 0.27%)</title><rect x="11.7152%" y="133" width="0.2702%" height="15" fill="rgb(217,0,24)"/><text x="11.9652%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (261,421 samples, 0.26%)</title><rect x="11.7229%" y="117" width="0.2625%" height="15" fill="rgb(221,193,54)"/><text x="11.9729%" y="127.50"></text></g><g><title>codegen_fn_attrs (359,443 samples, 0.36%)</title><rect x="11.6364%" y="149" width="0.3610%" height="15" fill="rgb(248,212,6)"/><text x="11.8864%" y="159.50"></text></g><g><title>adt_drop_tys (173,982 samples, 0.17%)</title><rect x="14.1956%" y="101" width="0.1747%" height="15" fill="rgb(208,68,35)"/><text x="14.4456%" y="111.50"></text></g><g><title>is_copy_raw (137,722 samples, 0.14%)</title><rect x="14.3717%" y="101" width="0.1383%" height="15" fill="rgb(232,128,0)"/><text x="14.6217%" y="111.50"></text></g><g><title>evaluate_obligation (104,592 samples, 0.11%)</title><rect x="14.4050%" y="85" width="0.1050%" height="15" fill="rgb(207,160,47)"/><text x="14.6550%" y="95.50"></text></g><g><title>adt_drop_tys (501,207 samples, 0.50%)</title><rect x="14.1528%" y="117" width="0.5034%" height="15" fill="rgb(228,23,34)"/><text x="14.4028%" y="127.50"></text></g><g><title>is_copy_raw (525,823 samples, 0.53%)</title><rect x="14.6561%" y="117" width="0.5281%" height="15" fill="rgb(218,30,26)"/><text x="14.9061%" y="127.50"></text></g><g><title>evaluate_obligation (434,703 samples, 0.44%)</title><rect x="14.7477%" y="101" width="0.4366%" height="15" fill="rgb(220,122,19)"/><text x="14.9977%" y="111.50"></text></g><g><title>needs_drop_raw (1,134,320 samples, 1.14%)</title><rect x="14.0633%" y="133" width="1.1392%" height="15" fill="rgb(250,228,42)"/><text x="14.3133%" y="143.50"></text></g><g><title>impl_parent (241,132 samples, 0.24%)</title><rect x="15.6444%" y="101" width="0.2422%" height="15" fill="rgb(240,193,28)"/><text x="15.8944%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (177,721 samples, 0.18%)</title><rect x="15.7081%" y="85" width="0.1785%" height="15" fill="rgb(216,20,37)"/><text x="15.9581%" y="95.50"></text></g><g><title>specialization_graph_of (1,099,533 samples, 1.10%)</title><rect x="15.3485%" y="117" width="1.1043%" height="15" fill="rgb(206,188,39)"/><text x="15.5985%" y="127.50"></text></g><g><title>impl_trait_ref (563,700 samples, 0.57%)</title><rect x="15.8866%" y="101" width="0.5661%" height="15" fill="rgb(217,207,13)"/><text x="16.1366%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (498,080 samples, 0.50%)</title><rect x="15.9525%" y="85" width="0.5002%" height="15" fill="rgb(231,73,38)"/><text x="16.2025%" y="95.50"></text></g><g><title>resolve_instance (1,283,465 samples, 1.29%)</title><rect x="15.2025%" y="133" width="1.2890%" height="15" fill="rgb(225,20,46)"/><text x="15.4525%" y="143.50"></text></g><g><title>thir_body (748,555 samples, 0.75%)</title><rect x="16.5028%" y="133" width="0.7518%" height="15" fill="rgb(210,31,41)"/><text x="16.7528%" y="143.50"></text></g><g><title>mir_const (6,805,127 samples, 6.83%)</title><rect x="10.4335%" y="181" width="6.8343%" height="15" fill="rgb(221,200,47)"/><text x="10.6835%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (5,919,586 samples, 5.94%)</title><rect x="11.3229%" y="165" width="5.9450%" height="15" fill="rgb(226,26,5)"/><text x="11.5729%" y="175.50">unsafety..</text></g><g><title>mir_built (5,247,959 samples, 5.27%)</title><rect x="11.9974%" y="149" width="5.2705%" height="15" fill="rgb(249,33,26)"/><text x="12.2474%" y="159.50">mir_bu..</text></g><g><title>has_structural_eq_impls (187,782 samples, 0.19%)</title><rect x="17.3900%" y="165" width="0.1886%" height="15" fill="rgb(235,183,28)"/><text x="17.6400%" y="175.50"></text></g><g><title>evaluate_obligation (168,192 samples, 0.17%)</title><rect x="17.4097%" y="149" width="0.1689%" height="15" fill="rgb(221,5,38)"/><text x="17.6597%" y="159.50"></text></g><g><title>trait_impls_of (141,300 samples, 0.14%)</title><rect x="17.4367%" y="133" width="0.1419%" height="15" fill="rgb(247,18,42)"/><text x="17.6867%" y="143.50"></text></g><g><title>mir_promoted (7,934,549 samples, 7.97%)</title><rect x="9.7690%" y="197" width="7.9686%" height="15" fill="rgb(241,131,45)"/><text x="10.0190%" y="207.50">mir_promoted</text></g><g><title>mir_const_qualif (467,735 samples, 0.47%)</title><rect x="17.2679%" y="181" width="0.4697%" height="15" fill="rgb(249,31,29)"/><text x="17.5179%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (331,294 samples, 0.33%)</title><rect x="17.7419%" y="197" width="0.3327%" height="15" fill="rgb(225,111,53)"/><text x="17.9919%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (502,088 samples, 0.50%)</title><rect x="18.0746%" y="197" width="0.5042%" height="15" fill="rgb(238,160,17)"/><text x="18.3246%" y="207.50"></text></g><g><title>normalize_projection_ty (341,756 samples, 0.34%)</title><rect x="18.2356%" y="181" width="0.3432%" height="15" fill="rgb(214,148,48)"/><text x="18.4856%" y="191.50"></text></g><g><title>type_op_normalize_predicate (258,143 samples, 0.26%)</title><rect x="18.5789%" y="197" width="0.2593%" height="15" fill="rgb(232,36,49)"/><text x="18.8289%" y="207.50"></text></g><g><title>normalize_projection_ty (118,721 samples, 0.12%)</title><rect x="18.7189%" y="181" width="0.1192%" height="15" fill="rgb(209,103,24)"/><text x="18.9689%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,694,635 samples, 1.70%)</title><rect x="18.8381%" y="197" width="1.7019%" height="15" fill="rgb(229,88,8)"/><text x="19.0881%" y="207.50"></text></g><g><title>evaluate_obligation (116,342 samples, 0.12%)</title><rect x="20.4232%" y="181" width="0.1168%" height="15" fill="rgb(213,181,19)"/><text x="20.6732%" y="191.50"></text></g><g><title>MIR_borrow_checking (19,603,139 samples, 19.69%)</title><rect x="0.8636%" y="229" width="19.6872%" height="15" fill="rgb(254,191,54)"/><text x="1.1136%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (19,552,158 samples, 19.64%)</title><rect x="0.9148%" y="213" width="19.6360%" height="15" fill="rgb(241,83,37)"/><text x="1.1648%" y="223.50">mir_borrowck</text></g><g><title>MIR_effect_checking (113,482 samples, 0.11%)</title><rect x="20.5508%" y="229" width="0.1140%" height="15" fill="rgb(233,36,39)"/><text x="20.8008%" y="239.50"></text></g><g><title>hir_module_items (103,070 samples, 0.10%)</title><rect x="20.6648%" y="229" width="0.1035%" height="15" fill="rgb(226,3,54)"/><text x="20.9148%" y="239.50"></text></g><g><title>codegen_fn_attrs (143,251 samples, 0.14%)</title><rect x="20.9044%" y="197" width="0.1439%" height="15" fill="rgb(245,192,40)"/><text x="21.1544%" y="207.50"></text></g><g><title>check_mod_attrs (260,214 samples, 0.26%)</title><rect x="20.7870%" y="213" width="0.2613%" height="15" fill="rgb(238,167,29)"/><text x="21.0370%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (327,173 samples, 0.33%)</title><rect x="21.1494%" y="213" width="0.3286%" height="15" fill="rgb(232,182,51)"/><text x="21.3994%" y="223.50"></text></g><g><title>misc_checking_1 (744,588 samples, 0.75%)</title><rect x="20.7688%" y="229" width="0.7478%" height="15" fill="rgb(231,60,39)"/><text x="21.0188%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (347,014 samples, 0.35%)</title><rect x="21.5180%" y="213" width="0.3485%" height="15" fill="rgb(208,69,12)"/><text x="21.7680%" y="223.50"></text></g><g><title>check_mod_liveness (275,683 samples, 0.28%)</title><rect x="21.5896%" y="197" width="0.2769%" height="15" fill="rgb(235,93,37)"/><text x="21.8396%" y="207.50"></text></g><g><title>misc_checking_2 (703,208 samples, 0.71%)</title><rect x="21.5166%" y="229" width="0.7062%" height="15" fill="rgb(213,116,39)"/><text x="21.7666%" y="239.50"></text></g><g><title>match_checking (354,784 samples, 0.36%)</title><rect x="21.8665%" y="213" width="0.3563%" height="15" fill="rgb(222,207,29)"/><text x="22.1165%" y="223.50"></text></g><g><title>check_match (338,623 samples, 0.34%)</title><rect x="21.8827%" y="197" width="0.3401%" height="15" fill="rgb(206,96,30)"/><text x="22.1327%" y="207.50"></text></g><g><title>death_checking (156,172 samples, 0.16%)</title><rect x="22.3157%" y="213" width="0.1568%" height="15" fill="rgb(218,138,4)"/><text x="22.5657%" y="223.50"></text></g><g><title>fn_abi_of_instance (107,781 samples, 0.11%)</title><rect x="22.9166%" y="85" width="0.1082%" height="15" fill="rgb(250,191,14)"/><text x="23.1666%" y="95.50"></text></g><g><title>eval_to_const_value_raw (328,843 samples, 0.33%)</title><rect x="22.8083%" y="133" width="0.3303%" height="15" fill="rgb(239,60,40)"/><text x="23.0583%" y="143.50"></text></g><g><title>eval_to_const_value_raw (325,963 samples, 0.33%)</title><rect x="22.8112%" y="117" width="0.3274%" height="15" fill="rgb(206,27,48)"/><text x="23.0612%" y="127.50"></text></g><g><title>eval_to_allocation_raw (320,413 samples, 0.32%)</title><rect x="22.8168%" y="101" width="0.3218%" height="15" fill="rgb(225,35,8)"/><text x="23.0668%" y="111.50"></text></g><g><title>eval_to_allocation_raw (424,265 samples, 0.43%)</title><rect x="22.7133%" y="181" width="0.4261%" height="15" fill="rgb(250,213,24)"/><text x="22.9633%" y="191.50"></text></g><g><title>eval_to_allocation_raw (422,065 samples, 0.42%)</title><rect x="22.7155%" y="165" width="0.4239%" height="15" fill="rgb(247,123,22)"/><text x="22.9655%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (340,643 samples, 0.34%)</title><rect x="22.7973%" y="149" width="0.3421%" height="15" fill="rgb(231,138,38)"/><text x="23.0473%" y="159.50"></text></g><g><title>param_env (133,330 samples, 0.13%)</title><rect x="23.1394%" y="181" width="0.1339%" height="15" fill="rgb(231,145,46)"/><text x="23.3894%" y="191.50"></text></g><g><title>crate_lints (807,109 samples, 0.81%)</title><rect x="22.4740%" y="197" width="0.8106%" height="15" fill="rgb(251,118,11)"/><text x="22.7240%" y="207.50"></text></g><g><title>lint_checking (1,067,382 samples, 1.07%)</title><rect x="22.4725%" y="213" width="1.0720%" height="15" fill="rgb(217,147,25)"/><text x="22.7225%" y="223.50"></text></g><g><title>module_lints (258,763 samples, 0.26%)</title><rect x="23.2846%" y="197" width="0.2599%" height="15" fill="rgb(247,81,37)"/><text x="23.5346%" y="207.50"></text></g><g><title>lint_mod (256,133 samples, 0.26%)</title><rect x="23.2872%" y="181" width="0.2572%" height="15" fill="rgb(209,12,38)"/><text x="23.5372%" y="191.50"></text></g><g><title>privacy_checking_modules (403,005 samples, 0.40%)</title><rect x="23.6076%" y="213" width="0.4047%" height="15" fill="rgb(227,1,9)"/><text x="23.8576%" y="223.50"></text></g><g><title>check_mod_privacy (400,745 samples, 0.40%)</title><rect x="23.6099%" y="197" width="0.4025%" height="15" fill="rgb(248,47,43)"/><text x="23.8599%" y="207.50"></text></g><g><title>misc_checking_3 (1,792,010 samples, 1.80%)</title><rect x="22.2228%" y="229" width="1.7997%" height="15" fill="rgb(221,10,30)"/><text x="22.4728%" y="239.50">m..</text></g><g><title>associated_item (183,863 samples, 0.18%)</title><rect x="31.8863%" y="149" width="0.1847%" height="15" fill="rgb(210,229,1)"/><text x="32.1363%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (144,363 samples, 0.14%)</title><rect x="31.9259%" y="133" width="0.1450%" height="15" fill="rgb(222,148,37)"/><text x="32.1759%" y="143.50"></text></g><g><title>associated_items (283,154 samples, 0.28%)</title><rect x="31.8047%" y="165" width="0.2844%" height="15" fill="rgb(234,67,33)"/><text x="32.0547%" y="175.50"></text></g><g><title>dropck_outlives (139,122 samples, 0.14%)</title><rect x="32.1317%" y="165" width="0.1397%" height="15" fill="rgb(247,98,35)"/><text x="32.3817%" y="175.50"></text></g><g><title>predicates_of (103,202 samples, 0.10%)</title><rect x="33.0309%" y="149" width="0.1036%" height="15" fill="rgb(247,138,52)"/><text x="33.2809%" y="159.50"></text></g><g><title>trait_impls_of (598,808 samples, 0.60%)</title><rect x="33.2385%" y="149" width="0.6014%" height="15" fill="rgb(213,79,30)"/><text x="33.4885%" y="159.50"></text></g><g><title>implementations_of_trait (193,057 samples, 0.19%)</title><rect x="33.6460%" y="133" width="0.1939%" height="15" fill="rgb(246,177,23)"/><text x="33.8960%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (144,664 samples, 0.15%)</title><rect x="33.6946%" y="117" width="0.1453%" height="15" fill="rgb(230,62,27)"/><text x="33.9446%" y="127.50"></text></g><g><title>evaluate_obligation (1,562,375 samples, 1.57%)</title><rect x="32.2714%" y="165" width="1.5691%" height="15" fill="rgb(216,154,8)"/><text x="32.5214%" y="175.50"></text></g><g><title>fn_sig (106,030 samples, 0.11%)</title><rect x="33.8588%" y="165" width="0.1065%" height="15" fill="rgb(244,35,45)"/><text x="34.1088%" y="175.50"></text></g><g><title>item_attrs (118,712 samples, 0.12%)</title><rect x="34.1208%" y="165" width="0.1192%" height="15" fill="rgb(251,115,12)"/><text x="34.3708%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (112,781 samples, 0.11%)</title><rect x="34.1267%" y="149" width="0.1133%" height="15" fill="rgb(240,54,50)"/><text x="34.3767%" y="159.50"></text></g><g><title>method_autoderef_steps (138,761 samples, 0.14%)</title><rect x="34.2834%" y="165" width="0.1394%" height="15" fill="rgb(233,84,52)"/><text x="34.5334%" y="175.50"></text></g><g><title>predicates_of (244,120 samples, 0.25%)</title><rect x="34.4486%" y="165" width="0.2452%" height="15" fill="rgb(207,117,47)"/><text x="34.6986%" y="175.50"></text></g><g><title>predicates_defined_on (163,390 samples, 0.16%)</title><rect x="34.5297%" y="149" width="0.1641%" height="15" fill="rgb(249,43,39)"/><text x="34.7797%" y="159.50"></text></g><g><title>adt_def (124,151 samples, 0.12%)</title><rect x="44.0885%" y="117" width="0.1247%" height="15" fill="rgb(209,38,44)"/><text x="44.3385%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (123,711 samples, 0.12%)</title><rect x="44.0890%" y="101" width="0.1242%" height="15" fill="rgb(236,212,23)"/><text x="44.3390%" y="111.50"></text></g><g><title>adt_sized_constraint (139,741 samples, 0.14%)</title><rect x="44.0867%" y="133" width="0.1403%" height="15" fill="rgb(242,79,21)"/><text x="44.3367%" y="143.50"></text></g><g><title>adt_sized_constraint (231,282 samples, 0.23%)</title><rect x="44.0004%" y="149" width="0.2323%" height="15" fill="rgb(211,96,35)"/><text x="44.2504%" y="159.50"></text></g><g><title>associated_item (285,693 samples, 0.29%)</title><rect x="44.3516%" y="133" width="0.2869%" height="15" fill="rgb(253,215,40)"/><text x="44.6016%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (217,172 samples, 0.22%)</title><rect x="44.4204%" y="117" width="0.2181%" height="15" fill="rgb(211,81,21)"/><text x="44.6704%" y="127.50"></text></g><g><title>associated_items (420,103 samples, 0.42%)</title><rect x="44.2363%" y="149" width="0.4219%" height="15" fill="rgb(208,190,38)"/><text x="44.4863%" y="159.50"></text></g><g><title>adt_def (105,081 samples, 0.11%)</title><rect x="44.8502%" y="117" width="0.1055%" height="15" fill="rgb(235,213,38)"/><text x="45.1002%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (103,891 samples, 0.10%)</title><rect x="44.8514%" y="101" width="0.1043%" height="15" fill="rgb(237,122,38)"/><text x="45.1014%" y="111.50"></text></g><g><title>adt_dtorck_constraint (110,491 samples, 0.11%)</title><rect x="45.3174%" y="85" width="0.1110%" height="15" fill="rgb(244,218,35)"/><text x="45.5674%" y="95.50"></text></g><g><title>adt_dtorck_constraint (180,801 samples, 0.18%)</title><rect x="45.2694%" y="101" width="0.1816%" height="15" fill="rgb(240,68,47)"/><text x="45.5194%" y="111.50"></text></g><g><title>adt_dtorck_constraint (490,725 samples, 0.49%)</title><rect x="44.9759%" y="117" width="0.4928%" height="15" fill="rgb(210,16,53)"/><text x="45.2259%" y="127.50"></text></g><g><title>adt_dtorck_constraint (679,837 samples, 0.68%)</title><rect x="44.8176%" y="133" width="0.6828%" height="15" fill="rgb(235,124,12)"/><text x="45.0676%" y="143.50"></text></g><g><title>dropck_outlives (853,350 samples, 0.86%)</title><rect x="44.6892%" y="149" width="0.8570%" height="15" fill="rgb(224,169,11)"/><text x="44.9392%" y="159.50"></text></g><g><title>adt_sized_constraint (132,582 samples, 0.13%)</title><rect x="48.5746%" y="117" width="0.1332%" height="15" fill="rgb(250,166,2)"/><text x="48.8246%" y="127.50"></text></g><g><title>adt_sized_constraint (259,623 samples, 0.26%)</title><rect x="48.4647%" y="133" width="0.2607%" height="15" fill="rgb(242,216,29)"/><text x="48.7147%" y="143.50"></text></g><g><title>generics_of (976,259 samples, 0.98%)</title><rect x="48.7262%" y="133" width="0.9804%" height="15" fill="rgb(230,116,27)"/><text x="48.9762%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (779,428 samples, 0.78%)</title><rect x="48.9239%" y="117" width="0.7828%" height="15" fill="rgb(228,99,48)"/><text x="49.1739%" y="127.50"></text></g><g><title>impl_trait_ref (1,752,202 samples, 1.76%)</title><rect x="49.7521%" y="133" width="1.7597%" height="15" fill="rgb(253,11,6)"/><text x="50.0021%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,556,987 samples, 1.56%)</title><rect x="49.9481%" y="117" width="1.5637%" height="15" fill="rgb(247,143,39)"/><text x="50.1981%" y="127.50"></text></g><g><title>predicates_of (252,711 samples, 0.25%)</title><rect x="51.5268%" y="133" width="0.2538%" height="15" fill="rgb(236,97,10)"/><text x="51.7768%" y="143.50"></text></g><g><title>predicates_defined_on (151,371 samples, 0.15%)</title><rect x="51.6286%" y="117" width="0.1520%" height="15" fill="rgb(233,208,19)"/><text x="51.8786%" y="127.50"></text></g><g><title>specializes (444,804 samples, 0.45%)</title><rect x="51.7806%" y="133" width="0.4467%" height="15" fill="rgb(216,164,2)"/><text x="52.0306%" y="143.50"></text></g><g><title>param_env (251,542 samples, 0.25%)</title><rect x="51.9747%" y="117" width="0.2526%" height="15" fill="rgb(220,129,5)"/><text x="52.2247%" y="127.50"></text></g><g><title>trait_impls_of (281,213 samples, 0.28%)</title><rect x="52.2358%" y="133" width="0.2824%" height="15" fill="rgb(242,17,10)"/><text x="52.4858%" y="143.50"></text></g><g><title>implementations_of_trait (102,650 samples, 0.10%)</title><rect x="52.4152%" y="117" width="0.1031%" height="15" fill="rgb(242,107,0)"/><text x="52.6652%" y="127.50"></text></g><g><title>evaluate_obligation (6,959,550 samples, 6.99%)</title><rect x="45.5463%" y="149" width="6.9894%" height="15" fill="rgb(251,28,31)"/><text x="45.7963%" y="159.50">evaluate_..</text></g><g><title>is_copy_raw (306,142 samples, 0.31%)</title><rect x="52.8953%" y="149" width="0.3075%" height="15" fill="rgb(233,223,10)"/><text x="53.1453%" y="159.50"></text></g><g><title>evaluate_obligation (286,962 samples, 0.29%)</title><rect x="52.9146%" y="133" width="0.2882%" height="15" fill="rgb(215,21,27)"/><text x="53.1646%" y="143.50"></text></g><g><title>trait_impls_of (171,802 samples, 0.17%)</title><rect x="53.0303%" y="117" width="0.1725%" height="15" fill="rgb(232,23,21)"/><text x="53.2803%" y="127.50"></text></g><g><title>evaluate_obligation (133,442 samples, 0.13%)</title><rect x="53.3658%" y="133" width="0.1340%" height="15" fill="rgb(244,5,23)"/><text x="53.6158%" y="143.50"></text></g><g><title>method_autoderef_steps (255,784 samples, 0.26%)</title><rect x="53.2527%" y="149" width="0.2569%" height="15" fill="rgb(226,81,46)"/><text x="53.5027%" y="159.50"></text></g><g><title>explicit_predicates_of (114,431 samples, 0.11%)</title><rect x="53.6159%" y="117" width="0.1149%" height="15" fill="rgb(247,70,30)"/><text x="53.8659%" y="127.50"></text></g><g><title>predicates_of (238,935 samples, 0.24%)</title><rect x="53.5270%" y="149" width="0.2400%" height="15" fill="rgb(212,68,19)"/><text x="53.7770%" y="159.50"></text></g><g><title>predicates_defined_on (186,583 samples, 0.19%)</title><rect x="53.5795%" y="133" width="0.1874%" height="15" fill="rgb(240,187,13)"/><text x="53.8295%" y="143.50"></text></g><g><title>typeck (19,078,893 samples, 19.16%)</title><rect x="34.7538%" y="165" width="19.1607%" height="15" fill="rgb(223,113,26)"/><text x="35.0038%" y="175.50">typeck</text></g><g><title>item_bodies_checking (29,704,643 samples, 29.83%)</title><rect x="24.1003%" y="213" width="29.8321%" height="15" fill="rgb(206,192,2)"/><text x="24.3503%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,701,233 samples, 29.83%)</title><rect x="24.1038%" y="197" width="29.8287%" height="15" fill="rgb(241,108,4)"/><text x="24.3538%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (29,671,783 samples, 29.80%)</title><rect x="24.1333%" y="181" width="29.7991%" height="15" fill="rgb(247,173,49)"/><text x="24.3833%" y="191.50">typeck</text></g><g><title>impl_trait_ref (287,494 samples, 0.29%)</title><rect x="54.3985%" y="53" width="0.2887%" height="15" fill="rgb(224,114,35)"/><text x="54.6485%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (266,594 samples, 0.27%)</title><rect x="54.4194%" y="37" width="0.2677%" height="15" fill="rgb(245,159,27)"/><text x="54.6694%" y="47.50"></text></g><g><title>coherent_trait (482,046 samples, 0.48%)</title><rect x="54.2275%" y="85" width="0.4841%" height="15" fill="rgb(245,172,44)"/><text x="54.4775%" y="95.50"></text></g><g><title>specialization_graph_of (478,586 samples, 0.48%)</title><rect x="54.2310%" y="69" width="0.4806%" height="15" fill="rgb(236,23,11)"/><text x="54.4810%" y="79.50"></text></g><g><title>adt_destructor (493,546 samples, 0.50%)</title><rect x="54.2211%" y="117" width="0.4957%" height="15" fill="rgb(205,117,38)"/><text x="54.4711%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (493,076 samples, 0.50%)</title><rect x="54.2216%" y="101" width="0.4952%" height="15" fill="rgb(237,72,25)"/><text x="54.4716%" y="111.50"></text></g><g><title>adt_dtorck_constraint (505,826 samples, 0.51%)</title><rect x="54.2111%" y="133" width="0.5080%" height="15" fill="rgb(244,70,9)"/><text x="54.4611%" y="143.50"></text></g><g><title>dropck_outlives (550,587 samples, 0.55%)</title><rect x="54.1706%" y="165" width="0.5529%" height="15" fill="rgb(217,125,39)"/><text x="54.4206%" y="175.50"></text></g><g><title>adt_dtorck_constraint (527,937 samples, 0.53%)</title><rect x="54.1933%" y="149" width="0.5302%" height="15" fill="rgb(235,36,10)"/><text x="54.4433%" y="159.50"></text></g><g><title>item_types_checking (824,509 samples, 0.83%)</title><rect x="53.9324%" y="213" width="0.8280%" height="15" fill="rgb(251,123,47)"/><text x="54.1824%" y="223.50"></text></g><g><title>check_mod_item_types (822,619 samples, 0.83%)</title><rect x="53.9343%" y="197" width="0.8261%" height="15" fill="rgb(221,13,13)"/><text x="54.1843%" y="207.50"></text></g><g><title>typeck (695,758 samples, 0.70%)</title><rect x="54.0617%" y="181" width="0.6987%" height="15" fill="rgb(238,131,9)"/><text x="54.3117%" y="191.50"></text></g><g><title>late_bound_vars_map (106,461 samples, 0.11%)</title><rect x="54.9473%" y="165" width="0.1069%" height="15" fill="rgb(211,50,8)"/><text x="55.1973%" y="175.50"></text></g><g><title>fn_sig (193,873 samples, 0.19%)</title><rect x="54.8726%" y="181" width="0.1947%" height="15" fill="rgb(245,182,24)"/><text x="55.1226%" y="191.50"></text></g><g><title>explicit_predicates_of (121,840 samples, 0.12%)</title><rect x="55.1830%" y="149" width="0.1224%" height="15" fill="rgb(242,14,37)"/><text x="55.4330%" y="159.50"></text></g><g><title>predicates_of (235,220 samples, 0.24%)</title><rect x="55.1382%" y="181" width="0.2362%" height="15" fill="rgb(246,228,12)"/><text x="55.3882%" y="191.50"></text></g><g><title>predicates_defined_on (218,300 samples, 0.22%)</title><rect x="55.1552%" y="165" width="0.2192%" height="15" fill="rgb(213,55,15)"/><text x="55.4052%" y="175.50"></text></g><g><title>type_collecting (680,008 samples, 0.68%)</title><rect x="54.7622%" y="213" width="0.6829%" height="15" fill="rgb(209,9,3)"/><text x="55.0122%" y="223.50"></text></g><g><title>collect_mod_item_types (665,598 samples, 0.67%)</title><rect x="54.7767%" y="197" width="0.6685%" height="15" fill="rgb(230,59,30)"/><text x="55.0267%" y="207.50"></text></g><g><title>evaluate_obligation (169,882 samples, 0.17%)</title><rect x="55.7573%" y="181" width="0.1706%" height="15" fill="rgb(209,121,21)"/><text x="56.0073%" y="191.50"></text></g><g><title>check_impl_item_well_formed (618,168 samples, 0.62%)</title><rect x="55.5108%" y="197" width="0.6208%" height="15" fill="rgb(220,109,13)"/><text x="55.7608%" y="207.50"></text></g><g><title>region_scope_tree (116,742 samples, 0.12%)</title><rect x="56.0144%" y="181" width="0.1172%" height="15" fill="rgb(232,18,1)"/><text x="56.2644%" y="191.50"></text></g><g><title>adt_def (101,752 samples, 0.10%)</title><rect x="56.6977%" y="133" width="0.1022%" height="15" fill="rgb(215,41,42)"/><text x="56.9477%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (100,992 samples, 0.10%)</title><rect x="56.6985%" y="117" width="0.1014%" height="15" fill="rgb(224,123,36)"/><text x="56.9485%" y="127.50"></text></g><g><title>adt_sized_constraint (117,552 samples, 0.12%)</title><rect x="56.6940%" y="149" width="0.1181%" height="15" fill="rgb(240,125,3)"/><text x="56.9440%" y="159.50"></text></g><g><title>adt_sized_constraint (221,453 samples, 0.22%)</title><rect x="56.6062%" y="165" width="0.2224%" height="15" fill="rgb(205,98,50)"/><text x="56.8562%" y="175.50"></text></g><g><title>evaluate_obligation (387,785 samples, 0.39%)</title><rect x="56.5017%" y="181" width="0.3894%" height="15" fill="rgb(205,185,37)"/><text x="56.7517%" y="191.50"></text></g><g><title>param_env (190,543 samples, 0.19%)</title><rect x="56.9605%" y="181" width="0.1914%" height="15" fill="rgb(238,207,15)"/><text x="57.2105%" y="191.50"></text></g><g><title>region_scope_tree (100,761 samples, 0.10%)</title><rect x="57.1811%" y="181" width="0.1012%" height="15" fill="rgb(213,199,42)"/><text x="57.4311%" y="191.50"></text></g><g><title>analysis (56,421,193 samples, 56.66%)</title><rect x="0.6720%" y="245" width="56.6632%" height="15" fill="rgb(235,201,11)"/><text x="0.9220%" y="255.50">analysis</text></g><g><title>type_check_crate (33,170,442 samples, 33.31%)</title><rect x="24.0225%" y="229" width="33.3127%" height="15" fill="rgb(207,46,11)"/><text x="24.2725%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,879,871 samples, 1.89%)</title><rect x="55.4473%" y="213" width="1.8879%" height="15" fill="rgb(241,35,35)"/><text x="55.6973%" y="223.50">w..</text></g><g><title>check_item_well_formed (1,198,463 samples, 1.20%)</title><rect x="56.1316%" y="197" width="1.2036%" height="15" fill="rgb(243,32,47)"/><text x="56.3816%" y="207.50"></text></g><g><title>codegen_crate (554,527 samples, 0.56%)</title><rect x="57.3476%" y="245" width="0.5569%" height="15" fill="rgb(247,202,23)"/><text x="57.5976%" y="255.50"></text></g><g><title>AST_validation (178,292 samples, 0.18%)</title><rect x="58.1270%" y="229" width="0.1791%" height="15" fill="rgb(219,102,11)"/><text x="58.3770%" y="239.50"></text></g><g><title>metadata_load_macro (193,343 samples, 0.19%)</title><rect x="80.2029%" y="197" width="0.1942%" height="15" fill="rgb(243,110,44)"/><text x="80.4529%" y="207.50"></text></g><g><title>metadata_register_crate (2,649,239 samples, 2.66%)</title><rect x="80.3971%" y="197" width="2.6606%" height="15" fill="rgb(222,74,54)"/><text x="80.6471%" y="207.50">me..</text></g><g><title>metadata_register_crate (943,099 samples, 0.95%)</title><rect x="82.1106%" y="181" width="0.9471%" height="15" fill="rgb(216,99,12)"/><text x="82.3606%" y="191.50"></text></g><g><title>macro_expand_crate (24,722,957 samples, 24.83%)</title><rect x="58.4342%" y="229" width="24.8290%" height="15" fill="rgb(226,22,26)"/><text x="58.6842%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (24,706,407 samples, 24.81%)</title><rect x="58.4508%" y="213" width="24.8124%" height="15" fill="rgb(217,163,10)"/><text x="58.7008%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (204,612 samples, 0.21%)</title><rect x="83.0577%" y="197" width="0.2055%" height="15" fill="rgb(213,25,53)"/><text x="83.3077%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (263,703 samples, 0.26%)</title><rect x="83.2691%" y="229" width="0.2648%" height="15" fill="rgb(252,105,26)"/><text x="83.5191%" y="239.50"></text></g><g><title>finalize_macro_resolutions (235,733 samples, 0.24%)</title><rect x="83.6011%" y="213" width="0.2367%" height="15" fill="rgb(220,39,43)"/><text x="83.8511%" y="223.50"></text></g><g><title>late_resolve_crate (5,782,715 samples, 5.81%)</title><rect x="83.8378%" y="213" width="5.8075%" height="15" fill="rgb(229,68,48)"/><text x="84.0878%" y="223.50">late_re..</text></g><g><title>configure_and_expand (31,671,675 samples, 31.81%)</title><rect x="57.9045%" y="245" width="31.8076%" height="15" fill="rgb(252,8,32)"/><text x="58.1545%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (6,151,709 samples, 6.18%)</title><rect x="83.5339%" y="229" width="6.1781%" height="15" fill="rgb(223,20,43)"/><text x="83.7839%" y="239.50">resolve_..</text></g><g><title>drop_ast (127,751 samples, 0.13%)</title><rect x="89.7120%" y="245" width="0.1283%" height="15" fill="rgb(229,81,49)"/><text x="89.9620%" y="255.50"></text></g><g><title>early_lint_checks (246,213 samples, 0.25%)</title><rect x="89.8604%" y="245" width="0.2473%" height="15" fill="rgb(236,28,36)"/><text x="90.1104%" y="255.50"></text></g><g><title>free_global_ctxt (3,378,148 samples, 3.39%)</title><rect x="90.1077%" y="245" width="3.3926%" height="15" fill="rgb(249,185,26)"/><text x="90.3577%" y="255.50">fre..</text></g><g><title>generate_crate_metadata (506,485 samples, 0.51%)</title><rect x="93.5003%" y="245" width="0.5087%" height="15" fill="rgb(249,174,33)"/><text x="93.7503%" y="255.50"></text></g><g><title>hir_lowering (1,393,865 samples, 1.40%)</title><rect x="94.0090%" y="245" width="1.3998%" height="15" fill="rgb(233,201,37)"/><text x="94.2590%" y="255.50"></text></g><g><title>parse_crate (3,270,337 samples, 3.28%)</title><rect x="95.4549%" y="245" width="3.2844%" height="15" fill="rgb(221,78,26)"/><text x="95.7049%" y="255.50">par..</text></g><g><title>prepare_outputs (222,692 samples, 0.22%)</title><rect x="98.7489%" y="245" width="0.2236%" height="15" fill="rgb(250,127,30)"/><text x="98.9989%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (571,526 samples, 0.57%)</title><rect x="98.9725%" y="245" width="0.5740%" height="15" fill="rgb(230,49,44)"/><text x="99.2225%" y="255.50"></text></g><g><title>all (99,572,816 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (99,572,816 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (348,824 samples, 0.35%)</title><rect x="99.6497%" y="245" width="0.3503%" height="15" fill="rgb(215,43,3)"/><text x="99.8997%" y="255.50"></text></g></svg></svg>