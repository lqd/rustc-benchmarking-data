<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (185,462 samples, 0.17%)</title><rect x="8.5668%" y="149" width="0.1680%" height="15" fill="rgb(227,0,7)"/><text x="8.8168%" y="159.50"></text></g><g><title>param_env (312,942 samples, 0.28%)</title><rect x="10.0715%" y="117" width="0.2835%" height="15" fill="rgb(217,0,24)"/><text x="10.3215%" y="127.50"></text></g><g><title>item_attrs (274,092 samples, 0.25%)</title><rect x="10.7763%" y="85" width="0.2483%" height="15" fill="rgb(221,193,54)"/><text x="11.0263%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (264,162 samples, 0.24%)</title><rect x="10.7852%" y="69" width="0.2393%" height="15" fill="rgb(248,212,6)"/><text x="11.0352%" y="79.50"></text></g><g><title>codegen_fn_attrs (389,055 samples, 0.35%)</title><rect x="10.6861%" y="101" width="0.3525%" height="15" fill="rgb(208,68,35)"/><text x="10.9361%" y="111.50"></text></g><g><title>is_copy_raw (168,862 samples, 0.15%)</title><rect x="12.6805%" y="85" width="0.1530%" height="15" fill="rgb(232,128,0)"/><text x="12.9305%" y="95.50"></text></g><g><title>evaluate_obligation (136,312 samples, 0.12%)</title><rect x="12.7100%" y="69" width="0.1235%" height="15" fill="rgb(207,160,47)"/><text x="12.9600%" y="79.50"></text></g><g><title>needs_drop_raw (847,218 samples, 0.77%)</title><rect x="12.8335%" y="85" width="0.7676%" height="15" fill="rgb(228,23,34)"/><text x="13.0835%" y="95.50"></text></g><g><title>is_copy_raw (652,196 samples, 0.59%)</title><rect x="13.0102%" y="69" width="0.5909%" height="15" fill="rgb(218,30,26)"/><text x="13.2602%" y="79.50"></text></g><g><title>evaluate_obligation (511,875 samples, 0.46%)</title><rect x="13.1373%" y="53" width="0.4638%" height="15" fill="rgb(220,122,19)"/><text x="13.3873%" y="63.50"></text></g><g><title>impl_parent (178,282 samples, 0.16%)</title><rect x="14.2180%" y="53" width="0.1615%" height="15" fill="rgb(250,228,42)"/><text x="14.4680%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (120,991 samples, 0.11%)</title><rect x="14.2699%" y="37" width="0.1096%" height="15" fill="rgb(240,193,28)"/><text x="14.5199%" y="47.50"></text></g><g><title>specialization_graph_of (1,047,662 samples, 0.95%)</title><rect x="13.7883%" y="69" width="0.9492%" height="15" fill="rgb(216,20,37)"/><text x="14.0383%" y="79.50"></text></g><g><title>impl_trait_ref (395,115 samples, 0.36%)</title><rect x="14.3795%" y="53" width="0.3580%" height="15" fill="rgb(206,188,39)"/><text x="14.6295%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (338,835 samples, 0.31%)</title><rect x="14.4305%" y="37" width="0.3070%" height="15" fill="rgb(217,207,13)"/><text x="14.6805%" y="47.50"></text></g><g><title>resolve_instance (1,320,354 samples, 1.20%)</title><rect x="13.6010%" y="85" width="1.1962%" height="15" fill="rgb(231,73,38)"/><text x="13.8510%" y="95.50"></text></g><g><title>thir_body (666,569 samples, 0.60%)</title><rect x="14.8212%" y="85" width="0.6039%" height="15" fill="rgb(225,20,46)"/><text x="15.0712%" y="95.50"></text></g><g><title>mir_const (6,604,090 samples, 5.98%)</title><rect x="9.4600%" y="133" width="5.9833%" height="15" fill="rgb(210,31,41)"/><text x="9.7100%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (5,616,200 samples, 5.09%)</title><rect x="10.3550%" y="117" width="5.0882%" height="15" fill="rgb(221,200,47)"/><text x="10.6050%" y="127.50">unsafe..</text></g><g><title>mir_built (4,861,673 samples, 4.40%)</title><rect x="11.0386%" y="101" width="4.4046%" height="15" fill="rgb(226,26,5)"/><text x="11.2886%" y="111.50">mir_b..</text></g><g><title>is_freeze_raw (155,651 samples, 0.14%)</title><rect x="15.7958%" y="117" width="0.1410%" height="15" fill="rgb(249,33,26)"/><text x="16.0458%" y="127.50"></text></g><g><title>evaluate_obligation (140,401 samples, 0.13%)</title><rect x="15.8096%" y="101" width="0.1272%" height="15" fill="rgb(235,183,28)"/><text x="16.0596%" y="111.50"></text></g><g><title>needs_drop_raw (180,293 samples, 0.16%)</title><rect x="16.1276%" y="69" width="0.1633%" height="15" fill="rgb(221,5,38)"/><text x="16.3776%" y="79.50"></text></g><g><title>mir_const (438,125 samples, 0.40%)</title><rect x="15.9428%" y="117" width="0.3969%" height="15" fill="rgb(247,18,42)"/><text x="16.1928%" y="127.50"></text></g><g><title>unsafety_check_result (364,425 samples, 0.33%)</title><rect x="16.0095%" y="101" width="0.3302%" height="15" fill="rgb(241,131,45)"/><text x="16.2595%" y="111.50"></text></g><g><title>mir_built (334,255 samples, 0.30%)</title><rect x="16.0369%" y="85" width="0.3028%" height="15" fill="rgb(249,31,29)"/><text x="16.2869%" y="95.50"></text></g><g><title>mir_promoted (8,298,863 samples, 7.52%)</title><rect x="8.8504%" y="149" width="7.5187%" height="15" fill="rgb(225,111,53)"/><text x="9.1004%" y="159.50">mir_promot..</text></g><g><title>mir_const_qualif (1,021,882 samples, 0.93%)</title><rect x="15.4433%" y="133" width="0.9258%" height="15" fill="rgb(238,160,17)"/><text x="15.6933%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (434,693 samples, 0.39%)</title><rect x="16.3691%" y="149" width="0.3938%" height="15" fill="rgb(214,148,48)"/><text x="16.6191%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (174,152 samples, 0.16%)</title><rect x="16.7629%" y="149" width="0.1578%" height="15" fill="rgb(232,36,49)"/><text x="17.0129%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,132,046 samples, 1.93%)</title><rect x="16.9207%" y="149" width="1.9316%" height="15" fill="rgb(209,103,24)"/><text x="17.1707%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (19,516,716 samples, 17.68%)</title><rect x="1.1773%" y="181" width="17.6820%" height="15" fill="rgb(229,88,8)"/><text x="1.4273%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (19,406,425 samples, 17.58%)</title><rect x="1.2773%" y="165" width="17.5821%" height="15" fill="rgb(213,181,19)"/><text x="1.5273%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (384,775 samples, 0.35%)</title><rect x="18.8593%" y="181" width="0.3486%" height="15" fill="rgb(254,191,54)"/><text x="19.1093%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (320,944 samples, 0.29%)</title><rect x="18.9172%" y="165" width="0.2908%" height="15" fill="rgb(241,83,37)"/><text x="19.1672%" y="175.50"></text></g><g><title>hir_module_items (325,036 samples, 0.29%)</title><rect x="19.2079%" y="181" width="0.2945%" height="15" fill="rgb(233,36,39)"/><text x="19.4579%" y="191.50"></text></g><g><title>get_lang_items (122,301 samples, 0.11%)</title><rect x="20.2904%" y="101" width="0.1108%" height="15" fill="rgb(226,3,54)"/><text x="20.5404%" y="111.50"></text></g><g><title>item_attrs (122,152 samples, 0.11%)</title><rect x="20.4012%" y="101" width="0.1107%" height="15" fill="rgb(245,192,40)"/><text x="20.6512%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (111,012 samples, 0.10%)</title><rect x="20.4113%" y="85" width="0.1006%" height="15" fill="rgb(238,167,29)"/><text x="20.6613%" y="95.50"></text></g><g><title>codegen_fn_attrs (384,895 samples, 0.35%)</title><rect x="20.2449%" y="117" width="0.3487%" height="15" fill="rgb(232,182,51)"/><text x="20.4949%" y="127.50"></text></g><g><title>codegen_fn_attrs (743,977 samples, 0.67%)</title><rect x="19.9328%" y="149" width="0.6740%" height="15" fill="rgb(231,60,39)"/><text x="20.1828%" y="159.50"></text></g><g><title>should_inherit_track_caller (592,416 samples, 0.54%)</title><rect x="20.0701%" y="133" width="0.5367%" height="15" fill="rgb(208,69,12)"/><text x="20.3201%" y="143.50"></text></g><g><title>check_mod_attrs (1,146,364 samples, 1.04%)</title><rect x="19.5685%" y="165" width="1.0386%" height="15" fill="rgb(235,93,37)"/><text x="19.8185%" y="175.50"></text></g><g><title>check_mod_const_bodies (222,073 samples, 0.20%)</title><rect x="20.6071%" y="165" width="0.2012%" height="15" fill="rgb(213,116,39)"/><text x="20.8571%" y="175.50"></text></g><g><title>lookup_deprecation_entry (309,513 samples, 0.28%)</title><rect x="21.2315%" y="149" width="0.2804%" height="15" fill="rgb(222,207,29)"/><text x="21.4815%" y="159.50"></text></g><g><title>stability_index (187,892 samples, 0.17%)</title><rect x="21.3417%" y="133" width="0.1702%" height="15" fill="rgb(206,96,30)"/><text x="21.5917%" y="143.50"></text></g><g><title>lookup_stability (112,692 samples, 0.10%)</title><rect x="21.5119%" y="149" width="0.1021%" height="15" fill="rgb(218,138,4)"/><text x="21.7619%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (831,119 samples, 0.75%)</title><rect x="20.9344%" y="165" width="0.7530%" height="15" fill="rgb(250,191,14)"/><text x="21.1844%" y="175.50"></text></g><g><title>misc_checking_1 (2,510,808 samples, 2.27%)</title><rect x="19.5029%" y="181" width="2.2748%" height="15" fill="rgb(239,60,40)"/><text x="19.7529%" y="191.50">m..</text></g><g><title>liveness_and_intrinsic_checking (384,235 samples, 0.35%)</title><rect x="21.7792%" y="165" width="0.3481%" height="15" fill="rgb(206,27,48)"/><text x="22.0292%" y="175.50"></text></g><g><title>check_mod_liveness (290,654 samples, 0.26%)</title><rect x="21.8639%" y="149" width="0.2633%" height="15" fill="rgb(225,35,8)"/><text x="22.1139%" y="159.50"></text></g><g><title>misc_checking_2 (749,409 samples, 0.68%)</title><rect x="21.7777%" y="181" width="0.6790%" height="15" fill="rgb(250,213,24)"/><text x="22.0277%" y="191.50"></text></g><g><title>match_checking (363,534 samples, 0.33%)</title><rect x="22.1273%" y="165" width="0.3294%" height="15" fill="rgb(247,123,22)"/><text x="22.3773%" y="175.50"></text></g><g><title>check_match (334,324 samples, 0.30%)</title><rect x="22.1537%" y="149" width="0.3029%" height="15" fill="rgb(231,138,38)"/><text x="22.4037%" y="159.50"></text></g><g><title>check_private_in_public (171,432 samples, 0.16%)</title><rect x="22.4649%" y="165" width="0.1553%" height="15" fill="rgb(231,145,46)"/><text x="22.7149%" y="175.50"></text></g><g><title>death_checking (327,684 samples, 0.30%)</title><rect x="22.6202%" y="165" width="0.2969%" height="15" fill="rgb(251,118,11)"/><text x="22.8702%" y="175.50"></text></g><g><title>param_env (249,893 samples, 0.23%)</title><rect x="23.6693%" y="133" width="0.2264%" height="15" fill="rgb(217,147,25)"/><text x="23.9193%" y="143.50"></text></g><g><title>crate_lints (2,170,044 samples, 1.97%)</title><rect x="22.9185%" y="149" width="1.9660%" height="15" fill="rgb(247,81,37)"/><text x="23.1685%" y="159.50">c..</text></g><g><title>type_of (1,081,520 samples, 0.98%)</title><rect x="23.9047%" y="133" width="0.9798%" height="15" fill="rgb(209,12,38)"/><text x="24.1547%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (851,470 samples, 0.77%)</title><rect x="24.1131%" y="117" width="0.7714%" height="15" fill="rgb(227,1,9)"/><text x="24.3631%" y="127.50"></text></g><g><title>lint_checking (2,466,348 samples, 2.23%)</title><rect x="22.9171%" y="165" width="2.2345%" height="15" fill="rgb(248,47,43)"/><text x="23.1671%" y="175.50">l..</text></g><g><title>module_lints (294,783 samples, 0.27%)</title><rect x="24.8845%" y="149" width="0.2671%" height="15" fill="rgb(221,10,30)"/><text x="25.1345%" y="159.50"></text></g><g><title>lint_mod (288,013 samples, 0.26%)</title><rect x="24.8907%" y="133" width="0.2609%" height="15" fill="rgb(210,229,1)"/><text x="25.1407%" y="143.50"></text></g><g><title>privacy_access_levels (229,992 samples, 0.21%)</title><rect x="25.1516%" y="165" width="0.2084%" height="15" fill="rgb(222,148,37)"/><text x="25.4016%" y="175.50"></text></g><g><title>privacy_checking_modules (533,496 samples, 0.48%)</title><rect x="25.3600%" y="165" width="0.4833%" height="15" fill="rgb(234,67,33)"/><text x="25.6100%" y="175.50"></text></g><g><title>check_mod_privacy (528,406 samples, 0.48%)</title><rect x="25.3646%" y="149" width="0.4787%" height="15" fill="rgb(247,98,35)"/><text x="25.6146%" y="159.50"></text></g><g><title>misc_checking_3 (3,753,342 samples, 3.40%)</title><rect x="22.4566%" y="181" width="3.4005%" height="15" fill="rgb(247,138,52)"/><text x="22.7066%" y="191.50">mis..</text></g><g><title>impl_parent (2,130,218 samples, 1.93%)</title><rect x="28.9576%" y="117" width="1.9300%" height="15" fill="rgb(213,79,30)"/><text x="29.2076%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,180,278 samples, 1.07%)</title><rect x="29.8183%" y="101" width="1.0693%" height="15" fill="rgb(246,177,23)"/><text x="30.0683%" y="111.50"></text></g><g><title>impl_trait_ref (5,789,416 samples, 5.25%)</title><rect x="30.8891%" y="117" width="5.2452%" height="15" fill="rgb(230,62,27)"/><text x="31.1391%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,033,421 samples, 4.56%)</title><rect x="31.5740%" y="101" width="4.5602%" height="15" fill="rgb(216,154,8)"/><text x="31.8240%" y="111.50">metad..</text></g><g><title>trait_impls_of (781,040 samples, 0.71%)</title><rect x="36.1867%" y="117" width="0.7076%" height="15" fill="rgb(244,35,45)"/><text x="36.4367%" y="127.50"></text></g><g><title>implementations_of_trait (199,991 samples, 0.18%)</title><rect x="36.7132%" y="101" width="0.1812%" height="15" fill="rgb(251,115,12)"/><text x="36.9632%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (157,901 samples, 0.14%)</title><rect x="36.7513%" y="85" width="0.1431%" height="15" fill="rgb(240,54,50)"/><text x="37.0013%" y="95.50"></text></g><g><title>coherent_trait (12,086,705 samples, 10.95%)</title><rect x="25.9450%" y="149" width="10.9505%" height="15" fill="rgb(233,84,52)"/><text x="26.1950%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (12,064,065 samples, 10.93%)</title><rect x="25.9655%" y="133" width="10.9300%" height="15" fill="rgb(207,117,47)"/><text x="26.2155%" y="143.50">specialization_g..</text></g><g><title>coherence_checking (12,246,727 samples, 11.10%)</title><rect x="25.9260%" y="165" width="11.0954%" height="15" fill="rgb(249,43,39)"/><text x="26.1760%" y="175.50">coherence_checki..</text></g><g><title>associated_item (178,632 samples, 0.16%)</title><rect x="46.5676%" y="101" width="0.1618%" height="15" fill="rgb(209,38,44)"/><text x="46.8176%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (143,581 samples, 0.13%)</title><rect x="46.5994%" y="85" width="0.1301%" height="15" fill="rgb(236,212,23)"/><text x="46.8494%" y="95.50"></text></g><g><title>associated_items (269,624 samples, 0.24%)</title><rect x="46.5037%" y="117" width="0.2443%" height="15" fill="rgb(242,79,21)"/><text x="46.7537%" y="127.50"></text></g><g><title>dropck_outlives (485,288 samples, 0.44%)</title><rect x="46.7935%" y="117" width="0.4397%" height="15" fill="rgb(211,96,35)"/><text x="47.0435%" y="127.50"></text></g><g><title>adt_dtorck_constraint (252,576 samples, 0.23%)</title><rect x="47.0043%" y="101" width="0.2288%" height="15" fill="rgb(253,215,40)"/><text x="47.2543%" y="111.50"></text></g><g><title>predicates_of (114,711 samples, 0.10%)</title><rect x="48.0358%" y="101" width="0.1039%" height="15" fill="rgb(211,81,21)"/><text x="48.2858%" y="111.50"></text></g><g><title>specializes (215,062 samples, 0.19%)</title><rect x="48.1398%" y="101" width="0.1948%" height="15" fill="rgb(208,190,38)"/><text x="48.3898%" y="111.50"></text></g><g><title>param_env (140,832 samples, 0.13%)</title><rect x="48.2070%" y="85" width="0.1276%" height="15" fill="rgb(235,213,38)"/><text x="48.4570%" y="95.50"></text></g><g><title>trait_impls_of (359,273 samples, 0.33%)</title><rect x="48.3414%" y="101" width="0.3255%" height="15" fill="rgb(237,122,38)"/><text x="48.5914%" y="111.50"></text></g><g><title>implementations_of_trait (126,850 samples, 0.11%)</title><rect x="48.5520%" y="85" width="0.1149%" height="15" fill="rgb(244,218,35)"/><text x="48.8020%" y="95.50"></text></g><g><title>evaluate_obligation (1,587,632 samples, 1.44%)</title><rect x="47.2331%" y="117" width="1.4384%" height="15" fill="rgb(240,68,47)"/><text x="47.4831%" y="127.50"></text></g><g><title>fn_sig (122,561 samples, 0.11%)</title><rect x="48.6928%" y="117" width="0.1110%" height="15" fill="rgb(210,16,53)"/><text x="48.9428%" y="127.50"></text></g><g><title>generics_of (149,852 samples, 0.14%)</title><rect x="48.8038%" y="117" width="0.1358%" height="15" fill="rgb(235,124,12)"/><text x="49.0538%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (116,682 samples, 0.11%)</title><rect x="48.8338%" y="101" width="0.1057%" height="15" fill="rgb(224,169,11)"/><text x="49.0838%" y="111.50"></text></g><g><title>item_attrs (585,338 samples, 0.53%)</title><rect x="49.0888%" y="117" width="0.5303%" height="15" fill="rgb(250,166,2)"/><text x="49.3388%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (578,638 samples, 0.52%)</title><rect x="49.0949%" y="101" width="0.5242%" height="15" fill="rgb(242,216,29)"/><text x="49.3449%" y="111.50"></text></g><g><title>method_autoderef_steps (398,356 samples, 0.36%)</title><rect x="49.6903%" y="117" width="0.3609%" height="15" fill="rgb(230,116,27)"/><text x="49.9403%" y="127.50"></text></g><g><title>evaluate_obligation (200,445 samples, 0.18%)</title><rect x="49.8696%" y="101" width="0.1816%" height="15" fill="rgb(228,99,48)"/><text x="50.1196%" y="111.50"></text></g><g><title>object_safety_violations (222,152 samples, 0.20%)</title><rect x="50.0512%" y="117" width="0.2013%" height="15" fill="rgb(253,11,6)"/><text x="50.3012%" y="127.50"></text></g><g><title>predicates_of (333,645 samples, 0.30%)</title><rect x="50.2952%" y="117" width="0.3023%" height="15" fill="rgb(247,143,39)"/><text x="50.5452%" y="127.50"></text></g><g><title>predicates_defined_on (239,525 samples, 0.22%)</title><rect x="50.3805%" y="101" width="0.2170%" height="15" fill="rgb(236,97,10)"/><text x="50.6305%" y="111.50"></text></g><g><title>associated_item (140,012 samples, 0.13%)</title><rect x="54.5174%" y="85" width="0.1268%" height="15" fill="rgb(233,208,19)"/><text x="54.7674%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (110,431 samples, 0.10%)</title><rect x="54.5442%" y="69" width="0.1000%" height="15" fill="rgb(216,164,2)"/><text x="54.7942%" y="79.50"></text></g><g><title>associated_items (200,843 samples, 0.18%)</title><rect x="54.4703%" y="101" width="0.1820%" height="15" fill="rgb(220,129,5)"/><text x="54.7203%" y="111.50"></text></g><g><title>evaluate_obligation (463,366 samples, 0.42%)</title><rect x="54.7156%" y="101" width="0.4198%" height="15" fill="rgb(242,17,10)"/><text x="54.9656%" y="111.50"></text></g><g><title>is_copy_raw (357,197 samples, 0.32%)</title><rect x="55.2511%" y="101" width="0.3236%" height="15" fill="rgb(242,107,0)"/><text x="55.5011%" y="111.50"></text></g><g><title>evaluate_obligation (317,727 samples, 0.29%)</title><rect x="55.2869%" y="85" width="0.2879%" height="15" fill="rgb(251,28,31)"/><text x="55.5369%" y="95.50"></text></g><g><title>trait_impls_of (143,352 samples, 0.13%)</title><rect x="55.4448%" y="69" width="0.1299%" height="15" fill="rgb(233,223,10)"/><text x="55.6948%" y="79.50"></text></g><g><title>method_autoderef_steps (157,652 samples, 0.14%)</title><rect x="55.5935%" y="101" width="0.1428%" height="15" fill="rgb(215,21,27)"/><text x="55.8435%" y="111.50"></text></g><g><title>typeck (5,649,063 samples, 5.12%)</title><rect x="50.7073%" y="117" width="5.1180%" height="15" fill="rgb(232,23,21)"/><text x="50.9573%" y="127.50">typeck</text></g><g><title>item_bodies_checking (20,726,811 samples, 18.78%)</title><rect x="37.0850%" y="165" width="18.7783%" height="15" fill="rgb(244,5,23)"/><text x="37.3350%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,723,771 samples, 18.78%)</title><rect x="37.0878%" y="149" width="18.7756%" height="15" fill="rgb(226,81,46)"/><text x="37.3378%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (20,647,791 samples, 18.71%)</title><rect x="37.1566%" y="133" width="18.7068%" height="15" fill="rgb(247,70,30)"/><text x="37.4066%" y="143.50">typeck</text></g><g><title>item_types_checking (464,605 samples, 0.42%)</title><rect x="55.8634%" y="165" width="0.4209%" height="15" fill="rgb(212,68,19)"/><text x="56.1134%" y="175.50"></text></g><g><title>check_mod_item_types (457,955 samples, 0.41%)</title><rect x="55.8694%" y="149" width="0.4149%" height="15" fill="rgb(240,187,13)"/><text x="56.1194%" y="159.50"></text></g><g><title>late_bound_vars_map (210,043 samples, 0.19%)</title><rect x="57.0415%" y="117" width="0.1903%" height="15" fill="rgb(223,113,26)"/><text x="57.2915%" y="127.50"></text></g><g><title>resolve_lifetimes (174,182 samples, 0.16%)</title><rect x="57.0740%" y="101" width="0.1578%" height="15" fill="rgb(206,192,2)"/><text x="57.3240%" y="111.50"></text></g><g><title>fn_sig (548,147 samples, 0.50%)</title><rect x="56.7732%" y="133" width="0.4966%" height="15" fill="rgb(241,108,4)"/><text x="57.0232%" y="143.50"></text></g><g><title>named_region_map (128,261 samples, 0.12%)</title><rect x="57.4850%" y="117" width="0.1162%" height="15" fill="rgb(247,173,49)"/><text x="57.7350%" y="127.50"></text></g><g><title>generics_of (393,465 samples, 0.36%)</title><rect x="57.2698%" y="133" width="0.3565%" height="15" fill="rgb(224,114,35)"/><text x="57.5198%" y="143.50"></text></g><g><title>late_bound_vars_map (576,956 samples, 0.52%)</title><rect x="58.3644%" y="85" width="0.5227%" height="15" fill="rgb(245,159,27)"/><text x="58.6144%" y="95.50"></text></g><g><title>resolve_lifetimes (558,286 samples, 0.51%)</title><rect x="58.3813%" y="69" width="0.5058%" height="15" fill="rgb(245,172,44)"/><text x="58.6313%" y="79.50"></text></g><g><title>lint_levels (187,972 samples, 0.17%)</title><rect x="58.7168%" y="53" width="0.1703%" height="15" fill="rgb(236,23,11)"/><text x="58.9668%" y="63.50"></text></g><g><title>explicit_predicates_of (1,103,455 samples, 1.00%)</title><rect x="57.9570%" y="101" width="0.9997%" height="15" fill="rgb(205,117,38)"/><text x="58.2070%" y="111.50"></text></g><g><title>predicates_of (1,980,353 samples, 1.79%)</title><rect x="57.7058%" y="133" width="1.7942%" height="15" fill="rgb(237,72,25)"/><text x="57.9558%" y="143.50">p..</text></g><g><title>predicates_defined_on (1,871,662 samples, 1.70%)</title><rect x="57.8043%" y="117" width="1.6957%" height="15" fill="rgb(244,70,9)"/><text x="58.0543%" y="127.50"></text></g><g><title>inferred_outlives_of (599,706 samples, 0.54%)</title><rect x="58.9567%" y="101" width="0.5433%" height="15" fill="rgb(217,125,39)"/><text x="59.2067%" y="111.50"></text></g><g><title>inferred_outlives_crate (559,186 samples, 0.51%)</title><rect x="58.9934%" y="85" width="0.5066%" height="15" fill="rgb(235,36,10)"/><text x="59.2434%" y="95.50"></text></g><g><title>type_of (302,473 samples, 0.27%)</title><rect x="59.2260%" y="69" width="0.2740%" height="15" fill="rgb(251,123,47)"/><text x="59.4760%" y="79.50"></text></g><g><title>type_of (191,362 samples, 0.17%)</title><rect x="59.3267%" y="53" width="0.1734%" height="15" fill="rgb(221,13,13)"/><text x="59.5767%" y="63.50"></text></g><g><title>type_collecting (3,816,532 samples, 3.46%)</title><rect x="56.2865%" y="165" width="3.4578%" height="15" fill="rgb(238,131,9)"/><text x="56.5365%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (3,783,632 samples, 3.43%)</title><rect x="56.3163%" y="149" width="3.4279%" height="15" fill="rgb(211,50,8)"/><text x="56.5663%" y="159.50">col..</text></g><g><title>type_of (244,751 samples, 0.22%)</title><rect x="59.5225%" y="133" width="0.2217%" height="15" fill="rgb(245,182,24)"/><text x="59.7725%" y="143.50"></text></g><g><title>evaluate_obligation (533,178 samples, 0.48%)</title><rect x="61.5604%" y="133" width="0.4831%" height="15" fill="rgb(242,14,37)"/><text x="61.8104%" y="143.50"></text></g><g><title>implied_outlives_bounds (329,792 samples, 0.30%)</title><rect x="62.0434%" y="133" width="0.2988%" height="15" fill="rgb(246,228,12)"/><text x="62.2934%" y="143.50"></text></g><g><title>param_env (296,863 samples, 0.27%)</title><rect x="62.3422%" y="133" width="0.2690%" height="15" fill="rgb(213,55,15)"/><text x="62.5922%" y="143.50"></text></g><g><title>region_scope_tree (257,341 samples, 0.23%)</title><rect x="62.6283%" y="133" width="0.2331%" height="15" fill="rgb(209,9,3)"/><text x="62.8783%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,296,081 samples, 2.99%)</title><rect x="59.8873%" y="149" width="2.9862%" height="15" fill="rgb(230,59,30)"/><text x="60.1373%" y="159.50">che..</text></g><g><title>adt_def (137,262 samples, 0.12%)</title><rect x="63.9633%" y="85" width="0.1244%" height="15" fill="rgb(209,121,21)"/><text x="64.2133%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (136,992 samples, 0.12%)</title><rect x="63.9636%" y="69" width="0.1241%" height="15" fill="rgb(220,109,13)"/><text x="64.2136%" y="79.50"></text></g><g><title>adt_sized_constraint (179,652 samples, 0.16%)</title><rect x="63.9624%" y="101" width="0.1628%" height="15" fill="rgb(232,18,1)"/><text x="64.2124%" y="111.50"></text></g><g><title>evaluate_obligation (498,536 samples, 0.45%)</title><rect x="63.6813%" y="133" width="0.4517%" height="15" fill="rgb(215,41,42)"/><text x="63.9313%" y="143.50"></text></g><g><title>adt_sized_constraint (288,533 samples, 0.26%)</title><rect x="63.8715%" y="117" width="0.2614%" height="15" fill="rgb(224,123,36)"/><text x="64.1215%" y="127.50"></text></g><g><title>param_env (198,093 samples, 0.18%)</title><rect x="64.2082%" y="133" width="0.1795%" height="15" fill="rgb(240,125,3)"/><text x="64.4582%" y="143.50"></text></g><g><title>analysis (70,382,814 samples, 63.77%)</title><rect x="0.7614%" y="197" width="63.7663%" height="15" fill="rgb(205,98,50)"/><text x="1.0114%" y="207.50">analysis</text></g><g><title>type_check_crate (42,683,165 samples, 38.67%)</title><rect x="25.8571%" y="181" width="38.6706%" height="15" fill="rgb(205,185,37)"/><text x="26.1071%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,274,378 samples, 4.78%)</title><rect x="59.7492%" y="165" width="4.7785%" height="15" fill="rgb(238,207,15)"/><text x="59.9992%" y="175.50">wf_che..</text></g><g><title>check_item_well_formed (1,825,893 samples, 1.65%)</title><rect x="62.8735%" y="149" width="1.6542%" height="15" fill="rgb(213,199,42)"/><text x="63.1235%" y="159.50"></text></g><g><title>codegen_crate (386,624 samples, 0.35%)</title><rect x="64.5363%" y="197" width="0.3503%" height="15" fill="rgb(235,201,11)"/><text x="64.7863%" y="207.50"></text></g><g><title>AST_validation (313,104 samples, 0.28%)</title><rect x="65.0755%" y="181" width="0.2837%" height="15" fill="rgb(207,46,11)"/><text x="65.3255%" y="191.50"></text></g><g><title>complete_gated_feature_checking (117,292 samples, 0.11%)</title><rect x="65.3592%" y="181" width="0.1063%" height="15" fill="rgb(241,35,35)"/><text x="65.6092%" y="191.50"></text></g><g><title>metadata_load_macro (197,641 samples, 0.18%)</title><rect x="83.2334%" y="149" width="0.1791%" height="15" fill="rgb(243,32,47)"/><text x="83.4834%" y="159.50"></text></g><g><title>metadata_register_crate (2,651,039 samples, 2.40%)</title><rect x="83.4124%" y="149" width="2.4018%" height="15" fill="rgb(247,202,23)"/><text x="83.6624%" y="159.50">me..</text></g><g><title>metadata_register_crate (975,511 samples, 0.88%)</title><rect x="84.9304%" y="133" width="0.8838%" height="15" fill="rgb(219,102,11)"/><text x="85.1804%" y="143.50"></text></g><g><title>macro_expand_crate (22,681,213 samples, 20.55%)</title><rect x="65.5368%" y="181" width="20.5490%" height="15" fill="rgb(243,110,44)"/><text x="65.7868%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (22,654,542 samples, 20.52%)</title><rect x="65.5610%" y="165" width="20.5249%" height="15" fill="rgb(222,74,54)"/><text x="65.8110%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (299,774 samples, 0.27%)</title><rect x="85.8142%" y="149" width="0.2716%" height="15" fill="rgb(216,99,12)"/><text x="86.0642%" y="159.50"></text></g><g><title>finalize_imports (127,791 samples, 0.12%)</title><rect x="86.1739%" y="165" width="0.1158%" height="15" fill="rgb(226,22,26)"/><text x="86.4239%" y="175.50"></text></g><g><title>late_resolve_crate (2,550,599 samples, 2.31%)</title><rect x="86.3662%" y="165" width="2.3108%" height="15" fill="rgb(217,163,10)"/><text x="86.6162%" y="175.50">l..</text></g><g><title>configure_and_expand (26,436,995 samples, 23.95%)</title><rect x="64.8865%" y="197" width="23.9517%" height="15" fill="rgb(213,25,53)"/><text x="65.1365%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,950,492 samples, 2.67%)</title><rect x="86.1651%" y="181" width="2.6731%" height="15" fill="rgb(252,105,26)"/><text x="86.4151%" y="191.50">re..</text></g><g><title>drop_ast (316,414 samples, 0.29%)</title><rect x="88.8383%" y="197" width="0.2867%" height="15" fill="rgb(220,39,43)"/><text x="89.0883%" y="207.50"></text></g><g><title>early_lint_checks (620,907 samples, 0.56%)</title><rect x="89.1398%" y="197" width="0.5625%" height="15" fill="rgb(229,68,48)"/><text x="89.3898%" y="207.50"></text></g><g><title>free_global_ctxt (3,330,458 samples, 3.02%)</title><rect x="89.7023%" y="197" width="3.0174%" height="15" fill="rgb(252,8,32)"/><text x="89.9523%" y="207.50">fre..</text></g><g><title>generate_crate_metadata (1,064,822 samples, 0.96%)</title><rect x="92.7197%" y="197" width="0.9647%" height="15" fill="rgb(223,20,43)"/><text x="92.9697%" y="207.50"></text></g><g><title>hir_lowering (4,590,391 samples, 4.16%)</title><rect x="93.6844%" y="197" width="4.1589%" height="15" fill="rgb(229,81,49)"/><text x="93.9344%" y="207.50">hir_l..</text></g><g><title>parse_crate (708,187 samples, 0.64%)</title><rect x="97.8981%" y="197" width="0.6416%" height="15" fill="rgb(236,28,36)"/><text x="98.1481%" y="207.50"></text></g><g><title>prepare_outputs (335,614 samples, 0.30%)</title><rect x="98.5487%" y="197" width="0.3041%" height="15" fill="rgb(249,185,26)"/><text x="98.7987%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (733,768 samples, 0.66%)</title><rect x="98.8528%" y="197" width="0.6648%" height="15" fill="rgb(249,174,33)"/><text x="99.1028%" y="207.50"></text></g><g><title>setup_global_ctxt (176,302 samples, 0.16%)</title><rect x="99.5292%" y="197" width="0.1597%" height="15" fill="rgb(233,201,37)"/><text x="99.7792%" y="207.50"></text></g><g><title>all (110,376,140 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (110,376,140 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (343,384 samples, 0.31%)</title><rect x="99.6889%" y="197" width="0.3111%" height="15" fill="rgb(230,49,44)"/><text x="99.9389%" y="207.50"></text></g></svg></svg>