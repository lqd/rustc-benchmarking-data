<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (691,757 samples, 0.12%)</title><rect x="13.0733%" y="181" width="0.1244%" height="15" fill="rgb(227,0,7)"/><text x="13.3233%" y="191.50"></text></g><g><title>param_env (953,063 samples, 0.17%)</title><rect x="14.4053%" y="149" width="0.1714%" height="15" fill="rgb(217,0,24)"/><text x="14.6553%" y="159.50"></text></g><g><title>item_attrs (683,173 samples, 0.12%)</title><rect x="14.9879%" y="117" width="0.1229%" height="15" fill="rgb(221,193,54)"/><text x="15.2379%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (653,363 samples, 0.12%)</title><rect x="14.9933%" y="101" width="0.1175%" height="15" fill="rgb(248,212,6)"/><text x="15.2433%" y="111.50"></text></g><g><title>codegen_fn_attrs (999,726 samples, 0.18%)</title><rect x="14.9405%" y="133" width="0.1798%" height="15" fill="rgb(208,68,35)"/><text x="15.1905%" y="143.50"></text></g><g><title>adt_drop_tys (1,306,593 samples, 0.24%)</title><rect x="18.2756%" y="101" width="0.2350%" height="15" fill="rgb(232,128,0)"/><text x="18.5256%" y="111.50"></text></g><g><title>needs_drop_raw (3,863,834 samples, 0.70%)</title><rect x="18.1913%" y="117" width="0.6951%" height="15" fill="rgb(207,160,47)"/><text x="18.4413%" y="127.50"></text></g><g><title>is_copy_raw (2,088,407 samples, 0.38%)</title><rect x="18.5107%" y="101" width="0.3757%" height="15" fill="rgb(228,23,34)"/><text x="18.7607%" y="111.50"></text></g><g><title>evaluate_obligation (1,671,759 samples, 0.30%)</title><rect x="18.5856%" y="85" width="0.3007%" height="15" fill="rgb(218,30,26)"/><text x="18.8356%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,885,101 samples, 0.52%)</title><rect x="18.9985%" y="101" width="0.5190%" height="15" fill="rgb(220,122,19)"/><text x="19.2485%" y="111.50"></text></g><g><title>specialization_graph_of (2,282,007 samples, 0.41%)</title><rect x="19.5482%" y="101" width="0.4105%" height="15" fill="rgb(250,228,42)"/><text x="19.7982%" y="111.50"></text></g><g><title>impl_trait_ref (961,489 samples, 0.17%)</title><rect x="19.7858%" y="85" width="0.1730%" height="15" fill="rgb(240,193,28)"/><text x="20.0358%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (769,808 samples, 0.14%)</title><rect x="19.8203%" y="69" width="0.1385%" height="15" fill="rgb(216,20,37)"/><text x="20.0703%" y="79.50"></text></g><g><title>resolve_instance (6,179,138 samples, 1.11%)</title><rect x="18.8863%" y="117" width="1.1116%" height="15" fill="rgb(206,188,39)"/><text x="19.1363%" y="127.50"></text></g><g><title>thir_body (6,230,364 samples, 1.12%)</title><rect x="20.0174%" y="117" width="1.1208%" height="15" fill="rgb(217,207,13)"/><text x="20.2674%" y="127.50"></text></g><g><title>mir_const (40,655,538 samples, 7.31%)</title><rect x="13.8376%" y="165" width="7.3135%" height="15" fill="rgb(231,73,38)"/><text x="14.0876%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (36,546,540 samples, 6.57%)</title><rect x="14.5768%" y="149" width="6.5743%" height="15" fill="rgb(225,20,46)"/><text x="14.8268%" y="159.50">unsafety_..</text></g><g><title>mir_built (33,524,801 samples, 6.03%)</title><rect x="15.1204%" y="133" width="6.0308%" height="15" fill="rgb(210,31,41)"/><text x="15.3704%" y="143.50">mir_built</text></g><g><title>mir_const (581,734 samples, 0.10%)</title><rect x="21.2251%" y="149" width="0.1046%" height="15" fill="rgb(221,200,47)"/><text x="21.4751%" y="159.50"></text></g><g><title>mir_const_qualif (993,881 samples, 0.18%)</title><rect x="21.1511%" y="165" width="0.1788%" height="15" fill="rgb(226,26,5)"/><text x="21.4011%" y="175.50"></text></g><g><title>mir_promoted (45,094,262 samples, 8.11%)</title><rect x="13.2189%" y="181" width="8.1120%" height="15" fill="rgb(249,33,26)"/><text x="13.4689%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,084,126 samples, 0.37%)</title><rect x="21.3309%" y="181" width="0.3749%" height="15" fill="rgb(235,183,28)"/><text x="21.5809%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (2,257,011 samples, 0.41%)</title><rect x="21.7058%" y="181" width="0.4060%" height="15" fill="rgb(221,5,38)"/><text x="21.9558%" y="191.50"></text></g><g><title>normalize_projection_ty (1,487,041 samples, 0.27%)</title><rect x="21.8443%" y="165" width="0.2675%" height="15" fill="rgb(247,18,42)"/><text x="22.0943%" y="175.50"></text></g><g><title>type_op_normalize_predicate (2,810,088 samples, 0.51%)</title><rect x="22.1118%" y="181" width="0.5055%" height="15" fill="rgb(241,131,45)"/><text x="22.3618%" y="191.50"></text></g><g><title>normalize_projection_ty (1,613,088 samples, 0.29%)</title><rect x="22.3272%" y="165" width="0.2902%" height="15" fill="rgb(249,31,29)"/><text x="22.5772%" y="175.50"></text></g><g><title>type_op_prove_predicate (10,044,720 samples, 1.81%)</title><rect x="22.6173%" y="181" width="1.8069%" height="15" fill="rgb(225,111,53)"/><text x="22.8673%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (133,465,753 samples, 24.01%)</title><rect x="0.4178%" y="213" width="24.0091%" height="15" fill="rgb(238,160,17)"/><text x="0.6678%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (133,132,921 samples, 23.95%)</title><rect x="0.4777%" y="197" width="23.9492%" height="15" fill="rgb(214,148,48)"/><text x="0.7277%" y="207.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,357,136 samples, 0.24%)</title><rect x="24.5933%" y="197" width="0.2441%" height="15" fill="rgb(232,36,49)"/><text x="24.8433%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (773,136 samples, 0.14%)</title><rect x="24.9363%" y="197" width="0.1391%" height="15" fill="rgb(209,103,24)"/><text x="25.1863%" y="207.50"></text></g><g><title>misc_checking_1 (2,794,111 samples, 0.50%)</title><rect x="24.5872%" y="213" width="0.5026%" height="15" fill="rgb(229,88,8)"/><text x="24.8372%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (2,496,048 samples, 0.45%)</title><rect x="25.0904%" y="197" width="0.4490%" height="15" fill="rgb(213,181,19)"/><text x="25.3404%" y="207.50"></text></g><g><title>check_mod_liveness (2,076,683 samples, 0.37%)</title><rect x="25.1658%" y="181" width="0.3736%" height="15" fill="rgb(254,191,54)"/><text x="25.4158%" y="191.50"></text></g><g><title>mir_borrowck (640,508 samples, 0.12%)</title><rect x="26.1158%" y="85" width="0.1152%" height="15" fill="rgb(241,83,37)"/><text x="26.3658%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,212,894 samples, 0.22%)</title><rect x="26.0133%" y="165" width="0.2182%" height="15" fill="rgb(233,36,39)"/><text x="26.2633%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,202,063 samples, 0.22%)</title><rect x="26.0153%" y="149" width="0.2162%" height="15" fill="rgb(226,3,54)"/><text x="26.2653%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,184,763 samples, 0.21%)</title><rect x="26.0184%" y="133" width="0.2131%" height="15" fill="rgb(245,192,40)"/><text x="26.2684%" y="143.50"></text></g><g><title>mir_for_ctfe (917,160 samples, 0.16%)</title><rect x="26.0665%" y="117" width="0.1650%" height="15" fill="rgb(238,167,29)"/><text x="26.3165%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (833,678 samples, 0.15%)</title><rect x="26.0816%" y="101" width="0.1500%" height="15" fill="rgb(232,182,51)"/><text x="26.3316%" y="111.50"></text></g><g><title>misc_checking_2 (7,004,378 samples, 1.26%)</title><rect x="25.0899%" y="213" width="1.2600%" height="15" fill="rgb(231,60,39)"/><text x="25.3399%" y="223.50"></text></g><g><title>match_checking (4,505,530 samples, 0.81%)</title><rect x="25.5394%" y="197" width="0.8105%" height="15" fill="rgb(208,69,12)"/><text x="25.7894%" y="207.50"></text></g><g><title>check_match (4,422,268 samples, 0.80%)</title><rect x="25.5544%" y="181" width="0.7955%" height="15" fill="rgb(235,93,37)"/><text x="25.8044%" y="191.50"></text></g><g><title>death_checking (1,062,522 samples, 0.19%)</title><rect x="26.4371%" y="197" width="0.1911%" height="15" fill="rgb(213,116,39)"/><text x="26.6871%" y="207.50"></text></g><g><title>param_env (627,497 samples, 0.11%)</title><rect x="27.0905%" y="165" width="0.1129%" height="15" fill="rgb(222,207,29)"/><text x="27.3405%" y="175.50"></text></g><g><title>crate_lints (3,668,560 samples, 0.66%)</title><rect x="26.6287%" y="181" width="0.6599%" height="15" fill="rgb(206,96,30)"/><text x="26.8787%" y="191.50"></text></g><g><title>layout_of (572,887 samples, 0.10%)</title><rect x="27.7550%" y="85" width="0.1031%" height="15" fill="rgb(218,138,4)"/><text x="28.0050%" y="95.50"></text></g><g><title>lint_checking (6,842,156 samples, 1.23%)</title><rect x="26.6282%" y="197" width="1.2308%" height="15" fill="rgb(250,191,14)"/><text x="26.8782%" y="207.50"></text></g><g><title>module_lints (3,171,266 samples, 0.57%)</title><rect x="27.2886%" y="181" width="0.5705%" height="15" fill="rgb(239,60,40)"/><text x="27.5386%" y="191.50"></text></g><g><title>lint_mod (3,162,316 samples, 0.57%)</title><rect x="27.2902%" y="165" width="0.5689%" height="15" fill="rgb(206,27,48)"/><text x="27.5402%" y="175.50"></text></g><g><title>layout_of (669,668 samples, 0.12%)</title><rect x="27.7386%" y="149" width="0.1205%" height="15" fill="rgb(225,35,8)"/><text x="27.9886%" y="159.50"></text></g><g><title>layout_of (651,888 samples, 0.12%)</title><rect x="27.7418%" y="133" width="0.1173%" height="15" fill="rgb(250,213,24)"/><text x="27.9918%" y="143.50"></text></g><g><title>layout_of (637,207 samples, 0.11%)</title><rect x="27.7444%" y="117" width="0.1146%" height="15" fill="rgb(247,123,22)"/><text x="27.9944%" y="127.50"></text></g><g><title>layout_of (623,397 samples, 0.11%)</title><rect x="27.7469%" y="101" width="0.1121%" height="15" fill="rgb(231,138,38)"/><text x="27.9969%" y="111.50"></text></g><g><title>privacy_checking_modules (3,980,124 samples, 0.72%)</title><rect x="27.9241%" y="197" width="0.7160%" height="15" fill="rgb(231,145,46)"/><text x="28.1741%" y="207.50"></text></g><g><title>check_mod_privacy (3,974,784 samples, 0.72%)</title><rect x="27.9250%" y="181" width="0.7150%" height="15" fill="rgb(251,118,11)"/><text x="28.1750%" y="191.50"></text></g><g><title>misc_checking_3 (12,750,232 samples, 2.29%)</title><rect x="26.3499%" y="213" width="2.2936%" height="15" fill="rgb(217,147,25)"/><text x="26.5999%" y="223.50">m..</text></g><g><title>impl_parent (2,752,144 samples, 0.50%)</title><rect x="29.2968%" y="149" width="0.4951%" height="15" fill="rgb(247,81,37)"/><text x="29.5468%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,413,478 samples, 0.25%)</title><rect x="29.5376%" y="133" width="0.2543%" height="15" fill="rgb(209,12,38)"/><text x="29.7876%" y="143.50"></text></g><g><title>impl_trait_ref (5,382,388 samples, 0.97%)</title><rect x="29.7919%" y="149" width="0.9682%" height="15" fill="rgb(227,1,9)"/><text x="30.0419%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,447,458 samples, 0.80%)</title><rect x="29.9600%" y="133" width="0.8001%" height="15" fill="rgb(248,47,43)"/><text x="30.2100%" y="143.50"></text></g><g><title>coherent_trait (12,320,406 samples, 2.22%)</title><rect x="28.6772%" y="181" width="2.2163%" height="15" fill="rgb(221,10,30)"/><text x="28.9272%" y="191.50">c..</text></g><g><title>specialization_graph_of (12,303,856 samples, 2.21%)</title><rect x="28.6802%" y="165" width="2.2133%" height="15" fill="rgb(210,229,1)"/><text x="28.9302%" y="175.50">s..</text></g><g><title>trait_impls_of (740,019 samples, 0.13%)</title><rect x="30.7604%" y="149" width="0.1331%" height="15" fill="rgb(222,148,37)"/><text x="31.0104%" y="159.50"></text></g><g><title>coherence_checking (12,404,377 samples, 2.23%)</title><rect x="28.6739%" y="197" width="2.2314%" height="15" fill="rgb(234,67,33)"/><text x="28.9239%" y="207.50">c..</text></g><g><title>dropck_outlives (704,276 samples, 0.13%)</title><rect x="36.7079%" y="149" width="0.1267%" height="15" fill="rgb(247,98,35)"/><text x="36.9579%" y="159.50"></text></g><g><title>evaluate_obligation (2,629,715 samples, 0.47%)</title><rect x="36.8346%" y="149" width="0.4731%" height="15" fill="rgb(247,138,52)"/><text x="37.0846%" y="159.50"></text></g><g><title>associated_item (745,247 samples, 0.13%)</title><rect x="54.8900%" y="117" width="0.1341%" height="15" fill="rgb(213,79,30)"/><text x="55.1400%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (593,877 samples, 0.11%)</title><rect x="54.9172%" y="101" width="0.1068%" height="15" fill="rgb(246,177,23)"/><text x="55.1672%" y="111.50"></text></g><g><title>associated_items (1,115,203 samples, 0.20%)</title><rect x="54.8367%" y="133" width="0.2006%" height="15" fill="rgb(230,62,27)"/><text x="55.0867%" y="143.50"></text></g><g><title>adt_dtorck_constraint (905,771 samples, 0.16%)</title><rect x="56.4011%" y="37" width="0.1629%" height="15" fill="rgb(216,154,8)"/><text x="56.6511%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,356,015 samples, 0.24%)</title><rect x="56.3349%" y="53" width="0.2439%" height="15" fill="rgb(244,35,45)"/><text x="56.5849%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,890,412 samples, 0.34%)</title><rect x="56.2549%" y="69" width="0.3401%" height="15" fill="rgb(251,115,12)"/><text x="56.5049%" y="79.50"></text></g><g><title>adt_dtorck_constraint (2,515,901 samples, 0.45%)</title><rect x="56.1600%" y="85" width="0.4526%" height="15" fill="rgb(240,54,50)"/><text x="56.4100%" y="95.50"></text></g><g><title>adt_dtorck_constraint (3,095,406 samples, 0.56%)</title><rect x="56.0748%" y="101" width="0.5568%" height="15" fill="rgb(233,84,52)"/><text x="56.3248%" y="111.50"></text></g><g><title>dropck_outlives (8,804,560 samples, 1.58%)</title><rect x="55.0707%" y="133" width="1.5838%" height="15" fill="rgb(207,117,47)"/><text x="55.3207%" y="143.50"></text></g><g><title>adt_dtorck_constraint (3,921,127 samples, 0.71%)</title><rect x="55.9491%" y="117" width="0.7054%" height="15" fill="rgb(249,43,39)"/><text x="56.1991%" y="127.50"></text></g><g><title>predicates_of (627,006 samples, 0.11%)</title><rect x="57.9788%" y="117" width="0.1128%" height="15" fill="rgb(209,38,44)"/><text x="58.2288%" y="127.50"></text></g><g><title>trait_impls_of (992,701 samples, 0.18%)</title><rect x="58.1511%" y="117" width="0.1786%" height="15" fill="rgb(236,212,23)"/><text x="58.4011%" y="127.50"></text></g><g><title>evaluate_obligation (9,314,341 samples, 1.68%)</title><rect x="56.6545%" y="133" width="1.6756%" height="15" fill="rgb(242,79,21)"/><text x="56.9045%" y="143.50"></text></g><g><title>is_copy_raw (993,321 samples, 0.18%)</title><rect x="58.5822%" y="133" width="0.1787%" height="15" fill="rgb(211,96,35)"/><text x="58.8322%" y="143.50"></text></g><g><title>evaluate_obligation (789,638 samples, 0.14%)</title><rect x="58.6189%" y="117" width="0.1420%" height="15" fill="rgb(253,215,40)"/><text x="58.8689%" y="127.50"></text></g><g><title>evaluate_obligation (851,363 samples, 0.15%)</title><rect x="58.9987%" y="117" width="0.1532%" height="15" fill="rgb(211,81,21)"/><text x="59.2487%" y="127.50"></text></g><g><title>method_autoderef_steps (1,823,363 samples, 0.33%)</title><rect x="58.8273%" y="133" width="0.3280%" height="15" fill="rgb(208,190,38)"/><text x="59.0773%" y="143.50"></text></g><g><title>predicates_of (972,919 samples, 0.18%)</title><rect x="59.1669%" y="133" width="0.1750%" height="15" fill="rgb(235,213,38)"/><text x="59.4169%" y="143.50"></text></g><g><title>predicates_defined_on (671,106 samples, 0.12%)</title><rect x="59.2212%" y="117" width="0.1207%" height="15" fill="rgb(237,122,38)"/><text x="59.4712%" y="127.50"></text></g><g><title>typeck (121,691,494 samples, 21.89%)</title><rect x="37.5771%" y="149" width="21.8910%" height="15" fill="rgb(244,218,35)"/><text x="37.8271%" y="159.50">typeck</text></g><g><title>item_bodies_checking (158,775,245 samples, 28.56%)</title><rect x="30.9119%" y="197" width="28.5620%" height="15" fill="rgb(240,68,47)"/><text x="31.1619%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (158,771,675 samples, 28.56%)</title><rect x="30.9125%" y="181" width="28.5613%" height="15" fill="rgb(210,16,53)"/><text x="31.1625%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (158,625,304 samples, 28.53%)</title><rect x="30.9388%" y="165" width="28.5350%" height="15" fill="rgb(235,124,12)"/><text x="31.1888%" y="175.50">typeck</text></g><g><title>item_types_checking (3,096,454 samples, 0.56%)</title><rect x="59.4738%" y="197" width="0.5570%" height="15" fill="rgb(224,169,11)"/><text x="59.7238%" y="207.50"></text></g><g><title>check_mod_item_types (3,088,974 samples, 0.56%)</title><rect x="59.4752%" y="181" width="0.5557%" height="15" fill="rgb(250,166,2)"/><text x="59.7252%" y="191.50"></text></g><g><title>typeck (1,649,897 samples, 0.30%)</title><rect x="59.7341%" y="165" width="0.2968%" height="15" fill="rgb(242,216,29)"/><text x="59.9841%" y="175.50"></text></g><g><title>fn_sig (622,408 samples, 0.11%)</title><rect x="60.1215%" y="165" width="0.1120%" height="15" fill="rgb(230,116,27)"/><text x="60.3715%" y="175.50"></text></g><g><title>named_region_map (1,181,570 samples, 0.21%)</title><rect x="60.2762%" y="149" width="0.2126%" height="15" fill="rgb(228,99,48)"/><text x="60.5262%" y="159.50"></text></g><g><title>resolve_lifetimes (1,154,370 samples, 0.21%)</title><rect x="60.2811%" y="133" width="0.2077%" height="15" fill="rgb(253,11,6)"/><text x="60.5311%" y="143.50"></text></g><g><title>lint_levels (682,087 samples, 0.12%)</title><rect x="60.3661%" y="117" width="0.1227%" height="15" fill="rgb(247,143,39)"/><text x="60.6161%" y="127.50"></text></g><g><title>generics_of (1,436,074 samples, 0.26%)</title><rect x="60.2334%" y="165" width="0.2583%" height="15" fill="rgb(236,97,10)"/><text x="60.4834%" y="175.50"></text></g><g><title>predicates_of (556,646 samples, 0.10%)</title><rect x="60.5004%" y="165" width="0.1001%" height="15" fill="rgb(233,208,19)"/><text x="60.7504%" y="175.50"></text></g><g><title>type_collecting (3,374,148 samples, 0.61%)</title><rect x="60.0322%" y="197" width="0.6070%" height="15" fill="rgb(216,164,2)"/><text x="60.2822%" y="207.50"></text></g><g><title>collect_mod_item_types (3,360,988 samples, 0.60%)</title><rect x="60.0346%" y="181" width="0.6046%" height="15" fill="rgb(220,129,5)"/><text x="60.2846%" y="191.50"></text></g><g><title>evaluate_obligation (735,429 samples, 0.13%)</title><rect x="60.9017%" y="165" width="0.1323%" height="15" fill="rgb(242,17,10)"/><text x="61.1517%" y="175.50"></text></g><g><title>check_impl_item_well_formed (3,102,297 samples, 0.56%)</title><rect x="60.7075%" y="181" width="0.5581%" height="15" fill="rgb(242,107,0)"/><text x="60.9575%" y="191.50"></text></g><g><title>region_scope_tree (926,365 samples, 0.17%)</title><rect x="61.0989%" y="165" width="0.1666%" height="15" fill="rgb(251,28,31)"/><text x="61.3489%" y="175.50"></text></g><g><title>adt_sized_constraint (869,989 samples, 0.16%)</title><rect x="61.6551%" y="133" width="0.1565%" height="15" fill="rgb(233,223,10)"/><text x="61.9051%" y="143.50"></text></g><g><title>adt_sized_constraint (1,116,783 samples, 0.20%)</title><rect x="61.6147%" y="149" width="0.2009%" height="15" fill="rgb(215,21,27)"/><text x="61.8647%" y="159.50"></text></g><g><title>evaluate_obligation (1,554,444 samples, 0.28%)</title><rect x="61.5477%" y="165" width="0.2796%" height="15" fill="rgb(232,23,21)"/><text x="61.7977%" y="175.50"></text></g><g><title>region_scope_tree (900,529 samples, 0.16%)</title><rect x="61.9601%" y="165" width="0.1620%" height="15" fill="rgb(244,5,23)"/><text x="62.2101%" y="175.50"></text></g><g><title>analysis (344,181,105 samples, 61.91%)</title><rect x="0.2192%" y="229" width="61.9145%" height="15" fill="rgb(226,81,46)"/><text x="0.4692%" y="239.50">analysis</text></g><g><title>type_check_crate (186,170,939 samples, 33.49%)</title><rect x="28.6435%" y="213" width="33.4902%" height="15" fill="rgb(247,70,30)"/><text x="28.8935%" y="223.50">type_check_crate</text></g><g><title>wf_checking (8,292,703 samples, 1.49%)</title><rect x="60.6419%" y="197" width="1.4918%" height="15" fill="rgb(212,68,19)"/><text x="60.8919%" y="207.50"></text></g><g><title>check_item_well_formed (4,825,972 samples, 0.87%)</title><rect x="61.2655%" y="181" width="0.8681%" height="15" fill="rgb(240,187,13)"/><text x="61.5155%" y="191.50"></text></g><g><title>metadata_load_macro (913,912 samples, 0.16%)</title><rect x="92.1094%" y="181" width="0.1644%" height="15" fill="rgb(223,113,26)"/><text x="92.3594%" y="191.50"></text></g><g><title>metadata_register_crate (3,053,984 samples, 0.55%)</title><rect x="92.2738%" y="181" width="0.5494%" height="15" fill="rgb(206,192,2)"/><text x="92.5238%" y="191.50"></text></g><g><title>metadata_register_crate (1,101,432 samples, 0.20%)</title><rect x="92.6250%" y="165" width="0.1981%" height="15" fill="rgb(241,108,4)"/><text x="92.8750%" y="175.50"></text></g><g><title>macro_expand_crate (170,013,539 samples, 30.58%)</title><rect x="62.3865%" y="213" width="30.5836%" height="15" fill="rgb(247,173,49)"/><text x="62.6365%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (169,986,649 samples, 30.58%)</title><rect x="62.3914%" y="197" width="30.5788%" height="15" fill="rgb(224,114,35)"/><text x="62.6414%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (817,148 samples, 0.15%)</title><rect x="92.8232%" y="181" width="0.1470%" height="15" fill="rgb(245,159,27)"/><text x="93.0732%" y="191.50"></text></g><g><title>maybe_create_a_macro_crate (645,857 samples, 0.12%)</title><rect x="92.9704%" y="213" width="0.1162%" height="15" fill="rgb(245,172,44)"/><text x="93.2204%" y="223.50"></text></g><g><title>finalize_macro_resolutions (2,313,306 samples, 0.42%)</title><rect x="93.1369%" y="197" width="0.4161%" height="15" fill="rgb(236,23,11)"/><text x="93.3869%" y="207.50"></text></g><g><title>late_resolve_crate (12,800,422 samples, 2.30%)</title><rect x="93.5530%" y="197" width="2.3027%" height="15" fill="rgb(205,117,38)"/><text x="93.8030%" y="207.50">l..</text></g><g><title>metadata_register_crate (4,850,553 samples, 0.87%)</title><rect x="94.9831%" y="181" width="0.8726%" height="15" fill="rgb(237,72,25)"/><text x="95.2331%" y="191.50"></text></g><g><title>metadata_register_crate (4,786,342 samples, 0.86%)</title><rect x="94.9947%" y="165" width="0.8610%" height="15" fill="rgb(244,70,9)"/><text x="95.2447%" y="175.50"></text></g><g><title>metadata_register_crate (4,735,982 samples, 0.85%)</title><rect x="95.0037%" y="149" width="0.8520%" height="15" fill="rgb(217,125,39)"/><text x="95.2537%" y="159.50"></text></g><g><title>metadata_register_crate (4,419,599 samples, 0.80%)</title><rect x="95.0606%" y="133" width="0.7950%" height="15" fill="rgb(235,36,10)"/><text x="95.3106%" y="143.50"></text></g><g><title>configure_and_expand (187,595,375 samples, 33.75%)</title><rect x="62.2208%" y="229" width="33.7464%" height="15" fill="rgb(251,123,47)"/><text x="62.4708%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (15,903,217 samples, 2.86%)</title><rect x="93.1064%" y="213" width="2.8608%" height="15" fill="rgb(221,13,13)"/><text x="93.3564%" y="223.50">re..</text></g><g><title>drop_ast (673,217 samples, 0.12%)</title><rect x="95.9672%" y="229" width="0.1211%" height="15" fill="rgb(238,131,9)"/><text x="96.2172%" y="239.50"></text></g><g><title>early_lint_checks (2,043,363 samples, 0.37%)</title><rect x="96.0924%" y="229" width="0.3676%" height="15" fill="rgb(211,50,8)"/><text x="96.3424%" y="239.50"></text></g><g><title>free_global_ctxt (5,734,443 samples, 1.03%)</title><rect x="96.4600%" y="229" width="1.0316%" height="15" fill="rgb(245,182,24)"/><text x="96.7100%" y="239.50"></text></g><g><title>hir_lowering (10,876,511 samples, 1.96%)</title><rect x="97.5283%" y="229" width="1.9566%" height="15" fill="rgb(242,14,37)"/><text x="97.7783%" y="239.50">h..</text></g><g><title>parse_crate (946,780 samples, 0.17%)</title><rect x="99.4975%" y="229" width="0.1703%" height="15" fill="rgb(246,228,12)"/><text x="99.7475%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,227,114 samples, 0.22%)</title><rect x="99.7080%" y="229" width="0.2207%" height="15" fill="rgb(213,55,15)"/><text x="99.9580%" y="239.50"></text></g><g><title>all (555,897,398 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (555,897,398 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>