<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>diagnostic_items (39,661 samples, 0.10%)</title><rect x="5.8717%" y="85" width="0.1012%" height="15" fill="rgb(227,0,7)"/><text x="6.1217%" y="95.50"></text></g><g><title>is_copy_raw (40,641 samples, 0.10%)</title><rect x="6.9387%" y="53" width="0.1037%" height="15" fill="rgb(217,0,24)"/><text x="7.1887%" y="63.50"></text></g><g><title>thir_body (125,821 samples, 0.32%)</title><rect x="7.0868%" y="53" width="0.3211%" height="15" fill="rgb(221,193,54)"/><text x="7.3368%" y="63.50"></text></g><g><title>mir_const (715,329 samples, 1.83%)</title><rect x="5.5877%" y="101" width="1.8254%" height="15" fill="rgb(248,212,6)"/><text x="5.8377%" y="111.50">m..</text></g><g><title>unsafety_check_result (549,466 samples, 1.40%)</title><rect x="6.0110%" y="85" width="1.4022%" height="15" fill="rgb(208,68,35)"/><text x="6.2610%" y="95.50"></text></g><g><title>mir_built (459,095 samples, 1.17%)</title><rect x="6.2416%" y="69" width="1.1716%" height="15" fill="rgb(232,128,0)"/><text x="6.4916%" y="79.50"></text></g><g><title>mir_promoted (866,190 samples, 2.21%)</title><rect x="5.2256%" y="117" width="2.2104%" height="15" fill="rgb(207,160,47)"/><text x="5.4756%" y="127.50">m..</text></g><g><title>type_op_ascribe_user_type (69,570 samples, 0.18%)</title><rect x="7.4361%" y="117" width="0.1775%" height="15" fill="rgb(228,23,34)"/><text x="7.6861%" y="127.50"></text></g><g><title>type_op_prove_predicate (80,801 samples, 0.21%)</title><rect x="7.6136%" y="117" width="0.2062%" height="15" fill="rgb(218,30,26)"/><text x="7.8636%" y="127.50"></text></g><g><title>MIR_borrow_checking (2,124,633 samples, 5.42%)</title><rect x="2.4030%" y="149" width="5.4218%" height="15" fill="rgb(220,122,19)"/><text x="2.6530%" y="159.50">MIR_bor..</text></g><g><title>mir_borrowck (2,112,503 samples, 5.39%)</title><rect x="2.4339%" y="133" width="5.3909%" height="15" fill="rgb(250,228,42)"/><text x="2.6839%" y="143.50">mir_bor..</text></g><g><title>hir_module_items (110,101 samples, 0.28%)</title><rect x="7.8401%" y="149" width="0.2810%" height="15" fill="rgb(240,193,28)"/><text x="8.0901%" y="159.50"></text></g><g><title>get_lang_items (49,371 samples, 0.13%)</title><rect x="8.5725%" y="101" width="0.1260%" height="15" fill="rgb(216,20,37)"/><text x="8.8225%" y="111.50"></text></g><g><title>associated_item (42,220 samples, 0.11%)</title><rect x="8.7315%" y="85" width="0.1077%" height="15" fill="rgb(206,188,39)"/><text x="8.9815%" y="95.50"></text></g><g><title>codegen_fn_attrs (65,111 samples, 0.17%)</title><rect x="8.8392%" y="85" width="0.1662%" height="15" fill="rgb(217,207,13)"/><text x="9.0892%" y="95.50"></text></g><g><title>should_inherit_track_caller (122,521 samples, 0.31%)</title><rect x="8.6985%" y="101" width="0.3127%" height="15" fill="rgb(231,73,38)"/><text x="8.9485%" y="111.50"></text></g><g><title>codegen_fn_attrs (268,573 samples, 0.69%)</title><rect x="8.4077%" y="117" width="0.6854%" height="15" fill="rgb(225,20,46)"/><text x="8.6577%" y="127.50"></text></g><g><title>check_mod_attrs (357,234 samples, 0.91%)</title><rect x="8.1821%" y="133" width="0.9116%" height="15" fill="rgb(210,31,41)"/><text x="8.4321%" y="143.50"></text></g><g><title>lookup_deprecation_entry (51,420 samples, 0.13%)</title><rect x="9.3671%" y="117" width="0.1312%" height="15" fill="rgb(221,200,47)"/><text x="9.6171%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (136,692 samples, 0.35%)</title><rect x="9.2233%" y="133" width="0.3488%" height="15" fill="rgb(226,26,5)"/><text x="9.4733%" y="143.50"></text></g><g><title>misc_checking_1 (600,126 samples, 1.53%)</title><rect x="8.1225%" y="149" width="1.5315%" height="15" fill="rgb(249,33,26)"/><text x="8.3725%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (58,511 samples, 0.15%)</title><rect x="9.6587%" y="133" width="0.1493%" height="15" fill="rgb(235,183,28)"/><text x="9.9087%" y="143.50"></text></g><g><title>check_mod_liveness (42,291 samples, 0.11%)</title><rect x="9.7000%" y="117" width="0.1079%" height="15" fill="rgb(221,5,38)"/><text x="9.9500%" y="127.50"></text></g><g><title>misc_checking_2 (198,252 samples, 0.51%)</title><rect x="9.6540%" y="149" width="0.5059%" height="15" fill="rgb(247,18,42)"/><text x="9.9040%" y="159.50"></text></g><g><title>match_checking (137,901 samples, 0.35%)</title><rect x="9.8080%" y="133" width="0.3519%" height="15" fill="rgb(241,131,45)"/><text x="10.0580%" y="143.50"></text></g><g><title>check_match (132,041 samples, 0.34%)</title><rect x="9.8229%" y="117" width="0.3370%" height="15" fill="rgb(249,31,29)"/><text x="10.0729%" y="127.50"></text></g><g><title>death_checking (164,431 samples, 0.42%)</title><rect x="10.2716%" y="133" width="0.4196%" height="15" fill="rgb(225,111,53)"/><text x="10.5216%" y="143.50"></text></g><g><title>item_attrs (97,091 samples, 0.25%)</title><rect x="10.4435%" y="117" width="0.2478%" height="15" fill="rgb(238,160,17)"/><text x="10.6935%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,541 samples, 0.24%)</title><rect x="10.4474%" y="101" width="0.2438%" height="15" fill="rgb(214,148,48)"/><text x="10.6974%" y="111.50"></text></g><g><title>param_env (43,150 samples, 0.11%)</title><rect x="11.1282%" y="101" width="0.1101%" height="15" fill="rgb(232,36,49)"/><text x="11.3782%" y="111.50"></text></g><g><title>crate_lints (472,035 samples, 1.20%)</title><rect x="10.6945%" y="117" width="1.2046%" height="15" fill="rgb(209,103,24)"/><text x="10.9445%" y="127.50"></text></g><g><title>type_of (258,933 samples, 0.66%)</title><rect x="11.2383%" y="101" width="0.6608%" height="15" fill="rgb(229,88,8)"/><text x="11.4883%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (178,341 samples, 0.46%)</title><rect x="11.4440%" y="85" width="0.4551%" height="15" fill="rgb(213,181,19)"/><text x="11.6940%" y="95.50"></text></g><g><title>lint_checking (514,655 samples, 1.31%)</title><rect x="10.6912%" y="133" width="1.3133%" height="15" fill="rgb(254,191,54)"/><text x="10.9412%" y="143.50"></text></g><g><title>module_lints (41,350 samples, 0.11%)</title><rect x="11.8991%" y="117" width="0.1055%" height="15" fill="rgb(241,83,37)"/><text x="12.1491%" y="127.50"></text></g><g><title>lint_mod (39,850 samples, 0.10%)</title><rect x="11.9029%" y="101" width="0.1017%" height="15" fill="rgb(233,36,39)"/><text x="12.1529%" y="111.50"></text></g><g><title>privacy_access_levels (58,221 samples, 0.15%)</title><rect x="12.0046%" y="133" width="0.1486%" height="15" fill="rgb(226,3,54)"/><text x="12.2546%" y="143.50"></text></g><g><title>privacy_checking_modules (49,241 samples, 0.13%)</title><rect x="12.1532%" y="133" width="0.1257%" height="15" fill="rgb(245,192,40)"/><text x="12.4032%" y="143.50"></text></g><g><title>check_mod_privacy (48,341 samples, 0.12%)</title><rect x="12.1555%" y="117" width="0.1234%" height="15" fill="rgb(238,167,29)"/><text x="12.4055%" y="127.50"></text></g><g><title>misc_checking_3 (837,120 samples, 2.14%)</title><rect x="10.1599%" y="149" width="2.1362%" height="15" fill="rgb(232,182,51)"/><text x="10.4099%" y="159.50">m..</text></g><g><title>adt_destructor (85,261 samples, 0.22%)</title><rect x="12.5102%" y="101" width="0.2176%" height="15" fill="rgb(231,60,39)"/><text x="12.7602%" y="111.50"></text></g><g><title>coherent_trait (75,271 samples, 0.19%)</title><rect x="12.5357%" y="85" width="0.1921%" height="15" fill="rgb(208,69,12)"/><text x="12.7857%" y="95.50"></text></g><g><title>specialization_graph_of (73,240 samples, 0.19%)</title><rect x="12.5409%" y="69" width="0.1869%" height="15" fill="rgb(235,93,37)"/><text x="12.7909%" y="79.50"></text></g><g><title>param_env (150,802 samples, 0.38%)</title><rect x="12.7278%" y="101" width="0.3848%" height="15" fill="rgb(213,116,39)"/><text x="12.9778%" y="111.50"></text></g><g><title>impl_parent (1,242,811 samples, 3.17%)</title><rect x="18.9053%" y="85" width="3.1715%" height="15" fill="rgb(222,207,29)"/><text x="19.1553%" y="95.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (589,534 samples, 1.50%)</title><rect x="20.5724%" y="69" width="1.5044%" height="15" fill="rgb(206,96,30)"/><text x="20.8224%" y="79.50"></text></g><g><title>impl_trait_ref (3,147,154 samples, 8.03%)</title><rect x="22.0769%" y="85" width="8.0312%" height="15" fill="rgb(218,138,4)"/><text x="22.3269%" y="95.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,506,461 samples, 6.40%)</title><rect x="23.7118%" y="69" width="6.3962%" height="15" fill="rgb(250,191,14)"/><text x="23.9618%" y="79.50">metadata..</text></g><g><title>coherent_trait (7,351,632 samples, 18.76%)</title><rect x="12.4439%" y="117" width="18.7606%" height="15" fill="rgb(239,60,40)"/><text x="12.6939%" y="127.50">coherent_trait</text></g><g><title>specialization_graph_of (7,089,589 samples, 18.09%)</title><rect x="13.1126%" y="101" width="18.0919%" height="15" fill="rgb(206,27,48)"/><text x="13.3626%" y="111.50">specialization_graph_of</text></g><g><title>trait_impls_of (427,184 samples, 1.09%)</title><rect x="30.1144%" y="85" width="1.0901%" height="15" fill="rgb(225,35,8)"/><text x="30.3644%" y="95.50"></text></g><g><title>implementations_of_trait (89,250 samples, 0.23%)</title><rect x="30.9768%" y="69" width="0.2278%" height="15" fill="rgb(250,213,24)"/><text x="31.2268%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (77,000 samples, 0.20%)</title><rect x="31.0080%" y="53" width="0.1965%" height="15" fill="rgb(247,123,22)"/><text x="31.2580%" y="63.50"></text></g><g><title>coherence_checking (7,410,782 samples, 18.91%)</title><rect x="12.3954%" y="133" width="18.9116%" height="15" fill="rgb(231,138,38)"/><text x="12.6454%" y="143.50">coherence_checking</text></g><g><title>associated_item (45,861 samples, 0.12%)</title><rect x="35.4976%" y="69" width="0.1170%" height="15" fill="rgb(231,145,46)"/><text x="35.7476%" y="79.50"></text></g><g><title>associated_items (82,911 samples, 0.21%)</title><rect x="35.4165%" y="85" width="0.2116%" height="15" fill="rgb(251,118,11)"/><text x="35.6665%" y="95.50"></text></g><g><title>dropck_outlives (56,870 samples, 0.15%)</title><rect x="35.6406%" y="85" width="0.1451%" height="15" fill="rgb(217,147,25)"/><text x="35.8906%" y="95.50"></text></g><g><title>evaluate_obligation (361,835 samples, 0.92%)</title><rect x="35.7857%" y="85" width="0.9234%" height="15" fill="rgb(247,81,37)"/><text x="36.0357%" y="95.50"></text></g><g><title>trait_impls_of (148,663 samples, 0.38%)</title><rect x="36.3297%" y="69" width="0.3794%" height="15" fill="rgb(209,12,38)"/><text x="36.5797%" y="79.50"></text></g><g><title>fn_sig (82,211 samples, 0.21%)</title><rect x="36.7291%" y="85" width="0.2098%" height="15" fill="rgb(227,1,9)"/><text x="36.9791%" y="95.50"></text></g><g><title>metadata_decode_entry_fn_sig (79,201 samples, 0.20%)</title><rect x="36.7367%" y="69" width="0.2021%" height="15" fill="rgb(248,47,43)"/><text x="36.9867%" y="79.50"></text></g><g><title>associated_item (106,211 samples, 0.27%)</title><rect x="37.0476%" y="53" width="0.2710%" height="15" fill="rgb(221,10,30)"/><text x="37.2976%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (105,201 samples, 0.27%)</title><rect x="37.0502%" y="37" width="0.2685%" height="15" fill="rgb(210,229,1)"/><text x="37.3002%" y="47.50"></text></g><g><title>impl_item_implementor_ids (120,651 samples, 0.31%)</title><rect x="37.0344%" y="85" width="0.3079%" height="15" fill="rgb(222,148,37)"/><text x="37.2844%" y="95.50"></text></g><g><title>associated_items (118,761 samples, 0.30%)</title><rect x="37.0393%" y="69" width="0.3031%" height="15" fill="rgb(234,67,33)"/><text x="37.2893%" y="79.50"></text></g><g><title>predicates_of (88,201 samples, 0.23%)</title><rect x="37.5132%" y="85" width="0.2251%" height="15" fill="rgb(247,98,35)"/><text x="37.7632%" y="95.50"></text></g><g><title>predicates_defined_on (52,701 samples, 0.13%)</title><rect x="37.6038%" y="69" width="0.1345%" height="15" fill="rgb(247,138,52)"/><text x="37.8538%" y="79.50"></text></g><g><title>item_bodies_checking (2,565,528 samples, 6.55%)</title><rect x="31.3949%" y="133" width="6.5470%" height="15" fill="rgb(213,79,30)"/><text x="31.6449%" y="143.50">item_bodi..</text></g><g><title>typeck_item_bodies (2,562,628 samples, 6.54%)</title><rect x="31.4023%" y="117" width="6.5396%" height="15" fill="rgb(246,177,23)"/><text x="31.6523%" y="127.50">typeck_it..</text></g><g><title>typeck (2,550,698 samples, 6.51%)</title><rect x="31.4328%" y="101" width="6.5091%" height="15" fill="rgb(230,62,27)"/><text x="31.6828%" y="111.50">typeck</text></g><g><title>item_types_checking (253,192 samples, 0.65%)</title><rect x="37.9419%" y="133" width="0.6461%" height="15" fill="rgb(216,154,8)"/><text x="38.1919%" y="143.50"></text></g><g><title>check_mod_item_types (248,912 samples, 0.64%)</title><rect x="37.9528%" y="117" width="0.6352%" height="15" fill="rgb(244,35,45)"/><text x="38.2028%" y="127.50"></text></g><g><title>late_bound_vars_map (46,621 samples, 0.12%)</title><rect x="39.0439%" y="85" width="0.1190%" height="15" fill="rgb(251,115,12)"/><text x="39.2939%" y="95.50"></text></g><g><title>fn_sig (147,672 samples, 0.38%)</title><rect x="38.8750%" y="101" width="0.3768%" height="15" fill="rgb(240,54,50)"/><text x="39.1250%" y="111.50"></text></g><g><title>named_region_map (108,621 samples, 0.28%)</title><rect x="39.3422%" y="85" width="0.2772%" height="15" fill="rgb(233,84,52)"/><text x="39.5922%" y="95.50"></text></g><g><title>resolve_lifetimes (104,851 samples, 0.27%)</title><rect x="39.3519%" y="69" width="0.2676%" height="15" fill="rgb(207,117,47)"/><text x="39.6019%" y="79.50"></text></g><g><title>lint_levels (44,670 samples, 0.11%)</title><rect x="39.5054%" y="53" width="0.1140%" height="15" fill="rgb(249,43,39)"/><text x="39.7554%" y="63.50"></text></g><g><title>generics_of (152,391 samples, 0.39%)</title><rect x="39.2518%" y="101" width="0.3889%" height="15" fill="rgb(209,38,44)"/><text x="39.5018%" y="111.50"></text></g><g><title>impl_trait_ref (42,240 samples, 0.11%)</title><rect x="39.6407%" y="101" width="0.1078%" height="15" fill="rgb(236,212,23)"/><text x="39.8907%" y="111.50"></text></g><g><title>explicit_predicates_of (53,260 samples, 0.14%)</title><rect x="39.8323%" y="69" width="0.1359%" height="15" fill="rgb(242,79,21)"/><text x="40.0823%" y="79.50"></text></g><g><title>predicates_of (120,101 samples, 0.31%)</title><rect x="39.7485%" y="101" width="0.3065%" height="15" fill="rgb(211,96,35)"/><text x="39.9985%" y="111.50"></text></g><g><title>predicates_defined_on (108,271 samples, 0.28%)</title><rect x="39.7787%" y="85" width="0.2763%" height="15" fill="rgb(253,215,40)"/><text x="40.0287%" y="95.50"></text></g><g><title>type_collecting (657,738 samples, 1.68%)</title><rect x="38.5891%" y="133" width="1.6785%" height="15" fill="rgb(211,81,21)"/><text x="38.8391%" y="143.50"></text></g><g><title>collect_mod_item_types (647,847 samples, 1.65%)</title><rect x="38.6144%" y="117" width="1.6532%" height="15" fill="rgb(208,190,38)"/><text x="38.8644%" y="127.50"></text></g><g><title>type_of (83,322 samples, 0.21%)</title><rect x="40.0550%" y="101" width="0.2126%" height="15" fill="rgb(235,213,38)"/><text x="40.3050%" y="111.50"></text></g><g><title>adt_sized_constraint (55,420 samples, 0.14%)</title><rect x="41.2095%" y="85" width="0.1414%" height="15" fill="rgb(237,122,38)"/><text x="41.4595%" y="95.50"></text></g><g><title>adt_def (52,880 samples, 0.13%)</title><rect x="41.2160%" y="69" width="0.1349%" height="15" fill="rgb(244,218,35)"/><text x="41.4660%" y="79.50"></text></g><g><title>evaluate_obligation (195,622 samples, 0.50%)</title><rect x="40.9376%" y="101" width="0.4992%" height="15" fill="rgb(240,68,47)"/><text x="41.1876%" y="111.50"></text></g><g><title>implied_outlives_bounds (63,451 samples, 0.16%)</title><rect x="41.4368%" y="101" width="0.1619%" height="15" fill="rgb(210,16,53)"/><text x="41.6868%" y="111.50"></text></g><g><title>predicates_of (46,600 samples, 0.12%)</title><rect x="41.6525%" y="101" width="0.1189%" height="15" fill="rgb(235,124,12)"/><text x="41.9025%" y="111.50"></text></g><g><title>check_impl_item_well_formed (580,936 samples, 1.48%)</title><rect x="40.3599%" y="117" width="1.4825%" height="15" fill="rgb(224,169,11)"/><text x="40.6099%" y="127.50"></text></g><g><title>evaluate_obligation (112,782 samples, 0.29%)</title><rect x="42.8117%" y="101" width="0.2878%" height="15" fill="rgb(250,166,2)"/><text x="43.0617%" y="111.50"></text></g><g><title>implied_outlives_bounds (73,821 samples, 0.19%)</title><rect x="43.1075%" y="101" width="0.1884%" height="15" fill="rgb(242,216,29)"/><text x="43.3575%" y="111.50"></text></g><g><title>param_env (48,852 samples, 0.12%)</title><rect x="43.2959%" y="101" width="0.1247%" height="15" fill="rgb(230,116,27)"/><text x="43.5459%" y="111.50"></text></g><g><title>predicates_of (66,180 samples, 0.17%)</title><rect x="43.4205%" y="101" width="0.1689%" height="15" fill="rgb(228,99,48)"/><text x="43.6705%" y="111.50"></text></g><g><title>predicates_defined_on (52,360 samples, 0.13%)</title><rect x="43.4558%" y="85" width="0.1336%" height="15" fill="rgb(253,11,6)"/><text x="43.7058%" y="95.50"></text></g><g><title>analysis (16,357,771 samples, 41.74%)</title><rect x="2.0672%" y="165" width="41.7434%" height="15" fill="rgb(247,143,39)"/><text x="2.3172%" y="175.50">analysis</text></g><g><title>type_check_crate (12,349,417 samples, 31.51%)</title><rect x="12.2961%" y="149" width="31.5145%" height="15" fill="rgb(236,97,10)"/><text x="12.5461%" y="159.50">type_check_crate</text></g><g><title>wf_checking (1,387,376 samples, 3.54%)</title><rect x="40.2701%" y="133" width="3.5404%" height="15" fill="rgb(233,208,19)"/><text x="40.5201%" y="143.50">wf_c..</text></g><g><title>check_item_well_formed (771,249 samples, 1.97%)</title><rect x="41.8424%" y="117" width="1.9681%" height="15" fill="rgb(216,164,2)"/><text x="42.0924%" y="127.50">c..</text></g><g><title>codegen_crate (475,446 samples, 1.21%)</title><rect x="43.8357%" y="165" width="1.2133%" height="15" fill="rgb(220,129,5)"/><text x="44.0857%" y="175.50"></text></g><g><title>AST_validation (64,341 samples, 0.16%)</title><rect x="45.5408%" y="149" width="0.1642%" height="15" fill="rgb(242,17,10)"/><text x="45.7908%" y="159.50"></text></g><g><title>crate_injection (59,310 samples, 0.15%)</title><rect x="45.7526%" y="149" width="0.1514%" height="15" fill="rgb(242,107,0)"/><text x="46.0026%" y="159.50"></text></g><g><title>metadata_load_macro (91,351 samples, 0.23%)</title><rect x="64.7127%" y="117" width="0.2331%" height="15" fill="rgb(251,28,31)"/><text x="64.9627%" y="127.50"></text></g><g><title>macro_expand_crate (7,685,655 samples, 19.61%)</title><rect x="45.9040%" y="149" width="19.6130%" height="15" fill="rgb(233,223,10)"/><text x="46.1540%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (7,663,355 samples, 19.56%)</title><rect x="45.9609%" y="133" width="19.5561%" height="15" fill="rgb(215,21,27)"/><text x="46.2109%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (223,842 samples, 0.57%)</title><rect x="64.9458%" y="117" width="0.5712%" height="15" fill="rgb(232,23,21)"/><text x="65.1958%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (118,951 samples, 0.30%)</title><rect x="65.5279%" y="149" width="0.3036%" height="15" fill="rgb(244,5,23)"/><text x="65.7779%" y="159.50"></text></g><g><title>finalize_macro_resolutions (195,062 samples, 0.50%)</title><rect x="65.8958%" y="133" width="0.4978%" height="15" fill="rgb(226,81,46)"/><text x="66.1458%" y="143.50"></text></g><g><title>late_resolve_crate (8,074,930 samples, 20.61%)</title><rect x="66.3936%" y="133" width="20.6064%" height="15" fill="rgb(247,70,30)"/><text x="66.6436%" y="143.50">late_resolve_crate</text></g><g><title>configure_and_expand (16,487,102 samples, 42.07%)</title><rect x="45.0490%" y="165" width="42.0734%" height="15" fill="rgb(212,68,19)"/><text x="45.2990%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (8,343,172 samples, 21.29%)</title><rect x="65.8315%" y="149" width="21.2909%" height="15" fill="rgb(240,187,13)"/><text x="66.0815%" y="159.50">resolve_crate</text></g><g><title>drop_ast (68,920 samples, 0.18%)</title><rect x="87.1224%" y="165" width="0.1759%" height="15" fill="rgb(223,113,26)"/><text x="87.3724%" y="175.50"></text></g><g><title>early_lint_checks (155,911 samples, 0.40%)</title><rect x="87.3314%" y="165" width="0.3979%" height="15" fill="rgb(206,192,2)"/><text x="87.5814%" y="175.50"></text></g><g><title>free_global_ctxt (1,136,783 samples, 2.90%)</title><rect x="87.7293%" y="165" width="2.9010%" height="15" fill="rgb(241,108,4)"/><text x="87.9793%" y="175.50">fr..</text></g><g><title>crate_hash (55,651 samples, 0.14%)</title><rect x="91.0453%" y="149" width="0.1420%" height="15" fill="rgb(247,173,49)"/><text x="91.2953%" y="159.50"></text></g><g><title>generate_crate_metadata (253,123 samples, 0.65%)</title><rect x="90.6302%" y="165" width="0.6459%" height="15" fill="rgb(224,114,35)"/><text x="90.8802%" y="175.50"></text></g><g><title>hir_lowering (507,546 samples, 1.30%)</title><rect x="91.2762%" y="165" width="1.2952%" height="15" fill="rgb(245,159,27)"/><text x="91.5262%" y="175.50"></text></g><g><title>parse_crate (1,788,200 samples, 4.56%)</title><rect x="92.6536%" y="165" width="4.5633%" height="15" fill="rgb(245,172,44)"/><text x="92.9036%" y="175.50">parse..</text></g><g><title>prepare_outputs (334,334 samples, 0.85%)</title><rect x="97.2383%" y="165" width="0.8532%" height="15" fill="rgb(236,23,11)"/><text x="97.4883%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (303,783 samples, 0.78%)</title><rect x="98.0915%" y="165" width="0.7752%" height="15" fill="rgb(205,117,38)"/><text x="98.3415%" y="175.50"></text></g><g><title>setup_global_ctxt (121,872 samples, 0.31%)</title><rect x="98.8875%" y="165" width="0.3110%" height="15" fill="rgb(237,72,25)"/><text x="99.1375%" y="175.50"></text></g><g><title>all (39,186,513 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (39,186,513 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (314,093 samples, 0.80%)</title><rect x="99.1985%" y="165" width="0.8015%" height="15" fill="rgb(235,36,10)"/><text x="99.4485%" y="175.50"></text></g></svg></svg>