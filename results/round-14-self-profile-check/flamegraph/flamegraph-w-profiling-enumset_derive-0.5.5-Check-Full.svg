<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>codegen_fn_attrs (378,042 samples, 0.15%)</title><rect x="12.9172%" y="117" width="0.1460%" height="15" fill="rgb(227,0,7)"/><text x="13.1672%" y="127.50"></text></g><g><title>adt_drop_tys (582,156 samples, 0.22%)</title><rect x="15.9858%" y="85" width="0.2248%" height="15" fill="rgb(217,0,24)"/><text x="16.2358%" y="95.50"></text></g><g><title>needs_drop_raw (1,740,619 samples, 0.67%)</title><rect x="15.9238%" y="101" width="0.6721%" height="15" fill="rgb(221,193,54)"/><text x="16.1738%" y="111.50"></text></g><g><title>is_copy_raw (997,842 samples, 0.39%)</title><rect x="16.2106%" y="85" width="0.3853%" height="15" fill="rgb(248,212,6)"/><text x="16.4606%" y="95.50"></text></g><g><title>evaluate_obligation (832,990 samples, 0.32%)</title><rect x="16.2743%" y="69" width="0.3216%" height="15" fill="rgb(208,68,35)"/><text x="16.5243%" y="79.50"></text></g><g><title>impl_parent (1,557,775 samples, 0.60%)</title><rect x="17.6205%" y="69" width="0.6015%" height="15" fill="rgb(232,128,0)"/><text x="17.8705%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (815,325 samples, 0.31%)</title><rect x="17.9072%" y="53" width="0.3148%" height="15" fill="rgb(207,160,47)"/><text x="18.1572%" y="63.50"></text></g><g><title>specialization_graph_of (7,666,546 samples, 2.96%)</title><rect x="16.7376%" y="85" width="2.9601%" height="15" fill="rgb(228,23,34)"/><text x="16.9876%" y="95.50">spe..</text></g><g><title>impl_trait_ref (3,822,077 samples, 1.48%)</title><rect x="18.2220%" y="69" width="1.4757%" height="15" fill="rgb(218,30,26)"/><text x="18.4720%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,264,891 samples, 1.26%)</title><rect x="18.4371%" y="53" width="1.2606%" height="15" fill="rgb(220,122,19)"/><text x="18.6871%" y="63.50"></text></g><g><title>resolve_instance (8,073,979 samples, 3.12%)</title><rect x="16.5959%" y="101" width="3.1174%" height="15" fill="rgb(250,228,42)"/><text x="16.8459%" y="111.50">res..</text></g><g><title>thir_body (2,876,520 samples, 1.11%)</title><rect x="19.7220%" y="101" width="1.1106%" height="15" fill="rgb(240,193,28)"/><text x="19.9720%" y="111.50"></text></g><g><title>mir_const (22,661,123 samples, 8.75%)</title><rect x="12.0908%" y="149" width="8.7496%" height="15" fill="rgb(216,20,37)"/><text x="12.3408%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (21,246,286 samples, 8.20%)</title><rect x="12.6371%" y="133" width="8.2033%" height="15" fill="rgb(206,188,39)"/><text x="12.8871%" y="143.50">unsafety_ch..</text></g><g><title>mir_built (20,142,955 samples, 7.78%)</title><rect x="13.0631%" y="117" width="7.7773%" height="15" fill="rgb(217,207,13)"/><text x="13.3131%" y="127.50">mir_built</text></g><g><title>mir_promoted (24,343,462 samples, 9.40%)</title><rect x="11.6238%" y="165" width="9.3991%" height="15" fill="rgb(231,73,38)"/><text x="11.8738%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (472,685 samples, 0.18%)</title><rect x="20.8404%" y="149" width="0.1825%" height="15" fill="rgb(225,20,46)"/><text x="21.0904%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (492,506 samples, 0.19%)</title><rect x="21.0248%" y="165" width="0.1902%" height="15" fill="rgb(210,31,41)"/><text x="21.2748%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (705,285 samples, 0.27%)</title><rect x="21.2149%" y="165" width="0.2723%" height="15" fill="rgb(221,200,47)"/><text x="21.4649%" y="175.50"></text></g><g><title>normalize_projection_ty (443,974 samples, 0.17%)</title><rect x="21.3158%" y="149" width="0.1714%" height="15" fill="rgb(226,26,5)"/><text x="21.5658%" y="159.50"></text></g><g><title>type_op_normalize_predicate (601,886 samples, 0.23%)</title><rect x="21.4872%" y="165" width="0.2324%" height="15" fill="rgb(249,33,26)"/><text x="21.7372%" y="175.50"></text></g><g><title>normalize_projection_ty (349,111 samples, 0.13%)</title><rect x="21.5848%" y="149" width="0.1348%" height="15" fill="rgb(235,183,28)"/><text x="21.8348%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,602,330 samples, 1.00%)</title><rect x="21.7196%" y="165" width="1.0048%" height="15" fill="rgb(221,5,38)"/><text x="21.9696%" y="175.50"></text></g><g><title>MIR_borrow_checking (57,583,792 samples, 22.23%)</title><rect x="0.4940%" y="197" width="22.2334%" height="15" fill="rgb(247,18,42)"/><text x="0.7440%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (57,521,662 samples, 22.21%)</title><rect x="0.5180%" y="181" width="22.2094%" height="15" fill="rgb(241,131,45)"/><text x="0.7680%" y="191.50">mir_borrowck</text></g><g><title>check_mod_attrs (623,327 samples, 0.24%)</title><rect x="22.8440%" y="181" width="0.2407%" height="15" fill="rgb(249,31,29)"/><text x="23.0940%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (365,144 samples, 0.14%)</title><rect x="23.1587%" y="181" width="0.1410%" height="15" fill="rgb(225,111,53)"/><text x="23.4087%" y="191.50"></text></g><g><title>misc_checking_1 (1,234,524 samples, 0.48%)</title><rect x="22.8375%" y="197" width="0.4767%" height="15" fill="rgb(238,160,17)"/><text x="23.0875%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (996,821 samples, 0.38%)</title><rect x="23.3150%" y="181" width="0.3849%" height="15" fill="rgb(214,148,48)"/><text x="23.5650%" y="191.50"></text></g><g><title>check_mod_liveness (824,209 samples, 0.32%)</title><rect x="23.3816%" y="165" width="0.3182%" height="15" fill="rgb(232,36,49)"/><text x="23.6316%" y="175.50"></text></g><g><title>misc_checking_2 (1,976,431 samples, 0.76%)</title><rect x="23.3142%" y="197" width="0.7631%" height="15" fill="rgb(209,103,24)"/><text x="23.5642%" y="207.50"></text></g><g><title>match_checking (977,480 samples, 0.38%)</title><rect x="23.6999%" y="181" width="0.3774%" height="15" fill="rgb(229,88,8)"/><text x="23.9499%" y="191.50"></text></g><g><title>check_match (960,059 samples, 0.37%)</title><rect x="23.7066%" y="165" width="0.3707%" height="15" fill="rgb(213,181,19)"/><text x="23.9566%" y="175.50"></text></g><g><title>death_checking (328,244 samples, 0.13%)</title><rect x="24.1345%" y="181" width="0.1267%" height="15" fill="rgb(254,191,54)"/><text x="24.3845%" y="191.50"></text></g><g><title>eval_to_const_value_raw (383,824 samples, 0.15%)</title><rect x="24.5558%" y="101" width="0.1482%" height="15" fill="rgb(241,83,37)"/><text x="24.8058%" y="111.50"></text></g><g><title>eval_to_const_value_raw (383,174 samples, 0.15%)</title><rect x="24.5560%" y="85" width="0.1479%" height="15" fill="rgb(233,36,39)"/><text x="24.8060%" y="95.50"></text></g><g><title>eval_to_allocation_raw (381,454 samples, 0.15%)</title><rect x="24.5567%" y="69" width="0.1473%" height="15" fill="rgb(226,3,54)"/><text x="24.8067%" y="79.50"></text></g><g><title>eval_to_allocation_raw (427,665 samples, 0.17%)</title><rect x="24.5394%" y="149" width="0.1651%" height="15" fill="rgb(245,192,40)"/><text x="24.7894%" y="159.50"></text></g><g><title>eval_to_allocation_raw (426,975 samples, 0.16%)</title><rect x="24.5396%" y="133" width="0.1649%" height="15" fill="rgb(238,167,29)"/><text x="24.7896%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (393,974 samples, 0.15%)</title><rect x="24.5524%" y="117" width="0.1521%" height="15" fill="rgb(232,182,51)"/><text x="24.8024%" y="127.50"></text></g><g><title>crate_lints (1,477,427 samples, 0.57%)</title><rect x="24.2618%" y="165" width="0.5704%" height="15" fill="rgb(231,60,39)"/><text x="24.5118%" y="175.50"></text></g><g><title>lint_checking (2,551,539 samples, 0.99%)</title><rect x="24.2612%" y="181" width="0.9852%" height="15" fill="rgb(208,69,12)"/><text x="24.5112%" y="191.50"></text></g><g><title>module_lints (1,072,562 samples, 0.41%)</title><rect x="24.8323%" y="165" width="0.4141%" height="15" fill="rgb(235,93,37)"/><text x="25.0823%" y="175.50"></text></g><g><title>lint_mod (1,070,162 samples, 0.41%)</title><rect x="24.8332%" y="149" width="0.4132%" height="15" fill="rgb(213,116,39)"/><text x="25.0832%" y="159.50"></text></g><g><title>privacy_checking_modules (1,506,157 samples, 0.58%)</title><rect x="25.3107%" y="181" width="0.5815%" height="15" fill="rgb(222,207,29)"/><text x="25.5607%" y="191.50"></text></g><g><title>check_mod_privacy (1,504,397 samples, 0.58%)</title><rect x="25.3114%" y="165" width="0.5809%" height="15" fill="rgb(206,96,30)"/><text x="25.5614%" y="175.50"></text></g><g><title>misc_checking_3 (4,718,883 samples, 1.82%)</title><rect x="24.0773%" y="197" width="1.8220%" height="15" fill="rgb(218,138,4)"/><text x="24.3273%" y="207.50">m..</text></g><g><title>impl_parent (281,448 samples, 0.11%)</title><rect x="26.0507%" y="133" width="0.1087%" height="15" fill="rgb(250,191,14)"/><text x="26.3007%" y="143.50"></text></g><g><title>impl_trait_ref (755,437 samples, 0.29%)</title><rect x="26.1594%" y="133" width="0.2917%" height="15" fill="rgb(239,60,40)"/><text x="26.4094%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (684,097 samples, 0.26%)</title><rect x="26.1869%" y="117" width="0.2641%" height="15" fill="rgb(206,27,48)"/><text x="26.4369%" y="127.50"></text></g><g><title>coherent_trait (1,481,226 samples, 0.57%)</title><rect x="25.9215%" y="165" width="0.5719%" height="15" fill="rgb(225,35,8)"/><text x="26.1715%" y="175.50"></text></g><g><title>specialization_graph_of (1,475,076 samples, 0.57%)</title><rect x="25.9239%" y="149" width="0.5695%" height="15" fill="rgb(250,213,24)"/><text x="26.1739%" y="159.50"></text></g><g><title>coherence_checking (1,523,748 samples, 0.59%)</title><rect x="25.9173%" y="181" width="0.5883%" height="15" fill="rgb(247,123,22)"/><text x="26.1673%" y="191.50"></text></g><g><title>associated_item (353,853 samples, 0.14%)</title><rect x="30.3072%" y="117" width="0.1366%" height="15" fill="rgb(231,138,38)"/><text x="30.5572%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (282,732 samples, 0.11%)</title><rect x="30.3346%" y="101" width="0.1092%" height="15" fill="rgb(231,145,46)"/><text x="30.5846%" y="111.50"></text></g><g><title>associated_items (507,256 samples, 0.20%)</title><rect x="30.2569%" y="133" width="0.1959%" height="15" fill="rgb(251,118,11)"/><text x="30.5069%" y="143.50"></text></g><g><title>adt_def (361,381 samples, 0.14%)</title><rect x="30.6869%" y="101" width="0.1395%" height="15" fill="rgb(217,147,25)"/><text x="30.9369%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (351,501 samples, 0.14%)</title><rect x="30.6907%" y="85" width="0.1357%" height="15" fill="rgb(247,81,37)"/><text x="30.9407%" y="95.50"></text></g><g><title>adt_def (272,154 samples, 0.11%)</title><rect x="30.9820%" y="85" width="0.1051%" height="15" fill="rgb(209,12,38)"/><text x="31.2320%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (262,494 samples, 0.10%)</title><rect x="30.9857%" y="69" width="0.1014%" height="15" fill="rgb(227,1,9)"/><text x="31.2357%" y="79.50"></text></g><g><title>adt_def (409,516 samples, 0.16%)</title><rect x="31.2280%" y="69" width="0.1581%" height="15" fill="rgb(248,47,43)"/><text x="31.4780%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (392,615 samples, 0.15%)</title><rect x="31.2346%" y="53" width="0.1516%" height="15" fill="rgb(221,10,30)"/><text x="31.4846%" y="63.50"></text></g><g><title>adt_def (380,993 samples, 0.15%)</title><rect x="31.4835%" y="53" width="0.1471%" height="15" fill="rgb(210,229,1)"/><text x="31.7335%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (366,153 samples, 0.14%)</title><rect x="31.4892%" y="37" width="0.1414%" height="15" fill="rgb(222,148,37)"/><text x="31.7392%" y="47.50"></text></g><g><title>adt_dtorck_constraint (906,017 samples, 0.35%)</title><rect x="31.4190%" y="69" width="0.3498%" height="15" fill="rgb(234,67,33)"/><text x="31.6690%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,870,597 samples, 0.72%)</title><rect x="31.1197%" y="85" width="0.7222%" height="15" fill="rgb(247,98,35)"/><text x="31.3697%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,815,131 samples, 1.09%)</title><rect x="30.8491%" y="101" width="1.0869%" height="15" fill="rgb(247,138,52)"/><text x="31.0991%" y="111.50"></text></g><g><title>dropck_outlives (3,911,344 samples, 1.51%)</title><rect x="30.4782%" y="133" width="1.5102%" height="15" fill="rgb(213,79,30)"/><text x="30.7282%" y="143.50"></text></g><g><title>adt_dtorck_constraint (3,618,170 samples, 1.40%)</title><rect x="30.5914%" y="117" width="1.3970%" height="15" fill="rgb(246,177,23)"/><text x="30.8414%" y="127.50"></text></g><g><title>adt_def (283,872 samples, 0.11%)</title><rect x="32.4300%" y="85" width="0.1096%" height="15" fill="rgb(230,62,27)"/><text x="32.6800%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (275,172 samples, 0.11%)</title><rect x="32.4333%" y="69" width="0.1062%" height="15" fill="rgb(216,154,8)"/><text x="32.6833%" y="79.50"></text></g><g><title>adt_sized_constraint (563,786 samples, 0.22%)</title><rect x="32.4128%" y="101" width="0.2177%" height="15" fill="rgb(244,35,45)"/><text x="32.6628%" y="111.50"></text></g><g><title>adt_sized_constraint (763,368 samples, 0.29%)</title><rect x="32.3563%" y="117" width="0.2947%" height="15" fill="rgb(251,115,12)"/><text x="32.6063%" y="127.50"></text></g><g><title>specializes (291,984 samples, 0.11%)</title><rect x="32.8292%" y="117" width="0.1127%" height="15" fill="rgb(240,54,50)"/><text x="33.0792%" y="127.50"></text></g><g><title>trait_impls_of (1,225,845 samples, 0.47%)</title><rect x="32.9504%" y="117" width="0.4733%" height="15" fill="rgb(233,84,52)"/><text x="33.2004%" y="127.50"></text></g><g><title>implementations_of_trait (596,797 samples, 0.23%)</title><rect x="33.1933%" y="101" width="0.2304%" height="15" fill="rgb(207,117,47)"/><text x="33.4433%" y="111.50"></text></g><g><title>evaluate_obligation (3,718,117 samples, 1.44%)</title><rect x="31.9884%" y="133" width="1.4356%" height="15" fill="rgb(249,43,39)"/><text x="32.2384%" y="143.50"></text></g><g><title>predicates_of (435,124 samples, 0.17%)</title><rect x="33.7772%" y="133" width="0.1680%" height="15" fill="rgb(209,38,44)"/><text x="34.0272%" y="143.50"></text></g><g><title>predicates_defined_on (289,802 samples, 0.11%)</title><rect x="33.8333%" y="117" width="0.1119%" height="15" fill="rgb(236,212,23)"/><text x="34.0833%" y="127.50"></text></g><g><title>associated_item (282,844 samples, 0.11%)</title><rect x="50.8202%" y="101" width="0.1092%" height="15" fill="rgb(242,79,21)"/><text x="51.0702%" y="111.50"></text></g><g><title>associated_items (432,504 samples, 0.17%)</title><rect x="50.7722%" y="117" width="0.1670%" height="15" fill="rgb(211,96,35)"/><text x="51.0222%" y="127.50"></text></g><g><title>dropck_outlives (563,577 samples, 0.22%)</title><rect x="50.9580%" y="117" width="0.2176%" height="15" fill="rgb(253,215,40)"/><text x="51.2080%" y="127.50"></text></g><g><title>evaluate_obligation (2,158,288 samples, 0.83%)</title><rect x="51.1756%" y="117" width="0.8333%" height="15" fill="rgb(211,81,21)"/><text x="51.4256%" y="127.50"></text></g><g><title>trait_impls_of (423,724 samples, 0.16%)</title><rect x="51.8453%" y="101" width="0.1636%" height="15" fill="rgb(208,190,38)"/><text x="52.0953%" y="111.50"></text></g><g><title>lint_levels (341,703 samples, 0.13%)</title><rect x="52.3240%" y="117" width="0.1319%" height="15" fill="rgb(235,213,38)"/><text x="52.5740%" y="127.50"></text></g><g><title>method_autoderef_steps (562,945 samples, 0.22%)</title><rect x="52.4712%" y="117" width="0.2174%" height="15" fill="rgb(237,122,38)"/><text x="52.7212%" y="127.50"></text></g><g><title>evaluate_obligation (291,341 samples, 0.11%)</title><rect x="52.5761%" y="101" width="0.1125%" height="15" fill="rgb(244,218,35)"/><text x="52.8261%" y="111.50"></text></g><g><title>predicates_of (416,408 samples, 0.16%)</title><rect x="52.6924%" y="117" width="0.1608%" height="15" fill="rgb(240,68,47)"/><text x="52.9424%" y="127.50"></text></g><g><title>predicates_defined_on (264,365 samples, 0.10%)</title><rect x="52.7511%" y="101" width="0.1021%" height="15" fill="rgb(210,16,53)"/><text x="53.0011%" y="111.50"></text></g><g><title>typeck (48,784,174 samples, 18.84%)</title><rect x="34.0859%" y="133" width="18.8358%" height="15" fill="rgb(235,124,12)"/><text x="34.3359%" y="143.50">typeck</text></g><g><title>item_bodies_checking (68,443,954 samples, 26.43%)</title><rect x="26.5122%" y="181" width="26.4265%" height="15" fill="rgb(224,169,11)"/><text x="26.7622%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (68,441,214 samples, 26.43%)</title><rect x="26.5133%" y="165" width="26.4255%" height="15" fill="rgb(250,166,2)"/><text x="26.7633%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (68,410,354 samples, 26.41%)</title><rect x="26.5252%" y="149" width="26.4136%" height="15" fill="rgb(242,216,29)"/><text x="26.7752%" y="159.50">typeck</text></g><g><title>adt_destructor (451,665 samples, 0.17%)</title><rect x="52.9934%" y="149" width="0.1744%" height="15" fill="rgb(230,116,27)"/><text x="53.2434%" y="159.50"></text></g><g><title>coherent_trait (447,755 samples, 0.17%)</title><rect x="52.9949%" y="133" width="0.1729%" height="15" fill="rgb(228,99,48)"/><text x="53.2449%" y="143.50"></text></g><g><title>specialization_graph_of (445,955 samples, 0.17%)</title><rect x="52.9956%" y="117" width="0.1722%" height="15" fill="rgb(253,11,6)"/><text x="53.2456%" y="127.50"></text></g><g><title>item_types_checking (1,156,473 samples, 0.45%)</title><rect x="52.9388%" y="181" width="0.4465%" height="15" fill="rgb(247,143,39)"/><text x="53.1888%" y="191.50"></text></g><g><title>check_mod_item_types (1,154,573 samples, 0.45%)</title><rect x="52.9395%" y="165" width="0.4458%" height="15" fill="rgb(236,97,10)"/><text x="53.1895%" y="175.50"></text></g><g><title>typeck (473,616 samples, 0.18%)</title><rect x="53.2024%" y="149" width="0.1829%" height="15" fill="rgb(233,208,19)"/><text x="53.4524%" y="159.50"></text></g><g><title>predicates_of (296,415 samples, 0.11%)</title><rect x="53.6198%" y="149" width="0.1144%" height="15" fill="rgb(216,164,2)"/><text x="53.8698%" y="159.50"></text></g><g><title>predicates_defined_on (281,394 samples, 0.11%)</title><rect x="53.6256%" y="133" width="0.1086%" height="15" fill="rgb(220,129,5)"/><text x="53.8756%" y="143.50"></text></g><g><title>type_collecting (950,090 samples, 0.37%)</title><rect x="53.3860%" y="181" width="0.3668%" height="15" fill="rgb(242,17,10)"/><text x="53.6360%" y="191.50"></text></g><g><title>collect_mod_item_types (942,950 samples, 0.36%)</title><rect x="53.3887%" y="165" width="0.3641%" height="15" fill="rgb(242,107,0)"/><text x="53.6387%" y="175.50"></text></g><g><title>check_impl_item_well_formed (612,076 samples, 0.24%)</title><rect x="53.7903%" y="165" width="0.2363%" height="15" fill="rgb(251,28,31)"/><text x="54.0403%" y="175.50"></text></g><g><title>adt_def (317,273 samples, 0.12%)</title><rect x="54.3243%" y="101" width="0.1225%" height="15" fill="rgb(233,223,10)"/><text x="54.5743%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (316,153 samples, 0.12%)</title><rect x="54.3247%" y="85" width="0.1221%" height="15" fill="rgb(215,21,27)"/><text x="54.5747%" y="95.50"></text></g><g><title>adt_sized_constraint (433,495 samples, 0.17%)</title><rect x="54.3219%" y="117" width="0.1674%" height="15" fill="rgb(232,23,21)"/><text x="54.5719%" y="127.50"></text></g><g><title>adt_sized_constraint (623,776 samples, 0.24%)</title><rect x="54.2577%" y="133" width="0.2408%" height="15" fill="rgb(244,5,23)"/><text x="54.5077%" y="143.50"></text></g><g><title>evaluate_obligation (905,171 samples, 0.35%)</title><rect x="54.1842%" y="149" width="0.3495%" height="15" fill="rgb(226,81,46)"/><text x="54.4342%" y="159.50"></text></g><g><title>region_scope_tree (466,915 samples, 0.18%)</title><rect x="54.6445%" y="149" width="0.1803%" height="15" fill="rgb(247,70,30)"/><text x="54.8945%" y="159.50"></text></g><g><title>analysis (141,331,166 samples, 54.57%)</title><rect x="0.2679%" y="213" width="54.5687%" height="15" fill="rgb(212,68,19)"/><text x="0.5179%" y="223.50">analysis</text></g><g><title>type_check_crate (74,946,636 samples, 28.94%)</title><rect x="25.8992%" y="197" width="28.9373%" height="15" fill="rgb(240,187,13)"/><text x="26.1492%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,803,850 samples, 1.08%)</title><rect x="53.7539%" y="181" width="1.0826%" height="15" fill="rgb(223,113,26)"/><text x="54.0039%" y="191.50"></text></g><g><title>check_item_well_formed (2,097,674 samples, 0.81%)</title><rect x="54.0266%" y="165" width="0.8099%" height="15" fill="rgb(206,192,2)"/><text x="54.2766%" y="175.50"></text></g><g><title>codegen_crate (451,465 samples, 0.17%)</title><rect x="54.8391%" y="213" width="0.1743%" height="15" fill="rgb(241,108,4)"/><text x="55.0891%" y="223.50"></text></g><g><title>metadata_load_macro (518,016 samples, 0.20%)</title><rect x="89.3200%" y="165" width="0.2000%" height="15" fill="rgb(247,173,49)"/><text x="89.5700%" y="175.50"></text></g><g><title>macro_expand_crate (96,418,484 samples, 37.23%)</title><rect x="55.1963%" y="197" width="37.2276%" height="15" fill="rgb(224,114,35)"/><text x="55.4463%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (96,400,594 samples, 37.22%)</title><rect x="55.2032%" y="181" width="37.2207%" height="15" fill="rgb(245,159,27)"/><text x="55.4532%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (7,521,144 samples, 2.90%)</title><rect x="89.5200%" y="165" width="2.9040%" height="15" fill="rgb(245,172,44)"/><text x="89.7700%" y="175.50">me..</text></g><g><title>metadata_register_crate (6,320,068 samples, 2.44%)</title><rect x="89.9838%" y="149" width="2.4402%" height="15" fill="rgb(236,23,11)"/><text x="90.2338%" y="159.50">me..</text></g><g><title>maybe_create_a_macro_crate (487,186 samples, 0.19%)</title><rect x="92.4246%" y="197" width="0.1881%" height="15" fill="rgb(205,117,38)"/><text x="92.6746%" y="207.50"></text></g><g><title>finalize_macro_resolutions (1,204,503 samples, 0.47%)</title><rect x="92.7029%" y="181" width="0.4651%" height="15" fill="rgb(237,72,25)"/><text x="92.9529%" y="191.50"></text></g><g><title>late_resolve_crate (3,290,107 samples, 1.27%)</title><rect x="93.1680%" y="181" width="1.2703%" height="15" fill="rgb(244,70,9)"/><text x="93.4180%" y="191.50"></text></g><g><title>configure_and_expand (102,305,570 samples, 39.50%)</title><rect x="55.0134%" y="213" width="39.5007%" height="15" fill="rgb(217,125,39)"/><text x="55.2634%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (4,763,343 samples, 1.84%)</title><rect x="92.6749%" y="197" width="1.8392%" height="15" fill="rgb(235,36,10)"/><text x="92.9249%" y="207.50">r..</text></g><g><title>drop_ast (289,293 samples, 0.11%)</title><rect x="94.5141%" y="213" width="0.1117%" height="15" fill="rgb(251,123,47)"/><text x="94.7641%" y="223.50"></text></g><g><title>early_lint_checks (893,850 samples, 0.35%)</title><rect x="94.6334%" y="213" width="0.3451%" height="15" fill="rgb(221,13,13)"/><text x="94.8834%" y="223.50"></text></g><g><title>free_global_ctxt (4,255,638 samples, 1.64%)</title><rect x="94.9786%" y="213" width="1.6431%" height="15" fill="rgb(238,131,9)"/><text x="95.2286%" y="223.50"></text></g><g><title>hir_lowering (4,484,550 samples, 1.73%)</title><rect x="96.6892%" y="213" width="1.7315%" height="15" fill="rgb(211,50,8)"/><text x="96.9392%" y="223.50"></text></g><g><title>parse_crate (2,677,880 samples, 1.03%)</title><rect x="98.4441%" y="213" width="1.0339%" height="15" fill="rgb(245,182,24)"/><text x="98.6941%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (782,849 samples, 0.30%)</title><rect x="99.5561%" y="213" width="0.3023%" height="15" fill="rgb(242,14,37)"/><text x="99.8061%" y="223.50"></text></g><g><title>all (258,996,969 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (258,996,969 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (287,353 samples, 0.11%)</title><rect x="99.8891%" y="213" width="0.1109%" height="15" fill="rgb(209,9,3)"/><text x="100.1391%" y="223.50"></text></g></svg></svg>