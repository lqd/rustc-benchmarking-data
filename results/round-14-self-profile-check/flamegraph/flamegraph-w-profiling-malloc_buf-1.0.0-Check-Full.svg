<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (141,652 samples, 0.28%)</title><rect x="8.5180%" y="101" width="0.2782%" height="15" fill="rgb(227,0,7)"/><text x="8.7680%" y="111.50"></text></g><g><title>item_attrs (55,890 samples, 0.11%)</title><rect x="9.0518%" y="69" width="0.1098%" height="15" fill="rgb(217,0,24)"/><text x="9.3018%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (54,140 samples, 0.11%)</title><rect x="9.0552%" y="53" width="0.1063%" height="15" fill="rgb(221,193,54)"/><text x="9.3052%" y="63.50"></text></g><g><title>codegen_fn_attrs (90,311 samples, 0.18%)</title><rect x="8.9900%" y="85" width="0.1774%" height="15" fill="rgb(248,212,6)"/><text x="9.2400%" y="95.50"></text></g><g><title>is_copy_raw (207,103 samples, 0.41%)</title><rect x="10.2546%" y="69" width="0.4067%" height="15" fill="rgb(208,68,35)"/><text x="10.5046%" y="79.50"></text></g><g><title>evaluate_obligation (174,312 samples, 0.34%)</title><rect x="10.3190%" y="53" width="0.3423%" height="15" fill="rgb(232,128,0)"/><text x="10.5690%" y="63.50"></text></g><g><title>needs_drop_raw (148,401 samples, 0.29%)</title><rect x="10.6824%" y="69" width="0.2914%" height="15" fill="rgb(207,160,47)"/><text x="10.9324%" y="79.50"></text></g><g><title>is_copy_raw (140,911 samples, 0.28%)</title><rect x="10.6971%" y="53" width="0.2767%" height="15" fill="rgb(228,23,34)"/><text x="10.9471%" y="63.50"></text></g><g><title>evaluate_obligation (129,181 samples, 0.25%)</title><rect x="10.7202%" y="37" width="0.2537%" height="15" fill="rgb(218,30,26)"/><text x="10.9702%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (65,320 samples, 0.13%)</title><rect x="11.1167%" y="53" width="0.1283%" height="15" fill="rgb(220,122,19)"/><text x="11.3667%" y="63.50"></text></g><g><title>resolve_instance (187,203 samples, 0.37%)</title><rect x="10.9738%" y="69" width="0.3676%" height="15" fill="rgb(250,228,42)"/><text x="11.2238%" y="79.50"></text></g><g><title>thir_body (214,121 samples, 0.42%)</title><rect x="11.3539%" y="69" width="0.4205%" height="15" fill="rgb(240,193,28)"/><text x="11.6039%" y="79.50"></text></g><g><title>mir_const (1,927,929 samples, 3.79%)</title><rect x="8.0005%" y="117" width="3.7860%" height="15" fill="rgb(216,20,37)"/><text x="8.2505%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (1,522,755 samples, 2.99%)</title><rect x="8.7962%" y="101" width="2.9903%" height="15" fill="rgb(206,188,39)"/><text x="9.0462%" y="111.50">uns..</text></g><g><title>mir_built (1,333,754 samples, 2.62%)</title><rect x="9.1673%" y="85" width="2.6192%" height="15" fill="rgb(217,207,13)"/><text x="9.4173%" y="95.50">mi..</text></g><g><title>thir_body (59,561 samples, 0.12%)</title><rect x="12.2682%" y="53" width="0.1170%" height="15" fill="rgb(231,73,38)"/><text x="12.5182%" y="63.50"></text></g><g><title>mir_promoted (2,483,135 samples, 4.88%)</title><rect x="7.5111%" y="133" width="4.8763%" height="15" fill="rgb(225,20,46)"/><text x="7.7611%" y="143.50">mir_pr..</text></g><g><title>mir_const_qualif (305,964 samples, 0.60%)</title><rect x="11.7865%" y="117" width="0.6008%" height="15" fill="rgb(210,31,41)"/><text x="12.0365%" y="127.50"></text></g><g><title>mir_const (250,622 samples, 0.49%)</title><rect x="11.8952%" y="101" width="0.4922%" height="15" fill="rgb(221,200,47)"/><text x="12.1452%" y="111.50"></text></g><g><title>unsafety_check_result (189,082 samples, 0.37%)</title><rect x="12.0161%" y="85" width="0.3713%" height="15" fill="rgb(226,26,5)"/><text x="12.2661%" y="95.50"></text></g><g><title>mir_built (127,321 samples, 0.25%)</title><rect x="12.1373%" y="69" width="0.2500%" height="15" fill="rgb(249,33,26)"/><text x="12.3873%" y="79.50"></text></g><g><title>type_op_normalize_fn_sig (116,100 samples, 0.23%)</title><rect x="12.4311%" y="133" width="0.2280%" height="15" fill="rgb(235,183,28)"/><text x="12.6811%" y="143.50"></text></g><g><title>normalize_projection_ty (65,180 samples, 0.13%)</title><rect x="12.5311%" y="117" width="0.1280%" height="15" fill="rgb(221,5,38)"/><text x="12.7811%" y="127.50"></text></g><g><title>type_op_prove_predicate (453,973 samples, 0.89%)</title><rect x="12.6591%" y="133" width="0.8915%" height="15" fill="rgb(247,18,42)"/><text x="12.9091%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,872,025 samples, 11.53%)</title><rect x="2.0226%" y="165" width="11.5313%" height="15" fill="rgb(241,131,45)"/><text x="2.2726%" y="175.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (5,836,294 samples, 11.46%)</title><rect x="2.0927%" y="149" width="11.4611%" height="15" fill="rgb(249,31,29)"/><text x="2.3427%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (146,812 samples, 0.29%)</title><rect x="13.5539%" y="165" width="0.2883%" height="15" fill="rgb(225,111,53)"/><text x="13.8039%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (111,221 samples, 0.22%)</title><rect x="13.6238%" y="149" width="0.2184%" height="15" fill="rgb(238,160,17)"/><text x="13.8738%" y="159.50"></text></g><g><title>hir_module_items (199,032 samples, 0.39%)</title><rect x="13.8422%" y="165" width="0.3909%" height="15" fill="rgb(214,148,48)"/><text x="14.0922%" y="175.50"></text></g><g><title>get_lang_items (73,930 samples, 0.15%)</title><rect x="14.6184%" y="117" width="0.1452%" height="15" fill="rgb(232,36,49)"/><text x="14.8684%" y="127.50"></text></g><g><title>associated_item (54,010 samples, 0.11%)</title><rect x="14.8647%" y="101" width="0.1061%" height="15" fill="rgb(209,103,24)"/><text x="15.1147%" y="111.50"></text></g><g><title>item_attrs (72,501 samples, 0.14%)</title><rect x="15.0060%" y="85" width="0.1424%" height="15" fill="rgb(229,88,8)"/><text x="15.2560%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (68,741 samples, 0.13%)</title><rect x="15.0134%" y="69" width="0.1350%" height="15" fill="rgb(213,181,19)"/><text x="15.2634%" y="79.50"></text></g><g><title>codegen_fn_attrs (125,492 samples, 0.25%)</title><rect x="14.9707%" y="101" width="0.2464%" height="15" fill="rgb(254,191,54)"/><text x="15.2207%" y="111.50"></text></g><g><title>should_inherit_track_caller (235,143 samples, 0.46%)</title><rect x="14.7635%" y="117" width="0.4618%" height="15" fill="rgb(241,83,37)"/><text x="15.0135%" y="127.50"></text></g><g><title>codegen_fn_attrs (415,564 samples, 0.82%)</title><rect x="14.4787%" y="133" width="0.8161%" height="15" fill="rgb(233,36,39)"/><text x="14.7287%" y="143.50"></text></g><g><title>check_mod_attrs (510,736 samples, 1.00%)</title><rect x="14.2928%" y="149" width="1.0030%" height="15" fill="rgb(226,3,54)"/><text x="14.5428%" y="159.50"></text></g><g><title>check_mod_const_bodies (55,321 samples, 0.11%)</title><rect x="15.2957%" y="149" width="0.1086%" height="15" fill="rgb(245,192,40)"/><text x="15.5457%" y="159.50"></text></g><g><title>lookup_deprecation_entry (90,961 samples, 0.18%)</title><rect x="15.6802%" y="133" width="0.1786%" height="15" fill="rgb(238,167,29)"/><text x="15.9302%" y="143.50"></text></g><g><title>lookup_stability (57,461 samples, 0.11%)</title><rect x="15.8589%" y="133" width="0.1128%" height="15" fill="rgb(232,182,51)"/><text x="16.1089%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (287,783 samples, 0.57%)</title><rect x="15.4651%" y="149" width="0.5651%" height="15" fill="rgb(231,60,39)"/><text x="15.7151%" y="159.50"></text></g><g><title>misc_checking_1 (960,231 samples, 1.89%)</title><rect x="14.2345%" y="165" width="1.8857%" height="15" fill="rgb(208,69,12)"/><text x="14.4845%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (181,632 samples, 0.36%)</title><rect x="16.1251%" y="149" width="0.3567%" height="15" fill="rgb(235,93,37)"/><text x="16.3751%" y="159.50"></text></g><g><title>check_mod_liveness (146,002 samples, 0.29%)</title><rect x="16.1950%" y="133" width="0.2867%" height="15" fill="rgb(213,116,39)"/><text x="16.4450%" y="143.50"></text></g><g><title>misc_checking_2 (385,154 samples, 0.76%)</title><rect x="16.1202%" y="165" width="0.7564%" height="15" fill="rgb(222,207,29)"/><text x="16.3702%" y="175.50"></text></g><g><title>match_checking (201,032 samples, 0.39%)</title><rect x="16.4817%" y="149" width="0.3948%" height="15" fill="rgb(206,96,30)"/><text x="16.7317%" y="159.50"></text></g><g><title>check_match (187,152 samples, 0.37%)</title><rect x="16.5090%" y="133" width="0.3675%" height="15" fill="rgb(218,138,4)"/><text x="16.7590%" y="143.50"></text></g><g><title>check_private_in_public (82,691 samples, 0.16%)</title><rect x="16.8980%" y="149" width="0.1624%" height="15" fill="rgb(250,191,14)"/><text x="17.1480%" y="159.50"></text></g><g><title>death_checking (132,202 samples, 0.26%)</title><rect x="17.0604%" y="149" width="0.2596%" height="15" fill="rgb(239,60,40)"/><text x="17.3104%" y="159.50"></text></g><g><title>eval_to_const_value_raw (196,312 samples, 0.39%)</title><rect x="17.9961%" y="117" width="0.3855%" height="15" fill="rgb(206,27,48)"/><text x="18.2461%" y="127.50"></text></g><g><title>eval_to_const_value_raw (193,382 samples, 0.38%)</title><rect x="18.0019%" y="101" width="0.3798%" height="15" fill="rgb(225,35,8)"/><text x="18.2519%" y="111.50"></text></g><g><title>eval_to_allocation_raw (185,902 samples, 0.37%)</title><rect x="18.0165%" y="85" width="0.3651%" height="15" fill="rgb(250,213,24)"/><text x="18.2665%" y="95.50"></text></g><g><title>mir_for_ctfe (53,891 samples, 0.11%)</title><rect x="18.2758%" y="69" width="0.1058%" height="15" fill="rgb(247,123,22)"/><text x="18.5258%" y="79.50"></text></g><g><title>param_env (130,781 samples, 0.26%)</title><rect x="18.3816%" y="117" width="0.2568%" height="15" fill="rgb(231,138,38)"/><text x="18.6316%" y="127.50"></text></g><g><title>predicates_of (60,910 samples, 0.12%)</title><rect x="18.5188%" y="101" width="0.1196%" height="15" fill="rgb(231,145,46)"/><text x="18.7688%" y="111.50"></text></g><g><title>predicates_defined_on (51,740 samples, 0.10%)</title><rect x="18.5368%" y="85" width="0.1016%" height="15" fill="rgb(251,118,11)"/><text x="18.7868%" y="95.50"></text></g><g><title>crate_lints (1,159,233 samples, 2.28%)</title><rect x="17.3232%" y="133" width="2.2765%" height="15" fill="rgb(217,147,25)"/><text x="17.5732%" y="143.50">c..</text></g><g><title>type_of (489,483 samples, 0.96%)</title><rect x="18.6384%" y="117" width="0.9612%" height="15" fill="rgb(247,81,37)"/><text x="18.8884%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (336,752 samples, 0.66%)</title><rect x="18.9384%" y="101" width="0.6613%" height="15" fill="rgb(209,12,38)"/><text x="19.1884%" y="111.50"></text></g><g><title>lint_checking (1,214,293 samples, 2.38%)</title><rect x="17.3200%" y="149" width="2.3846%" height="15" fill="rgb(227,1,9)"/><text x="17.5700%" y="159.50">li..</text></g><g><title>module_lints (53,430 samples, 0.10%)</title><rect x="19.5997%" y="133" width="0.1049%" height="15" fill="rgb(248,47,43)"/><text x="19.8497%" y="143.50"></text></g><g><title>lint_mod (51,610 samples, 0.10%)</title><rect x="19.6032%" y="117" width="0.1014%" height="15" fill="rgb(221,10,30)"/><text x="19.8532%" y="127.50"></text></g><g><title>privacy_access_levels (101,341 samples, 0.20%)</title><rect x="19.7046%" y="149" width="0.1990%" height="15" fill="rgb(210,229,1)"/><text x="19.9546%" y="159.50"></text></g><g><title>privacy_checking_modules (107,072 samples, 0.21%)</title><rect x="19.9036%" y="149" width="0.2103%" height="15" fill="rgb(222,148,37)"/><text x="20.1536%" y="159.50"></text></g><g><title>check_mod_privacy (105,872 samples, 0.21%)</title><rect x="19.9060%" y="133" width="0.2079%" height="15" fill="rgb(234,67,33)"/><text x="20.1560%" y="143.50"></text></g><g><title>misc_checking_3 (1,669,359 samples, 3.28%)</title><rect x="16.8765%" y="165" width="3.2782%" height="15" fill="rgb(247,98,35)"/><text x="17.1265%" y="175.50">mis..</text></g><g><title>impl_parent (626,700 samples, 1.23%)</title><rect x="22.4231%" y="101" width="1.2307%" height="15" fill="rgb(247,138,52)"/><text x="22.6731%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (356,847 samples, 0.70%)</title><rect x="22.9530%" y="85" width="0.7008%" height="15" fill="rgb(213,79,30)"/><text x="23.2030%" y="95.50"></text></g><g><title>impl_trait_ref (1,973,330 samples, 3.88%)</title><rect x="23.6537%" y="101" width="3.8752%" height="15" fill="rgb(246,177,23)"/><text x="23.9037%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,722,189 samples, 3.38%)</title><rect x="24.1469%" y="85" width="3.3820%" height="15" fill="rgb(230,62,27)"/><text x="24.3969%" y="95.50">met..</text></g><g><title>coherent_trait (3,930,573 samples, 7.72%)</title><rect x="20.2900%" y="133" width="7.7187%" height="15" fill="rgb(216,154,8)"/><text x="20.5400%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (3,905,013 samples, 7.67%)</title><rect x="20.3402%" y="117" width="7.6685%" height="15" fill="rgb(244,35,45)"/><text x="20.5902%" y="127.50">specializa..</text></g><g><title>trait_impls_of (241,861 samples, 0.47%)</title><rect x="27.5338%" y="101" width="0.4750%" height="15" fill="rgb(251,115,12)"/><text x="27.7838%" y="111.50"></text></g><g><title>implementations_of_trait (64,310 samples, 0.13%)</title><rect x="27.8824%" y="85" width="0.1263%" height="15" fill="rgb(240,54,50)"/><text x="28.1324%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (52,440 samples, 0.10%)</title><rect x="27.9057%" y="69" width="0.1030%" height="15" fill="rgb(233,84,52)"/><text x="28.1557%" y="79.50"></text></g><g><title>coherence_checking (4,041,355 samples, 7.94%)</title><rect x="20.2428%" y="149" width="7.9363%" height="15" fill="rgb(207,117,47)"/><text x="20.4928%" y="159.50">coherence_c..</text></g><g><title>associated_item (78,420 samples, 0.15%)</title><rect x="34.6710%" y="85" width="0.1540%" height="15" fill="rgb(249,43,39)"/><text x="34.9210%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (58,310 samples, 0.11%)</title><rect x="34.7104%" y="69" width="0.1145%" height="15" fill="rgb(209,38,44)"/><text x="34.9604%" y="79.50"></text></g><g><title>associated_items (130,051 samples, 0.26%)</title><rect x="34.5833%" y="101" width="0.2554%" height="15" fill="rgb(236,212,23)"/><text x="34.8333%" y="111.50"></text></g><g><title>dropck_outlives (88,872 samples, 0.17%)</title><rect x="34.8674%" y="101" width="0.1745%" height="15" fill="rgb(242,79,21)"/><text x="35.1174%" y="111.50"></text></g><g><title>evaluate_obligation (441,526 samples, 0.87%)</title><rect x="35.0419%" y="101" width="0.8671%" height="15" fill="rgb(211,96,35)"/><text x="35.2919%" y="111.50"></text></g><g><title>trait_impls_of (87,791 samples, 0.17%)</title><rect x="35.7366%" y="85" width="0.1724%" height="15" fill="rgb(253,215,40)"/><text x="35.9866%" y="95.50"></text></g><g><title>item_attrs (94,291 samples, 0.19%)</title><rect x="36.1143%" y="101" width="0.1852%" height="15" fill="rgb(211,81,21)"/><text x="36.3643%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,910 samples, 0.17%)</title><rect x="36.1248%" y="85" width="0.1746%" height="15" fill="rgb(208,190,38)"/><text x="36.3748%" y="95.50"></text></g><g><title>predicates_of (93,870 samples, 0.18%)</title><rect x="36.3790%" y="101" width="0.1843%" height="15" fill="rgb(235,213,38)"/><text x="36.6290%" y="111.50"></text></g><g><title>predicates_defined_on (63,150 samples, 0.12%)</title><rect x="36.4393%" y="85" width="0.1240%" height="15" fill="rgb(237,122,38)"/><text x="36.6893%" y="95.50"></text></g><g><title>associated_item (159,351 samples, 0.31%)</title><rect x="39.4537%" y="69" width="0.3129%" height="15" fill="rgb(244,218,35)"/><text x="39.7037%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (106,801 samples, 0.21%)</title><rect x="39.5569%" y="53" width="0.2097%" height="15" fill="rgb(240,68,47)"/><text x="39.8069%" y="63.50"></text></g><g><title>associated_items (245,483 samples, 0.48%)</title><rect x="39.3012%" y="85" width="0.4821%" height="15" fill="rgb(210,16,53)"/><text x="39.5512%" y="95.50"></text></g><g><title>dropck_outlives (60,751 samples, 0.12%)</title><rect x="39.7959%" y="85" width="0.1193%" height="15" fill="rgb(235,124,12)"/><text x="40.0459%" y="95.50"></text></g><g><title>evaluate_obligation (399,526 samples, 0.78%)</title><rect x="39.9152%" y="85" width="0.7846%" height="15" fill="rgb(224,169,11)"/><text x="40.1652%" y="95.50"></text></g><g><title>trait_impls_of (170,362 samples, 0.33%)</title><rect x="40.3652%" y="69" width="0.3346%" height="15" fill="rgb(250,166,2)"/><text x="40.6152%" y="79.50"></text></g><g><title>is_copy_raw (108,531 samples, 0.21%)</title><rect x="40.9352%" y="85" width="0.2131%" height="15" fill="rgb(242,216,29)"/><text x="41.1852%" y="95.50"></text></g><g><title>evaluate_obligation (94,451 samples, 0.19%)</title><rect x="40.9628%" y="69" width="0.1855%" height="15" fill="rgb(230,116,27)"/><text x="41.2128%" y="79.50"></text></g><g><title>item_attrs (54,610 samples, 0.11%)</title><rect x="41.1483%" y="85" width="0.1072%" height="15" fill="rgb(228,99,48)"/><text x="41.3983%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (52,850 samples, 0.10%)</title><rect x="41.1517%" y="69" width="0.1038%" height="15" fill="rgb(253,11,6)"/><text x="41.4017%" y="79.50"></text></g><g><title>predicates_of (63,150 samples, 0.12%)</title><rect x="41.3371%" y="85" width="0.1240%" height="15" fill="rgb(247,143,39)"/><text x="41.5871%" y="95.50"></text></g><g><title>typeck (2,477,398 samples, 4.87%)</title><rect x="36.6335%" y="101" width="4.8650%" height="15" fill="rgb(236,97,10)"/><text x="36.8835%" y="111.50">typeck</text></g><g><title>item_bodies_checking (6,759,335 samples, 13.27%)</title><rect x="28.2407%" y="149" width="13.2738%" height="15" fill="rgb(233,208,19)"/><text x="28.4907%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (6,755,915 samples, 13.27%)</title><rect x="28.2474%" y="133" width="13.2671%" height="15" fill="rgb(216,164,2)"/><text x="28.4974%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (6,730,915 samples, 13.22%)</title><rect x="28.2965%" y="117" width="13.2180%" height="15" fill="rgb(220,129,5)"/><text x="28.5465%" y="127.50">typeck</text></g><g><title>item_types_checking (873,499 samples, 1.72%)</title><rect x="41.5144%" y="149" width="1.7154%" height="15" fill="rgb(242,17,10)"/><text x="41.7644%" y="159.50"></text></g><g><title>check_mod_item_types (869,639 samples, 1.71%)</title><rect x="41.5220%" y="133" width="1.7078%" height="15" fill="rgb(242,107,0)"/><text x="41.7720%" y="143.50"></text></g><g><title>typeck (281,773 samples, 0.55%)</title><rect x="42.6764%" y="117" width="0.5533%" height="15" fill="rgb(251,28,31)"/><text x="42.9264%" y="127.50"></text></g><g><title>late_bound_vars_map (51,021 samples, 0.10%)</title><rect x="43.6926%" y="101" width="0.1002%" height="15" fill="rgb(233,223,10)"/><text x="43.9426%" y="111.50"></text></g><g><title>fn_sig (212,723 samples, 0.42%)</title><rect x="43.5334%" y="117" width="0.4177%" height="15" fill="rgb(215,21,27)"/><text x="43.7834%" y="127.50"></text></g><g><title>type_of (80,602 samples, 0.16%)</title><rect x="43.7928%" y="101" width="0.1583%" height="15" fill="rgb(232,23,21)"/><text x="44.0428%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (77,352 samples, 0.15%)</title><rect x="43.7992%" y="85" width="0.1519%" height="15" fill="rgb(244,5,23)"/><text x="44.0492%" y="95.50"></text></g><g><title>named_region_map (56,221 samples, 0.11%)</title><rect x="44.1053%" y="101" width="0.1104%" height="15" fill="rgb(226,81,46)"/><text x="44.3553%" y="111.50"></text></g><g><title>generics_of (154,813 samples, 0.30%)</title><rect x="43.9511%" y="117" width="0.3040%" height="15" fill="rgb(247,70,30)"/><text x="44.2011%" y="127.50"></text></g><g><title>late_bound_vars_map (155,961 samples, 0.31%)</title><rect x="44.7493%" y="69" width="0.3063%" height="15" fill="rgb(212,68,19)"/><text x="44.9993%" y="79.50"></text></g><g><title>resolve_lifetimes (148,571 samples, 0.29%)</title><rect x="44.7638%" y="53" width="0.2918%" height="15" fill="rgb(240,187,13)"/><text x="45.0138%" y="63.50"></text></g><g><title>explicit_predicates_of (297,372 samples, 0.58%)</title><rect x="44.4789%" y="85" width="0.5840%" height="15" fill="rgb(223,113,26)"/><text x="44.7289%" y="95.50"></text></g><g><title>predicates_of (431,344 samples, 0.85%)</title><rect x="44.3400%" y="117" width="0.8471%" height="15" fill="rgb(206,192,2)"/><text x="44.5900%" y="127.50"></text></g><g><title>predicates_defined_on (409,144 samples, 0.80%)</title><rect x="44.3836%" y="101" width="0.8035%" height="15" fill="rgb(241,108,4)"/><text x="44.6336%" y="111.50"></text></g><g><title>inferred_outlives_of (63,241 samples, 0.12%)</title><rect x="45.0629%" y="85" width="0.1242%" height="15" fill="rgb(247,173,49)"/><text x="45.3129%" y="95.50"></text></g><g><title>type_collecting (1,161,453 samples, 2.28%)</title><rect x="43.2359%" y="149" width="2.2808%" height="15" fill="rgb(224,114,35)"/><text x="43.4859%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,149,813 samples, 2.26%)</title><rect x="43.2588%" y="133" width="2.2580%" height="15" fill="rgb(245,159,27)"/><text x="43.5088%" y="143.50">c..</text></g><g><title>type_of (167,882 samples, 0.33%)</title><rect x="45.1871%" y="117" width="0.3297%" height="15" fill="rgb(245,172,44)"/><text x="45.4371%" y="127.50"></text></g><g><title>adt_def (81,330 samples, 0.16%)</title><rect x="47.6680%" y="85" width="0.1597%" height="15" fill="rgb(236,23,11)"/><text x="47.9180%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (72,360 samples, 0.14%)</title><rect x="47.6856%" y="69" width="0.1421%" height="15" fill="rgb(205,117,38)"/><text x="47.9356%" y="79.50"></text></g><g><title>item_attrs (52,520 samples, 0.10%)</title><rect x="47.7245%" y="53" width="0.1031%" height="15" fill="rgb(237,72,25)"/><text x="47.9745%" y="63.50"></text></g><g><title>adt_sized_constraint (128,401 samples, 0.25%)</title><rect x="47.6444%" y="101" width="0.2522%" height="15" fill="rgb(244,70,9)"/><text x="47.8944%" y="111.50"></text></g><g><title>evaluate_obligation (453,834 samples, 0.89%)</title><rect x="47.1198%" y="117" width="0.8912%" height="15" fill="rgb(217,125,39)"/><text x="47.3698%" y="127.50"></text></g><g><title>implied_outlives_bounds (151,401 samples, 0.30%)</title><rect x="48.0110%" y="117" width="0.2973%" height="15" fill="rgb(235,36,10)"/><text x="48.2610%" y="127.50"></text></g><g><title>param_env (94,950 samples, 0.19%)</title><rect x="48.3083%" y="117" width="0.1865%" height="15" fill="rgb(251,123,47)"/><text x="48.5583%" y="127.50"></text></g><g><title>predicates_of (54,540 samples, 0.11%)</title><rect x="48.4948%" y="117" width="0.1071%" height="15" fill="rgb(221,13,13)"/><text x="48.7448%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,566,056 samples, 3.08%)</title><rect x="45.7131%" y="133" width="3.0754%" height="15" fill="rgb(238,131,9)"/><text x="45.9631%" y="143.50">che..</text></g><g><title>region_scope_tree (95,042 samples, 0.19%)</title><rect x="48.6019%" y="117" width="0.1866%" height="15" fill="rgb(211,50,8)"/><text x="48.8519%" y="127.50"></text></g><g><title>evaluate_obligation (61,371 samples, 0.12%)</title><rect x="50.3214%" y="117" width="0.1205%" height="15" fill="rgb(245,182,24)"/><text x="50.5714%" y="127.50"></text></g><g><title>implied_outlives_bounds (120,741 samples, 0.24%)</title><rect x="50.4577%" y="117" width="0.2371%" height="15" fill="rgb(242,14,37)"/><text x="50.7077%" y="127.50"></text></g><g><title>param_env (306,476 samples, 0.60%)</title><rect x="50.6948%" y="117" width="0.6018%" height="15" fill="rgb(246,228,12)"/><text x="50.9448%" y="127.50"></text></g><g><title>predicates_of (88,880 samples, 0.17%)</title><rect x="51.2967%" y="117" width="0.1745%" height="15" fill="rgb(213,55,15)"/><text x="51.5467%" y="127.50"></text></g><g><title>predicates_defined_on (57,960 samples, 0.11%)</title><rect x="51.3574%" y="101" width="0.1138%" height="15" fill="rgb(209,9,3)"/><text x="51.6074%" y="111.50"></text></g><g><title>analysis (25,460,063 samples, 50.00%)</title><rect x="1.6531%" y="181" width="49.9977%" height="15" fill="rgb(230,59,30)"/><text x="1.9031%" y="191.50">analysis</text></g><g><title>type_check_crate (16,038,558 samples, 31.50%)</title><rect x="20.1548%" y="165" width="31.4960%" height="15" fill="rgb(209,121,21)"/><text x="20.4048%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,121,155 samples, 6.13%)</title><rect x="45.5216%" y="149" width="6.1292%" height="15" fill="rgb(220,109,13)"/><text x="45.7716%" y="159.50">wf_check..</text></g><g><title>check_item_well_formed (1,457,549 samples, 2.86%)</title><rect x="48.7885%" y="133" width="2.8623%" height="15" fill="rgb(232,18,1)"/><text x="49.0385%" y="143.50">ch..</text></g><g><title>variances_of (65,781 samples, 0.13%)</title><rect x="51.5216%" y="117" width="0.1292%" height="15" fill="rgb(215,41,42)"/><text x="51.7716%" y="127.50"></text></g><g><title>crate_variances (61,101 samples, 0.12%)</title><rect x="51.5308%" y="101" width="0.1200%" height="15" fill="rgb(224,123,36)"/><text x="51.7808%" y="111.50"></text></g><g><title>codegen_crate (465,675 samples, 0.91%)</title><rect x="51.6738%" y="181" width="0.9145%" height="15" fill="rgb(240,125,3)"/><text x="51.9238%" y="191.50"></text></g><g><title>AST_validation (70,421 samples, 0.14%)</title><rect x="53.0481%" y="165" width="0.1383%" height="15" fill="rgb(205,98,50)"/><text x="53.2981%" y="175.50"></text></g><g><title>crate_injection (81,001 samples, 0.16%)</title><rect x="53.2526%" y="165" width="0.1591%" height="15" fill="rgb(205,185,37)"/><text x="53.5026%" y="175.50"></text></g><g><title>macro_expand_crate (15,316,389 samples, 30.08%)</title><rect x="53.4117%" y="165" width="30.0779%" height="15" fill="rgb(238,207,15)"/><text x="53.6617%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (15,289,289 samples, 30.02%)</title><rect x="53.4649%" y="149" width="30.0247%" height="15" fill="rgb(213,199,42)"/><text x="53.7149%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (246,553 samples, 0.48%)</title><rect x="83.0054%" y="133" width="0.4842%" height="15" fill="rgb(235,201,11)"/><text x="83.2554%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (157,242 samples, 0.31%)</title><rect x="83.5009%" y="165" width="0.3088%" height="15" fill="rgb(207,46,11)"/><text x="83.7509%" y="175.50"></text></g><g><title>finalize_macro_resolutions (176,192 samples, 0.35%)</title><rect x="83.9078%" y="149" width="0.3460%" height="15" fill="rgb(241,35,35)"/><text x="84.1578%" y="159.50"></text></g><g><title>late_resolve_crate (1,542,887 samples, 3.03%)</title><rect x="84.2538%" y="149" width="3.0299%" height="15" fill="rgb(243,32,47)"/><text x="84.5038%" y="159.50">lat..</text></g><g><title>configure_and_expand (17,729,456 samples, 34.82%)</title><rect x="52.5882%" y="181" width="34.8166%" height="15" fill="rgb(247,202,23)"/><text x="52.8382%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,830,711 samples, 3.60%)</title><rect x="83.8097%" y="165" width="3.5951%" height="15" fill="rgb(219,102,11)"/><text x="84.0597%" y="175.50">reso..</text></g><g><title>drop_ast (81,460 samples, 0.16%)</title><rect x="87.4048%" y="181" width="0.1600%" height="15" fill="rgb(243,110,44)"/><text x="87.6548%" y="191.50"></text></g><g><title>early_lint_checks (156,992 samples, 0.31%)</title><rect x="87.5960%" y="181" width="0.3083%" height="15" fill="rgb(222,74,54)"/><text x="87.8460%" y="191.50"></text></g><g><title>free_global_ctxt (1,455,296 samples, 2.86%)</title><rect x="87.9043%" y="181" width="2.8579%" height="15" fill="rgb(216,99,12)"/><text x="88.1543%" y="191.50">fr..</text></g><g><title>crate_hash (61,781 samples, 0.12%)</title><rect x="91.2980%" y="165" width="0.1213%" height="15" fill="rgb(226,22,26)"/><text x="91.5480%" y="175.50"></text></g><g><title>generate_crate_metadata (380,434 samples, 0.75%)</title><rect x="90.7621%" y="181" width="0.7471%" height="15" fill="rgb(217,163,10)"/><text x="91.0121%" y="191.50"></text></g><g><title>hir_lowering (1,116,823 samples, 2.19%)</title><rect x="91.5092%" y="181" width="2.1932%" height="15" fill="rgb(213,25,53)"/><text x="91.7592%" y="191.50">h..</text></g><g><title>parse_crate (2,008,003 samples, 3.94%)</title><rect x="93.7837%" y="181" width="3.9433%" height="15" fill="rgb(252,105,26)"/><text x="94.0337%" y="191.50">pars..</text></g><g><title>prepare_outputs (330,764 samples, 0.65%)</title><rect x="97.7453%" y="181" width="0.6495%" height="15" fill="rgb(220,39,43)"/><text x="97.9953%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (353,364 samples, 0.69%)</title><rect x="98.3948%" y="181" width="0.6939%" height="15" fill="rgb(229,68,48)"/><text x="98.6448%" y="191.50"></text></g><g><title>setup_global_ctxt (128,732 samples, 0.25%)</title><rect x="99.1099%" y="181" width="0.2528%" height="15" fill="rgb(252,8,32)"/><text x="99.3599%" y="191.50"></text></g><g><title>all (50,922,446 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (50,922,446 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (324,514 samples, 0.64%)</title><rect x="99.3627%" y="181" width="0.6373%" height="15" fill="rgb(236,28,36)"/><text x="99.6127%" y="191.50"></text></g></svg></svg>