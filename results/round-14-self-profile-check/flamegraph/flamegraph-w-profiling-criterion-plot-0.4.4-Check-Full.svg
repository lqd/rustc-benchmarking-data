<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (448,528 samples, 0.14%)</title><rect x="14.4172%" y="117" width="0.1437%" height="15" fill="rgb(227,0,7)"/><text x="14.6672%" y="127.50"></text></g><g><title>item_attrs (557,304 samples, 0.18%)</title><rect x="15.0346%" y="85" width="0.1786%" height="15" fill="rgb(217,0,24)"/><text x="15.2846%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (541,304 samples, 0.17%)</title><rect x="15.0397%" y="69" width="0.1735%" height="15" fill="rgb(221,193,54)"/><text x="15.2897%" y="79.50"></text></g><g><title>codegen_fn_attrs (761,726 samples, 0.24%)</title><rect x="14.9789%" y="101" width="0.2441%" height="15" fill="rgb(248,212,6)"/><text x="15.2289%" y="111.50"></text></g><g><title>is_copy_raw (374,312 samples, 0.12%)</title><rect x="18.0239%" y="85" width="0.1200%" height="15" fill="rgb(208,68,35)"/><text x="18.2739%" y="95.50"></text></g><g><title>adt_drop_tys (794,788 samples, 0.25%)</title><rect x="18.2892%" y="69" width="0.2547%" height="15" fill="rgb(232,128,0)"/><text x="18.5392%" y="79.50"></text></g><g><title>is_copy_raw (2,270,559 samples, 0.73%)</title><rect x="18.5439%" y="69" width="0.7276%" height="15" fill="rgb(207,160,47)"/><text x="18.7939%" y="79.50"></text></g><g><title>evaluate_obligation (1,811,103 samples, 0.58%)</title><rect x="18.6911%" y="53" width="0.5804%" height="15" fill="rgb(228,23,34)"/><text x="18.9411%" y="63.50"></text></g><g><title>needs_drop_raw (3,651,508 samples, 1.17%)</title><rect x="18.1439%" y="85" width="1.1702%" height="15" fill="rgb(218,30,26)"/><text x="18.3939%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,153,426 samples, 0.37%)</title><rect x="19.4766%" y="69" width="0.3696%" height="15" fill="rgb(220,122,19)"/><text x="19.7266%" y="79.50"></text></g><g><title>specialization_graph_of (1,411,684 samples, 0.45%)</title><rect x="19.8851%" y="69" width="0.4524%" height="15" fill="rgb(250,228,42)"/><text x="20.1351%" y="79.50"></text></g><g><title>impl_trait_ref (566,576 samples, 0.18%)</title><rect x="20.1559%" y="53" width="0.1816%" height="15" fill="rgb(240,193,28)"/><text x="20.4059%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (429,594 samples, 0.14%)</title><rect x="20.1998%" y="37" width="0.1377%" height="15" fill="rgb(216,20,37)"/><text x="20.4498%" y="47.50"></text></g><g><title>resolve_instance (3,359,983 samples, 1.08%)</title><rect x="19.3141%" y="85" width="1.0768%" height="15" fill="rgb(206,188,39)"/><text x="19.5641%" y="95.50"></text></g><g><title>thir_body (3,310,151 samples, 1.06%)</title><rect x="20.4173%" y="85" width="1.0608%" height="15" fill="rgb(217,207,13)"/><text x="20.6673%" y="95.50"></text></g><g><title>mir_const (24,498,400 samples, 7.85%)</title><rect x="13.6817%" y="133" width="7.8510%" height="15" fill="rgb(231,73,38)"/><text x="13.9317%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (21,754,718 samples, 6.97%)</title><rect x="14.5610%" y="117" width="6.9717%" height="15" fill="rgb(225,20,46)"/><text x="14.8110%" y="127.50">unsafety_..</text></g><g><title>mir_built (19,688,745 samples, 6.31%)</title><rect x="15.2230%" y="101" width="6.3096%" height="15" fill="rgb(210,31,41)"/><text x="15.4730%" y="111.50">mir_built</text></g><g><title>mir_promoted (26,988,710 samples, 8.65%)</title><rect x="12.9277%" y="149" width="8.6490%" height="15" fill="rgb(221,200,47)"/><text x="13.1777%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (2,224,789 samples, 0.71%)</title><rect x="21.5767%" y="149" width="0.7130%" height="15" fill="rgb(226,26,5)"/><text x="21.8267%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,963,026 samples, 0.63%)</title><rect x="22.2897%" y="149" width="0.6291%" height="15" fill="rgb(249,33,26)"/><text x="22.5397%" y="159.50"></text></g><g><title>normalize_projection_ty (1,385,151 samples, 0.44%)</title><rect x="22.4749%" y="133" width="0.4439%" height="15" fill="rgb(235,183,28)"/><text x="22.7249%" y="143.50"></text></g><g><title>type_op_normalize_predicate (663,577 samples, 0.21%)</title><rect x="22.9188%" y="149" width="0.2127%" height="15" fill="rgb(221,5,38)"/><text x="23.1688%" y="159.50"></text></g><g><title>normalize_projection_ty (429,885 samples, 0.14%)</title><rect x="22.9937%" y="133" width="0.1378%" height="15" fill="rgb(247,18,42)"/><text x="23.2437%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,438,055 samples, 1.74%)</title><rect x="23.2043%" y="149" width="1.7427%" height="15" fill="rgb(241,131,45)"/><text x="23.4543%" y="159.50"></text></g><g><title>MIR_borrow_checking (76,078,430 samples, 24.38%)</title><rect x="0.5721%" y="181" width="24.3808%" height="15" fill="rgb(249,31,29)"/><text x="0.8221%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (75,693,609 samples, 24.26%)</title><rect x="0.6955%" y="165" width="24.2574%" height="15" fill="rgb(225,111,53)"/><text x="0.9455%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (591,546 samples, 0.19%)</title><rect x="24.9996%" y="181" width="0.1896%" height="15" fill="rgb(238,160,17)"/><text x="25.2496%" y="191.50"></text></g><g><title>should_inherit_track_caller (404,724 samples, 0.13%)</title><rect x="25.5111%" y="133" width="0.1297%" height="15" fill="rgb(214,148,48)"/><text x="25.7611%" y="143.50"></text></g><g><title>codegen_fn_attrs (764,257 samples, 0.24%)</title><rect x="25.3998%" y="149" width="0.2449%" height="15" fill="rgb(232,36,49)"/><text x="25.6498%" y="159.50"></text></g><g><title>check_mod_attrs (1,375,702 samples, 0.44%)</title><rect x="25.2039%" y="165" width="0.4409%" height="15" fill="rgb(209,103,24)"/><text x="25.4539%" y="175.50"></text></g><g><title>check_mod_const_bodies (331,727 samples, 0.11%)</title><rect x="25.6448%" y="165" width="0.1063%" height="15" fill="rgb(229,88,8)"/><text x="25.8948%" y="175.50"></text></g><g><title>lookup_deprecation_entry (338,293 samples, 0.11%)</title><rect x="25.9522%" y="149" width="0.1084%" height="15" fill="rgb(213,181,19)"/><text x="26.2022%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (842,208 samples, 0.27%)</title><rect x="25.8235%" y="165" width="0.2699%" height="15" fill="rgb(254,191,54)"/><text x="26.0735%" y="175.50"></text></g><g><title>misc_checking_1 (3,057,704 samples, 0.98%)</title><rect x="25.1894%" y="181" width="0.9799%" height="15" fill="rgb(241,83,37)"/><text x="25.4394%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,453,216 samples, 0.47%)</title><rect x="26.1698%" y="165" width="0.4657%" height="15" fill="rgb(233,36,39)"/><text x="26.4198%" y="175.50"></text></g><g><title>check_mod_liveness (1,190,775 samples, 0.38%)</title><rect x="26.2540%" y="149" width="0.3816%" height="15" fill="rgb(226,3,54)"/><text x="26.5040%" y="159.50"></text></g><g><title>misc_checking_2 (3,155,135 samples, 1.01%)</title><rect x="26.1693%" y="181" width="1.0111%" height="15" fill="rgb(245,192,40)"/><text x="26.4193%" y="191.50"></text></g><g><title>match_checking (1,700,079 samples, 0.54%)</title><rect x="26.6356%" y="165" width="0.5448%" height="15" fill="rgb(238,167,29)"/><text x="26.8856%" y="175.50"></text></g><g><title>check_match (1,607,858 samples, 0.52%)</title><rect x="26.6651%" y="149" width="0.5153%" height="15" fill="rgb(232,182,51)"/><text x="26.9151%" y="159.50"></text></g><g><title>check_private_in_public (729,258 samples, 0.23%)</title><rect x="27.1840%" y="165" width="0.2337%" height="15" fill="rgb(231,60,39)"/><text x="27.4340%" y="175.50"></text></g><g><title>death_checking (1,408,206 samples, 0.45%)</title><rect x="27.4177%" y="165" width="0.4513%" height="15" fill="rgb(208,69,12)"/><text x="27.6677%" y="175.50"></text></g><g><title>param_env (1,159,663 samples, 0.37%)</title><rect x="28.3540%" y="133" width="0.3716%" height="15" fill="rgb(235,93,37)"/><text x="28.6040%" y="143.50"></text></g><g><title>predicates_of (490,677 samples, 0.16%)</title><rect x="28.5684%" y="117" width="0.1572%" height="15" fill="rgb(213,116,39)"/><text x="28.8184%" y="127.50"></text></g><g><title>predicates_defined_on (392,023 samples, 0.13%)</title><rect x="28.6000%" y="101" width="0.1256%" height="15" fill="rgb(222,207,29)"/><text x="28.8500%" y="111.50"></text></g><g><title>crate_lints (3,931,755 samples, 1.26%)</title><rect x="27.8695%" y="149" width="1.2600%" height="15" fill="rgb(206,96,30)"/><text x="28.1195%" y="159.50"></text></g><g><title>type_of (1,196,321 samples, 0.38%)</title><rect x="28.7461%" y="133" width="0.3834%" height="15" fill="rgb(218,138,4)"/><text x="28.9961%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (951,510 samples, 0.30%)</title><rect x="28.8246%" y="117" width="0.3049%" height="15" fill="rgb(250,191,14)"/><text x="29.0746%" y="127.50"></text></g><g><title>lint_checking (5,587,793 samples, 1.79%)</title><rect x="27.8690%" y="165" width="1.7907%" height="15" fill="rgb(239,60,40)"/><text x="28.1190%" y="175.50">l..</text></g><g><title>module_lints (1,654,418 samples, 0.53%)</title><rect x="29.1295%" y="149" width="0.5302%" height="15" fill="rgb(206,27,48)"/><text x="29.3795%" y="159.50"></text></g><g><title>lint_mod (1,639,398 samples, 0.53%)</title><rect x="29.1343%" y="133" width="0.5254%" height="15" fill="rgb(225,35,8)"/><text x="29.3843%" y="143.50"></text></g><g><title>privacy_access_levels (936,331 samples, 0.30%)</title><rect x="29.6597%" y="165" width="0.3001%" height="15" fill="rgb(250,213,24)"/><text x="29.9097%" y="175.50"></text></g><g><title>privacy_checking_modules (2,566,499 samples, 0.82%)</title><rect x="29.9598%" y="165" width="0.8225%" height="15" fill="rgb(247,123,22)"/><text x="30.2098%" y="175.50"></text></g><g><title>check_mod_privacy (2,555,469 samples, 0.82%)</title><rect x="29.9633%" y="149" width="0.8189%" height="15" fill="rgb(231,138,38)"/><text x="30.2133%" y="159.50"></text></g><g><title>misc_checking_3 (11,277,157 samples, 3.61%)</title><rect x="27.1804%" y="181" width="3.6140%" height="15" fill="rgb(231,145,46)"/><text x="27.4304%" y="191.50">misc..</text></g><g><title>impl_parent (1,986,353 samples, 0.64%)</title><rect x="32.1898%" y="117" width="0.6366%" height="15" fill="rgb(251,118,11)"/><text x="32.4398%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,216,923 samples, 0.39%)</title><rect x="32.4364%" y="101" width="0.3900%" height="15" fill="rgb(217,147,25)"/><text x="32.6864%" y="111.50"></text></g><g><title>impl_trait_ref (4,853,929 samples, 1.56%)</title><rect x="32.8263%" y="117" width="1.5555%" height="15" fill="rgb(247,81,37)"/><text x="33.0763%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,059,751 samples, 1.30%)</title><rect x="33.0808%" y="101" width="1.3010%" height="15" fill="rgb(209,12,38)"/><text x="33.3308%" y="111.50"></text></g><g><title>coherent_trait (11,554,039 samples, 3.70%)</title><rect x="30.8877%" y="149" width="3.7027%" height="15" fill="rgb(227,1,9)"/><text x="31.1377%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (10,941,183 samples, 3.51%)</title><rect x="31.0841%" y="133" width="3.5063%" height="15" fill="rgb(248,47,43)"/><text x="31.3341%" y="143.50">spe..</text></g><g><title>trait_impls_of (648,647 samples, 0.21%)</title><rect x="34.3825%" y="117" width="0.2079%" height="15" fill="rgb(221,10,30)"/><text x="34.6325%" y="127.50"></text></g><g><title>coherence_checking (11,750,121 samples, 3.77%)</title><rect x="30.8801%" y="165" width="3.7655%" height="15" fill="rgb(210,229,1)"/><text x="31.1301%" y="175.50">cohe..</text></g><g><title>associated_item (683,866 samples, 0.22%)</title><rect x="55.1139%" y="101" width="0.2192%" height="15" fill="rgb(222,148,37)"/><text x="55.3639%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (550,975 samples, 0.18%)</title><rect x="55.1564%" y="85" width="0.1766%" height="15" fill="rgb(234,67,33)"/><text x="55.4064%" y="95.50"></text></g><g><title>associated_items (998,875 samples, 0.32%)</title><rect x="55.0297%" y="117" width="0.3201%" height="15" fill="rgb(247,98,35)"/><text x="55.2797%" y="127.50"></text></g><g><title>adt_dtorck_constraint (423,284 samples, 0.14%)</title><rect x="55.7488%" y="85" width="0.1356%" height="15" fill="rgb(247,138,52)"/><text x="55.9988%" y="95.50"></text></g><g><title>adt_dtorck_constraint (838,669 samples, 0.27%)</title><rect x="55.6441%" y="101" width="0.2688%" height="15" fill="rgb(213,79,30)"/><text x="55.8941%" y="111.50"></text></g><g><title>dropck_outlives (2,031,803 samples, 0.65%)</title><rect x="55.3937%" y="117" width="0.6511%" height="15" fill="rgb(246,177,23)"/><text x="55.6437%" y="127.50"></text></g><g><title>normalize_projection_ty (411,783 samples, 0.13%)</title><rect x="55.9128%" y="101" width="0.1320%" height="15" fill="rgb(230,62,27)"/><text x="56.1628%" y="111.50"></text></g><g><title>adt_sized_constraint (326,483 samples, 0.10%)</title><rect x="57.1195%" y="85" width="0.1046%" height="15" fill="rgb(216,154,8)"/><text x="57.3695%" y="95.50"></text></g><g><title>adt_sized_constraint (492,685 samples, 0.16%)</title><rect x="57.0688%" y="101" width="0.1579%" height="15" fill="rgb(244,35,45)"/><text x="57.3188%" y="111.50"></text></g><g><title>predicates_of (334,972 samples, 0.11%)</title><rect x="57.4095%" y="101" width="0.1073%" height="15" fill="rgb(251,115,12)"/><text x="57.6595%" y="111.50"></text></g><g><title>specializes (573,668 samples, 0.18%)</title><rect x="57.5169%" y="101" width="0.1838%" height="15" fill="rgb(240,54,50)"/><text x="57.7669%" y="111.50"></text></g><g><title>param_env (362,274 samples, 0.12%)</title><rect x="57.5846%" y="85" width="0.1161%" height="15" fill="rgb(233,84,52)"/><text x="57.8346%" y="95.50"></text></g><g><title>trait_impls_of (481,343 samples, 0.15%)</title><rect x="57.7060%" y="101" width="0.1543%" height="15" fill="rgb(207,117,47)"/><text x="57.9560%" y="111.50"></text></g><g><title>evaluate_obligation (5,526,413 samples, 1.77%)</title><rect x="56.0904%" y="117" width="1.7710%" height="15" fill="rgb(249,43,39)"/><text x="56.3404%" y="127.50">e..</text></g><g><title>evaluate_obligation (883,830 samples, 0.28%)</title><rect x="58.4919%" y="101" width="0.2832%" height="15" fill="rgb(209,38,44)"/><text x="58.7419%" y="111.50"></text></g><g><title>method_autoderef_steps (1,354,546 samples, 0.43%)</title><rect x="58.3437%" y="117" width="0.4341%" height="15" fill="rgb(236,212,23)"/><text x="58.5937%" y="127.50"></text></g><g><title>predicates_of (667,357 samples, 0.21%)</title><rect x="58.8329%" y="117" width="0.2139%" height="15" fill="rgb(242,79,21)"/><text x="59.0829%" y="127.50"></text></g><g><title>predicates_defined_on (457,017 samples, 0.15%)</title><rect x="58.9003%" y="101" width="0.1465%" height="15" fill="rgb(211,96,35)"/><text x="59.1503%" y="111.50"></text></g><g><title>dropck_outlives (406,765 samples, 0.13%)</title><rect x="62.1685%" y="101" width="0.1304%" height="15" fill="rgb(253,215,40)"/><text x="62.4185%" y="111.50"></text></g><g><title>evaluate_obligation (1,349,651 samples, 0.43%)</title><rect x="62.2988%" y="101" width="0.4325%" height="15" fill="rgb(211,81,21)"/><text x="62.5488%" y="111.50"></text></g><g><title>method_autoderef_steps (402,494 samples, 0.13%)</title><rect x="62.8820%" y="101" width="0.1290%" height="15" fill="rgb(208,190,38)"/><text x="63.1320%" y="111.50"></text></g><g><title>typeck (12,379,368 samples, 3.97%)</title><rect x="59.1388%" y="117" width="3.9672%" height="15" fill="rgb(235,213,38)"/><text x="59.3888%" y="127.50">type..</text></g><g><title>item_bodies_checking (88,825,622 samples, 28.47%)</title><rect x="34.6885%" y="165" width="28.4658%" height="15" fill="rgb(237,122,38)"/><text x="34.9385%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (88,822,332 samples, 28.46%)</title><rect x="34.6895%" y="149" width="28.4648%" height="15" fill="rgb(244,218,35)"/><text x="34.9395%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (88,553,165 samples, 28.38%)</title><rect x="34.7758%" y="133" width="28.3785%" height="15" fill="rgb(240,68,47)"/><text x="35.0258%" y="143.50">typeck</text></g><g><title>item_types_checking (4,545,331 samples, 1.46%)</title><rect x="63.1543%" y="165" width="1.4566%" height="15" fill="rgb(210,16,53)"/><text x="63.4043%" y="175.50"></text></g><g><title>check_mod_item_types (4,530,461 samples, 1.45%)</title><rect x="63.1591%" y="149" width="1.4519%" height="15" fill="rgb(235,124,12)"/><text x="63.4091%" y="159.50"></text></g><g><title>fn_sig (916,293 samples, 0.29%)</title><rect x="65.0223%" y="133" width="0.2936%" height="15" fill="rgb(224,169,11)"/><text x="65.2723%" y="143.50"></text></g><g><title>named_region_map (1,008,588 samples, 0.32%)</title><rect x="65.4816%" y="117" width="0.3232%" height="15" fill="rgb(250,166,2)"/><text x="65.7316%" y="127.50"></text></g><g><title>resolve_lifetimes (943,648 samples, 0.30%)</title><rect x="65.5024%" y="101" width="0.3024%" height="15" fill="rgb(242,216,29)"/><text x="65.7524%" y="111.50"></text></g><g><title>lint_levels (435,965 samples, 0.14%)</title><rect x="65.6651%" y="85" width="0.1397%" height="15" fill="rgb(230,116,27)"/><text x="65.9151%" y="95.50"></text></g><g><title>generics_of (1,575,089 samples, 0.50%)</title><rect x="65.3160%" y="133" width="0.5048%" height="15" fill="rgb(228,99,48)"/><text x="65.5660%" y="143.50"></text></g><g><title>explicit_predicates_of (1,100,510 samples, 0.35%)</title><rect x="66.1044%" y="101" width="0.3527%" height="15" fill="rgb(253,11,6)"/><text x="66.3544%" y="111.50"></text></g><g><title>predicates_of (2,548,787 samples, 0.82%)</title><rect x="65.9128%" y="133" width="0.8168%" height="15" fill="rgb(247,143,39)"/><text x="66.1628%" y="143.50"></text></g><g><title>predicates_defined_on (2,311,023 samples, 0.74%)</title><rect x="65.9890%" y="117" width="0.7406%" height="15" fill="rgb(236,97,10)"/><text x="66.2390%" y="127.50"></text></g><g><title>inferred_outlives_of (850,169 samples, 0.27%)</title><rect x="66.4571%" y="101" width="0.2725%" height="15" fill="rgb(233,208,19)"/><text x="66.7071%" y="111.50"></text></g><g><title>inferred_outlives_crate (764,348 samples, 0.24%)</title><rect x="66.4846%" y="85" width="0.2449%" height="15" fill="rgb(216,164,2)"/><text x="66.7346%" y="95.50"></text></g><g><title>type_of (384,301 samples, 0.12%)</title><rect x="66.6064%" y="69" width="0.1232%" height="15" fill="rgb(220,129,5)"/><text x="66.8564%" y="79.50"></text></g><g><title>type_collecting (6,910,958 samples, 2.21%)</title><rect x="64.6158%" y="165" width="2.2147%" height="15" fill="rgb(242,17,10)"/><text x="64.8658%" y="175.50">t..</text></g><g><title>collect_mod_item_types (6,891,337 samples, 2.21%)</title><rect x="64.6221%" y="149" width="2.2085%" height="15" fill="rgb(242,107,0)"/><text x="64.8721%" y="159.50">c..</text></g><g><title>evaluate_obligation (1,305,716 samples, 0.42%)</title><rect x="68.7532%" y="133" width="0.4184%" height="15" fill="rgb(251,28,31)"/><text x="69.0032%" y="143.50"></text></g><g><title>implied_outlives_bounds (603,476 samples, 0.19%)</title><rect x="69.1717%" y="133" width="0.1934%" height="15" fill="rgb(233,223,10)"/><text x="69.4217%" y="143.50"></text></g><g><title>object_safety_violations (405,475 samples, 0.13%)</title><rect x="69.3695%" y="133" width="0.1299%" height="15" fill="rgb(215,21,27)"/><text x="69.6195%" y="143.50"></text></g><g><title>param_env (1,120,210 samples, 0.36%)</title><rect x="69.4995%" y="133" width="0.3590%" height="15" fill="rgb(232,23,21)"/><text x="69.7495%" y="143.50"></text></g><g><title>check_impl_item_well_formed (9,897,803 samples, 3.17%)</title><rect x="67.0630%" y="149" width="3.1719%" height="15" fill="rgb(244,5,23)"/><text x="67.3130%" y="159.50">che..</text></g><g><title>region_scope_tree (1,126,557 samples, 0.36%)</title><rect x="69.8739%" y="133" width="0.3610%" height="15" fill="rgb(226,81,46)"/><text x="70.1239%" y="143.50"></text></g><g><title>mir_borrowck (444,725 samples, 0.14%)</title><rect x="72.1141%" y="53" width="0.1425%" height="15" fill="rgb(247,70,30)"/><text x="72.3641%" y="63.50"></text></g><g><title>mir_for_ctfe (614,707 samples, 0.20%)</title><rect x="72.0602%" y="85" width="0.1970%" height="15" fill="rgb(212,68,19)"/><text x="72.3102%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (568,226 samples, 0.18%)</title><rect x="72.0751%" y="69" width="0.1821%" height="15" fill="rgb(240,187,13)"/><text x="72.3251%" y="79.50"></text></g><g><title>eval_to_const_value_raw (321,024 samples, 0.10%)</title><rect x="72.2612%" y="69" width="0.1029%" height="15" fill="rgb(223,113,26)"/><text x="72.5112%" y="79.50"></text></g><g><title>eval_to_const_value_raw (318,464 samples, 0.10%)</title><rect x="72.2620%" y="53" width="0.1021%" height="15" fill="rgb(206,192,2)"/><text x="72.5120%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (340,414 samples, 0.11%)</title><rect x="72.2573%" y="85" width="0.1091%" height="15" fill="rgb(241,108,4)"/><text x="72.5073%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,524,387 samples, 0.49%)</title><rect x="71.9207%" y="133" width="0.4885%" height="15" fill="rgb(247,173,49)"/><text x="72.1707%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,509,426 samples, 0.48%)</title><rect x="71.9255%" y="117" width="0.4837%" height="15" fill="rgb(224,114,35)"/><text x="72.1755%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,506,636 samples, 0.48%)</title><rect x="71.9263%" y="101" width="0.4828%" height="15" fill="rgb(245,159,27)"/><text x="72.1763%" y="111.50"></text></g><g><title>adt_def (422,414 samples, 0.14%)</title><rect x="72.9388%" y="85" width="0.1354%" height="15" fill="rgb(245,172,44)"/><text x="73.1888%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (421,334 samples, 0.14%)</title><rect x="72.9392%" y="69" width="0.1350%" height="15" fill="rgb(236,23,11)"/><text x="73.1892%" y="79.50"></text></g><g><title>item_attrs (404,374 samples, 0.13%)</title><rect x="72.9446%" y="53" width="0.1296%" height="15" fill="rgb(205,117,38)"/><text x="73.1946%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (403,024 samples, 0.13%)</title><rect x="72.9450%" y="37" width="0.1292%" height="15" fill="rgb(237,72,25)"/><text x="73.1950%" y="47.50"></text></g><g><title>adt_sized_constraint (491,195 samples, 0.16%)</title><rect x="72.9365%" y="101" width="0.1574%" height="15" fill="rgb(244,70,9)"/><text x="73.1865%" y="111.50"></text></g><g><title>adt_sized_constraint (681,198 samples, 0.22%)</title><rect x="72.8782%" y="117" width="0.2183%" height="15" fill="rgb(217,125,39)"/><text x="73.1282%" y="127.50"></text></g><g><title>evaluate_obligation (2,213,439 samples, 0.71%)</title><rect x="72.4092%" y="133" width="0.7093%" height="15" fill="rgb(235,36,10)"/><text x="72.6592%" y="143.50"></text></g><g><title>implied_outlives_bounds (363,437 samples, 0.12%)</title><rect x="73.1567%" y="133" width="0.1165%" height="15" fill="rgb(251,123,47)"/><text x="73.4067%" y="143.50"></text></g><g><title>param_env (1,188,025 samples, 0.38%)</title><rect x="73.2756%" y="133" width="0.3807%" height="15" fill="rgb(221,13,13)"/><text x="73.5256%" y="143.50"></text></g><g><title>check_item_well_formed (11,238,762 samples, 3.60%)</title><rect x="70.2349%" y="149" width="3.6017%" height="15" fill="rgb(238,131,9)"/><text x="70.4849%" y="159.50">chec..</text></g><g><title>analysis (230,205,412 samples, 73.77%)</title><rect x="0.3225%" y="197" width="73.7737%" height="15" fill="rgb(211,50,8)"/><text x="0.5725%" y="207.50">analysis</text></g><g><title>type_check_crate (135,120,070 samples, 43.30%)</title><rect x="30.7944%" y="181" width="43.3018%" height="15" fill="rgb(245,182,24)"/><text x="31.0444%" y="191.50">type_check_crate</text></g><g><title>wf_checking (22,648,093 samples, 7.26%)</title><rect x="66.8381%" y="165" width="7.2580%" height="15" fill="rgb(242,14,37)"/><text x="67.0881%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (809,839 samples, 0.26%)</title><rect x="73.8366%" y="149" width="0.2595%" height="15" fill="rgb(246,228,12)"/><text x="74.0866%" y="159.50"></text></g><g><title>codegen_crate (496,495 samples, 0.16%)</title><rect x="74.1002%" y="197" width="0.1591%" height="15" fill="rgb(213,55,15)"/><text x="74.3502%" y="207.50"></text></g><g><title>metadata_load_macro (365,112 samples, 0.12%)</title><rect x="87.7966%" y="149" width="0.1170%" height="15" fill="rgb(209,9,3)"/><text x="88.0466%" y="159.50"></text></g><g><title>metadata_register_crate (2,748,851 samples, 0.88%)</title><rect x="87.9136%" y="149" width="0.8809%" height="15" fill="rgb(230,59,30)"/><text x="88.1636%" y="159.50"></text></g><g><title>metadata_register_crate (970,751 samples, 0.31%)</title><rect x="88.4834%" y="133" width="0.3111%" height="15" fill="rgb(209,121,21)"/><text x="88.7334%" y="143.50"></text></g><g><title>macro_expand_crate (45,468,239 samples, 14.57%)</title><rect x="74.4965%" y="181" width="14.5712%" height="15" fill="rgb(220,109,13)"/><text x="74.7465%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (45,447,478 samples, 14.56%)</title><rect x="74.5031%" y="165" width="14.5645%" height="15" fill="rgb(232,18,1)"/><text x="74.7531%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (852,266 samples, 0.27%)</title><rect x="88.7945%" y="149" width="0.2731%" height="15" fill="rgb(215,41,42)"/><text x="89.0445%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (358,624 samples, 0.11%)</title><rect x="89.0691%" y="181" width="0.1149%" height="15" fill="rgb(224,123,36)"/><text x="89.3191%" y="191.50"></text></g><g><title>late_resolve_crate (4,077,495 samples, 1.31%)</title><rect x="89.3290%" y="165" width="1.3067%" height="15" fill="rgb(240,125,3)"/><text x="89.5790%" y="175.50"></text></g><g><title>configure_and_expand (51,430,074 samples, 16.48%)</title><rect x="74.2593%" y="197" width="16.4817%" height="15" fill="rgb(205,98,50)"/><text x="74.5093%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,858,474 samples, 1.56%)</title><rect x="89.1840%" y="181" width="1.5570%" height="15" fill="rgb(205,185,37)"/><text x="89.4340%" y="191.50"></text></g><g><title>drop_ast (469,835 samples, 0.15%)</title><rect x="90.7410%" y="197" width="0.1506%" height="15" fill="rgb(238,207,15)"/><text x="90.9910%" y="207.50"></text></g><g><title>early_lint_checks (1,068,892 samples, 0.34%)</title><rect x="90.8977%" y="197" width="0.3425%" height="15" fill="rgb(213,199,42)"/><text x="91.1477%" y="207.50"></text></g><g><title>free_global_ctxt (5,516,631 samples, 1.77%)</title><rect x="91.2402%" y="197" width="1.7679%" height="15" fill="rgb(235,201,11)"/><text x="91.4902%" y="207.50"></text></g><g><title>generate_crate_metadata (4,293,158 samples, 1.38%)</title><rect x="93.0081%" y="197" width="1.3758%" height="15" fill="rgb(207,46,11)"/><text x="93.2581%" y="207.50"></text></g><g><title>hir_lowering (8,931,760 samples, 2.86%)</title><rect x="94.3840%" y="197" width="2.8624%" height="15" fill="rgb(241,35,35)"/><text x="94.6340%" y="207.50">hi..</text></g><g><title>parse_crate (6,042,238 samples, 1.94%)</title><rect x="97.2783%" y="197" width="1.9363%" height="15" fill="rgb(243,32,47)"/><text x="97.5283%" y="207.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,642,898 samples, 0.53%)</title><rect x="99.2811%" y="197" width="0.5265%" height="15" fill="rgb(247,202,23)"/><text x="99.5311%" y="207.50"></text></g><g><title>all (312,042,847 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (312,042,847 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (509,486 samples, 0.16%)</title><rect x="99.8367%" y="197" width="0.1633%" height="15" fill="rgb(222,74,54)"/><text x="100.0867%" y="207.50"></text></g></svg></svg>