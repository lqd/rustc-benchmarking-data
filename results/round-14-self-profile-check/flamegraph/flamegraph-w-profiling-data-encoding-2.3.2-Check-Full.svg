<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>param_env (388,556 samples, 0.10%)</title><rect x="13.8596%" y="181" width="0.1033%" height="15" fill="rgb(227,0,7)"/><text x="14.1096%" y="191.50"></text></g><g><title>item_attrs (409,723 samples, 0.11%)</title><rect x="14.3728%" y="149" width="0.1089%" height="15" fill="rgb(217,0,24)"/><text x="14.6228%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (394,353 samples, 0.10%)</title><rect x="14.3769%" y="133" width="0.1048%" height="15" fill="rgb(221,193,54)"/><text x="14.6269%" y="143.50"></text></g><g><title>codegen_fn_attrs (576,435 samples, 0.15%)</title><rect x="14.3373%" y="165" width="0.1532%" height="15" fill="rgb(248,212,6)"/><text x="14.5873%" y="175.50"></text></g><g><title>is_copy_raw (384,045 samples, 0.10%)</title><rect x="17.3086%" y="149" width="0.1021%" height="15" fill="rgb(208,68,35)"/><text x="17.5586%" y="159.50"></text></g><g><title>needs_drop_raw (2,406,435 samples, 0.64%)</title><rect x="17.4112%" y="149" width="0.6395%" height="15" fill="rgb(232,128,0)"/><text x="17.6612%" y="159.50"></text></g><g><title>is_copy_raw (1,959,250 samples, 0.52%)</title><rect x="17.5300%" y="133" width="0.5207%" height="15" fill="rgb(207,160,47)"/><text x="17.7800%" y="143.50"></text></g><g><title>evaluate_obligation (1,605,868 samples, 0.43%)</title><rect x="17.6239%" y="117" width="0.4267%" height="15" fill="rgb(228,23,34)"/><text x="17.8739%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (416,464 samples, 0.11%)</title><rect x="18.1383%" y="133" width="0.1107%" height="15" fill="rgb(218,30,26)"/><text x="18.3883%" y="143.50"></text></g><g><title>specialization_graph_of (1,346,045 samples, 0.36%)</title><rect x="18.2795%" y="133" width="0.3577%" height="15" fill="rgb(220,122,19)"/><text x="18.5295%" y="143.50"></text></g><g><title>impl_trait_ref (716,698 samples, 0.19%)</title><rect x="18.4467%" y="117" width="0.1905%" height="15" fill="rgb(250,228,42)"/><text x="18.6967%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (634,836 samples, 0.17%)</title><rect x="18.4685%" y="101" width="0.1687%" height="15" fill="rgb(240,193,28)"/><text x="18.7185%" y="111.50"></text></g><g><title>resolve_instance (2,318,004 samples, 0.62%)</title><rect x="18.0510%" y="149" width="0.6160%" height="15" fill="rgb(216,20,37)"/><text x="18.3010%" y="159.50"></text></g><g><title>thir_body (4,288,240 samples, 1.14%)</title><rect x="18.6854%" y="149" width="1.1396%" height="15" fill="rgb(206,188,39)"/><text x="18.9354%" y="159.50"></text></g><g><title>mir_const (24,904,298 samples, 6.62%)</title><rect x="13.2168%" y="197" width="6.6181%" height="15" fill="rgb(217,207,13)"/><text x="13.4668%" y="207.50">mir_const</text></g><g><title>unsafety_check_result (22,096,850 samples, 5.87%)</title><rect x="13.9629%" y="181" width="5.8720%" height="15" fill="rgb(231,73,38)"/><text x="14.2129%" y="191.50">unsafet..</text></g><g><title>mir_built (20,111,289 samples, 5.34%)</title><rect x="14.4905%" y="165" width="5.3444%" height="15" fill="rgb(225,20,46)"/><text x="14.7405%" y="175.50">mir_bui..</text></g><g><title>thir_body (2,102,814 samples, 0.56%)</title><rect x="20.9674%" y="133" width="0.5588%" height="15" fill="rgb(210,31,41)"/><text x="21.2174%" y="143.50"></text></g><g><title>mir_const (4,969,003 samples, 1.32%)</title><rect x="20.2091%" y="181" width="1.3205%" height="15" fill="rgb(221,200,47)"/><text x="20.4591%" y="191.50"></text></g><g><title>unsafety_check_result (4,586,820 samples, 1.22%)</title><rect x="20.3107%" y="165" width="1.2189%" height="15" fill="rgb(226,26,5)"/><text x="20.5607%" y="175.50"></text></g><g><title>mir_built (4,394,489 samples, 1.17%)</title><rect x="20.3618%" y="149" width="1.1678%" height="15" fill="rgb(249,33,26)"/><text x="20.6118%" y="159.50"></text></g><g><title>mir_const_qualif (6,379,101 samples, 1.70%)</title><rect x="19.8349%" y="197" width="1.6952%" height="15" fill="rgb(235,183,28)"/><text x="20.0849%" y="207.50"></text></g><g><title>mir_promoted (34,400,672 samples, 9.14%)</title><rect x="12.3885%" y="213" width="9.1417%" height="15" fill="rgb(221,5,38)"/><text x="12.6385%" y="223.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (519,576 samples, 0.14%)</title><rect x="21.5316%" y="213" width="0.1381%" height="15" fill="rgb(247,18,42)"/><text x="21.7816%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (1,943,530 samples, 0.52%)</title><rect x="21.6696%" y="213" width="0.5165%" height="15" fill="rgb(241,131,45)"/><text x="21.9196%" y="223.50"></text></g><g><title>normalize_projection_ty (1,199,403 samples, 0.32%)</title><rect x="21.8674%" y="197" width="0.3187%" height="15" fill="rgb(249,31,29)"/><text x="22.1174%" y="207.50"></text></g><g><title>type_op_prove_predicate (4,664,059 samples, 1.24%)</title><rect x="22.2499%" y="213" width="1.2394%" height="15" fill="rgb(225,111,53)"/><text x="22.4999%" y="223.50"></text></g><g><title>MIR_borrow_checking (86,537,036 samples, 23.00%)</title><rect x="0.4989%" y="245" width="22.9965%" height="15" fill="rgb(238,160,17)"/><text x="0.7489%" y="255.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (86,203,103 samples, 22.91%)</title><rect x="0.5876%" y="229" width="22.9077%" height="15" fill="rgb(214,148,48)"/><text x="0.8376%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (901,690 samples, 0.24%)</title><rect x="23.4953%" y="245" width="0.2396%" height="15" fill="rgb(232,36,49)"/><text x="23.7453%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (744,020 samples, 0.20%)</title><rect x="23.5372%" y="229" width="0.1977%" height="15" fill="rgb(209,103,24)"/><text x="23.7872%" y="239.50"></text></g><g><title>hir_module_items (466,555 samples, 0.12%)</title><rect x="23.7350%" y="245" width="0.1240%" height="15" fill="rgb(229,88,8)"/><text x="23.9850%" y="255.50"></text></g><g><title>codegen_fn_attrs (486,466 samples, 0.13%)</title><rect x="24.1390%" y="213" width="0.1293%" height="15" fill="rgb(213,181,19)"/><text x="24.3890%" y="223.50"></text></g><g><title>check_mod_attrs (1,524,287 samples, 0.41%)</title><rect x="23.8633%" y="229" width="0.4051%" height="15" fill="rgb(254,191,54)"/><text x="24.1133%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (712,248 samples, 0.19%)</title><rect x="24.4098%" y="229" width="0.1893%" height="15" fill="rgb(241,83,37)"/><text x="24.6598%" y="239.50"></text></g><g><title>misc_checking_1 (2,878,232 samples, 0.76%)</title><rect x="23.8591%" y="245" width="0.7649%" height="15" fill="rgb(233,36,39)"/><text x="24.1091%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (1,741,059 samples, 0.46%)</title><rect x="24.6246%" y="229" width="0.4627%" height="15" fill="rgb(226,3,54)"/><text x="24.8746%" y="239.50"></text></g><g><title>check_mod_liveness (1,372,235 samples, 0.36%)</title><rect x="24.7226%" y="213" width="0.3647%" height="15" fill="rgb(245,192,40)"/><text x="24.9726%" y="223.50"></text></g><g><title>misc_checking_2 (3,924,654 samples, 1.04%)</title><rect x="24.6240%" y="245" width="1.0429%" height="15" fill="rgb(238,167,29)"/><text x="24.8740%" y="255.50"></text></g><g><title>match_checking (2,181,355 samples, 0.58%)</title><rect x="25.0872%" y="229" width="0.5797%" height="15" fill="rgb(232,182,51)"/><text x="25.3372%" y="239.50"></text></g><g><title>check_match (2,102,475 samples, 0.56%)</title><rect x="25.1082%" y="213" width="0.5587%" height="15" fill="rgb(231,60,39)"/><text x="25.3582%" y="223.50"></text></g><g><title>check_private_in_public (463,745 samples, 0.12%)</title><rect x="25.6700%" y="229" width="0.1232%" height="15" fill="rgb(208,69,12)"/><text x="25.9200%" y="239.50"></text></g><g><title>death_checking (1,007,931 samples, 0.27%)</title><rect x="25.7933%" y="229" width="0.2678%" height="15" fill="rgb(235,93,37)"/><text x="26.0433%" y="239.50"></text></g><g><title>eval_to_const_value_raw (3,616,761 samples, 0.96%)</title><rect x="26.8562%" y="133" width="0.9611%" height="15" fill="rgb(213,116,39)"/><text x="27.1062%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,603,101 samples, 0.96%)</title><rect x="26.8598%" y="117" width="0.9575%" height="15" fill="rgb(222,207,29)"/><text x="27.1098%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,581,131 samples, 0.95%)</title><rect x="26.8656%" y="101" width="0.9517%" height="15" fill="rgb(206,96,30)"/><text x="27.1156%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,338,217 samples, 0.89%)</title><rect x="26.9302%" y="85" width="0.8871%" height="15" fill="rgb(218,138,4)"/><text x="27.1802%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,303,297 samples, 0.88%)</title><rect x="26.9395%" y="69" width="0.8778%" height="15" fill="rgb(250,191,14)"/><text x="27.1895%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,294,397 samples, 0.88%)</title><rect x="26.9418%" y="53" width="0.8755%" height="15" fill="rgb(239,60,40)"/><text x="27.1918%" y="63.50"></text></g><g><title>eval_to_allocation_raw (3,276,077 samples, 0.87%)</title><rect x="26.9467%" y="37" width="0.8706%" height="15" fill="rgb(206,27,48)"/><text x="27.1967%" y="47.50"></text></g><g><title>eval_to_const_value_raw (4,592,172 samples, 1.22%)</title><rect x="26.6027%" y="197" width="1.2203%" height="15" fill="rgb(225,35,8)"/><text x="26.8527%" y="207.50"></text></g><g><title>eval_to_const_value_raw (4,570,742 samples, 1.21%)</title><rect x="26.6084%" y="181" width="1.2146%" height="15" fill="rgb(250,213,24)"/><text x="26.8584%" y="191.50"></text></g><g><title>eval_to_allocation_raw (4,547,612 samples, 1.21%)</title><rect x="26.6146%" y="165" width="1.2085%" height="15" fill="rgb(247,123,22)"/><text x="26.8646%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,696,421 samples, 0.98%)</title><rect x="26.8408%" y="149" width="0.9823%" height="15" fill="rgb(231,138,38)"/><text x="27.0908%" y="159.50"></text></g><g><title>crate_lints (7,954,659 samples, 2.11%)</title><rect x="26.0619%" y="213" width="2.1139%" height="15" fill="rgb(231,145,46)"/><text x="26.3119%" y="223.50">c..</text></g><g><title>type_of (1,187,765 samples, 0.32%)</title><rect x="27.8601%" y="197" width="0.3156%" height="15" fill="rgb(251,118,11)"/><text x="28.1101%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (951,063 samples, 0.25%)</title><rect x="27.9230%" y="181" width="0.2527%" height="15" fill="rgb(217,147,25)"/><text x="28.1730%" y="191.50"></text></g><g><title>lint_checking (10,433,437 samples, 2.77%)</title><rect x="26.0611%" y="229" width="2.7726%" height="15" fill="rgb(247,81,37)"/><text x="26.3111%" y="239.50">li..</text></g><g><title>module_lints (2,475,898 samples, 0.66%)</title><rect x="28.1758%" y="213" width="0.6579%" height="15" fill="rgb(209,12,38)"/><text x="28.4258%" y="223.50"></text></g><g><title>lint_mod (2,471,118 samples, 0.66%)</title><rect x="28.1770%" y="197" width="0.6567%" height="15" fill="rgb(227,1,9)"/><text x="28.4270%" y="207.50"></text></g><g><title>privacy_access_levels (679,298 samples, 0.18%)</title><rect x="28.8337%" y="229" width="0.1805%" height="15" fill="rgb(248,47,43)"/><text x="29.0837%" y="239.50"></text></g><g><title>privacy_checking_modules (2,845,951 samples, 0.76%)</title><rect x="29.0142%" y="229" width="0.7563%" height="15" fill="rgb(221,10,30)"/><text x="29.2642%" y="239.50"></text></g><g><title>check_mod_privacy (2,843,691 samples, 0.76%)</title><rect x="29.0148%" y="213" width="0.7557%" height="15" fill="rgb(210,229,1)"/><text x="29.2648%" y="223.50"></text></g><g><title>misc_checking_3 (15,465,473 samples, 4.11%)</title><rect x="25.6669%" y="245" width="4.1098%" height="15" fill="rgb(222,148,37)"/><text x="25.9169%" y="255.50">misc..</text></g><g><title>impl_parent (2,440,230 samples, 0.65%)</title><rect x="30.9526%" y="181" width="0.6485%" height="15" fill="rgb(234,67,33)"/><text x="31.2026%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,451,315 samples, 0.39%)</title><rect x="31.2154%" y="165" width="0.3857%" height="15" fill="rgb(247,98,35)"/><text x="31.4654%" y="175.50"></text></g><g><title>impl_trait_ref (5,526,216 samples, 1.47%)</title><rect x="31.6011%" y="181" width="1.4685%" height="15" fill="rgb(247,138,52)"/><text x="31.8511%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,106,456 samples, 1.09%)</title><rect x="31.9783%" y="165" width="1.0913%" height="15" fill="rgb(213,79,30)"/><text x="32.2283%" y="175.50"></text></g><g><title>coherent_trait (13,080,336 samples, 3.48%)</title><rect x="29.8166%" y="213" width="3.4760%" height="15" fill="rgb(246,177,23)"/><text x="30.0666%" y="223.50">coh..</text></g><g><title>specialization_graph_of (12,371,488 samples, 3.29%)</title><rect x="30.0049%" y="197" width="3.2876%" height="15" fill="rgb(230,62,27)"/><text x="30.2549%" y="207.50">spe..</text></g><g><title>trait_impls_of (837,029 samples, 0.22%)</title><rect x="33.0701%" y="181" width="0.2224%" height="15" fill="rgb(216,154,8)"/><text x="33.3201%" y="191.50"></text></g><g><title>coherence_checking (13,187,457 samples, 3.50%)</title><rect x="29.8100%" y="229" width="3.5045%" height="15" fill="rgb(244,35,45)"/><text x="30.0600%" y="239.50">coh..</text></g><g><title>associated_item (707,449 samples, 0.19%)</title><rect x="52.0685%" y="165" width="0.1880%" height="15" fill="rgb(251,115,12)"/><text x="52.3185%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (562,297 samples, 0.15%)</title><rect x="52.1071%" y="149" width="0.1494%" height="15" fill="rgb(240,54,50)"/><text x="52.3571%" y="159.50"></text></g><g><title>associated_items (983,781 samples, 0.26%)</title><rect x="52.0070%" y="181" width="0.2614%" height="15" fill="rgb(233,84,52)"/><text x="52.2570%" y="191.50"></text></g><g><title>dropck_outlives (427,227 samples, 0.11%)</title><rect x="52.2911%" y="181" width="0.1135%" height="15" fill="rgb(207,117,47)"/><text x="52.5411%" y="191.50"></text></g><g><title>generics_of (1,902,637 samples, 0.51%)</title><rect x="55.1583%" y="165" width="0.5056%" height="15" fill="rgb(249,43,39)"/><text x="55.4083%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (1,245,720 samples, 0.33%)</title><rect x="55.3328%" y="149" width="0.3310%" height="15" fill="rgb(209,38,44)"/><text x="55.5828%" y="159.50"></text></g><g><title>impl_trait_ref (1,900,048 samples, 0.50%)</title><rect x="55.7587%" y="165" width="0.5049%" height="15" fill="rgb(236,212,23)"/><text x="56.0087%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,494,550 samples, 0.40%)</title><rect x="55.8664%" y="149" width="0.3972%" height="15" fill="rgb(242,79,21)"/><text x="56.1164%" y="159.50"></text></g><g><title>opt_def_kind (538,634 samples, 0.14%)</title><rect x="56.4051%" y="149" width="0.1431%" height="15" fill="rgb(211,96,35)"/><text x="56.6551%" y="159.50"></text></g><g><title>predicates_of (1,969,939 samples, 0.52%)</title><rect x="56.2906%" y="165" width="0.5235%" height="15" fill="rgb(253,215,40)"/><text x="56.5406%" y="175.50"></text></g><g><title>predicates_defined_on (1,000,488 samples, 0.27%)</title><rect x="56.5482%" y="149" width="0.2659%" height="15" fill="rgb(211,81,21)"/><text x="56.7982%" y="159.50"></text></g><g><title>specializes (4,855,522 samples, 1.29%)</title><rect x="56.8141%" y="165" width="1.2903%" height="15" fill="rgb(208,190,38)"/><text x="57.0641%" y="175.50"></text></g><g><title>param_env (2,833,576 samples, 0.75%)</title><rect x="57.3514%" y="149" width="0.7530%" height="15" fill="rgb(235,213,38)"/><text x="57.6014%" y="159.50"></text></g><g><title>def_span (1,287,213 samples, 0.34%)</title><rect x="57.7623%" y="133" width="0.3421%" height="15" fill="rgb(237,122,38)"/><text x="58.0123%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (1,137,580 samples, 0.30%)</title><rect x="57.8021%" y="117" width="0.3023%" height="15" fill="rgb(244,218,35)"/><text x="58.0521%" y="127.50"></text></g><g><title>trait_impls_of (751,248 samples, 0.20%)</title><rect x="58.1104%" y="165" width="0.1996%" height="15" fill="rgb(240,68,47)"/><text x="58.3604%" y="175.50"></text></g><g><title>evaluate_obligation (22,260,472 samples, 5.92%)</title><rect x="52.4047%" y="181" width="5.9155%" height="15" fill="rgb(210,16,53)"/><text x="52.6547%" y="191.50">evaluate..</text></g><g><title>generics_of (694,346 samples, 0.18%)</title><rect x="58.3823%" y="181" width="0.1845%" height="15" fill="rgb(235,124,12)"/><text x="58.6323%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (533,495 samples, 0.14%)</title><rect x="58.4251%" y="165" width="0.1418%" height="15" fill="rgb(224,169,11)"/><text x="58.6751%" y="175.50"></text></g><g><title>method_autoderef_steps (536,186 samples, 0.14%)</title><rect x="58.7523%" y="181" width="0.1425%" height="15" fill="rgb(250,166,2)"/><text x="59.0023%" y="191.50"></text></g><g><title>predicates_of (496,525 samples, 0.13%)</title><rect x="59.0310%" y="181" width="0.1319%" height="15" fill="rgb(242,216,29)"/><text x="59.2810%" y="191.50"></text></g><g><title>impl_trait_ref (567,704 samples, 0.15%)</title><rect x="67.2967%" y="149" width="0.1509%" height="15" fill="rgb(230,116,27)"/><text x="67.5467%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (475,044 samples, 0.13%)</title><rect x="67.3213%" y="133" width="0.1262%" height="15" fill="rgb(228,99,48)"/><text x="67.5713%" y="143.50"></text></g><g><title>specializes (408,953 samples, 0.11%)</title><rect x="67.5031%" y="149" width="0.1087%" height="15" fill="rgb(253,11,6)"/><text x="67.7531%" y="159.50"></text></g><g><title>evaluate_obligation (5,817,121 samples, 1.55%)</title><rect x="66.1019%" y="165" width="1.5458%" height="15" fill="rgb(247,143,39)"/><text x="66.3519%" y="175.50"></text></g><g><title>method_autoderef_steps (399,493 samples, 0.11%)</title><rect x="67.8383%" y="165" width="0.1062%" height="15" fill="rgb(236,97,10)"/><text x="68.0883%" y="175.50"></text></g><g><title>typeck (32,968,549 samples, 8.76%)</title><rect x="59.2748%" y="181" width="8.7611%" height="15" fill="rgb(233,208,19)"/><text x="59.5248%" y="191.50">typeck</text></g><g><title>item_bodies_checking (130,695,309 samples, 34.73%)</title><rect x="33.3271%" y="229" width="34.7311%" height="15" fill="rgb(216,164,2)"/><text x="33.5771%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (130,691,999 samples, 34.73%)</title><rect x="33.3280%" y="213" width="34.7303%" height="15" fill="rgb(220,129,5)"/><text x="33.5780%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (130,512,349 samples, 34.68%)</title><rect x="33.3757%" y="197" width="34.6825%" height="15" fill="rgb(242,17,10)"/><text x="33.6257%" y="207.50">typeck</text></g><g><title>adt_def (389,174 samples, 0.10%)</title><rect x="69.4071%" y="101" width="0.1034%" height="15" fill="rgb(242,107,0)"/><text x="69.6571%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (388,964 samples, 0.10%)</title><rect x="69.4072%" y="85" width="0.1034%" height="15" fill="rgb(251,28,31)"/><text x="69.6572%" y="95.50"></text></g><g><title>item_attrs (386,394 samples, 0.10%)</title><rect x="69.4078%" y="69" width="0.1027%" height="15" fill="rgb(233,223,10)"/><text x="69.6578%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (386,104 samples, 0.10%)</title><rect x="69.4079%" y="53" width="0.1026%" height="15" fill="rgb(215,21,27)"/><text x="69.6579%" y="63.50"></text></g><g><title>adt_dtorck_constraint (394,414 samples, 0.10%)</title><rect x="69.4062%" y="117" width="0.1048%" height="15" fill="rgb(232,23,21)"/><text x="69.6562%" y="127.50"></text></g><g><title>adt_dtorck_constraint (419,694 samples, 0.11%)</title><rect x="69.3997%" y="133" width="0.1115%" height="15" fill="rgb(244,5,23)"/><text x="69.6497%" y="143.50"></text></g><g><title>adt_dtorck_constraint (460,415 samples, 0.12%)</title><rect x="69.3903%" y="149" width="0.1224%" height="15" fill="rgb(226,81,46)"/><text x="69.6403%" y="159.50"></text></g><g><title>adt_dtorck_constraint (481,306 samples, 0.13%)</title><rect x="69.3860%" y="165" width="0.1279%" height="15" fill="rgb(247,70,30)"/><text x="69.6360%" y="175.50"></text></g><g><title>dropck_outlives (529,536 samples, 0.14%)</title><rect x="69.3786%" y="181" width="0.1407%" height="15" fill="rgb(212,68,19)"/><text x="69.6286%" y="191.50"></text></g><g><title>item_types_checking (5,576,263 samples, 1.48%)</title><rect x="68.0583%" y="229" width="1.4818%" height="15" fill="rgb(240,187,13)"/><text x="68.3083%" y="239.50"></text></g><g><title>check_mod_item_types (5,572,653 samples, 1.48%)</title><rect x="68.0592%" y="213" width="1.4809%" height="15" fill="rgb(223,113,26)"/><text x="68.3092%" y="223.50"></text></g><g><title>typeck (4,420,030 samples, 1.17%)</title><rect x="68.3655%" y="197" width="1.1746%" height="15" fill="rgb(206,192,2)"/><text x="68.6155%" y="207.50"></text></g><g><title>fn_sig (475,393 samples, 0.13%)</title><rect x="69.7027%" y="197" width="0.1263%" height="15" fill="rgb(241,108,4)"/><text x="69.9527%" y="207.50"></text></g><g><title>is_late_bound_map (782,158 samples, 0.21%)</title><rect x="69.8854%" y="181" width="0.2079%" height="15" fill="rgb(247,173,49)"/><text x="70.1354%" y="191.50"></text></g><g><title>resolve_lifetimes (780,018 samples, 0.21%)</title><rect x="69.8860%" y="165" width="0.2073%" height="15" fill="rgb(224,114,35)"/><text x="70.1360%" y="175.50"></text></g><g><title>lint_levels (737,598 samples, 0.20%)</title><rect x="69.8972%" y="149" width="0.1960%" height="15" fill="rgb(245,159,27)"/><text x="70.1472%" y="159.50"></text></g><g><title>named_region_map (602,218 samples, 0.16%)</title><rect x="70.0933%" y="181" width="0.1600%" height="15" fill="rgb(245,172,44)"/><text x="70.3433%" y="191.50"></text></g><g><title>resolve_lifetimes (568,027 samples, 0.15%)</title><rect x="70.1023%" y="165" width="0.1509%" height="15" fill="rgb(236,23,11)"/><text x="70.3523%" y="175.50"></text></g><g><title>generics_of (1,627,742 samples, 0.43%)</title><rect x="69.8290%" y="197" width="0.4326%" height="15" fill="rgb(205,117,38)"/><text x="70.0790%" y="207.50"></text></g><g><title>explicit_predicates_of (450,835 samples, 0.12%)</title><rect x="70.3525%" y="165" width="0.1198%" height="15" fill="rgb(237,72,25)"/><text x="70.6025%" y="175.50"></text></g><g><title>predicates_of (989,840 samples, 0.26%)</title><rect x="70.2795%" y="197" width="0.2630%" height="15" fill="rgb(244,70,9)"/><text x="70.5295%" y="207.50"></text></g><g><title>predicates_defined_on (878,049 samples, 0.23%)</title><rect x="70.3092%" y="181" width="0.2333%" height="15" fill="rgb(217,125,39)"/><text x="70.5592%" y="191.50"></text></g><g><title>type_collecting (4,106,816 samples, 1.09%)</title><rect x="69.5404%" y="229" width="1.0914%" height="15" fill="rgb(235,36,10)"/><text x="69.7904%" y="239.50"></text></g><g><title>collect_mod_item_types (4,099,456 samples, 1.09%)</title><rect x="69.5424%" y="213" width="1.0894%" height="15" fill="rgb(251,123,47)"/><text x="69.7924%" y="223.50"></text></g><g><title>evaluate_obligation (599,070 samples, 0.16%)</title><rect x="71.2809%" y="197" width="0.1592%" height="15" fill="rgb(221,13,13)"/><text x="71.5309%" y="207.50"></text></g><g><title>check_impl_item_well_formed (3,933,763 samples, 1.05%)</title><rect x="70.7479%" y="213" width="1.0454%" height="15" fill="rgb(238,131,9)"/><text x="70.9979%" y="223.50"></text></g><g><title>region_scope_tree (874,844 samples, 0.23%)</title><rect x="71.5608%" y="197" width="0.2325%" height="15" fill="rgb(211,50,8)"/><text x="71.8108%" y="207.50"></text></g><g><title>evaluate_obligation (1,016,299 samples, 0.27%)</title><rect x="72.6640%" y="197" width="0.2701%" height="15" fill="rgb(245,182,24)"/><text x="72.9140%" y="207.50"></text></g><g><title>param_env (627,296 samples, 0.17%)</title><rect x="73.0149%" y="197" width="0.1667%" height="15" fill="rgb(242,14,37)"/><text x="73.2649%" y="207.50"></text></g><g><title>region_scope_tree (1,036,222 samples, 0.28%)</title><rect x="73.2129%" y="197" width="0.2754%" height="15" fill="rgb(246,228,12)"/><text x="73.4629%" y="207.50"></text></g><g><title>check_item_well_formed (6,502,715 samples, 1.73%)</title><rect x="71.7933%" y="213" width="1.7280%" height="15" fill="rgb(213,55,15)"/><text x="72.0433%" y="223.50"></text></g><g><title>analysis (275,981,992 samples, 73.34%)</title><rect x="0.2100%" y="261" width="73.3398%" height="15" fill="rgb(209,9,3)"/><text x="0.4600%" y="271.50">analysis</text></g><g><title>type_check_crate (164,720,669 samples, 43.77%)</title><rect x="29.7767%" y="245" width="43.7731%" height="15" fill="rgb(230,59,30)"/><text x="30.0267%" y="255.50">type_check_crate</text></g><g><title>wf_checking (10,967,402 samples, 2.91%)</title><rect x="70.6353%" y="229" width="2.9145%" height="15" fill="rgb(209,121,21)"/><text x="70.8853%" y="239.50">wf..</text></g><g><title>codegen_crate (390,414 samples, 0.10%)</title><rect x="73.5535%" y="261" width="0.1037%" height="15" fill="rgb(220,109,13)"/><text x="73.8035%" y="271.50"></text></g><g><title>metadata_load_macro (393,104 samples, 0.10%)</title><rect x="82.2308%" y="213" width="0.1045%" height="15" fill="rgb(232,18,1)"/><text x="82.4808%" y="223.50"></text></g><g><title>macro_expand_crate (33,692,886 samples, 8.95%)</title><rect x="73.9039%" y="245" width="8.9536%" height="15" fill="rgb(215,41,42)"/><text x="74.1539%" y="255.50">macro_expand_..</text></g><g><title>expand_crate (33,677,856 samples, 8.95%)</title><rect x="73.9079%" y="229" width="8.9496%" height="15" fill="rgb(224,123,36)"/><text x="74.1579%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (1,965,141 samples, 0.52%)</title><rect x="82.3353%" y="213" width="0.5222%" height="15" fill="rgb(240,125,3)"/><text x="82.5853%" y="223.50"></text></g><g><title>metadata_register_crate (714,597 samples, 0.19%)</title><rect x="82.6676%" y="197" width="0.1899%" height="15" fill="rgb(205,98,50)"/><text x="82.9176%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (1,576,428 samples, 0.42%)</title><rect x="82.8587%" y="245" width="0.4189%" height="15" fill="rgb(205,185,37)"/><text x="83.1087%" y="255.50"></text></g><g><title>finalize_macro_resolutions (437,255 samples, 0.12%)</title><rect x="83.2882%" y="229" width="0.1162%" height="15" fill="rgb(238,207,15)"/><text x="83.5382%" y="239.50"></text></g><g><title>late_resolve_crate (5,759,964 samples, 1.53%)</title><rect x="83.4044%" y="229" width="1.5307%" height="15" fill="rgb(213,199,42)"/><text x="83.6544%" y="239.50"></text></g><g><title>configure_and_expand (42,862,299 samples, 11.39%)</title><rect x="73.6572%" y="261" width="11.3903%" height="15" fill="rgb(235,201,11)"/><text x="73.9072%" y="271.50">configure_and_exp..</text></g><g><title>resolve_crate (6,660,195 samples, 1.77%)</title><rect x="83.2776%" y="245" width="1.7699%" height="15" fill="rgb(207,46,11)"/><text x="83.5276%" y="255.50"></text></g><g><title>drop_ast (994,821 samples, 0.26%)</title><rect x="85.0475%" y="261" width="0.2644%" height="15" fill="rgb(241,35,35)"/><text x="85.2975%" y="271.50"></text></g><g><title>early_lint_checks (1,937,211 samples, 0.51%)</title><rect x="85.3160%" y="261" width="0.5148%" height="15" fill="rgb(243,32,47)"/><text x="85.5660%" y="271.50"></text></g><g><title>free_global_ctxt (5,589,593 samples, 1.49%)</title><rect x="85.8308%" y="261" width="1.4854%" height="15" fill="rgb(247,202,23)"/><text x="86.0808%" y="271.50"></text></g><g><title>generate_crate_metadata (5,992,657 samples, 1.59%)</title><rect x="87.3161%" y="261" width="1.5925%" height="15" fill="rgb(219,102,11)"/><text x="87.5661%" y="271.50"></text></g><g><title>hir_lowering (10,237,265 samples, 2.72%)</title><rect x="88.9086%" y="261" width="2.7205%" height="15" fill="rgb(243,110,44)"/><text x="89.1586%" y="271.50">hi..</text></g><g><title>parse_crate (28,999,114 samples, 7.71%)</title><rect x="91.6476%" y="261" width="7.7063%" height="15" fill="rgb(222,74,54)"/><text x="91.8976%" y="271.50">parse_crate</text></g><g><title>self_profile_alloc_query_strings (1,487,887 samples, 0.40%)</title><rect x="99.4200%" y="261" width="0.3954%" height="15" fill="rgb(216,99,12)"/><text x="99.6700%" y="271.50"></text></g><g><title>all (376,305,752 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (376,305,752 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (601,717 samples, 0.16%)</title><rect x="99.8401%" y="261" width="0.1599%" height="15" fill="rgb(213,25,53)"/><text x="100.0901%" y="271.50"></text></g></svg></svg>