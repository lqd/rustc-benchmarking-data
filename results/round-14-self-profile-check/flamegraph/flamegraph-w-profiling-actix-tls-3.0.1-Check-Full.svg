<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>implied_outlives_bounds (439,436 samples, 0.18%)</title><rect x="9.1719%" y="181" width="0.1782%" height="15" fill="rgb(227,0,7)"/><text x="9.4219%" y="191.50"></text></g><g><title>param_env (393,425 samples, 0.16%)</title><rect x="10.5238%" y="149" width="0.1595%" height="15" fill="rgb(217,0,24)"/><text x="10.7738%" y="159.50"></text></g><g><title>item_attrs (293,414 samples, 0.12%)</title><rect x="11.0289%" y="117" width="0.1190%" height="15" fill="rgb(221,193,54)"/><text x="11.2789%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (282,414 samples, 0.11%)</title><rect x="11.0333%" y="101" width="0.1145%" height="15" fill="rgb(248,212,6)"/><text x="11.2833%" y="111.50"></text></g><g><title>codegen_fn_attrs (428,815 samples, 0.17%)</title><rect x="10.9815%" y="133" width="0.1739%" height="15" fill="rgb(208,68,35)"/><text x="11.2315%" y="143.50"></text></g><g><title>adt_drop_tys (489,667 samples, 0.20%)</title><rect x="13.1064%" y="101" width="0.1985%" height="15" fill="rgb(232,128,0)"/><text x="13.3564%" y="111.50"></text></g><g><title>is_copy_raw (1,691,000 samples, 0.69%)</title><rect x="13.3050%" y="101" width="0.6856%" height="15" fill="rgb(207,160,47)"/><text x="13.5550%" y="111.50"></text></g><g><title>evaluate_obligation (1,399,044 samples, 0.57%)</title><rect x="13.4233%" y="85" width="0.5672%" height="15" fill="rgb(228,23,34)"/><text x="13.6733%" y="95.50"></text></g><g><title>needs_drop_raw (2,421,319 samples, 0.98%)</title><rect x="13.0157%" y="117" width="0.9817%" height="15" fill="rgb(218,30,26)"/><text x="13.2657%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (677,010 samples, 0.27%)</title><rect x="14.1167%" y="101" width="0.2745%" height="15" fill="rgb(220,122,19)"/><text x="14.3667%" y="111.50"></text></g><g><title>specialization_graph_of (841,509 samples, 0.34%)</title><rect x="14.4319%" y="101" width="0.3412%" height="15" fill="rgb(250,228,42)"/><text x="14.6819%" y="111.50"></text></g><g><title>impl_trait_ref (319,563 samples, 0.13%)</title><rect x="14.6436%" y="85" width="0.1296%" height="15" fill="rgb(240,193,28)"/><text x="14.8936%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (248,942 samples, 0.10%)</title><rect x="14.6722%" y="69" width="0.1009%" height="15" fill="rgb(216,20,37)"/><text x="14.9222%" y="79.50"></text></g><g><title>resolve_instance (2,013,784 samples, 0.82%)</title><rect x="13.9974%" y="117" width="0.8165%" height="15" fill="rgb(206,188,39)"/><text x="14.2474%" y="127.50"></text></g><g><title>thir_body (1,630,398 samples, 0.66%)</title><rect x="14.8305%" y="117" width="0.6610%" height="15" fill="rgb(217,207,13)"/><text x="15.0805%" y="127.50"></text></g><g><title>mir_const (13,552,179 samples, 5.49%)</title><rect x="10.0108%" y="165" width="5.4945%" height="15" fill="rgb(231,73,38)"/><text x="10.2608%" y="175.50">mir_con..</text></g><g><title>unsafety_check_result (11,893,400 samples, 4.82%)</title><rect x="10.6833%" y="149" width="4.8220%" height="15" fill="rgb(225,20,46)"/><text x="10.9333%" y="159.50">unsafe..</text></g><g><title>mir_built (10,729,086 samples, 4.35%)</title><rect x="11.1553%" y="133" width="4.3499%" height="15" fill="rgb(210,31,41)"/><text x="11.4053%" y="143.50">mir_b..</text></g><g><title>mir_const_qualif (722,139 samples, 0.29%)</title><rect x="15.5053%" y="165" width="0.2928%" height="15" fill="rgb(221,200,47)"/><text x="15.7553%" y="175.50"></text></g><g><title>mir_promoted (15,679,831 samples, 6.36%)</title><rect x="9.4415%" y="181" width="6.3571%" height="15" fill="rgb(226,26,5)"/><text x="9.6915%" y="191.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (1,362,725 samples, 0.55%)</title><rect x="15.7986%" y="181" width="0.5525%" height="15" fill="rgb(249,33,26)"/><text x="16.0486%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (696,941 samples, 0.28%)</title><rect x="16.3511%" y="181" width="0.2826%" height="15" fill="rgb(235,183,28)"/><text x="16.6011%" y="191.50"></text></g><g><title>normalize_projection_ty (423,528 samples, 0.17%)</title><rect x="16.4620%" y="165" width="0.1717%" height="15" fill="rgb(221,5,38)"/><text x="16.7120%" y="175.50"></text></g><g><title>type_op_normalize_ty (369,091 samples, 0.15%)</title><rect x="16.6783%" y="181" width="0.1496%" height="15" fill="rgb(247,18,42)"/><text x="16.9283%" y="191.50"></text></g><g><title>normalize_projection_ty (247,640 samples, 0.10%)</title><rect x="16.7275%" y="165" width="0.1004%" height="15" fill="rgb(241,131,45)"/><text x="16.9775%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,738,676 samples, 1.92%)</title><rect x="16.8279%" y="181" width="1.9212%" height="15" fill="rgb(249,31,29)"/><text x="17.0779%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (44,995,609 samples, 18.24%)</title><rect x="0.5159%" y="213" width="18.2428%" height="15" fill="rgb(225,111,53)"/><text x="0.7659%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (44,770,699 samples, 18.15%)</title><rect x="0.6071%" y="197" width="18.1516%" height="15" fill="rgb(238,160,17)"/><text x="0.8571%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (346,153 samples, 0.14%)</title><rect x="18.7587%" y="213" width="0.1403%" height="15" fill="rgb(214,148,48)"/><text x="19.0087%" y="223.50"></text></g><g><title>hir_module_items (320,566 samples, 0.13%)</title><rect x="18.8990%" y="213" width="0.1300%" height="15" fill="rgb(232,36,49)"/><text x="19.1490%" y="223.50"></text></g><g><title>should_inherit_track_caller (386,613 samples, 0.16%)</title><rect x="19.2911%" y="165" width="0.1567%" height="15" fill="rgb(209,103,24)"/><text x="19.5411%" y="175.50"></text></g><g><title>codegen_fn_attrs (628,305 samples, 0.25%)</title><rect x="19.1996%" y="181" width="0.2547%" height="15" fill="rgb(229,88,8)"/><text x="19.4496%" y="191.50"></text></g><g><title>check_mod_attrs (1,007,220 samples, 0.41%)</title><rect x="19.0460%" y="197" width="0.4084%" height="15" fill="rgb(213,181,19)"/><text x="19.2960%" y="207.50"></text></g><g><title>lookup_deprecation_entry (253,963 samples, 0.10%)</title><rect x="19.7326%" y="181" width="0.1030%" height="15" fill="rgb(254,191,54)"/><text x="19.9826%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (740,289 samples, 0.30%)</title><rect x="19.5969%" y="197" width="0.3001%" height="15" fill="rgb(241,83,37)"/><text x="19.8469%" y="207.50"></text></g><g><title>misc_checking_1 (2,242,614 samples, 0.91%)</title><rect x="19.0293%" y="213" width="0.9092%" height="15" fill="rgb(233,36,39)"/><text x="19.2793%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (837,969 samples, 0.34%)</title><rect x="19.9392%" y="197" width="0.3397%" height="15" fill="rgb(226,3,54)"/><text x="20.1892%" y="207.50"></text></g><g><title>check_mod_liveness (649,827 samples, 0.26%)</title><rect x="20.0155%" y="181" width="0.2635%" height="15" fill="rgb(245,192,40)"/><text x="20.2655%" y="191.50"></text></g><g><title>misc_checking_2 (1,911,981 samples, 0.78%)</title><rect x="19.9385%" y="213" width="0.7752%" height="15" fill="rgb(238,167,29)"/><text x="20.1885%" y="223.50"></text></g><g><title>match_checking (1,072,202 samples, 0.43%)</title><rect x="20.2790%" y="197" width="0.4347%" height="15" fill="rgb(232,182,51)"/><text x="20.5290%" y="207.50"></text></g><g><title>check_match (1,018,221 samples, 0.41%)</title><rect x="20.3009%" y="181" width="0.4128%" height="15" fill="rgb(231,60,39)"/><text x="20.5509%" y="191.50"></text></g><g><title>check_private_in_public (456,655 samples, 0.19%)</title><rect x="20.7182%" y="197" width="0.1851%" height="15" fill="rgb(208,69,12)"/><text x="20.9682%" y="207.50"></text></g><g><title>death_checking (958,831 samples, 0.39%)</title><rect x="20.9033%" y="197" width="0.3887%" height="15" fill="rgb(235,93,37)"/><text x="21.1533%" y="207.50"></text></g><g><title>fn_abi_of_instance (268,473 samples, 0.11%)</title><rect x="21.8642%" y="133" width="0.1088%" height="15" fill="rgb(213,116,39)"/><text x="22.1142%" y="143.50"></text></g><g><title>eval_to_allocation_raw (632,796 samples, 0.26%)</title><rect x="21.7936%" y="165" width="0.2566%" height="15" fill="rgb(222,207,29)"/><text x="22.0436%" y="175.50"></text></g><g><title>eval_to_allocation_raw (628,556 samples, 0.25%)</title><rect x="21.7953%" y="149" width="0.2548%" height="15" fill="rgb(206,96,30)"/><text x="22.0453%" y="159.50"></text></g><g><title>param_env (779,758 samples, 0.32%)</title><rect x="22.1023%" y="165" width="0.3161%" height="15" fill="rgb(218,138,4)"/><text x="22.3523%" y="175.50"></text></g><g><title>predicates_of (354,003 samples, 0.14%)</title><rect x="22.2749%" y="149" width="0.1435%" height="15" fill="rgb(250,191,14)"/><text x="22.5249%" y="159.50"></text></g><g><title>predicates_defined_on (291,083 samples, 0.12%)</title><rect x="22.3004%" y="133" width="0.1180%" height="15" fill="rgb(239,60,40)"/><text x="22.5504%" y="143.50"></text></g><g><title>crate_lints (4,474,699 samples, 1.81%)</title><rect x="21.2930%" y="181" width="1.8142%" height="15" fill="rgb(206,27,48)"/><text x="21.5430%" y="191.50">c..</text></g><g><title>type_of (1,608,779 samples, 0.65%)</title><rect x="22.4549%" y="165" width="0.6523%" height="15" fill="rgb(225,35,8)"/><text x="22.7049%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (1,075,902 samples, 0.44%)</title><rect x="22.6710%" y="149" width="0.4362%" height="15" fill="rgb(250,213,24)"/><text x="22.9210%" y="159.50"></text></g><g><title>layout_of (303,722 samples, 0.12%)</title><rect x="23.4435%" y="133" width="0.1231%" height="15" fill="rgb(247,123,22)"/><text x="23.6935%" y="143.50"></text></g><g><title>lint_checking (5,611,712 samples, 2.28%)</title><rect x="21.2920%" y="197" width="2.2752%" height="15" fill="rgb(231,138,38)"/><text x="21.5420%" y="207.50">l..</text></g><g><title>module_lints (1,134,743 samples, 0.46%)</title><rect x="23.1072%" y="181" width="0.4601%" height="15" fill="rgb(231,145,46)"/><text x="23.3572%" y="191.50"></text></g><g><title>lint_mod (1,121,133 samples, 0.45%)</title><rect x="23.1127%" y="165" width="0.4545%" height="15" fill="rgb(251,118,11)"/><text x="23.3627%" y="175.50"></text></g><g><title>layout_of (340,313 samples, 0.14%)</title><rect x="23.4293%" y="149" width="0.1380%" height="15" fill="rgb(217,147,25)"/><text x="23.6793%" y="159.50"></text></g><g><title>privacy_access_levels (707,418 samples, 0.29%)</title><rect x="23.5672%" y="197" width="0.2868%" height="15" fill="rgb(247,81,37)"/><text x="23.8172%" y="207.50"></text></g><g><title>privacy_checking_modules (1,802,170 samples, 0.73%)</title><rect x="23.8540%" y="197" width="0.7307%" height="15" fill="rgb(209,12,38)"/><text x="24.1040%" y="207.50"></text></g><g><title>check_mod_privacy (1,793,310 samples, 0.73%)</title><rect x="23.8576%" y="181" width="0.7271%" height="15" fill="rgb(227,1,9)"/><text x="24.1076%" y="191.50"></text></g><g><title>misc_checking_3 (9,567,756 samples, 3.88%)</title><rect x="20.7137%" y="213" width="3.8791%" height="15" fill="rgb(248,47,43)"/><text x="20.9637%" y="223.50">misc..</text></g><g><title>impl_trait_ref (359,455 samples, 0.15%)</title><rect x="24.7842%" y="117" width="0.1457%" height="15" fill="rgb(221,10,30)"/><text x="25.0342%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (323,984 samples, 0.13%)</title><rect x="24.7986%" y="101" width="0.1314%" height="15" fill="rgb(210,229,1)"/><text x="25.0486%" y="111.50"></text></g><g><title>adt_destructor (657,567 samples, 0.27%)</title><rect x="24.6826%" y="165" width="0.2666%" height="15" fill="rgb(222,148,37)"/><text x="24.9326%" y="175.50"></text></g><g><title>coherent_trait (647,097 samples, 0.26%)</title><rect x="24.6868%" y="149" width="0.2624%" height="15" fill="rgb(234,67,33)"/><text x="24.9368%" y="159.50"></text></g><g><title>specialization_graph_of (645,987 samples, 0.26%)</title><rect x="24.6873%" y="133" width="0.2619%" height="15" fill="rgb(247,98,35)"/><text x="24.9373%" y="143.50"></text></g><g><title>impl_parent (3,731,148 samples, 1.51%)</title><rect x="27.6210%" y="149" width="1.5127%" height="15" fill="rgb(247,138,52)"/><text x="27.8710%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,210,353 samples, 0.90%)</title><rect x="28.2376%" y="133" width="0.8962%" height="15" fill="rgb(213,79,30)"/><text x="28.4876%" y="143.50"></text></g><g><title>impl_trait_ref (8,200,951 samples, 3.32%)</title><rect x="29.1337%" y="149" width="3.3249%" height="15" fill="rgb(246,177,23)"/><text x="29.3837%" y="159.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,279,979 samples, 2.55%)</title><rect x="29.9125%" y="133" width="2.5461%" height="15" fill="rgb(230,62,27)"/><text x="30.1625%" y="143.50">me..</text></g><g><title>trait_impls_of (1,585,147 samples, 0.64%)</title><rect x="32.4800%" y="149" width="0.6427%" height="15" fill="rgb(216,154,8)"/><text x="32.7300%" y="159.50"></text></g><g><title>implementations_of_trait (536,546 samples, 0.22%)</title><rect x="32.9051%" y="133" width="0.2175%" height="15" fill="rgb(244,35,45)"/><text x="33.1551%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (371,334 samples, 0.15%)</title><rect x="32.9721%" y="117" width="0.1506%" height="15" fill="rgb(251,115,12)"/><text x="33.2221%" y="127.50"></text></g><g><title>coherent_trait (20,866,801 samples, 8.46%)</title><rect x="24.6631%" y="181" width="8.4601%" height="15" fill="rgb(240,54,50)"/><text x="24.9131%" y="191.50">coherent_tra..</text></g><g><title>specialization_graph_of (20,130,963 samples, 8.16%)</title><rect x="24.9614%" y="165" width="8.1618%" height="15" fill="rgb(233,84,52)"/><text x="25.2114%" y="175.50">specializat..</text></g><g><title>coherence_checking (20,998,182 samples, 8.51%)</title><rect x="24.6517%" y="197" width="8.5134%" height="15" fill="rgb(207,117,47)"/><text x="24.9017%" y="207.50">coherence_ch..</text></g><g><title>associated_items (316,965 samples, 0.13%)</title><rect x="43.4517%" y="149" width="0.1285%" height="15" fill="rgb(249,43,39)"/><text x="43.7017%" y="159.50"></text></g><g><title>dropck_outlives (794,709 samples, 0.32%)</title><rect x="43.6138%" y="149" width="0.3222%" height="15" fill="rgb(209,38,44)"/><text x="43.8638%" y="159.50"></text></g><g><title>predicates_of (290,691 samples, 0.12%)</title><rect x="44.7996%" y="133" width="0.1179%" height="15" fill="rgb(236,212,23)"/><text x="45.0496%" y="143.50"></text></g><g><title>trait_impls_of (341,733 samples, 0.14%)</title><rect x="44.9310%" y="133" width="0.1386%" height="15" fill="rgb(242,79,21)"/><text x="45.1810%" y="143.50"></text></g><g><title>evaluate_obligation (2,812,561 samples, 1.14%)</title><rect x="43.9360%" y="149" width="1.1403%" height="15" fill="rgb(211,96,35)"/><text x="44.1860%" y="159.50"></text></g><g><title>method_autoderef_steps (548,075 samples, 0.22%)</title><rect x="45.3155%" y="149" width="0.2222%" height="15" fill="rgb(253,215,40)"/><text x="45.5655%" y="159.50"></text></g><g><title>evaluate_obligation (251,722 samples, 0.10%)</title><rect x="45.4356%" y="133" width="0.1021%" height="15" fill="rgb(211,81,21)"/><text x="45.6856%" y="143.50"></text></g><g><title>predicates_of (290,534 samples, 0.12%)</title><rect x="45.5726%" y="149" width="0.1178%" height="15" fill="rgb(208,190,38)"/><text x="45.8226%" y="159.50"></text></g><g><title>associated_items (288,973 samples, 0.12%)</title><rect x="51.2348%" y="133" width="0.1172%" height="15" fill="rgb(235,213,38)"/><text x="51.4848%" y="143.50"></text></g><g><title>dropck_outlives (261,543 samples, 0.11%)</title><rect x="51.3699%" y="133" width="0.1060%" height="15" fill="rgb(237,122,38)"/><text x="51.6199%" y="143.50"></text></g><g><title>explicit_predicates_of (263,332 samples, 0.11%)</title><rect x="52.2253%" y="85" width="0.1068%" height="15" fill="rgb(244,218,35)"/><text x="52.4753%" y="95.50"></text></g><g><title>predicates_of (326,814 samples, 0.13%)</title><rect x="52.2036%" y="117" width="0.1325%" height="15" fill="rgb(240,68,47)"/><text x="52.4536%" y="127.50"></text></g><g><title>predicates_defined_on (291,724 samples, 0.12%)</title><rect x="52.2178%" y="101" width="0.1183%" height="15" fill="rgb(210,16,53)"/><text x="52.4678%" y="111.50"></text></g><g><title>evaluate_obligation (2,300,987 samples, 0.93%)</title><rect x="51.4781%" y="133" width="0.9329%" height="15" fill="rgb(235,124,12)"/><text x="51.7281%" y="143.50"></text></g><g><title>is_copy_raw (253,080 samples, 0.10%)</title><rect x="52.5356%" y="133" width="0.1026%" height="15" fill="rgb(224,169,11)"/><text x="52.7856%" y="143.50"></text></g><g><title>evaluate_obligation (280,044 samples, 0.11%)</title><rect x="52.8318%" y="117" width="0.1135%" height="15" fill="rgb(250,166,2)"/><text x="53.0818%" y="127.50"></text></g><g><title>method_autoderef_steps (627,235 samples, 0.25%)</title><rect x="52.6944%" y="133" width="0.2543%" height="15" fill="rgb(242,216,29)"/><text x="52.9444%" y="143.50"></text></g><g><title>typeck (18,166,651 samples, 7.37%)</title><rect x="45.7370%" y="149" width="7.3654%" height="15" fill="rgb(230,116,27)"/><text x="45.9870%" y="159.50">typeck</text></g><g><title>item_bodies_checking (49,157,264 samples, 19.93%)</title><rect x="33.1928%" y="197" width="19.9301%" height="15" fill="rgb(228,99,48)"/><text x="33.4428%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (49,153,154 samples, 19.93%)</title><rect x="33.1945%" y="181" width="19.9284%" height="15" fill="rgb(253,11,6)"/><text x="33.4445%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (49,015,872 samples, 19.87%)</title><rect x="33.2501%" y="165" width="19.8727%" height="15" fill="rgb(247,143,39)"/><text x="33.5001%" y="175.50">typeck</text></g><g><title>mir_borrowck (1,618,908 samples, 0.66%)</title><rect x="55.1780%" y="133" width="0.6564%" height="15" fill="rgb(236,97,10)"/><text x="55.4280%" y="143.50"></text></g><g><title>dropck_outlives (453,437 samples, 0.18%)</title><rect x="57.5829%" y="53" width="0.1838%" height="15" fill="rgb(233,208,19)"/><text x="57.8329%" y="63.50"></text></g><g><title>adt_dtorck_constraint (369,715 samples, 0.15%)</title><rect x="57.6169%" y="37" width="0.1499%" height="15" fill="rgb(216,164,2)"/><text x="57.8669%" y="47.50"></text></g><g><title>evaluate_obligation (873,169 samples, 0.35%)</title><rect x="57.7668%" y="53" width="0.3540%" height="15" fill="rgb(220,129,5)"/><text x="58.0168%" y="63.50"></text></g><g><title>is_copy_raw (267,703 samples, 0.11%)</title><rect x="58.1971%" y="53" width="0.1085%" height="15" fill="rgb(242,17,10)"/><text x="58.4471%" y="63.50"></text></g><g><title>mir_built (6,366,511 samples, 2.58%)</title><rect x="55.9747%" y="85" width="2.5812%" height="15" fill="rgb(242,107,0)"/><text x="56.2247%" y="95.50">mi..</text></g><g><title>typeck (5,928,816 samples, 2.40%)</title><rect x="56.1521%" y="69" width="2.4037%" height="15" fill="rgb(251,28,31)"/><text x="56.4021%" y="79.50">ty..</text></g><g><title>mir_built (706,858 samples, 0.29%)</title><rect x="58.5976%" y="69" width="0.2866%" height="15" fill="rgb(233,223,10)"/><text x="58.8476%" y="79.50"></text></g><g><title>mir_const (7,433,052 samples, 3.01%)</title><rect x="55.8707%" y="117" width="3.0136%" height="15" fill="rgb(215,21,27)"/><text x="56.1207%" y="127.50">mir..</text></g><g><title>unsafety_check_result (7,266,171 samples, 2.95%)</title><rect x="55.9383%" y="101" width="2.9460%" height="15" fill="rgb(232,23,21)"/><text x="56.1883%" y="111.50">un..</text></g><g><title>unsafety_check_result (810,039 samples, 0.33%)</title><rect x="58.5559%" y="85" width="0.3284%" height="15" fill="rgb(244,5,23)"/><text x="58.8059%" y="95.50"></text></g><g><title>mir_promoted (7,531,463 samples, 3.05%)</title><rect x="55.8343%" y="133" width="3.0535%" height="15" fill="rgb(226,81,46)"/><text x="56.0843%" y="143.50">mir..</text></g><g><title>type_of (10,427,655 samples, 4.23%)</title><rect x="54.7285%" y="165" width="4.2277%" height="15" fill="rgb(247,70,30)"/><text x="54.9785%" y="175.50">type_..</text></g><g><title>mir_borrowck (10,339,595 samples, 4.19%)</title><rect x="54.7642%" y="149" width="4.1920%" height="15" fill="rgb(212,68,19)"/><text x="55.0142%" y="159.50">mir_b..</text></g><g><title>item_types_checking (15,206,979 samples, 6.17%)</title><rect x="53.1229%" y="197" width="6.1654%" height="15" fill="rgb(240,187,13)"/><text x="53.3729%" y="207.50">item_typ..</text></g><g><title>check_mod_item_types (15,192,519 samples, 6.16%)</title><rect x="53.1287%" y="181" width="6.1596%" height="15" fill="rgb(223,113,26)"/><text x="53.3787%" y="191.50">check_mo..</text></g><g><title>typeck (819,100 samples, 0.33%)</title><rect x="58.9562%" y="165" width="0.3321%" height="15" fill="rgb(206,192,2)"/><text x="59.2062%" y="175.50"></text></g><g><title>fn_sig (681,668 samples, 0.28%)</title><rect x="59.5142%" y="165" width="0.2764%" height="15" fill="rgb(241,108,4)"/><text x="59.7642%" y="175.50"></text></g><g><title>generics_of (525,435 samples, 0.21%)</title><rect x="59.7905%" y="165" width="0.2130%" height="15" fill="rgb(247,173,49)"/><text x="60.0405%" y="175.50"></text></g><g><title>late_bound_vars_map (639,476 samples, 0.26%)</title><rect x="60.2780%" y="117" width="0.2593%" height="15" fill="rgb(224,114,35)"/><text x="60.5280%" y="127.50"></text></g><g><title>resolve_lifetimes (621,916 samples, 0.25%)</title><rect x="60.2852%" y="101" width="0.2521%" height="15" fill="rgb(245,159,27)"/><text x="60.5352%" y="111.50"></text></g><g><title>lint_levels (252,843 samples, 0.10%)</title><rect x="60.4348%" y="85" width="0.1025%" height="15" fill="rgb(245,172,44)"/><text x="60.6848%" y="95.50"></text></g><g><title>explicit_predicates_of (958,452 samples, 0.39%)</title><rect x="60.1599%" y="133" width="0.3886%" height="15" fill="rgb(236,23,11)"/><text x="60.4099%" y="143.50"></text></g><g><title>predicates_of (1,999,944 samples, 0.81%)</title><rect x="60.0438%" y="165" width="0.8108%" height="15" fill="rgb(205,117,38)"/><text x="60.2938%" y="175.50"></text></g><g><title>predicates_defined_on (1,891,244 samples, 0.77%)</title><rect x="60.0878%" y="149" width="0.7668%" height="15" fill="rgb(237,72,25)"/><text x="60.3378%" y="159.50"></text></g><g><title>inferred_outlives_of (754,970 samples, 0.31%)</title><rect x="60.5485%" y="133" width="0.3061%" height="15" fill="rgb(244,70,9)"/><text x="60.7985%" y="143.50"></text></g><g><title>inferred_outlives_crate (711,448 samples, 0.29%)</title><rect x="60.5662%" y="117" width="0.2884%" height="15" fill="rgb(217,125,39)"/><text x="60.8162%" y="127.50"></text></g><g><title>type_of (432,835 samples, 0.18%)</title><rect x="60.6791%" y="101" width="0.1755%" height="15" fill="rgb(235,36,10)"/><text x="60.9291%" y="111.50"></text></g><g><title>type_collecting (4,177,017 samples, 1.69%)</title><rect x="59.2918%" y="197" width="1.6935%" height="15" fill="rgb(251,123,47)"/><text x="59.5418%" y="207.50"></text></g><g><title>collect_mod_item_types (4,153,297 samples, 1.68%)</title><rect x="59.3014%" y="181" width="1.6839%" height="15" fill="rgb(221,13,13)"/><text x="59.5514%" y="191.50"></text></g><g><title>type_of (307,766 samples, 0.12%)</title><rect x="60.8605%" y="165" width="0.1248%" height="15" fill="rgb(238,131,9)"/><text x="61.1105%" y="175.50"></text></g><g><title>adt_sized_constraint (267,262 samples, 0.11%)</title><rect x="63.3387%" y="133" width="0.1084%" height="15" fill="rgb(211,50,8)"/><text x="63.5887%" y="143.50"></text></g><g><title>adt_sized_constraint (379,893 samples, 0.15%)</title><rect x="63.2961%" y="149" width="0.1540%" height="15" fill="rgb(245,182,24)"/><text x="63.5461%" y="159.50"></text></g><g><title>evaluate_obligation (1,363,602 samples, 0.55%)</title><rect x="62.9220%" y="165" width="0.5529%" height="15" fill="rgb(242,14,37)"/><text x="63.1720%" y="175.50"></text></g><g><title>implied_outlives_bounds (534,157 samples, 0.22%)</title><rect x="63.4982%" y="165" width="0.2166%" height="15" fill="rgb(246,228,12)"/><text x="63.7482%" y="175.50"></text></g><g><title>object_safety_violations (438,295 samples, 0.18%)</title><rect x="63.7148%" y="165" width="0.1777%" height="15" fill="rgb(213,55,15)"/><text x="63.9648%" y="175.50"></text></g><g><title>param_env (761,960 samples, 0.31%)</title><rect x="63.8925%" y="165" width="0.3089%" height="15" fill="rgb(209,9,3)"/><text x="64.1425%" y="175.50"></text></g><g><title>region_scope_tree (654,467 samples, 0.27%)</title><rect x="64.2320%" y="165" width="0.2653%" height="15" fill="rgb(230,59,30)"/><text x="64.4820%" y="175.50"></text></g><g><title>check_impl_item_well_formed (8,314,320 samples, 3.37%)</title><rect x="61.1614%" y="181" width="3.3709%" height="15" fill="rgb(209,121,21)"/><text x="61.4114%" y="191.50">che..</text></g><g><title>adt_sized_constraint (397,544 samples, 0.16%)</title><rect x="65.8708%" y="149" width="0.1612%" height="15" fill="rgb(220,109,13)"/><text x="66.1208%" y="159.50"></text></g><g><title>evaluate_obligation (975,368 samples, 0.40%)</title><rect x="65.6682%" y="165" width="0.3954%" height="15" fill="rgb(232,18,1)"/><text x="65.9182%" y="175.50"></text></g><g><title>param_env (553,536 samples, 0.22%)</title><rect x="66.1692%" y="165" width="0.2244%" height="15" fill="rgb(215,41,42)"/><text x="66.4192%" y="175.50"></text></g><g><title>check_item_well_formed (5,071,296 samples, 2.06%)</title><rect x="64.5323%" y="181" width="2.0561%" height="15" fill="rgb(224,123,36)"/><text x="64.7823%" y="191.50">c..</text></g><g><title>analysis (164,038,625 samples, 66.51%)</title><rect x="0.3301%" y="229" width="66.5069%" height="15" fill="rgb(240,125,3)"/><text x="0.5801%" y="239.50">analysis</text></g><g><title>type_check_crate (104,194,843 samples, 42.24%)</title><rect x="24.5928%" y="213" width="42.2442%" height="15" fill="rgb(205,98,50)"/><text x="24.8428%" y="223.50">type_check_crate</text></g><g><title>wf_checking (14,424,949 samples, 5.85%)</title><rect x="60.9886%" y="197" width="5.8484%" height="15" fill="rgb(205,185,37)"/><text x="61.2386%" y="207.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (613,158 samples, 0.25%)</title><rect x="66.5884%" y="181" width="0.2486%" height="15" fill="rgb(238,207,15)"/><text x="66.8384%" y="191.50"></text></g><g><title>codegen_crate (490,695 samples, 0.20%)</title><rect x="66.8414%" y="229" width="0.1989%" height="15" fill="rgb(213,199,42)"/><text x="67.0914%" y="239.50"></text></g><g><title>metadata_load_macro (500,942 samples, 0.20%)</title><rect x="86.0597%" y="181" width="0.2031%" height="15" fill="rgb(235,201,11)"/><text x="86.3097%" y="191.50"></text></g><g><title>metadata_register_crate (9,880,430 samples, 4.01%)</title><rect x="86.2628%" y="181" width="4.0059%" height="15" fill="rgb(207,46,11)"/><text x="86.5128%" y="191.50">meta..</text></g><g><title>metadata_register_crate (1,863,892 samples, 0.76%)</title><rect x="89.5130%" y="165" width="0.7557%" height="15" fill="rgb(241,35,35)"/><text x="89.7630%" y="175.50"></text></g><g><title>metadata_register_crate (429,605 samples, 0.17%)</title><rect x="90.0945%" y="149" width="0.1742%" height="15" fill="rgb(243,32,47)"/><text x="90.3445%" y="159.50"></text></g><g><title>macro_expand_crate (57,212,693 samples, 23.20%)</title><rect x="67.3003%" y="213" width="23.1960%" height="15" fill="rgb(247,202,23)"/><text x="67.5503%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (57,199,713 samples, 23.19%)</title><rect x="67.3056%" y="197" width="23.1907%" height="15" fill="rgb(219,102,11)"/><text x="67.5556%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (561,496 samples, 0.23%)</title><rect x="90.2687%" y="181" width="0.2276%" height="15" fill="rgb(243,110,44)"/><text x="90.5187%" y="191.50"></text></g><g><title>late_resolve_crate (3,181,406 samples, 1.29%)</title><rect x="90.7338%" y="197" width="1.2899%" height="15" fill="rgb(222,74,54)"/><text x="90.9838%" y="207.50"></text></g><g><title>configure_and_expand (61,824,214 samples, 25.07%)</title><rect x="67.0403%" y="229" width="25.0657%" height="15" fill="rgb(216,99,12)"/><text x="67.2903%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (3,837,973 samples, 1.56%)</title><rect x="90.5500%" y="213" width="1.5560%" height="15" fill="rgb(226,22,26)"/><text x="90.8000%" y="223.50"></text></g><g><title>drop_ast (319,604 samples, 0.13%)</title><rect x="92.1060%" y="229" width="0.1296%" height="15" fill="rgb(217,163,10)"/><text x="92.3560%" y="239.50"></text></g><g><title>early_lint_checks (586,626 samples, 0.24%)</title><rect x="92.2456%" y="229" width="0.2378%" height="15" fill="rgb(213,25,53)"/><text x="92.4956%" y="239.50"></text></g><g><title>free_global_ctxt (4,960,155 samples, 2.01%)</title><rect x="92.4834%" y="229" width="2.0110%" height="15" fill="rgb(252,105,26)"/><text x="92.7334%" y="239.50">f..</text></g><g><title>layout_of (329,624 samples, 0.13%)</title><rect x="95.9880%" y="101" width="0.1336%" height="15" fill="rgb(220,39,43)"/><text x="96.2380%" y="111.50"></text></g><g><title>layout_of (360,654 samples, 0.15%)</title><rect x="95.9834%" y="117" width="0.1462%" height="15" fill="rgb(229,68,48)"/><text x="96.2334%" y="127.50"></text></g><g><title>layout_of (381,974 samples, 0.15%)</title><rect x="95.9769%" y="149" width="0.1549%" height="15" fill="rgb(252,8,32)"/><text x="96.2269%" y="159.50"></text></g><g><title>layout_of (376,434 samples, 0.15%)</title><rect x="95.9792%" y="133" width="0.1526%" height="15" fill="rgb(223,20,43)"/><text x="96.2292%" y="143.50"></text></g><g><title>layout_of (486,425 samples, 0.20%)</title><rect x="95.9396%" y="197" width="0.1972%" height="15" fill="rgb(229,81,49)"/><text x="96.1896%" y="207.50"></text></g><g><title>layout_of (455,155 samples, 0.18%)</title><rect x="95.9523%" y="181" width="0.1845%" height="15" fill="rgb(236,28,36)"/><text x="96.2023%" y="191.50"></text></g><g><title>layout_of (422,254 samples, 0.17%)</title><rect x="95.9656%" y="165" width="0.1712%" height="15" fill="rgb(249,185,26)"/><text x="96.2156%" y="175.50"></text></g><g><title>needs_drop_raw (388,064 samples, 0.16%)</title><rect x="96.6564%" y="181" width="0.1573%" height="15" fill="rgb(249,174,33)"/><text x="96.9064%" y="191.50"></text></g><g><title>is_copy_raw (310,962 samples, 0.13%)</title><rect x="96.6877%" y="165" width="0.1261%" height="15" fill="rgb(233,201,37)"/><text x="96.9377%" y="175.50"></text></g><g><title>evaluate_obligation (257,822 samples, 0.10%)</title><rect x="96.7092%" y="149" width="0.1045%" height="15" fill="rgb(221,78,26)"/><text x="96.9592%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,755,210 samples, 0.71%)</title><rect x="96.1368%" y="197" width="0.7116%" height="15" fill="rgb(250,127,30)"/><text x="96.3868%" y="207.50"></text></g><g><title>optimized_mir (3,273,557 samples, 1.33%)</title><rect x="95.5223%" y="213" width="1.3272%" height="15" fill="rgb(230,49,44)"/><text x="95.7723%" y="223.50"></text></g><g><title>generate_crate_metadata (5,877,835 samples, 2.38%)</title><rect x="94.4945%" y="229" width="2.3831%" height="15" fill="rgb(229,67,23)"/><text x="94.7445%" y="239.50">ge..</text></g><g><title>hir_lowering (5,251,328 samples, 2.13%)</title><rect x="96.8775%" y="229" width="2.1291%" height="15" fill="rgb(249,83,47)"/><text x="97.1275%" y="239.50">h..</text></g><g><title>parse_crate (336,274 samples, 0.14%)</title><rect x="99.0331%" y="229" width="0.1363%" height="15" fill="rgb(215,43,3)"/><text x="99.2831%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,280,024 samples, 0.52%)</title><rect x="99.2626%" y="229" width="0.5190%" height="15" fill="rgb(238,154,13)"/><text x="99.5126%" y="239.50"></text></g><g><title>all (246,648,889 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (246,648,889 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (425,765 samples, 0.17%)</title><rect x="99.8274%" y="229" width="0.1726%" height="15" fill="rgb(235,30,7)"/><text x="100.0774%" y="239.50"></text></g></svg></svg>